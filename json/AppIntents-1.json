[
  {
    "title": "navigationDestination(for:destination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationdestination(for:destination:)",
    "html": "Parameters\ndata\n\nThe type of data that this destination matches.\n\ndestination\n\nA view builder that defines a view to display when the stack’s navigation state contains a value of type data. The closure takes one argument, which is the value of the data to present.\n\nDiscussion\n\nAdd this view modifer to a view inside a NavigationStack to describe the view that the stack displays when presenting a particular kind of data. Use a NavigationLink to present the data. For example, you can present a ColorDetail view for each presentation of a Color instance:\n\nNavigationStack {\n    List {\n        NavigationLink(\"Mint\", value: Color.mint)\n        NavigationLink(\"Pink\", value: Color.pink)\n        NavigationLink(\"Teal\", value: Color.teal)\n    }\n    .navigationDestination(for: Color.self) { color in\n        ColorDetail(color: color)\n    }\n    .navigationTitle(\"Colors\")\n}\n\n\nYou can add more than one navigation destination modifier to the stack if it needs to present more than one kind of data.\n\nDo not put a navigation destination modifier inside a “lazy” container, like List or LazyVStack. These containers create child views only when needed to render on screen. Add the navigation destination modifier outside these containers so that the navigation stack can always see the destination."
  },
  {
    "title": "navigationSubtitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationsubtitle(_:)-3cbg5",
    "html": "Parameters\nsubtitle\n\nThe subtitle to display.\n\nDiscussion\n\nA view’s navigation subtitle is used to provide additional contextual information alongside the navigation title. On macOS, the primary destination’s subtitle is displayed with the navigation title in the titlebar."
  },
  {
    "title": "offset(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/offset(_:)",
    "html": "Parameters\noffset\n\nThe distance to offset this view.\n\nReturn Value\n\nA view that offsets this view by offset.\n\nDiscussion\n\nUse offset(_:) to shift the displayed contents by the amount specified in the offset parameter.\n\nThe original dimensions of the view aren’t changed by offsetting the contents; in the example below the gray border drawn by this view surrounds the original position of the text:\n\nText(\"Offset by passing CGSize()\")\n    .border(Color.green)\n    .offset(CGSize(width: 20, height: 25))\n    .border(Color.gray)\n"
  },
  {
    "title": "navigationViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationviewstyle(_:)",
    "html": "Discussion\n\nUse this modifier to change the appearance and behavior of navigation views. For example, by default, navigation views appear with multiple columns in wider environments, like iPad in landscape orientation:\n\nYou can apply the NavigationViewStyle/stack style to force single-column stack navigation in these environments:\n\nNavigationView {\n    List {\n        NavigationLink(\"Purple\", destination: ColorDetail(color: .purple))\n        NavigationLink(\"Pink\", destination: ColorDetail(color: .pink))\n        NavigationLink(\"Orange\", destination: ColorDetail(color: .orange))\n    }\n    .navigationTitle(\"Colors\")\n\n\n    Text(\"Select a Color\") // A placeholder to show before selection.\n}\n.navigationViewStyle(.stack)\n"
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationtitle(_:)-f89w",
    "html": "Parameters\ntitle\n\nThe view to display.\n\nDiscussion\n\nA view’s navigation title is used to visually display the current navigation state of an interface. On iOS and watchOS, when a view is navigated to inside of a navigation view, that view’s title is displayed in the navigation bar. On iPadOS, the primary destination’s navigation title is reflected as the window’s title in the App Switcher. Similarly on macOS, the primary destination’s title is used as the window title in the titlebar, Windows menu and Mission Control."
  },
  {
    "title": "navigationBarTitle(_:displayMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbartitle(_:displaymode:)-a4gh",
    "html": "Parameters\ntitleKey\n\nA key to a localized description of this view to display in the navigation bar.\n\ndisplayMode\n\nThe style to use for displaying the navigation bar title.\n\nDiscussion\n\nUse navigationBarTitle(_:displayMode:) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem/TitleDisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a string. The navigation bar title’s NavigationBarItem/TitleDisplayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(\"Today's Flavors\", displayMode: .inline)\n        }\n    }\n}\n\n\nIf the titleKey can’t be found, the title uses the text of the key name instead."
  },
  {
    "title": "navigationDestination(isPresented:destination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationdestination(ispresented:destination:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\ndestination\n\nA view to present.\n\nDiscussion\n\nIn general, favor binding a path to a navigation stack for programmatic navigation. Add this view modifer to a view inside a NavigationStack to programmatically push a single view onto the stack. This is useful for building components that can push an associated view. For example, you can present a ColorDetail view for a particular color:\n\n@State private var showDetails = false\nvar favoriteColor: Color\n\n\nNavigationStack {\n    VStack {\n        Circle()\n            .fill(favoriteColor)\n        Button(\"Show details\") {\n            showDetails = true\n        }\n    }\n    .navigationDestination(isPresented: $showDetails) {\n        ColorDetail(color: favoriteColor)\n    }\n    .navigationTitle(\"My Favorite Color\")\n}\n\n\nDo not put a navigation destination modifier inside a “lazy” container, like List or LazyVStack. These containers create child views only when needed to render on screen. Add the navigation destination modifier outside these containers so that the navigation stack can always see the destination."
  },
  {
    "title": "navigationBarTitleDisplayMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbartitledisplaymode(_:)",
    "html": "Parameters\ndisplayMode\n\nThe style to use for displaying the title."
  },
  {
    "title": "navigationSubtitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationsubtitle(_:)-4cfgv",
    "html": "Parameters\ntitle\n\nThe subtitle to display.\n\nDiscussion\n\nA view’s navigation subtitle is used to provide additional contextual information alongside the navigation title. On macOS, the primary destination’s subtitle is displayed with the navigation title in the titlebar."
  },
  {
    "title": "navigationSubtitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationsubtitle(_:)-3ep8c",
    "html": "Parameters\nsubtitleKey\n\nThe key to a localized string to display.\n\nDiscussion\n\nA view’s navigation subtitle is used to provide additional contextual information alongside the navigation title. On macOS, the primary destination’s subtitle is displayed with the navigation title in the titlebar."
  },
  {
    "title": "onAppear(perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onappear(perform:)",
    "html": "Parameters\naction\n\nThe action to perform. If action is nil, the call has no effect.\n\nReturn Value\n\nA view that triggers action before it appears.\n\nDiscussion\n\nThe exact moment that SwiftUI calls this method depends on the specific view type that you apply it to, but the action closure completes before the first rendered frame appears."
  },
  {
    "title": "navigationBarTitle(_:displayMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbartitle(_:displaymode:)-6z4in",
    "html": "Parameters\ntitle\n\nA title for this view to display in the navigation bar.\n\ndisplayMode\n\nThe way to display the title.\n\nDiscussion\n\nUse navigationBarTitle(_:displayMode:) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem.Title.DisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, navigationBarTitle(_:displayMode:) uses a string to provide a title for the navigation bar. Setting the title’s displayMode to .inline places the navigation bar title within the bounds of the navigation bar.\n\nIn the example below, text for the navigation bar title is provided using a string. The navigation bar title’s displayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    let title = \"Today's Flavors\"\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(title, displayMode: .inline)\n        }\n    }\n}\n\n\n![A screenshot of a navigation bar, showing the title within the bounds of the navigation bar] (SwiftUI-navigationBarTitle-stringProtocol.png)"
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationtitle(_:)-8glz7",
    "html": "Parameters\ntitle\n\nThe string to display.\n\nDiscussion\n\nA view’s navigation title is used to visually display the current navigation state of an interface. On iOS and watchOS, when a view is navigated to inside of a navigation view, that view’s title is displayed in the navigation bar. On iPadOS, the primary destination’s navigation title is reflected as the window’s title in the App Switcher. Similarly on macOS, the primary destination’s title is used as the window title in the titlebar, Windows menu and Mission Control.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation title modifiers."
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationtitle(_:)-9gysv",
    "html": "Parameters\ntitle\n\nThe text of the title.\n\nDiscussion\n\nIn iOS, iPadOS, and macOS, this allows editing the navigation title when the title is displayed in the toolbar.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation title modifiers."
  },
  {
    "title": "navigationBarTitle(_:displayMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbartitle(_:displaymode:)-6zfhs",
    "html": "Parameters\ntitle\n\nA title for this view to display in the navigation bar.\n\ndisplayMode\n\nThe style to use for displaying the navigation bar title.\n\nDiscussion\n\nUse navigationBarTitle(_:displayMode:) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem/TitleDisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a Text view. The navigation bar title’s NavigationBarItem/TitleDisplayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n   let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                \"Pistachio\"]\n   var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(Text(\"Today's Flavors\", displayMode: .inline)\n        }\n    }\n}\n"
  },
  {
    "title": "navigationDestination(item:destination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationdestination(item:destination:)",
    "html": "Parameters\nitem\n\nA binding to the data presented, or nil if nothing is currently presented.\n\ndestination\n\nA view builder that defines a view to display when item is not nil.\n\nDiscussion\n\nAdd this view modifer to a view inside a NavigationStack or NavigationSplitView to describe the view that the stack displays when presenting a particular kind of data. Programmatically update the binding to display or remove the view. For example, you can replace the view showing in the detail column of a navigation split view:\n\n@State private var colorShown: Color?\n\n\nNavigationSplitView {\n    List {\n        Button(\"Mint\") { colorShown = .mint }\n        Button(\"Pink\") { colorShown = .pink }\n        Button(\"Teal\") { colorShown = .teal }\n    }\n    .navigationDestination(item: $colorShown) { color in\n        ColorDetail(color: color)\n    }\n} detail: {\n    Text(\"Select a color\")\n}\n\n\nWhen the person using the app taps on the Mint button, the mint color shows in the detail and colorShown gets the value Color.mint. You can reset the navigation split view to show the message “Select a color” by setting colorShown back to nil.\n\nYou can add more than one navigation destination modifier to the stack if it needs to present more than one kind of data.\n\nDo not put a navigation destination modifier inside a “lazy” container, like List or LazyVStack. These containers create child views only when needed to render on screen. Add the navigation destination modifier outside these containers so that the navigation split view can always see the destination."
  },
  {
    "title": "navigationDocument(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationdocument(_:)",
    "html": "Parameters\ndocument\n\nThe URL content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "navigationDocument(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationdocument(_:preview:)-1ghmc",
    "html": "Parameters\ndocument\n\nThe transferable content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "navigationDocument(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationdocument(_:preview:)-3jmo4",
    "html": "Parameters\ndocument\n\nThe transferable content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "navigationDocument(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationdocument(_:preview:)-850xe",
    "html": "Parameters\ndocument\n\nThe transferable content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "navigationDocument(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationdocument(_:preview:)-60ku2",
    "html": "Parameters\ndocument\n\nThe transferable content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "navigationSplitViewColumnWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationsplitviewcolumnwidth(_:)",
    "html": "Discussion\n\nApply this modifier to the content of a column in a NavigationSplitView to specify a fixed preferred width for the column. Use View/navigationSplitViewColumnWidth(min:ideal:max:) if you need to specify a flexible width.\n\nThe following example shows a three-column navigation split view where the first column has a preferred width of 150 points, and the second column has a flexible, preferred width between 150 and 400 points:\n\nNavigationSplitView {\n    MySidebar()\n        .navigationSplitViewColumnWidth(150)\n} contents: {\n    MyContents()\n        .navigationSplitViewColumnWidth(\n            min: 150, ideal: 200, max: 400)\n} detail: {\n    MyDetail()\n}\n\n\nOnly some platforms enable resizing columns. If you specify a width that the current presentation environment doesn’t support, SwiftUI may use a different width for your column."
  },
  {
    "title": "navigationSplitViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationsplitviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to set.\n\nReturn Value\n\nA view that uses the specified navigation split view style."
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationtitle(_:)-177pz",
    "html": "Parameters\ntitleKey\n\nThe key to a localized string to display.\n\nDiscussion\n\nA view’s navigation title is used to visually display the current navigation state of an interface. On iOS and watchOS, when a view is navigated to inside of a navigation view, that view’s title is displayed in the navigation bar. On iPadOS, the primary destination’s navigation title is reflected as the window’s title in the App Switcher. Similarly on macOS, the primary destination’s title is used as the window title in the titlebar, Windows menu and Mission Control.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation title modifiers."
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationtitle(_:)-49aqv",
    "html": "Parameters\ntitle\n\nThe title to display.\n\nDiscussion\n\nA view’s navigation title is used to visually display the current navigation state of an interface. On iOS and watchOS, when a view is navigated to inside of a navigation view, that view’s title is displayed in the navigation bar. On iPadOS, the primary destination’s navigation title is reflected as the window’s title in the App Switcher. Similarly on macOS, the primary destination’s title is used as the window title in the titlebar, Windows menu and Mission Control.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation title modifiers."
  },
  {
    "title": "onChange(of:initial:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onchange(of:initial:_:)-18r0d",
    "html": "Parameters\nvalue\n\nThe value to check against when determining whether to run the closure.\n\ninitial\n\nWhether the action should be run when this view initially appears.\n\naction\n\nA closure to run when the value changes.\n\noldValue\n\nThe old value that failed the comparison check (or the initial value when requested).\n\nnewValue\n\nThe new value that failed the comparison check.\n\nReturn Value\n\nA view that fires an action when the specified value changes.\n\nDiscussion\n\nYou can use onChange to trigger a side effect as the result of a value changing, such as an Environment key or a Binding.\n\nThe system may call the action closure on the main actor, so avoid long-running tasks in the closure. If you need to perform such tasks, detach an asynchronous background task.\n\nWhen the value changes, the new version of the closure will be called, so any captured values will have their values from the time that the observed value has its new value. The old and new observed values are passed into the closure. In the following code example, PlayerView passes both the old and new values to the model.\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var playState: PlayState = .paused\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n            Text(episode.showTitle)\n            PlayButton(playState: $playState)\n        }\n        .onChange(of: playState) { oldState, newState in\n            model.playStateDidChange(from: oldState, to: newState)\n        }\n    }\n}\n"
  },
  {
    "title": "onContinueUserActivity(_:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/oncontinueuseractivity(_:perform:)",
    "html": "Parameters\nactivityType\n\nThe type of activity to handle.\n\naction\n\nA function to call that takes a NSUserActivity object as its parameter when delivering the activity to the scene or window the view is in."
  },
  {
    "title": "onChange(of:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onchange(of:perform:)",
    "html": "Deprecated\n\nUse `onChange` with a two or zero parameter action closure instead.\n\nParameters\nvalue\n\nThe value to check when determining whether to run the closure. The value must conform to the Equatable protocol.\n\naction\n\nA closure to run when the value changes. The closure takes a newValue parameter that indicates the updated value.\n\nReturn Value\n\nA view that runs an action when the specified value changes.\n\nDiscussion\n\nUse this modifier to run a closure when a value like an Environment value or a Binding changes. For example, you can clear a cache when you notice that the view’s scene moves to the background:\n\nstruct ContentView: View {\n    @Environment(\\.scenePhase) private var scenePhase\n    @StateObject private var cache = DataCache()\n\n\n    var body: some View {\n        MyView()\n            .onChange(of: scenePhase) { newScenePhase in\n                if newScenePhase == .background {\n                    cache.empty()\n                }\n            }\n    }\n}\n\n\nSwiftUI passes the new value into the closure. You can also capture the previous value to compare it to the new value. For example, in the following code example, PlayerView passes both the old and new values to the model.\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var playState: PlayState = .paused\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n            Text(episode.showTitle)\n            PlayButton(playState: $playState)\n        }\n        .onChange(of: playState) { [playState] newState in\n            model.playStateDidChange(from: playState, to: newState)\n        }\n    }\n}\n\n\nThe system may call the action closure on the main actor, so avoid long-running tasks in the closure. If you need to perform such tasks, detach an asynchronous background task.\n\nImportant: This modifier is deprecated and has been replaced with new versions that include either zero or two parameters within the closure, unlike this version that includes one parameter. This deprecated version and the new versions behave differently with respect to how they execute the action closure, specifically when the closure captures other values. Using the deprecated API, the closure is run with captured values that represent the “old” state. With the replacement API, the closure is run with captured values that represent the “new” state, which makes it easier to correctly perform updates that rely on supplementary values (that may or may not have changed) in addition to the changed value that triggered the action.\n\nImportant\n\nThis modifier is deprecated and has been replaced with new versions that include either zero or two parameters within the closure, unlike this version that includes one parameter. This deprecated version and the new versions behave differently with respect to how they execute the action closure, specifically when the closure captures other values. Using the deprecated API, the closure is run with captured values that represent the “old” state. With the replacement API, the closure is run with captured values that represent the “new” state, which makes it easier to correctly perform updates that rely on supplementary values (that may or may not have changed) in addition to the changed value that triggered the action."
  },
  {
    "title": "navigationBarTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbartitle(_:)-89c2e",
    "html": "Parameters\ntitle\n\nA title for this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar using a String. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a string:\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    let text = \"Today's Flavors\"\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(text)\n        }\n    }\n}\n"
  },
  {
    "title": "offset(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/offset(x:y:)",
    "html": "Parameters\nx\n\nThe horizontal distance to offset this view.\n\ny\n\nThe vertical distance to offset this view.\n\nReturn Value\n\nA view that offsets this view by x and y.\n\nDiscussion\n\nUse offset(x:y:) to shift the displayed contents by the amount specified in the x and y parameters.\n\nThe original dimensions of the view aren’t changed by offsetting the contents; in the example below the gray border drawn by this view surrounds the original position of the text:\n\nText(\"Offset by passing horizontal & vertical distance\")\n    .border(Color.green)\n    .offset(x: 20, y: 50)\n    .border(Color.gray)\n"
  },
  {
    "title": "onChange(of:initial:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onchange(of:initial:_:)-8lkyg",
    "html": "Parameters\nvalue\n\nThe value to check against when determining whether to run the closure.\n\ninitial\n\nWhether the action should be run when this view initially appears.\n\naction\n\nA closure to run when the value changes.\n\nReturn Value\n\nA view that fires an action when the specified value changes.\n\nDiscussion\n\nYou can use onChange to trigger a side effect as the result of a value changing, such as an Environment key or a Binding.\n\nThe system may call the action closure on the main actor, so avoid long-running tasks in the closure. If you need to perform such tasks, detach an asynchronous background task.\n\nWhen the value changes, the new version of the closure will be called, so any captured values will have their values from the time that the observed value has its new value. In the following code example, PlayerView calls into its model when playState changes model.\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var playState: PlayState = .paused\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n            Text(episode.showTitle)\n            PlayButton(playState: $playState)\n        }\n        .onChange(of: playState) {\n            model.playStateDidChange(state: playState)\n        }\n    }\n}\n"
  },
  {
    "title": "monospaced(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/monospaced(_:)",
    "html": "Return Value\n\nA view whose child views’ fonts use fixed-width characters, while leaving other characters proportionally spaced.\n\nDiscussion\n\nIf a child view’s base font doesn’t support fixed-width, the font remains unchanged."
  },
  {
    "title": "navigationBarTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbartitle(_:)-a4mx",
    "html": "Parameters\ntitle\n\nA description of this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nThe example below shows setting the title of the navigation bar using a Text view:\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(Text(\"Today's Flavors\"))\n        }\n    }\n}\n"
  },
  {
    "title": "listRowSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listrowspacing(_:)",
    "html": "Parameters\nspacing\n\nThe spacing value to use. A value of nil uses the default spacing.\n\nDiscussion\n\nThe following example creates a List with 10 pts of spacing between each row:\n\nList {\n    Text(\"Blue\")\n    Text(\"Red\")\n}\n.listRowSpacing(10.0)\n"
  },
  {
    "title": "navigationSplitViewColumnWidth(min:ideal:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationsplitviewcolumnwidth(min:ideal:max:)",
    "html": "Discussion\n\nApply this modifier to the content of a column in a NavigationSplitView to specify a preferred flexible width for the column. Use View/navigationSplitViewColumnWidth(_:) if you need to specify a fixed width.\n\nThe following example shows a three-column navigation split view where the first column has a preferred width of 150 points, and the second column has a flexible, preferred width between 150 and 400 points:\n\nNavigationSplitView {\n    MySidebar()\n        .navigationSplitViewColumnWidth(150)\n} contents: {\n    MyContents()\n        .navigationSplitViewColumnWidth(\n            min: 150, ideal: 200, max: 400)\n} detail: {\n    MyDetail()\n}\n\n\nOnly some platforms enable resizing columns. If you specify a width that the current presentation environment doesn’t support, SwiftUI may use a different width for your column."
  },
  {
    "title": "navigationBarBackButtonHidden(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbarbackbuttonhidden(_:)",
    "html": "Parameters\nhidesBackButton\n\nA Boolean value that indicates whether to hide the back button. The default value is true.\n\nDiscussion\n\nUse navigationBarBackButtonHidden(_:) to hide the back button for this view.\n\nThis modifier only takes effect when this view is inside of and visible within a NavigationView."
  },
  {
    "title": "onContinuousHover(coordinateSpace:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/oncontinuoushover(coordinatespace:perform:)",
    "html": "Parameters\ncoordinateSpace\n\nThe coordinate space for the location values. Defaults to CoordinateSpace/local.\n\naction\n\nThe action to perform whenever the pointer enters, moves within, or exits the view’s bounds. The action closure passes the HoverPhase/active(_:) phase with the pointer’s coordinates if the pointer is in the view’s bounds; otherwise, it passes HoverPhase/ended.\n\nReturn Value\n\nA view that calls action when the pointer enters, moves within, or exits the view’s bounds.\n\nDiscussion\n\nCall this method to define a region for detecting pointer movement with the size and position of this view. The following example updates hoverLocation and isHovering to be based on the phase provided to the closure:\n\n@State private var hoverLocation: CGPoint = .zero\n@State private var isHovering = false\n\n\nvar body: some View {\n    VStack {\n        Color.red\n            .frame(width: 400, height: 400)\n            .onContinuousHover { phase in\n                switch phase {\n                case .active(let location):\n                    hoverLocation = location\n                    isHovering = true\n                case .ended:\n                    isHovering = false\n                }\n            }\n            .overlay {\n                Rectangle()\n                    .frame(width: 50, height: 50)\n                    .foregroundColor(isHovering ? .green : .blue)\n                    .offset(x: hoverLocation.x, y: hoverLocation.y)\n            }\n    }\n}\n"
  },
  {
    "title": "navigationBarTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbartitle(_:)-1dovc",
    "html": "Parameters\ntitleKey\n\nA key to a localized description of this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar using a LocalizedStringKey that will be used to search for a matching localized string in the application’s localizable strings assets.\n\nThis modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, a string constant is used to access a LocalizedStringKey that will be resolved at run time to provide a title for the navigation bar. If the localization key cannot be resolved, the text of the key name will be used as the title text.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(\"Today's Flavors\")\n        }\n    }\n}\n"
  },
  {
    "title": "menuStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/menustyle(_:)",
    "html": "Discussion\n\nTo set a specific style for all menu instances within a view, use the menuStyle(_:) modifier:\n\nMenu(\"PDF\") {\n    Button(\"Open in Preview\", action: openInPreview)\n    Button(\"Save as PDF\", action: saveAsPDF)\n}\n.menuStyle(ButtonMenuStyle())\n"
  },
  {
    "title": "navigationBarHidden(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/navigationbarhidden(_:)",
    "html": "Parameters\nhidden\n\nA Boolean value that indicates whether to hide the navigation bar.\n\nDiscussion\n\nUse navigationBarHidden(_:) to hide the navigation bar. This modifier only takes effect when this view is inside of and visible within a NavigationView."
  },
  {
    "title": "onDisappear(perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondisappear(perform:)",
    "html": "Parameters\naction\n\nThe action to perform. If action is nil, the call has no effect.\n\nReturn Value\n\nA view that triggers action after it disappears.\n\nDiscussion\n\nThe exact moment that SwiftUI calls this method depends on the specific view type that you apply it to, but the action closure doesn’t execute until the view disappears from the interface."
  },
  {
    "title": "listSectionSeparator(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listsectionseparator(_:edges:)",
    "html": "Parameters\nvisibility\n\nThe visibility of this section’s separators.\n\nedges\n\nThe set of row edges for which the preference applies. The list style might already decide to not display separators for some edges. The default is VerticalEdge/Set/all.\n\nDiscussion\n\nSeparators can be presented above and below a section. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter of the separator visibility.\n\nThe following example shows a simple grouped list whose bottom sections separator are hidden:\n\nList {\n    ForEach(garage) { garage in\n        Section(header: Text(garage.location)) {\n            ForEach(garage.cars) { car in\n                Text(car.model)\n                    .listRowSeparatorTint(car.brandColor)\n            }\n        }\n        .listSectionSeparator(.hidden, edges: .bottom)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the visibility and tint color for a row separator, use View/listRowSeparator(_:edges:) and View/listRowSeparatorTint(_:edges:). To set the tint color for a section separator, use View/listSectionSeparatorTint(_:edges:)."
  },
  {
    "title": "keyboardShortcut(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/keyboardshortcut(_:)-15l70",
    "html": "Discussion\n\nPressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.\n\nThe target of a keyboard shortcut is resolved in a leading-to-trailing traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\n\nIf multiple controls are associated with the same shortcut, the first one found is used. If the provided shortcut is nil, the modifier will have no effect."
  },
  {
    "title": "listRowSeparatorTint(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listrowseparatortint(_:edges:)",
    "html": "Parameters\ncolor\n\nThe color to use to tint the row separators, or nil to use the default color for the current list style.\n\nedges\n\nThe set of row edges for which the tint applies. The list style might decide to not display certain separators, typically the top edge. The default is VerticalEdge/Set/all.\n\nDiscussion\n\nSeparators can be presented above and below a row. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter for the separator tint.\n\nThe following example shows a simple grouped list whose row separators are tinted based on row-specific data:\n\nList {\n    ForEach(garage.cars) { car in\n        Text(car.model)\n            .listRowSeparatorTint(car.brandColor)\n    }\n}\n.listStyle(.grouped)\n\n\nTo hide a row separators, use View/listRowSeparator(_:edges:). To hide or change the tint color for a section separator, use View/listSectionSeparator(_:edges:) and View/listSectionSeparatorTint(_:edges:)."
  },
  {
    "title": "listSectionSeparatorTint(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listsectionseparatortint(_:edges:)",
    "html": "Parameters\ncolor\n\nThe color to use to tint the section separators, or nil to use the default color for the current list style.\n\nedges\n\nThe set of row edges for which the tint applies. The list style might decide to not display certain separators, typically the top edge. The default is VerticalEdge/Set/all.\n\nDiscussion\n\nSeparators can be presented above and below a section. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter for the separator tint.\n\nThe following example shows a simple grouped list whose section separators are tinted based on section-specific data:\n\nList {\n    ForEach(garage) { garage in\n        Section(header: Text(garage.location)) {\n            ForEach(garage.cars) { car in\n                Text(car.model)\n                    .listRowSeparatorTint(car.brandColor)\n            }\n        }\n        .listSectionSeparatorTint(\n            garage.cars.last?.brandColor, edges: .bottom)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the visibility and tint color for a row separator, use View/listRowSeparator(_:edges:) and View/listRowSeparatorTint(_:edges:). To hide a section separator, use View/listSectionSeparator(_:edges:)."
  },
  {
    "title": "listSectionSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listsectionspacing(_:)-18ydr",
    "html": "Parameters\nspacing\n\nthe amount of spacing to apply.\n\nDiscussion\n\nThe following example creates a List with 5 pts of spacing between sections:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n.listSectionSpacing(5.0)\n\n\nSpacing can also be specified on a per-section basis. The following example creates a List with compact spacing for its second section:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Borders\") {\n        Text(\"Dashed\")\n        Text(\"Solid\")\n    }\n    .listSectionSpacing(.compact)\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n\n\nIf adjacent sections have different spacing value, the smaller value on the shared edge is used. Spacing specified inside the List is preferred over any List-wide value."
  },
  {
    "title": "listSectionSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listsectionspacing(_:)-ggpd",
    "html": "Discussion\n\nPass .default for the default spacing, or use .compact for a compact appearance between sections.\n\nThe following example creates a List with compact spacing between sections:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n.listSectionSpacing(.compact)\n"
  },
  {
    "title": "luminanceToAlpha() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/luminancetoalpha()",
    "html": "Return Value\n\nA view with the luminance to alpha effect applied.\n\nDiscussion\n\nUse this modifier to create a semitransparent mask, with the opacity of each part of the modified view controlled by the luminance of the corresponding part of the original view. Regions of lower luminance become more transparent, while higher luminance yields greater opacity.\n\nIn particular, the modifier maps the red, green, and blue components of each input pixel’s color to a grayscale value, and that value becomes the alpha component of a black pixel in the output. This modifier produces an effect that’s equivalent to using the feColorMatrix filter primitive with the luminanceToAlpha type attribute, as defined by the Scalable Vector Graphics (SVG) 2 specification.\n\nThe example below defines a Palette view as a series of rectangles, each composed as a Color with a particular white value, and then displays two versions of the palette over a blue background:\n\nstruct Palette: View {\n    var body: some View {\n        HStack(spacing: 0) {\n            ForEach(0..<10) { index in\n                Color(white: Double(index) / Double(9))\n                    .frame(width: 20, height: 40)\n            }\n        }\n    }\n}\n\n\nstruct LuminanceToAlphaExample: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            Palette()\n\n\n            Palette()\n                .luminanceToAlpha()\n        }\n        .padding()\n        .background(.blue)\n    }\n}\n\n\nThe unmodified version of the palette contains rectangles that range from solid black to solid white, thus with increasing luminance. The second version of the palette, which has the luminanceToAlpha() modifier applied, allows the background to show through in an amount that corresponds inversely to the luminance of the input."
  },
  {
    "title": "mask(alignment:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/mask(alignment:_:)",
    "html": "Parameters\nalignment\n\nThe alignment for mask in relation to this view.\n\nmask\n\nThe view whose alpha the rendering system applies to the specified view.\n\nDiscussion\n\nUse mask(_:) when you want to apply the alpha (opacity) value of another view to the current view.\n\nThis example shows an image masked by rectangle with a 10% opacity:\n\nImage(systemName: \"envelope.badge.fill\")\n    .foregroundColor(Color.blue)\n    .font(.system(size: 128, weight: .regular))\n    .mask {\n        Rectangle().opacity(0.1)\n    }\n"
  },
  {
    "title": "mask(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/mask(_:)",
    "html": "Parameters\nmask\n\nThe view whose alpha the rendering system applies to the specified view.\n\nDiscussion\n\nUse mask(_:) when you want to apply the alpha (opacity) value of another view to the current view.\n\nThis example shows an image masked by rectangle with a 10% opacity:\n\nImage(systemName: \"envelope.badge.fill\")\n    .foregroundColor(Color.blue)\n    .font(.system(size: 128, weight: .regular))\n    .mask(Rectangle().opacity(0.1))\n"
  },
  {
    "title": "matchedGeometryEffect(id:in:properties:anchor:isSource:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/matchedgeometryeffect(id:in:properties:anchor:issource:)",
    "html": "Parameters\nid\n\nThe identifier, often derived from the identifier of the data being displayed by the view.\n\nnamespace\n\nThe namespace in which defines the id. New namespaces are created by adding an @Namespace variable to a View type and reading its value in the view’s body method.\n\nproperties\n\nThe properties to copy from the source view.\n\nanchor\n\nThe relative location in the view used to produce its shared position value.\n\nisSource\n\nTrue if the view should be used as the source of geometry for other views in the group.\n\nReturn Value\n\nA new view that defines an entry in the global database of views synchronizing their geometry.\n\nDiscussion\n\nThis method sets the geometry of each view in the group from the inserted view with isSource = true (known as the “source” view), updating the values marked by properties.\n\nIf inserting a view in the same transaction that another view with the same key is removed, the system will interpolate their frame rectangles in window space to make it appear that there is a single view moving from its old position to its new position. The usual transition mechanisms define how each of the two views is rendered during the transition (e.g. fade in/out, scale, etc), the matchedGeometryEffect() modifier only arranges for the geometry of the views to be linked, not their rendering.\n\nIf the number of currently-inserted views in the group with isSource = true is not exactly one results are undefined, due to it not being clear which is the source view."
  },
  {
    "title": "minimumScaleFactor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/minimumscalefactor(_:)",
    "html": "Parameters\nfactor\n\nA fraction between 0 and 1 (inclusive) you use to specify the minimum amount of text scaling that this view permits.\n\nReturn Value\n\nA view that limits the amount of text downscaling.\n\nDiscussion\n\nUse the minimumScaleFactor(_:) modifier if the text you place in a view doesn’t fit and it’s okay if the text shrinks to accommodate. For example, a label with a minimum scale factor of 0.5 draws its text in a font size as small as half of the actual font if needed.\n\nIn the example below, the HStack contains a Text label with a line limit of 1, that is next to a TextField. To allow the label to fit into the available space, the minimumScaleFactor(_:) modifier shrinks the text as needed to fit into the available space.\n\nHStack {\n    Text(\"This is a long label that will be scaled to fit:\")\n        .lineLimit(1)\n        .minimumScaleFactor(0.5)\n    TextField(\"My Long Text Field\", text: $myTextField)\n}\n"
  },
  {
    "title": "menuIndicator(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/menuindicator(_:)",
    "html": "Parameters\nvisibility\n\nThe menu indicator visibility to apply.\n\nDiscussion\n\nUse this modifier to override the default menu indicator visibility for controls in this view. For example, the code below creates a menu without an indicator:\n\nMenu {\n    ForEach(history , id: \\.self) { historyItem in\n        Button(historyItem.title) {\n            self.openURL(historyItem.url)\n        }\n    }\n} label: {\n    Label(\"Back\", systemImage: \"chevron.backward\")\n        .labelStyle(.iconOnly)\n} primaryAction: {\n    if let last = history.last {\n        self.openURL(last.url)\n    }\n}\n.menuIndicator(.hidden)\n\n\nNote\n\nOn tvOS, the standard button styles do not include a menu indicator, so this modifier will have no effect when using a built-in button style. You can implement an indicator in your own ButtonStyle implementation by checking the value of the menuIndicatorVisibility environment value."
  },
  {
    "title": "menuActionDismissBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/menuactiondismissbehavior(_:)",
    "html": "Parameters\ndismissal\n\nThe menu action dismissal behavior to apply.\n\nReturn Value\n\nA view that has the specified menu dismissal behavior.\n\nDiscussion\n\nUse this modifier to control the dismissal behavior of a menu. In the example below, the menu doesn’t dismiss after someone chooses either the increase or decrease action:\n\nMenu(\"Font size\") {\n    Button(action: increase) {\n        Label(\"Increase\", systemImage: \"plus.magnifyingglass\")\n    }\n    .menuActionDismissBehavior(.disabled)\n\n\n    Button(\"Reset\", action: reset)\n\n\n    Button(action: decrease) {\n        Label(\"Decrease\", systemImage: \"minus.magnifyingglass\")\n    }\n    .menuActionDismissBehavior(.disabled)\n}\n\n\nYou can use this modifier on any controls that present a menu, like a Picker that uses the PickerStyle/menu style or a ControlGroup. For example, the code below creates a picker that disables dismissal when someone selects one of the options:\n\nPicker(\"Flavor\", selection: $selectedFlavor) {\n    ForEach(Flavor.allCases) { flavor in\n        Text(flavor.rawValue.capitalized)\n            .tag(flavor)\n    }\n}\n.pickerStyle(.menu)\n.menuActionDismissBehavior(.disabled)\n\n\nYou can also use this modifier on context menus. The example below creates a context menu that stays presented after someone selects an action to run:\n\nText(\"Favorite Card Suit\")\n    .padding()\n    .contextMenu {\n        Button(\"♥️ - Hearts\", action: increaseHeartsCount)\n        Button(\"♣️ - Clubs\", action: increaseClubsCount)\n        Button(\"♠️ - Spades\", action: increaseSpadesCount)\n        Button(\"♦️ - Diamonds\", action: increaseDiamondsCount)\n    }\n    .menuActionDismissBehavior(.disabled)\n"
  },
  {
    "title": "menuOrder(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/menuorder(_:)",
    "html": "Parameters\norder\n\nThe menu item ordering strategy to apply.\n\nReturn Value\n\nA view that uses the specified menu ordering strategy.\n\nDiscussion\n\nUse this modifier to override the default menu order. On supported platforms, MenuOrder/priority order keeps the first items closer to the user’s point of interaction, whereas MenuOrder/fixed order always orders items from top to bottom.\n\nOn iOS, the MenuOrder/automatic order resolves to MenuOrder/fixed for menus presented within scrollable content. Pickers that use the PickerStyle/menu style also default to MenuOrder/fixed order. In all other cases, menus default to MenuOrder/priority order.\n\nOn macOS, tvOS and watchOS, the MenuOrder/automatic order always resolves to MenuOrder/fixed order.\n\nThe following example creates a menu that presents its content in a fixed order from top to bottom:\n\nMenu {\n    Button(\"Select\", action: selectFolders)\n    Button(\"New Folder\", action: createFolder)\n    Picker(\"Appearance\", selection: $appearance) {\n        Label(\"Icons\", systemImage: \"square.grid.2x2\").tag(Appearance.icons)\n        Label(\"List\", systemImage: \"list.bullet\").tag(Appearance.list)\n    }\n} label: {\n    Label(\"Settings\", systemImage: \"ellipsis.circle\")\n}\n.menuOrder(.fixed)\n\n\nYou can use this modifier on controls that present a menu. For example, the code below creates a Picker using the PickerStyle/menu style with a priority-based order:\n\nPicker(\"Flavor\", selection: $selectedFlavor) {\n    Text(\"Chocolate\").tag(Flavor.chocolate)\n    Text(\"Vanilla\").tag(Flavor.vanilla)\n    Text(\"Strawberry\").tag(Flavor.strawberry)\n}\n.pickerStyle(.menu)\n.menuOrder(.priority)\n\n\nYou can also use this modifier on context menus. The example below creates a context menu that presents its content in a fixed order:\n\nText(\"Favorite Card Suit\")\n    .padding()\n    .contextMenu {\n        Button(\"♥️ - Hearts\", action: selectHearts)\n        Button(\"♣️ - Clubs\", action: selectClubs)\n        Button(\"♠️ - Spades\", action: selectSpades)\n        Button(\"♦️ - Diamonds\", action: selectDiamonds)\n    }\n    .menuOrder(.fixed)\n\n\nThe modifier has no effect when applied to a subsection or submenu of a menu."
  },
  {
    "title": "multilineTextAlignment(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/multilinetextalignment(_:)",
    "html": "Parameters\nalignment\n\nA value that you use to align multiple lines of text within a view.\n\nReturn Value\n\nA view that aligns the lines of multiline Text instances it contains.\n\nDiscussion\n\nUse this modifier to set an alignment for a multiline block of text. For example, the modifier centers the contents of the following Text view:\n\nText(\"This is a block of text that shows up in a text element as multiple lines.\\(\"\\n\") Here we have chosen to center this text.\")\n    .frame(width: 200)\n    .multilineTextAlignment(.center)\n\n\nThe text in the above example spans more than one line because:\n\nThe newline character introduces a line break.\n\nThe frame modifier limits the space available to the text view, and by default a text view wraps lines that don’t fit in the available width. As a result, the text before the explicit line break wraps to three lines, and the text after uses two lines.\n\nThe modifier applies the alignment to the all the lines of text in the view, regardless of why wrapping occurs:\n\nThe modifier has no effect on a Text view that contains only one line of text, because a text view has a width that exactly matches the width of its widest line. If you want to align an entire text view rather than its contents, set the aligment of its container, like a VStack or a frame that you create with the View/frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) modifier.\n\nNote\n\nYou can use this modifier to control the alignment of a Text view that you create with the Text/init(_:style:) initializer to display localized dates and times, including when the view uses only a single line, but only when that view appears in a widget.\n\nThe modifier also affects the content alignment of other text container types, like TextEditor and TextField. In those cases, the modifier sets the alignment even when the view contains only a single line because view’s width isn’t dictated by the width of the text it contains.\n\nThe modifier operates by setting the EnvironmentValues/multilineTextAlignment value in the environment, so it affects all the text containers in the modified view hierarchy. For example, you can apply the modifier to a VStack to configure all the text views inside the stack."
  },
  {
    "title": "modifier(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/modifier(_:)",
    "html": "Parameters\nmodifier\n\nThe modifier to apply to this view.\n\nDiscussion\n\nUse this modifier to combine a View and a ViewModifier, to create a new view. For example, if you create a view modifier for a new kind of caption with blue text surrounded by a rounded rectangle:\n\nstruct BorderedCaption: ViewModifier {\n    func body(content: Content) -> some View {\n        content\n            .font(.caption2)\n            .padding(10)\n            .overlay(\n                RoundedRectangle(cornerRadius: 15)\n                    .stroke(lineWidth: 1)\n            )\n            .foregroundColor(Color.blue)\n    }\n}\n\n\nYou can use modifier(_:) to extend View to create new modifier for applying the BorderedCaption defined above:\n\nextension View {\n    func borderedCaption() -> some View {\n        modifier(BorderedCaption())\n    }\n}\n\n\nThen you can apply the bordered caption to any view:\n\nImage(systemName: \"bus\")\n    .resizable()\n    .frame(width:50, height:50)\nText(\"Downtown Bus\")\n    .borderedCaption()\n"
  },
  {
    "title": "monospacedDigit() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/monospaceddigit()",
    "html": "Return Value\n\nA view whose child views’ fonts use fixed-width numeric characters, while leaving other characters proportionally spaced.\n\nDiscussion\n\nUsing fixed-width digits allows you to easily align numbers of the same size in a table-like arrangement. This feature is also known as “tabular figures” or “tabular numbers.”\n\nThis modifier only affects numeric characters, and leaves all other characters unchanged.\n\nThe following example shows the effect of monospacedDigit() on multiple child views. The example consists of two VStack views inside an HStack. Each VStack contains two Button views, with the second VStack applying the monospacedDigit() modifier to its contents. As a result, the digits in the buttons in the trailing VStack are the same width, which in turn gives the buttons equal widths.\n\nvar body: some View {\n    HStack(alignment: .top) {\n        VStack(alignment: .leading) {\n            Button(\"Delete 111 messages\") {}\n            Button(\"Delete 222 messages\") {}\n        }\n        VStack(alignment: .leading) {\n            Button(\"Delete 111 messages\") {}\n            Button(\"Delete 222 messages\") {}\n        }\n        .monospacedDigit()\n    }\n    .padding()\n    .navigationTitle(\"monospacedDigit() Child Views\")\n}\n\n\nIf a child view’s base font doesn’t support fixed-width digits, the font remains unchanged."
  },
  {
    "title": "inspectorColumnWidth(min:ideal:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/inspectorcolumnwidth(min:ideal:max:)",
    "html": "Parameters\nmin\n\nThe minimum allowed width for the trailing column inspector\n\nideal\n\nThe initial width of the inspector in the absence of state restoration. ideal influences the resulting width on macOS when a user double-clicks the divider on the leading edge of the inspector. clicks a divider to readjust\n\nmax\n\nThe maximum allowed width for the trailing column inspector\n\nDiscussion\n\nApply this modifier on the content of a View/inspector(isPresented:content:) to specify a preferred flexible width for the column. Use View/inspectorColumnWidth(_:) if you need to specify a fixed width.\n\nThe following example shows an editor interface with an inspector, which when presented as a trailing-column, has a preferred width of 225 points, maximum of 400, and a minimum of 150 at which point it will collapse, if allowed.\n\nMyEditorView()\n    .inspector {\n        TextTraitsInspectorView()\n            .inspectorColumnWidth(min: 150, ideal: 225, max: 400)\n    }\n\n\nOnly some platforms enable flexible inspector columns. If you specify a width that the current presentation environment doesn’t support, SwiftUI may use a different width for your column."
  },
  {
    "title": "indexViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/indexviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to apply to this view."
  },
  {
    "title": "keyframeAnimator(initialValue:repeating:content:keyframes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/keyframeanimator(initialvalue:repeating:content:keyframes:)",
    "html": "Parameters\ninitialValue\n\nThe initial value that the keyframes will animate from.\n\nrepeating\n\nWhether the keyframes are currently repeating. If false, the value at the beginning of the keyframe timeline will be provided to the content closure.\n\ncontent\n\nA view builder closure that takes two parameters. The first parameter is a proxy value representing the modified view. The second parameter is the interpolated value generated by the keyframes.\n\nkeyframes\n\nKeyframes defining how the value changes over time. The current value of the animator is the single argument, which is equal to initialValue when the view first appears, then is equal to the end value of the previous keyframe animation on subsequent calls.\n\nDiscussion\n\nNote that the content closure will be updated on every frame while animating, so avoid performing any expensive operations directly within content."
  },
  {
    "title": "onDrop(of:delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondrop(of:delegate:)-25ttd",
    "html": "Parameters\nsupportedContentTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\ndelegate\n\nA type that conforms to the DropDelegate protocol. You have comprehensive control over drop behavior when you use a delegate.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nDiscussion\n\nThe drop destination is the same size and position as this view."
  },
  {
    "title": "onDrop(of:isTargeted:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondrop(of:istargeted:perform:)-4zb0x",
    "html": "Parameters\nsupportedContentTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag-and-drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding’s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The parameter to action contains the dropped items, with types specified by supportedContentTypes. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nDiscussion\n\nThe drop destination is the same size and position as this view."
  },
  {
    "title": "listItemTint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listitemtint(_:)-92gz",
    "html": "Parameters\ntint\n\nThe color to use to tint the content. Use nil to avoid overriding the inherited tint.\n\nDiscussion\n\nThe containing list’s style applies the tint as appropriate. For example, watchOS uses the tint color for its background platter appearance. Sidebars on iOS and macOS apply the tint color to their Label icons, which otherwise use the accent color by default.\n\nNote\n\nThis modifier is equivalent to using the version of the modifier that takes a ListItemTint value and specifying the tint color in the corresponding ListItemTint/fixed(_:) input."
  },
  {
    "title": "onDrop(of:delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondrop(of:delegate:)-3pbby",
    "html": "Parameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\ndelegate\n\nA type that conforms to the DropDelegate protocol. You have comprehensive control over drop behavior when you use a delegate.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types."
  },
  {
    "title": "listRowBackground(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listrowbackground(_:)",
    "html": "Parameters\nview\n\nThe View to use as the background behind the list row view.\n\nReturn Value\n\nA list row view with view as its background view.\n\nDiscussion\n\nUse listRowBackground(_:) to place a custom background view behind a list row item.\n\nIn the example below, the Flavor enumeration provides content for list items. The SwiftUI ForEach structure computes views for each element of the Flavor enumeration and extracts the raw value of each of its elements using the resulting text to create each list row item. The listRowBackground(_:) modifier then places the view you supply behind each of the list row items:\n\nstruct ContentView: View {\n    enum Flavor: String, CaseIterable, Identifiable {\n        var id: String { self.rawValue }\n        case vanilla, chocolate, strawberry\n    }\n\n\n    var body: some View {\n        List {\n            ForEach(Flavor.allCases) {\n                Text($0.rawValue)\n                    .listRowBackground(Ellipse()\n                                        .background(Color.clear)\n                                        .foregroundColor(.purple)\n                                        .opacity(0.3)\n                    )\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "onDrag(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondrag(_:preview:)",
    "html": "Parameters\ndata\n\nA closure that returns a single NSItemProvider that represents the draggable data from this view.\n\npreview\n\nA View to use as the source for the dragging preview, once the drag operation has begun. The preview is centered over the source view.\n\nReturn Value\n\nA view that activates this view as the source of a drag-and- drop operation, beginning with user gesture input.\n\nDiscussion\n\nApplying the onDrag(_:preview:) modifier adds the appropriate gestures for drag and drop to this view. When a drag operation begins, a rendering of preview is generated and used as the preview image."
  },
  {
    "title": "listRowInsets(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listrowinsets(_:)",
    "html": "Parameters\ninsets\n\nThe EdgeInsets to apply to the edges of the view.\n\nReturn Value\n\nA view that uses the given edge insets when used as a list cell.\n\nDiscussion\n\nUse listRowInsets(_:) to change the default padding of the content of list items.\n\nIn the example below, the Flavor enumeration provides content for list items. The SwiftUI ForEach structure computes views for each element of the Flavor enumeration and extracts the raw value of each of its elements using the resulting text to create each list row item. The listRowInsets(_:) modifier then changes the edge insets of each row of the list according to the EdgeInsets provided:\n\nstruct ContentView: View {\n    enum Flavor: String, CaseIterable, Identifiable {\n        var id: String { self.rawValue }\n        case vanilla, chocolate, strawberry\n    }\n\n\n    var body: some View {\n        List {\n            ForEach(Flavor.allCases) {\n                Text($0.rawValue)\n                    .listRowInsets(.init(top: 0,\n                                         leading: 25,\n                                         bottom: 0,\n                                         trailing: 0))\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "onDrag(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondrag(_:)",
    "html": "Parameters\ndata\n\nA closure that returns a single NSItemProvider that represents the draggable data from this view.\n\nReturn Value\n\nA view that activates this view as the source of a drag and drop operation, beginning with user gesture input.\n\nDiscussion\n\nApplying the onDrag(_:) modifier adds the appropriate gestures for drag and drop to this view. When a drag operation begins, a rendering of this view is generated and used as the preview image."
  },
  {
    "title": "listRowSeparator(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listrowseparator(_:edges:)",
    "html": "Parameters\nvisibility\n\nThe visibility of this row’s separators.\n\nedges\n\nThe set of row edges for which this preference applies. The list style might already decide to not display separators for some edges, typically the top edge. The default is VerticalEdge/Set/all.\n\nDiscussion\n\nSeparators can be presented above and below a row. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter of the separator visibility.\n\nThe following example shows a simple grouped list whose row separators are hidden:\n\nList {\n    ForEach(garage.cars) { car in\n        Text(car.model)\n            .listRowSeparator(.hidden)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the color of a row separators, use View/listRowSeparatorTint(_:edges:). To hide or change the tint color for a section separators, use View/listSectionSeparator(_:edges:) and View/listSectionSeparatorTint(_:edges:)."
  },
  {
    "title": "onKeyPress(_:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onkeypress(_:action:)",
    "html": "Parameters\nkey\n\nThe key to match against incoming hardware keyboard events.\n\naction\n\nThe action to perform. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds hardware keyboard input when focused.\n\nDiscussion\n\nSwiftUI performs the action for key-down and key-repeat events."
  },
  {
    "title": "kerning(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/kerning(_:)",
    "html": "Parameters\nkerning\n\nThe spacing to use between individual characters in text. Value of 0 sets the kerning to the system default value.\n\nReturn Value\n\nA view where text has the specified amount of kerning."
  },
  {
    "title": "id(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/id(_:)",
    "html": "Discussion\n\nWhen the proxy value specified by the id parameter changes, the identity of the view — for example, its state — is reset."
  },
  {
    "title": "onDrop(of:isTargeted:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondrop(of:istargeted:perform:)-85cnr",
    "html": "Parameters\nsupportedContentTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding’s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The first parameter to action contains the dropped items, with types specified by supportedContentTypes. The second parameter contains the drop location in this view’s coordinate space. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nDiscussion\n\nThe drop destination is the same size and position as this view."
  },
  {
    "title": "layoutValue(key:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/layoutvalue(key:value:)",
    "html": "Parameters\nkey\n\nThe type of the key that you want to set a value for. Create the key as a type that conforms to the LayoutValueKey protocol.\n\nvalue\n\nThe value to assign to the key for this view. The value must be of the type that you establish for the key’s associated value when you implement the key’s LayoutValueKey/defaultValue property.\n\nReturn Value\n\nA view that has the specified value for the specified key.\n\nDiscussion\n\nUse this method to set a value for a custom property that you define with LayoutValueKey. For example, if you define a Flexibility key, you can set the key on a Text view using the key’s type and a value:\n\nText(\"Another View\")\n    .layoutValue(key: Flexibility.self, value: 3)\n\n\nFor convenience, you might define a method that does this in an extension to View:\n\nextension View {\n    func layoutFlexibility(_ value: CGFloat?) -> some View {\n        layoutValue(key: Flexibility.self, value: value)\n    }\n}\n\n\nThis method makes the call site easier to read:\n\nText(\"Another View\")\n    .layoutFlexibility(3)\n\n\nIf you perform layout operations in a type that conforms to the Layout protocol, you can read the key’s associated value for each subview of your custom layout type. Do this by indexing the subview’s proxy with the key. For more information, see LayoutValueKey."
  },
  {
    "title": "layoutDirectionBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/layoutdirectionbehavior(_:)",
    "html": "Parameters\nbehavior\n\nA LayoutDirectionBehavior value that indicates whether this view should mirror in a particular layout direction. By default, views will adjust their layouts automatically in a right-to-left context and do not need to be mirrored.\n\nReturn Value\n\nA view that conditionally mirrors its contents horizontally in a given layout direction.\n\nDiscussion\n\nUse layoutDirectionBehavior(_:) when you need the system to horizontally mirror the contents of the view when presented in a layout direction.\n\nTo override the layout direction for a specific view, use the View/environment(_:_:) view modifier to explicitly override the EnvironmentValues/layoutDirection environment value for the view."
  },
  {
    "title": "onDrop(of:isTargeted:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondrop(of:istargeted:perform:)-9hrno",
    "html": "Parameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding’s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The first parameter to action contains the dropped items, with types specified by supportedTypes. The second parameter contains the drop location in this view’s coordinate space. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types."
  },
  {
    "title": "lineLimit(_:reservesSpace:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/linelimit(_:reservesspace:)",
    "html": "Parameters\nlimit\n\nThe line limit.\n\nreservesSpace\n\nWhether text reserves space so that it always occupies the height required to display the specified number of lines.\n\nDiscussion\n\nUse this modifier to specify a limit to the lines that a Text or a vertical TextField may occupy. If passed a value of true for the reservesSpace parameter, and the text of such views occupies less space than the provided limit, that view expands to occupy the minimum number of lines. When the text occupies more space than the provided limit, a Text view truncates its content while a TextField becomes scrollable.\n\nGroupBox {\n    Text(\"Title\")\n        .font(.headline)\n        .lineLimit(2, reservesSpace: true)\n    Text(\"Subtitle\")\n        .font(.subheadline)\n        .lineLimit(4, reservesSpace: true)\n}\n"
  },
  {
    "title": "lineSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/linespacing(_:)",
    "html": "Parameters\nlineSpacing\n\nThe amount of space between the bottom of one line and the top of the next line in points.\n\nDiscussion\n\nUse lineSpacing(_:) to set the amount of spacing from the bottom of one line to the top of the next for text elements in the view.\n\nIn the Text view in the example below, 10 points separate the bottom of one line to the top of the next as the text field wraps inside this view. Applying lineSpacing(_:) to a view hierarchy applies the line spacing to all text elements contained in the view.\n\nText(\"This is a string in a TextField with 10 point spacing applied between the bottom of one line and the top of the next.\")\n    .frame(width: 200, height: 200, alignment: .leading)\n    .lineSpacing(10)\n"
  },
  {
    "title": "layoutPriority(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/layoutpriority(_:)",
    "html": "Parameters\nvalue\n\nThe priority by which a parent layout apportions space to the child.\n\nDiscussion\n\nViews typically have a default priority of 0 which causes space to be apportioned evenly to all sibling views. Raising a view’s layout priority encourages the higher priority view to shrink later when the group is shrunk and stretch sooner when the group is stretched.\n\nHStack {\n    Text(\"This is a moderately long string.\")\n        .font(.largeTitle)\n        .border(Color.gray)\n\n\n    Spacer()\n\n\n    Text(\"This is a higher priority string.\")\n        .font(.largeTitle)\n        .layoutPriority(1)\n        .border(Color.gray)\n}\n\n\nIn the example above, the first Text element has the default priority 0 which causes its view to shrink dramatically due to the higher priority of the second Text element, even though all of their other attributes (font, font size and character count) are the same.\n\nA parent layout offers the child views with the highest layout priority all the space offered to the parent minus the minimum space required for all its lower-priority children."
  },
  {
    "title": "lineLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/linelimit(_:)-9ksll",
    "html": "Parameters\nlimit\n\nThe line limit.\n\nDiscussion\n\nUse this modifier to specify a partial range of lines that a Text view or a vertical TextField can occupy. When the text of such views occupies more space than the provided limit, a Text view truncates its content while a TextField becomes scrollable.\n\nForm {\n    TextField(\"Title\", text: $model.title)\n    TextField(\"Notes\", text: $model.notes, axis: .vertical)\n        .lineLimit(...3)\n}\n\n\nNote\n\nThis modifier is equivalent to the View/lineLimit(_:)-513mb modifier taking just an integer."
  },
  {
    "title": "lineLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/linelimit(_:)-6kgqe",
    "html": "Parameters\nnumber\n\nThe line limit. If nil, no line limit applies.\n\nReturn Value\n\nA view that limits the number of lines that Text instances display.\n\nDiscussion\n\nUse this modifier to cap the number of lines that an individual text element can display.\n\nThe line limit applies to all Text instances within a hierarchy. For example, an HStack with multiple pieces of text longer than three lines caps each piece of text to three lines rather than capping the total number of lines across the HStack.\n\nIn the example below, the modifier limits the very long line in the Text element to the 2 lines that fit within the view’s bounds:\n\nText(\"This is a long string that demonstrates the effect of SwiftUI's lineLimit(:_) operator.\")\n    .frame(width: 200, height: 200, alignment: .leading)\n    .lineLimit(2)\n"
  },
  {
    "title": "listItemTint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/listitemtint(_:)-6ws7n",
    "html": "Parameters\ntint\n\nThe tint effect to use. Use nil to avoid overriding the inherited tint.\n\nDiscussion\n\nThe containing list’s style applies the tint as appropriate. For example, watchOS uses the tint color for its background platter appearance. Sidebars on iOS and macOS apply the tint color to their Label icons, which otherwise use the accent color by default."
  },
  {
    "title": "onDrop(of:isTargeted:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ondrop(of:istargeted:perform:)-9wlyq",
    "html": "Parameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding’s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The parameter to action contains the dropped items, with types specified by supportedTypes. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types."
  },
  {
    "title": "onHover(perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onhover(perform:)",
    "html": "Parameters\naction\n\nThe action to perform whenever the pointer enters or exits this view’s frame. If the pointer is in the view’s frame, the action closure passes true as a parameter; otherwise, false.\n\nReturn Value\n\nA view that triggers action when the pointer enters or exits this view’s frame.\n\nDiscussion\n\nCalling this method defines a region for detecting pointer movement with the size and position of this view."
  },
  {
    "title": "onKeyPress(keys:phases:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onkeypress(keys:phases:action:)",
    "html": "Parameters\nkeys\n\nA set of keys to match against incoming hardware keyboard events.\n\nphases\n\nThe key-press phases to match (.down, .repeat, and .up). The default value is [.down, .repeat].\n\naction\n\nThe action to perform. The action receives a value describing the matched key event. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds keyboard input when focused."
  },
  {
    "title": "ignoresSafeArea(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ignoressafearea(_:edges:)",
    "html": "Parameters\nregions\n\nthe kinds of rectangles removed from the safe area that should be ignored (i.e. added back to the safe area of the new child view).\n\nedges\n\nthe edges of the view that may be outset, any edges not in this set will be unchanged, even if that edge is abutting a safe area listed in regions.\n\nReturn Value\n\na new view with its safe area expanded."
  },
  {
    "title": "imageScale(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/imagescale(_:)",
    "html": "Parameters\nscale\n\nOne of the relative sizes provided by the image scale enumeration.\n\nDiscussion\n\nThe example below shows the relative scaling effect. The system renders the image at a relative size based on the available space and configuration options of the image it is scaling.\n\nVStack {\n    HStack {\n        Image(systemName: \"heart.fill\")\n            .imageScale(.small)\n        Text(\"Small\")\n    }\n    HStack {\n        Image(systemName: \"heart.fill\")\n            .imageScale(.medium)\n        Text(\"Medium\")\n    }\n\n\n    HStack {\n        Image(systemName: \"heart.fill\")\n            .imageScale(.large)\n        Text(\"Large\")\n    }\n}\n"
  },
  {
    "title": "inspectorColumnWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/inspectorcolumnwidth(_:)",
    "html": "Parameters\nwidth\n\nThe preferred fixed width for the inspector if presented as a trailing column.\n\nDiscussion\n\nApply this modifier on the content of a View/inspector(isPresented:content:) to specify a fixed preferred width for the trailing column. Use View/navigationSplitViewColumnWidth(min:ideal:max:) if you need to specify a flexible width.\n\nThe following example shows an editor interface with an inspector, which when presented as a trailing-column, has a fixed width of 225 points. The example also uses View/interactiveDismissDisabled(_:) to prevent the inspector from being collapsed by user action like dragging a divider.\n\nMyEditorView()\n    .inspector {\n        TextTraitsInspectorView()\n            .inspectorColumnWidth(225)\n            .interactiveDismissDisabled()\n    }\n\n\nNote\n\nA fixed width does not prevent the user collapsing the inspector on macOS. See View/interactiveDismissDisabled(_:)."
  },
  {
    "title": "invalidatableContent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/invalidatablecontent(_:)",
    "html": "Parameters\ninvalidatable\n\nWhether the receiver content might be invalidated.\n\nDiscussion\n\nUse this modifier to annotate views that display values that are derived from the current state of your data and might be invalidated in response of, for example, user interaction.\n\nThe view will change its appearance when RedactionReasons.invalidated is present in the environment.\n\nIn an interactive widget a view is invalidated from the moment the user interacts with a control on the widget to the moment when a new timeline update has been presented."
  },
  {
    "title": "interactionActivityTrackingTag(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/interactionactivitytrackingtag(_:)",
    "html": "Parameters\ntag\n\nThe tag used to track user interactions hosted by this view as activities.\n\nReturn Value\n\nA view that uses a tracking tag.\n\nDiscussion\n\nThe following example tracks the scrolling activity of a List:\n\nList {\n    Section(\"Today\") {\n        ForEach(messageStore.today) { message in\n            Text(message.title)\n        }\n    }\n}\n.interactionActivityTrackingTag(\"MessagesList\")\n\n\nThe resolved activity tracking tag is additive, so using the modifier across the view hierarchy builds the tag from top to bottom. The example below shows a hierarchical usage of this modifier with the resulting tag Home-Feed:\n\nvar body: some View {\n    Home()\n        .interactionActivityTrackingTag(\"Home\")\n}\n\n\nstruct Home: View {\n    var body: some View {\n        List {\n            Text(\"A List Item\")\n            Text(\"A Second List Item\")\n            Text(\"A Third List Item\")\n        }\n        .interactionActivityTrackingTag(\"Feed\")\n    }\n}\n"
  },
  {
    "title": "layerEffect(_:maxSampleOffset:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/layereffect(_:maxsampleoffset:isenabled:)",
    "html": "Parameters\nshader\n\nThe shader to apply as a layer effect.\n\nmaxSampleOffset\n\nIf the shader function samples from the layer at locations not equal to the destination position, this value must specify the maximum sampling distance in each axis, for all source pixels.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a distortion effect.\n\nDiscussion\n\nFor a shader function to act as a layer effect it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position,\n  SwiftUI::Layer layer, args...)\n\n\nwhere position is the user-space coordinates of the destination pixel applied to the shader, and layer is a subregion of the rasterized contents of self. args... should be compatible with the uniform arguments bound to shader.\n\nThe SwiftUI::Layer type is defined in the <SwiftUI/SwiftUI.h> header file. It exports a single sample() function that returns a linearly-filtered pixel value from a position in the source content, as a premultiplied RGBA pixel value:\n\nnamespace SwiftUI {\n  struct Layer {\n    half4 sample(float2 position) const;\n  };\n};\n\n\nThe function should return the color mapping to the destination pixel, typically by sampling one or more pixels from layer at location(s) derived from position and them applying some kind of transformation to produce a new color.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error."
  },
  {
    "title": "keyboardShortcut(_:modifiers:localization:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/keyboardshortcut(_:modifiers:localization:)",
    "html": "Discussion\n\nPressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.\n\nThe target of a keyboard shortcut is resolved in a leading-to-trailing, depth-first traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\n\nIf multiple controls are associated with the same shortcut, the first one found is used.\n\nLocalization\n\nProvide a localization value to specify how this shortcut should be localized. Given that key is always defined in relation to the US-English keyboard layout, it might be hard to reach on different international layouts. For example the shortcut ⌘[ works well for the US layout but is hard to reach for German users, where [ is available by pressing ⌥5, making users type ⌥⌘5. The automatic keyboard shortcut remapping re-assigns the shortcut to an appropriate replacement, ⌘Ö in this case.\n\nCertain shortcuts carry information about directionality. For instance, ⌘[ can reveal a previous view. Following the layout direction of the UI, this shortcut will be automatically mirrored to ⌘]. However, this does not apply to items such as “Align Left ⌘{”, which will be “left” independently of the layout direction. When the shortcut shouldn’t follow the directionality of the UI, but rather be the same in both right-to-left and left-to-right directions, using KeyboardShortcut/Localization-swift.struct/withoutMirroring will prevent the system from flipping it.\n\nvar body: some Commands {\n    CommandMenu(\"Card\") {\n        Button(\"Align Left\") { ... }\n            .keyboardShortcut(\"{\",\n                 modifiers: .option,\n                 localization: .withoutMirroring)\n        Button(\"Align Right\") { ... }\n            .keyboardShortcut(\"}\",\n                 modifiers: .option,\n                 localization: .withoutMirroring)\n    }\n}\n\n\nLastly, providing the option KeyboardShortcut/Localization-swift.struct/custom disables the automatic localization for this shortcut to tell the system that internationalization is taken care of in a different way."
  },
  {
    "title": "keyframeAnimator(initialValue:trigger:content:keyframes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/keyframeanimator(initialvalue:trigger:content:keyframes:)",
    "html": "Parameters\ninitialValue\n\nThe initial value that the keyframes will animate from.\n\ntrigger\n\nA value to observe for changes.\n\ncontent\n\nA view builder closure that takes two parameters. The first parameter is a proxy value representing the modified view. The second parameter is the interpolated value generated by the keyframes.\n\nkeyframes\n\nKeyframes defining how the value changes over time. The current value of the animator is the single argument, which is equal to initialValue when the view first appears, then is equal to the end value of the previous keyframe animation on subsequent calls.\n\nDiscussion\n\nNote that the content closure will be updated on every frame while animating, so avoid performing any expensive operations directly within content.\n\nIf the trigger value changes while animating, the keyframes closure will be called with the current interpolated value, and the keyframes that you return define a new animation that replaces the old one. The previous velocity will be preserved, so cubic or spring keyframes will maintain continuity from the previous animation if they do not specify a custom initial velocity.\n\nWhen a keyframe animation finishes, the animator will remain at the end value, which becomes the initial value for the next animation."
  },
  {
    "title": "keyboardShortcut(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/keyboardshortcut(_:)-1b89i",
    "html": "Discussion\n\nPressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.\n\nThe target of a keyboard shortcut is resolved in a leading-to-trailing traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\n\nIf multiple controls are associated with the same shortcut, the first one found is used."
  },
  {
    "title": "keyboardType(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/keyboardtype(_:)",
    "html": "Parameters\ntype\n\nOne of the keyboard types defined in the UIKeyboardType enumeration.\n\nDiscussion\n\nUse keyboardType(_:) to specify the keyboard type to use for text entry. A number of different keyboard types are available to meet specialized input needs, such as entering email addresses or phone numbers.\n\nThe example below presents a TextField to input an email address. Setting the text field’s keyboard type to .emailAddress ensures the user can only enter correctly formatted email addresses.\n\nTextField(\"someone@example.com\", text: $emailAddress)\n    .keyboardType(.emailAddress)\n\n\nThere are several different kinds of specialized keyboard types available though the UIKeyboardType enumeration. To specify the default system keyboard type, use .default."
  },
  {
    "title": "interactiveDismissDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/interactivedismissdisabled(_:)",
    "html": "Parameters\nisDisabled\n\nA Boolean value that indicates whether to prevent nonprogrammatic dismissal of the containing view hierarchy when presented in a sheet or popover.\n\nDiscussion\n\nUsers can dismiss certain kinds of presentations using built-in gestures. In particular, a user can dismiss a sheet by dragging it down, or a popover by clicking or tapping outside of the presented view. Use the interactiveDismissDisabled(_:) modifier to conditionally prevent this kind of dismissal. You typically do this to prevent the user from dismissing a presentation before providing needed data or completing a required action.\n\nFor instance, suppose you have a view that displays a licensing agreement that the user must acknowledge before continuing:\n\nstruct TermsOfService: View {\n    @Binding var areTermsAccepted: Bool\n    @Environment(\\.dismiss) private var dismiss\n\n\n    var body: some View {\n        Form {\n            Text(\"License Agreement\")\n                .font(.title)\n            Text(\"Terms and conditions go here.\")\n            Button(\"Accept\") {\n                areTermsAccepted = true\n                dismiss()\n            }\n        }\n    }\n}\n\n\nIf you present this view in a sheet, the user can dismiss it by either tapping the button — which calls EnvironmentValues/dismiss from its action closure — or by dragging the sheet down. To ensure that the user accepts the terms by tapping the button, disable interactive dismissal, conditioned on the areTermsAccepted property:\n\nstruct ContentView: View {\n    @State private var isSheetPresented = false\n    @State private var areTermsAccepted = false\n\n\n    var body: some View {\n        Button(\"Use Service\") {\n            isSheetPresented = true\n        }\n        .sheet(isPresented: $isSheetPresented) {\n            TermsOfService()\n                .interactiveDismissDisabled(!areTermsAccepted)\n        }\n    }\n}\n\n\nYou can apply the modifier to any view in the sheet’s view hierarchy, including to the sheet’s top level view, as the example demonstrates, or to any child view, like the Form or the Accept Button.\n\nThe modifier has no effect on programmatic dismissal, which you can invoke by updating the Binding that controls the presentation, or by calling the environment’s EnvironmentValues/dismiss action. On macOS, disabling interactive dismissal in a popover makes the popover nontransient."
  },
  {
    "title": "labelStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/labelstyle(_:)",
    "html": "Discussion\n\nUse this modifier to set a specific style for all labels within a view:\n\nVStack {\n    Label(\"Fire\", systemImage: \"flame.fill\")\n    Label(\"Lightning\", systemImage: \"bolt.fill\")\n}\n.labelStyle(MyCustomLabelStyle())\n"
  },
  {
    "title": "font(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/font(_:)",
    "html": "Parameters\nfont\n\nThe default font to use in this view.\n\nReturn Value\n\nA view with the default font set to the value you supply.\n\nDiscussion\n\nUse font(_:) to apply a specific font to all of the text in a view.\n\nThe example below shows the effects of applying fonts to individual views and to view hierarchies. Font information flows down the view hierarchy as part of the environment, and remains in effect unless overridden at the level of an individual view or view container.\n\nHere, the outermost VStack applies a 16-point system font as a default font to views contained in that VStack. Inside that stack, the example applies a Font/largeTitle font to just the first text view; this explicitly overrides the default. The remaining stack and the views contained with it continue to use the 16-point system font set by their containing view:\n\nVStack {\n    Text(\"Font applied to a text view.\")\n        .font(.largeTitle)\n\n\n    VStack {\n        Text(\"These 2 text views have the same font\")\n        Text(\"applied to their parent hierarchy\")\n    }\n}\n.font(.system(size: 16, weight: .light, design: .default))\n"
  },
  {
    "title": "italic(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/italic(_:)",
    "html": "Parameters\nisActive\n\nA Boolean value that indicates whether italic styling is added. The default value is true.\n\nReturn Value\n\nA View with italic text."
  },
  {
    "title": "keyboardShortcut(_:modifiers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/keyboardshortcut(_:modifiers:)",
    "html": "Discussion\n\nPressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.\n\nThe target of a keyboard shortcut is resolved in a leading-to-trailing, depth-first traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\n\nIf multiple controls are associated with the same shortcut, the first one found is used.\n\nThe default localization configuration is set to KeyboardShortcut/Localization-swift.struct/automatic."
  },
  {
    "title": "labelsHidden() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/labelshidden()",
    "html": "Discussion\n\nUse this modifier when you want to omit a label from one or more controls in your user interface. For example, the first Toggle in the following example hides its label:\n\nVStack {\n    Toggle(isOn: $toggle1) {\n        Text(\"Toggle 1\")\n    }\n    .labelsHidden()\n\n\n    Toggle(isOn: $toggle2) {\n        Text(\"Toggle 2\")\n    }\n}\n\n\nThe VStack in the example above centers the first toggle’s control element in the available space, while it centers the second toggle’s combined label and control element:\n\nAlways provide a label for controls, even when you hide the label, because SwiftUI uses labels for other purposes, including accessibility.\n\nNote\n\nThis modifier doesn’t work for all labels. It applies to labels that are separate from the rest of the control’s interface, like they are for Toggle, but not to controls like a bordered button where the label is inside the button’s border."
  },
  {
    "title": "lineLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/linelimit(_:)-403n",
    "html": "Parameters\nlimit\n\nThe line limit.\n\nDiscussion\n\nUse this modifier to specify a partial range of lines that a Text view or a vertical TextField can occupy. When the text of such views occupies less space than the provided limit, that view expands to occupy the minimum number of lines.\n\nForm {\n    TextField(\"Title\", text: $model.title)\n    TextField(\"Notes\", text: $model.notes, axis: .vertical)\n        .lineLimit(3...)\n}\n"
  },
  {
    "title": "lineLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/linelimit(_:)-9bloz",
    "html": "Parameters\nlimit\n\nThe line limit.\n\nDiscussion\n\nUse this modifier to specify a closed range of lines that a Text view or a vertical TextField can occupy. When the text of such views occupies more space than the provided limit, a Text view truncates its content while a TextField becomes scrollable.\n\nForm {\n    TextField(\"Title\", text: $model.title)\n    TextField(\"Notes\", text: $model.notes, axis: .vertical)\n        .lineLimit(1...3)\n}\n"
  },
  {
    "title": "focusedSceneValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusedscenevalue(_:_:)-9tmzi",
    "html": "Parameters\nkeyPath\n\nThe key path to associate value with when adding it to the existing table of published focus values.\n\nvalue\n\nThe focus value to publish, or nil if no value is currently available.\n\nReturn Value\n\nA modified representation of this view.\n\nDiscussion\n\nUse this method instead of View/focusedValue(_:_:) for values that must be visible regardless of where focus is located in the active scene. For example, if an app needs a command for moving focus to a particular text field in the sidebar, it could use this modifier to publish a button action that’s visible to command views as long as the scene is active, and regardless of where focus happens to be in it.\n\nstruct Sidebar: View {\n    @FocusState var isFiltering: Bool\n\n\n    var body: some View {\n        VStack {\n            TextField(...)\n                .focused(when: $isFiltering)\n                .focusedSceneValue(\\.filterAction) {\n                    isFiltering = true\n                }\n        }\n    }\n}\n\n\nstruct NavigationCommands: Commands {\n    @FocusedValue(\\.filterAction) var filterAction\n\n\n    var body: some Commands {\n        CommandMenu(\"Navigate\") {\n            Button(\"Filter in Sidebar\") {\n                filterAction?()\n            }\n        }\n        .disabled(filterAction == nil)\n    }\n}\n\n\nstruct FilterActionKey: FocusedValuesKey {\n    typealias Value = () -> Void\n}\n\n\nextension FocusedValues {\n    var filterAction: (() -> Void)? {\n        get { self[FilterActionKey.self] }\n        set { self[FilterActionKey.self] = newValue }\n    }\n}\n"
  },
  {
    "title": "handlesExternalEvents(preferring:allowing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/handlesexternalevents(preferring:allowing:)",
    "html": "Parameters\npreferring\n\nA Set of Strings that are checked to see if they are contained in the targetContentIdenfifier to see if the Scene this View is in prefers to handle the Exernal Event. The empty Set and empty Strings never match. The String value “*” always matches. The String comparisons are case/diacritic insensitive\n\nallowing\n\nA Set of Strings that are checked to see if they are contained in the targetContentIdenfifier to see if the Scene this View is in allows handling the External Event. The empty Set and empty Strings never match. The String value “*” always matches.\n\nDiscussion\n\nIf no modifier is set in any Views within a Scene, the behavior is platform dependent. On macOS, a new Scene will be created to use for the External Event. On iOS, the system will choose an existing Scene to use.\n\nOn platforms that only allow a single Window/Scene, this method is ignored, and incoming External Events are always routed to the existing single Scene."
  },
  {
    "title": "groupBoxStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/groupboxstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to apply to boxes within this view."
  },
  {
    "title": "help(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/help(_:)-4nmvc",
    "html": "Parameters\ntext\n\nThe Text view to use as help.\n\nDiscussion\n\nAdding help to a view configures the view’s accessibility hint and its help tag (also called a tooltip) in macOS or visionOS. For more information on using help tags, see Offering help in the Human Interface Guidelines.\n\nSlider(\"Opacity\", value: $selectedShape.opacity)\n    .help(Text(\"Adjust the opacity of the selected \\(selectedShape.name)\"))\n"
  },
  {
    "title": "help(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/help(_:)-7jlf4",
    "html": "Parameters\ntext\n\nThe text to use as help.\n\nDiscussion\n\nAdding help to a view configures the view’s accessibility hint and its help tag (also called a tooltip) in macOS or visionOS. For more information on using help tags, see Offering help in the Human Interface Guidelines.\n\nImage(systemName: \"pin.circle\")\n    .foregroundColor(pointOfInterest.tintColor)\n    .help(pointOfInterest.name)\n"
  },
  {
    "title": "onKeyPress(characters:phases:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onkeypress(characters:phases:action:)",
    "html": "Parameters\ncharacters\n\nThe set of characters to match against incoming hardware keyboard events.\n\nphases\n\nThe key-press phases to match (.down, .repeat, and .up). The default value is [.down, .repeat].\n\naction\n\nThe action to perform. The action receives a value describing the matched key event. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds hardware keyboard input when focused."
  },
  {
    "title": "onLongPressGesture(minimumDuration:perform:onPressingChanged:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
    "html": "Parameters\nminimumDuration\n\nThe minimum duration of the long press that must elapse before the gesture succeeds.\n\naction\n\nThe action to perform when a long press is recognized.\n\nonPressingChanged\n\nA closure to run when the pressing state of the gesture changes, passing the current state as a parameter."
  },
  {
    "title": "help(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/help(_:)-kk5m",
    "html": "Parameters\ntextKey\n\nThe key for the localized text to use as help.\n\nDiscussion\n\nAdding help to a view configures the view’s accessibility hint and its help tag (also called a tooltip) in macOS or visionOS. For more information on using help tags, see Offering help in the Human Interface Guidelines.\n\nButton(action: composeMessage) {\n    Image(systemName: \"square.and.pencil\")\n}\n.help(\"Compose a new message\")\n"
  },
  {
    "title": "highPriorityGesture(_:including:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/highprioritygesture(_:including:)",
    "html": "Parameters\ngesture\n\nA gesture to attach to the view.\n\nmask\n\nA value that controls how adding this gesture to the view affects other gestures recognized by the view and its subviews. Defaults to SwiftUI/GestureMask/all.\n\nDiscussion\n\nUse this method when you need to define a high priority gesture to take precedence over the view’s existing gestures. The example below defines a custom gesture that prints a message to the console and attaches it to the view’s VStack. Inside the VStack a red heart Image defines its own TapGesture handler that also prints a message to the console, and a blue rectangle with no custom gesture handlers. Tapping or clicking any of the views results in a console message from the high priority gesture attached to the enclosing VStack.\n\nstruct HighPriorityGestureExample: View {\n    @State private var message = \"Message\"\n    let newGesture = TapGesture().onEnded {\n        print(\"Tap on VStack.\")\n    }\n\n\n    var body: some View {\n        VStack(spacing:25) {\n            Image(systemName: \"heart.fill\")\n                .resizable()\n                .frame(width: 75, height: 75)\n                .padding()\n                .foregroundColor(.red)\n                .onTapGesture {\n                    print(\"Tap on image.\")\n                }\n            Rectangle()\n                .fill(Color.blue)\n        }\n        .highPriorityGesture(newGesture)\n        .frame(width: 200, height: 200)\n        .border(Color.purple)\n    }\n}\n"
  },
  {
    "title": "hidden() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/hidden()",
    "html": "Return Value\n\nA hidden view.\n\nDiscussion\n\nHidden views are invisible and can’t receive or respond to interactions. However, they do remain in the view hierarchy and affect layout. Use this modifier if you want to include a view for layout purposes, but don’t want it to display.\n\nHStack {\n    Image(systemName: \"a.circle.fill\")\n    Image(systemName: \"b.circle.fill\")\n    Image(systemName: \"c.circle.fill\")\n        .hidden()\n    Image(systemName: \"d.circle.fill\")\n}\n\n\nThe third circle takes up space, because it’s still present, but SwiftUI doesn’t draw it onscreen.\n\nIf you want to conditionally include a view in the view hierarchy, use an if statement instead:\n\nVStack {\n    HStack {\n        Image(systemName: \"a.circle.fill\")\n        Image(systemName: \"b.circle.fill\")\n        if !isHidden {\n            Image(systemName: \"c.circle.fill\")\n        }\n        Image(systemName: \"d.circle.fill\")\n    }\n    Toggle(\"Hide\", isOn: $isHidden)\n}\n\n\nDepending on the current value of the isHidden state variable in the example above, controlled by the Toggle instance, SwiftUI draws the circle or completely omits it from the layout."
  },
  {
    "title": "hoverEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/hovereffect(_:)",
    "html": "Parameters\neffect\n\nThe effect to apply to this view.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that applies a hover effect to self.\n\nDiscussion\n\nBy default, HoverEffect/automatic is used. You can control the behavior of the automatic effect with the View/defaultHoverEffect(_:) modifier."
  },
  {
    "title": "onKeyPress(_:phases:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onkeypress(_:phases:action:)",
    "html": "Parameters\nkey\n\nThe key to match against incoming hardware keyboard events.\n\nphases\n\nThe key-press phases to match (.down, .up, and .repeat).\n\naction\n\nThe action to perform. The action receives a value describing the matched key event. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds hardware keyboard input when focused.\n\nDiscussion\n\nSwiftUI performs the action for the specified event phases."
  },
  {
    "title": "hoverEffectDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/hovereffectdisabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean value that determines whether this view can display hover effects.\n\nReturn Value\n\nA view that controls whether hover effects can be displayed in this view.\n\nDiscussion\n\nThe higher views in a view hierarchy can override the value you set on this view. In the following example, the button does not display a hover effect because the outer hoverEffectDisabled(_:) modifier overrides the inner one:\n\nHStack {\n    Button(\"Press\") {}\n        .hoverEffectDisabled(false)\n}\n.hoverEffectDisabled(true)\n"
  },
  {
    "title": "hueRotation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/huerotation(_:)",
    "html": "Parameters\nangle\n\nThe hue rotation angle to apply to the colors in this view.\n\nReturn Value\n\nA view that applies a hue rotation effect to this view.\n\nDiscussion\n\nUse hue rotation effect to shift all of the colors in a view according to the angle you specify.\n\nThe example below shows a series of squares filled with a linear gradient. Each square shows the effect of a 36˚ hueRotation (a total of 180˚ across the 5 squares) on the gradient:\n\nstruct HueRotation: View {\n    var body: some View {\n        HStack {\n            ForEach(0..<6) {\n                Rectangle()\n                    .fill(.linearGradient(\n                        colors: [.blue, .red, .green],\n                        startPoint: .top, endPoint: .bottom))\n                    .hueRotation((.degrees(Double($0 * 36))))\n                    .frame(width: 60, height: 60, alignment: .center)\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "inspector(isPresented:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/inspector(ispresented:content:)",
    "html": "Parameters\nisPresented\n\nA binding to Bool controlling the presented state.\n\ncontent\n\nThe inspector content.\n\nDiscussion\n\nApply this modifier to declare an inspector with a context-dependent presentation. For example, an inspector can present as a trailing column in a horizontally regular size class, but adapt to a sheet in a horizontally compact size class.\n\nstruct ShapeEditor: View {\n    @State var presented: Bool = false\n    var body: some View {\n        MyEditorView()\n            .inspector(isPresented: $presented) {\n                TextTraitsInspectorView()\n            }\n    }\n}\n\n\nNote\n\nTrailing column inspectors have their presentation state restored by the framework.\n\nSee Also\n\nInspectorCommands for including the default inspector commands and keyboard shortcuts."
  },
  {
    "title": "gridCellAnchor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/gridcellanchor(_:)",
    "html": "Parameters\nanchor\n\nThe unit point that defines how to align the view within the bounds of its grid cell.\n\nReturn Value\n\nA view that uses the specified anchor point to align its content.\n\nDiscussion\n\nGrids, like stacks and other layout containers, perform most alignment operations using alignment guides. The grid moves the contents of each cell in a row in the y direction until the specified VerticalAlignment guide of each view in the row aligns with the same guide of all the other views in the row. Similarly, the grid aligns the HorizontalAlignment guides of views in a column by adjusting views in the x direction. See the guide types for more information about typical SwiftUI alignment operations.\n\nWhen you use the gridCellAnchor(_:) modifier on a view in a grid, the grid changes to an anchor-based alignment strategy for the associated cell. With anchor alignment, the grid projects a UnitPoint that you specify onto both the view and the cell, and aligns the two projections. For example, consider the following grid:\n\nGrid(horizontalSpacing: 1, verticalSpacing: 1) {\n    GridRow {\n        Color.red.frame(width: 60, height: 60)\n        Color.red.frame(width: 60, height: 60)\n    }\n    GridRow {\n        Color.red.frame(width: 60, height: 60)\n        Color.blue.frame(width: 10, height: 10)\n            .gridCellAnchor(UnitPoint(x: 0.25, y: 0.75))\n    }\n}\n\n\nThe grid creates red reference squares in the first row and column to establish row and column sizes. Without the anchor modifier, the blue marker in the remaining cell would appear at the center of its cell, because of the grid’s default Alignment/center alignment. With the anchor modifier shown in the code above, the grid aligns the one quarter point of the marker with the one quarter point of its cell in the x direction, as measured from the origin at the top left of the cell. The grid also aligns the three quarters point of the marker with the three quarters point of the cell in the y direction:\n\nUnitPoint defines many convenience points that correspond to the typical alignment guides, which you can use as well. For example, you can use UnitPoint/topTrailing to align the top and trailing edges of a view in a cell with the top and trailing edges of the cell:\n\nColor.blue.frame(width: 10, height: 10)\n    .gridCellAnchor(.topTrailing)\n\n\nApplying the anchor-based alignment strategy to a single cell doesn’t affect the alignment strategy that the grid uses on other cells.\n\nAnchor alignment for merged cells\n\nIf you use the View/gridCellColumns(_:) modifier to cause a cell to span more than one column, or if you place a view in a grid outside of a row so that the view spans the entire grid, the grid automatically converts its vertical and horizontal alignment guides to the unit point equivalent for the merged cell, and uses an anchor-based approach for that cell. For example, the following grid places the marker at the center of the merged cell by converting the grid’s default Alignment/center alignment guide to a UnitPoint/center anchor for the blue marker in the merged cell:\n\nGrid(alignment: .center, horizontalSpacing: 1, verticalSpacing: 1) {\n    GridRow {\n        Color.red.frame(width: 60, height: 60)\n        Color.red.frame(width: 60, height: 60)\n        Color.red.frame(width: 60, height: 60)\n    }\n    GridRow {\n        Color.red.frame(width: 60, height: 60)\n        Color.blue.frame(width: 10, height: 10)\n            .gridCellColumns(2)\n    }\n}\n\n\nThe grid makes this conversion in part to avoid ambiguity. Each column has its own horizontal guide, and it isn’t clear which of these a cell that spans multiple columns should align with. Further, in the example above, neither of the center alignment guides for the second or third column would provide the expected behavior, which is to center the marker in the merged cell. Anchor alignment provides this behavior:"
  },
  {
    "title": "onLongPressGesture(minimumDuration:maximumDistance:perform:onPressingChanged:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
    "html": "Parameters\nminimumDuration\n\nThe minimum duration of the long press that must elapse before the gesture succeeds.\n\nmaximumDistance\n\nThe maximum distance that the fingers or cursor performing the long press can move before the gesture fails.\n\naction\n\nThe action to perform when a long press is recognized.\n\nonPressingChanged\n\nA closure to run when the pressing state of the gesture changes, passing the current state as a parameter."
  },
  {
    "title": "gridCellColumns(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/gridcellcolumns(_:)",
    "html": "Parameters\ncount\n\nThe number of columns that the view should consume when placed in a grid row.\n\nReturn Value\n\nA view that occupies the specified number of columns in a grid row.\n\nDiscussion\n\nBy default, each view that you put into the content closure of a GridRow corresponds to exactly one column of the grid. Apply the gridCellColumns(_:) modifier to a view that you want to span more than one column, as in the following example of a typical macOS configuration view:\n\nGrid(alignment: .leadingFirstTextBaseline) {\n    GridRow {\n        Text(\"Regular font:\")\n            .gridColumnAlignment(.trailing)\n        Text(\"Helvetica 12\")\n        Button(\"Select...\") { }\n    }\n    GridRow {\n        Text(\"Fixed-width font:\")\n        Text(\"Menlo Regular 11\")\n        Button(\"Select...\") { }\n    }\n    GridRow {\n        Color.clear\n            .gridCellUnsizedAxes([.vertical, .horizontal])\n        Toggle(\"Use fixed-width font for new documents\", isOn: $isOn)\n            .gridCellColumns(2) // Span two columns.\n    }\n}\n\n\nThe Toggle in the example above spans the column that contains the font names and the column that contains the buttons:\n\nImportant\n\nWhen you tell a cell to span multiple columns, the grid changes the merged cell to use anchor alignment, rather than the usual alignment guides. For information about the behavior of anchor alignment, see View/gridCellAnchor(_:).\n\nAs a convenience you can cause a view to span all of the Grid columns by placing the view directly in the content closure of the Grid, outside of a GridRow, and omitting the modifier. To do the opposite and include more than one view in a cell, group the views using an appropriate layout container, like an HStack, so that they act as a single view."
  },
  {
    "title": "grayscale(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/grayscale(_:)",
    "html": "Parameters\namount\n\nThe intensity of grayscale to apply from 0.0 to less than 1.0. Values closer to 0.0 are more colorful, and values closer to 1.0 are less colorful.\n\nReturn Value\n\nA view that adds a grayscale effect to this view.\n\nDiscussion\n\nA grayscale effect reduces the intensity of colors in this view.\n\nThe example below shows a series of red squares with their grayscale effect increasing from 0 (reddest) to 99% (fully desaturated) in approximate 20% increments:\n\nstruct Saturation: View {\n    var body: some View {\n        HStack {\n            ForEach(0..<6) {\n                Color.red.frame(width: 60, height: 60, alignment: .center)\n                    .grayscale(Double($0) * 0.1999)\n                    .overlay(Text(\"\\(Double($0) * 0.1999 * 100, specifier: \"%.4f\")%\"),\n                             alignment: .bottom)\n                    .border(Color.gray)\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "focusedValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusedvalue(_:_:)-70qff",
    "html": "Parameters\nkeyPath\n\nThe key path to associate value with when adding it to the existing table of exported focus values.\n\nvalue\n\nThe focus value to export, or nil if no value is currently available.\n\nReturn Value\n\nA modified representation of this view.\n\nDiscussion\n\nUse this method instead of View/focusedSceneValue(_:_:) when your scene includes multiple focusable views with their own associated values, and you need an app- or scene-scoped element like a command or toolbar item that operates on the value associated with whichever view currently has focus. Each focusable view can supply its own value:"
  },
  {
    "title": "gridCellUnsizedAxes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/gridcellunsizedaxes(_:)",
    "html": "Parameters\naxes\n\nThe dimensions in which the grid shouldn’t offer the view a share of any available space. This prevents a flexible view like a Spacer, Divider, or Color from defining the size of a row or column.\n\nReturn Value\n\nA view that doesn’t ask an enclosing grid for extra size in one or more axes.\n\nDiscussion\n\nUse this modifier to prevent a flexible view from taking more space on the specified axes than the other cells in a row or column require. For example, consider the following Grid that places a Divider between two rows of content:\n\nGrid {\n    GridRow {\n        Text(\"Hello\")\n        Image(systemName: \"globe\")\n    }\n    Divider()\n    GridRow {\n        Image(systemName: \"hand.wave\")\n        Text(\"World\")\n    }\n}\n\n\nThe text and images all have ideal widths for their content. However, because a divider takes as much space as its parent offers, the grid fills the width of the display, expanding all the other cells to match:\n\nYou can prevent the grid from giving the divider more width than the other cells require by adding the modifier with the Axis/horizontal parameter:\n\nDivider()\n    .gridCellUnsizedAxes(.horizontal)\n\n\nThis restores the grid to the width that it would have without the divider:"
  },
  {
    "title": "foregroundStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/foregroundstyle(_:)",
    "html": "Parameters\nstyle\n\nThe color or pattern to use when filling in the foreground elements. To indicate a specific value, use Color or ShapeStyle/image(_:sourceRect:scale:), or one of the gradient types, like ShapeStyle/linearGradient(colors:startPoint:endPoint:). To set a style that’s relative to the containing view’s style, use one of the semantic styles, like ShapeStyle/primary.\n\nReturn Value\n\nA view that uses the given foreground style.\n\nDiscussion\n\nUse this method to style foreground content like text, shapes, and template images (including symbols):\n\nHStack {\n    Image(systemName: \"triangle.fill\")\n    Text(\"Hello, world!\")\n    RoundedRectangle(cornerRadius: 5)\n        .frame(width: 40, height: 20)\n}\n.foregroundStyle(.teal)\n\n\nThe example above creates a row of ShapeStyle/teal foreground elements:\n\nYou can use any style that conforms to the ShapeStyle protocol, like the ShapeStyle/teal color in the example above, or the ShapeStyle/linearGradient(colors:startPoint:endPoint:) gradient shown below:\n\nText(\"Gradient Text\")\n    .font(.largeTitle)\n    .foregroundStyle(\n        .linearGradient(\n            colors: [.yellow, .blue],\n            startPoint: .top,\n            endPoint: .bottom\n        )\n    )\n\n\nTip\n\nIf you want to fill a single Shape instance with a style, use the Shape/fill(style:) shape modifier instead because it’s more efficient.\n\nSwiftUI creates a context-dependent render for a given style. For example, a Color that you load from an asset catalog can have different light and dark appearances, while some styles also vary by platform.\n\nHierarchical foreground styles like ShapeStyle/secondary don’t impose a style of their own, but instead modify other styles. In particular, they modify the primary level of the current foreground style to the degree given by the hierarchical style’s name. To find the current foreground style to modify, SwiftUI looks for the innermost containing style that you apply with the foregroundStyle(_:) or the View/foregroundColor(_:) modifier. If you haven’t specified a style, SwiftUI uses the default foreground style, as in the following example:\n\nVStack(alignment: .leading) {\n    Label(\"Primary\", systemImage: \"1.square.fill\")\n    Label(\"Secondary\", systemImage: \"2.square.fill\")\n        .foregroundStyle(.secondary)\n}\n\n\nIf you add a foreground style on the enclosing VStack, the hierarchical styling responds accordingly:\n\nVStack(alignment: .leading) {\n    Label(\"Primary\", systemImage: \"1.square.fill\")\n    Label(\"Secondary\", systemImage: \"2.square.fill\")\n        .foregroundStyle(.secondary)\n}\n.foregroundStyle(.blue)\n\n\nWhen you apply a custom style to a view, the view disables the vibrancy effect for foreground elements in that view, or in any of its child views, that it would otherwise gain from adding a background material — for example, using the View/background(_:ignoresSafeAreaEdges:) modifier. However, hierarchical styles applied to the default foreground don’t disable vibrancy."
  },
  {
    "title": "fontDesign(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fontdesign(_:)",
    "html": "Parameters\ndesign\n\nOne of the available font designs. Providing nil removes the effect of any font design modifier applied higher in the view hierarchy.\n\nReturn Value\n\nA view that uses the font design you specify."
  },
  {
    "title": "fontWeight(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fontweight(_:)",
    "html": "Parameters\nweight\n\nOne of the available font weights. Providing nil removes the effect of any font weight modifier applied higher in the view hierarchy.\n\nReturn Value\n\nA view that uses the font weight you specify."
  },
  {
    "title": "fullScreenCover(isPresented:onDismiss:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fullscreencover(ispresented:ondismiss:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the sheet.\n\nonDismiss\n\nThe closure to execute when dismissing the modal view.\n\ncontent\n\nA closure that returns the content of the modal view.\n\nDiscussion\n\nUse this method to show a modal view that covers as much of the screen as possible. The example below displays a custom view when the user toggles the value of the isPresenting binding:\n\nstruct FullScreenCoverPresentedOnDismiss: View {\n    @State private var isPresenting = false\n    var body: some View {\n        Button(\"Present Full-Screen Cover\") {\n            isPresenting.toggle()\n        }\n        .fullScreenCover(isPresented: $isPresenting,\n                         onDismiss: didDismiss) {\n            VStack {\n                Text(\"A full-screen modal view.\")\n                    .font(.title)\n                Text(\"Tap to Dismiss\")\n            }\n            .onTapGesture {\n                isPresenting.toggle()\n            }\n            .foregroundColor(.white)\n            .frame(maxWidth: .infinity,\n                   maxHeight: .infinity)\n            .background(Color.blue)\n            .ignoresSafeArea(edges: .all)\n        }\n    }\n\n\n    func didDismiss() {\n        // Handle the dismissing action.\n    }\n}\n"
  },
  {
    "title": "fullScreenCover(item:onDismiss:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fullscreencover(item:ondismiss:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the sheet. When item is non-nil, the system passes the contents to the modifier’s closure. You display this content in a sheet that you create that the system displays to the user. If item changes, the system dismisses the currently displayed sheet and replaces it with a new one using the same process.\n\nonDismiss\n\nThe closure to execute when dismissing the modal view.\n\ncontent\n\nA closure returning the content of the modal view.\n\nDiscussion\n\nUse this method to display a modal view that covers as much of the screen as possible. In the example below a custom structure — CoverData — provides data for the full-screen view to display in the content closure when the user clicks or taps the “Present Full-Screen Cover With Data” button:\n\nstruct FullScreenCoverItemOnDismissContent: View {\n    @State private var coverData: CoverData?\n\n\n    var body: some View {\n        Button(\"Present Full-Screen Cover With Data\") {\n            coverData = CoverData(body: \"Custom Data\")\n        }\n        .fullScreenCover(item: $coverData,\n                         onDismiss: didDismiss) { details in\n            VStack(spacing: 20) {\n                Text(\"\\(details.body)\")\n            }\n            .onTapGesture {\n                coverData = nil\n            }\n        }\n    }\n\n\n    func didDismiss() {\n        // Handle the dismissing action.\n    }\n\n\n}\n\n\nstruct CoverData: Identifiable {\n    var id: String {\n        return body\n    }\n    let body: String\n}\n"
  },
  {
    "title": "geometryGroup() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/geometrygroup()",
    "html": "Discussion\n\nBy default SwiftUI views push position and size changes down through the view hierarchy, so that only views that draw something (known as leaf views) apply the current animation to their frame rectangle. However in some cases this coalescing behavior can give undesirable results; inserting a geometry group can correct that. A group acts as a barrier between the parent view and its subviews, forcing the position and size values to be resolved and animated by the parent, before being passed down to each subview.\n\nThe example below shows one use of this function: ensuring that the member views of each row in the stack apply (and animate as) a single geometric transform from their ancestor view, rather than letting the effects of the ancestor views be applied separately to each leaf view. If the members of ItemView may be added and removed at different times the group ensures that they stay locked together as animations are applied.\n\nVStack {\n    ForEach(items) { item in\n        ItemView(item: item)\n            .geometryGroup()\n    }\n}\n\n\nReturns: a new view whose geometry is isolated from that of its parent view."
  },
  {
    "title": "gesture(_:including:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/gesture(_:including:)",
    "html": "Parameters\ngesture\n\nA gesture to attach to the view.\n\nmask\n\nA value that controls how adding this gesture to the view affects other gestures recognized by the view and its subviews. Defaults to SwiftUI/GestureMask/all.\n\nDiscussion\n\nUse this method when you need to attach a gesture to a view. The example below defines a custom gesture that prints a message to the console and attaches it to the view’s VStack. Inside the VStack a red heart Image defines its own TapGesture handler that also prints a message to the console, and blue rectangle with no custom gesture handlers. Tapping or clicking the image prints a message to the console from the tap gesture handler on the image, while tapping or clicking the rectangle inside the VStack prints a message in the console from the enclosing vertical stack gesture handler.\n\nstruct GestureExample: View {\n    @State private var message = \"Message\"\n    let newGesture = TapGesture().onEnded {\n        print(\"Tap on VStack.\")\n    }\n\n\n    var body: some View {\n        VStack(spacing:25) {\n            Image(systemName: \"heart.fill\")\n                .resizable()\n                .frame(width: 75, height: 75)\n                .padding()\n                .foregroundColor(.red)\n                .onTapGesture {\n                    print(\"Tap on image.\")\n                }\n            Rectangle()\n                .fill(Color.blue)\n        }\n        .gesture(newGesture)\n        .frame(width: 200, height: 200)\n        .border(Color.purple)\n    }\n}\n"
  },
  {
    "title": "fileMover(isPresented:files:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filemover(ispresented:files:oncompletion:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nfiles\n\nA collection of URLs for the files to be moved.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nNote\n\nThis interface provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nIn order for the interface to appear, both isPresented must be true and files must not be empty. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called."
  },
  {
    "title": "focusedObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusedobject(_:)-904vr",
    "html": "Parameters\nobject\n\nThe observable object to associate with focus.\n\nReturn Value\n\nA view that supplies an observable object when in focus.\n\nDiscussion\n\nUse this method instead of View/focusedSceneObject(_:) when your scene includes multiple focusable views with their own associated data, and you need an app- or scene-scoped element like a command or toolbar item that operates on the data associated with whichever view currently has focus. Each focusable view can supply its own object:\n\nstruct MessageView: View {\n    @StateObject private var message = Message(...)\n\n\n    var body: some View {\n        TextField(...)\n            .focusedObject(message)\n    }\n}\n\n\nInterested views can then use the FocusedObject property wrapper to observe and update the focused view’s object. In this example, an app command updates the focused view’s data, and is automatically disabled when focus is in an unrelated part of the scene:\n\nstruct MessageCommands: Commands {\n    @FocusedObject private var message: Message?\n\n\n    var body: some Commands {\n        CommandGroup(after: .pasteboard) {\n            Button(\"Add Duck to Message\") {\n                message?.text.append(\" 🦆\")\n            }\n            .keyboardShortcut(\"d\")\n            .disabled(message == nil)\n        }\n    }\n}\n"
  },
  {
    "title": "fileMover(isPresented:files:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filemover(ispresented:files:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\nfiles\n\nA collection of URLs for the files to be moved.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, a button that allows the user to move files might look like this:\n\n  struct MoveFilesButton: View {\n      @Binding var files: [URL]\n      @State private var showFileMover = false\n      var onCompletion: (URL) -> Void\n      var onCancellation: (() -> Void)?\n\n\n      var body: some View {\n          Button {\n              showFileMover = true\n          } label: {\n              Label(\"Choose destination\", systemImage: \"folder.circle\")\n          }\n          .fileMover(isPresented: $showFileMover, files: files) { result in\n              switch result {\n              case .success(let urls):\n                  urls.forEach { url in\n                      guard url.startAccessingSecurityScopedResource() else {\n                          return\n                      }\n                      onCompletion(url)\n                      url.stopAccessingSecurityScopedResource()\n                  }\n              case .failure(let error):\n                  print(error)\n                  // handle error\n              }\n          } onCancellation: {\n              onCancellation?()\n          }\n      }\n  }\n"
  },
  {
    "title": "controlSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/controlsize(_:)",
    "html": "Parameters\ncontrolSize\n\nOne of the control sizes specified in the ControlSize enumeration.\n\nDiscussion\n\nUse controlSize(_:) to override the system default size for controls in this view. In this example, a view displays several typical controls at .mini, .small and .regular sizes.\n\nstruct ControlSize: View {\n    var body: some View {\n        VStack {\n            MyControls(label: \"Mini\")\n                .controlSize(.mini)\n            MyControls(label: \"Small\")\n                .controlSize(.small)\n            MyControls(label: \"Regular\")\n                .controlSize(.regular)\n        }\n        .padding()\n        .frame(width: 450)\n        .border(Color.gray)\n    }\n}\n\n\nstruct MyControls: View {\n    var label: String\n    @State private var value = 3.0\n    @State private var selected = 1\n    var body: some View {\n        HStack {\n            Text(label + \":\")\n            Picker(\"Selection\", selection: $selected) {\n                Text(\"option 1\").tag(1)\n                Text(\"option 2\").tag(2)\n                Text(\"option 3\").tag(3)\n            }\n            Slider(value: $value, in: 1...10)\n            Button(\"OK\") { }\n        }\n    }\n}\n"
  },
  {
    "title": "focusedValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusedvalue(_:_:)-26gc7",
    "html": "Parameters\nkeyPath\n\nThe key path to associate value with when adding it to the existing table of exported focus values.\n\nvalue\n\nThe focus value to export.\n\nReturn Value\n\nA modified representation of this view."
  },
  {
    "title": "dialogSuppressionToggle(_:isSuppressed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/dialogsuppressiontoggle(_:issuppressed:)-2gg4o",
    "html": "Parameters\ntitleKey\n\nThe title of the suppression toggle in the dialog. This parameter can be elided to use the default suppression title.\n\nisSuppressed\n\nWhether the suppression toggle is on or off in the dialog.\n\nDiscussion\n\nApplying dialog suppression adds a toggle to dialogs on macOS, which allows the user to request the alert not be displayed again. Typically whether a dialog is suppressed is stored in AppStorage and used to decide whether to present the dialog in the future.\n\nThe following example configures a confirmationDialog with a suppression toggle. The toggle’s state is stored in AppStorage and used to determine whether or not to show the dialog when the “Delete Items” button is pressed.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n\n\n    @AppStorage(\"suppressEraseItemAlert\")\n    private var suppressAlert = false\n\n\n    var body: some View {\n        Button(\"Delete Items\") {\n            if !suppressAlert {\n                isShowingDialog = true\n            } else {\n                // Handle item deletion.\n            }\n        }\n        .confirmationDialog(\n            \"Are you sure you want to erase these items?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Erase\", role: .destructive) {\n                // Handle item deletion.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n        .dialogSuppressionToggle(\n            \"Do not ask about erasing items again\",\n            isSuppressed: $suppressAlert)\n    }\n}\n"
  },
  {
    "title": "gridColumnAlignment(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/gridcolumnalignment(_:)",
    "html": "Parameters\nguide\n\nThe HorizontalAlignment guide to use for the grid column that the view appears in.\n\nReturn Value\n\nA view that uses the specified horizontal alignment, and that causes all cells in the same column of a grid to use the same alignment.\n\nDiscussion\n\nYou set a default alignment for the cells in a grid in both vertical and horizontal dimensions when you create the grid with the Grid/init(alignment:horizontalSpacing:verticalSpacing:content:) initializer. However, you can use the gridColumnAlignment(_:) modifier to override the horizontal alignment of a column within the grid. The following example sets a grid’s alignment to Alignment/leadingFirstTextBaseline, and then sets the first column to use HorizontalAlignment/trailing alignment:\n\nGrid(alignment: .leadingFirstTextBaseline) {\n    GridRow {\n        Text(\"Regular font:\")\n            .gridColumnAlignment(.trailing) // Align the entire first column.\n        Text(\"Helvetica 12\")\n        Button(\"Select...\") { }\n    }\n    GridRow {\n        Text(\"Fixed-width font:\")\n        Text(\"Menlo Regular 11\")\n        Button(\"Select...\") { }\n    }\n    GridRow {\n        Color.clear\n            .gridCellUnsizedAxes([.vertical, .horizontal])\n        Toggle(\"Use fixed-width font for new documents\", isOn: $isOn)\n            .gridCellColumns(2)\n    }\n}\n\n\nThis creates the layout of a typical macOS configuration view, with the trailing edge of the first column flush with the leading edge of the second column:\n\nAdd the modifier to only one cell in a column. The grid automatically aligns all cells in that column the same way. You get undefined behavior if you apply different alignments to different cells in the same column.\n\nTo override row alignment, see GridRow/init(alignment:content:). To override alignment for a single cell, see View/gridCellAnchor(_:)."
  },
  {
    "title": "headerProminence(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/headerprominence(_:)",
    "html": "Parameters\nprominence\n\nThe prominence to apply.\n\nDiscussion\n\nIn the following example, the section header appears with increased prominence:\n\nList {\n    Section(header: Text(\"Header\")) {\n        Text(\"Row\")\n    }\n    .headerProminence(.increased)\n}\n.listStyle(.insetGrouped)\n"
  },
  {
    "title": "hoverEffect(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/hovereffect(_:isenabled:)",
    "html": "Parameters\neffect\n\nThe effect to apply to this view.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that applies a hover effect to self.\n\nDiscussion\n\nBy default, HoverEffect/automatic is used. You can control the behavior of the automatic effect with the View/defaultHoverEffect(_:) modifier."
  },
  {
    "title": "fileDialogConfirmationLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogconfirmationlabel(_:)-1f9gu",
    "html": "Parameters\nlabel\n\nThe string to use as the label for the confirmation button."
  },
  {
    "title": "fileDialogConfirmationLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogconfirmationlabel(_:)-6qedt",
    "html": "Parameters\nlabelKey\n\nThe key to a localized string to display."
  },
  {
    "title": "onKeyPress(phases:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onkeypress(phases:action:)",
    "html": "Parameters\nphases\n\nThe key-press phases to match (.down, .repeat, and .up). The default value is [.down, .repeat].\n\naction\n\nThe action to perform. The action receives a value describing the matched key event. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds hardware keyboard input when focused."
  },
  {
    "title": "onSubmit(of:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onsubmit(of:_:)",
    "html": "Parameters\ntriggers\n\nThe triggers that should invoke the provided action.\n\naction\n\nThe action to perform on submission of a value.\n\nDiscussion\n\nDifferent views may have different triggers for the provided action. A TextField, or SecureField will trigger this action when the user hits the hardware or software return key. This modifier may also bind this action to a default action keyboard shortcut. You may set this action on an individual view or an entire view hierarchy.\n\nTextField(\"Username\", text: $username)\n    .onSubmit {\n        guard viewModel.validate() else { return }\n        viewModel.login()\n    }\n\n\nYou can use the View/submitScope(_:) modifier to stop a submit trigger from a control from propagating higher up in the view hierarchy to higher View.onSubmit(of:_:) modifiers.\n\nForm {\n    TextField(\"Username\", text: $viewModel.userName)\n    SecureField(\"Password\", text: $viewModel.password)\n\n\n    TextField(\"Tags\", text: $viewModel.tags)\n        .submitScope()\n}\n.onSubmit {\n    guard viewModel.validate() else { return }\n    viewModel.login()\n}\n\n\nYou can use different submit triggers to filter the types of triggers that should invoke the provided submission action. For example, you may provide a value of SubmitTriggers/search to only hear submission triggers that originate from search fields vended by searchable modifiers.\n\n@StateObject private var viewModel = ViewModel()\n\n\nNavigationView {\n    SidebarView()\n    DetailView()\n}\n.searchable(\n    text: $viewModel.searchText,\n    placement: .sidebar\n) {\n    SuggestionsView()\n}\n.onSubmit(of: .search) {\n    viewModel.submitCurrentSearchQuery()\n}\n"
  },
  {
    "title": "fileDialogURLEnabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogurlenabled(_:)",
    "html": "Parameters\npredicate\n\nThe predicate that evaluates the URLs presented to the user to conditionally disable them. The implementation is expected to have constant complexity and should not access the files contents or metadata. A common use case is inspecting the path or the file name."
  },
  {
    "title": "coordinateSpace(name:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/coordinatespace(name:)",
    "html": "Parameters\nname\n\nA name used to identify this coordinate space.\n\nDiscussion\n\nUse coordinateSpace(name:) to allow another function to find and operate on a view and operate on dimensions relative to that view.\n\nThe example below demonstrates how a nested view can find and operate on its enclosing view’s coordinate space:\n\nstruct ContentView: View {\n    @State private var location = CGPoint.zero\n\n\n    var body: some View {\n        VStack {\n            Color.red.frame(width: 100, height: 100)\n                .overlay(circle)\n            Text(\"Location: \\(Int(location.x)), \\(Int(location.y))\")\n        }\n        .coordinateSpace(name: \"stack\")\n    }\n\n\n    var circle: some View {\n        Circle()\n            .frame(width: 25, height: 25)\n            .gesture(drag)\n            .padding(5)\n    }\n\n\n    var drag: some Gesture {\n        DragGesture(coordinateSpace: .named(\"stack\"))\n            .onChanged { info in location = info.location }\n    }\n}\n\n\nHere, the VStack in the ContentView named “stack” is composed of a red frame with a custom Circle view View/overlay(_:alignment:) at its center.\n\nThe circle view has an attached DragGesture that targets the enclosing VStack’s coordinate space. As the gesture recognizer’s closure registers events inside circle it stores them in the shared location state variable and the VStack displays the coordinates in a Text view."
  },
  {
    "title": "foregroundStyle(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/foregroundstyle(_:_:_:)",
    "html": "Parameters\nprimary\n\nThe primary color or pattern to use when filling in the foreground elements. To indicate a specific value, use Color or ShapeStyle/image(_:sourceRect:scale:), or one of the gradient types, like ShapeStyle/linearGradient(colors:startPoint:endPoint:). To set a style that’s relative to the containing view’s style, use one of the semantic styles, like ShapeStyle/primary.\n\nsecondary\n\nThe secondary color or pattern to use when filling in the foreground elements.\n\ntertiary\n\nThe tertiary color or pattern to use when filling in the foreground elements.\n\nReturn Value\n\nA view that uses the given foreground styles.\n\nDiscussion\n\nSwiftUI uses these styles when rendering child views that don’t have an explicit rendering style, like images, text, shapes, and so on.\n\nSymbol images within the view hierarchy use the SymbolRenderingMode/palette rendering mode when you apply this modifier, if you don’t explicitly specify another mode."
  },
  {
    "title": "fontWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fontwidth(_:)",
    "html": "Parameters\nwidth\n\nOne of the available font widths. Providing nil removes the effect of any font width modifier applied higher in the view hierarchy.\n\nReturn Value\n\nA view that uses the font width you specify."
  },
  {
    "title": "foregroundStyle(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/foregroundstyle(_:_:)",
    "html": "Parameters\nprimary\n\nThe primary color or pattern to use when filling in the foreground elements. To indicate a specific value, use Color or ShapeStyle/image(_:sourceRect:scale:), or one of the gradient types, like ShapeStyle/linearGradient(colors:startPoint:endPoint:). To set a style that’s relative to the containing view’s style, use one of the semantic styles, like ShapeStyle/primary.\n\nsecondary\n\nThe secondary color or pattern to use when filling in the foreground elements.\n\nReturn Value\n\nA view that uses the given foreground styles.\n\nDiscussion\n\nSwiftUI uses these styles when rendering child views that don’t have an explicit rendering style, like images, text, shapes, and so on.\n\nSymbol images within the view hierarchy use the SymbolRenderingMode/palette rendering mode when you apply this modifier, if you don’t explicitly specify another mode."
  },
  {
    "title": "foregroundColor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/foregroundcolor(_:)",
    "html": "Parameters\ncolor\n\nThe foreground color to use when displaying this view. Pass nil to remove any custom foreground color and to allow the system or the container to provide its own foreground color. If a container-specific override doesn’t exist, the system uses the primary color.\n\nReturn Value\n\nA view that uses the foreground color you supply."
  },
  {
    "title": "frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
    "html": "Parameters\nminWidth\n\nThe minimum width of the resulting frame.\n\nidealWidth\n\nThe ideal width of the resulting frame.\n\nmaxWidth\n\nThe maximum width of the resulting frame.\n\nminHeight\n\nThe minimum height of the resulting frame.\n\nidealHeight\n\nThe ideal height of the resulting frame.\n\nmaxHeight\n\nThe maximum height of the resulting frame.\n\nalignment\n\nThe alignment of this view inside the resulting frame. Note that most alignment values have no apparent effect when the size of the frame happens to match that of this view.\n\nReturn Value\n\nA view with flexible dimensions given by the call’s non-nil parameters.\n\nDiscussion\n\nAlways specify at least one size characteristic when calling this method. Pass nil or leave out a characteristic to indicate that the frame should adopt this view’s sizing behavior, constrained by the other non-nil arguments.\n\nThe size proposed to this view is the size proposed to the frame, limited by any constraints specified, and with any ideal dimensions specified replacing any corresponding unspecified dimensions in the proposal.\n\nIf no minimum or maximum constraint is specified in a given dimension, the frame adopts the sizing behavior of its child in that dimension. If both constraints are specified in a dimension, the frame unconditionally adopts the size proposed for it, clamped to the constraints. Otherwise, the size of the frame in either dimension is:\n\nIf a minimum constraint is specified and the size proposed for the frame by the parent is less than the size of this view, the proposed size, clamped to that minimum.\n\nIf a maximum constraint is specified and the size proposed for the frame by the parent is greater than the size of this view, the proposed size, clamped to that maximum.\n\nOtherwise, the size of this view."
  },
  {
    "title": "formStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/formstyle(_:)",
    "html": "Parameters\nstyle\n\nThe form style to set.\n\nReturn Value\n\nA view that uses the specified form style for itself and its child views."
  },
  {
    "title": "frame(width:height:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/frame(width:height:alignment:)",
    "html": "Parameters\nwidth\n\nA fixed width for the resulting view. If width is nil, the resulting view assumes this view’s sizing behavior.\n\nheight\n\nA fixed height for the resulting view. If height is nil, the resulting view assumes this view’s sizing behavior.\n\nalignment\n\nThe alignment of this view inside the resulting frame. Note that most alignment values have no apparent effect when the size of the frame happens to match that of this view.\n\nReturn Value\n\nA view with fixed dimensions of width and height, for the parameters that are non-nil.\n\nDiscussion\n\nUse this method to specify a fixed size for a view’s width, height, or both. If you only specify one of the dimensions, the resulting view assumes this view’s sizing behavior in the other dimension.\n\nFor example, the following code lays out an ellipse in a fixed 200 by 100 frame. Because a shape always occupies the space offered to it by the layout system, the first ellipse is 200x100 points. The second ellipse is laid out in a frame with only a fixed height, so it occupies that height, and whatever width the layout system offers to its parent.\n\nVStack {\n    Ellipse()\n        .fill(Color.purple)\n        .frame(width: 200, height: 100)\n    Ellipse()\n        .fill(Color.blue)\n        .frame(height: 100)\n}\n\n\nThe alignment parameter specifies this view’s alignment within the frame.\n\nText(\"Hello world!\")\n    .frame(width: 200, height: 30, alignment: .topLeading)\n    .border(Color.gray)\n\n\nIn the example above, the text is positioned at the top, leading corner of the frame. If the text is taller than the frame, its bounds may extend beyond the bottom of the frame’s bounds."
  },
  {
    "title": "frame() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/frame()",
    "html": "Deprecated\n\nPlease pass one or more parameters.\n\nDiscussion\n\nUse SwiftUI/View/frame(width:height:alignment:) or SwiftUI/View/frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) instead."
  },
  {
    "title": "fileMover(isPresented:file:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filemover(ispresented:file:oncompletion:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nfile\n\nThe URL of the file to be moved.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nNote\n\nThis interface provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nIn order for the interface to appear, both isPresented must be true and file must not be nil. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called."
  },
  {
    "title": "findNavigator(isPresented:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/findnavigator(ispresented:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that controls the presentation of the find and replace interface.\n\nReturn Value\n\nA view that presents the find and replace interface when isPresented is true.\n\nDiscussion\n\nAdd this modifier to a TextEditor, or to a view hierarchy that contains at least one text editor, to control the presentation of the find and replace interface. When you set the isPresented binding to true, the system shows the interface, and when you set it to false, the system hides the interface. The following example shows and hides the interface based on the state of a toolbar button:\n\nTextEditor(text: $text)\n    .findNavigator(isPresented: $isPresented)\n    .toolbar {\n        Toggle(isOn: $isPresented) {\n            Label(\"Find\", systemImage: \"magnifyingglass\")\n        }\n    }\n\n\nThe find and replace interface allows people to search for instances of a specified string in the text editor, and optionally to replace instances of the search string with another string. They can also show and hide the interface using built-in controls, like menus and keyboard shortcuts. SwiftUI updates isPresented to reflect the users’s actions.\n\nIf the text editor view isn’t currently in focus, the system still presents the find and replace interface when you set isPresented to true. If the view hierarchy contains multiple editors, the one that shows the find and replace interface is nondeterministic.\n\nYou can disable the find and replace interface for a text editor by applying the View/findDisabled(_:) modifier to the editor. If you do that, setting this modifier’s isPresented binding to true has no effect, but only if the disabling modifier appears closer to the text editor, like this:\n\nTextEditor(text: $text)\n    .findDisabled(isDisabled)\n    .findNavigator(isPresented: $isPresented)\n"
  },
  {
    "title": "focusedSceneObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusedsceneobject(_:)-1dhe7",
    "html": "Parameters\nobject\n\nThe observable object to associate with the scene.\n\nReturn Value\n\nA view that supplies an observable object while the scene is active.\n\nDiscussion\n\nUse this method instead of View/focusedObject(_:) for observable objects that must be visible regardless of where focus is located in the active scene. This is sometimes needed for things like main menu and discoverability HUD commands that observe and update data from the active scene but aren’t concerned with what the user is actually focused on. The scene’s root view can supply the scene’s state object:\n\nstruct RootView: View {\n    @StateObject private var sceneData = SceneData()\n\n\n    var body: some View {\n        NavigationSplitView {\n            ...\n        }\n        .focusedSceneObject(sceneData)\n    }\n}\n\n\nInterested views can then use the FocusedObject property wrapper to observe and update the active scene’s state object. In this example, an app command updates the active scene’s data, and is enabled as long as any scene is active.\n\nstruct MessageCommands: Commands {\n    @FocusedObject private var sceneData: SceneData?\n\n\n    var body: some Commands {\n        CommandGroup(after: .newItem) {\n            Button(\"New Message\") {\n                sceneData?.addMessage()\n            }\n            .keyboardShortcut(\"n\", modifiers: [.option, .command])\n            .disabled(sceneData == nil)\n        }\n    }\n}\n"
  },
  {
    "title": "focusedSceneObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusedsceneobject(_:)-1rgta",
    "html": "Parameters\nobject\n\nThe observable object to associate with the scene, or nil if no object is currently available.\n\nReturn Value\n\nA view that supplies an observable object while the scene is active.\n\nDiscussion\n\nUse this method instead of View/focusedObject(_:) for observable objects that must be visible regardless of where focus is located in the active scene. This is sometimes needed for things like main menu and discoverability HUD commands that observe and update data from the active scene but aren’t concerned with what the user is actually focused on. The scene’s root view can supply the scene’s state object:\n\nstruct RootView: View {\n    @StateObject private var sceneData = SceneData()\n\n\n    var body: some View {\n        NavigationSplitView {\n            ...\n        }\n        .focusedSceneObject(sceneData)\n    }\n}\n\n\nInterested views can then use the FocusedObject property wrapper to observe and update the active scene’s state object. In this example, an app command updates the active scene’s data, and is enabled as long as any scene is active.\n\nstruct MessageCommands: Commands {\n    @FocusedObject private var sceneData: SceneData?\n\n\n    var body: some Commands {\n        CommandGroup(after: .newItem) {\n            Button(\"New Message\") {\n                sceneData?.addMessage()\n            }\n            .keyboardShortcut(\"n\", modifiers: [.option, .command])\n            .disabled(sceneData == nil)\n        }\n    }\n}\n"
  },
  {
    "title": "focusedSceneValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusedscenevalue(_:_:)-nzj",
    "html": "Parameters\nkeyPath\n\nThe key path to associate value with when adding it to the existing table of published focus values.\n\nvalue\n\nThe focus value to publish.\n\nReturn Value\n\nA modified representation of this view.\n\nDiscussion\n\nUse this method instead of View/focusedValue(_:_:) for values that must be visible regardless of where focus is located in the active scene. For example, if an app needs a command for moving focus to a particular text field in the sidebar, it could use this modifier to publish a button action that’s visible to command views as long as the scene is active, and regardless of where focus happens to be in it.\n\nstruct Sidebar: View {\n    @FocusState var isFiltering: Bool\n\n\n    var body: some View {\n        VStack {\n            TextField(...)\n                .focused(when: $isFiltering)\n                .focusedSceneValue(\\.filterAction) {\n                    isFiltering = true\n                }\n        }\n    }\n}\n\n\nstruct NavigationCommands: Commands {\n    @FocusedValue(\\.filterAction) var filterAction\n\n\n    var body: some Commands {\n        CommandMenu(\"Navigate\") {\n            Button(\"Filter in Sidebar\") {\n                filterAction?()\n            }\n        }\n        .disabled(filterAction == nil)\n    }\n}\n\n\nstruct FilterActionKey: FocusedValuesKey {\n    typealias Value = () -> Void\n}\n\n\nextension FocusedValues {\n    var filterAction: (() -> Void)? {\n        get { self[FilterActionKey.self] }\n        set { self[FilterActionKey.self] = newValue }\n    }\n}\n"
  },
  {
    "title": "focusedValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusedvalue(_:)",
    "html": "Discussion\n\nImportant\n\nThis initializer only accepts objects conforming to the Observable protocol. For reading environment objects that conform to ObservableObject, use focusedObject(_:), instead.\n\nTo read this value, use the FocusedValue property wrapper."
  },
  {
    "title": "defersSystemGestures(on:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/deferssystemgestures(on:)",
    "html": "Parameters\nedges\n\nA value that indicates the screen edge from which you want your gesture to take precedence over the system gesture.\n\nDiscussion\n\nThe following code defers the vertical screen edges system gestures of a given canvas.\n\nstruct DeferredView: View {\n    var body: some View {\n        Canvas()\n            .defersSystemGestures(on: .vertical)\n    }\n}\n"
  },
  {
    "title": "dialogSuppressionToggle(_:isSuppressed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/dialogsuppressiontoggle(_:issuppressed:)-4bnyh",
    "html": "Parameters\nlabel\n\nThe label of the suppression toggle in the dialog. This parameter can be elided to use the default suppression title.\n\nisSuppressed\n\nWhether the suppression toggle is on or off in the dialog.\n\nDiscussion\n\nApplying dialog suppression adds a toggle to dialogs on macOS, which allows the user to request the alert not be displayed again. Typically whether a dialog is suppressed is stored in AppStorage and used to decide whether to present the dialog in the future.\n\nThe following example configures a confirmationDialog with a suppression toggle. The toggle’s state is stored in AppStorage and used to determine whether or not to show the dialog when the “Delete Items” button is pressed.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n\n\n    @AppStorage(\"suppressEraseItemAlert\")\n    private var suppressAlert = false\n\n\n    var body: some View {\n        Button(\"Delete Items\") {\n            if !suppressAlert {\n                isShowingDialog = true\n            } else {\n                // Handle item deletion.\n            }\n        }\n        .confirmationDialog(\n            \"Are you sure you want to erase these items?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Erase\", role: .destructive) {\n                // Handle item deletion.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n        .dialogSuppressionToggle(\n            Text(\"Do not ask about erasing items again\"),\n            isSuppressed: $suppressAlert)\n    }\n}\n"
  },
  {
    "title": "dialogSuppressionToggle(_:isSuppressed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/dialogsuppressiontoggle(_:issuppressed:)-4i59d",
    "html": "Parameters\ntitle\n\nThe title of the suppression toggle in the dialog. This parameter can be elided to use the default suppression title.\n\nisSuppressed\n\nWhether the suppression toggle is on or off in the dialog.\n\nDiscussion\n\nApplying dialog suppression adds a toggle to dialogs on macOS, which allows the user to request the alert not be displayed again. Typically whether a dialog is suppressed is stored in AppStorage and used to decide whether to present the dialog in the future.\n\nThe following example configures a confirmationDialog with a suppression toggle. The toggle’s state is stored in AppStorage and used to determine whether or not to show the dialog when the “Delete Items” button is pressed.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n\n\n    @AppStorage(\"suppressEraseItemAlert\")\n    private var suppressAlert = false\n\n\n    var body: some View {\n        Button(\"Delete Items\") {\n            if !suppressAlert {\n                isShowingDialog = true\n            } else {\n                // Handle item deletion.\n            }\n        }\n        .confirmationDialog(\n            \"Are you sure you want to erase these items?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Erase\", role: .destructive) {\n                // Handle item deletion.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n        .dialogSuppressionToggle(\n            \"Do not ask about erasing items again\",\n            isSuppressed: $suppressAlert)\n    }\n}\n"
  },
  {
    "title": "onOpenURL(perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onopenurl(perform:)",
    "html": "Parameters\naction\n\nA function that takes a URL object as its parameter when delivering the URL to the scene or window the view is in.\n\nDiscussion\n\nNote\n\nThis method handles the reception of Universal Links, rather than a NSUserActivity."
  },
  {
    "title": "environmentObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/environmentobject(_:)",
    "html": "Parameters\nobject\n\nThe object to store and make available to the view’s hierarchy.\n\nDiscussion\n\nUse this modifier to add an observable object to a view’s environment. The object must conform to the ObservableObject protocol.\n\nAdding an object to a view’s environment makes the object available to subviews in the view’s hierarchy. To retrieve the object in a subview, use the EnvironmentObject property wrapper.\n\nNote\n\nIf the observable object conforms to the Observable protocol, use either View/environment(_:) or the View/environment(_:_:) modifier to add the object to the view’s environment."
  },
  {
    "title": "dropDestination(for:action:isTargeted:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/dropdestination(for:action:istargeted:)",
    "html": "Parameters\npayloadType\n\nThe expected type of the dropped models.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The first parameter to action contains the dropped items. The second parameter contains the drop location in this view’s coordinate space. Return true if the drop operation was successful; otherwise, return false.\n\nisTargeted\n\nA closure that is called when a drag and drop operation enters or exits the drop target area. The received value is true when the cursor is inside the area, and false when the cursor is outside.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified type.\n\nDiscussion\n\nThe dropped content can be provided as binary data, file URLs, or file promises.\n\nThe drop destination is the same size and position as this view.\n\n@State private var isDropTargeted = false\n\n\nvar body: some View {\n    Color.pink\n        .frame(width: 400, height: 400)\n        .dropDestination(for: String.self) { receivedTitles, location in\n            animateDrop(at: location)\n            process(titles: receivedTitles)\n        } isTargeted: {\n            isDropTargeted = $0\n        }\n}\n\n\nfunc process(titles: [String]) { ... }\nfunc animateDrop(at: CGPoint) { ... }\n"
  },
  {
    "title": "draggable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/draggable(_:)",
    "html": "Parameters\npayload\n\nA closure that returns a single instance or a value conforming to Transferable that represents the draggable data from this view.\n\nReturn Value\n\nA view that activates this view as the source of a drag and drop operation, beginning with user gesture input.\n\nDiscussion\n\nApplying the draggable(_:) modifier adds the appropriate gestures for drag and drop to this view. When a drag operation begins, a rendering of this view is generated and used as the preview image."
  },
  {
    "title": "environment(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/environment(_:_:)",
    "html": "Parameters\nkeyPath\n\nA key path that indicates the property of the EnvironmentValues structure to update.\n\nvalue\n\nThe new value to set for the item specified by keyPath.\n\nReturn Value\n\nA view that has the given value set in its environment.\n\nDiscussion\n\nUse this modifier to set one of the writable properties of the EnvironmentValues structure, including custom values that you create. For example, you can set the value associated with the EnvironmentValues/truncationMode key:\n\nMyView()\n    .environment(\\.truncationMode, .head)\n\n\nYou then read the value inside MyView or one of its descendants using the Environment property wrapper:\n\nstruct MyView: View {\n    @Environment(\\.truncationMode) var truncationMode: Text.TruncationMode\n\n\n    var body: some View { ... }\n}\n\n\nSwiftUI provides dedicated view modifiers for setting most environment values, like the View/truncationMode(_:) modifier which sets the EnvironmentValues/truncationMode value:\n\nMyView()\n    .truncationMode(.head)\n\n\nPrefer the dedicated modifier when available, and offer your own when defining custom environment values, as described in EnvironmentKey.\n\nThis modifier affects the given view, as well as that view’s descendant views. It has no effect outside the view hierarchy on which you call it."
  },
  {
    "title": "dynamicTypeSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/dynamictypesize(_:)",
    "html": "Parameters\nsize\n\nThe size to set for this view.\n\nReturn Value\n\nA view that sets the Dynamic Type size to the specified size.\n\nDiscussion\n\nAs an example, you can set a Dynamic Type size in ContentView to be DynamicTypeSize/xLarge (this can be useful in previews to see your content at a different size) like this:\n\nContentView()\n    .dynamicTypeSize(.xLarge)\n\n\nIf a Dynamic Type size range is applied after setting a value, the value is limited by that range:\n\nContentView() // Dynamic Type size will be .large\n    .dynamicTypeSize(...DynamicTypeSize.large)\n    .dynamicTypeSize(.xLarge)\n\n\nWhen limiting the Dynamic Type size, consider if adding a large content view with View/accessibilityShowsLargeContentViewer() would be appropriate."
  },
  {
    "title": "environment(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/environment(_:)",
    "html": "Parameters\nobject\n\nThe object to set for this object’s type in the environment, or nil to clear an object of this type from the environment.\n\nReturn Value\n\nA view that has the specified object in its environment.\n\nDiscussion\n\nUse this modifier to place an object that you declare with the Observable() macro into a view’s environment. For example, you can add an instance of a custom observable Profile class to the environment of a ContentView:\n\n@Observable class Profile { ... }\n\n\nstruct RootView: View {\n    @State private var currentProfile: Profile?\n\n\n    var body: some View {\n        ContentView()\n            .environment(currentProfile)\n    }\n}\n\n\nYou then read the object inside ContentView or one of its descendants using the Environment property wrapper:\n\nstruct ContentView: View {\n    @Environment(Profile.self) private var currentProfile: Profile\n\n\n    var body: some View { ... }\n}\n\n\nThis modifier affects the given view, as well as that view’s descendant views. It has no effect outside the view hierarchy on which you call it. The environment of a given view hierarchy holds only one observable object of a given type.\n\nNote\n\nThis modifier takes an object that conforms to the Observable protocol. To add environment objects that conform to the ObservableObject protocol, use View/environmentObject(_:) instead."
  },
  {
    "title": "edgesIgnoringSafeArea(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/edgesignoringsafearea(_:)",
    "html": "Parameters\nedges\n\nThe set of the edges in which to expand the size requested for this view.\n\nReturn Value\n\nA view that may extend outside of the screen’s safe area on the edges specified by edges.\n\nDiscussion\n\nUse edgesIgnoringSafeArea(_:) to change the area proposed for this view so that — were the proposal accepted — this view could extend outside the safe area to the bounds of the screen for the specified edges.\n\nFor example, you can propose that a text view ignore the safe area’s top inset:\n\nVStack {\n    Text(\"This text is outside of the top safe area.\")\n        .edgesIgnoringSafeArea([.top])\n        .border(Color.purple)\n    Text(\"This text is inside VStack.\")\n        .border(Color.yellow)\n}\n.border(Color.gray)\n\n\nDepending on the surrounding view hierarchy, SwiftUI may not honor an edgesIgnoringSafeArea(_:) request. This can happen, for example, if the view is inside a container that respects the screen’s safe area. In that case you may need to apply edgesIgnoringSafeArea(_:) to the container instead."
  },
  {
    "title": "fileDialogConfirmationLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogconfirmationlabel(_:)-5p8j2",
    "html": "Parameters\nlabel\n\nThe optional text to use as the label for the confirmation button."
  },
  {
    "title": "fileDialogBrowserOptions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogbrowseroptions(_:)",
    "html": "Parameters\noptions\n\nThe search options to apply to a given file dialog."
  },
  {
    "title": "fileDialogCustomizationID(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogcustomizationid(_:)",
    "html": "Parameters\nid\n\nAn identifier of the configuration.\n\nDiscussion\n\nAmong other parameters, it stores the current directory, view style (e.g., Icons, List, Columns), recent places, and expanded window size. It enables a refined user experience; for example, when importing an image, the user might switch to the Icons view, but the List view could be more convenient in another context. The file dialog stores these settings and applies them every time before presenting the panel. If not provided, on every launch, the file dialog uses the default configuration."
  },
  {
    "title": "fileDialogDefaultDirectory(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogdefaultdirectory(_:)",
    "html": "Parameters\ndefaultDirectory\n\nThe directory to show when the system file dialog launches. If the given file dialog has a fileDialogCustomizationID if stores the user-chosen directory and subsequently opens with it, ignoring the default value provided in this modifier."
  },
  {
    "title": "fileDialogImportsUnresolvedAliases(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogimportsunresolvedaliases(_:)",
    "html": "Parameters\nimports\n\nA Boolean value that indicates if the application receives unresolved or resolved URLs when a user chooses aliases.\n\nDiscussion\n\nBy default, file dialogs resolve aliases and provide the URL of the item referred to by the chosen alias. This modifier allows control of this behavior: pass true if the application doesn’t want file dialog to resolve aliases."
  },
  {
    "title": "fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-81d3y",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\ndocuments\n\nThe in-memory documents to export.\n\ncontentTypes\n\nThe list of supported content types which can be exported. If not provided, FileDocument.writableContentTypes are used.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the dialog to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCancellation will be called."
  },
  {
    "title": "fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-78sdk",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\ndocuments\n\nThe in-memory documents to export.\n\ncontentTypes\n\nThe list of supported content types which can be exported. If not provided, ReferenceFileDocument.writableContentTypes are used.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the dialog to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCancellation will be called."
  },
  {
    "title": "fileDialogMessage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogmessage(_:)-6ma35",
    "html": "Parameters\nmessage\n\nThe string to use as the file dialog message."
  },
  {
    "title": "fileDialogMessage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogmessage(_:)-10j3f",
    "html": "Parameters\nmessageKey\n\nThe key to a localized string to display."
  },
  {
    "title": "fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nitem\n\nThe item to be saved on disk.\n\ncontentTypes\n\nThe optional content types to use for the exported file. If empty, SwiftUI uses the content types from the transferRepresentation property provided for Transferable conformance.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the operation was cancelled.\n\nDiscussion\n\nIn order for the interface to appear isPresented must be set to true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called."
  },
  {
    "title": "fileExporterFilenameLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporterfilenamelabel(_:)-87zfp",
    "html": "Parameters\nlabel\n\nThe optional text to use as the label for the file name field."
  },
  {
    "title": "fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nitems\n\nCollection of values to be saved on disk.\n\ncontentTypes\n\nThe content types to use for the exported file. If empty, SwiftUI uses the content types from the transferRepresentation property provided for Transferable conformance.\n\nallowsOtherContentTypes\n\nA Boolean value that indicates if the users are allowed to save the files with a different file extension than specified by the contentType property.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the operation was cancelled.\n\nDiscussion\n\nIn order for the interface to appear isPresented must be set to true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called."
  },
  {
    "title": "onTapGesture(count:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ontapgesture(count:perform:)",
    "html": "Parameters\ncount\n\nThe number of taps or clicks required to trigger the action closure provided in action. Defaults to 1.\n\naction\n\nThe action to perform.\n\nDiscussion\n\nUse this method to perform the specified action when the user clicks or taps on the view or container count times.\n\nNote\n\nIf you create a control that’s functionally equivalent to a Button, use ButtonStyle to create a customized button instead.\n\nIn the example below, the color of the heart images changes to a random color from the colors array whenever the user clicks or taps on the view twice:\n\nstruct TapGestureExample: View {\n    let colors: [Color] = [.gray, .red, .orange, .yellow,\n                           .green, .blue, .purple, .pink]\n    @State private var fgColor: Color = .gray\n\n\n    var body: some View {\n        Image(systemName: \"heart.fill\")\n            .resizable()\n            .frame(width: 200, height: 200)\n            .foregroundColor(fgColor)\n            .onTapGesture(count: 2) {\n                fgColor = colors.randomElement()!\n            }\n    }\n}\n"
  },
  {
    "title": "bold(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/bold(_:)",
    "html": "Parameters\nisActive\n\nA Boolean value that indicates whether bold font styling is added. The default value is true.\n\nReturn Value\n\nA view with bold text."
  },
  {
    "title": "contrast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contrast(_:)",
    "html": "Parameters\namount\n\nThe intensity of color contrast to apply. negative values invert colors in addition to applying contrast.\n\nReturn Value\n\nA view that applies color contrast to this view.\n\nDiscussion\n\nApply contrast to a view to increase or decrease the separation between similar colors in the view.\n\nIn the example below, the contrast(_:) modifier is applied to a set of red squares each containing a contrasting green inner circle. At each step in the loop, the contrast(_:) modifier changes the contrast of the circle/square view in 20% increments. This ranges from -20% contrast (yielding inverted colors — turning the red square to pale-green and the green circle to mauve), to neutral-gray at 0%, to 100% contrast (bright-red square / bright-green circle). Applying negative contrast values, as shown in the -20% square, will apply contrast in addition to inverting colors.\n\nstruct CircleView: View {\n    var body: some View {\n        Circle()\n            .fill(Color.green)\n            .frame(width: 25, height: 25, alignment: .center)\n    }\n}\n\n\nstruct Contrast: View {\n    var body: some View {\n        HStack {\n            ForEach(-1..<6) {\n                Color.red.frame(width: 50, height: 50, alignment: .center)\n                    .overlay(CircleView(), alignment: .center)\n                    .contrast(Double($0) * 0.2)\n                    .overlay(Text(\"\\(Double($0) * 0.2 * 100, specifier: \"%.0f\")%\")\n                                 .font(.callout),\n                             alignment: .bottom)\n                    .border(Color.gray)\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "drawingGroup(opaque:colorMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/drawinggroup(opaque:colormode:)",
    "html": "Parameters\nopaque\n\nA Boolean value that indicates whether the image is opaque. The default is false; if set to true, the alpha channel of the image must be 1.\n\ncolorMode\n\nOne of the working color space and storage formats defined in ColorRenderingMode. The default is ColorRenderingMode/nonLinear.\n\nReturn Value\n\nA view that composites this view’s contents into an offscreen image before display.\n\nDiscussion\n\nThe drawingGroup(opaque:colorMode:) modifier flattens a subtree of views into a single view before rendering it.\n\nIn the example below, the contents of the view are composited to a single bitmap; the bitmap is then displayed in place of the view:\n\nVStack {\n    ZStack {\n        Text(\"DrawingGroup\")\n            .foregroundColor(.black)\n            .padding(20)\n            .background(Color.red)\n        Text(\"DrawingGroup\")\n            .blur(radius: 2)\n    }\n    .font(.largeTitle)\n    .compositingGroup()\n    .opacity(1.0)\n}\n .background(Color.white)\n .drawingGroup()\n\n\nNote\n\nViews backed by native platform views may not render into the image. Instead, they log a warning and display a placeholder image to highlight the error."
  },
  {
    "title": "fileExporterFilenameLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporterfilenamelabel(_:)-9wqmq",
    "html": "Parameters\nlabel\n\nThe string to use as the label for the file name field."
  },
  {
    "title": "onReceive(_:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onreceive(_:perform:)",
    "html": "Parameters\npublisher\n\nThe publisher to subscribe to.\n\naction\n\nThe action to perform when an event is emitted by publisher. The event emitted by publisher is passed as a parameter to action.\n\nReturn Value\n\nA view that triggers action when publisher emits an event."
  },
  {
    "title": "onPreferenceChange(_:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/onpreferencechange(_:perform:)",
    "html": "Parameters\nkey\n\nThe key to monitor for value changes.\n\naction\n\nThe action to perform when the value for key changes. The action closure passes the new value as its parameter.\n\nReturn Value\n\nA view that triggers action when the value for key changes."
  },
  {
    "title": "colorScheme(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/colorscheme(_:)",
    "html": "Parameters\ncolorScheme\n\nThe color scheme for this view.\n\nReturn Value\n\nA view that sets this view’s color scheme.\n\nDiscussion\n\nUse colorScheme(_:) to set the color scheme for the view to which you apply it and any subviews. If you want to set the color scheme for all views in the presentation, use View/preferredColorScheme(_:) instead."
  },
  {
    "title": "controlGroupStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/controlgroupstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to apply to controls within this view."
  },
  {
    "title": "onTapGesture(count:coordinateSpace:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/ontapgesture(count:coordinatespace:perform:)",
    "html": "Parameters\ncount\n\nThe number of taps or clicks required to trigger the action closure provided in action. Defaults to 1.\n\ncoordinateSpace\n\nThe coordinate space in which to receive location values. Defaults to CoordinateSpace/local.\n\naction\n\nThe action to perform. This closure receives an input that indicates where the interaction occurred.\n\nDiscussion\n\nUse this method to perform the specified action when the user clicks or taps on the modified view count times. The action closure receives the location of the interaction.\n\nNote\n\nIf you create a control that’s functionally equivalent to a Button, use ButtonStyle to create a customized button instead.\n\nThe following code adds a tap gesture to a Circle that toggles the color of the circle based on the tap location.\n\nstruct TapGestureExample: View {\n    @State private var location: CGPoint = .zero\n\n\n    var body: some View {\n        Circle()\n            .fill(self.location.y > 50 ? Color.blue : Color.red)\n            .frame(width: 100, height: 100, alignment: .center)\n            .onTapGesture { location in\n                self.location = location\n            }\n    }\n}\n"
  },
  {
    "title": "coordinateSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/coordinatespace(_:)",
    "html": "Parameters\nname\n\nA name used to identify this coordinate space.\n\nDiscussion\n\nUse coordinateSpace(_:) to allow another function to find and operate on a view and operate on dimensions relative to that view.\n\nThe example below demonstrates how a nested view can find and operate on its enclosing view’s coordinate space:\n\nstruct ContentView: View {\n    @State private var location = CGPoint.zero\n\n\n    var body: some View {\n        VStack {\n            Color.red.frame(width: 100, height: 100)\n                .overlay(circle)\n            Text(\"Location: \\(Int(location.x)), \\(Int(location.y))\")\n        }\n        .coordinateSpace(.named(\"stack\"))\n    }\n\n\n    var circle: some View {\n        Circle()\n            .frame(width: 25, height: 25)\n            .gesture(drag)\n            .padding(5)\n    }\n\n\n    var drag: some Gesture {\n        DragGesture(coordinateSpace: .named(\"stack\"))\n            .onChanged { info in location = info.location }\n    }\n}\n\n\nHere, the VStack in the ContentView named “stack” is composed of a red frame with a custom Circle view View/overlay(_:alignment:) at its center.\n\nThe circle view has an attached DragGesture that targets the enclosing VStack’s coordinate space. As the gesture recognizer’s closure registers events inside circle it stores them in the shared location state variable and the VStack displays the coordinates in a Text view."
  },
  {
    "title": "fileImporter(isPresented:allowedContentTypes:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nallowedContentTypes\n\nThe list of supported content types which can be imported.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, an application can have a button that allows the user to choose the default directory with document templates loaded on every launch. Such a button might look like this:\n\n struct PickTemplatesDirectoryButton: View {\n     @State private var showFileImporter = false\n     var onTemplatesDirectoryPicked: (URL) -> Void\n\n\n     var body: some View {\n         Button {\n             showFileImporter = true\n         } label: {\n             Label(\"Choose templates directory\", systemImage: \"folder.circle\")\n         }\n         .fileImporter(\n             isPresented: $showFileImporter,\n             allowedContentTypes: [.directory]\n         ) { result in\n              switch result {\n              case .success(let directory):\n                  // gain access to the directory\n                  let gotAccess = directory.startAccessingSecurityScopedResource()\n                  if !gotAccess { return }\n                  // access the directory URL\n                  // (read templates in the directory, make a bookmark, etc.)\n                  onTemplatesDirectoryPicked(directory)\n                  // release access\n                  directory.stopAccessingSecurityScopedResource()\n              case .failure(let error):\n                  // handle error\n                  print(error)\n              }\n         }\n     }\n }\n\n\nNote\n\nChanging allowedContentTypes while the file importer is presented will have no immediate effect, however will apply the next time it is presented."
  },
  {
    "title": "fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nallowedContentTypes\n\nThe list of supported content types which can be imported.\n\nallowsMultipleSelection\n\nWhether the importer allows the user to select more than one file to import.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, a button that allows the user to choose multiple PDF files for the application to combine them later, might look like this:\n\n   struct PickPDFsButton: View {\n       @State private var showFileImporter = false\n       var handlePickedPDF: (URL) -> Void\n\n\n       var body: some View {\n           Button {\n               showFileImporter = true\n           } label: {\n               Label(\"Choose PDFs to combine\", systemImage: \"doc.circle\")\n           }\n           .fileImporter(\n               isPresented: $showFileImporter,\n               allowedContentTypes: [.pdf],\n               allowsMultipleSelection: true\n           ) { result in\n               switch result {\n               case .success(let files):\n                   files.forEach { file in\n                       // gain access to the directory\n                       let gotAccess = file.startAccessingSecurityScopedResource()\n                       if !gotAccess { return }\n                       // access the directory URL\n                       // (read templates in the directory, make a bookmark, etc.)\n                       handlePickedPDF(file)\n                       // release access\n                       file.stopAccessingSecurityScopedResource()\n                   }\n               case .failure(let error):\n                   // handle error\n                   print(error)\n               }\n           }\n       }\n   }\n\n\nNote\n\nChanging allowedContentTypes or allowsMultipleSelection while the file importer is presented will have no immediate effect, however will apply the next time it is presented."
  },
  {
    "title": "fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\nallowedContentTypes\n\nThe list of supported content types which can be imported.\n\nallowsMultipleSelection\n\nWhether the importer allows the user to select more than one file to import.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the dialog to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, a button that allows the user to choose multiple PDF files for the application to combine them later, might look like this:\n\n   struct PickPDFsButton: View {\n       @State private var showFileImporter = false\n       var handlePickedPDF: (URL) -> Void\n\n\n       var body: some View {\n           Button {\n               showFileImporter = true\n           } label: {\n               Label(\"Choose PDFs to combine\", systemImage: \"doc.circle\")\n           }\n           .fileImporter(\n               isPresented: $showFileImporter,\n               allowedContentTypes: [.pdf],\n               allowsMultipleSelection: true\n           ) { result in\n               switch result {\n               case .success(let files):\n                   files.forEach { file in\n                       // gain access to the directory\n                       let gotAccess = file.startAccessingSecurityScopedResource()\n                       if !gotAccess { return }\n                       // access the directory URL\n                       // (read templates in the directory, make a bookmark, etc.)\n                       handlePickedPDF(file)\n                       // release access\n                       file.stopAccessingSecurityScopedResource()\n                   }\n               case .failure(let error):\n                   // handle error\n                   print(error)\n               }\n           }\n       }\n   }\n\n\nNote\n\nChanging allowedContentTypes or allowsMultipleSelection while the file importer is presented will have no immediate effect, however will apply the next time it is presented."
  },
  {
    "title": "cornerRadius(_:antialiased:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/cornerradius(_:antialiased:)",
    "html": "Parameters\nantialiased\n\nA Boolean value that indicates whether the rendering system applies smoothing to the edges of the clipping rectangle.\n\nReturn Value\n\nA view that clips this view to its bounding frame with the specified corner radius.\n\nDiscussion\n\nBy default, a view’s bounding frame only affects its layout, so any content that extends beyond the edges of the frame remains visible. Use cornerRadius(_:antialiased:) to hide any content that extends beyond these edges while applying a corner radius.\n\nThe following code applies a corner radius of 25 to a text view:\n\nText(\"Rounded Corners\")\n    .frame(width: 175, height: 75)\n    .foregroundColor(Color.white)\n    .background(Color.black)\n    .cornerRadius(25)\n"
  },
  {
    "title": "fileExporterFilenameLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporterfilenamelabel(_:)-upny",
    "html": "Parameters\nlabelKey\n\nThe key to a localized string to display."
  },
  {
    "title": "defaultAppStorage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/defaultappstorage(_:)",
    "html": "Parameters\nstore\n\nThe user defaults to use as the default store for AppStorage.\n\nDiscussion\n\nIf unspecified, the default store for a view hierarchy is UserDefaults.standard, but can be set a to a custom one. For example, sharing defaults between an app and an extension can override the default store to one created with UserDefaults.init(suiteName:_)."
  },
  {
    "title": "fixedSize() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fixedsize()",
    "html": "Return Value\n\nA view that fixes this view at its ideal size.\n\nDiscussion\n\nDuring the layout of the view hierarchy, each view proposes a size to each child view it contains. If the child view doesn’t need a fixed size it can accept and conform to the size offered by the parent.\n\nFor example, a Text view placed in an explicitly sized frame wraps and truncates its string to remain within its parent’s bounds:\n\nText(\"A single line of text, too long to fit in a box.\")\n    .frame(width: 200, height: 200)\n    .border(Color.gray)\n\n\nThe fixedSize() modifier can be used to create a view that maintains the ideal size of its children both dimensions:\n\nText(\"A single line of text, too long to fit in a box.\")\n    .fixedSize()\n    .frame(width: 200, height: 200)\n    .border(Color.gray)\n\n\nThis can result in the view exceeding the parent’s bounds, which may or may not be the effect you want.\n\nYou can think of fixedSize() as the creation of a counter proposal to the view size proposed to a view by its parent. The ideal size of a view, and the specific effects of fixedSize() depends on the particular view and how you have configured it.\n\nTo create a view that fixes the view’s size in either the horizontal or vertical dimensions, see View/fixedSize(horizontal:vertical:)."
  },
  {
    "title": "defaultFocus(_:_:priority:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/defaultfocus(_:_:priority:)",
    "html": "Parameters\nbinding\n\nA focus state binding to update when evaluating default focus in the modified view hierarchy.\n\nvalue\n\nThe value to set the binding to during evaluation.\n\npriority\n\nAn indication of how to prioritize the preferred default focus target when focus moves into the modified view hierarchy. The default value is automatic, which means the preference will be given priority when focus is being initialized or relocated programmatically, but not when responding to user-directed navigation commands.\n\nReturn Value\n\nThe modified view.\n\nDiscussion\n\nBy default, SwiftUI evaluates default focus when the window first appears, and when a focus state binding update moves focus automatically, but not when responding to user-driven navigation commands.\n\nClients can override the default behavior by specifying an evaluation priority of DefaultFocusEvaluationPriority/userInitiated, which causes SwiftUI to use the client’s preferred default focus in response to user-driven focus navigation as well as automatic changes.\n\nIn the following example, focus automatically goes to the second of the two text fields when the view is first presented in the window.\n\nWindowGroup {\n    VStack {\n        TextField(...)\n            .focused($focusedField, equals: .firstField)\n        TextField(...)\n            .focused($focusedField, equals: .secondField)\n    }\n    .defaultFocus($focusedField, .secondField)\n}\n"
  },
  {
    "title": "findDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/finddisabled(_:)",
    "html": "Parameters\nisDisabled\n\nA Boolean value that indicates whether to disable the find and replace interface for a text editor.\n\nReturn Value\n\nA view that disables the find and replace interface.\n\nDiscussion\n\nAdd this modifier to ensure that people can’t activate the find and replace interface for a TextEditor:\n\nTextEditor(text: $text)\n    .findDisabled()\n\n\nWhen you disable the find operation, you also implicitly disable the replace operation. If you want to only disable replace, use View/replaceDisabled(_:) instead.\n\nUsing this modifer also prevents programmatic find and replace interface presentation using the View/findNavigator(isPresented:) method. Be sure to place the disabling modifier closer to the text editor for this to work:\n\nTextEditor(text: $text)\n    .findDisabled(isDisabled)\n    .findNavigator(isPresented: $isPresented)\n\n\nIf you apply this modifer at multiple levels of a view hierarchy, the call closest to the text editor takes precedence. For example, people can activate find and replace for the first text editor in the following example, but not the second:\n\nVStack {\n    TextEditor(text: $text1)\n        .findDisabled(false)\n    TextEditor(text: $text2)\n}\n.findDisabled(true)\n"
  },
  {
    "title": "focusable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusable(_:)",
    "html": "Parameters\ns isFocusable\n\nA Boolean value that indicates whether this view is focusable.\n\nReturn Value\n\nA view that sets whether a view is focusable."
  },
  {
    "title": "focused(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focused(_:)",
    "html": "Parameters\ncondition\n\nThe focus state to bind. When focus moves to the view, the binding sets the bound value to true. If a caller sets the value to true programmatically, then focus moves to the modified view. When focus leaves the modified view, the binding sets the value to false. If a caller sets the value to false, SwiftUI automatically dismisses focus.\n\nReturn Value\n\nThe modified view.\n\nDiscussion\n\nUse this modifier to cause the view to receive focus whenever the the condition value is true. You can use this modifier to observe the focus state of a single view, or programmatically set and remove focus from the view.\n\nIn the following example, a single TextField accepts a user’s desired username. The text field binds its focus state to the Boolean value usernameFieldIsFocused. A “Submit” button’s action verifies whether the name is available. If the name is unavailable, the button sets usernameFieldIsFocused to true, which causes focus to return to the text field, so the user can enter a different name.\n\n@State private var username: String = \"\"\n@FocusState private var usernameFieldIsFocused: Bool\n@State private var showUsernameTaken = false\n\n\nvar body: some View {\n    VStack {\n        TextField(\"Choose a username.\", text: $username)\n            .focused($usernameFieldIsFocused)\n        if showUsernameTaken {\n            Text(\"That username is taken. Please choose another.\")\n        }\n        Button(\"Submit\") {\n            showUsernameTaken = false\n            if !isUserNameAvailable(username: username) {\n                usernameFieldIsFocused = true\n                showUsernameTaken = true\n            }\n        }\n    }\n}\n\n\nTo control focus by matching a value, use the View/focused(_:equals:) method instead."
  },
  {
    "title": "fixedSize(horizontal:vertical:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fixedsize(horizontal:vertical:)",
    "html": "Parameters\nhorizontal\n\nA Boolean value that indicates whether to fix the width of the view.\n\nvertical\n\nA Boolean value that indicates whether to fix the height of the view.\n\nReturn Value\n\nA view that fixes this view at its ideal size in the dimensions specified by horizontal and vertical.\n\nDiscussion\n\nThis function behaves like View/fixedSize(), except with fixedSize(horizontal:vertical:) the fixing of the axes can be optionally specified in one or both dimensions. For example, if you horizontally fix a text view before wrapping it in the frame view, you’re telling the text view to maintain its ideal width. The view calculates this to be the space needed to represent the entire string.\n\nText(\"A single line of text, too long to fit in a box.\")\n    .fixedSize(horizontal: true, vertical: false)\n    .frame(width: 200, height: 200)\n    .border(Color.gray)\n\n\nThis can result in the view exceeding the parent’s bounds, which may or may not be the effect you want."
  },
  {
    "title": "defaultHoverEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/defaulthovereffect(_:)",
    "html": "Parameters\neffect\n\nThe default hover effect to use for views within this view.\n\nReturn Value\n\nA view that uses this effect as the default hover effect.\n\nDiscussion\n\nUse this modifier to set a specific hover effect for all views with the View/hoverEffect(_:) modifier applied within a view. The default effect is typically used when no HoverEffect was provided or if HoverEffect/automatic is specified.\n\nFor example, this view uses HoverEffect/highlight for both the red and green Color views:\n\nHStack {\n    Color.red.hoverEffect()\n    Color.green.hoverEffect()\n}\n.defaultHoverEffect(.highlight)\n\n\nThis also works for customizing the default hover effect in views like Buttons when using a SwiftUI-defined style like ButtonStyle/bordered, which can provide a hover effect by default. For example, this view replaces the hover effect for a Button with HoverEffect/highlight:\n\nButton(\"Next\") {}\n    // perform action\n}\n.buttonStyle(.bordered)\n.defaultHoverEffect(.highlight)\n\n\nUse a nil effect to indicate that the default hover effect should not be modified."
  },
  {
    "title": "flipsForRightToLeftLayoutDirection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/flipsforrighttoleftlayoutdirection(_:)",
    "html": "Parameters\nenabled\n\nA Boolean value that indicates whether this view should have its content flipped horizontally when the layout direction is right-to-left. By default, views will adjust their layouts automatically in a right-to-left context and do not need to be mirrored.\n\nReturn Value\n\nA view that conditionally mirrors its contents horizontally when the layout direction is right-to-left.\n\nDiscussion\n\nUse flipsForRightToLeftLayoutDirection(_:) when you need the system to horizontally mirror the contents of the view when presented in a right-to-left layout.\n\nTo override the layout direction for a specific view, use the View/environment(_:_:) view modifier to explicitly override the EnvironmentValues/layoutDirection environment value for the view."
  },
  {
    "title": "focused(_:equals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focused(_:equals:)",
    "html": "Parameters\nbinding\n\nThe state binding to register. When focus moves to the modified view, the binding sets the bound value to the corresponding match value. If a caller sets the state value programmatically to the matching value, then focus moves to the modified view. When focus leaves the modified view, the binding sets the bound value to nil. If a caller sets the value to nil, SwiftUI automatically dismisses focus.\n\nvalue\n\nThe value to match against when determining whether the binding should change.\n\nReturn Value\n\nThe modified view.\n\nDiscussion\n\nUse this modifier to cause the view to receive focus whenever the the binding equals the value. Typically, you create an enumeration of fields that may receive focus, bind an instance of this enumeration, and assign its cases to focusable views.\n\nThe following example uses the cases of a LoginForm enumeration to bind the focus state of two TextField views. A sign-in button validates the fields and sets the bound focusedField value to any field that requires the user to correct a problem.\n\nstruct LoginForm {\n    enum Field: Hashable {\n        case usernameField\n        case passwordField\n    }\n\n\n    @State private var username = \"\"\n    @State private var password = \"\"\n    @FocusState private var focusedField: Field?\n\n\n    var body: some View {\n        Form {\n            TextField(\"Username\", text: $username)\n                .focused($focusedField, equals: .usernameField)\n\n\n            SecureField(\"Password\", text: $password)\n                .focused($focusedField, equals: .passwordField)\n\n\n            Button(\"Sign In\") {\n                if username.isEmpty {\n                    focusedField = .usernameField\n                } else if password.isEmpty {\n                    focusedField = .passwordField\n                } else {\n                    handleLogin(username, password)\n                }\n            }\n        }\n    }\n}\n\n\nTo control focus using a Boolean, use the View/focused(_:) method instead."
  },
  {
    "title": "focusable(_:interactions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focusable(_:interactions:)",
    "html": "Parameters\nisFocusable\n\ntrue if the view should participate in focus; false otherwise. The default value is true.\n\ninteractions\n\nThe types of focus interactions supported by the view. The default value is .automatic.\n\nReturn Value\n\nA view that sets whether its child is focusable.\n\nDiscussion\n\nBy default, SwiftUI enables all possible focus interactions. However, on macOS and iOS it is conventional for button-like views to only accept focus when the user has enabled keyboard navigation system-wide in the Settings app. Clients can reproduce this behavior with custom views by only supporting .activate interactions.\n\nMyTapGestureView(...)\n    .focusable(interactions: .activate)\n\n\nNote\n\nThe focus interactions allowed for custom views changed in macOS 14—previously, custom views could only become focused with keyboard navigation enabled system-wide. Clients built using older SDKs will continue to see the older focus behavior, while custom views in clients built using macOS 14 or later will always be focusable unless the client requests otherwise by specifying a restricted set of focus interactions."
  },
  {
    "title": "focusEffectDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/focuseffectdisabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean value that determines whether this view can display focus effects.\n\nReturn Value\n\nA view that controls whether focus effects can be displayed in this view.\n\nDiscussion\n\nThe higher views in a view hierarchy can override the value you set on this view. In the following example, the button does not display a focus effect because the outer focusEffectDisabled(_:) modifier overrides the inner one:\n\nHStack {\n    Button(\"Press\") {}\n        .focusEffectDisabled(false)\n}\n.focusEffectDisabled(true)\n"
  },
  {
    "title": "dialogIcon(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/dialogicon(_:)",
    "html": "Parameters\nicon\n\nThe custom icon to use for confirmation dialogs and alerts. Passing nil will use the default app icon.\n\nDiscussion\n\nOn macOS, this icon replaces the default icon of the app.\n\nOn watchOS, this icon will be shown in any dialogs presented.\n\nThis modifier has no effect on other platforms.\n\nThe following example configures a confirmationDialog with a custom image.\n\nButton(\"Delete items\") {\n    isShowingDialog = true\n}\n.confirmationDialog(\n    \"Are you sure you want to erase these items?\",\n        isPresented: $isShowingDialog\n) {\n    Button(\"Erase\", role: .destructive) {\n        // Handle item deletion.\n    }\n    Button(\"Cancel\", role: .cancel) {\n        isShowingDialog = false\n    }\n}\n.dialogIcon(Image(...))\n"
  },
  {
    "title": "disabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/disabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean value that determines whether users can interact with this view.\n\nReturn Value\n\nA view that controls whether users can interact with this view.\n\nDiscussion\n\nThe higher views in a view hierarchy can override the value you set on this view. In the following example, the button isn’t interactive because the outer disabled(_:) modifier overrides the inner one:\n\nHStack {\n    Button(Text(\"Press\")) {}\n    .disabled(false)\n}\n.disabled(true)\n"
  },
  {
    "title": "disableAutocorrection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/disableautocorrection(_:)",
    "html": "Parameters\nenabled\n\nA Boolean value that indicates whether autocorrection is disabled for this view.\n\nDiscussion\n\nUse disableAutocorrection(_:) when the effect of autocorrection would make it more difficult for the user to input information. The entry of proper names and street addresses are examples where autocorrection can negatively affect the user’s ability complete a data entry task.\n\nIn the example below configures a TextField with the .default keyboard. Disabling autocorrection allows the user to enter arbitrary text without the autocorrection system offering suggestions or attempting to override their input.\n\nTextField(\"1234 Main St.\", text: $address)\n    .keyboardType(.default)\n    .disableAutocorrection(true)\n"
  },
  {
    "title": "dialogSuppressionToggle(isSuppressed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/dialogsuppressiontoggle(issuppressed:)",
    "html": "Parameters\nisSuppressed\n\nWhether the suppression toggle is on or off in the dialog.\n\nDiscussion\n\nApplying dialog suppression adds a toggle to dialogs on macOS, which allows the user to request the alert not be displayed again. Typically whether a dialog is suppressed is stored in AppStorage and used to decide whether to present the dialog in the future.\n\nThe following example configures a confirmationDialog with a suppression toggle. The toggle’s state is stored in AppStorage and used to determine whether or not to show the dialog when the “Delete Items” button is pressed.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n\n\n    @AppStorage(\"suppressEraseItemAlert\")\n    private var suppressAlert = false\n\n\n    var body: some View {\n        Button(\"Delete Items\") {\n            if !suppressAlert {\n                isShowingDialog = true\n            } else {\n                // Handle item deletion.\n            }\n        }\n        .confirmationDialog(\n            \"Are you sure you want to erase these items?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Erase\", role: .destructive) {\n                // Handle item deletion.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n        .dialogSuppressionToggle(isSuppressed: $suppressAlert)\n    }\n}\n"
  },
  {
    "title": "distortionEffect(_:maxSampleOffset:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/distortioneffect(_:maxsampleoffset:isenabled:)",
    "html": "Parameters\nshader\n\nThe shader to apply as a distortion effect.\n\nmaxSampleOffset\n\nThe maximum distance in each axis between the returned source pixel position and the destination pixel position, for all source pixels.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a distortion effect.\n\nDiscussion\n\nFor a shader function to act as a distortion effect it must have a function signature matching:\n\n[[ stitchable ]] float2 name(float2 position, args...)\n\n\nwhere position is the user-space coordinates of the destination pixel applied to the shader. args... should be compatible with the uniform arguments bound to shader. The function should return the user-space coordinates of the corresponding source pixel.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error."
  },
  {
    "title": "overlay(_:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/overlay(_:alignment:)",
    "html": "Parameters\noverlay\n\nThe view to layer in front of this view.\n\nalignment\n\nThe alignment for overlay in relation to this view.\n\nReturn Value\n\nA view that layers overlay in front of the view.\n\nDiscussion\n\nWhen you apply an overlay to a view, the original view continues to provide the layout characteristics for the resulting view. In the following example, the heart image is shown overlaid in front of, and aligned to the bottom of the folder image.\n\nImage(systemName: \"folder\")\n    .font(.system(size: 55, weight: .thin))\n    .overlay(Text(\"❤️\"), alignment: .bottom)\n"
  },
  {
    "title": "overlay(_:ignoresSafeAreaEdges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/overlay(_:ignoressafeareaedges:)",
    "html": "Parameters\nstyle\n\nAn instance of a type that conforms to ShapeStyle that SwiftUI layers in front of the modified view.\n\nedges\n\nThe set of edges for which to ignore safe area insets when adding the overlay. The default value is Edge/Set/all. Specify an empty set to respect safe area insets on all edges.\n\nReturn Value\n\nA view with the specified style drawn in front of it.\n\nDiscussion\n\nUse this modifier to layer a type that conforms to the ShapeStyle protocol, like a Color, Material, or HierarchicalShapeStyle, in front of a view. For example, you can overlay the ShapeStyle/ultraThinMaterial over a Circle:\n\nstruct CoveredCircle: View {\n    var body: some View {\n        Circle()\n            .frame(width: 300, height: 200)\n            .overlay(.ultraThinMaterial)\n    }\n}\n\n\nSwiftUI anchors the style to the view’s bounds. For the example above, the overlay fills the entirety of the circle’s frame (which happens to be wider than the circle is tall):\n\nSwiftUI also limits the style’s extent to the view’s container-relative shape. You can see this effect if you constrain the CoveredCircle view with a View/containerShape(_:) modifier:\n\nCoveredCircle()\n    .containerShape(RoundedRectangle(cornerRadius: 30))\n\n\nThe overlay takes on the specified container shape:\n\nBy default, the overlay ignores safe area insets on all edges, but you can provide a specific set of edges to ignore, or an empty set to respect safe area insets on all edges:\n\nRectangle()\n    .overlay(\n        .secondary,\n        ignoresSafeAreaEdges: []) // Ignore no safe area insets.\n\n\nIf you want to specify a View or a stack of views as the overlay rather than a style, use View/overlay(alignment:content:) instead. If you want to specify a Shape, use View/overlay(_:in:fillStyle:)."
  },
  {
    "title": "fileExporter(isPresented:document:contentType:defaultFilename:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-17kco",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocument\n\nThe in-memory document to export.\n\ncontentType\n\nThe content type to use for the exported file.\n\ndefaultFilename\n\nIf provided, the default name to use for the exported file, which will the user will have an opportunity to edit prior to the export.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and document must not be nil. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nThe contentType provided must be included within the document type’s writableContentTypes, otherwise the first valid writable content type will be used instead."
  },
  {
    "title": "fileExporter(isPresented:documents:contentType:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:documents:contenttype:oncompletion:)-2w4d5",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocuments\n\nThe collection of in-memory documents to export.\n\ncontentType\n\nThe content type to use for the exported file.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and documents must not be empty. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nThe contentType provided must be included within the document type’s writableContentTypes, otherwise the first valid writable content type will be used instead."
  },
  {
    "title": "opacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/opacity(_:)",
    "html": "Parameters\nopacity\n\nA value between 0 (fully transparent) and 1 (fully opaque).\n\nReturn Value\n\nA view that sets the transparency of this view.\n\nDiscussion\n\nApply opacity to reveal views that are behind another view or to de-emphasize a view.\n\nWhen applying the opacity(_:) modifier to a view that has already had its opacity transformed, the modifier multiplies the effect of the underlying opacity transformation.\n\nThe example below shows yellow and red rectangles configured to overlap. The top yellow rectangle has its opacity set to 50%, allowing the occluded portion of the bottom rectangle to be visible:\n\nstruct Opacity: View {\n    var body: some View {\n        VStack {\n            Color.yellow.frame(width: 100, height: 100, alignment: .center)\n                .zIndex(1)\n                .opacity(0.5)\n\n\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .padding(-40)\n        }\n    }\n}\n"
  },
  {
    "title": "fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-7law4",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\ndocument\n\nThe in-memory document to export.\n\ncontentTypes\n\nThe list of supported content types which can be exported. If not provided, ReferenceFileDocument.writableContentTypes are used.\n\ndefaultFilename\n\nIf provided, the default name to use for the exported file, which will the user will have an opportunity to edit prior to the export.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the dialog to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCancellation will be called."
  },
  {
    "title": "fileExporter(isPresented:document:contentType:defaultFilename:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-9hppr",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocument\n\nThe in-memory document to export.\n\ncontentType\n\nThe content type to use for the exported file.\n\ndefaultFilename\n\nIf provided, the default name to use for the exported file, which will the user will have an opportunity to edit prior to the export.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and document must not be nil. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nThe contentType provided must be included within the document type’s writableContentTypes, otherwise the first valid writable content type will be used instead."
  },
  {
    "title": "fileExporter(isPresented:documents:contentType:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:documents:contenttype:oncompletion:)-21pqy",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocuments\n\nThe collection of in-memory documents to export.\n\ncontentType\n\nThe content type to use for the exported file.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and documents must not be empty. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nThe contentType provided must be included within the document type’s writableContentTypes, otherwise the first valid writable content type will be used instead."
  },
  {
    "title": "fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-cd06",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocument\n\nThe in-memory document to export.\n\ncontentTypes\n\nThe list of supported content types which can be exported. If not provided, FileDocument.writableContentTypes are used.\n\ndefaultFilename\n\nIf provided, the default name to use for the exported file, which will the user will have an opportunity to edit prior to the export.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the interface to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCancellation will be called."
  },
  {
    "title": "overlay(alignment:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/overlay(alignment:content:)",
    "html": "Parameters\nalignment\n\nThe alignment that the modifier uses to position the implicit ZStack that groups the foreground views. The default is Alignment/center.\n\ncontent\n\nA ViewBuilder that you use to declare the views to draw in front of this view, stacked in the order that you list them. The last view that you list appears at the front of the stack.\n\nReturn Value\n\nA view that uses the specified content as a foreground.\n\nDiscussion\n\nUse this modifier to place one or more views in front of another view. For example, you can place a group of stars on a RoundedRectangle:\n\nRoundedRectangle(cornerRadius: 8)\n    .frame(width: 200, height: 100)\n    .overlay(alignment: .topLeading) { Star(color: .red) }\n    .overlay(alignment: .topTrailing) { Star(color: .yellow) }\n    .overlay(alignment: .bottomLeading) { Star(color: .green) }\n    .overlay(alignment: .bottomTrailing) { Star(color: .blue) }\n\n\nThe example above assumes that you’ve defined a Star view with a parameterized color:\n\nstruct Star: View {\n    var color = Color.yellow\n\n\n    var body: some View {\n        Image(systemName: \"star.fill\")\n            .foregroundStyle(color)\n    }\n}\n\n\nBy setting different alignment values for each modifier, you make the stars appear in different places on the rectangle:\n\nIf you specify more than one view in the content closure, the modifier collects all of the views in the closure into an implicit ZStack, taking them in order from back to front. For example, you can place a star and a Circle on a field of ShapeStyle/blue:\n\nColor.blue\n    .frame(width: 200, height: 200)\n    .overlay {\n        Circle()\n            .frame(width: 100, height: 100)\n        Star()\n    }\n\n\nBoth the overlay modifier and the implicit ZStack composed from the overlay content — the circle and the star — use a default Alignment/center alignment. The star appears centered on the circle, and both appear as a composite view centered in front of the square:\n\nIf you specify an alignment for the overlay, it applies to the implicit stack rather than to the individual views in the closure. You can see this if you add the Alignment/bottom alignment:\n\nColor.blue\n    .frame(width: 200, height: 200)\n    .overlay(alignment: .bottom) {\n        Circle()\n            .frame(width: 100, height: 100)\n        Star()\n    }\n\n\nThe circle and the star move down as a unit to align the stack’s bottom edge with the bottom edge of the square, while the star remains centered on the circle:\n\nTo control the placement of individual items inside the content closure, either use a different overlay modifier for each item, as the earlier example of stars in the corners of a rectangle demonstrates, or add an explicit ZStack inside the content closure with its own alignment:\n\nColor.blue\n    .frame(width: 200, height: 200)\n    .overlay(alignment: .bottom) {\n        ZStack(alignment: .bottom) {\n            Circle()\n                .frame(width: 100, height: 100)\n            Star()\n        }\n    }\n\n\nThe stack alignment ensures that the star’s bottom edge aligns with the circle’s, while the overlay aligns the composite view with the square:\n\nYou can achieve layering without an overlay modifier by putting both the modified view and the overlay content into a ZStack. This can produce a simpler view hierarchy, but changes the layout priority that SwiftUI applies to the views. Use the overlay modifier when you want the modified view to dominate the layout.\n\nIf you want to specify a ShapeStyle like a Color or a Material as the overlay, use View/overlay(_:ignoresSafeAreaEdges:) instead. To specify a Shape, use View/overlay(_:in:fillStyle:)."
  },
  {
    "title": "fileDialogMessage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/filedialogmessage(_:)-7onfd",
    "html": "Parameters\nmessage\n\nThe optional text to use as the file dialog message."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-22vlt",
    "html": "Parameters\ntitle\n\nthe title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            Text(\"Import New File?\"),\n            isPresented: $isConfirming, presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"\"\"\n                Import \\(detail.name)\n                File Type: \\(detail.fileType.description)\n                \"\"\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8p3ib",
    "html": "Parameters\ntitle\n\nA text string used as the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    var title: String\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            title, isPresented: $isConfirming,\n            presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"\"\"\n                Import \\(detail.name)\n                File Type: \\(detail.fileType.description)\n                \"\"\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-pbef",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nmessage\n\nA view builder returning the message for the dialog given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            \"Are you sure you want to import this file?\",\n            isPresented: $isConfirming, presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"Import \\(detail.name)\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        } message: { detail in\n            Text(\n                \"\"\"\n                This will add \\(detail.name).\\(detail.fileType) \\\n                to your library.\n                \"\"\")\n        }\n    }\n}\n\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-9wv8c",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            \"Are you sure you want to import this file?\",\n            isPresented: $isConfirming, presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"\"\"\n                Import \\(detail.name)\n                File Type: \\(detail.fileType.description)\n                \"\"\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        }\n    }\n}\n\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "containerBackground(for:alignment:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/containerbackground(for:alignment:content:)",
    "html": "Parameters\nalignment\n\nThe alignment that the modifier uses to position the implicit ZStack that groups the background views. The default is Alignment/center.\n\ncontainer\n\nThe container that will use the background.\n\ncontent\n\nThe view to use as the background of the container.\n\nDiscussion\n\nThe following example uses a custom View as a background:\n\nstruct ContentView: View {\n    var body: some View {\n        NavigationStack {\n            List {\n                NavigationLink(\"Image\") {\n                    Text(\"Image\")\n                    .containerBackground(for: .navigation) {\n                        Image(name: \"ImageAsset\")\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nThe .containerBackground(for:alignment:content:) modifier differs from the View/background(_:ignoresSafeAreaEdges:) modifier by automatically filling an entire parent container. ContainerBackgroundPlacement describes the available containers."
  },
  {
    "title": "contextMenu(forSelectionType:menu:primaryAction:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contextmenu(forselectiontype:menu:primaryaction:)",
    "html": "Parameters\nitemType\n\nThe identifier type of the items. Ensure that this matches the container’s selection type.\n\nmenu\n\nA closure that produces the menu. A single parameter to the closure contains the set of items to act on. An empty set indicates menu activation over the empty area of the selectable container, while a non-empty set indicates menu activation over selected items. Use controls like Button, Picker, and Toggle to define the menu items. You can also create submenus using Menu, or group items with Section. You can deactivate the context menu by returning nothing from the closure.\n\nprimaryAction\n\nA closure that defines the action to perform in response to the primary interaction. A single parameter to the closure contains the set of items to act on.\n\nReturn Value\n\nA view that can display an item-based context menu.\n\nDiscussion\n\nYou can add an item-based context menu to a container that supports selection, like a List or a Table. In the closure that you use to define the menu, you receive a collection of items that depends on the selection state of the container and the location where the person clicks or taps to activate the menu. The collection contains:\n\nThe selected item or items, when people initiate the context menu from any selected item.\n\nNothing, if people tap or click to activate the context menu from an empty part of the container. This is true even when one or more items is currently selected.\n\nYou can vary the menu contents according to the number of selected items. For example, the following code has a list that defines an empty area menu, a single item menu, and a multi-item menu:\n\nstruct ContextMenuItemExample: View {\n    var items: [Item]\n    @State private var selection = Set<Item.ID>()\n\n\n    var body: some View {\n        List(selection: $selection) {\n            ForEach(items) { item in\n                Text(item.name)\n            }\n        }\n        .contextMenu(forSelectionType: Item.ID.self) { items in\n            if items.isEmpty { // Empty area menu.\n                Button(\"New Item\") { }\n\n\n            } else if items.count == 1 { // Single item menu.\n                Button(\"Copy\") { }\n                Button(\"Delete\", role: .destructive) { }\n\n\n            } else { // Multi-item menu.\n                Button(\"Copy\") { }\n                Button(\"New Folder With Selection\") { }\n                Button(\"Delete Selected\", role: .destructive) { }\n            }\n        }\n    }\n}\n\n\nThe above example assumes that the Item type conforms to the Identifiable protocol, and relies on the associated ID type for both selection and context menu presentation.\n\nIf you add the modifier to a view hierarchy that doesn’t have a container that supports selection, the context menu never activates. To add a context menu that doesn’t depend on selection behavior, use View/contextMenu(menuItems:). To add a context menu to a specific row in a table, use TableRowContent/contextMenu(menuItems:).\n\nAdd a primary action\n\nOptionally, you can add a custom primary action to the context menu. In macOS, a single click on a row in a selectable container selects that row, and a double click performs the primary action. In iOS and iPadOS, tapping on the row activates the primary action. To select a row without performing an action, either enter edit mode or hold shift or command on a keyboard while tapping the row.\n\nFor example, you can modify the context menu from the previous example so that double clicking the row on macOS opens a new window for selected items. Get the OpenWindowAction from the environment:\n\n@Environment(\\.openWindow) private var openWindow\n\n\nThen call EnvironmentValues/openWindow from inside the primaryAction closure for each item:\n\n.contextMenu(forSelectionType: Item.ID.self) { items in\n    // ...\n} primaryAction: { items in\n    for item in items {\n        openWindow(value: item)\n    }\n}\n\n\nThe open window action depends on the declaration of a WindowGroup scene in your App that responds to the Item type:\n\nWindowGroup(\"Item Detail\", for: Item.self) { $item in\n    // ...\n}\n"
  },
  {
    "title": "contentShape(_:_:eoFill:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contentshape(_:_:eofill:)",
    "html": "Parameters\nkind\n\nThe kinds to apply to this content shape.\n\nshape\n\nThe shape to use.\n\neoFill\n\nA Boolean that indicates whether the shape is interpreted with the even-odd winding number rule.\n\nReturn Value\n\nA view that uses the given shape for the specified kind.\n\nDiscussion\n\nThe content shape has a variety of uses. You can control the kind of the content shape by specifying one in kind. For example, the following example only sets the focus ring shape of the view, without affecting its shape for hit-testing:\n\nMyFocusableView()\n    .contentShape(.focusEffect, Circle())\n"
  },
  {
    "title": "contextMenu(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contextmenu(_:)",
    "html": "Parameters\ncontextMenu\n\nA context menu container for views that you present as menu items in a context menu.\n\nReturn Value\n\nA view that can show a context menu.\n\nDiscussion\n\nUse this method to attach a specified context menu to a view. You can make the context menu unavailable by conditionally passing nil as the value for the contextMenu.\n\nThe example below creates a ContextMenu that contains two items and passes them into the modifier. The Boolean value shouldShowMenu, which defaults to true, controls the context menu availability:\n\nprivate let menuItems = ContextMenu {\n    Button {\n        // Add this item to a list of favorites.\n    } label: {\n        Label(\"Add to Favorites\", systemImage: \"heart\")\n    }\n    Button {\n        // Open Maps and center it on this item.\n    } label: {\n        Label(\"Show in Maps\", systemImage: \"mappin\")\n    }\n}\n\n\nprivate struct ContextMenuMenuItems: View {\n    @State private var shouldShowMenu = true\n\n\n    var body: some View {\n        Text(\"Turtle Rock\")\n            .contextMenu(shouldShowMenu ? menuItems : nil)\n    }\n}\n"
  },
  {
    "title": "contextMenu(menuItems:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contextmenu(menuitems:)",
    "html": "Parameters\nmenuItems\n\nA closure that produces the menu’s contents. You can deactivate the context menu by returning nothing from the closure.\n\nReturn Value\n\nA view that can display a context menu.\n\nDiscussion\n\nUse this modifier to add a context menu to a view in your app’s user interface. Compose the menu by returning controls like Button, Toggle, and Picker from the menuItems closure. You can also use Menu to define submenus or Section to group items.\n\nThe following example creates a Text view that has a context menu with two buttons:\n\nText(\"Turtle Rock\")\n    .padding()\n    .contextMenu {\n        Button {\n            // Add this item to a list of favorites.\n        } label: {\n            Label(\"Add to Favorites\", systemImage: \"heart\")\n        }\n        Button {\n            // Open Maps and center it on this item.\n        } label: {\n            Label(\"Show in Maps\", systemImage: \"mappin\")\n        }\n    }\n\n\nPeople can activate the menu with an action like Control-clicking, or by using the touch and hold gesture in iOS and iPadOS:\n\nThe system dismisses the menu if someone makes a selection, or taps or clicks outside the menu.\n\nIf you want to show a preview beside the menu, use View/contextMenu(menuItems:preview:). To add a context menu to a container that supports selection, like a List or a Table, and to distinguish between menu activation on a selection and activation in an empty area of the container, use View/contextMenu(forSelectionType:menu:primaryAction:)."
  },
  {
    "title": "containerBackground(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/containerbackground(_:for:)",
    "html": "Discussion\n\nThe following example uses a LinearGradient as a background:\n\nstruct ContentView: View {\n    var body: some View {\n        NavigationStack {\n            List {\n                NavigationLink(\"Blue\") {\n                    Text(\"Blue\")\n                    .containerBackground(.blue.gradient, for: .navigation)\n                }\n                NavigationLink(\"Red\") {\n                    Text(\"Red\")\n                    .containerBackground(.red.gradient, for: .navigation)\n                }\n            }\n        }\n    }\n}\n\n\nThe .containerBackground(_:for:) modifier differs from the View/background(_:ignoresSafeAreaEdges:) modifier by automatically filling an entire parent container. ContainerBackgroundPlacement describes the available containers.\n\nParameters\n\nstyle: The shape style to use as the container background.\n\ncontainer: The container that will use the background."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-93jnn",
    "html": "Parameters\ntitle\n\nthe title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nmessage\n\nA view builder returning the message for the dialog given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            Text(\"Import New File?\"),\n            isPresented: $isConfirming, presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"Import \\(detail.name)\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        } message: { detail in\n            Text(\n                \"\"\"\n                This will add \\(detail.name).\\(detail.fileType) \\\n                to your library.\n                \"\"\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8bm5y",
    "html": "Parameters\ntitle\n\nA text string used as the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nmessage\n\nA view builder returning the message for the dialog given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    var title: String\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            title, isPresented: $isConfirming,\n            presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"Import \\(detail.name)\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        } message: { detail in\n            Text(\n                \"\"\"\n                This will add \\(detail.name).\\(detail.fileType) \\\n                to your library.\n                \"\"\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "contextMenu(menuItems:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contextmenu(menuitems:preview:)",
    "html": "Parameters\nmenuItems\n\nA closure that produces the menu’s contents. You can deactivate the context menu by returning nothing from the closure.\n\npreview\n\nA view that the system displays along with the menu.\n\nReturn Value\n\nA view that can display a context menu with a preview.\n\nDiscussion\n\nWhen you use this modifer to add a context menu to a view in your app’s user interface, the system shows a preview beside the menu. Compose the menu by returning controls like Button, Toggle, and Picker from the menuItems closure. You can also use Menu to define submenus or Section to group items.\n\nDefine the preview by returning a view from the preview closure. The system sizes the preview to match the size of its content. For example, you can add a two button context menu to a Text view, and include an Image as a preview:\n\nText(\"Turtle Rock\")\n    .padding()\n    .contextMenu {\n        Button {\n            // Add this item to a list of favorites.\n        } label: {\n            Label(\"Add to Favorites\", systemImage: \"heart\")\n        }\n        Button {\n            // Open Maps and center it on this item.\n        } label: {\n            Label(\"Show in Maps\", systemImage: \"mappin\")\n        }\n    } preview: {\n        Image(\"turtlerock\") // Loads the image from an asset catalog.\n    }\n\n\nWhen someone activates the context menu with an action like touch and hold in iOS or iPadOS, the system displays the image and the menu:\n\nNote\n\nThis view modifier produces a context menu on macOS, but that platform doesn’t display the preview.\n\nIf you don’t need a preview, use View/contextMenu(menuItems:) instead. If you want to add a context menu to a container that supports selection, like a List or a Table, and you want to distinguish between menu activation on a selection and activation in an empty area of the container, use View/contextMenu(forSelectionType:menu:primaryAction:)."
  },
  {
    "title": "contentShape(_:eoFill:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contentshape(_:eofill:)",
    "html": "Parameters\nshape\n\nThe hit testing shape for the view.\n\neoFill\n\nA Boolean that indicates whether the shape is interpreted with the even-odd winding number rule.\n\nReturn Value\n\nA view that uses the given shape for hit testing."
  },
  {
    "title": "contentTransition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contenttransition(_:)",
    "html": "Parameters\ntransition\n\nThe transition to apply when animating the content change.\n\nDiscussion\n\nThis modifier allows you to perform a transition that animates a change within a single view. The provided ContentTransition can present an opacity animation for content changes, an interpolated animation of the content’s paths as they change, or perform no animation at all.\n\nTip\n\nThe contentTransition(_:) modifier only has an effect within the context of an Animation.\n\nIn the following example, a Button changes the color and font size of a Text view. Since both of these properties apply to the paths of the text, the ContentTransition/interpolate transition can animate a gradual change to these properties through the entire transition. By contrast, the ContentTransition/opacity transition would simply fade between the start and end states.\n\nprivate static let font1 = Font.system(size: 20)\nprivate static let font2 = Font.system(size: 45)\n\n\n@State private var color = Color.red\n@State private var currentFont = font1\n\n\nvar body: some View {\n    VStack {\n        Text(\"Content transition\")\n            .foregroundColor(color)\n            .font(currentFont)\n            .contentTransition(.interpolate)\n        Spacer()\n        Button(\"Change\") {\n            withAnimation(Animation.easeInOut(duration: 5.0)) {\n                color = (color == .red) ? .green : .red\n                currentFont = (currentFont == font1) ? font2 : font1\n            }\n        }\n    }\n}\n\n\nThis example uses an ease-in–ease-out animation with a five-second duration to make it easier to see the effect of the interpolation. The figure below shows the Text at the beginning of the animation, halfway through, and at the end.\n\nTime\n\n\t\n\nDisplay\n\n\n\n\nStart\n\n\t\n\n\n\n\nMiddle\n\n\t\n\n\n\n\nEnd\n\n\t\n\nTo control whether content transitions use GPU-accelerated rendering, set the value of the EnvironmentValues/contentTransitionAddsDrawingGroup environment variable."
  },
  {
    "title": "blur(radius:opaque:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/blur(radius:opaque:)",
    "html": "Parameters\nradius\n\nThe radial size of the blur. A blur is more diffuse when its radius is large.\n\nopaque\n\nA Boolean value that indicates whether the blur renderer permits transparency in the blur output. Set to true to create an opaque blur, or set to false to permit transparency.\n\nDiscussion\n\nUse blur(radius:opaque:) to apply a gaussian blur effect to the rendering of this view.\n\nThe example below shows two Text views, the first with no blur effects, the second with blur(radius:opaque:) applied with the radius set to 2. The larger the radius, the more diffuse the effect.\n\nstruct Blur: View {\n    var body: some View {\n        VStack {\n            Text(\"This is some text.\")\n                .padding()\n            Text(\"This is some blurry text.\")\n                .blur(radius: 2.0)\n        }\n    }\n}\n"
  },
  {
    "title": "defaultScrollAnchor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/defaultscrollanchor(_:)",
    "html": "Discussion\n\nUse this modifier to specify an anchor to control both which part of the scroll view’s content should be visible initially and how the scroll view handles content size changes.\n\nProvide a value of `UnitPoint/center`` to have the scroll view start in the center of its content when a scroll view is scrollable in both axes.\n\nScrollView([.horizontal, .vertical]) {\n    // initially centered content\n}\n.defaultScrollAnchor(.center)\n\n\nProvide a value of UnitPoint/bottom to have the scroll view start at the bottom of its content when scrollable in the vertical axis.\n\n@Binding var items: [Item]\n@Binding var scrolledID: Item.ID?\n\n\nScrollView {\n    LazyVStack {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n}\n.defaultScrollAnchor(.bottom)\n\n\nThe user may scroll away from the initial defined scroll position. When the content size of the scroll view changes, it may consult the anchor to know how to reposition the content."
  },
  {
    "title": "draggable(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/draggable(_:preview:)",
    "html": "Parameters\npayload\n\nA closure that returns a single class instance or a value conforming to Transferable that represents the draggable data from this view.\n\npreview\n\nA View to use as the source for the dragging preview, once the drag operation has begun. The preview is centered over the source view.\n\nReturn Value\n\nA view that activates this view as the source of a drag and drop operation, beginning with user gesture input.\n\nDiscussion\n\nApplying the draggable(_:preview:) modifier adds the appropriate gestures for drag and drop to this view. When a drag operation begins, a rendering of preview is generated and used as the preview image.\n\nvar title: String\nvar body: some View {\n    Color.pink\n        .frame(width: 400, height: 400)\n        .draggable(title) {\n             Text(\"Drop me\")\n         }\n}\n"
  },
  {
    "title": "overlay(_:in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/overlay(_:in:fillstyle:)",
    "html": "Parameters\nstyle\n\nA ShapeStyle that SwiftUI uses to the fill the shape that you specify.\n\nshape\n\nAn instance of a type that conforms to Shape that SwiftUI draws in front of the view.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified shape drawn in front of it.\n\nDiscussion\n\nUse this modifier to layer a type that conforms to the Shape protocol — like a Rectangle, Circle, or Capsule — in front of a view. Specify a ShapeStyle that’s used to fill the shape. For example, you can overlay the outline of one rectangle in front of another:\n\nRectangle()\n    .frame(width: 200, height: 100)\n    .overlay(.teal, in: Rectangle().inset(by: 10).stroke(lineWidth: 5))\n\n\nThe example above uses the InsettableShape/inset(by:) method to slightly reduce the size of the overlaid rectangle, and the Shape/stroke(lineWidth:) method to fill only the shape’s outline. This creates an inset border:\n\nThis modifier is a convenience method for layering a shape over a view. To handle the more general case of overlaying a View — or a stack of views — with control over the position, use View/overlay(alignment:content:) instead. To cover a view with a ShapeStyle, use View/overlay(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "containerRelativeFrame(_:alignment:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/containerrelativeframe(_:alignment:_:)",
    "html": "Discussion\n\nUse the View/containerRelativeFrame(_:alignment:) modifier to specify a size for a view’s width, height, or both that is dependent on the size of the nearest container. Different things can represent a “container” including:\n\nThe window presenting a view on iPadOS or macOS, or the screen of a device on iOS.\n\nA column of a NavigationSplitView\n\nA NavigationStack\n\nA tab of a TabView\n\nA scrollable view like ScrollView or List\n\nThe size provided to this modifier is the size of a container like the ones listed above subtracting any safe area insets that might be applied to that container.\n\nThe following example will have each purple rectangle occupy the full size of the screen on iOS:\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 0.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .containerRelativeFrame([.horizontal, .vertical])\n        }\n    }\n}\n\n\nUse the View/containerRelativeFrame(_:count:spacing:alignment:) modifier to size a view such that multiple views will be visible in the container. When using this modifier, the count refers to the total number of rows or columns that the length of the container size in a particular axis should be divided into. The span refers to the number of rows or columns that the modified view should actually occupy. Thus the size of the element can be described like so:\n\nlet availableWidth = (containerWidth - (spacing * (count - 1)))\nlet columnWidth = (availableWidth / count)\nlet itemWidth = (columnWidth * span) + ((span - 1) * spacing)\n\n\nThe following example only uses the nearest container size in the horizontal axis, allowing the vertical axis to be determined using the View/aspectRatio(_:contentMode:)-771ow modifier.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .aspectRatio(3.0 / 2.0, contentMode: .fit)\n                .containerRelativeFrame(\n                    .horizontal, count: 4, span: 3, spacing: 10.0)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nUse this modifier to apply your own custom logic to adjust the size of the nearest container for your view. The following example will result in the container frame’s width being divided by 3 and using that value as the width of the purple rectangle.\n\nRectangle()\n    .fill(.purple)\n    .aspectRatio(1.0, contentMode: .fill)\n    .containerRelativeFrame(\n        .horizontal, alignment: .topLeading\n    ) { length, axis in\n        if axis == .vertical {\n            return length / 3.0\n        } else {\n            return length / 5.0\n        }\n    }\n"
  },
  {
    "title": "containerRelativeFrame(_:count:span:spacing:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/containerrelativeframe(_:count:span:spacing:alignment:)",
    "html": "Discussion\n\nUse the View/containerRelativeFrame(_:alignment:) modifier to specify a size for a view’s width, height, or both that is dependent on the size of the nearest container. Different things can represent a “container” including:\n\nThe window presenting a view on iPadOS or macOS, or the screen of a device on iOS.\n\nA column of a NavigationSplitView\n\nA NavigationStack\n\nA tab of a TabView\n\nA scrollable view like ScrollView or List\n\nThe size provided to this modifier is the size of a container like the ones listed above subtracting any safe area insets that might be applied to that container.\n\nThe following example will have each purple rectangle occupy the full size of the screen on iOS:\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 0.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .containerRelativeFrame([.horizontal, .vertical])\n        }\n    }\n}\n\n\nUse this modifier to size a view such that multiple views will be visible in the container. When using this modifier, the count refers to the total number of rows or columns that the length of the container size in a particular axis should be divided into. The span refers to the number of rows or columns that the modified view should actually occupy. Thus the size of the element can be described like so:\n\nlet availableWidth = (containerWidth - (spacing * (count - 1)))\nlet columnWidth = (availableWidth / count)\nlet itemWidth = (columnWidth * span) + ((span - 1) * spacing)\n\n\nThe following example only uses the nearest container size in the horizontal axis, allowing the vertical axis to be determined using the View/aspectRatio(_:contentMode:)-771ow modifier.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .aspectRatio(3.0 / 2.0, contentMode: .fit)\n                .containerRelativeFrame(\n                    .horizontal, count: 4, span: 3, spacing: 10.0)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nUse the View/containerRelativeFrame(_:alignment:_:) modifier to apply your own custom logic to adjust the size of the nearest container for your view. The following example will result in the container frame’s width being divided by 3 and using that value as the width of the purple rectangle.\n\nRectangle()\n    .fill(.purple)\n    .aspectRatio(1.0, contentMode: .fill)\n    .containerRelativeFrame(\n        .horizontal, alignment: .topLeading\n    ) { length, axis in\n        if axis == .vertical {\n            return length / 3.0\n        } else {\n            return length / 5.0\n        }\n    }\n"
  },
  {
    "title": "contentMargins(_:_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contentmargins(_:_:for:)-90ro2",
    "html": "Parameters\nedges\n\nThe edges to add the margins to.\n\nlength\n\nThe amount of margins to add.\n\nplacement\n\nWhere the margins should be added.\n\nDiscussion\n\nUse this modifier to customize the content margins of different kinds of views. For example, you can use this modifier to customize the margins of scrollable views like ScrollView. In the following example, the scroll view will automatically inset its content by the safe area plus an additional 20 points on the leading and trailing edge.\n\nScrollView(.horizontal) {\n    // ...\n}\n.contentMargins(.horizontal, 20.0)\n\n\nYou can provide a ContentMarginPlacement to target specific parts of a view to customize. For example, provide a ContentMargingPlacement/scrollContent placement to inset the content of a TextEditor without affecting the insets of its scroll indicators.\n\nTextEditor(text: $text)\n    .contentMargins(.horizontal, 20.0, for: .scrollContent)\n\n\nSimilarly, you can customize the insets of scroll indicators separately from scroll content. Consider doing this when applying a custom clip shape that may clip the indicators.\n\nScrollView {\n    // ...\n}\n.clipShape(.rect(cornerRadius: 20.0))\n.contentMargins(10.0, for: .scrollIndicators)\n\n\nWhen applying multiple contentMargins modifiers, modifiers with the same placement will override modifiers higher up in the view hierarchy."
  },
  {
    "title": "containerRelativeFrame(_:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/containerrelativeframe(_:alignment:)",
    "html": "Discussion\n\nUse this modifier to specify a size for a view’s width, height, or both that is dependent on the size of the nearest container. Different things can represent a “container” including:\n\nThe window presenting a view on iPadOS or macOS, or the screen of a device on iOS.\n\nA column of a NavigationSplitView\n\nA NavigationStack\n\nA tab of a TabView\n\nA scrollable view like ScrollView or List\n\nThe size provided to this modifier is the size of a container like the ones listed above subtracting any safe area insets that might be applied to that container.\n\nThe following example will have each purple rectangle occupy the full size of the screen on iOS:\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 0.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .containerRelativeFrame([.horizontal, .vertical])\n        }\n    }\n}\n\n\nUse the View/containerRelativeFrame(_:count:span:spacing:alignment:) modifier to size a view such that multiple views will be visible in the container. When using this modifier, the count refers to the total number of rows or columns that the length of the container size in a particular axis should be divided into. The span refers to the number of rows or columns that the modified view should actually occupy. Thus the size of the element can be described like so:\n\nlet availableWidth = (containerWidth - (spacing * (count - 1)))\nlet columnWidth = (availableWidth / count)\nlet itemWidth = (columnWidth * span) + ((span - 1) * spacing)\n\n\nThe following example only uses the nearest container size in the horizontal axis, allowing the vertical axis to be determined using the View/aspectRatio(_:contentMode:)-771ow modifier.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .aspectRatio(3.0 / 2.0, contentMode: .fit)\n                .containerRelativeFrame(\n                    .horizontal, count: 4, span: 3, spacing: 10.0)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nUse the View/containerRelativeFrame(_:alignment:_:) modifier to apply your own custom logic to adjust the size of the nearest container for your view. The following example will result in the container frame’s width being divided by 3 and using that value as the width of the purple rectangle.\n\nRectangle()\n    .fill(.purple)\n    .aspectRatio(1.0, contentMode: .fill)\n    .containerRelativeFrame(\n        .horizontal, alignment: .topLeading\n    ) { length, axis in\n        if axis == .vertical {\n            return length / 3.0\n        } else {\n            return length / 5.0\n        }\n    }\n"
  },
  {
    "title": "contentMargins(_:_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contentmargins(_:_:for:)-3bsmi",
    "html": "Parameters\nedges\n\nThe edges to add the margins to.\n\ninsets\n\nThe amount of margins to add.\n\nplacement\n\nWhere the margins should be added.\n\nDiscussion\n\nUse this modifier to customize the content margins of different kinds of views. For example, you can use this modifier to customize the margins of scrollable views like ScrollView. In the following example, the scroll view will automatically inset its content by the safe area plus an additional 20 points on the leading and trailing edge.\n\nScrollView(.horizontal) {\n    // ...\n}\n.contentMargins(.horizontal, 20.0)\n\n\nYou can provide a ContentMarginPlacement to target specific parts of a view to customize. For example, provide a ContentMargingPlacement/scrollContent placement to inset the content of a TextEditor without affecting the insets of its scroll indicators.\n\nTextEditor(text: $text)\n    .contentMargins(.horizontal, 20.0, for: .scrollContent)\n\n\nSimilarly, you can customize the insets of scroll indicators separately from scroll content. Consider doing this when applying a custom clip shape that may clip the indicators.\n\nScrollView {\n    // ...\n}\n.clipShape(.rect(cornerRadius: 20.0))\n.contentMargins(10.0, for: .scrollIndicators)\n\n\nWhen applying multiple contentMargins modifiers, modifiers with the same placement will override modifiers higher up in the view hierarchy."
  },
  {
    "title": "containerShape(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/containershape(_:)",
    "html": "Discussion\n\nThe example below defines a view that shows its content with a rounded rectangle background and the same container shape. Any ContainerRelativeShape within the content matches the rounded rectangle shape from this container inset as appropriate.\n\nstruct PlatterContainer<Content: View> : View {\n    @ViewBuilder var content: Content\n    var body: some View {\n        content\n            .padding()\n            .containerShape(shape)\n            .background(shape.fill(.background))\n    }\n    var shape: RoundedRectangle { RoundedRectangle(cornerRadius: 20) }\n}\n"
  },
  {
    "title": "contentMargins(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/contentmargins(_:for:)",
    "html": "Parameters\nlength\n\nThe amount of margins to add on all edges.\n\nplacement\n\nWhere the margins should be added.\n\nDiscussion\n\nUse this modifier to customize the content margins of different kinds of views. For example, you can use this modifier to customize the margins of scrollable views like ScrollView. In the following example, the scroll view will automatically inset its content by the safe area plus an additional 20 points on the leading and trailing edge.\n\nScrollView(.horizontal) {\n    // ...\n}\n.contentMargins(.horizontal, 20.0)\n\n\nYou can provide a ContentMarginPlacement to target specific parts of a view to customize. For example, provide a ContentMargingPlacement/scrollContent placement to inset the content of a TextEditor without affecting the insets of its scroll indicators.\n\nTextEditor(text: $text)\n    .contentMargins(.horizontal, 20.0, for: .scrollContent)\n\n\nSimilarly, you can customize the insets of scroll indicators separately from scroll content. Consider doing this when applying a custom clip shape that may clip the indicators.\n\nScrollView {\n    // ...\n}\n.clipShape(.rect(cornerRadius: 20.0))\n.contentMargins(10.0, for: .scrollIndicators)\n\n\nWhen applying multiple contentMargins modifiers, modifiers with the same placement will override modifiers higher up in the view hierarchy."
  },
  {
    "title": "overlayPreferenceValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/overlaypreferencevalue(_:_:)",
    "html": "Parameters\nkey\n\nThe preference key type whose value is to be read.\n\ntransform\n\nA function that produces the overlay view from the preference value read from the original view.\n\nReturn Value\n\nA view that layers a second view in front of the view."
  },
  {
    "title": "overlayPreferenceValue(_:alignment:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/overlaypreferencevalue(_:alignment:_:)",
    "html": "Parameters\nkey\n\nThe preference key type whose value is to be read.\n\nalignment\n\nAn optional alignment to use when positioning the overlay view relative to the original view.\n\ntransform\n\nA function that produces the overlay view from the preference value read from the original view.\n\nReturn Value\n\nA view that layers a second view in front of the view.\n\nDiscussion\n\nThe values of the preference key from both views are combined and made visible to the parent view."
  },
  {
    "title": "badge(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/badge(_:)-7ly4w",
    "html": "Parameters\nlabel\n\nAn optional string to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThis modifier creates a Text view on your behalf, and treats the localized key similar to Text/init(_:)-9d1g4. The following example shows a list with a “Default” badge on one of its rows.\n\nNavigationView {\n    List(servers) { server in\n        Text(server.name)\n            .badge(server.defaultString())\n    }\n    .navigationTitle(\"Servers\")\n}\n"
  },
  {
    "title": "badgeProminence(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/badgeprominence(_:)",
    "html": "Parameters\nprominence\n\nThe prominence to apply to badges.\n\nDiscussion\n\nBadges can be used for different kinds of information, from the passive number of items in a container to the number of required actions. The prominence of badges in Lists can be adjusted to reflect this and be made to draw more or less attention to themselves.\n\nBadges will default to standard prominence unless specified.\n\nThe following example shows a List displaying a list of folders with an informational badge with lower prominence, showing the number of items in the folder.\n\nList(folders) { folder in\n    Text(folder.name)\n        .badge(folder.numberOfItems)\n}\n.badgeProminence(.decreased)\n"
  },
  {
    "title": "badge(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/badge(_:)-4h3nf",
    "html": "Parameters\nkey\n\nAn optional string key to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThis modifier creates a Text view on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). For more information about localizing strings, see Text. The following example shows a list with a “Default” badge on one of its rows.\n\nNavigationView {\n    List(servers) { server in\n        Text(server.name)\n            .badge(server.isDefault ? \"Default\" : nil)\n    }\n    .navigationTitle(\"Servers\")\n}\n"
  },
  {
    "title": "badge(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/badge(_:)-bv2x",
    "html": "Parameters\ncount\n\nAn integer value to display in the badge. Set the value to zero to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThe following example shows a List with the value of recentItems.count represented by a badge on one of the rows:\n\nList {\n    Text(\"Recents\")\n        .badge(recentItems.count)\n    Text(\"Favorites\")\n}\n"
  },
  {
    "title": "baselineOffset(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/baselineoffset(_:)",
    "html": "Parameters\nbaselineOffset\n\nThe amount to shift the text vertically (up or down) relative to its baseline.\n\nReturn Value\n\nA view where text is above or below its baseline."
  },
  {
    "title": "badge(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/badge(_:)-2aa2h",
    "html": "Parameters\nlabel\n\nAn optional Text view to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nUse this initializer when you want to style a Text view for use as a badge. The following example customizes the badge with the Text/monospacedDigit(), Text/foregroundColor(_:), and Text/bold() modifiers.\n\nvar body: some View {\n    let badgeView = Text(\"\\(recentItems.count)\")\n        .monospacedDigit()\n        .foregroundColor(.red)\n        .bold()\n\n\n    List {\n        Text(\"Recents\")\n            .badge(badgeView)\n        Text(\"Favorites\")\n    }\n}\n\n\nStyling the text view has no effect when the badge appears in a TabView."
  },
  {
    "title": "blendMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/blendmode(_:)",
    "html": "Parameters\nblendMode\n\nThe BlendMode for compositing this view.\n\nReturn Value\n\nA view that applies blendMode to this view.\n\nDiscussion\n\nUse blendMode(_:) to combine overlapping views and use a different visual effect to produce the result. The BlendMode enumeration defines many possible effects.\n\nIn the example below, the two overlapping rectangles have a BlendMode/colorBurn effect applied, which effectively removes the non-overlapping portion of the second image:\n\nHStack {\n    Color.yellow.frame(width: 50, height: 50, alignment: .center)\n\n\n    Color.red.frame(width: 50, height: 50, alignment: .center)\n        .rotationEffect(.degrees(45))\n        .padding(-20)\n        .blendMode(.colorBurn)\n}\n"
  },
  {
    "title": "buttonStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/buttonstyle(_:)-6t2ea",
    "html": "Discussion\n\nUse this modifier to set a specific style for all button instances within a view:\n\nHStack {\n    Button(\"Sign In\", action: signIn)\n    Button(\"Register\", action: register)\n}\n.buttonStyle(.bordered)\n\n\nYou can also use this modifier to set the style for controls with a button style through composition:\n\nVStack {\n    Menu(\"Terms and Conditions\") {\n        Button(\"Open in Preview\", action: openInPreview)\n        Button(\"Save as PDF\", action: saveAsPDF)\n    }\n    Toggle(\"Remember Password\", isOn: $isToggleOn)\n    Toggle(\"Flag\", isOn: $flagged)\n    Button(\"Sign In\", action: signIn)\n}\n.menuStyle(.button)\n.toggleStyle(.button)\n.buttonStyle(.bordered)\n\n\nIn this example, .menuStyle(.button) says that the Terms and Conditions menu renders as a button, while .toggleStyle(.button) says that the two toggles also render as buttons. Finally, .buttonStyle(.bordered) says that the menu, both toggles, and the Sign In button all render with the bordered button style.```"
  },
  {
    "title": "border(_:width:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/border(_:width:)",
    "html": "Parameters\ncontent\n\nA value that conforms to the ShapeStyle protocol, like a Color or HierarchicalShapeStyle, that SwiftUI uses to fill the border.\n\nwidth\n\nThe thickness of the border. The default is 1 pixel.\n\nReturn Value\n\nA view that adds a border with the specified style and width to this view.\n\nDiscussion\n\nUse this modifier to draw a border of a specified width around the view’s frame. By default, the border appears inside the bounds of this view. For example, you can add a four-point wide border covers the text:\n\nText(\"Purple border inside the view bounds.\")\n    .border(Color.purple, width: 4)\n\n\nTo place a border around the outside of this view, apply padding of the same width before adding the border:\n\nText(\"Purple border outside the view bounds.\")\n    .padding(4)\n    .border(Color.purple, width: 4)\n"
  },
  {
    "title": "brightness(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/brightness(_:)",
    "html": "Parameters\namount\n\nA value between 0 (no effect) and 1 (full white brightening) that represents the intensity of the brightness effect.\n\nReturn Value\n\nA view that brightens this view by the specified amount.\n\nDiscussion\n\nUse brightness(_:) to brighten the intensity of the colors in a view. The example below shows a series of red squares, with their brightness increasing from 0 (fully red) to 100% (white) in 20% increments.\n\nstruct Brightness: View {\n    var body: some View {\n        HStack {\n            ForEach(0..<6) {\n                Color.red.frame(width: 60, height: 60, alignment: .center)\n                    .brightness(Double($0) * 0.2)\n                    .overlay(Text(\"\\(Double($0) * 0.2 * 100, specifier: \"%.0f\")%\"),\n                             alignment: .bottom)\n                    .border(Color.gray)\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "buttonRepeatBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/buttonrepeatbehavior(_:)",
    "html": "Parameters\nbehavior\n\nA value of enabled means that buttons should enable repeating behavior and a value of disabled means that buttons should disallow repeating behavior.\n\nDiscussion\n\nApply this to buttons that increment or decrement a value or perform some other inherently iterative operation. Interactions such as pressing-and-holding on the button, holding the button’s keyboard shortcut, or holding down the space key while the button is focused will trigger this repeat behavior.\n\nButton {\n    playbackSpeed.advance(by: 1)\n} label: {\n    Label(\"Speed up\", systemImage: \"hare\")\n}\n.buttonRepeatBehavior(.enabled)\n\n\nThis affects all system button styles, as well as automatically affects custom ButtonStyle conforming types. This does not automatically apply to custom PrimitiveButtonStyle conforming types, and the EnvironmentValues.buttonRepeatBehavior value should be used to adjust their custom gestures as appropriate."
  },
  {
    "title": "buttonBorderShape(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/buttonbordershape(_:)",
    "html": "Parameters\nshape\n\nthe shape to use.\n\nDiscussion\n\nThe border shape is used to draw the platter for a bordered button. On macOS, the specified border shape is only applied to bordered buttons in widgets."
  },
  {
    "title": "clipShape(_:style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/clipshape(_:style:)",
    "html": "Parameters\nshape\n\nThe clipping shape to use for this view. The shape fills the view’s frame, while maintaining its aspect ratio.\n\nstyle\n\nThe fill style to use when rasterizing shape.\n\nReturn Value\n\nA view that clips this view to shape, using style to define the shape’s rasterization.\n\nDiscussion\n\nUse clipShape(_:style:) to clip the view to the provided shape. By applying a clipping shape to a view, you preserve the parts of the view covered by the shape, while eliminating other parts of the view. The clipping shape itself isn’t visible.\n\nFor example, this code applies a circular clipping shape to a Text view:\n\nText(\"Clipped text in a circle\")\n    .frame(width: 175, height: 100)\n    .foregroundColor(Color.white)\n    .background(Color.black)\n    .clipShape(Circle())\n\n\nThe resulting view shows only the portion of the text that lies within the bounds of the circle."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:actions:)-1l8gu",
    "html": "Parameters\ntitle\n\nthe title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            Text(\"Permanently erase the items in the trash?\"),\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action."
  },
  {
    "title": "buttonStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/buttonstyle(_:)-9vo9l",
    "html": "Discussion\n\nUse this modifier to set a specific style for button instances within a view:\n\nHStack {\n    Button(\"Sign In\", action: signIn)\n    Button(\"Register\", action: register)\n}\n.buttonStyle(.bordered)\n"
  },
  {
    "title": "clipped(antialiased:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/clipped(antialiased:)",
    "html": "Parameters\nantialiased\n\nA Boolean value that indicates whether the rendering system applies smoothing to the edges of the clipping rectangle.\n\nReturn Value\n\nA view that clips this view to its bounding frame.\n\nDiscussion\n\nUse the clipped(antialiased:) modifier to hide any content that extends beyond the layout bounds of the shape.\n\nBy default, a view’s bounding frame is used only for layout, so any content that extends beyond the edges of the frame is still visible.\n\nText(\"This long text string is clipped\")\n    .fixedSize()\n    .frame(width: 175, height: 100)\n    .clipped()\n    .border(Color.gray)\n"
  },
  {
    "title": "compositingGroup() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/compositinggroup()",
    "html": "Return Value\n\nA view that wraps this view in a compositing group.\n\nDiscussion\n\nA compositing group makes compositing effects in this view’s ancestor views, such as opacity and the blend mode, take effect before this view is rendered.\n\nUse compositingGroup() to apply effects to a parent view before applying effects to this view.\n\nIn the example below the compositingGroup() modifier separates the application of effects into stages. It applies the View/opacity(_:) effect to the VStack before the blur(radius:) effect is applied to the views inside the enclosed ZStack. This limits the scope of the opacity change to the outermost view.\n\nVStack {\n    ZStack {\n        Text(\"CompositingGroup\")\n            .foregroundColor(.black)\n            .padding(20)\n            .background(Color.red)\n        Text(\"CompositingGroup\")\n            .blur(radius: 2)\n    }\n    .font(.largeTitle)\n    .compositingGroup()\n    .opacity(0.9)\n}\n"
  },
  {
    "title": "background(alignment:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/background(alignment:content:)",
    "html": "Parameters\nalignment\n\nThe alignment that the modifier uses to position the implicit ZStack that groups the background views. The default is Alignment/center.\n\ncontent\n\nA ViewBuilder that you use to declare the views to draw behind this view, stacked in a cascading order from bottom to top. The last view that you list appears at the front of the stack.\n\nReturn Value\n\nA view that uses the specified content as a background.\n\nDiscussion\n\nUse this modifier to place one or more views behind another view. For example, you can place a collection of stars beind a Text view:\n\nText(\"ABCDEF\")\n    .background(alignment: .leading) { Star(color: .red) }\n    .background(alignment: .center) { Star(color: .green) }\n    .background(alignment: .trailing) { Star(color: .blue) }\n\n\nThe example above assumes that you’ve defined a Star view with a parameterized color:\n\nstruct Star: View {\n    var color: Color\n\n\n    var body: some View {\n        Image(systemName: \"star.fill\")\n            .foregroundStyle(color)\n    }\n}\n\n\nBy setting different alignment values for each modifier, you make the stars appear in different places behind the text:\n\nIf you specify more than one view in the content closure, the modifier collects all of the views in the closure into an implicit ZStack, taking them in order from back to front. For example, you can layer a vertical bar behind a circle, with both of those behind a horizontal bar:\n\nColor.blue\n    .frame(width: 200, height: 10) // Creates a horizontal bar.\n    .background {\n        Color.green\n            .frame(width: 10, height: 100) // Creates a vertical bar.\n        Circle()\n            .frame(width: 50, height: 50)\n    }\n\n\nBoth the background modifier and the implicit ZStack composed from the background content — the circle and the vertical bar — use a default Alignment/center alignment. The vertical bar appears centered behind the circle, and both appear as a composite view centered behind the horizontal bar:\n\nIf you specify an alignment for the background, it applies to the implicit stack rather than to the individual views in the closure. You can see this if you add the Alignment/leading alignment:\n\nColor.blue\n    .frame(width: 200, height: 10)\n    .background(alignment: .leading) {\n        Color.green\n            .frame(width: 10, height: 100)\n        Circle()\n            .frame(width: 50, height: 50)\n    }\n\n\nThe vertical bar and the circle move as a unit to align the stack with the leading edge of the horizontal bar, while the vertical bar remains centered on the circle:\n\nTo control the placement of individual items inside the content closure, either use a different background modifier for each item, as the earlier example of stars under text demonstrates, or add an explicit ZStack inside the content closure with its own alignment:\n\nColor.blue\n    .frame(width: 200, height: 10)\n    .background(alignment: .leading) {\n        ZStack(alignment: .leading) {\n            Color.green\n                .frame(width: 10, height: 100)\n            Circle()\n                .frame(width: 50, height: 50)\n        }\n    }\n\n\nThe stack alignment ensures that the circle’s leading edge aligns with the vertical bar’s, while the background modifier aligns the composite view with the horizontal bar:\n\nYou can achieve layering without a background modifier by putting both the modified view and the background content into a ZStack. This produces a simpler view hierarchy, but it changes the layout priority that SwiftUI applies to the views. Use the background modifier when you want the modified view to dominate the layout.\n\nIf you want to specify a ShapeStyle like a HierarchicalShapeStyle or a Material as the background, use View/background(_:ignoresSafeAreaEdges:) instead. To specify a Shape or InsettableShape, use View/background(_:in:fillStyle:)-89n7j or View/background(_:in:fillStyle:)-20tq5, respectively. To configure the background of a presentation, like a sheet, use View/presentationBackground(alignment:content:)."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6sbqa",
    "html": "Parameters\ntitle\n\nA text string used as the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nmessage\n\nA view builder returning the message for the dialog.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var title: String\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            title,\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        } message: {\n            Text(\"You cannot undo this action.\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-34k2p",
    "html": "Parameters\ntitle\n\nthe title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nmessage\n\nA view builder returning the message for the dialog.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            Text(\"Permanently erase the items in the trash?\"),\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n        } message: {\n            Text(\"You cannot undo this action.\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action."
  },
  {
    "title": "phaseAnimator(_:content:animation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/phaseanimator(_:content:animation:)",
    "html": "Parameters\nphases\n\nThe sequence of phases to cycle through. Ensure that the sequence isn’t empty. If it is, SwiftUI logs a runtime warning and also returns a visual warning as the output view.\n\ncontent\n\nA view builder closure that takes two parameters: a proxy value representing the modified view and the current phase. You can apply effects to the proxy based on the current phase.\n\nanimation\n\nA closure that takes the current phase as input. Return the animation to use when transitioning to the next phase. If you return nil, the transition doesn’t animate. If you don’t set this parameter, SwiftUI uses a default animation.\n\nDiscussion\n\nWhen the modified view first appears, this modifier renders its content closure using the first phase as input to the closure, along with a proxy for the modified view. Apply effects to the proxy — and thus to the modified view — in a way that’s appropriate for the first phase value.\n\nRight away, the modifier provides its content closure with the value of the second phase. Update the effects that you apply to the proxy view accordingly, and the modifier animates the change for you. As soon as the animation completes, the procedure repeats using successive phases until reaching the last phase, at which point the modifier loops back to the first phase."
  },
  {
    "title": "background(_:in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/background(_:in:fillstyle:)-2r0dw",
    "html": "Parameters\nstyle\n\nA ShapeStyle that SwiftUI uses to the fill the shape that you specify.\n\nshape\n\nAn instance of a type that conforms to Shape that SwiftUI draws behind the view.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified shape drawn behind it.\n\nDiscussion\n\nUse this modifier to layer a type that conforms to the Shape protocol behind a view. Specify the ShapeStyle that’s used to fill the shape. For example, you can create a Path that outlines a trapezoid:\n\nlet trapezoid = Path { path in\n    path.move(to: .zero)\n    path.addLine(to: CGPoint(x: 90, y: 0))\n    path.addLine(to: CGPoint(x: 80, y: 50))\n    path.addLine(to: CGPoint(x: 10, y: 50))\n}\n\n\nThen you can use that shape as a background for a Label:\n\nLabel(\"Flag\", systemImage: \"flag.fill\")\n    .padding()\n    .background(.teal, in: trapezoid)\n\n\nThe ShapeStyle/teal color fills the shape:\n\nThis modifier and View/background(_:in:fillStyle:)-20tq5 are convenience methods for placing a single shape behind a view. To create a background with other View types — or with a stack of views — use View/background(alignment:content:) instead. To add a ShapeStyle as a background, use View/background(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "background(in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/background(in:fillstyle:)-17tap",
    "html": "Parameters\nshape\n\nAn instance of a type that conforms to Shape that SwiftUI draws behind the view using the ShapeStyle/background shape style.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified shape drawn behind it.\n\nDiscussion\n\nThis modifier behaves like View/background(_:in:fillStyle:)-89n7j, except that it always uses the ShapeStyle/background shape style to fill the specified shape. For example, you can create a Path that outlines a trapezoid:\n\nlet trapezoid = Path { path in\n    path.move(to: .zero)\n    path.addLine(to: CGPoint(x: 90, y: 0))\n    path.addLine(to: CGPoint(x: 80, y: 50))\n    path.addLine(to: CGPoint(x: 10, y: 50))\n}\n\n\nThen you can use that shape as a background for a Label:\n\nZStack {\n    Color.teal\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background(in: trapezoid)\n}\n\n\nWithout the background modifier, the fill color shows through the label. With the modifier, the label’s text and icon appear backed by a shape filled with a color that’s appropriate for light or dark appearance:\n\nTo create a background with other View types — or with a stack of views — use View/background(alignment:content:) instead. To add a ShapeStyle as a background, use View/background(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "paletteSelectionEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/paletteselectioneffect(_:)",
    "html": "Parameters\neffect\n\nThe type of effect to apply when a palette item is selected.\n\nDiscussion\n\nPaletteSelectionEffect/automatic applies the system’s default appearance when selected. When using un-tinted SF Symbols or template images, the current tint color is applied to the selected items’ image. If the provided SF Symbols have custom tints, a stroke is drawn around selected items.\n\nIf you wish to provide a specific image (or SF Symbol) to indicate selection, use PaletteSelectionEffect/custom to forgo the system’s default selection appearance allowing the provided image to solely indicate selection instead.\n\nThe following example creates a palette picker that disables the system selection behavior:\n\nMenu {\n    Picker(\"Palettes\", selection: $selection) {\n        ForEach(palettes) { palette in\n            Label(palette.title, image: selection == palette ?\n                  \"selected-palette\" : \"palette\")\n            .tint(palette.tint)\n            .tag(palette)\n        }\n    }\n    .pickerStyle(.palette)\n    .paletteSelectionEffect(.custom)\n} label: {\n    ...\n}\n\n\nIf a specific SF Symbol variant is preferable instead, use PaletteSelectionEffect/symbolVariant(_:).\n\nMenu {\n    ControlGroup {\n        ForEach(ColorTags.allCases) { colorTag in\n            Toggle(isOn: $selectedColorTags[colorTag]) {\n                Label(colorTag.name, systemImage: \"circle\")\n            }\n            .tint(colorTag.color)\n        }\n    }\n    .controlGroupStyle(.palette)\n    .paletteSelectionEffect(.symbolVariant(.fill))\n}\n"
  },
  {
    "title": "persistentSystemOverlays(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/persistentsystemoverlays(_:)",
    "html": "Parameters\nvisibility\n\nA value that indicates the visibility of the non-transient system views overlaying the app.\n\nDiscussion\n\nUse this modifier if you would like to customise the immersive experience of your app by hiding or showing system overlays that may affect user experience. The following example hides every persistent system overlay.\n\nstruct ImmersiveView: View {\n    var body: some View {\n        Text(\"Maximum immersion\")\n            .persistentSystemOverlays(.hidden)\n    }\n}\n\n\nNote that this modifier only sets a preference and, ultimately the system will decide if it will honour it or not.\n\nThese non-transient system views include:\n\nThe Home indicator\n\nThe SharePlay indicator\n\nThe Multi-task indicator and Picture-in-picture on iPad"
  },
  {
    "title": "padding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/padding(_:)-55xnh",
    "html": "Parameters\ninsets\n\nAn EdgeInsets instance that contains padding amounts for each edge.\n\nReturn Value\n\nA view that’s padded by different amounts on each edge.\n\nDiscussion\n\nUse this modifier to add a different amount of padding on each edge of a view:\n\nVStack {\n    Text(\"Text padded by different amounts on each edge.\")\n        .padding(EdgeInsets(top: 10, leading: 20, bottom: 40, trailing: 0))\n        .border(.gray)\n    Text(\"Unpadded text for comparison.\")\n        .border(.yellow)\n}\n\n\nThe order in which you apply modifiers matters. The example above applies the padding before applying the border to ensure that the border encompasses the padded region:\n\nTo pad a view on specific edges with equal padding for all padded edges, use View/padding(_:_:). To pad all edges of a view equally, use View/padding(_:)-68shk."
  },
  {
    "title": "backgroundPreferenceValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/backgroundpreferencevalue(_:_:)",
    "html": "Parameters\nkey\n\nThe preference key type whose value is to be read.\n\ntransform\n\nA function that produces the background view from the preference value read from the original view.\n\nReturn Value\n\nA view that layers a second view behind the view."
  },
  {
    "title": "backgroundStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/backgroundstyle(_:)",
    "html": "Discussion\n\nThe following example uses this modifier to set the EnvironmentValues/backgroundStyle environment value to a ShapeStyle/blue color that includes a subtle Color/gradient. SwiftUI fills the Circle shape that acts as a background element with this style:\n\nImage(systemName: \"swift\")\n    .padding()\n    .background(in: Circle())\n    .backgroundStyle(.blue.gradient)\n\n\nTo restore the default background style, set the EnvironmentValues/backgroundStyle environment value to nil using the View/environment(_:_:) modifer:\n\n.environment(\\.backgroundStyle, nil)\n"
  },
  {
    "title": "backgroundPreferenceValue(_:alignment:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/backgroundpreferencevalue(_:alignment:_:)",
    "html": "Parameters\nkey\n\nThe preference key type whose value is to be read.\n\nalignment\n\nAn optional alignment to use when positioning the background view relative to the original view.\n\ntransform\n\nA function that produces the background view from the preference value read from the original view.\n\nReturn Value\n\nA view that layers a second view behind the view.\n\nDiscussion\n\nThe values of the preference key from both views are combined and made visible to the parent view."
  },
  {
    "title": "anchorPreference(key:value:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/anchorpreference(key:value:transform:)",
    "html": "Parameters\nkey\n\nthe preference key type.\n\nvalue\n\nthe geometry value in the current coordinate space.\n\ntransform\n\nthe function to produce the preference value.\n\nReturn Value\n\na new version of the view that writes the preference."
  },
  {
    "title": "animation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/animation(_:)",
    "html": "Deprecated\n\nUse withAnimation or animation(_:value:) instead.\n\nParameters\nanimation\n\nThe animation to apply to animatable values within this view.\n\nReturn Value\n\nA view that wraps this view and applies animation to all animatable values used within the view.\n\nDiscussion\n\nUse this modifier on leaf views rather than container views. The animation applies to all child views within this view; calling animation(_:) on a container view can lead to unbounded scope."
  },
  {
    "title": "animation(_:body:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/animation(_:body:)",
    "html": "Discussion\n\nAny modifiers applied to the content of body will be applied to this view, and the animation will only be used on the modifiers defined in the body.\n\nThe following code animates the opacity changing with an easeInOut animation, while the contents of MyView are animated with the implicit transaction’s animation:\n\nMyView(isActive: isActive)\n    .animation(.easeInOut) { content in\n        content.opacity(isActive ? 1.0 : 0.0)\n    }\n"
  },
  {
    "title": "allowsTightening(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/allowstightening(_:)",
    "html": "Parameters\nflag\n\nA Boolean value that indicates whether the space between characters compresses when necessary.\n\nReturn Value\n\nA view that can compress the space between characters when necessary to fit text in a line.\n\nDiscussion\n\nUse allowsTightening(_:) to enable the compression of inter-character spacing of text in a view to try to fit the text in the view’s bounds.\n\nIn the example below, two identically configured text views show the effects of allowsTightening(_:) on the compression of the spacing between characters:\n\nVStack {\n    Text(\"This is a wide text element\")\n        .font(.body)\n        .frame(width: 200, height: 50, alignment: .leading)\n        .lineLimit(1)\n        .allowsTightening(true)\n\n\n    Text(\"This is a wide text element\")\n        .font(.body)\n        .frame(width: 200, height: 50, alignment: .leading)\n        .lineLimit(1)\n        .allowsTightening(false)\n}\n"
  },
  {
    "title": "alert(isPresented:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(ispresented:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert that you create in the modifier’s content closure. When the user presses or taps OK the system sets isPresented to false which dismisses the alert.\n\ncontent\n\nA closure returning the alert to present.\n\nDiscussion\n\nUse this method when you need to show an alert to the user. The example below displays an alert that is shown when the user toggles a Boolean value that controls the presentation of the alert:\n\nstruct OrderCompleteAlert: View {\n    @State private var isPresented = false\n    var body: some View {\n        Button(\"Show Alert\", action: {\n            isPresented = true\n        })\n        .alert(isPresented: $isPresented) {\n            Alert(title: Text(\"Order Complete\"),\n                  message: Text(\"Thank you for shopping with us.\"),\n                  dismissButton: .default(Text(\"OK\")))\n        }\n    }\n}\n"
  },
  {
    "title": "alert(_:isPresented:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:actions:)-3oguc",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                \"Login failed.\",\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4ozw6",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nmessage\n\nA view builder returning the message for the dialog.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            \"Permanently erase the items in the Trash?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n        } message: {\n            Text(\"You cannot undo this action.\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "padding(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/padding(_:_:)",
    "html": "Parameters\nedges\n\nThe set of edges to pad for this view. The default is Edge/Set/all.\n\nlength\n\nAn amount, given in points, to pad this view on the specified edges. If you set the value to nil, SwiftUI uses a platform-specific default amount. The default value of this parameter is nil.\n\nReturn Value\n\nA view that’s padded by the specified amount on the specified edges.\n\nDiscussion\n\nUse this modifier to add a specified amount of padding to one or more edges of the view. Indicate the edges to pad by naming either a single value from Edge/Set, or by specifying an OptionSet that contains edge values:\n\nVStack {\n    Text(\"Text padded by 20 points on the bottom and trailing edges.\")\n        .padding([.bottom, .trailing], 20)\n        .border(.gray)\n    Text(\"Unpadded text for comparison.\")\n        .border(.yellow)\n}\n\n\nThe order in which you apply modifiers matters. The example above applies the padding before applying the border to ensure that the border encompasses the padded region:\n\nYou can omit either or both of the parameters. If you omit the length, SwiftUI uses a default amount of padding. If you omit the edges, SwiftUI applies the padding to all edges. Omit both to add a default padding all the way around a view. SwiftUI chooses a default amount of padding that’s appropriate for the platform and the presentation context.\n\nVStack {\n    Text(\"Text with default padding.\")\n        .padding()\n        .border(.gray)\n    Text(\"Unpadded text for comparison.\")\n        .border(.yellow)\n}\n\n\nThe example above looks like this in iOS under typical conditions:\n\nTo control the amount of padding independently for each edge, use View/padding(_:)-6pgqq. To pad all outside edges of a view by a specified amount, use View/padding(_:)-68shk."
  },
  {
    "title": "alert(isPresented:error:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(ispresented:error:actions:message:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nerror\n\nAn optional localized Error that is used to generate the alert’s title. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nmessage\n\nA view builder returning the message for the alert given the current error.\n\nDiscussion\n\nIn the example below, a form conditionally presents an alert depending upon the value of an error. When the error value isn’t nil, the system presents an alert with an “OK” action.\n\nThe title of the alert is inferred from the error’s errorDescription.\n\nstruct TicketPurchase: View {\n    @State private var error: TicketPurchaseError? = nil\n    @State private var showAlert = false\n\n\n    var body: some View {\n        TicketForm(showAlert: $showAlert, error: $error)\n            .alert(isPresented: $showAlert, error: error) { _ in\n                Button(\"OK\") {\n                    // Handle acknowledgement.\n                }\n            } message: { error in\n                Text(error.recoverySuggestion ?? \"Try again later.\")\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "padding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/padding(_:)-30csa",
    "html": "Parameters\nlength\n\nThe amount, given in points, to pad this view on all edges.\n\nReturn Value\n\nA view that’s padded by the amount you specify.\n\nDiscussion\n\nUse this modifier to add padding all the way around a view.\n\nVStack {\n    Text(\"Text padded by 10 points on each edge.\")\n        .padding(10)\n        .border(.gray)\n    Text(\"Unpadded text for comparison.\")\n        .border(.yellow)\n}\n\n\nThe order in which you apply modifiers matters. The example above applies the padding before applying the border to ensure that the border encompasses the padded region:\n\nTo independently control the amount of padding for each edge, use View/padding(_:)-6pgqq. To pad a select set of edges by the same amount, use View/padding(_:_:)."
  },
  {
    "title": "alignmentGuide(_:computeValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alignmentguide(_:computevalue:)-2n08h",
    "html": "Parameters\ng\n\nA VerticalAlignment value at which to base the offset.\n\ncomputeValue\n\nA closure that returns the offset value to apply to this view.\n\nReturn Value\n\nA view modified with respect to its vertical alignment according to the computation performed in the method’s closure.\n\nDiscussion\n\nUse alignmentGuide(_:computeValue:) to calculate specific offsets to reposition views in relationship to one another. You can return a constant or can use the ViewDimensions argument to the closure to calculate a return value.\n\nIn the example below, the weather emoji are offset 20 points from the vertical center of the HStack.\n\nVStack {\n    Text(\"Today's Weather\")\n        .font(.title)\n        .border(.gray)\n\n\n    HStack {\n        Text(\"🌧\")\n            .alignmentGuide(VerticalAlignment.center) { _ in -20 }\n            .border(.gray)\n        Text(\"Rain & Thunderstorms\")\n            .border(.gray)\n        Text(\"⛈\")\n            .alignmentGuide(VerticalAlignment.center) { _ in 20 }\n            .border(.gray)\n    }\n}\n\n\nChanging the alignment of one view may have effects on surrounding views. Here the offset values inside a stack and its contained views is the difference of their absolute offsets."
  },
  {
    "title": "alert(item:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(item:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the alert. if item is non-nil, the system passes the contents to the modifier’s closure. You use this content to populate the fields of an alert that you create that the system displays to the user. If item changes, the system dismisses the currently displayed alert and replaces it with a new one using the same process.\n\ncontent\n\nA closure returning the alert to present.\n\nDiscussion\n\nUse this method when you need to show an alert that contains information from a binding to an optional data source that you provide. The example below shows a custom data source FileInfo whose properties configure the alert’s message field:\n\nstruct FileInfo: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\n\n\nstruct ConfirmImportAlert: View {\n    @State private var alertDetails: FileInfo?\n    var body: some View {\n        Button(\"Show Alert\") {\n            alertDetails = FileInfo(name: \"MyImageFile.png\",\n                                    fileType: .png)\n        }\n        .alert(item: $alertDetails) { details in\n            Alert(title: Text(\"Import Complete\"),\n                  message: Text(\"\"\"\n                    Imported \\(details.name) \\n File\n                    type: \\(details.fileType.description).\n                    \"\"\"),\n                  dismissButton: .default(Text(\"Dismiss\")))\n        }\n    }\n}\n"
  },
  {
    "title": "colorEffect(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/coloreffect(_:isenabled:)",
    "html": "Parameters\nshader\n\nThe shader to apply to self as a color filter.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a color filter.\n\nDiscussion\n\nFor a shader function to act as a color filter it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position, half4 color, args...)\n\n\nwhere position is the user-space coordinates of the pixel applied to the shader and color its source color, as a pre-multiplied color in the destination color space. args... should be compatible with the uniform arguments bound to shader. The function should return the modified color value.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error."
  },
  {
    "title": "colorMultiply(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/colormultiply(_:)",
    "html": "Parameters\ncolor\n\nThe color to bias this view toward.\n\nReturn Value\n\nA view with a color multiplication effect.\n\nDiscussion\n\nThe following example shows two versions of the same image side by side; at left is the original, and at right is a duplicate with the colorMultiply(_:) modifier applied with ShapeStyle/purple.\n\nstruct InnerCircleView: View {\n    var body: some View {\n        Circle()\n            .fill(Color.green)\n            .frame(width: 40, height: 40, alignment: .center)\n    }\n}\n\n\nstruct ColorMultiply: View {\n    var body: some View {\n        HStack {\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .overlay(InnerCircleView(), alignment: .center)\n                .overlay(Text(\"Normal\")\n                             .font(.callout),\n                         alignment: .bottom)\n                .border(Color.gray)\n\n\n            Spacer()\n\n\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .overlay(InnerCircleView(), alignment: .center)\n                .colorMultiply(Color.purple)\n                .overlay(Text(\"Multiply\")\n                            .font(.callout),\n                         alignment: .bottom)\n                .border(Color.gray)\n        }\n        .padding(50)\n    }\n}\n"
  },
  {
    "title": "colorInvert() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/colorinvert()",
    "html": "Return Value\n\nA view that inverts its colors.\n\nDiscussion\n\nThe colorInvert() modifier inverts all of the colors in a view so that each color displays as its complementary color. For example, blue converts to yellow, and white converts to black.\n\nIn the example below, two red squares each have an interior green circle. The inverted square shows the effect of the square’s colors: complimentary colors for red and green — teal and purple.\n\nstruct InnerCircleView: View {\n    var body: some View {\n        Circle()\n            .fill(Color.green)\n            .frame(width: 40, height: 40, alignment: .center)\n    }\n}\n\n\nstruct ColorInvert: View {\n    var body: some View {\n        HStack {\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .overlay(InnerCircleView(), alignment: .center)\n                .overlay(Text(\"Normal\")\n                             .font(.callout),\n                         alignment: .bottom)\n                .border(Color.gray)\n\n\n            Spacer()\n\n\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .overlay(InnerCircleView(), alignment: .center)\n                .colorInvert()\n                .overlay(Text(\"Inverted\")\n                             .font(.callout),\n                         alignment: .bottom)\n                .border(Color.gray)\n        }\n        .padding(50)\n    }\n}\n"
  },
  {
    "title": "popover(item:attachmentAnchor:arrowEdge:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/popover(item:attachmentanchor:arrowedge:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the popover. When item is non-nil, the system passes the contents to the modifier’s closure. You use this content to populate the fields of a popover that you create that the system displays to the user. If item changes, the system dismisses the currently presented popover and replaces it with a new popover using the same process.\n\nattachmentAnchor\n\nThe positioning anchor that defines the attachment point of the popover. The default is Anchor/Source/bounds.\n\narrowEdge\n\nThe edge of the attachmentAnchor that defines the location of the popover’s arrow in macOS. The default is Edge/top. iOS ignores this parameter.\n\ncontent\n\nA closure returning the content of the popover.\n\nDiscussion\n\nUse this method when you need to present a popover with content from a custom data source. The example below uses data in the PopoverModel structure to populate the view in the content closure that the popover displays to the user:\n\nstruct PopoverExample: View {\n    @State private var popover: PopoverModel?\n\n\n    var body: some View {\n        Button(\"Show Popover\") {\n            popover = PopoverModel(message: \"Custom Message\")\n        }\n        .popover(item: $popover) { detail in\n            Text(\"\\(detail.message)\")\n                .padding()\n        }\n    }\n}\n\n\nstruct PopoverModel: Identifiable {\n    var id: String { message }\n    let message: String\n}\n"
  },
  {
    "title": "popover(isPresented:attachmentAnchor:arrowEdge:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/popover(ispresented:attachmentanchor:arrowedge:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the popover content that you return from the modifier’s content closure.\n\nattachmentAnchor\n\nThe positioning anchor that defines the attachment point of the popover. The default is Anchor/Source/bounds.\n\narrowEdge\n\nThe edge of the attachmentAnchor that defines the location of the popover’s arrow in macOS. The default is Edge/top. iOS ignores this parameter.\n\ncontent\n\nA closure returning the content of the popover.\n\nDiscussion\n\nUse this method to show a popover whose contents are a SwiftUI view that you provide when a bound Boolean variable is true. In the example below, a popover displays whenever the user toggles the isShowingPopover state variable by pressing the “Show Popover” button:\n\nstruct PopoverExample: View {\n    @State private var isShowingPopover = false\n\n\n    var body: some View {\n        Button(\"Show Popover\") {\n            self.isShowingPopover = true\n        }\n        .popover(isPresented: $isShowingPopover) {\n            Text(\"Popover Content\")\n                .padding()\n        }\n    }\n}\n"
  },
  {
    "title": "position(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/position(x:y:)",
    "html": "Parameters\nx\n\nThe x-coordinate at which to place the center of this view.\n\ny\n\nThe y-coordinate at which to place the center of this view.\n\nReturn Value\n\nA view that fixes the center of this view at x and y.\n\nDiscussion\n\nUse the position(x:y:) modifier to place the center of a view at a specific coordinate in the parent view using an x and y offset.\n\nText(\"Position by passing the x and y coordinates\")\n    .position(x: 175, y: 100)\n    .border(Color.gray)\n"
  },
  {
    "title": "position(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/position(_:)",
    "html": "Parameters\nposition\n\nThe point at which to place the center of this view.\n\nReturn Value\n\nA view that fixes the center of this view at position.\n\nDiscussion\n\nUse the position(_:) modifier to place the center of a view at a specific coordinate in the parent view using a CGPoint to specify the x and y offset.\n\nText(\"Position by passing a CGPoint()\")\n    .position(CGPoint(x: 175, y: 100))\n    .border(Color.gray)\n"
  },
  {
    "title": "previewDevice(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/previewdevice(_:)",
    "html": "Parameters\nvalue\n\nA device to use for preview, or nil to let Xcode automatically choose a device based on the run destination.\n\nReturn Value\n\nA preview that uses the given device.\n\nDiscussion\n\nBy default, Xcode automatically chooses a preview device based on your currently selected run destination. If you want to choose a device that doesn’t change based on Xcode settings, provide a PreviewDevice instance that you initialize with the name or model of a specific device:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewDevice(PreviewDevice(rawValue: \"iPad Pro (11-inch)\"))\n    }\n}\n\n\nYou can get a list of supported preview device names, like “iPhone 11”, “iPad Pro (11-inch)”, and “Apple Watch Series 5 - 44mm”, by using the xcrun command in the Terminal app:\n\n% xcrun simctl list devicetypes\n\n\nAdditionally, you can use the following values for macOS platform development:\n\n“Mac”\n\n“Mac Catalyst”"
  },
  {
    "title": "autocorrectionDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/autocorrectiondisabled(_:)",
    "html": "Parameters\ndisable\n\nA Boolean value that indicates whether autocorrection is disabled for this view. The default value is true.\n\nDiscussion\n\nUse this method when the effect of autocorrection would make it more difficult for the user to input information. The entry of proper names and street addresses are examples where autocorrection can negatively affect the user’s ability complete a data entry task.\n\nThe example below configures a TextField with the default keyboard. Disabling autocorrection allows the user to enter arbitrary text without the autocorrection system offering suggestions or attempting to override their input.\n\nTextField(\"1234 Main St.\", text: $address)\n    .keyboardType(.default)\n    .autocorrectionDisabled(true)\n"
  },
  {
    "title": "background(_:in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/background(_:in:fillstyle:)-4u3h2",
    "html": "Parameters\nstyle\n\nA ShapeStyle that SwiftUI uses to the fill the shape that you specify.\n\nshape\n\nAn instance of a type that conforms to InsettableShape that SwiftUI draws behind the view.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified insettable shape drawn behind it.\n\nDiscussion\n\nUse this modifier to layer a type that conforms to the InsettableShape protocol — like a Rectangle, Circle, or Capsule — behind a view. Specify the ShapeStyle that’s used to fill the shape. For example, you can place a RoundedRectangle behind a Label:\n\nLabel(\"Flag\", systemImage: \"flag.fill\")\n    .padding()\n    .background(.teal, in: RoundedRectangle(cornerRadius: 8))\n\n\nThe ShapeStyle/teal color fills the shape:\n\nThis modifier and View/background(_:in:fillStyle:)-89n7j are convenience methods for placing a single shape behind a view. To create a background with other View types — or with a stack of views — use View/background(alignment:content:) instead. To add a ShapeStyle as a background, use View/background(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "background(in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/background(in:fillstyle:)-75he2",
    "html": "Parameters\nshape\n\nAn instance of a type that conforms to InsettableShape that SwiftUI draws behind the view using the ShapeStyle/background shape style.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified insettable shape drawn behind it.\n\nDiscussion\n\nThis modifier behaves like View/background(_:in:fillStyle:)-20tq5, except that it always uses the ShapeStyle/background shape style to fill the specified insettable shape. For example, you can use a RoundedRectangle as a background on a Label:\n\nZStack {\n    Color.teal\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background(in: RoundedRectangle(cornerRadius: 8))\n}\n\n\nWithout the background modifier, the fill color shows through the label. With the modifier, the label’s text and icon appear backed by a shape filled with a color that’s appropriate for light or dark appearance:\n\nTo create a background with other View types — or with a stack of views — use View/background(alignment:content:) instead. To add a ShapeStyle as a background, use View/background(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "background(ignoresSafeAreaEdges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/background(ignoressafeareaedges:)",
    "html": "Parameters\nedges\n\nThe set of edges for which to ignore safe area insets when adding the background. The default value is Edge/Set/all. Specify an empty set to respect safe area insets on all edges.\n\nReturn Value\n\nA view with the ShapeStyle/background shape style drawn behind it.\n\nDiscussion\n\nThis modifier behaves like View/background(_:ignoresSafeAreaEdges:), except that it always uses the ShapeStyle/background shape style. For example, you can add a background to a Label:\n\nZStack {\n    Color.teal\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background()\n}\n\n\nWithout the background modifier, the teal color behind the label shows through the label. With the modifier, the label’s text and icon appear backed by a region filled with a color that’s appropriate for light or dark appearance:\n\nIf you want to specify a View or a stack of views as the background, use View/background(alignment:content:) instead. To specify a Shape or InsettableShape, use View/background(_:in:fillStyle:)-89n7j or View/background(_:in:fillStyle:)-20tq5, respectively. To configure the background of a presentation, like a sheet, use View/presentationBackground(_:)."
  },
  {
    "title": "accessibilityZoomAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityzoomaction(_:)",
    "html": "Discussion\n\nFor example, this is how a zoom action is used to transform the scale of a shape which has a MagnificationGesture.\n\nvar body: some View {\n    Circle()\n        .scaleEffect(magnifyBy)\n        .gesture(magnification)\n        .accessibilityLabel(\"Circle Magnifier\")\n        .accessibilityZoomAction { action in\n            switch action.direction {\n            case .zoomIn:\n                magnifyBy += 0.5\n            case .zoomOut:\n                 magnifyBy -= 0.5\n            }\n        }\n}\n"
  },
  {
    "title": "alert(_:isPresented:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:presenting:actions:message:)-4trld",
    "html": "Parameters\ntitle\n\nA text string used as the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nmessage\n\nA ViewBuilder returning the message for the alert given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n    let alertTitle: String = \"Save failed.\"\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            alertTitle,\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        } message: { details in\n            Text(details.error)\n        }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:presenting:actions:message:)-8huc8",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nmessage\n\nA ViewBuilder returning the message for the alert given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            \"Save failed.\",\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        } message: { details in\n            Text(details.error)\n        }\n    }\n}\n\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(isPresented:error:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(ispresented:error:actions:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nerror\n\nAn optional localized Error that is used to generate the alert’s title. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nDiscussion\n\nIn the example below, a form conditionally presents an alert depending upon the value of an error. When the error value isn’t nil, the system presents an alert with an “OK” action.\n\nThe title of the alert is inferred from the error’s errorDescription.\n\nstruct TicketPurchase: View {\n    @State private var error: TicketPurchaseError? = nil\n    @State private var showAlert = false\n\n\n    var body: some View {\n        TicketForm(showAlert: $showAlert, error: $error)\n            .alert(isPresented: $showAlert, error: error) {\n                Button(\"OK\") {\n                    // Handle acknowledgement.\n                }\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "alignmentGuide(_:computeValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alignmentguide(_:computevalue:)-8t3go",
    "html": "Parameters\ng\n\nA HorizontalAlignment value at which to base the offset.\n\ncomputeValue\n\nA closure that returns the offset value to apply to this view.\n\nReturn Value\n\nA view modified with respect to its horizontal alignment according to the computation performed in the method’s closure.\n\nDiscussion\n\nUse alignmentGuide(_:computeValue:) to calculate specific offsets to reposition views in relationship to one another. You can return a constant or can use the ViewDimensions argument to the closure to calculate a return value.\n\nIn the example below, the HStack is offset by a constant of 50 points to the right of center:\n\nVStack {\n    Text(\"Today's Weather\")\n        .font(.title)\n        .border(.gray)\n    HStack {\n        Text(\"🌧\")\n        Text(\"Rain & Thunderstorms\")\n        Text(\"⛈\")\n    }\n    .alignmentGuide(HorizontalAlignment.center) { _ in  50 }\n    .border(.gray)\n}\n.border(.gray)\n\n\nChanging the alignment of one view may have effects on surrounding views. Here the offset values inside a stack and its contained views is the difference of their absolute offsets."
  },
  {
    "title": "presentationCompactAdaptation(horizontal:vertical:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationcompactadaptation(horizontal:vertical:)",
    "html": "Parameters\nhorizontalAdaptation\n\nThe adaptation to use in a horizontally compact size class.\n\nverticalAdaptation\n\nThe adaptation to use in a vertically compact size class. In a size class that is both horizontally and vertically compact, SwiftUI uses the verticalAdaptation value.\n\nDiscussion\n\nSome presentations adapt their appearance depending on the context. For example, a popover presentation over a horizontally-compact view uses a sheet appearance by default. Use this modifier to indicate a custom adaptation preference.\n\nstruct ContentView: View {\n    @State private var showInfo = false\n\n\n    var body: some View {\n        Button(\"View Info\") {\n            showInfo = true\n        }\n        .popover(isPresented: $showInfo) {\n            InfoView()\n                .presentationCompactAdaptation(\n                    horizontal: .popover,\n                    vertical: .sheet)\n        }\n    }\n}\n\n\nIf you want to specify the same adaptation for both dimensions, use the View/presentationCompactAdaptation(_:) method instead."
  },
  {
    "title": "accessibilityRotor(_:entries:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:entrylabel:)-kjdz",
    "html": "Parameters\nrotorLabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of identifiable values that will be used to generate the entries of the Rotor. The identifiers of the Identifiable values must match up with identifiers in a ForEach or explicit id calls within the ScrollView. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nentry\n\nKey path on the Identifiable type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s that have a\n// `subject`.\n// `vipMesages` is a filtered version of that list containing only\n// messages from VIPs.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages, label: \\.subject)\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:entrylabel:)-ql9s",
    "html": "Parameters\nrotorLabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of identifiable values that will be used to generate the entries of the Rotor. The identifiers of the Identifiable values must match up with identifiers in a ForEach or explicit id calls within the ScrollView. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nentryLabel\n\nKey path on the Identifiable type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s that have a\n// `subject`.\n// `vipMessages` is a filtered version of that list containing only\n// messages from VIPs.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages, label: \\.subject)\n"
  },
  {
    "title": "accessibilityRotor(_:textRanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:textranges:)-4xhgi",
    "html": "Parameters\nlabel\n\nLocalized label identifying this Rotor to the user.\n\ntextRanges\n\nAn array of ranges that will be used to generate the entries of the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing email addresses.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated\n    // when `content` is set and then cached so that we don't have\n    // to re-compute them.\n    var emailAddressRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(\"Email Addresses\",\n            textRanges: message.emailAddressRanges)\n}\n"
  },
  {
    "title": "presentationContentInteraction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationcontentinteraction(_:)",
    "html": "Parameters\nbehavior\n\nThe requested behavior.\n\nDiscussion\n\nBy default, when a person swipes up on a scroll view in a resizable presentation, the presentation grows to the next detent. A scroll view embedded in the presentation only scrolls after the presentation reaches its largest size. Use this modifier to control which action takes precedence.\n\nFor example, you can request that swipe gestures scroll content first, resizing the sheet only after hitting the end of the scroll view, by passing the PresentationContentInteraction/scrolls value to this modifier:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n                .presentationContentInteraction(.scrolls)\n        }\n    }\n}\n\n\nPeople can always resize your presentation using the drag indicator."
  },
  {
    "title": "allowedDynamicRange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alloweddynamicrange(_:)",
    "html": "Parameters\nrange\n\nthe requested dynamic range, or nil to restore the default allowed range.\n\nReturn Value\n\na new view.\n\nDiscussion\n\nThe following example enables HDR rendering within a view hierarchy:\n\nMyView().allowedDynamicRange(.high)\n"
  },
  {
    "title": "popover(isPresented:attachmentAnchor:arrowEdge:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/popover(ispresented:attachmentanchor:arrowedge:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the popover content that you return from the modifier’s content closure.\n\nattachmentAnchor\n\nThe positioning anchor that defines the attachment point of the popover. The default is Anchor/Source/bounds.\n\narrowEdge\n\nThe edge of the attachmentAnchor that defines the location of the popover’s arrow in macOS. The default is Edge/top. iOS ignores this parameter.\n\ncontent\n\nA closure returning the content of the popover.\n\nDiscussion\n\nUse this method to show a popover whose contents are a SwiftUI view that you provide when a bound Boolean variable is true. In the example below, a popover displays whenever the user toggles the isShowingPopover state variable by pressing the “Show Popover” button:\n\nstruct PopoverExample: View {\n    @State private var isShowingPopover = false\n\n\n    var body: some View {\n        Button(\"Show Popover\") {\n            self.isShowingPopover = true\n        }\n        .popover(isPresented: $isShowingPopover) {\n            Text(\"Popover Content\")\n                .padding()\n        }\n    }\n}\n"
  },
  {
    "title": "phaseAnimator(_:trigger:content:animation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/phaseanimator(_:trigger:content:animation:)",
    "html": "Parameters\nphases\n\nThe sequence of phases to cycle through. Ensure that the sequence isn’t empty. If it is, SwiftUI logs a runtime warning and also returns a visual warning as the output view.\n\ntrigger\n\nA value whose changes cause the animator to use the next phase.\n\ncontent\n\nA view builder closure that takes two parameters: a proxy value representing the modified view and the current phase. You can apply effects to the proxy based on the current phase.\n\nanimation\n\nA closure that takes the current phase as input. Return the animation to use when transitioning to the next phase. If you return nil, the transition doesn’t animate. If you don’t set this parameter, SwiftUI uses a default animation.\n\nDiscussion\n\nWhen the modified view first appears, this modifier renders its content closure using the first phase as input to the closure, along with a proxy for the modified view. Apply effects to the proxy — and thus to the modified view — in a way that’s appropriate for the first phase value.\n\nLater, when the value of the trigger input changes, the modifier provides its content closure with the value of the second phase. Update the effects that you apply to the proxy view accordingly, and the modifier animates the change for you. The next time the trigger input changes, this procedure repeats using successive phases until reaching the last phase, at which point the modifier loops back to the first phase."
  },
  {
    "title": "phaseAnimator(_:trigger:content:animation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/phaseanimator(_:trigger:content:animation:)",
    "html": "Parameters\nphases\n\nThe sequence of phases to cycle through. Ensure that the sequence isn’t empty. If it is, SwiftUI logs a runtime warning and also returns a visual warning as the output view.\n\ntrigger\n\nA value whose changes cause the animator to use the next phase.\n\ncontent\n\nA view builder closure that takes two parameters: a proxy value representing the modified view and the current phase. You can apply effects to the proxy based on the current phase.\n\nanimation\n\nA closure that takes the current phase as input. Return the animation to use when transitioning to the next phase. If you return nil, the transition doesn’t animate. If you don’t set this parameter, SwiftUI uses a default animation.\n\nDiscussion\n\nWhen the modified view first appears, this modifier renders its content closure using the first phase as input to the closure, along with a proxy for the modified view. Apply effects to the proxy — and thus to the modified view — in a way that’s appropriate for the first phase value.\n\nLater, when the value of the trigger input changes, the modifier provides its content closure with the value of the second phase. Update the effects that you apply to the proxy view accordingly, and the modifier animates the change for you. The next time the trigger input changes, this procedure repeats using successive phases until reaching the last phase, at which point the modifier loops back to the first phase."
  },
  {
    "title": "preferredColorScheme(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/preferredcolorscheme(_:)",
    "html": "Parameters\ncolorScheme\n\nThe preferred color scheme for this view.\n\nReturn Value\n\nA view that sets the color scheme.\n\nDiscussion\n\nUse one of the values in ColorScheme with this modifier to set a preferred color scheme for the nearest enclosing presentation, like a popover, a sheet, or a window. The value that you set overrides the user’s Dark Mode selection for that presentation. In the example below, the Toggle controls an isDarkMode state variable, which in turn controls the color scheme of the sheet that contains the toggle:\n\n@State private var isPresented = false\n@State private var isDarkMode = true\n\n\nvar body: some View {\n    Button(\"Show Sheet\") {\n        isPresented = true\n    }\n    .sheet(isPresented: $isPresented) {\n        List {\n            Toggle(\"Dark Mode\", isOn: $isDarkMode)\n        }\n        .preferredColorScheme(isDarkMode ? .dark : .light)\n    }\n}\n\n\nIf you apply the modifier to any of the views in the sheet — which in this case are a List and a Toggle — the value that you set propagates up through the view hierarchy to the enclosing presentation, or until another color scheme modifier higher in the hierarchy overrides it. The value you set also flows down to all child views of the enclosing presentation.\n\nA common use for this modifier is to create side-by-side previews of the same view with light and dark appearances:\n\nstruct MyView_Previews: PreviewProvider {\n    static var previews: some View {\n        MyView().preferredColorScheme(.light)\n        MyView().preferredColorScheme(.dark)\n    }\n}\n\n\nIf you need to detect the color scheme that currently applies to a view, read the EnvironmentValues/colorScheme environment value:\n\n@Environment(\\.colorScheme) private var colorScheme\n\n\nvar body: some View {\n    Text(colorScheme == .dark ? \"Dark\" : \"Light\")\n}\n"
  },
  {
    "title": "aspectRatio(_:contentMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/aspectratio(_:contentmode:)-67dtt",
    "html": "Parameters\naspectRatio\n\nA size that specifies the ratio of width to height to use for the resulting view.\n\ncontentMode\n\nA flag indicating whether this view should fit or fill the parent context.\n\nReturn Value\n\nA view that constrains this view’s dimensions to aspectRatio, using contentMode as its scaling algorithm.\n\nDiscussion\n\nUse aspectRatio(_:contentMode:) to constrain a view’s dimensions to an aspect ratio specified by a CGSize.\n\nIf this view is resizable, the resulting view uses aspectRatio as its own aspect ratio. In this example, the purple ellipse has a 3:4 width-to-height ratio, and scales to fill its frame:\n\nEllipse()\n    .fill(Color.purple)\n    .aspectRatio(CGSize(width: 3, height: 4), contentMode: .fill)\n    .frame(width: 200, height: 200)\n    .border(Color(white: 0.75))\n"
  },
  {
    "title": "presentationDetents(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationdetents(_:)",
    "html": "Parameters\ndetents\n\nA set of supported detents for the sheet. If you provide more that one detent, people can drag the sheet to resize it.\n\nDiscussion\n\nBy default, sheets support the PresentationDetent/large detent.\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n        }\n    }\n}\n"
  },
  {
    "title": "animation(_:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/animation(_:value:)",
    "html": "Parameters\nanimation\n\nThe animation to apply. If animation is nil, the view doesn’t animate.\n\nvalue\n\nA value to monitor for changes.\n\nReturn Value\n\nA view that applies animation to this view whenever value changes."
  },
  {
    "title": "previewInterfaceOrientation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/previewinterfaceorientation(_:)",
    "html": "Parameters\nvalue\n\nAn orientation to use for preview.\n\nReturn Value\n\nA preview that uses the given orientation.\n\nDiscussion\n\nBy default, device previews appear right side up, using orientation InterfaceOrientation/portrait. You can change the orientation of a preview using one of the values in the InterfaceOrientation structure:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewInterfaceOrientation(.landscapeRight)\n    }\n}\n"
  },
  {
    "title": "overlay(_:in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/overlay(_:in:fillstyle:)",
    "html": "Parameters\nstyle\n\nA ShapeStyle that SwiftUI uses to the fill the shape that you specify.\n\nshape\n\nAn instance of a type that conforms to Shape that SwiftUI draws in front of the view.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified shape drawn in front of it.\n\nDiscussion\n\nUse this modifier to layer a type that conforms to the Shape protocol — like a Rectangle, Circle, or Capsule — in front of a view. Specify a ShapeStyle that’s used to fill the shape. For example, you can overlay the outline of one rectangle in front of another:\n\nRectangle()\n    .frame(width: 200, height: 100)\n    .overlay(.teal, in: Rectangle().inset(by: 10).stroke(lineWidth: 5))\n\n\nThe example above uses the InsettableShape/inset(by:) method to slightly reduce the size of the overlaid rectangle, and the Shape/stroke(lineWidth:) method to fill only the shape’s outline. This creates an inset border:\n\nThis modifier is a convenience method for layering a shape over a view. To handle the more general case of overlaying a View — or a stack of views — with control over the position, use View/overlay(alignment:content:) instead. To cover a view with a ShapeStyle, use View/overlay(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "background(_:ignoresSafeAreaEdges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/background(_:ignoressafeareaedges:)",
    "html": "Parameters\nstyle\n\nAn instance of a type that conforms to ShapeStyle that SwiftUI draws behind the modified view.\n\nedges\n\nThe set of edges for which to ignore safe area insets when adding the background. The default value is Edge/Set/all. Specify an empty set to respect safe area insets on all edges.\n\nReturn Value\n\nA view with the specified style drawn behind it.\n\nDiscussion\n\nUse this modifier to place a type that conforms to the ShapeStyle protocol — like a Color, Material, or HierarchicalShapeStyle — behind a view. For example, you can add the ShapeStyle/regularMaterial behind a Label:\n\nstruct FlagLabel: View {\n    var body: some View {\n        Label(\"Flag\", systemImage: \"flag.fill\")\n            .padding()\n            .background(.regularMaterial)\n    }\n}\n\n\nSwiftUI anchors the style to the view’s bounds. For the example above, the background fills the entirety of the label’s frame, which includes the padding:\n\nSwiftUI limits the background style’s extent to the modified view’s container-relative shape. You can see this effect if you constrain the FlagLabel view with a View/containerShape(_:) modifier:\n\nFlagLabel()\n    .containerShape(RoundedRectangle(cornerRadius: 16))\n\n\nThe background takes on the specified container shape:\n\nBy default, the background ignores safe area insets on all edges, but you can provide a specific set of edges to ignore, or an empty set to respect safe area insets on all edges:\n\nRectangle()\n    .background(\n        .regularMaterial,\n        ignoresSafeAreaEdges: []) // Ignore no safe area insets.\n\n\nIf you want to specify a View or a stack of views as the background, use View/background(alignment:content:) instead. To specify a Shape or InsettableShape, use View/background(_:in:fillStyle:)-89n7j or View/background(_:in:fillStyle:)-20tq5, respectively. To configure the background of a presentation, like a sheet, use View/presentationBackground(_:)."
  },
  {
    "title": "overlay(alignment:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/overlay(alignment:content:)",
    "html": "Parameters\nalignment\n\nThe alignment that the modifier uses to position the implicit ZStack that groups the foreground views. The default is Alignment/center.\n\ncontent\n\nA ViewBuilder that you use to declare the views to draw in front of this view, stacked in the order that you list them. The last view that you list appears at the front of the stack.\n\nReturn Value\n\nA view that uses the specified content as a foreground.\n\nDiscussion\n\nUse this modifier to place one or more views in front of another view. For example, you can place a group of stars on a RoundedRectangle:\n\nRoundedRectangle(cornerRadius: 8)\n    .frame(width: 200, height: 100)\n    .overlay(alignment: .topLeading) { Star(color: .red) }\n    .overlay(alignment: .topTrailing) { Star(color: .yellow) }\n    .overlay(alignment: .bottomLeading) { Star(color: .green) }\n    .overlay(alignment: .bottomTrailing) { Star(color: .blue) }\n\n\nThe example above assumes that you’ve defined a Star view with a parameterized color:\n\nstruct Star: View {\n    var color = Color.yellow\n\n\n    var body: some View {\n        Image(systemName: \"star.fill\")\n            .foregroundStyle(color)\n    }\n}\n\n\nBy setting different alignment values for each modifier, you make the stars appear in different places on the rectangle:\n\nIf you specify more than one view in the content closure, the modifier collects all of the views in the closure into an implicit ZStack, taking them in order from back to front. For example, you can place a star and a Circle on a field of ShapeStyle/blue:\n\nColor.blue\n    .frame(width: 200, height: 200)\n    .overlay {\n        Circle()\n            .frame(width: 100, height: 100)\n        Star()\n    }\n\n\nBoth the overlay modifier and the implicit ZStack composed from the overlay content — the circle and the star — use a default Alignment/center alignment. The star appears centered on the circle, and both appear as a composite view centered in front of the square:\n\nIf you specify an alignment for the overlay, it applies to the implicit stack rather than to the individual views in the closure. You can see this if you add the Alignment/bottom alignment:\n\nColor.blue\n    .frame(width: 200, height: 200)\n    .overlay(alignment: .bottom) {\n        Circle()\n            .frame(width: 100, height: 100)\n        Star()\n    }\n\n\nThe circle and the star move down as a unit to align the stack’s bottom edge with the bottom edge of the square, while the star remains centered on the circle:\n\nTo control the placement of individual items inside the content closure, either use a different overlay modifier for each item, as the earlier example of stars in the corners of a rectangle demonstrates, or add an explicit ZStack inside the content closure with its own alignment:\n\nColor.blue\n    .frame(width: 200, height: 200)\n    .overlay(alignment: .bottom) {\n        ZStack(alignment: .bottom) {\n            Circle()\n                .frame(width: 100, height: 100)\n            Star()\n        }\n    }\n\n\nThe stack alignment ensures that the star’s bottom edge aligns with the circle’s, while the overlay aligns the composite view with the square:\n\nYou can achieve layering without an overlay modifier by putting both the modified view and the overlay content into a ZStack. This can produce a simpler view hierarchy, but changes the layout priority that SwiftUI applies to the views. Use the overlay modifier when you want the modified view to dominate the layout.\n\nIf you want to specify a ShapeStyle like a Color or a Material as the overlay, use View/overlay(_:ignoresSafeAreaEdges:) instead. To specify a Shape, use View/overlay(_:in:fillStyle:)."
  },
  {
    "title": "aspectRatio(_:contentMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/aspectratio(_:contentmode:)-2u06r",
    "html": "Parameters\naspectRatio\n\nThe ratio of width to height to use for the resulting view. Use nil to maintain the current aspect ratio in the resulting view.\n\ncontentMode\n\nA flag that indicates whether this view fits or fills the parent context.\n\nReturn Value\n\nA view that constrains this view’s dimensions to the aspect ratio of the given size using contentMode as its scaling algorithm.\n\nDiscussion\n\nUse aspectRatio(_:contentMode:) to constrain a view’s dimensions to an aspect ratio specified by a CGFloat using the specified content mode.\n\nIf this view is resizable, the resulting view will have aspectRatio as its aspect ratio. In this example, the purple ellipse has a 3:4 width-to-height ratio, and scales to fit its frame:\n\nEllipse()\n    .fill(Color.purple)\n    .aspectRatio(0.75, contentMode: .fit)\n    .frame(width: 200, height: 200)\n    .border(Color(white: 0.75))\n"
  },
  {
    "title": "presentationCompactAdaptation(horizontal:vertical:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationcompactadaptation(horizontal:vertical:)",
    "html": "Parameters\nhorizontalAdaptation\n\nThe adaptation to use in a horizontally compact size class.\n\nverticalAdaptation\n\nThe adaptation to use in a vertically compact size class. In a size class that is both horizontally and vertically compact, SwiftUI uses the verticalAdaptation value.\n\nDiscussion\n\nSome presentations adapt their appearance depending on the context. For example, a popover presentation over a horizontally-compact view uses a sheet appearance by default. Use this modifier to indicate a custom adaptation preference.\n\nstruct ContentView: View {\n    @State private var showInfo = false\n\n\n    var body: some View {\n        Button(\"View Info\") {\n            showInfo = true\n        }\n        .popover(isPresented: $showInfo) {\n            InfoView()\n                .presentationCompactAdaptation(\n                    horizontal: .popover,\n                    vertical: .sheet)\n        }\n    }\n}\n\n\nIf you want to specify the same adaptation for both dimensions, use the View/presentationCompactAdaptation(_:) method instead."
  },
  {
    "title": "background(_:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/background(_:alignment:)",
    "html": "Parameters\nbackground\n\nThe view to draw behind this view.\n\nalignment\n\nThe alignment with a default value of Alignment/center that you use to position the background view.\n\nDiscussion\n\nUse background(_:alignment:) when you need to place one view behind another, with the background view optionally aligned with a specified edge of the frontmost view.\n\nThe example below creates two views: the Frontmost view, and the DiamondBackground view. The Frontmost view uses the DiamondBackground view for the background of the image element inside the Frontmost view’s VStack.\n\nstruct DiamondBackground: View {\n    var body: some View {\n        VStack {\n            Rectangle()\n                .fill(.gray)\n                .frame(width: 250, height: 250, alignment: .center)\n                .rotationEffect(.degrees(45.0))\n        }\n    }\n}\n\n\nstruct Frontmost: View {\n    var body: some View {\n        VStack {\n            Image(systemName: \"folder\")\n                .font(.system(size: 128, weight: .ultraLight))\n                .background(DiamondBackground())\n        }\n    }\n}\n"
  },
  {
    "title": "autocapitalization(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/autocapitalization(_:)",
    "html": "Parameters\nstyle\n\nOne of the autocapitalization modes defined in the UITextAutocapitalizationType enumeration.\n\nDiscussion\n\nUse autocapitalization(_:) when you need to automatically capitalize words, sentences, or other text like proper nouns.\n\nIn example below, as the user enters text each word is automatically capitalized:\n\nTextField(\"Last, First\", text: $fullName)\n    .autocapitalization(UITextAutocapitalizationType.words)\n\n\nThe UITextAutocapitalizationType enumeration defines the available capitalization modes. The default is UITextAutocapitalizationType.sentences."
  },
  {
    "title": "previewContext(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/previewcontext(_:)",
    "html": "Parameters\nvalue\n\nThe context for the preview; the default is nil."
  },
  {
    "title": "onDrop(of:delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondrop(of:delegate:)-fehu",
    "html": "Parameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\ndelegate\n\nA type that conforms to the DropDelegate protocol. You have comprehensive control over drop behavior when you use a delegate.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types."
  },
  {
    "title": "accessibilityRotor(_:textRanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:textranges:)-7rste",
    "html": "Parameters\nsystemRotor\n\nThe system-provided Rotor that will be overridden by this custom Rotor.\n\ntextRanges\n\nAn array of ranges that will be used to generate the entries of the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing headings.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated when\n    // `content` is set and then cached so that we don't have to\n    // re-compute them.\n    var headingRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(\n            .heading,\n            textRanges: message.headingRanges\n        )\n}\n"
  },
  {
    "title": "accessibilityRotor(_:textRanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:textranges:)-9b6sr",
    "html": "Parameters\nlabel\n\nLocalized label identifying this Rotor to the user.\n\ntextRanges\n\nAn array of ranges that will be used to generate the entries of the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing email addresses.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated\n    // when `content` is set and then cached so that we don't have\n    // to re-compute them.\n    var emailAddressRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(\"Email Addresses\",\n            textRanges: message.emailAddressRanges)\n}\n"
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityvalue(_:)-5c688",
    "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that’s different than the view’s label. For example, for a slider that you label as “Volume” using accessibilityLabel(), you can provide the current volume setting, like “60%”, using accessibilityValue()."
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityvalue(_:)-9jdm6",
    "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that’s different than the view’s label. For example, for a slider that you label as “Volume” using accessibilityLabel(), you can provide the current volume setting, like “60%”, using accessibilityValue()."
  },
  {
    "title": "actionSheet(item:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/actionsheet(item:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the action sheet. When item is non-nil, the system passes the contents to the modifier’s closure. You use this content to populate the fields of an action sheet that you create that the system displays to the user. If item changes, the system dismisses the currently displayed action sheet and replaces it with a new one using the same process.\n\ncontent\n\nA closure returning the ActionSheet you create.\n\nDiscussion\n\nUse this method when you need to populate the fields of an action sheet with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the action sheet:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\n\n\nstruct ConfirmFileImport: View {\n    @State private var sheetDetail: FileDetails?\n\n\n    var body: some View {\n        Button(\"Show Action Sheet\") {\n            sheetDetail = FileDetails(name: \"MyImageFile.png\",\n                                      fileType: .png)\n        }\n        .actionSheet(item: $sheetDetail) { detail in\n            ActionSheet(\n                title: Text(\"File Import\"),\n                message: Text(\"\"\"\n                         Import \\(detail.name)?\n                         File Type: \\(detail.fileType.description)\n                         \"\"\"),\n                buttons: [\n                    .destructive(Text(\"Import\"),\n                                 action: importFile),\n                    .cancel()\n                ])\n        }\n    }\n\n\n    func importFile() {\n        // Handle import action.\n    }\n}\n"
  },
  {
    "title": "alert(_:isPresented:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:actions:message:)-16d9n",
    "html": "Parameters\ntitle\n\nThe title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nmessage\n\nA ViewBuilder returning the message for the alert.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n    let alertTitle: String = \"Login failed.\"\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                Text(alertTitle),\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            } message: {\n               Text(\"Please check your credentials and try again.\")\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(_:isPresented:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:actions:)-20lth",
    "html": "Parameters\ntitle\n\nA text string used as the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n    let alertTitle: String = \"Login failed.\"\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                alertTitle,\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:presenting:actions:)-4rvfo",
    "html": "Parameters\ntitle\n\nA text string used as the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n    let alertTitle: String = \"Save failed.\"\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            alertTitle,\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "alert(_:isPresented:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:actions:message:)-30x1y",
    "html": "Parameters\ntitle\n\nA text string used as the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nmessage\n\nA ViewBuilder returning the message for the alert.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n    let alertTitle: String = \"Login failed.\"\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                alertTitle,\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            } message: {\n                Text(\"Please check your credentials and try again.\")\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(_:isPresented:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:actions:message:)-808xq",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nmessage\n\nA ViewBuilder returning the message for the alert.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                \"Login failed.\",\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            } message: {\n                Text(\"Please check your credentials and try again.\")\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "alert(_:isPresented:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:actions:)-9c045",
    "html": "Parameters\ntitle\n\nThe title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n    let alertTitle: String = \"Login failed.\"\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                Text(alertTitle),\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:presenting:actions:)-5etqn",
    "html": "Parameters\ntitle\n\nthe title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n    let alertTitle: String = \"Save failed.\"\n\n\n        var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            Text(alertTitle),\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "onSubmit(of:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onsubmit(of:_:)",
    "html": "Parameters\ntriggers\n\nThe triggers that should invoke the provided action.\n\naction\n\nThe action to perform on submission of a value.\n\nDiscussion\n\nDifferent views may have different triggers for the provided action. A TextField, or SecureField will trigger this action when the user hits the hardware or software return key. This modifier may also bind this action to a default action keyboard shortcut. You may set this action on an individual view or an entire view hierarchy.\n\nTextField(\"Username\", text: $username)\n    .onSubmit {\n        guard viewModel.validate() else { return }\n        viewModel.login()\n    }\n\n\nYou can use the View/submitScope(_:) modifier to stop a submit trigger from a control from propagating higher up in the view hierarchy to higher View.onSubmit(of:_:) modifiers.\n\nForm {\n    TextField(\"Username\", text: $viewModel.userName)\n    SecureField(\"Password\", text: $viewModel.password)\n\n\n    TextField(\"Tags\", text: $viewModel.tags)\n        .submitScope()\n}\n.onSubmit {\n    guard viewModel.validate() else { return }\n    viewModel.login()\n}\n\n\nYou can use different submit triggers to filter the types of triggers that should invoke the provided submission action. For example, you may provide a value of SubmitTriggers/search to only hear submission triggers that originate from search fields vended by searchable modifiers.\n\n@StateObject private var viewModel = ViewModel()\n\n\nNavigationView {\n    SidebarView()\n    DetailView()\n}\n.searchable(\n    text: $viewModel.searchText,\n    placement: .sidebar\n) {\n    SuggestionsView()\n}\n.onSubmit(of: .search) {\n    viewModel.submitCurrentSearchQuery()\n}\n"
  },
  {
    "title": "onTapGesture(count:coordinateSpace:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ontapgesture(count:coordinatespace:perform:)",
    "html": "Parameters\ncount\n\nThe number of taps or clicks required to trigger the action closure provided in action. Defaults to 1.\n\ncoordinateSpace\n\nThe coordinate space in which to receive location values. Defaults to CoordinateSpace/local.\n\naction\n\nThe action to perform. This closure receives an input that indicates where the interaction occurred.\n\nDiscussion\n\nUse this method to perform the specified action when the user clicks or taps on the modified view count times. The action closure receives the location of the interaction.\n\nNote\n\nIf you create a control that’s functionally equivalent to a Button, use ButtonStyle to create a customized button instead.\n\nThe following code adds a tap gesture to a Circle that toggles the color of the circle based on the tap location.\n\nstruct TapGestureExample: View {\n    @State private var location: CGPoint = .zero\n\n\n    var body: some View {\n        Circle()\n            .fill(self.location.y > 50 ? Color.blue : Color.red)\n            .frame(width: 100, height: 100, alignment: .center)\n            .onTapGesture { location in\n                self.location = location\n            }\n    }\n}\n"
  },
  {
    "title": "presentationDetents(_:selection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationdetents(_:selection:)",
    "html": "Parameters\ndetents\n\nA set of supported detents for the sheet. If you provide more that one detent, people can drag the sheet to resize it.\n\nselection\n\nA Binding to the currently selected detent. Ensure that the value matches one of the detents that you provide for the detents parameter.\n\nDiscussion\n\nBy default, sheets support the PresentationDetent/large detent.\n\nstruct ContentView: View {\n    @State private var showSettings = false\n    @State private var settingsDetent = PresentationDetent.medium\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents(\n                    [.medium, .large],\n                    selection: $settingsDetent\n                 )\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryID:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:entryid:entrylabel:)-466yn",
    "html": "Parameters\nrotorLabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of values that will be used to generate the entries of the Rotor.\n\nentryID\n\nKey path on the entry type that can be used to generate an identifier for the Entry. The identifiers must match up with identifiers in ForEach or explicit id calls within the ScrollView.\n\nentryLabel\n\nKey path on the entry type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs. // messages is a list of Messages that have a subject and a // uuid. vipMessages is a filtered version of that list // containing only messages from VIPs. ScrollView { LazyVStack { ForEach(messages) { message in MessageView(message) } } } .accessibilityElement(children: .contain) .accessibilityRotor(“VIPs”, entries: vipMessages, id: .uuid, label: .subject)"
  },
  {
    "title": "accessibilityRepresentation(representation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrepresentation(representation:)",
    "html": "Parameters\nrepresentation\n\nA hidden view that the accessibility system uses to generate accessibility elements.\n\nDiscussion\n\nYou can make controls accessible by using a custom style. For example, a custom ToggleStyle that you create inherits the accessibility features of Toggle automatically. When you can’t use the parent view’s accessibility elements, use the accessibilityRepresentation(representation:) modifier instead. This modifier replaces default accessibility elements with different accessibility elements that you provide. You use synthetic, non-visual accessibility elements to represent what the view displays.\n\nThe example below makes a custom adjustable control accessible by explicitly defining the representation of its step increments using a Slider:\n\nvar body: some View {\n    VStack {\n        SliderTrack(...) // Custom slider implementation.\n    }\n    .accessibilityRepresentation {\n        Slider(value: $value, in: 0...100) {\n            Text(\"Label\")\n        }\n    }\n}\n\n\nSwiftUI hides the view that you provide in the representation closure and makes it non-interactive. The framework uses it only to generate accessibility elements."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:presenting:actions:)-6dfrx",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            \"Save failed.\",\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        }\n    }\n}\n\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "padding(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/padding(_:_:)",
    "html": "Parameters\nedges\n\nThe set of edges to pad for this view. The default is Edge/Set/all.\n\nlength\n\nAn amount, given in points, to pad this view on the specified edges. If you set the value to nil, SwiftUI uses a platform-specific default amount. The default value of this parameter is nil.\n\nReturn Value\n\nA view that’s padded by the specified amount on the specified edges.\n\nDiscussion\n\nUse this modifier to add a specified amount of padding to one or more edges of the view. Indicate the edges to pad by naming either a single value from Edge/Set, or by specifying an OptionSet that contains edge values:\n\nVStack {\n    Text(\"Text padded by 20 points on the bottom and trailing edges.\")\n        .padding([.bottom, .trailing], 20)\n        .border(.gray)\n    Text(\"Unpadded text for comparison.\")\n        .border(.yellow)\n}\n\n\nThe order in which you apply modifiers matters. The example above applies the padding before applying the border to ensure that the border encompasses the padded region:\n\nYou can omit either or both of the parameters. If you omit the length, SwiftUI uses a default amount of padding. If you omit the edges, SwiftUI applies the padding to all edges. Omit both to add a default padding all the way around a view. SwiftUI chooses a default amount of padding that’s appropriate for the platform and the presentation context.\n\nVStack {\n    Text(\"Text with default padding.\")\n        .padding()\n        .border(.gray)\n    Text(\"Unpadded text for comparison.\")\n        .border(.yellow)\n}\n\n\nThe example above looks like this in iOS under typical conditions:\n\nTo control the amount of padding independently for each edge, use View/padding(_:)-6pgqq. To pad all outside edges of a view by a specified amount, use View/padding(_:)-68shk."
  },
  {
    "title": "accessibilityRotor(_:entries:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:entrylabel:)-6nzyt",
    "html": "Parameters\nrotorLabelKey\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of identifiable values that will be used to generate the entries of the Rotor. The identifiers of the Identifiable values must match up with identifiers in a ForEach or explicit id calls within the ScrollView. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nentryLabel\n\nKey path on the Identifiable type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s that have a\n// `subject`.\n// `vipMessages` is a filtered version of that list containing only\n// messages from VIPs.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages,\n    entryLabel: \\.subject)\n"
  },
  {
    "title": "alert(_:isPresented:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/alert(_:ispresented:presenting:actions:message:)-3bjjl",
    "html": "Parameters\ntitle\n\nthe title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nmessage\n\nA ViewBuilder returning the message for the alert given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n    let alertTitle: String = \"Save failed.\"\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            Text(alertTitle),\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        } message: { details in\n            Text(details.error)\n        }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "phaseAnimator(_:content:animation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/phaseanimator(_:content:animation:)",
    "html": "Parameters\nphases\n\nThe sequence of phases to cycle through. Ensure that the sequence isn’t empty. If it is, SwiftUI logs a runtime warning and also returns a visual warning as the output view.\n\ncontent\n\nA view builder closure that takes two parameters: a proxy value representing the modified view and the current phase. You can apply effects to the proxy based on the current phase.\n\nanimation\n\nA closure that takes the current phase as input. Return the animation to use when transitioning to the next phase. If you return nil, the transition doesn’t animate. If you don’t set this parameter, SwiftUI uses a default animation.\n\nDiscussion\n\nWhen the modified view first appears, this modifier renders its content closure using the first phase as input to the closure, along with a proxy for the modified view. Apply effects to the proxy — and thus to the modified view — in a way that’s appropriate for the first phase value.\n\nRight away, the modifier provides its content closure with the value of the second phase. Update the effects that you apply to the proxy view accordingly, and the modifier animates the change for you. As soon as the animation completes, the procedure repeats using successive phases until reaching the last phase, at which point the modifier loops back to the first phase."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitycustomcontent(_:_:importance:)-9quxh",
    "html": "Deprecated\n\nUsing non-localized strings for labels is not directly supported. Instead, wrap both the label and the value in a Text struct.\n\nParameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "persistentSystemOverlays(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/persistentsystemoverlays(_:)",
    "html": "Parameters\nvisibility\n\nA value that indicates the visibility of the non-transient system views overlaying the app.\n\nDiscussion\n\nUse this modifier if you would like to customise the immersive experience of your app by hiding or showing system overlays that may affect user experience. The following example hides every persistent system overlay.\n\nstruct ImmersiveView: View {\n    var body: some View {\n        Text(\"Maximum immersion\")\n            .persistentSystemOverlays(.hidden)\n    }\n}\n\n\nNote that this modifier only sets a preference and, ultimately the system will decide if it will honour it or not.\n\nThese non-transient system views include:\n\nThe Home indicator\n\nThe SharePlay indicator\n\nThe Multi-task indicator and Picture-in-picture on iPad"
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitylabel(_:)-2eyy8",
    "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn’t display text, like an icon. For example, you could use this method to label a button that plays music with the text “Play”. Don’t include text in the label that repeats information that users already have. For example, don’t use the label “Play button” because a button already has a trait that identifies it as a button."
  },
  {
    "title": "presentationDragIndicator(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationdragindicator(_:)",
    "html": "Parameters\nvisibility\n\nThe preferred visibility of the drag indicator.\n\nDiscussion\n\nYou can show a drag indicator when it isn’t apparent that a sheet can resize or when the sheet can’t dismiss interactively.\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n                .presentationDragIndicator(.visible)\n        }\n    }\n}\n"
  },
  {
    "title": "popover(item:attachmentAnchor:arrowEdge:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/popover(item:attachmentanchor:arrowedge:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the popover. When item is non-nil, the system passes the contents to the modifier’s closure. You use this content to populate the fields of a popover that you create that the system displays to the user. If item changes, the system dismisses the currently presented popover and replaces it with a new popover using the same process.\n\nattachmentAnchor\n\nThe positioning anchor that defines the attachment point of the popover. The default is Anchor/Source/bounds.\n\narrowEdge\n\nThe edge of the attachmentAnchor that defines the location of the popover’s arrow in macOS. The default is Edge/top. iOS ignores this parameter.\n\ncontent\n\nA closure returning the content of the popover.\n\nDiscussion\n\nUse this method when you need to present a popover with content from a custom data source. The example below uses data in the PopoverModel structure to populate the view in the content closure that the popover displays to the user:\n\nstruct PopoverExample: View {\n    @State private var popover: PopoverModel?\n\n\n    var body: some View {\n        Button(\"Show Popover\") {\n            popover = PopoverModel(message: \"Custom Message\")\n        }\n        .popover(item: $popover) { detail in\n            Text(\"\\(detail.message)\")\n                .padding()\n        }\n    }\n}\n\n\nstruct PopoverModel: Identifiable {\n    var id: String { message }\n    let message: String\n}\n"
  },
  {
    "title": "position(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/position(x:y:)",
    "html": "Parameters\nx\n\nThe x-coordinate at which to place the center of this view.\n\ny\n\nThe y-coordinate at which to place the center of this view.\n\nReturn Value\n\nA view that fixes the center of this view at x and y.\n\nDiscussion\n\nUse the position(x:y:) modifier to place the center of a view at a specific coordinate in the parent view using an x and y offset.\n\nText(\"Position by passing the x and y coordinates\")\n    .position(x: 175, y: 100)\n    .border(Color.gray)\n"
  },
  {
    "title": "preferredColorScheme(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/preferredcolorscheme(_:)",
    "html": "Parameters\ncolorScheme\n\nThe preferred color scheme for this view.\n\nReturn Value\n\nA view that sets the color scheme.\n\nDiscussion\n\nUse one of the values in ColorScheme with this modifier to set a preferred color scheme for the nearest enclosing presentation, like a popover, a sheet, or a window. The value that you set overrides the user’s Dark Mode selection for that presentation. In the example below, the Toggle controls an isDarkMode state variable, which in turn controls the color scheme of the sheet that contains the toggle:\n\n@State private var isPresented = false\n@State private var isDarkMode = true\n\n\nvar body: some View {\n    Button(\"Show Sheet\") {\n        isPresented = true\n    }\n    .sheet(isPresented: $isPresented) {\n        List {\n            Toggle(\"Dark Mode\", isOn: $isDarkMode)\n        }\n        .preferredColorScheme(isDarkMode ? .dark : .light)\n    }\n}\n\n\nIf you apply the modifier to any of the views in the sheet — which in this case are a List and a Toggle — the value that you set propagates up through the view hierarchy to the enclosing presentation, or until another color scheme modifier higher in the hierarchy overrides it. The value you set also flows down to all child views of the enclosing presentation.\n\nA common use for this modifier is to create side-by-side previews of the same view with light and dark appearances:\n\nstruct MyView_Previews: PreviewProvider {\n    static var previews: some View {\n        MyView().preferredColorScheme(.light)\n        MyView().preferredColorScheme(.dark)\n    }\n}\n\n\nIf you need to detect the color scheme that currently applies to a view, read the EnvironmentValues/colorScheme environment value:\n\n@Environment(\\.colorScheme) private var colorScheme\n\n\nvar body: some View {\n    Text(colorScheme == .dark ? \"Dark\" : \"Light\")\n}\n"
  },
  {
    "title": "presentationBackground(alignment:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationbackground(alignment:content:)",
    "html": "Parameters\nalignment\n\nThe alignment that the modifier uses to position the implicit ZStack that groups the background views. The default is Alignment/center.\n\ncontent\n\nThe view to use as the background of the presentation.\n\nDiscussion\n\nThe following example uses a yellow view as the sheet background:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationBackground {\n                    Color.yellow\n                }\n        }\n    }\n}\n\n\nThe presentationBackground(alignment:content:) modifier differs from the View/background(alignment:content:) modifier in several key ways. A presentation background:\n\nAutomatically fills the entire presentation.\n\nAllows views behind the presentation to show through translucent areas of the content."
  },
  {
    "title": "previewDisplayName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/previewdisplayname(_:)",
    "html": "Parameters\nvalue\n\nA name for the preview.\n\nReturn Value\n\nA preview that uses the given name.\n\nDiscussion\n\nApply this modifier to a view inside your PreviewProvider implementation to associate a display name with that view’s preview:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewDisplayName(\"Circle\")\n    }\n}\n\n\nAdd a name when you have multiple previews together in the canvas that you need to tell apart. The default value is nil, in which case Xcode displays a default string."
  },
  {
    "title": "presentationBackgroundInteraction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationbackgroundinteraction(_:)",
    "html": "Parameters\ninteraction\n\nA specification of how people can interact with the view behind a presentation.\n\nDiscussion\n\nOn many platforms, SwiftUI automatically disables the view behind a sheet that you present, so that people can’t interact with the backing view until they dismiss the sheet. Use this modifier if you want to enable interaction.\n\nThe following example enables people to interact with the view behind the sheet when the sheet is at the smallest detent, but not at the other detents:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents(\n                    [.height(120), .medium, .large])\n                .presentationBackgroundInteraction(\n                    .enabled(upThrough: .height(120)))\n        }\n    }\n}\n"
  },
  {
    "title": "presentationBackground(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationbackground(_:)",
    "html": "Parameters\nstyle\n\nThe shape style to use as the presentation background.\n\nDiscussion\n\nThe following example uses the Material/thick material as the sheet background:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationBackground(.thickMaterial)\n        }\n    }\n}\n\n\nThe presentationBackground(_:) modifier differs from the View/background(_:ignoresSafeAreaEdges:) modifier in several key ways. A presentation background:\n\nAutomatically fills the entire presentation.\n\nAllows views behind the presentation to show through translucent styles."
  },
  {
    "title": "presentationBackground(alignment:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationbackground(alignment:content:)",
    "html": "Parameters\nalignment\n\nThe alignment that the modifier uses to position the implicit ZStack that groups the background views. The default is Alignment/center.\n\ncontent\n\nThe view to use as the background of the presentation.\n\nDiscussion\n\nThe following example uses a yellow view as the sheet background:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationBackground {\n                    Color.yellow\n                }\n        }\n    }\n}\n\n\nThe presentationBackground(alignment:content:) modifier differs from the View/background(alignment:content:) modifier in several key ways. A presentation background:\n\nAutomatically fills the entire presentation.\n\nAllows views behind the presentation to show through translucent areas of the content."
  },
  {
    "title": "presentationCompactAdaptation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationcompactadaptation(_:)",
    "html": "Parameters\nadaptation\n\nThe adaptation to use in either a horizontally or vertically compact size class.\n\nDiscussion\n\nSome presentations adapt their appearance depending on the context. For example, a sheet presentation over a vertically-compact view uses a full-screen-cover appearance by default. Use this modifier to indicate a custom adaptation preference. For example, the following code uses a presentation adaptation value of PresentationAdaptation/none to request that the system not adapt the sheet in compact size classes:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n                .presentationCompactAdaptation(.none)\n        }\n    }\n}\n\n\nIf you want to specify different adaptations for each dimension, use the View/presentationCompactAdaptation(horizontal:vertical:) method instead."
  },
  {
    "title": "presentationBackgroundInteraction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationbackgroundinteraction(_:)",
    "html": "Parameters\ninteraction\n\nA specification of how people can interact with the view behind a presentation.\n\nDiscussion\n\nOn many platforms, SwiftUI automatically disables the view behind a sheet that you present, so that people can’t interact with the backing view until they dismiss the sheet. Use this modifier if you want to enable interaction.\n\nThe following example enables people to interact with the view behind the sheet when the sheet is at the smallest detent, but not at the other detents:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents(\n                    [.height(120), .medium, .large])\n                .presentationBackgroundInteraction(\n                    .enabled(upThrough: .height(120)))\n        }\n    }\n}\n"
  },
  {
    "title": "presentationCompactAdaptation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationcompactadaptation(_:)",
    "html": "Parameters\nadaptation\n\nThe adaptation to use in either a horizontally or vertically compact size class.\n\nDiscussion\n\nSome presentations adapt their appearance depending on the context. For example, a sheet presentation over a vertically-compact view uses a full-screen-cover appearance by default. Use this modifier to indicate a custom adaptation preference. For example, the following code uses a presentation adaptation value of PresentationAdaptation/none to request that the system not adapt the sheet in compact size classes:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n                .presentationCompactAdaptation(.none)\n        }\n    }\n}\n\n\nIf you want to specify different adaptations for each dimension, use the View/presentationCompactAdaptation(horizontal:vertical:) method instead."
  },
  {
    "title": "presentationContentInteraction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationcontentinteraction(_:)",
    "html": "Parameters\nbehavior\n\nThe requested behavior.\n\nDiscussion\n\nBy default, when a person swipes up on a scroll view in a resizable presentation, the presentation grows to the next detent. A scroll view embedded in the presentation only scrolls after the presentation reaches its largest size. Use this modifier to control which action takes precedence.\n\nFor example, you can request that swipe gestures scroll content first, resizing the sheet only after hitting the end of the scroll view, by passing the PresentationContentInteraction/scrolls value to this modifier:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n                .presentationContentInteraction(.scrolls)\n        }\n    }\n}\n\n\nPeople can always resize your presentation using the drag indicator."
  },
  {
    "title": "padding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/padding(_:)-5ydfq",
    "html": "Parameters\ninsets\n\nAn EdgeInsets instance that contains padding amounts for each edge.\n\nReturn Value\n\nA view that’s padded by different amounts on each edge.\n\nDiscussion\n\nUse this modifier to add a different amount of padding on each edge of a view:\n\nVStack {\n    Text(\"Text padded by different amounts on each edge.\")\n        .padding(EdgeInsets(top: 10, leading: 20, bottom: 40, trailing: 0))\n        .border(.gray)\n    Text(\"Unpadded text for comparison.\")\n        .border(.yellow)\n}\n\n\nThe order in which you apply modifiers matters. The example above applies the padding before applying the border to ensure that the border encompasses the padded region:\n\nTo pad a view on specific edges with equal padding for all padded edges, use View/padding(_:_:). To pad all edges of a view equally, use View/padding(_:)-68shk."
  },
  {
    "title": "padding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/padding(_:)-48yxg",
    "html": "Parameters\nlength\n\nThe amount, given in points, to pad this view on all edges.\n\nReturn Value\n\nA view that’s padded by the amount you specify.\n\nDiscussion\n\nUse this modifier to add padding all the way around a view.\n\nVStack {\n    Text(\"Text padded by 10 points on each edge.\")\n        .padding(10)\n        .border(.gray)\n    Text(\"Unpadded text for comparison.\")\n        .border(.yellow)\n}\n\n\nThe order in which you apply modifiers matters. The example above applies the padding before applying the border to ensure that the border encompasses the padded region:\n\nTo independently control the amount of padding for each edge, use View/padding(_:)-6pgqq. To pad a select set of edges by the same amount, use View/padding(_:_:)."
  },
  {
    "title": "onDrop(of:isTargeted:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondrop(of:istargeted:perform:)-1cxi1",
    "html": "Parameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding’s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The parameter to action contains the dropped items, with types specified by supportedTypes. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types."
  },
  {
    "title": "onDrop(of:isTargeted:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondrop(of:istargeted:perform:)-7jjcb",
    "html": "Parameters\nsupportedContentTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding’s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The first parameter to action contains the dropped items, with types specified by supportedContentTypes. The second parameter contains the drop location in this view’s coordinate space. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nDiscussion\n\nThe drop destination is the same size and position as this view."
  },
  {
    "title": "onDrop(of:isTargeted:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondrop(of:istargeted:perform:)-236pu",
    "html": "Parameters\nsupportedTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding’s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The first parameter to action contains the dropped items, with types specified by supportedTypes. The second parameter contains the drop location in this view’s coordinate space. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types."
  },
  {
    "title": "onDrop(of:isTargeted:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondrop(of:istargeted:perform:)-9n9jj",
    "html": "Parameters\nsupportedContentTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag-and-drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\nisTargeted\n\nA binding that updates when a drag and drop operation enters or exits the drop target area. The binding’s value is true when the cursor is inside the area, and false when the cursor is outside.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The parameter to action contains the dropped items, with types specified by supportedContentTypes. Return true if the drop operation was successful; otherwise, return false.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nDiscussion\n\nThe drop destination is the same size and position as this view."
  },
  {
    "title": "onHover(perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onhover(perform:)",
    "html": "Parameters\naction\n\nThe action to perform whenever the pointer enters or exits this view’s frame. If the pointer is in the view’s frame, the action closure passes true as a parameter; otherwise, false.\n\nReturn Value\n\nA view that triggers action when the pointer enters or exits this view’s frame.\n\nDiscussion\n\nCalling this method defines a region for detecting pointer movement with the size and position of this view."
  },
  {
    "title": "onKeyPress(_:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onkeypress(_:action:)",
    "html": "Parameters\nkey\n\nThe key to match against incoming hardware keyboard events.\n\naction\n\nThe action to perform. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds hardware keyboard input when focused.\n\nDiscussion\n\nSwiftUI performs the action for key-down and key-repeat events."
  },
  {
    "title": "onKeyPress(_:phases:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onkeypress(_:phases:action:)",
    "html": "Parameters\nkey\n\nThe key to match against incoming hardware keyboard events.\n\nphases\n\nThe key-press phases to match (.down, .up, and .repeat).\n\naction\n\nThe action to perform. The action receives a value describing the matched key event. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds hardware keyboard input when focused.\n\nDiscussion\n\nSwiftUI performs the action for the specified event phases."
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityvalue(_:)-7q8e3",
    "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that’s different than the view’s label. For example, for a slider that you label as “Volume” using accessibilityLabel(), you can provide the current volume setting, like “60%”, using accessibilityValue()."
  },
  {
    "title": "accessibilityRotor(_:textRanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:textranges:)-9q4bz",
    "html": "Parameters\nlabelKey\n\nLocalized label identifying this Rotor to the user.\n\ntextRanges\n\nAn array of ranges that will be used to generate the entries of the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing email addresses.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated\n    // when `content` is set and then cached so that we don't have\n    // to re-compute them.\n    var emailAddressRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(\"Email Addresses\",\n            textRanges: message.emailAddressRanges)\n}\n"
  },
  {
    "title": "accessibilitySortPriority(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitysortpriority(_:)",
    "html": "Discussion\n\nHigher numbers are sorted first. The default sort priority is zero."
  },
  {
    "title": "accessibilityRotorEntry(id:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotorentry(id:in:)",
    "html": "Parameters\nid\n\nAn arbitrary hashable identifier. Pass this same value when initializing an AccessibilityRotorEntry.\n\nnamespace\n\nA namespace created with @Namespace(). Pass this same namespace when initializing an AccessibilityRotorEntry.\n\nDiscussion\n\nUse this when creating an AccessibilityRotorEntry without a namespace does not allow SwiftUI to automatically find and reveal the element, or when the Rotor entry should be associated with a sub-element of a complex view generated in a ForEach, for example."
  },
  {
    "title": "accessibilityShowsLargeContentViewer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityshowslargecontentviewer(_:)",
    "html": "Discussion\n\nRely on the large content viewer only in situations where items must remain small due to unavoidable design constraints. For example, buttons in a tab bar remain small to leave more room for the main app content.\n\nThe following example shows how to add a custom large content view:\n\nvar body: some View {\n    Button(action: newMessage) {\n        Image(systemName: \"plus\")\n    }\n    .accessibilityShowsLargeContentViewer {\n        Label(\"New Message\", systemImage: \"plus\")\n    }\n}\n\n\nDon’t use the large content viewer as a replacement for proper Dynamic Type support. For example, Dynamic Type allows items in a list to grow or shrink vertically to accommodate the user’s preferred font size. Rely on the large content viewer only in situations where items must remain small due to unavoidable design constraints.\n\nFor example, views that have their Dynamic Type size constrained with View/dynamicTypeSize(_:)-26aj0 or View/dynamicTypeSize(_:)-26aj0 may require a large content view."
  },
  {
    "title": "accessibilityTextContentType(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitytextcontenttype(_:)",
    "html": "Parameters\nvalue\n\nThe accessibility content type from the available AccessibilityTextContentType options.\n\nDiscussion\n\nUse this modifier to set the content type of this accessibility element. Assistive technologies can use this property to choose an appropriate way to output the text. For example, when encountering a source coding context, VoiceOver could choose to speak all punctuation.\n\nThe default content type AccessibilityTextContentType/plain."
  },
  {
    "title": "accessibilityScrollAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityscrollaction(_:)",
    "html": "Discussion\n\nFor example, this is how a scroll action to trigger a refresh could be added to a view.\n\nvar body: some View {\n    ScrollView {\n        ContentView()\n    }\n    .accessibilityScrollAction { edge in\n        if edge == .top {\n            // Refresh content\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityShowsLargeContentViewer() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityshowslargecontentviewer()",
    "html": "Discussion\n\nRely on the large content viewer only in situations where items must remain small due to unavoidable design constraints. For example, buttons in a tab bar remain small to leave more room for the main app content.\n\nThe following example shows how to add a custom large content view:\n\nvar body: some View {\n    Button(\"New Message\", action: newMessage)\n        .accessibilityShowsLargeContentViewer()\n}\n\n\nDon’t use the large content viewer as a replacement for proper Dynamic Type support. For example, Dynamic Type allows items in a list to grow or shrink vertically to accommodate the user’s preferred font size. Rely on the large content viewer only in situations where items must remain small due to unavoidable design constraints.\n\nFor example, views that have their Dynamic Type size constrained with View/dynamicTypeSize(_:)-26aj0 or View/dynamicTypeSize(_:)-26aj0 may require a large content view."
  },
  {
    "title": "onKeyPress(keys:phases:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onkeypress(keys:phases:action:)",
    "html": "Parameters\nkeys\n\nA set of keys to match against incoming hardware keyboard events.\n\nphases\n\nThe key-press phases to match (.down, .repeat, and .up). The default value is [.down, .repeat].\n\naction\n\nThe action to perform. The action receives a value describing the matched key event. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds keyboard input when focused."
  },
  {
    "title": "onLongPressGesture(minimumDuration:maximumDistance:perform:onPressingChanged:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
    "html": "Parameters\nminimumDuration\n\nThe minimum duration of the long press that must elapse before the gesture succeeds.\n\nmaximumDistance\n\nThe maximum distance that the fingers or cursor performing the long press can move before the gesture fails.\n\naction\n\nThe action to perform when a long press is recognized.\n\nonPressingChanged\n\nA closure to run when the pressing state of the gesture changes, passing the current state as a parameter."
  },
  {
    "title": "onKeyPress(characters:phases:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onkeypress(characters:phases:action:)",
    "html": "Parameters\ncharacters\n\nThe set of characters to match against incoming hardware keyboard events.\n\nphases\n\nThe key-press phases to match (.down, .repeat, and .up). The default value is [.down, .repeat].\n\naction\n\nThe action to perform. The action receives a value describing the matched key event. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds hardware keyboard input when focused."
  },
  {
    "title": "onKeyPress(phases:action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onkeypress(phases:action:)",
    "html": "Parameters\nphases\n\nThe key-press phases to match (.down, .repeat, and .up). The default value is [.down, .repeat].\n\naction\n\nThe action to perform. The action receives a value describing the matched key event. Return .handled to consume the event and prevent further dispatch, or .ignored to allow dispatch to continue.\n\nReturn Value\n\nA modified view that binds hardware keyboard input when focused."
  },
  {
    "title": "onPreferenceChange(_:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onpreferencechange(_:perform:)",
    "html": "Parameters\nkey\n\nThe key to monitor for value changes.\n\naction\n\nThe action to perform when the value for key changes. The action closure passes the new value as its parameter.\n\nReturn Value\n\nA view that triggers action when the value for key changes."
  },
  {
    "title": "onLongPressGesture(minimumDuration:perform:onPressingChanged:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
    "html": "Parameters\nminimumDuration\n\nThe minimum duration of the long press that must elapse before the gesture succeeds.\n\naction\n\nThe action to perform when a long press is recognized.\n\nonPressingChanged\n\nA closure to run when the pressing state of the gesture changes, passing the current state as a parameter."
  },
  {
    "title": "onReceive(_:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onreceive(_:perform:)",
    "html": "Parameters\npublisher\n\nThe publisher to subscribe to.\n\naction\n\nThe action to perform when an event is emitted by publisher. The event emitted by publisher is passed as a parameter to action.\n\nReturn Value\n\nA view that triggers action when publisher emits an event."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitycustomcontent(_:_:importance:)-57vxv",
    "html": "Parameters\nlabelKey\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "onTapGesture(count:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ontapgesture(count:perform:)",
    "html": "Parameters\ncount\n\nThe number of taps or clicks required to trigger the action closure provided in action. Defaults to 1.\n\naction\n\nThe action to perform.\n\nDiscussion\n\nUse this method to perform the specified action when the user clicks or taps on the view or container count times.\n\nNote\n\nIf you create a control that’s functionally equivalent to a Button, use ButtonStyle to create a customized button instead.\n\nIn the example below, the color of the heart images changes to a random color from the colors array whenever the user clicks or taps on the view twice:\n\nstruct TapGestureExample: View {\n    let colors: [Color] = [.gray, .red, .orange, .yellow,\n                           .green, .blue, .purple, .pink]\n    @State private var fgColor: Color = .gray\n\n\n    var body: some View {\n        Image(systemName: \"heart.fill\")\n            .resizable()\n            .frame(width: 200, height: 200)\n            .foregroundColor(fgColor)\n            .onTapGesture(count: 2) {\n                fgColor = colors.randomElement()!\n            }\n    }\n}\n"
  },
  {
    "title": "accessibilityChartDescriptor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitychartdescriptor(_:)",
    "html": "Parameters\nchartDescriptor\n\nThe AXChartDescriptorRepresentable used to describe your chart and its data.\n\nDiscussion\n\nUse this method to provide information about your chart view to allow VoiceOver and other assistive technology users to perceive and interact with your chart and its data.\n\nThis may be applied to any View that represents a chart, including Image and custom-rendered chart views.\n\nThe accessibilityChartDescriptor modifier can be applied to -any- view representing a chart, the simplest case being just an image of a chart. The implementation details of the view aren’t important, only the fact that it represents a chart, and that the provided chart descriptor accurately describes the content of the chart.\n\nExample usage:\n\nFirst define your AXChartDescriptorRepresentable type.\n\nstruct MyChartDescriptorRepresentable:\nAXChartDescriptorRepresentable {\n    func makeChartDescriptor() -> AXChartDescriptor {\n        // Build and return your `AXChartDescriptor` here.\n    }\n\n\n    func updateChartDescriptor(_ descriptor: AXChartDescriptor) {\n        // Update your chart descriptor with any new values, or\n        // don't override if your chart doesn't have changing\n        // values.\n    }\n}\n\n\nThen use the accessibilityChartDescriptor modifier to provide an instance of your AXChartDescriptorRepresentable type to the view representing your chart:\n\nSomeChartView()\n    .accessibilityChartDescriptor(MyChartDescriptorRepresentable())\n"
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitycustomcontent(_:_:importance:)-8qjak",
    "html": "Parameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example: accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "overlay(_:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/overlay(_:alignment:)",
    "html": "Parameters\noverlay\n\nThe view to layer in front of this view.\n\nalignment\n\nThe alignment for overlay in relation to this view.\n\nReturn Value\n\nA view that layers overlay in front of the view.\n\nDiscussion\n\nWhen you apply an overlay to a view, the original view continues to provide the layout characteristics for the resulting view. In the following example, the heart image is shown overlaid in front of, and aligned to the bottom of the folder image.\n\nImage(systemName: \"folder\")\n    .font(.system(size: 55, weight: .thin))\n    .overlay(Text(\"❤️\"), alignment: .bottom)\n"
  },
  {
    "title": "overlay(_:ignoresSafeAreaEdges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/overlay(_:ignoressafeareaedges:)",
    "html": "Parameters\nstyle\n\nAn instance of a type that conforms to ShapeStyle that SwiftUI layers in front of the modified view.\n\nedges\n\nThe set of edges for which to ignore safe area insets when adding the overlay. The default value is Edge/Set/all. Specify an empty set to respect safe area insets on all edges.\n\nReturn Value\n\nA view with the specified style drawn in front of it.\n\nDiscussion\n\nUse this modifier to layer a type that conforms to the ShapeStyle protocol, like a Color, Material, or HierarchicalShapeStyle, in front of a view. For example, you can overlay the ShapeStyle/ultraThinMaterial over a Circle:\n\nstruct CoveredCircle: View {\n    var body: some View {\n        Circle()\n            .frame(width: 300, height: 200)\n            .overlay(.ultraThinMaterial)\n    }\n}\n\n\nSwiftUI anchors the style to the view’s bounds. For the example above, the overlay fills the entirety of the circle’s frame (which happens to be wider than the circle is tall):\n\nSwiftUI also limits the style’s extent to the view’s container-relative shape. You can see this effect if you constrain the CoveredCircle view with a View/containerShape(_:) modifier:\n\nCoveredCircle()\n    .containerShape(RoundedRectangle(cornerRadius: 30))\n\n\nThe overlay takes on the specified container shape:\n\nBy default, the overlay ignores safe area insets on all edges, but you can provide a specific set of edges to ignore, or an empty set to respect safe area insets on all edges:\n\nRectangle()\n    .overlay(\n        .secondary,\n        ignoresSafeAreaEdges: []) // Ignore no safe area insets.\n\n\nIf you want to specify a View or a stack of views as the overlay rather than a style, use View/overlay(alignment:content:) instead. If you want to specify a Shape, use View/overlay(_:in:fillStyle:)."
  },
  {
    "title": "opacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/opacity(_:)",
    "html": "Parameters\nopacity\n\nA value between 0 (fully transparent) and 1 (fully opaque).\n\nReturn Value\n\nA view that sets the transparency of this view.\n\nDiscussion\n\nApply opacity to reveal views that are behind another view or to de-emphasize a view.\n\nWhen applying the opacity(_:) modifier to a view that has already had its opacity transformed, the modifier multiplies the effect of the underlying opacity transformation.\n\nThe example below shows yellow and red rectangles configured to overlap. The top yellow rectangle has its opacity set to 50%, allowing the occluded portion of the bottom rectangle to be visible:\n\nstruct Opacity: View {\n    var body: some View {\n        VStack {\n            Color.yellow.frame(width: 100, height: 100, alignment: .center)\n                .zIndex(1)\n                .opacity(0.5)\n\n\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .padding(-40)\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityFocused(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityfocused(_:)",
    "html": "Parameters\ncondition\n\nThe accessibility focus state to bind. When accessibility focus moves to the accessibility element of the modified view, the focus value is set to true. If the value is set to true programmatically, then accessibility focus will move to accessibility element of the modified view. The value will be set to false if accessibility focus leaves the accessibility element of the modified view, and accessibility focus will be dismissed automatically if the value is set to false programmatically.\n\nReturn Value\n\nThe modified view."
  },
  {
    "title": "accessibilityLabeledPair(role:id:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitylabeledpair(role:id:in:)",
    "html": "Parameters\nrole\n\nDetermines whether this element should be used as the label in the pair, or the content in the pair.\n\nid\n\nThe identifier for the label / content pair. Elements with matching identifiers within the same namespace will be paired together.\n\nnamespace\n\nThe namespace used to organize label and content. Label and content under the same namespace with matching identifiers will be paired together.\n\nDiscussion\n\nUse accessibilityLabeledPair with a role of AccessibilityLabeledPairRole.label to identify the label, and a role of AccessibilityLabeledPairRole.content to identify the content. This improves the behavior of accessibility features such as VoiceOver when navigating such elements, allowing users to better understand the relationship between them."
  },
  {
    "title": "accessibilityInputLabels(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityinputlabels(_:)-33gj8",
    "html": "Discussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don’t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibilityLabel() modifier."
  },
  {
    "title": "accessibilityInputLabels(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityinputlabels(_:)-90kuk",
    "html": "Discussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don’t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibilityLabel() modifier."
  },
  {
    "title": "accessibilityInputLabels(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityinputlabels(_:)-3vx6l",
    "html": "Parameters\ninputLabels\n\nAn array of Text elements to use as input labels.\n\nDiscussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don’t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibilityLabel() modifier."
  },
  {
    "title": "accessibilityRespondsToUserInteraction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrespondstouserinteraction(_:)",
    "html": "Discussion\n\nIf this is not set, the value is inferred from the traits of the Accessibility element, the presence of Accessibility actions on the element, or the presence of gestures on the element or containing views."
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitylabel(_:)-107ju",
    "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn’t display text, like an icon. For example, you could use this method to label a button that plays music with the text “Play”. Don’t include text in the label that repeats information that users already have. For example, don’t use the label “Play button” because a button already has a trait that identifies it as a button."
  },
  {
    "title": "accessibilityLinkedGroup(id:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitylinkedgroup(id:in:)",
    "html": "Parameters\nid\n\nA hashable identifier used to separate sets of linked elements within the same namespace. Elements with matching namespace and id will be linked together.\n\nnamespace\n\nThe namespace to use to organize linked accessibility elements. All elements marked with accessibilityLink in this namespace and with the specified id will be linked together.\n\nDiscussion\n\nThis can be useful to allow quickly jumping between content in a list and the same content shown in a detail view, for example. All elements marked with accessibilityLinkedGroup with the same namespace and identifier will be linked together."
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitylabel(_:)-54g4w",
    "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn’t display text, like an icon. For example, you could use this method to label a button that plays music with the text “Play”. Don’t include text in the label that repeats information that users already have. For example, don’t use the label “Play button” because a button already has a trait that identifies it as a button."
  },
  {
    "title": "accessibilityRotor(_:entries:entryID:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:entryid:entrylabel:)-4wt07",
    "html": "Parameters\nlabelKey\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of values that will be used to generate the entries of the Rotor.\n\nentryID\n\nKey path on the entry type that can be used to generate an identifier for the Entry. The identifiers must match up with identifiers in ForEach or explicit id calls within the ScrollView.\n\nentryLabel\n\nKey path on the entry type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Message`s that have a `subject` and a\n// `uuid`. `vipMesages` is a filtered version of that list\n// containing only messages from VIPs.\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages,\n    entryID: \\.uuid, entryLabel: \\.subject)\n"
  },
  {
    "title": "presentationCornerRadius(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationcornerradius(_:)",
    "html": "Parameters\ncornerRadius\n\nThe corner radius, or nil to use the system default.\n\nDiscussion\n\nUse this modifier to change the corner radius of a presentation.\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n                .presentationCornerRadius(21)\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityRotor(_:entries:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:)-9lowc",
    "html": "Parameters\nsystemRotor\n\nThe system-provided Rotor that will be overridden by this custom Rotor.\n\nentries\n\nContent used to generate Rotor entries. This can include AccessibilityRotorEntry structs, as well as constructs such as if and ForEach.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements. Replacing system Rotors this way is useful when the System Rotor does not automatically pick up elements that aren’t on-screen, such as elements far down in a LazyVStack or List.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing headings.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated\n    // when `content` is set and then cached so that we don't have\n    // to re-compute them.\n    var contentHeadingRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(.heading) {\n            ForEach(range in message.contentHeadingRanges) {\n                AccessibilityRotorEntry(textRange: range)\n            }\n        }\n}\n"
  },
  {
    "title": "paletteSelectionEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/paletteselectioneffect(_:)",
    "html": "Parameters\neffect\n\nThe type of effect to apply when a palette item is selected.\n\nDiscussion\n\nPaletteSelectionEffect/automatic applies the system’s default appearance when selected. When using un-tinted SF Symbols or template images, the current tint color is applied to the selected items’ image. If the provided SF Symbols have custom tints, a stroke is drawn around selected items.\n\nIf you wish to provide a specific image (or SF Symbol) to indicate selection, use PaletteSelectionEffect/custom to forgo the system’s default selection appearance allowing the provided image to solely indicate selection instead.\n\nThe following example creates a palette picker that disables the system selection behavior:\n\nMenu {\n    Picker(\"Palettes\", selection: $selection) {\n        ForEach(palettes) { palette in\n            Label(palette.title, image: selection == palette ?\n                  \"selected-palette\" : \"palette\")\n            .tint(palette.tint)\n            .tag(palette)\n        }\n    }\n    .pickerStyle(.palette)\n    .paletteSelectionEffect(.custom)\n} label: {\n    ...\n}\n\n\nIf a specific SF Symbol variant is preferable instead, use PaletteSelectionEffect/symbolVariant(_:).\n\nMenu {\n    ControlGroup {\n        ForEach(ColorTags.allCases) { colorTag in\n            Toggle(isOn: $selectedColorTags[colorTag]) {\n                Label(colorTag.name, systemImage: \"circle\")\n            }\n            .tint(colorTag.color)\n        }\n    }\n    .controlGroupStyle(.palette)\n    .paletteSelectionEffect(.symbolVariant(.fill))\n}\n"
  },
  {
    "title": "position(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/position(_:)",
    "html": "Parameters\nposition\n\nThe point at which to place the center of this view.\n\nReturn Value\n\nA view that fixes the center of this view at position.\n\nDiscussion\n\nUse the position(_:) modifier to place the center of a view at a specific coordinate in the parent view using a CGPoint to specify the x and y offset.\n\nText(\"Position by passing a CGPoint()\")\n    .position(CGPoint(x: 175, y: 100))\n    .border(Color.gray)\n"
  },
  {
    "title": "presentationBackground(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/presentationbackground(_:)",
    "html": "Parameters\nstyle\n\nThe shape style to use as the presentation background.\n\nDiscussion\n\nThe following example uses the Material/thick material as the sheet background:\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationBackground(.thickMaterial)\n        }\n    }\n}\n\n\nThe presentationBackground(_:) modifier differs from the View/background(_:ignoresSafeAreaEdges:) modifier in several key ways. A presentation background:\n\nAutomatically fills the entire presentation.\n\nAllows views behind the presentation to show through translucent styles."
  },
  {
    "title": "overlayPreferenceValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/overlaypreferencevalue(_:_:)",
    "html": "Parameters\nkey\n\nThe preference key type whose value is to be read.\n\ntransform\n\nA function that produces the overlay view from the preference value read from the original view.\n\nReturn Value\n\nA view that layers a second view in front of the view."
  },
  {
    "title": "overlayPreferenceValue(_:alignment:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/overlaypreferencevalue(_:alignment:_:)",
    "html": "Parameters\nkey\n\nThe preference key type whose value is to be read.\n\nalignment\n\nAn optional alignment to use when positioning the overlay view relative to the original view.\n\ntransform\n\nA function that produces the overlay view from the preference value read from the original view.\n\nReturn Value\n\nA view that layers a second view in front of the view.\n\nDiscussion\n\nThe values of the preference key from both views are combined and made visible to the parent view."
  },
  {
    "title": "onDrop(of:delegate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondrop(of:delegate:)-1avh7",
    "html": "Parameters\nsupportedContentTypes\n\nThe uniform type identifiers that describe the types of content this view can accept through drag and drop. If the drag and drop operation doesn’t contain any of the supported types, then this drop destination doesn’t activate and isTargeted doesn’t update.\n\ndelegate\n\nA type that conforms to the DropDelegate protocol. You have comprehensive control over drop behavior when you use a delegate.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified types.\n\nDiscussion\n\nThe drop destination is the same size and position as this view."
  },
  {
    "title": "accessibilityRotor(_:entries:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:entrylabel:)-8ifmf",
    "html": "Parameters\nsystemRotor\n\nThe system-provided Rotor that will be overridden by this custom Rotor.\n\nentries\n\nAn array of identifiable values that will be used to generate the entries of the Rotor. The identifiers of the Identifiable values must match up with identifiers in a ForEach or explicit id calls within the ScrollView. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nentryLabel\n\nKey path on the Identifiable type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to the headings in its vertical stack of messages.\n\n// `messageListItems` is a list of `Identifiable` `MessageListItem`s\n// that are either a `Message` or a heading, containing a `subject`.\n// `headingMessageListItems` is a filtered list of\n// `messageListItems` containing just the headings.\nScrollView {\n    LazyVStack {\n        ForEach(messageListItems) { messageListItem in\n            switch messageListItem {\n                case .heading(let subject):\n                    Text(subject)\n                case .message(let message):\n                    MessageView(message)\n            }\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\n    .heading, entries: headingMessageListItems, label: \\.subject)\n"
  },
  {
    "title": "privacySensitive(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/privacysensitive(_:)",
    "html": "Discussion\n\nSwiftUI redacts views marked with this modifier when you apply the RedactionReasons/privacy redaction reason.\n\nstruct BankAccountView: View {\n    var body: some View {\n        VStack {\n            Text(\"Account #\")\n\n\n            Text(accountNumber)\n                .font(.headline)\n                .privacySensitive() // Hide only the account number.\n        }\n    }\n}\n"
  },
  {
    "title": "progressViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/progressviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe progress view style to use for this view.\n\nDiscussion\n\nFor example, the following code creates a progress view that uses the “circular” style:\n\nProgressView()\n    .progressViewStyle(.circular)\n"
  },
  {
    "title": "projectionEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/projectioneffect(_:)",
    "html": "Parameters\ntransform\n\nA ProjectionTransform to apply to the view.\n\nDiscussion\n\nUse projectionEffect(_:) to apply a 3D transformation to the view.\n\nThe example below rotates the text 30˚ around the z axis, which is the axis pointing out of the screen:\n\n// This transform represents a 30˚ rotation around the z axis.\nlet transform = CATransform3DMakeRotation(\n    -30 * (.pi / 180), 0.0, 0.0, 1.0)\n\n\nText(\"Projection effects using transforms\")\n    .projectionEffect(.init(transform))\n    .border(Color.gray)\n"
  },
  {
    "title": "accessibility(hint:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibility(hint:)",
    "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like “Purchases the item” or “Downloads the attachment”."
  },
  {
    "title": "accessibility(inputLabels:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibility(inputlabels:)",
    "html": "Parameters\ninputLabels\n\nAn array of Text elements to use as input labels.\n\nDiscussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don’t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibility(label:) modifier."
  },
  {
    "title": "accessibility(selectionIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibility(selectionidentifier:)",
    "html": "Discussion\n\nPicker uses the value to determine what node to use for the accessibility value."
  },
  {
    "title": "accessibility(sortPriority:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibility(sortpriority:)",
    "html": "Discussion\n\nHigher numbers are sorted first. The default sort priority is zero."
  },
  {
    "title": "rotation3DEffect(_:axis:anchor:anchorZ:perspective:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
    "html": "Parameters\nangle\n\nThe angle by which to rotate the view’s content.\n\naxis\n\nThe axis of rotation, specified as a tuple with named elements for each of the three spatial dimensions.\n\nanchor\n\nA two dimensional unit point within the view about which to perform the rotation. The default value is UnitPoint/center.\n\nanchorZ\n\nThe location on the z-axis around which to rotate the content. The default is 0.\n\nperspective\n\nThe relative vanishing point for the rotation. The default is 1.\n\nReturn Value\n\nA view with rotated content.\n\nDiscussion\n\nUse this method to create the effect of rotating a view in three dimensions around a specified axis of rotation. The modifier projects the rotated content onto the original view’s plane. Use the perspective value to control the renderer’s vanishing point. The following example creates the appearance of rotating text 45˚ about the y-axis:\n\nText(\"Rotation by passing an angle in degrees\")\n    .rotation3DEffect(\n        .degrees(45),\n        axis: (x: 0.0, y: 1.0, z: 0.0),\n        anchor: .center,\n        anchorZ: 0,\n        perspective: 1)\n    .border(Color.gray)\n\n\nImportant\n\nIn visionOS, create this effect with perspectiveRotationEffect(_:axis:anchor:anchorZ:perspective:) instead. To truly rotate a view in three dimensions, use a 3D rotation modifier without a perspective input like rotation3DEffect(_:axis:anchor:)-8vi88."
  },
  {
    "title": "listSectionSeparator(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listsectionseparator(_:edges:)",
    "html": "Parameters\nvisibility\n\nThe visibility of this section’s separators.\n\nedges\n\nThe set of row edges for which the preference applies. The list style might already decide to not display separators for some edges. The default is VerticalEdge/Set/all.\n\nDiscussion\n\nSeparators can be presented above and below a section. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter of the separator visibility.\n\nThe following example shows a simple grouped list whose bottom sections separator are hidden:\n\nList {\n    ForEach(garage) { garage in\n        Section(header: Text(garage.location)) {\n            ForEach(garage.cars) { car in\n                Text(car.model)\n                    .listRowSeparatorTint(car.brandColor)\n            }\n        }\n        .listSectionSeparator(.hidden, edges: .bottom)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the visibility and tint color for a row separator, use View/listRowSeparator(_:edges:) and View/listRowSeparatorTint(_:edges:). To set the tint color for a section separator, use View/listSectionSeparatorTint(_:edges:)."
  },
  {
    "title": "accessibilityAction(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityaction(_:_:)",
    "html": "Discussion\n\nFor example, this is how a .default action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction {\n            // Handle action\n        }\n}\n"
  },
  {
    "title": "refreshable(action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/refreshable(action:)",
    "html": "Parameters\naction\n\nAn asynchronous handler that SwiftUI executes when the user requests a refresh. Use this handler to initiate an update of model data displayed in the modified view. Use await in front of any asynchronous calls inside the handler.\n\nReturn Value\n\nA view with a new refresh action in its environment.\n\nDiscussion\n\nApply this modifier to a view to set the EnvironmentValues/refresh value in the view’s environment to a RefreshAction instance that uses the specified action as its handler. Views that detect the presence of the instance can change their appearance to provide a way for the user to execute the handler.\n\nFor example, when you apply this modifier on iOS and iPadOS to a List, the list enables a standard pull-to-refresh gesture that refreshes the list contents. When the user drags the top of the scrollable area downward, the view reveals a progress indicator and executes the specified handler. The indicator remains visible for the duration of the refresh, which runs asynchronously:\n\nList(mailbox.conversations) { conversation in\n    ConversationCell(conversation)\n}\n.refreshable {\n    await mailbox.fetch()\n}\n\n\nYou can add refresh capability to your own views as well. For information on how to do that, see RefreshAction."
  },
  {
    "title": "previewDevice(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/previewdevice(_:)",
    "html": "Parameters\nvalue\n\nA device to use for preview, or nil to let Xcode automatically choose a device based on the run destination.\n\nReturn Value\n\nA preview that uses the given device.\n\nDiscussion\n\nBy default, Xcode automatically chooses a preview device based on your currently selected run destination. If you want to choose a device that doesn’t change based on Xcode settings, provide a PreviewDevice instance that you initialize with the name or model of a specific device:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewDevice(PreviewDevice(rawValue: \"iPad Pro (11-inch)\"))\n    }\n}\n\n\nYou can get a list of supported preview device names, like “iPhone 11”, “iPad Pro (11-inch)”, and “Apple Watch Series 5 - 44mm”, by using the xcrun command in the Terminal app:\n\n% xcrun simctl list devicetypes\n\n\nAdditionally, you can use the following values for macOS platform development:\n\n“Mac”\n\n“Mac Catalyst”"
  },
  {
    "title": "presentationCornerRadius(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationcornerradius(_:)",
    "html": "Parameters\ncornerRadius\n\nThe corner radius, or nil to use the system default.\n\nDiscussion\n\nUse this modifier to change the corner radius of a presentation.\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n                .presentationCornerRadius(21)\n        }\n    }\n}\n"
  },
  {
    "title": "renameAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/renameaction(_:)-3tes8",
    "html": "Parameters\nisFocused\n\nThe focus binding to update when activating the rename action.\n\nReturn Value\n\nA view that has the specified rename action.\n\nDiscussion\n\nUse this modifier in conjunction with the RenameButton to implement standard rename interactions. A rename button receives its action from the environment. Use this modifier to customize the action provided to the rename button.\n\nstruct RowView: View {\n    @State private var text = \"\"\n    @FocusState private var isFocused: Bool\n\n\n    var body: some View {\n        TextField(text: $item.name) {\n            Text(\"Prompt\")\n        }\n        .focused($isFocused)\n        .contextMenu {\n            RenameButton()\n            // ... your own custom actions\n        }\n        .renameAction($isFocused)\n}\n\n\nWhen someone taps the rename button in the context menu, the rename action focuses the text field by setting the isFocused property to true."
  },
  {
    "title": "onOpenURL(perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onopenurl(perform:)",
    "html": "Parameters\naction\n\nA function that takes a URL object as its parameter when delivering the URL to the scene or window the view is in.\n\nDiscussion\n\nNote\n\nThis method handles the reception of Universal Links, rather than a NSUserActivity."
  },
  {
    "title": "accessibilityActivationPoint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityactivationpoint(_:)-zvzv",
    "html": "Discussion\n\nUse this modifier to ensure that the activation point for a small element remains accurate even if you present a larger version of the element to VoiceOver.\n\nIf an activation point is not provided, an activation point will be derrived from one of the accessibility elements decendents or from the center of the accessibility frame."
  },
  {
    "title": "accessibilityActivationPoint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityactivationpoint(_:)-6cwas",
    "html": "Discussion\n\nUse this modifier to ensure that the activation point for a small element remains accurate even if you present a larger version of the element to VoiceOver.\n\nIf an activation point is not provided, an activation point will be derrived from one of the accessibility elements decendents or from the center of the accessibility frame."
  },
  {
    "title": "accessibilityAdjustableAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityadjustableaction(_:)",
    "html": "Discussion\n\nFor example, this is how an adjustable action to navigate through pages could be added to a view.\n\nvar body: some View {\n    PageControl()\n        .accessibilityAdjustableAction { direction in\n            switch direction {\n            case .increment:\n                // Go to next page\n            case .decrement:\n                // Go to previous page\n            }\n        }\n}\n"
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitycustomcontent(_:_:importance:)-141ra",
    "html": "Parameters\nlabelKey\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "accessibilityChildren(children:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitychildren(children:)",
    "html": "Parameters\nchildren\n\nA ViewBuilder that represents the replacement child views the framework uses to generate accessibility elements.\n\nDiscussion\n\nUse this modifier to replace an existing element’s children with one or more new synthetic accessibility elements you provide. This allows for synthetic, non-visual accessibility elements to be set as children of a visual accessibility element.\n\nSwiftUI creates an accessibility container implicitly when needed. If an accessibility element already exists, the framework converts it into an accessibility container.\n\nIn the example below, a Canvas displays a graph of vertical bars that don’t have any inherent accessibility elements. You make the view accessible by adding the accessibilityChildren(children:) modifier with views whose accessibility elements represent the values of each bar drawn in the canvas:\n\nvar body: some View {\n    Canvas { context, size in\n        // Draw Graph\n        for data in dataSet {\n            let path = Path(\n                roundedRect: CGRect(\n                    x: (size.width / CGFloat(dataSet.count))\n                    * CGFloat(data.week),\n                    y: 0,\n                    width: size.width / CGFloat(dataSet.count),\n                    height: CGFloat(data.lines),\n                cornerRadius: 5)\n            context.fill(path, with: .color(.blue))\n        }\n        // Draw Axis and Labels\n        ...\n    }\n    .accessibilityLabel(\"Lines of Code per Week\")\n    .accessibilityChildren {\n        HStack {\n            ForEach(dataSet) { data in\n                RoundedRectangle(cornerRadius: 5)\n                    .accessibilityLabel(\"Week \\(data.week)\")\n                    .accessibilityValue(\"\\(data.lines) lines\")\n            }\n        }\n    }\n}\n\n\nSwiftUI hides any views that you provide with the children parameter, then the framework uses the views to generate the accessibility elements."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitycustomcontent(_:_:importance:)-3vtie",
    "html": "Parameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example: accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitycustomcontent(_:_:importance:)-1z6jd",
    "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.” A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitycustomcontent(_:_:importance:)-6ywvd",
    "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.” A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitycustomcontent(_:_:importance:)-7vu95",
    "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalueKey\n\nText value for the additional accessibility information. For example: “landscape.” A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
  },
  {
    "title": "accessibilityDirectTouch(_:options:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilitydirecttouch(_:options:)",
    "html": "Discussion\n\nFor example, this is how a direct touch area would allow a VoiceOver user to interact with a view with a rotationEffect controlled by a RotationGesture. The direct touch area would require a user to activate the area before using the direct touch area.\n\nvar body: some View {\n    Rectangle()\n        .frame(width: 200, height: 200, alignment: .center)\n        .rotationEffect(angle)\n        .gesture(rotation)\n        .accessibilityDirectTouch(options: .requiresActivation)\n}\n"
  },
  {
    "title": "accessibilityFocused(_:equals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityfocused(_:equals:)",
    "html": "Parameters\nbinding\n\nThe state binding to register. When accessibility focus moves to the accessibility element of the modified view, SwiftUI sets the bound value to the corresponding match value. If you set the state value programmatically to the matching value, then accessibility focus moves to the accessibility element of the modified view. SwiftUI sets the value to nil if accessibility focus leaves the accessibility element associated with the modified view, and programmatically setting the value to nil dismisses focus automatically.\n\nvalue\n\nThe value to match against when determining whether the binding should change.\n\nReturn Value\n\nThe modified view."
  },
  {
    "title": "accessibilityElement(children:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityelement(children:)",
    "html": "Parameters\nchildren\n\nThe behavior to use when creating or transforming an accessibility element. The default is AccessibilityChildBehavior/ignore\n\nDiscussion\n\nSee also:\n\nAccessibilityChildBehavior/ignore\n\nAccessibilityChildBehavior/combine\n\nAccessibilityChildBehavior/contain"
  },
  {
    "title": "accessibilityIgnoresInvertColors(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityignoresinvertcolors(_:)",
    "html": "Parameters\nactive\n\nA true value ignores the system Smart Invert setting. A false value follows the system setting.\n\nDiscussion\n\nUse this modifier to suppress Smart Invert in a view that shouldn’t be inverted. Or pass an active argument of false to begin following the Smart Invert setting again when it was previously disabled."
  },
  {
    "title": "accessibilityHint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityhint(_:)-7j3ri",
    "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like “Purchases the item” or “Downloads the attachment”."
  },
  {
    "title": "accessibilityIdentifier(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityidentifier(_:)",
    "html": "Discussion\n\nUse this value for testing. It isn’t visible to the user."
  },
  {
    "title": "accessibilityHint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityhint(_:)-62h47",
    "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like “Purchases the item” or “Downloads the attachment”."
  },
  {
    "title": "accessibilityHeading(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityheading(_:)",
    "html": "Parameters\nlevel\n\nThe heading level to associate with this element from the available AccessibilityHeadingLevel levels.\n\nDiscussion\n\nUse this modifier to set the level of this heading in relation to other headings. The system speaks the level number of levels AccessibilityHeadingLevel/h1 through AccessibilityHeadingLevel/h6 alongside the text.\n\nThe default heading level if you don’t use this modifier is AccessibilityHeadingLevel/unspecified."
  },
  {
    "title": "accessibilityHint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityhint(_:)-9fgnd",
    "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like “Purchases the item” or “Downloads the attachment”.\n\nNote\n\nOn macOS, if the view does not have an action and it has been made into a container with accessibilityElement(children: .contain), this will be used to describe the container. For example, if the container is for a graph, the hint could be “graph”."
  },
  {
    "title": "accessibilityRotor(_:entries:entryID:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:entryid:entrylabel:)-5l6m6",
    "html": "Parameters\nsystemRotor\n\nThe system-provided Rotor that will be overridden by this custom Rotor.\n\nentries\n\nAn array of values that will be used to generate the entries of the Rotor.\n\nentryID\n\nKey path on the entry type that can be used to generate an identifier for the Entry. The identifiers must match up with identifiers in ForEach or explicit id calls within the ScrollView.\n\nentryLabel\n\nKey path on the entry type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to the headings in its vertical stack of messages.\n\n// `messageListItems` is a list of `MessageListItem`s\n// that are either a `Message` or a heading, containing a `subject`\n// and a `uuid`.\n// `headingMessageListItems` is a filtered list of\n// `messageListItems` containing just the headings.\nScrollView {\n    LazyVStack {\n        ForEach(messageListItems) { messageListItem in\n            switch messageListItem {\n                case .heading(let subject):\n                    Text(subject)\n                case .message(let message):\n                    MessageView(message)\n            }\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\n    .heading, entries: headingMessageListItems,\n    entryID: \\.uuid, label: \\.subject\n)\n"
  },
  {
    "title": "accessibilityRotor(_:entries:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:)-2skge",
    "html": "Parameters\nlabelKey\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nContent used to generate Rotor entries. This can include AccessibilityRotorEntry structs, as well as constructs such as if and ForEach.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\") {\n    // Not all the MessageViews are generated at once, the model\n    // knows about all the messages.\n    ForEach(messages) { message in\n        // If the Message is from a VIP, make a Rotor entry for it.\n        if message.isVIP {\n            AccessibilityRotorEntry(message.subject, id: message.id)\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityRotor(_:entries:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:)-5q90i",
    "html": "Parameters\nlabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nContent used to generate Rotor entries. This can include AccessibilityRotorEntry structs, as well as constructs such as if and ForEach.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\") {\n    // Not all the MessageViews are generated at once, the model\n    // knows about all the messages.\n    ForEach(messages) { message in\n        // If the Message is from a VIP, make a Rotor entry for it.\n        if message.isVIP {\n            AccessibilityRotorEntry(message.subject, id: message.id)\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryID:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:entryid:entrylabel:)-ak55",
    "html": "Parameters\nrotorLabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of values that will be used to generate the entries of the Rotor.\n\nentryID\n\nKey path on the entry type that can be used to generate an identifier for the Entry. The identifiers must match up with identifiers in ForEach or explicit id calls within the ScrollView.\n\nentryLabel\n\nKey path on the entry type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Message`s that have a `subject` and a\n// `uuid`. `vipMessages` is a filtered version of that list\n// containing only messages from VIPs.\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages,\n    id: \\.uuid, label: \\.subject)\n"
  },
  {
    "title": "accessibilityRotor(_:entries:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityrotor(_:entries:)-9t7w2",
    "html": "Parameters\nlabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nContent used to generate Rotor entries. This can include AccessibilityRotorEntry structs, as well as constructs such as if and ForEach.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\") {\n    // Not all the MessageViews are generated at once, the model knows\n    // about all the messages.\n    ForEach(messages) { message in\n        // If the Message is from a VIP, make a Rotor entry for it.\n        if message.isVIP {\n            AccessibilityRotorEntry(message.subject, id: message.id)\n        }\n    }\n}\n"
  },
  {
    "title": "previewDisplayName(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/previewdisplayname(_:)",
    "html": "Parameters\nvalue\n\nA name for the preview.\n\nReturn Value\n\nA preview that uses the given name.\n\nDiscussion\n\nApply this modifier to a view inside your PreviewProvider implementation to associate a display name with that view’s preview:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewDisplayName(\"Circle\")\n    }\n}\n\n\nAdd a name when you have multiple previews together in the canvas that you need to tell apart. The default value is nil, in which case Xcode displays a default string."
  },
  {
    "title": "kerning(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/kerning(_:)",
    "html": "Parameters\nkerning\n\nThe spacing to use between individual characters in text. Value of 0 sets the kerning to the system default value.\n\nReturn Value\n\nA view where text has the specified amount of kerning."
  },
  {
    "title": "monospaced(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/monospaced(_:)",
    "html": "Return Value\n\nA view whose child views’ fonts use fixed-width characters, while leaving other characters proportionally spaced.\n\nDiscussion\n\nIf a child view’s base font doesn’t support fixed-width, the font remains unchanged."
  },
  {
    "title": "lineLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/linelimit(_:)-4jmf9",
    "html": "Parameters\nlimit\n\nThe line limit.\n\nDiscussion\n\nUse this modifier to specify a closed range of lines that a Text view or a vertical TextField can occupy. When the text of such views occupies more space than the provided limit, a Text view truncates its content while a TextField becomes scrollable.\n\nForm {\n    TextField(\"Title\", text: $model.title)\n    TextField(\"Notes\", text: $model.notes, axis: .vertical)\n        .lineLimit(1...3)\n}\n"
  },
  {
    "title": "refreshable(action:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/refreshable(action:)",
    "html": "Parameters\naction\n\nAn asynchronous handler that SwiftUI executes when the user requests a refresh. Use this handler to initiate an update of model data displayed in the modified view. Use await in front of any asynchronous calls inside the handler.\n\nReturn Value\n\nA view with a new refresh action in its environment.\n\nDiscussion\n\nApply this modifier to a view to set the EnvironmentValues/refresh value in the view’s environment to a RefreshAction instance that uses the specified action as its handler. Views that detect the presence of the instance can change their appearance to provide a way for the user to execute the handler.\n\nFor example, when you apply this modifier on iOS and iPadOS to a List, the list enables a standard pull-to-refresh gesture that refreshes the list contents. When the user drags the top of the scrollable area downward, the view reveals a progress indicator and executes the specified handler. The indicator remains visible for the duration of the refresh, which runs asynchronously:\n\nList(mailbox.conversations) { conversation in\n    ConversationCell(conversation)\n}\n.refreshable {\n    await mailbox.fetch()\n}\n\n\nYou can add refresh capability to your own views as well. For information on how to do that, see RefreshAction."
  },
  {
    "title": "layoutValue(key:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/layoutvalue(key:value:)",
    "html": "Parameters\nkey\n\nThe type of the key that you want to set a value for. Create the key as a type that conforms to the LayoutValueKey protocol.\n\nvalue\n\nThe value to assign to the key for this view. The value must be of the type that you establish for the key’s associated value when you implement the key’s LayoutValueKey/defaultValue property.\n\nReturn Value\n\nA view that has the specified value for the specified key.\n\nDiscussion\n\nUse this method to set a value for a custom property that you define with LayoutValueKey. For example, if you define a Flexibility key, you can set the key on a Text view using the key’s type and a value:\n\nText(\"Another View\")\n    .layoutValue(key: Flexibility.self, value: 3)\n\n\nFor convenience, you might define a method that does this in an extension to View:\n\nextension View {\n    func layoutFlexibility(_ value: CGFloat?) -> some View {\n        layoutValue(key: Flexibility.self, value: value)\n    }\n}\n\n\nThis method makes the call site easier to read:\n\nText(\"Another View\")\n    .layoutFlexibility(3)\n\n\nIf you perform layout operations in a type that conforms to the Layout protocol, you can read the key’s associated value for each subview of your custom layout type. Do this by indexing the subview’s proxy with the key. For more information, see LayoutValueKey."
  },
  {
    "title": "navigationBarTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbartitle(_:)-7o2yr",
    "html": "Parameters\ntitle\n\nA description of this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nThe example below shows setting the title of the navigation bar using a Text view:\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(Text(\"Today's Flavors\"))\n        }\n    }\n}\n"
  },
  {
    "title": "lineLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/linelimit(_:)-7g99k",
    "html": "Parameters\nlimit\n\nThe line limit.\n\nDiscussion\n\nUse this modifier to specify a partial range of lines that a Text view or a vertical TextField can occupy. When the text of such views occupies less space than the provided limit, that view expands to occupy the minimum number of lines.\n\nForm {\n    TextField(\"Title\", text: $model.title)\n    TextField(\"Notes\", text: $model.notes, axis: .vertical)\n        .lineLimit(3...)\n}\n"
  },
  {
    "title": "lineLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/linelimit(_:)-7ebhg",
    "html": "Parameters\nnumber\n\nThe line limit. If nil, no line limit applies.\n\nReturn Value\n\nA view that limits the number of lines that Text instances display.\n\nDiscussion\n\nUse this modifier to cap the number of lines that an individual text element can display.\n\nThe line limit applies to all Text instances within a hierarchy. For example, an HStack with multiple pieces of text longer than three lines caps each piece of text to three lines rather than capping the total number of lines across the HStack.\n\nIn the example below, the modifier limits the very long line in the Text element to the 2 lines that fit within the view’s bounds:\n\nText(\"This is a long string that demonstrates the effect of SwiftUI's lineLimit(:_) operator.\")\n    .frame(width: 200, height: 200, alignment: .leading)\n    .lineLimit(2)\n"
  },
  {
    "title": "navigationBarTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbartitle(_:)-1e70n",
    "html": "Parameters\ntitle\n\nA title for this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar using a String. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a string:\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    let text = \"Today's Flavors\"\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(text)\n        }\n    }\n}\n"
  },
  {
    "title": "navigationBarTitle(_:displayMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbartitle(_:displaymode:)-58k2c",
    "html": "Parameters\ntitle\n\nA title for this view to display in the navigation bar.\n\ndisplayMode\n\nThe style to use for displaying the navigation bar title.\n\nDiscussion\n\nUse navigationBarTitle(_:displayMode:) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem/TitleDisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a Text view. The navigation bar title’s NavigationBarItem/TitleDisplayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n   let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                \"Pistachio\"]\n   var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(Text(\"Today's Flavors\", displayMode: .inline)\n        }\n    }\n}\n"
  },
  {
    "title": "navigationBarTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbartitle(_:)-7nncu",
    "html": "Parameters\ntitleKey\n\nA key to a localized description of this view to display in the navigation bar.\n\nDiscussion\n\nUse navigationBarTitle(_:) to set the title of the navigation bar using a LocalizedStringKey that will be used to search for a matching localized string in the application’s localizable strings assets.\n\nThis modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, a string constant is used to access a LocalizedStringKey that will be resolved at run time to provide a title for the navigation bar. If the localization key cannot be resolved, the text of the key name will be used as the title text.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(\"Today's Flavors\")\n        }\n    }\n}\n"
  },
  {
    "title": "navigationBarTitle(_:displayMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbartitle(_:displaymode:)-93ls3",
    "html": "Parameters\ntitleKey\n\nA key to a localized description of this view to display in the navigation bar.\n\ndisplayMode\n\nThe style to use for displaying the navigation bar title.\n\nDiscussion\n\nUse navigationBarTitle(_:displayMode:) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem/TitleDisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, text for the navigation bar title is provided using a string. The navigation bar title’s NavigationBarItem/TitleDisplayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(\"Today's Flavors\", displayMode: .inline)\n        }\n    }\n}\n\n\nIf the titleKey can’t be found, the title uses the text of the key name instead."
  },
  {
    "title": "navigationDestination(for:destination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationdestination(for:destination:)",
    "html": "Parameters\ndata\n\nThe type of data that this destination matches.\n\ndestination\n\nA view builder that defines a view to display when the stack’s navigation state contains a value of type data. The closure takes one argument, which is the value of the data to present.\n\nDiscussion\n\nAdd this view modifer to a view inside a NavigationStack to describe the view that the stack displays when presenting a particular kind of data. Use a NavigationLink to present the data. For example, you can present a ColorDetail view for each presentation of a Color instance:\n\nNavigationStack {\n    List {\n        NavigationLink(\"Mint\", value: Color.mint)\n        NavigationLink(\"Pink\", value: Color.pink)\n        NavigationLink(\"Teal\", value: Color.teal)\n    }\n    .navigationDestination(for: Color.self) { color in\n        ColorDetail(color: color)\n    }\n    .navigationTitle(\"Colors\")\n}\n\n\nYou can add more than one navigation destination modifier to the stack if it needs to present more than one kind of data.\n\nDo not put a navigation destination modifier inside a “lazy” container, like List or LazyVStack. These containers create child views only when needed to render on screen. Add the navigation destination modifier outside these containers so that the navigation stack can always see the destination."
  },
  {
    "title": "navigationDocument(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationdocument(_:preview:)-7dya8",
    "html": "Parameters\ndocument\n\nThe transferable content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "navigationBarTitle(_:displayMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbartitle(_:displaymode:)-9oqo6",
    "html": "Parameters\ntitle\n\nA title for this view to display in the navigation bar.\n\ndisplayMode\n\nThe way to display the title.\n\nDiscussion\n\nUse navigationBarTitle(_:displayMode:) to set the title of the navigation bar for this view and specify a display mode for the title from one of the NavigationBarItem.Title.DisplayMode styles. This modifier only takes effect when this view is inside of and visible within a NavigationView.\n\nIn the example below, navigationBarTitle(_:displayMode:) uses a string to provide a title for the navigation bar. Setting the title’s displayMode to .inline places the navigation bar title within the bounds of the navigation bar.\n\nIn the example below, text for the navigation bar title is provided using a string. The navigation bar title’s displayMode is set to .inline which places the navigation bar title in the bounds of the navigation bar.\n\nstruct FlavorView: View {\n    let items = [\"Chocolate\", \"Vanilla\", \"Strawberry\", \"Mint Chip\",\n                 \"Pistachio\"]\n    let title = \"Today's Flavors\"\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) {\n                Text($0)\n            }\n            .navigationBarTitle(title, displayMode: .inline)\n        }\n    }\n}\n\n\n![A screenshot of a navigation bar, showing the title within the bounds of the navigation bar] (SwiftUI-navigationBarTitle-stringProtocol.png)"
  },
  {
    "title": "navigationDestination(isPresented:destination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationdestination(ispresented:destination:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that indicates whether destination is currently presented.\n\ndestination\n\nA view to present.\n\nDiscussion\n\nIn general, favor binding a path to a navigation stack for programmatic navigation. Add this view modifer to a view inside a NavigationStack to programmatically push a single view onto the stack. This is useful for building components that can push an associated view. For example, you can present a ColorDetail view for a particular color:\n\n@State private var showDetails = false\nvar favoriteColor: Color\n\n\nNavigationStack {\n    VStack {\n        Circle()\n            .fill(favoriteColor)\n        Button(\"Show details\") {\n            showDetails = true\n        }\n    }\n    .navigationDestination(isPresented: $showDetails) {\n        ColorDetail(color: favoriteColor)\n    }\n    .navigationTitle(\"My Favorite Color\")\n}\n\n\nDo not put a navigation destination modifier inside a “lazy” container, like List or LazyVStack. These containers create child views only when needed to render on screen. Add the navigation destination modifier outside these containers so that the navigation stack can always see the destination."
  },
  {
    "title": "navigationBarTitleDisplayMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbartitledisplaymode(_:)",
    "html": "Parameters\ndisplayMode\n\nThe style to use for displaying the title."
  },
  {
    "title": "navigationDocument(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationdocument(_:preview:)-88h4",
    "html": "Parameters\ndocument\n\nThe transferable content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "navigationDocument(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationdocument(_:preview:)-92z3x",
    "html": "Parameters\ndocument\n\nThe transferable content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "navigationSplitViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationsplitviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to set.\n\nReturn Value\n\nA view that uses the specified navigation split view style."
  },
  {
    "title": "navigationSplitViewColumnWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationsplitviewcolumnwidth(_:)",
    "html": "Discussion\n\nApply this modifier to the content of a column in a NavigationSplitView to specify a fixed preferred width for the column. Use View/navigationSplitViewColumnWidth(min:ideal:max:) if you need to specify a flexible width.\n\nThe following example shows a three-column navigation split view where the first column has a preferred width of 150 points, and the second column has a flexible, preferred width between 150 and 400 points:\n\nNavigationSplitView {\n    MySidebar()\n        .navigationSplitViewColumnWidth(150)\n} contents: {\n    MyContents()\n        .navigationSplitViewColumnWidth(\n            min: 150, ideal: 200, max: 400)\n} detail: {\n    MyDetail()\n}\n\n\nOnly some platforms enable resizing columns. If you specify a width that the current presentation environment doesn’t support, SwiftUI may use a different width for your column."
  },
  {
    "title": "navigationSplitViewColumnWidth(min:ideal:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationsplitviewcolumnwidth(min:ideal:max:)",
    "html": "Discussion\n\nApply this modifier to the content of a column in a NavigationSplitView to specify a preferred flexible width for the column. Use View/navigationSplitViewColumnWidth(_:) if you need to specify a fixed width.\n\nThe following example shows a three-column navigation split view where the first column has a preferred width of 150 points, and the second column has a flexible, preferred width between 150 and 400 points:\n\nNavigationSplitView {\n    MySidebar()\n        .navigationSplitViewColumnWidth(150)\n} contents: {\n    MyContents()\n        .navigationSplitViewColumnWidth(\n            min: 150, ideal: 200, max: 400)\n} detail: {\n    MyDetail()\n}\n\n\nOnly some platforms enable resizing columns. If you specify a width that the current presentation environment doesn’t support, SwiftUI may use a different width for your column."
  },
  {
    "title": "navigationSubtitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationsubtitle(_:)-7na9z",
    "html": "Parameters\ntitle\n\nThe subtitle to display.\n\nDiscussion\n\nA view’s navigation subtitle is used to provide additional contextual information alongside the navigation title. On macOS, the primary destination’s subtitle is displayed with the navigation title in the titlebar."
  },
  {
    "title": "navigationSubtitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationsubtitle(_:)-4r25d",
    "html": "Parameters\nsubtitle\n\nThe subtitle to display.\n\nDiscussion\n\nA view’s navigation subtitle is used to provide additional contextual information alongside the navigation title. On macOS, the primary destination’s subtitle is displayed with the navigation title in the titlebar."
  },
  {
    "title": "onDisappear(perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondisappear(perform:)",
    "html": "Parameters\naction\n\nThe action to perform. If action is nil, the call has no effect.\n\nReturn Value\n\nA view that triggers action after it disappears.\n\nDiscussion\n\nThe exact moment that SwiftUI calls this method depends on the specific view type that you apply it to, but the action closure doesn’t execute until the view disappears from the interface."
  },
  {
    "title": "previewLayout(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/previewlayout(_:)",
    "html": "Parameters\nvalue\n\nA layout to use for preview.\n\nReturn Value\n\nA preview that uses the given layout.\n\nDiscussion\n\nBy default, previews use the PreviewLayout/device layout, which places the view inside a visual representation of the chosen device. You can instead tell a preview to use a different layout by choosing one of the PreviewLayout values, like PreviewLayout/sizeThatFits:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewLayout(.sizeThatFits)\n    }\n}\n"
  },
  {
    "title": "onChange(of:initial:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onchange(of:initial:_:)-7c77b",
    "html": "Parameters\nvalue\n\nThe value to check against when determining whether to run the closure.\n\ninitial\n\nWhether the action should be run when this view initially appears.\n\naction\n\nA closure to run when the value changes.\n\nReturn Value\n\nA view that fires an action when the specified value changes.\n\nDiscussion\n\nYou can use onChange to trigger a side effect as the result of a value changing, such as an Environment key or a Binding.\n\nThe system may call the action closure on the main actor, so avoid long-running tasks in the closure. If you need to perform such tasks, detach an asynchronous background task.\n\nWhen the value changes, the new version of the closure will be called, so any captured values will have their values from the time that the observed value has its new value. In the following code example, PlayerView calls into its model when playState changes model.\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var playState: PlayState = .paused\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n            Text(episode.showTitle)\n            PlayButton(playState: $playState)\n        }\n        .onChange(of: playState) {\n            model.playStateDidChange(state: playState)\n        }\n    }\n}\n"
  },
  {
    "title": "navigationSubtitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationsubtitle(_:)-1829l",
    "html": "Parameters\nsubtitleKey\n\nThe key to a localized string to display.\n\nDiscussion\n\nA view’s navigation subtitle is used to provide additional contextual information alongside the navigation title. On macOS, the primary destination’s subtitle is displayed with the navigation title in the titlebar."
  },
  {
    "title": "onContinueUserActivity(_:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/oncontinueuseractivity(_:perform:)",
    "html": "Parameters\nactivityType\n\nThe type of activity to handle.\n\naction\n\nA function to call that takes a NSUserActivity object as its parameter when delivering the activity to the scene or window the view is in."
  },
  {
    "title": "onContinuousHover(coordinateSpace:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/oncontinuoushover(coordinatespace:perform:)",
    "html": "Parameters\ncoordinateSpace\n\nThe coordinate space for the location values. Defaults to CoordinateSpace/local.\n\naction\n\nThe action to perform whenever the pointer enters, moves within, or exits the view’s bounds. The action closure passes the HoverPhase/active(_:) phase with the pointer’s coordinates if the pointer is in the view’s bounds; otherwise, it passes HoverPhase/ended.\n\nReturn Value\n\nA view that calls action when the pointer enters, moves within, or exits the view’s bounds.\n\nDiscussion\n\nCall this method to define a region for detecting pointer movement with the size and position of this view. The following example updates hoverLocation and isHovering to be based on the phase provided to the closure:\n\n@State private var hoverLocation: CGPoint = .zero\n@State private var isHovering = false\n\n\nvar body: some View {\n    VStack {\n        Color.red\n            .frame(width: 400, height: 400)\n            .onContinuousHover { phase in\n                switch phase {\n                case .active(let location):\n                    hoverLocation = location\n                    isHovering = true\n                case .ended:\n                    isHovering = false\n                }\n            }\n            .overlay {\n                Rectangle()\n                    .frame(width: 50, height: 50)\n                    .foregroundColor(isHovering ? .green : .blue)\n                    .offset(x: hoverLocation.x, y: hoverLocation.y)\n            }\n    }\n}\n"
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationtitle(_:)-4gj5y",
    "html": "Parameters\ntitleKey\n\nThe key to a localized string to display.\n\nDiscussion\n\nA view’s navigation title is used to visually display the current navigation state of an interface. On iOS and watchOS, when a view is navigated to inside of a navigation view, that view’s title is displayed in the navigation bar. On iPadOS, the primary destination’s navigation title is reflected as the window’s title in the App Switcher. Similarly on macOS, the primary destination’s title is used as the window title in the titlebar, Windows menu and Mission Control.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation title modifiers."
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationtitle(_:)-2acge",
    "html": "Parameters\ntitle\n\nThe string to display.\n\nDiscussion\n\nA view’s navigation title is used to visually display the current navigation state of an interface. On iOS and watchOS, when a view is navigated to inside of a navigation view, that view’s title is displayed in the navigation bar. On iPadOS, the primary destination’s navigation title is reflected as the window’s title in the App Switcher. Similarly on macOS, the primary destination’s title is used as the window title in the titlebar, Windows menu and Mission Control.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation title modifiers."
  },
  {
    "title": "onDrag(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondrag(_:)",
    "html": "Parameters\ndata\n\nA closure that returns a single NSItemProvider that represents the draggable data from this view.\n\nReturn Value\n\nA view that activates this view as the source of a drag and drop operation, beginning with user gesture input.\n\nDiscussion\n\nApplying the onDrag(_:) modifier adds the appropriate gestures for drag and drop to this view. When a drag operation begins, a rendering of this view is generated and used as the preview image."
  },
  {
    "title": "accentColor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accentcolor(_:)",
    "html": "Parameters\naccentColor\n\nThe color to use as an accent color. Set the value to nil to use the inherited accent color.\n\nDiscussion\n\nUse accentColor(_:) when you want to apply a broad theme color to your app’s user interface. Some styles of controls use the accent color as a default tint color.\n\nNote\n\nIn macOS, SwiftUI applies customization of the accent color only if the user chooses Multicolor under General > Accent color in System Preferences.\n\nIn the example below, the outer VStack contains two child views. The first is a button with the default accent color. The second is a VStack that contains a button and a slider, both of which adopt the purple accent color of their containing view. Note that the Text element used as a label alongside the Slider retains its default color.\n\nVStack(spacing: 20) {\n    Button(action: {}) {\n        Text(\"Regular Button\")\n    }\n    VStack {\n        Button(action: {}) {\n            Text(\"Accented Button\")\n        }\n        HStack {\n            Text(\"Accented Slider\")\n            Slider(value: $sliderValue, in: -100...100, step: 0.1)\n        }\n    }\n    .accentColor(.purple)\n}\n"
  },
  {
    "title": "accessibility(identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibility(identifier:)",
    "html": "Discussion\n\nUse this value for testing. It isn’t visible to the user."
  },
  {
    "title": "accessibility(label:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibility(label:)",
    "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn’t display text, like an icon. For example, you could use this method to label a button that plays music with the text “Play”. Don’t include text in the label that repeats information that users already have. For example, don’t use the label “Play button” because a button already has a trait that identifies it as a button."
  },
  {
    "title": "accessibility(value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibility(value:)",
    "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that’s different than the view’s label. For example, for a slider that you label as “Volume” using accessibility(label:), you can provide the current volume setting, like “60%”, using accessibility(value:)."
  },
  {
    "title": "presentationDetents(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationdetents(_:)",
    "html": "Parameters\ndetents\n\nA set of supported detents for the sheet. If you provide more that one detent, people can drag the sheet to resize it.\n\nDiscussion\n\nBy default, sheets support the PresentationDetent/large detent.\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n        }\n    }\n}\n"
  },
  {
    "title": "presentationDragIndicator(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationdragindicator(_:)",
    "html": "Parameters\nvisibility\n\nThe preferred visibility of the drag indicator.\n\nDiscussion\n\nYou can show a drag indicator when it isn’t apparent that a sheet can resize or when the sheet can’t dismiss interactively.\n\nstruct ContentView: View {\n    @State private var showSettings = false\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents([.medium, .large])\n                .presentationDragIndicator(.visible)\n        }\n    }\n}\n"
  },
  {
    "title": "onDrag(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ondrag(_:preview:)",
    "html": "Parameters\ndata\n\nA closure that returns a single NSItemProvider that represents the draggable data from this view.\n\npreview\n\nA View to use as the source for the dragging preview, once the drag operation has begun. The preview is centered over the source view.\n\nReturn Value\n\nA view that activates this view as the source of a drag-and- drop operation, beginning with user gesture input.\n\nDiscussion\n\nApplying the onDrag(_:preview:) modifier adds the appropriate gestures for drag and drop to this view. When a drag operation begins, a rendering of preview is generated and used as the preview image."
  },
  {
    "title": "presentationDetents(_:selection:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/presentationdetents(_:selection:)",
    "html": "Parameters\ndetents\n\nA set of supported detents for the sheet. If you provide more that one detent, people can drag the sheet to resize it.\n\nselection\n\nA Binding to the currently selected detent. Ensure that the value matches one of the detents that you provide for the detents parameter.\n\nDiscussion\n\nBy default, sheets support the PresentationDetent/large detent.\n\nstruct ContentView: View {\n    @State private var showSettings = false\n    @State private var settingsDetent = PresentationDetent.medium\n\n\n    var body: some View {\n        Button(\"View Settings\") {\n            showSettings = true\n        }\n        .sheet(isPresented: $showSettings) {\n            SettingsView()\n                .presentationDetents(\n                    [.medium, .large],\n                    selection: $settingsDetent\n                 )\n        }\n    }\n}\n"
  },
  {
    "title": "listRowSeparatorTint(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listrowseparatortint(_:edges:)",
    "html": "Parameters\ncolor\n\nThe color to use to tint the row separators, or nil to use the default color for the current list style.\n\nedges\n\nThe set of row edges for which the tint applies. The list style might decide to not display certain separators, typically the top edge. The default is VerticalEdge/Set/all.\n\nDiscussion\n\nSeparators can be presented above and below a row. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter for the separator tint.\n\nThe following example shows a simple grouped list whose row separators are tinted based on row-specific data:\n\nList {\n    ForEach(garage.cars) { car in\n        Text(car.model)\n            .listRowSeparatorTint(car.brandColor)\n    }\n}\n.listStyle(.grouped)\n\n\nTo hide a row separators, use View/listRowSeparator(_:edges:). To hide or change the tint color for a section separator, use View/listSectionSeparator(_:edges:) and View/listSectionSeparatorTint(_:edges:)."
  },
  {
    "title": "redacted(reason:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/redacted(reason:)",
    "html": "Discussion\n\nAdding a redaction is an additive process: any redaction provided will be added to the reasons provided by the parent."
  },
  {
    "title": "previewContext(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/previewcontext(_:)",
    "html": "Parameters\nvalue\n\nThe context for the preview; the default is nil."
  },
  {
    "title": "accessibilityAction(named:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityaction(named:_:)-2mq8z",
    "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction(named: \"New Message\") {\n            // Handle action\n        }\n}\n"
  },
  {
    "title": "listSectionSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listsectionspacing(_:)-4agg7",
    "html": "Discussion\n\nPass .default for the default spacing, or use .compact for a compact appearance between sections.\n\nThe following example creates a List with compact spacing between sections:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n.listSectionSpacing(.compact)\n"
  },
  {
    "title": "accessibilityAction(named:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityaction(named:_:)-3kw1p",
    "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction(named: Text(\"New Message\")) {\n            // Handle action\n        }\n}\n"
  },
  {
    "title": "accessibilityActions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityactions(_:)",
    "html": "Discussion\n\nActions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action. For example, this is how a dynamic number of custom action could be added to a view.\n\nvar isDraft: Bool\n\n\nvar body: some View {\n    ContentView()\n        .accessibilityActions {\n            ForEach(actions) { action in\n                Button {\n                    action()\n                } label: {\n                    Text(action.title)\n                }\n            }\n\n\n            if isDraft {\n                Button {\n                    // Handle Delete\n                } label: {\n                    Text(\"Delete\")\n                }\n            }\n        }\n"
  },
  {
    "title": "fullScreenCover(item:onDismiss:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fullscreencover(item:ondismiss:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the sheet. When item is non-nil, the system passes the contents to the modifier’s closure. You display this content in a sheet that you create that the system displays to the user. If item changes, the system dismisses the currently displayed sheet and replaces it with a new one using the same process.\n\nonDismiss\n\nThe closure to execute when dismissing the modal view.\n\ncontent\n\nA closure returning the content of the modal view.\n\nDiscussion\n\nUse this method to display a modal view that covers as much of the screen as possible. In the example below a custom structure — CoverData — provides data for the full-screen view to display in the content closure when the user clicks or taps the “Present Full-Screen Cover With Data” button:\n\nstruct FullScreenCoverItemOnDismissContent: View {\n    @State private var coverData: CoverData?\n\n\n    var body: some View {\n        Button(\"Present Full-Screen Cover With Data\") {\n            coverData = CoverData(body: \"Custom Data\")\n        }\n        .fullScreenCover(item: $coverData,\n                         onDismiss: didDismiss) { details in\n            VStack(spacing: 20) {\n                Text(\"\\(details.body)\")\n            }\n            .onTapGesture {\n                coverData = nil\n            }\n        }\n    }\n\n\n    func didDismiss() {\n        // Handle the dismissing action.\n    }\n\n\n}\n\n\nstruct CoverData: Identifiable {\n    var id: String {\n        return body\n    }\n    let body: String\n}\n"
  },
  {
    "title": "frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
    "html": "Parameters\nminWidth\n\nThe minimum width of the resulting frame.\n\nidealWidth\n\nThe ideal width of the resulting frame.\n\nmaxWidth\n\nThe maximum width of the resulting frame.\n\nminHeight\n\nThe minimum height of the resulting frame.\n\nidealHeight\n\nThe ideal height of the resulting frame.\n\nmaxHeight\n\nThe maximum height of the resulting frame.\n\nalignment\n\nThe alignment of this view inside the resulting frame. Note that most alignment values have no apparent effect when the size of the frame happens to match that of this view.\n\nReturn Value\n\nA view with flexible dimensions given by the call’s non-nil parameters.\n\nDiscussion\n\nAlways specify at least one size characteristic when calling this method. Pass nil or leave out a characteristic to indicate that the frame should adopt this view’s sizing behavior, constrained by the other non-nil arguments.\n\nThe size proposed to this view is the size proposed to the frame, limited by any constraints specified, and with any ideal dimensions specified replacing any corresponding unspecified dimensions in the proposal.\n\nIf no minimum or maximum constraint is specified in a given dimension, the frame adopts the sizing behavior of its child in that dimension. If both constraints are specified in a dimension, the frame unconditionally adopts the size proposed for it, clamped to the constraints. Otherwise, the size of the frame in either dimension is:\n\nIf a minimum constraint is specified and the size proposed for the frame by the parent is less than the size of this view, the proposed size, clamped to that minimum.\n\nIf a maximum constraint is specified and the size proposed for the frame by the parent is greater than the size of this view, the proposed size, clamped to that maximum.\n\nOtherwise, the size of this view."
  },
  {
    "title": "onChange(of:initial:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onchange(of:initial:_:)-1e0we",
    "html": "Parameters\nvalue\n\nThe value to check against when determining whether to run the closure.\n\ninitial\n\nWhether the action should be run when this view initially appears.\n\naction\n\nA closure to run when the value changes.\n\noldValue\n\nThe old value that failed the comparison check (or the initial value when requested).\n\nnewValue\n\nThe new value that failed the comparison check.\n\nReturn Value\n\nA view that fires an action when the specified value changes.\n\nDiscussion\n\nYou can use onChange to trigger a side effect as the result of a value changing, such as an Environment key or a Binding.\n\nThe system may call the action closure on the main actor, so avoid long-running tasks in the closure. If you need to perform such tasks, detach an asynchronous background task.\n\nWhen the value changes, the new version of the closure will be called, so any captured values will have their values from the time that the observed value has its new value. The old and new observed values are passed into the closure. In the following code example, PlayerView passes both the old and new values to the model.\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var playState: PlayState = .paused\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n            Text(episode.showTitle)\n            PlayButton(playState: $playState)\n        }\n        .onChange(of: playState) { oldState, newState in\n            model.playStateDidChange(from: oldState, to: newState)\n        }\n    }\n}\n"
  },
  {
    "title": "listItemTint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listitemtint(_:)-7glxq",
    "html": "Parameters\ntint\n\nThe tint effect to use. Use nil to avoid overriding the inherited tint.\n\nDiscussion\n\nThe containing list’s style applies the tint as appropriate. For example, watchOS uses the tint color for its background platter appearance. Sidebars on iOS and macOS apply the tint color to their Label icons, which otherwise use the accent color by default."
  },
  {
    "title": "listRowInsets(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listrowinsets(_:)",
    "html": "Parameters\ninsets\n\nThe EdgeInsets to apply to the edges of the view.\n\nReturn Value\n\nA view that uses the given edge insets when used as a list cell.\n\nDiscussion\n\nUse listRowInsets(_:) to change the default padding of the content of list items.\n\nIn the example below, the Flavor enumeration provides content for list items. The SwiftUI ForEach structure computes views for each element of the Flavor enumeration and extracts the raw value of each of its elements using the resulting text to create each list row item. The listRowInsets(_:) modifier then changes the edge insets of each row of the list according to the EdgeInsets provided:\n\nstruct ContentView: View {\n    enum Flavor: String, CaseIterable, Identifiable {\n        var id: String { self.rawValue }\n        case vanilla, chocolate, strawberry\n    }\n\n\n    var body: some View {\n        List {\n            ForEach(Flavor.allCases) {\n                Text($0.rawValue)\n                    .listRowInsets(.init(top: 0,\n                                         leading: 25,\n                                         bottom: 0,\n                                         trailing: 0))\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "safeAreaPadding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/safeareapadding(_:)-246i2",
    "html": "Discussion\n\nUse this modifier when you would like to add a fixed amount of space to the safe area a view sees.\n\nScrollView(.horizontal) {\n    HStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nSee the View/safeAreaInset(edge:alignment:spacing:content) modifier for adding to the safe area based on the size of a view."
  },
  {
    "title": "lineLimit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/linelimit(_:)-4cfsc",
    "html": "Parameters\nlimit\n\nThe line limit.\n\nDiscussion\n\nUse this modifier to specify a partial range of lines that a Text view or a vertical TextField can occupy. When the text of such views occupies more space than the provided limit, a Text view truncates its content while a TextField becomes scrollable.\n\nForm {\n    TextField(\"Title\", text: $model.title)\n    TextField(\"Notes\", text: $model.notes, axis: .vertical)\n        .lineLimit(...3)\n}\n\n\nNote\n\nThis modifier is equivalent to the View/lineLimit(_:)-513mb modifier taking just an integer."
  },
  {
    "title": "multilineTextAlignment(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/multilinetextalignment(_:)",
    "html": "Parameters\nalignment\n\nA value that you use to align multiple lines of text within a view.\n\nReturn Value\n\nA view that aligns the lines of multiline Text instances it contains.\n\nDiscussion\n\nUse this modifier to set an alignment for a multiline block of text. For example, the modifier centers the contents of the following Text view:\n\nText(\"This is a block of text that shows up in a text element as multiple lines.\\(\"\\n\") Here we have chosen to center this text.\")\n    .frame(width: 200)\n    .multilineTextAlignment(.center)\n\n\nThe text in the above example spans more than one line because:\n\nThe newline character introduces a line break.\n\nThe frame modifier limits the space available to the text view, and by default a text view wraps lines that don’t fit in the available width. As a result, the text before the explicit line break wraps to three lines, and the text after uses two lines.\n\nThe modifier applies the alignment to the all the lines of text in the view, regardless of why wrapping occurs:\n\nThe modifier has no effect on a Text view that contains only one line of text, because a text view has a width that exactly matches the width of its widest line. If you want to align an entire text view rather than its contents, set the aligment of its container, like a VStack or a frame that you create with the View/frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) modifier.\n\nNote\n\nYou can use this modifier to control the alignment of a Text view that you create with the Text/init(_:style:) initializer to display localized dates and times, including when the view uses only a single line, but only when that view appears in a widget.\n\nThe modifier also affects the content alignment of other text container types, like TextEditor and TextField. In those cases, the modifier sets the alignment even when the view contains only a single line because view’s width isn’t dictated by the width of the text it contains.\n\nThe modifier operates by setting the EnvironmentValues/multilineTextAlignment value in the environment, so it affects all the text containers in the modified view hierarchy. For example, you can apply the modifier to a VStack to configure all the text views inside the stack."
  },
  {
    "title": "navigationBarBackButtonHidden(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbarbackbuttonhidden(_:)",
    "html": "Parameters\nhidesBackButton\n\nA Boolean value that indicates whether to hide the back button. The default value is true.\n\nDiscussion\n\nUse navigationBarBackButtonHidden(_:) to hide the back button for this view.\n\nThis modifier only takes effect when this view is inside of and visible within a NavigationView."
  },
  {
    "title": "renameAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/renameaction(_:)-72t9",
    "html": "Parameters\naction\n\nA closure to run when renaming.\n\nReturn Value\n\nA view that has the specified rename action.\n\nDiscussion\n\nUse this modifier in conjunction with the RenameButton to implement standard rename interactions. A rename button receives its action from the environment. Use this modifier to customize the action provided to the rename button.\n\nstruct RowView: View {\n    @State private var text = \"\"\n    @FocusState private var isFocused: Bool\n\n\n    var body: some View {\n        TextField(text: $item.name) {\n            Text(\"Prompt\")\n        }\n        .focused($isFocused)\n        .contextMenu {\n            RenameButton()\n            // ... your own custom actions\n        }\n        .renameAction { isFocused = true }\n}\n\n\nWhen the user taps the rename button in the context menu, the rename action focuses the text field by setting the isFocused property to true."
  },
  {
    "title": "previewInterfaceOrientation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/previewinterfaceorientation(_:)",
    "html": "Parameters\nvalue\n\nAn orientation to use for preview.\n\nReturn Value\n\nA preview that uses the given orientation.\n\nDiscussion\n\nBy default, device previews appear right side up, using orientation InterfaceOrientation/portrait. You can change the orientation of a preview using one of the values in the InterfaceOrientation structure:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewInterfaceOrientation(.landscapeRight)\n    }\n}\n"
  },
  {
    "title": "navigationDestination(item:destination:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationdestination(item:destination:)",
    "html": "Parameters\nitem\n\nA binding to the data presented, or nil if nothing is currently presented.\n\ndestination\n\nA view builder that defines a view to display when item is not nil.\n\nDiscussion\n\nAdd this view modifer to a view inside a NavigationStack or NavigationSplitView to describe the view that the stack displays when presenting a particular kind of data. Programmatically update the binding to display or remove the view. For example, you can replace the view showing in the detail column of a navigation split view:\n\n@State private var colorShown: Color?\n\n\nNavigationSplitView {\n    List {\n        Button(\"Mint\") { colorShown = .mint }\n        Button(\"Pink\") { colorShown = .pink }\n        Button(\"Teal\") { colorShown = .teal }\n    }\n    .navigationDestination(item: $colorShown) { color in\n        ColorDetail(color: color)\n    }\n} detail: {\n    Text(\"Select a color\")\n}\n\n\nWhen the person using the app taps on the Mint button, the mint color shows in the detail and colorShown gets the value Color.mint. You can reset the navigation split view to show the message “Select a color” by setting colorShown back to nil.\n\nYou can add more than one navigation destination modifier to the stack if it needs to present more than one kind of data.\n\nDo not put a navigation destination modifier inside a “lazy” container, like List or LazyVStack. These containers create child views only when needed to render on screen. Add the navigation destination modifier outside these containers so that the navigation split view can always see the destination."
  },
  {
    "title": "navigationDocument(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationdocument(_:)",
    "html": "Parameters\ndocument\n\nThe URL content associated to the navigation title.\n\npreview\n\nThe preview of the document to use when sharing.\n\nDiscussion\n\nIn iOS, iPadOS, this populates the title menu with a header previewing the document. In macOS, this populates a proxy icon.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation document modifiers."
  },
  {
    "title": "offset(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/offset(x:y:)",
    "html": "Parameters\nx\n\nThe horizontal distance to offset this view.\n\ny\n\nThe vertical distance to offset this view.\n\nReturn Value\n\nA view that offsets this view by x and y.\n\nDiscussion\n\nUse offset(x:y:) to shift the displayed contents by the amount specified in the x and y parameters.\n\nThe original dimensions of the view aren’t changed by offsetting the contents; in the example below the gray border drawn by this view surrounds the original position of the text:\n\nText(\"Offset by passing horizontal & vertical distance\")\n    .border(Color.green)\n    .offset(x: 20, y: 50)\n    .border(Color.gray)\n"
  },
  {
    "title": "navigationViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationviewstyle(_:)",
    "html": "Discussion\n\nUse this modifier to change the appearance and behavior of navigation views. For example, by default, navigation views appear with multiple columns in wider environments, like iPad in landscape orientation:\n\nYou can apply the NavigationViewStyle/stack style to force single-column stack navigation in these environments:\n\nNavigationView {\n    List {\n        NavigationLink(\"Purple\", destination: ColorDetail(color: .purple))\n        NavigationLink(\"Pink\", destination: ColorDetail(color: .pink))\n        NavigationLink(\"Orange\", destination: ColorDetail(color: .orange))\n    }\n    .navigationTitle(\"Colors\")\n\n\n    Text(\"Select a Color\") // A placeholder to show before selection.\n}\n.navigationViewStyle(.stack)\n"
  },
  {
    "title": "onAppear(perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onappear(perform:)",
    "html": "Parameters\naction\n\nThe action to perform. If action is nil, the call has no effect.\n\nReturn Value\n\nA view that triggers action before it appears.\n\nDiscussion\n\nThe exact moment that SwiftUI calls this method depends on the specific view type that you apply it to, but the action closure completes before the first rendered frame appears."
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationtitle(_:)-7s101",
    "html": "Parameters\ntitle\n\nThe text of the title.\n\nDiscussion\n\nIn iOS, iPadOS, and macOS, this allows editing the navigation title when the title is displayed in the toolbar.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation title modifiers."
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationtitle(_:)-hbeh",
    "html": "Parameters\ntitle\n\nThe view to display.\n\nDiscussion\n\nA view’s navigation title is used to visually display the current navigation state of an interface. On iOS and watchOS, when a view is navigated to inside of a navigation view, that view’s title is displayed in the navigation bar. On iPadOS, the primary destination’s navigation title is reflected as the window’s title in the App Switcher. Similarly on macOS, the primary destination’s title is used as the window title in the titlebar, Windows menu and Mission Control."
  },
  {
    "title": "onChange(of:perform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/onchange(of:perform:)",
    "html": "Deprecated\n\nUse `onChange` with a two or zero parameter action closure instead.\n\nParameters\nvalue\n\nThe value to check when determining whether to run the closure. The value must conform to the Equatable protocol.\n\naction\n\nA closure to run when the value changes. The closure takes a newValue parameter that indicates the updated value.\n\nReturn Value\n\nA view that runs an action when the specified value changes.\n\nDiscussion\n\nUse this modifier to run a closure when a value like an Environment value or a Binding changes. For example, you can clear a cache when you notice that the view’s scene moves to the background:\n\nstruct ContentView: View {\n    @Environment(\\.scenePhase) private var scenePhase\n    @StateObject private var cache = DataCache()\n\n\n    var body: some View {\n        MyView()\n            .onChange(of: scenePhase) { newScenePhase in\n                if newScenePhase == .background {\n                    cache.empty()\n                }\n            }\n    }\n}\n\n\nSwiftUI passes the new value into the closure. You can also capture the previous value to compare it to the new value. For example, in the following code example, PlayerView passes both the old and new values to the model.\n\nstruct PlayerView: View {\n    var episode: Episode\n    @State private var playState: PlayState = .paused\n\n\n    var body: some View {\n        VStack {\n            Text(episode.title)\n            Text(episode.showTitle)\n            PlayButton(playState: $playState)\n        }\n        .onChange(of: playState) { [playState] newState in\n            model.playStateDidChange(from: playState, to: newState)\n        }\n    }\n}\n\n\nThe system may call the action closure on the main actor, so avoid long-running tasks in the closure. If you need to perform such tasks, detach an asynchronous background task.\n\nImportant: This modifier is deprecated and has been replaced with new versions that include either zero or two parameters within the closure, unlike this version that includes one parameter. This deprecated version and the new versions behave differently with respect to how they execute the action closure, specifically when the closure captures other values. Using the deprecated API, the closure is run with captured values that represent the “old” state. With the replacement API, the closure is run with captured values that represent the “new” state, which makes it easier to correctly perform updates that rely on supplementary values (that may or may not have changed) in addition to the changed value that triggered the action.\n\nImportant\n\nThis modifier is deprecated and has been replaced with new versions that include either zero or two parameters within the closure, unlike this version that includes one parameter. This deprecated version and the new versions behave differently with respect to how they execute the action closure, specifically when the closure captures other values. Using the deprecated API, the closure is run with captured values that represent the “old” state. With the replacement API, the closure is run with captured values that represent the “new” state, which makes it easier to correctly perform updates that rely on supplementary values (that may or may not have changed) in addition to the changed value that triggered the action."
  },
  {
    "title": "offset(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/offset(_:)",
    "html": "Parameters\noffset\n\nThe distance to offset this view.\n\nReturn Value\n\nA view that offsets this view by offset.\n\nDiscussion\n\nUse offset(_:) to shift the displayed contents by the amount specified in the offset parameter.\n\nThe original dimensions of the view aren’t changed by offsetting the contents; in the example below the gray border drawn by this view surrounds the original position of the text:\n\nText(\"Offset by passing CGSize()\")\n    .border(Color.green)\n    .offset(CGSize(width: 20, height: 25))\n    .border(Color.gray)\n"
  },
  {
    "title": "navigationTitle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationtitle(_:)-rylp",
    "html": "Parameters\ntitle\n\nThe title to display.\n\nDiscussion\n\nA view’s navigation title is used to visually display the current navigation state of an interface. On iOS and watchOS, when a view is navigated to inside of a navigation view, that view’s title is displayed in the navigation bar. On iPadOS, the primary destination’s navigation title is reflected as the window’s title in the App Switcher. Similarly on macOS, the primary destination’s title is used as the window title in the titlebar, Windows menu and Mission Control.\n\nRefer to the doc:Configure-Your-Apps-Navigation-Titles article for more information on navigation title modifiers."
  },
  {
    "title": "accessibilityAction(action:label:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityaction(action:label:)",
    "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction {\n            // Handle action\n        } label: {\n            Label(\"New Message\", systemImage: \"plus\")\n        }\n}\n"
  },
  {
    "title": "accessibilityAction(named:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/accessibilityaction(named:_:)-4stzv",
    "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction(named: \"New Message\") {\n            // Handle action\n        }\n}\n"
  },
  {
    "title": "rotationEffect(_:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/rotationeffect(_:anchor:)",
    "html": "Parameters\nangle\n\nThe angle by which to rotate the view.\n\nanchor\n\nA unit point within the view about which to perform the rotation. The default value is UnitPoint/center.\n\nReturn Value\n\nA view with rotated content.\n\nDiscussion\n\nThis modifier rotates the view’s content around the axis that points out of the xy-plane. It has no effect on the view’s frame. The following code rotates text by 22˚ and then draws a border around the modified view to show that the frame remains unchanged by the rotation modifier:\n\nText(\"Rotation by passing an angle in degrees\")\n    .rotationEffect(.degrees(22))\n    .border(Color.gray)\n"
  },
  {
    "title": "replaceDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/replacedisabled(_:)",
    "html": "Parameters\nisDisabled\n\nA Boolean value that indicates whether text replacement in the find and replace interface is disabled.\n\nReturn Value\n\nA view that disables the replace feature of a find and replace interface.\n\nDiscussion\n\nAdd this modifier to ensure that people can’t activate the replace feature of a find and replace interface for a TextEditor:\n\nTextEditor(text: $text)\n    .replaceDisabled()\n\n\nIf you want to disable both find and replace, use the View/findDisabled(_:) modifier instead.\n\nUsing this modifer also disables the replace feature of a find and replace interface that you present programmatically using the View/findNavigator(isPresented:) method. Be sure to place the disabling modifier closer to the text editor for this to work:\n\nTextEditor(text: $text)\n    .replaceDisabled(isDisabled)\n    .findNavigator(isPresented: $isPresented)\n\n\nIf you apply this modifer at multiple levels of a view hierarchy, the call closest to the text editor takes precedence. For example, people can activate find and replace for the first text editor in the following example, but only find for the second:\n\nVStack {\n    TextEditor(text: $text1)\n        .replaceDisabled(false)\n    TextEditor(text: $text2)\n}\n.replaceDisabled(true)\n"
  },
  {
    "title": "fontWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fontwidth(_:)",
    "html": "Parameters\nwidth\n\nOne of the available font widths. Providing nil removes the effect of any font width modifier applied higher in the view hierarchy.\n\nReturn Value\n\nA view that uses the font width you specify."
  },
  {
    "title": "foregroundStyle(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/foregroundstyle(_:_:)",
    "html": "Parameters\nprimary\n\nThe primary color or pattern to use when filling in the foreground elements. To indicate a specific value, use Color or ShapeStyle/image(_:sourceRect:scale:), or one of the gradient types, like ShapeStyle/linearGradient(colors:startPoint:endPoint:). To set a style that’s relative to the containing view’s style, use one of the semantic styles, like ShapeStyle/primary.\n\nsecondary\n\nThe secondary color or pattern to use when filling in the foreground elements.\n\nReturn Value\n\nA view that uses the given foreground styles.\n\nDiscussion\n\nSwiftUI uses these styles when rendering child views that don’t have an explicit rendering style, like images, text, shapes, and so on.\n\nSymbol images within the view hierarchy use the SymbolRenderingMode/palette rendering mode when you apply this modifier, if you don’t explicitly specify another mode."
  },
  {
    "title": "groupBoxStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/groupboxstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to apply to boxes within this view."
  },
  {
    "title": "gridCellAnchor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/gridcellanchor(_:)",
    "html": "Parameters\nanchor\n\nThe unit point that defines how to align the view within the bounds of its grid cell.\n\nReturn Value\n\nA view that uses the specified anchor point to align its content.\n\nDiscussion\n\nGrids, like stacks and other layout containers, perform most alignment operations using alignment guides. The grid moves the contents of each cell in a row in the y direction until the specified VerticalAlignment guide of each view in the row aligns with the same guide of all the other views in the row. Similarly, the grid aligns the HorizontalAlignment guides of views in a column by adjusting views in the x direction. See the guide types for more information about typical SwiftUI alignment operations.\n\nWhen you use the gridCellAnchor(_:) modifier on a view in a grid, the grid changes to an anchor-based alignment strategy for the associated cell. With anchor alignment, the grid projects a UnitPoint that you specify onto both the view and the cell, and aligns the two projections. For example, consider the following grid:\n\nGrid(horizontalSpacing: 1, verticalSpacing: 1) {\n    GridRow {\n        Color.red.frame(width: 60, height: 60)\n        Color.red.frame(width: 60, height: 60)\n    }\n    GridRow {\n        Color.red.frame(width: 60, height: 60)\n        Color.blue.frame(width: 10, height: 10)\n            .gridCellAnchor(UnitPoint(x: 0.25, y: 0.75))\n    }\n}\n\n\nThe grid creates red reference squares in the first row and column to establish row and column sizes. Without the anchor modifier, the blue marker in the remaining cell would appear at the center of its cell, because of the grid’s default Alignment/center alignment. With the anchor modifier shown in the code above, the grid aligns the one quarter point of the marker with the one quarter point of its cell in the x direction, as measured from the origin at the top left of the cell. The grid also aligns the three quarters point of the marker with the three quarters point of the cell in the y direction:\n\nUnitPoint defines many convenience points that correspond to the typical alignment guides, which you can use as well. For example, you can use UnitPoint/topTrailing to align the top and trailing edges of a view in a cell with the top and trailing edges of the cell:\n\nColor.blue.frame(width: 10, height: 10)\n    .gridCellAnchor(.topTrailing)\n\n\nApplying the anchor-based alignment strategy to a single cell doesn’t affect the alignment strategy that the grid uses on other cells.\n\nAnchor alignment for merged cells\n\nIf you use the View/gridCellColumns(_:) modifier to cause a cell to span more than one column, or if you place a view in a grid outside of a row so that the view spans the entire grid, the grid automatically converts its vertical and horizontal alignment guides to the unit point equivalent for the merged cell, and uses an anchor-based approach for that cell. For example, the following grid places the marker at the center of the merged cell by converting the grid’s default Alignment/center alignment guide to a UnitPoint/center anchor for the blue marker in the merged cell:\n\nGrid(alignment: .center, horizontalSpacing: 1, verticalSpacing: 1) {\n    GridRow {\n        Color.red.frame(width: 60, height: 60)\n        Color.red.frame(width: 60, height: 60)\n        Color.red.frame(width: 60, height: 60)\n    }\n    GridRow {\n        Color.red.frame(width: 60, height: 60)\n        Color.blue.frame(width: 10, height: 10)\n            .gridCellColumns(2)\n    }\n}\n\n\nThe grid makes this conversion in part to avoid ambiguity. Each column has its own horizontal guide, and it isn’t clear which of these a cell that spans multiple columns should align with. Further, in the example above, neither of the center alignment guides for the second or third column would provide the expected behavior, which is to center the marker in the merged cell. Anchor alignment provides this behavior:"
  },
  {
    "title": "listSectionSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listsectionspacing(_:)-20vex",
    "html": "Parameters\nspacing\n\nthe amount of spacing to apply.\n\nDiscussion\n\nThe following example creates a List with 5 pts of spacing between sections:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n.listSectionSpacing(5.0)\n\n\nSpacing can also be specified on a per-section basis. The following example creates a List with compact spacing for its second section:\n\nList {\n    Section(\"Colors\") {\n        Text(\"Blue\")\n        Text(\"Red\")\n    }\n\n\n    Section(\"Borders\") {\n        Text(\"Dashed\")\n        Text(\"Solid\")\n    }\n    .listSectionSpacing(.compact)\n\n\n    Section(\"Shapes\") {\n        Text(\"Square\")\n        Text(\"Circle\")\n    }\n}\n\n\nIf adjacent sections have different spacing value, the smaller value on the shared edge is used. Spacing specified inside the List is preferred over any List-wide value."
  },
  {
    "title": "listRowSeparator(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listrowseparator(_:edges:)",
    "html": "Parameters\nvisibility\n\nThe visibility of this row’s separators.\n\nedges\n\nThe set of row edges for which this preference applies. The list style might already decide to not display separators for some edges, typically the top edge. The default is VerticalEdge/Set/all.\n\nDiscussion\n\nSeparators can be presented above and below a row. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter of the separator visibility.\n\nThe following example shows a simple grouped list whose row separators are hidden:\n\nList {\n    ForEach(garage.cars) { car in\n        Text(car.model)\n            .listRowSeparator(.hidden)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the color of a row separators, use View/listRowSeparatorTint(_:edges:). To hide or change the tint color for a section separators, use View/listSectionSeparator(_:edges:) and View/listSectionSeparatorTint(_:edges:)."
  },
  {
    "title": "lineSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/linespacing(_:)",
    "html": "Parameters\nlineSpacing\n\nThe amount of space between the bottom of one line and the top of the next line in points.\n\nDiscussion\n\nUse lineSpacing(_:) to set the amount of spacing from the bottom of one line to the top of the next for text elements in the view.\n\nIn the Text view in the example below, 10 points separate the bottom of one line to the top of the next as the text field wraps inside this view. Applying lineSpacing(_:) to a view hierarchy applies the line spacing to all text elements contained in the view.\n\nText(\"This is a string in a TextField with 10 point spacing applied between the bottom of one line and the top of the next.\")\n    .frame(width: 200, height: 200, alignment: .leading)\n    .lineSpacing(10)\n"
  },
  {
    "title": "listRowBackground(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listrowbackground(_:)",
    "html": "Parameters\nview\n\nThe View to use as the background behind the list row view.\n\nReturn Value\n\nA list row view with view as its background view.\n\nDiscussion\n\nUse listRowBackground(_:) to place a custom background view behind a list row item.\n\nIn the example below, the Flavor enumeration provides content for list items. The SwiftUI ForEach structure computes views for each element of the Flavor enumeration and extracts the raw value of each of its elements using the resulting text to create each list row item. The listRowBackground(_:) modifier then places the view you supply behind each of the list row items:\n\nstruct ContentView: View {\n    enum Flavor: String, CaseIterable, Identifiable {\n        var id: String { self.rawValue }\n        case vanilla, chocolate, strawberry\n    }\n\n\n    var body: some View {\n        List {\n            ForEach(Flavor.allCases) {\n                Text($0.rawValue)\n                    .listRowBackground(Ellipse()\n                                        .background(Color.clear)\n                                        .foregroundColor(.purple)\n                                        .opacity(0.3)\n                    )\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "listItemTint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listitemtint(_:)-5n9fv",
    "html": "Parameters\ntint\n\nThe color to use to tint the content. Use nil to avoid overriding the inherited tint.\n\nDiscussion\n\nThe containing list’s style applies the tint as appropriate. For example, watchOS uses the tint color for its background platter appearance. Sidebars on iOS and macOS apply the tint color to their Label icons, which otherwise use the accent color by default.\n\nNote\n\nThis modifier is equivalent to using the version of the modifier that takes a ListItemTint value and specifying the tint color in the corresponding ListItemTint/fixed(_:) input."
  },
  {
    "title": "listSectionSeparatorTint(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listsectionseparatortint(_:edges:)",
    "html": "Parameters\ncolor\n\nThe color to use to tint the section separators, or nil to use the default color for the current list style.\n\nedges\n\nThe set of row edges for which the tint applies. The list style might decide to not display certain separators, typically the top edge. The default is VerticalEdge/Set/all.\n\nDiscussion\n\nSeparators can be presented above and below a section. You can specify to which edge this preference should apply.\n\nThis modifier expresses a preference to the containing List. The list style is the final arbiter for the separator tint.\n\nThe following example shows a simple grouped list whose section separators are tinted based on section-specific data:\n\nList {\n    ForEach(garage) { garage in\n        Section(header: Text(garage.location)) {\n            ForEach(garage.cars) { car in\n                Text(car.model)\n                    .listRowSeparatorTint(car.brandColor)\n            }\n        }\n        .listSectionSeparatorTint(\n            garage.cars.last?.brandColor, edges: .bottom)\n    }\n}\n.listStyle(.grouped)\n\n\nTo change the visibility and tint color for a row separator, use View/listRowSeparator(_:edges:) and View/listRowSeparatorTint(_:edges:). To hide a section separator, use View/listSectionSeparator(_:edges:)."
  },
  {
    "title": "listRowSpacing(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/listrowspacing(_:)",
    "html": "Parameters\nspacing\n\nThe spacing value to use. A value of nil uses the default spacing.\n\nDiscussion\n\nThe following example creates a List with 10 pts of spacing between each row:\n\nList {\n    Text(\"Blue\")\n    Text(\"Red\")\n}\n.listRowSpacing(10.0)\n"
  },
  {
    "title": "mask(alignment:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/mask(alignment:_:)",
    "html": "Parameters\nalignment\n\nThe alignment for mask in relation to this view.\n\nmask\n\nThe view whose alpha the rendering system applies to the specified view.\n\nDiscussion\n\nUse mask(_:) when you want to apply the alpha (opacity) value of another view to the current view.\n\nThis example shows an image masked by rectangle with a 10% opacity:\n\nImage(systemName: \"envelope.badge.fill\")\n    .foregroundColor(Color.blue)\n    .font(.system(size: 128, weight: .regular))\n    .mask {\n        Rectangle().opacity(0.1)\n    }\n"
  },
  {
    "title": "luminanceToAlpha() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/luminancetoalpha()",
    "html": "Return Value\n\nA view with the luminance to alpha effect applied.\n\nDiscussion\n\nUse this modifier to create a semitransparent mask, with the opacity of each part of the modified view controlled by the luminance of the corresponding part of the original view. Regions of lower luminance become more transparent, while higher luminance yields greater opacity.\n\nIn particular, the modifier maps the red, green, and blue components of each input pixel’s color to a grayscale value, and that value becomes the alpha component of a black pixel in the output. This modifier produces an effect that’s equivalent to using the feColorMatrix filter primitive with the luminanceToAlpha type attribute, as defined by the Scalable Vector Graphics (SVG) 2 specification.\n\nThe example below defines a Palette view as a series of rectangles, each composed as a Color with a particular white value, and then displays two versions of the palette over a blue background:\n\nstruct Palette: View {\n    var body: some View {\n        HStack(spacing: 0) {\n            ForEach(0..<10) { index in\n                Color(white: Double(index) / Double(9))\n                    .frame(width: 20, height: 40)\n            }\n        }\n    }\n}\n\n\nstruct LuminanceToAlphaExample: View {\n    var body: some View {\n        VStack(spacing: 20) {\n            Palette()\n\n\n            Palette()\n                .luminanceToAlpha()\n        }\n        .padding()\n        .background(.blue)\n    }\n}\n\n\nThe unmodified version of the palette contains rectangles that range from solid black to solid white, thus with increasing luminance. The second version of the palette, which has the luminanceToAlpha() modifier applied, allows the background to show through in an amount that corresponds inversely to the luminance of the input."
  },
  {
    "title": "matchedGeometryEffect(id:in:properties:anchor:isSource:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/matchedgeometryeffect(id:in:properties:anchor:issource:)",
    "html": "Parameters\nid\n\nThe identifier, often derived from the identifier of the data being displayed by the view.\n\nnamespace\n\nThe namespace in which defines the id. New namespaces are created by adding an @Namespace variable to a View type and reading its value in the view’s body method.\n\nproperties\n\nThe properties to copy from the source view.\n\nanchor\n\nThe relative location in the view used to produce its shared position value.\n\nisSource\n\nTrue if the view should be used as the source of geometry for other views in the group.\n\nReturn Value\n\nA new view that defines an entry in the global database of views synchronizing their geometry.\n\nDiscussion\n\nThis method sets the geometry of each view in the group from the inserted view with isSource = true (known as the “source” view), updating the values marked by properties.\n\nIf inserting a view in the same transaction that another view with the same key is removed, the system will interpolate their frame rectangles in window space to make it appear that there is a single view moving from its old position to its new position. The usual transition mechanisms define how each of the two views is rendered during the transition (e.g. fade in/out, scale, etc), the matchedGeometryEffect() modifier only arranges for the geometry of the views to be linked, not their rendering.\n\nIf the number of currently-inserted views in the group with isSource = true is not exactly one results are undefined, due to it not being clear which is the source view."
  },
  {
    "title": "menuActionDismissBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/menuactiondismissbehavior(_:)",
    "html": "Parameters\ndismissal\n\nThe menu action dismissal behavior to apply.\n\nReturn Value\n\nA view that has the specified menu dismissal behavior.\n\nDiscussion\n\nUse this modifier to control the dismissal behavior of a menu. In the example below, the menu doesn’t dismiss after someone chooses either the increase or decrease action:\n\nMenu(\"Font size\") {\n    Button(action: increase) {\n        Label(\"Increase\", systemImage: \"plus.magnifyingglass\")\n    }\n    .menuActionDismissBehavior(.disabled)\n\n\n    Button(\"Reset\", action: reset)\n\n\n    Button(action: decrease) {\n        Label(\"Decrease\", systemImage: \"minus.magnifyingglass\")\n    }\n    .menuActionDismissBehavior(.disabled)\n}\n\n\nYou can use this modifier on any controls that present a menu, like a Picker that uses the PickerStyle/menu style or a ControlGroup. For example, the code below creates a picker that disables dismissal when someone selects one of the options:\n\nPicker(\"Flavor\", selection: $selectedFlavor) {\n    ForEach(Flavor.allCases) { flavor in\n        Text(flavor.rawValue.capitalized)\n            .tag(flavor)\n    }\n}\n.pickerStyle(.menu)\n.menuActionDismissBehavior(.disabled)\n\n\nYou can also use this modifier on context menus. The example below creates a context menu that stays presented after someone selects an action to run:\n\nText(\"Favorite Card Suit\")\n    .padding()\n    .contextMenu {\n        Button(\"♥️ - Hearts\", action: increaseHeartsCount)\n        Button(\"♣️ - Clubs\", action: increaseClubsCount)\n        Button(\"♠️ - Spades\", action: increaseSpadesCount)\n        Button(\"♦️ - Diamonds\", action: increaseDiamondsCount)\n    }\n    .menuActionDismissBehavior(.disabled)\n"
  },
  {
    "title": "menuOrder(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/menuorder(_:)",
    "html": "Parameters\norder\n\nThe menu item ordering strategy to apply.\n\nReturn Value\n\nA view that uses the specified menu ordering strategy.\n\nDiscussion\n\nUse this modifier to override the default menu order. On supported platforms, MenuOrder/priority order keeps the first items closer to the user’s point of interaction, whereas MenuOrder/fixed order always orders items from top to bottom.\n\nOn iOS, the MenuOrder/automatic order resolves to MenuOrder/fixed for menus presented within scrollable content. Pickers that use the PickerStyle/menu style also default to MenuOrder/fixed order. In all other cases, menus default to MenuOrder/priority order.\n\nOn macOS, tvOS and watchOS, the MenuOrder/automatic order always resolves to MenuOrder/fixed order.\n\nThe following example creates a menu that presents its content in a fixed order from top to bottom:\n\nMenu {\n    Button(\"Select\", action: selectFolders)\n    Button(\"New Folder\", action: createFolder)\n    Picker(\"Appearance\", selection: $appearance) {\n        Label(\"Icons\", systemImage: \"square.grid.2x2\").tag(Appearance.icons)\n        Label(\"List\", systemImage: \"list.bullet\").tag(Appearance.list)\n    }\n} label: {\n    Label(\"Settings\", systemImage: \"ellipsis.circle\")\n}\n.menuOrder(.fixed)\n\n\nYou can use this modifier on controls that present a menu. For example, the code below creates a Picker using the PickerStyle/menu style with a priority-based order:\n\nPicker(\"Flavor\", selection: $selectedFlavor) {\n    Text(\"Chocolate\").tag(Flavor.chocolate)\n    Text(\"Vanilla\").tag(Flavor.vanilla)\n    Text(\"Strawberry\").tag(Flavor.strawberry)\n}\n.pickerStyle(.menu)\n.menuOrder(.priority)\n\n\nYou can also use this modifier on context menus. The example below creates a context menu that presents its content in a fixed order:\n\nText(\"Favorite Card Suit\")\n    .padding()\n    .contextMenu {\n        Button(\"♥️ - Hearts\", action: selectHearts)\n        Button(\"♣️ - Clubs\", action: selectClubs)\n        Button(\"♠️ - Spades\", action: selectSpades)\n        Button(\"♦️ - Diamonds\", action: selectDiamonds)\n    }\n    .menuOrder(.fixed)\n\n\nThe modifier has no effect when applied to a subsection or submenu of a menu."
  },
  {
    "title": "menuStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/menustyle(_:)",
    "html": "Discussion\n\nTo set a specific style for all menu instances within a view, use the menuStyle(_:) modifier:\n\nMenu(\"PDF\") {\n    Button(\"Open in Preview\", action: openInPreview)\n    Button(\"Save as PDF\", action: saveAsPDF)\n}\n.menuStyle(ButtonMenuStyle())\n"
  },
  {
    "title": "minimumScaleFactor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/minimumscalefactor(_:)",
    "html": "Parameters\nfactor\n\nA fraction between 0 and 1 (inclusive) you use to specify the minimum amount of text scaling that this view permits.\n\nReturn Value\n\nA view that limits the amount of text downscaling.\n\nDiscussion\n\nUse the minimumScaleFactor(_:) modifier if the text you place in a view doesn’t fit and it’s okay if the text shrinks to accommodate. For example, a label with a minimum scale factor of 0.5 draws its text in a font size as small as half of the actual font if needed.\n\nIn the example below, the HStack contains a Text label with a line limit of 1, that is next to a TextField. To allow the label to fit into the available space, the minimumScaleFactor(_:) modifier shrinks the text as needed to fit into the available space.\n\nHStack {\n    Text(\"This is a long label that will be scaled to fit:\")\n        .lineLimit(1)\n        .minimumScaleFactor(0.5)\n    TextField(\"My Long Text Field\", text: $myTextField)\n}\n"
  },
  {
    "title": "mask(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/mask(_:)",
    "html": "Parameters\nmask\n\nThe view whose alpha the rendering system applies to the specified view.\n\nDiscussion\n\nUse mask(_:) when you want to apply the alpha (opacity) value of another view to the current view.\n\nThis example shows an image masked by rectangle with a 10% opacity:\n\nImage(systemName: \"envelope.badge.fill\")\n    .foregroundColor(Color.blue)\n    .font(.system(size: 128, weight: .regular))\n    .mask(Rectangle().opacity(0.1))\n"
  },
  {
    "title": "menuIndicator(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/menuindicator(_:)",
    "html": "Parameters\nvisibility\n\nThe menu indicator visibility to apply.\n\nDiscussion\n\nUse this modifier to override the default menu indicator visibility for controls in this view. For example, the code below creates a menu without an indicator:\n\nMenu {\n    ForEach(history , id: \\.self) { historyItem in\n        Button(historyItem.title) {\n            self.openURL(historyItem.url)\n        }\n    }\n} label: {\n    Label(\"Back\", systemImage: \"chevron.backward\")\n        .labelStyle(.iconOnly)\n} primaryAction: {\n    if let last = history.last {\n        self.openURL(last.url)\n    }\n}\n.menuIndicator(.hidden)\n\n\nNote\n\nOn tvOS, the standard button styles do not include a menu indicator, so this modifier will have no effect when using a built-in button style. You can implement an indicator in your own ButtonStyle implementation by checking the value of the menuIndicatorVisibility environment value."
  },
  {
    "title": "modifier(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/modifier(_:)",
    "html": "Parameters\nmodifier\n\nThe modifier to apply to this view.\n\nDiscussion\n\nUse this modifier to combine a View and a ViewModifier, to create a new view. For example, if you create a view modifier for a new kind of caption with blue text surrounded by a rounded rectangle:\n\nstruct BorderedCaption: ViewModifier {\n    func body(content: Content) -> some View {\n        content\n            .font(.caption2)\n            .padding(10)\n            .overlay(\n                RoundedRectangle(cornerRadius: 15)\n                    .stroke(lineWidth: 1)\n            )\n            .foregroundColor(Color.blue)\n    }\n}\n\n\nYou can use modifier(_:) to extend View to create new modifier for applying the BorderedCaption defined above:\n\nextension View {\n    func borderedCaption() -> some View {\n        modifier(BorderedCaption())\n    }\n}\n\n\nThen you can apply the bordered caption to any view:\n\nImage(systemName: \"bus\")\n    .resizable()\n    .frame(width:50, height:50)\nText(\"Downtown Bus\")\n    .borderedCaption()\n"
  },
  {
    "title": "keyboardShortcut(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/keyboardshortcut(_:)-1sld",
    "html": "Discussion\n\nPressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.\n\nThe target of a keyboard shortcut is resolved in a leading-to-trailing traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\n\nIf multiple controls are associated with the same shortcut, the first one found is used. If the provided shortcut is nil, the modifier will have no effect."
  },
  {
    "title": "keyboardShortcut(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/keyboardshortcut(_:)-po3s",
    "html": "Discussion\n\nPressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.\n\nThe target of a keyboard shortcut is resolved in a leading-to-trailing traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\n\nIf multiple controls are associated with the same shortcut, the first one found is used."
  },
  {
    "title": "keyframeAnimator(initialValue:trigger:content:keyframes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/keyframeanimator(initialvalue:trigger:content:keyframes:)",
    "html": "Parameters\ninitialValue\n\nThe initial value that the keyframes will animate from.\n\ntrigger\n\nA value to observe for changes.\n\ncontent\n\nA view builder closure that takes two parameters. The first parameter is a proxy value representing the modified view. The second parameter is the interpolated value generated by the keyframes.\n\nkeyframes\n\nKeyframes defining how the value changes over time. The current value of the animator is the single argument, which is equal to initialValue when the view first appears, then is equal to the end value of the previous keyframe animation on subsequent calls.\n\nDiscussion\n\nNote that the content closure will be updated on every frame while animating, so avoid performing any expensive operations directly within content.\n\nIf the trigger value changes while animating, the keyframes closure will be called with the current interpolated value, and the keyframes that you return define a new animation that replaces the old one. The previous velocity will be preserved, so cubic or spring keyframes will maintain continuity from the previous animation if they do not specify a custom initial velocity.\n\nWhen a keyframe animation finishes, the animator will remain at the end value, which becomes the initial value for the next animation."
  },
  {
    "title": "keyframeAnimator(initialValue:repeating:content:keyframes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/keyframeanimator(initialvalue:repeating:content:keyframes:)",
    "html": "Parameters\ninitialValue\n\nThe initial value that the keyframes will animate from.\n\nrepeating\n\nWhether the keyframes are currently repeating. If false, the value at the beginning of the keyframe timeline will be provided to the content closure.\n\ncontent\n\nA view builder closure that takes two parameters. The first parameter is a proxy value representing the modified view. The second parameter is the interpolated value generated by the keyframes.\n\nkeyframes\n\nKeyframes defining how the value changes over time. The current value of the animator is the single argument, which is equal to initialValue when the view first appears, then is equal to the end value of the previous keyframe animation on subsequent calls.\n\nDiscussion\n\nNote that the content closure will be updated on every frame while animating, so avoid performing any expensive operations directly within content."
  },
  {
    "title": "keyboardShortcut(_:modifiers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/keyboardshortcut(_:modifiers:)",
    "html": "Discussion\n\nPressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.\n\nThe target of a keyboard shortcut is resolved in a leading-to-trailing, depth-first traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\n\nIf multiple controls are associated with the same shortcut, the first one found is used.\n\nThe default localization configuration is set to KeyboardShortcut/Localization-swift.struct/automatic."
  },
  {
    "title": "keyboardShortcut(_:modifiers:localization:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/keyboardshortcut(_:modifiers:localization:)",
    "html": "Discussion\n\nPressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.\n\nThe target of a keyboard shortcut is resolved in a leading-to-trailing, depth-first traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.\n\nIf multiple controls are associated with the same shortcut, the first one found is used.\n\nLocalization\n\nProvide a localization value to specify how this shortcut should be localized. Given that key is always defined in relation to the US-English keyboard layout, it might be hard to reach on different international layouts. For example the shortcut ⌘[ works well for the US layout but is hard to reach for German users, where [ is available by pressing ⌥5, making users type ⌥⌘5. The automatic keyboard shortcut remapping re-assigns the shortcut to an appropriate replacement, ⌘Ö in this case.\n\nCertain shortcuts carry information about directionality. For instance, ⌘[ can reveal a previous view. Following the layout direction of the UI, this shortcut will be automatically mirrored to ⌘]. However, this does not apply to items such as “Align Left ⌘{”, which will be “left” independently of the layout direction. When the shortcut shouldn’t follow the directionality of the UI, but rather be the same in both right-to-left and left-to-right directions, using KeyboardShortcut/Localization-swift.struct/withoutMirroring will prevent the system from flipping it.\n\nvar body: some Commands {\n    CommandMenu(\"Card\") {\n        Button(\"Align Left\") { ... }\n            .keyboardShortcut(\"{\",\n                 modifiers: .option,\n                 localization: .withoutMirroring)\n        Button(\"Align Right\") { ... }\n            .keyboardShortcut(\"}\",\n                 modifiers: .option,\n                 localization: .withoutMirroring)\n    }\n}\n\n\nLastly, providing the option KeyboardShortcut/Localization-swift.struct/custom disables the automatic localization for this shortcut to tell the system that internationalization is taken care of in a different way."
  },
  {
    "title": "keyboardType(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/keyboardtype(_:)",
    "html": "Parameters\ntype\n\nOne of the keyboard types defined in the UIKeyboardType enumeration.\n\nDiscussion\n\nUse keyboardType(_:) to specify the keyboard type to use for text entry. A number of different keyboard types are available to meet specialized input needs, such as entering email addresses or phone numbers.\n\nThe example below presents a TextField to input an email address. Setting the text field’s keyboard type to .emailAddress ensures the user can only enter correctly formatted email addresses.\n\nTextField(\"someone@example.com\", text: $emailAddress)\n    .keyboardType(.emailAddress)\n\n\nThere are several different kinds of specialized keyboard types available though the UIKeyboardType enumeration. To specify the default system keyboard type, use .default."
  },
  {
    "title": "monospacedDigit() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/monospaceddigit()",
    "html": "Return Value\n\nA view whose child views’ fonts use fixed-width numeric characters, while leaving other characters proportionally spaced.\n\nDiscussion\n\nUsing fixed-width digits allows you to easily align numbers of the same size in a table-like arrangement. This feature is also known as “tabular figures” or “tabular numbers.”\n\nThis modifier only affects numeric characters, and leaves all other characters unchanged.\n\nThe following example shows the effect of monospacedDigit() on multiple child views. The example consists of two VStack views inside an HStack. Each VStack contains two Button views, with the second VStack applying the monospacedDigit() modifier to its contents. As a result, the digits in the buttons in the trailing VStack are the same width, which in turn gives the buttons equal widths.\n\nvar body: some View {\n    HStack(alignment: .top) {\n        VStack(alignment: .leading) {\n            Button(\"Delete 111 messages\") {}\n            Button(\"Delete 222 messages\") {}\n        }\n        VStack(alignment: .leading) {\n            Button(\"Delete 111 messages\") {}\n            Button(\"Delete 222 messages\") {}\n        }\n        .monospacedDigit()\n    }\n    .padding()\n    .navigationTitle(\"monospacedDigit() Child Views\")\n}\n\n\nIf a child view’s base font doesn’t support fixed-width digits, the font remains unchanged."
  },
  {
    "title": "navigationBarHidden(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/navigationbarhidden(_:)",
    "html": "Parameters\nhidden\n\nA Boolean value that indicates whether to hide the navigation bar.\n\nDiscussion\n\nUse navigationBarHidden(_:) to hide the navigation bar. This modifier only takes effect when this view is inside of and visible within a NavigationView."
  },
  {
    "title": "interactionActivityTrackingTag(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/interactionactivitytrackingtag(_:)",
    "html": "Parameters\ntag\n\nThe tag used to track user interactions hosted by this view as activities.\n\nReturn Value\n\nA view that uses a tracking tag.\n\nDiscussion\n\nThe following example tracks the scrolling activity of a List:\n\nList {\n    Section(\"Today\") {\n        ForEach(messageStore.today) { message in\n            Text(message.title)\n        }\n    }\n}\n.interactionActivityTrackingTag(\"MessagesList\")\n\n\nThe resolved activity tracking tag is additive, so using the modifier across the view hierarchy builds the tag from top to bottom. The example below shows a hierarchical usage of this modifier with the resulting tag Home-Feed:\n\nvar body: some View {\n    Home()\n        .interactionActivityTrackingTag(\"Home\")\n}\n\n\nstruct Home: View {\n    var body: some View {\n        List {\n            Text(\"A List Item\")\n            Text(\"A Second List Item\")\n            Text(\"A Third List Item\")\n        }\n        .interactionActivityTrackingTag(\"Feed\")\n    }\n}\n"
  },
  {
    "title": "privacySensitive(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/privacysensitive(_:)",
    "html": "Discussion\n\nSwiftUI redacts views marked with this modifier when you apply the RedactionReasons/privacy redaction reason.\n\nstruct BankAccountView: View {\n    var body: some View {\n        VStack {\n            Text(\"Account #\")\n\n\n            Text(accountNumber)\n                .font(.headline)\n                .privacySensitive() // Hide only the account number.\n        }\n    }\n}\n"
  },
  {
    "title": "previewLayout(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/previewlayout(_:)",
    "html": "Parameters\nvalue\n\nA layout to use for preview.\n\nReturn Value\n\nA preview that uses the given layout.\n\nDiscussion\n\nBy default, previews use the PreviewLayout/device layout, which places the view inside a visual representation of the chosen device. You can instead tell a preview to use a different layout by choosing one of the PreviewLayout values, like PreviewLayout/sizeThatFits:\n\nstruct CircleImage_Previews: PreviewProvider {\n    static var previews: some View {\n        CircleImage()\n            .previewLayout(.sizeThatFits)\n    }\n}\n"
  },
  {
    "title": "projectionEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/projectioneffect(_:)",
    "html": "Parameters\ntransform\n\nA ProjectionTransform to apply to the view.\n\nDiscussion\n\nUse projectionEffect(_:) to apply a 3D transformation to the view.\n\nThe example below rotates the text 30˚ around the z axis, which is the axis pointing out of the screen:\n\n// This transform represents a 30˚ rotation around the z axis.\nlet transform = CATransform3DMakeRotation(\n    -30 * (.pi / 180), 0.0, 0.0, 1.0)\n\n\nText(\"Projection effects using transforms\")\n    .projectionEffect(.init(transform))\n    .border(Color.gray)\n"
  },
  {
    "title": "safeAreaInset(edge:alignment:spacing:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/safeareainset(edge:alignment:spacing:content:)-9g4qs",
    "html": "Parameters\nedge\n\nThe horizontal edge of the view to inset by the width of content, to make space for content.\n\nspacing\n\nExtra distance placed between the two views, or nil to use the default amount of spacing.\n\nalignment\n\nThe alignment guide used to position content vertically.\n\ncontent\n\nA view builder function providing the view to display in the inset space of the modified view.\n\nReturn Value\n\nA new view that displays content beside the modified view, making space for the content view by horizontally insetting the modified view.\n\nDiscussion\n\nThe content view is anchored to the specified horizontal edge in the parent view, aligning its vertical axis to the specified alignment guide. The modified view is inset by the width of content, from edge, with its safe area increased by the same amount.\n\nstruct ScrollableViewWithSideBar: View {\n    var body: some View {\n        ScrollView {\n            ScrolledContent()\n        }\n        .safeAreaInset(edge: .leading, spacing: 0) {\n            SideBarContent()\n        }\n    }\n}\n"
  },
  {
    "title": "progressViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/progressviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe progress view style to use for this view.\n\nDiscussion\n\nFor example, the following code creates a progress view that uses the “circular” style:\n\nProgressView()\n    .progressViewStyle(.circular)\n"
  },
  {
    "title": "focusedSceneValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedscenevalue(_:_:)-6e6bm",
    "html": "Parameters\nkeyPath\n\nThe key path to associate value with when adding it to the existing table of published focus values.\n\nvalue\n\nThe focus value to publish.\n\nReturn Value\n\nA modified representation of this view.\n\nDiscussion\n\nUse this method instead of View/focusedValue(_:_:) for values that must be visible regardless of where focus is located in the active scene. For example, if an app needs a command for moving focus to a particular text field in the sidebar, it could use this modifier to publish a button action that’s visible to command views as long as the scene is active, and regardless of where focus happens to be in it.\n\nstruct Sidebar: View {\n    @FocusState var isFiltering: Bool\n\n\n    var body: some View {\n        VStack {\n            TextField(...)\n                .focused(when: $isFiltering)\n                .focusedSceneValue(\\.filterAction) {\n                    isFiltering = true\n                }\n        }\n    }\n}\n\n\nstruct NavigationCommands: Commands {\n    @FocusedValue(\\.filterAction) var filterAction\n\n\n    var body: some Commands {\n        CommandMenu(\"Navigate\") {\n            Button(\"Filter in Sidebar\") {\n                filterAction?()\n            }\n        }\n        .disabled(filterAction == nil)\n    }\n}\n\n\nstruct FilterActionKey: FocusedValuesKey {\n    typealias Value = () -> Void\n}\n\n\nextension FocusedValues {\n    var filterAction: (() -> Void)? {\n        get { self[FilterActionKey.self] }\n        set { self[FilterActionKey.self] = newValue }\n    }\n}\n"
  },
  {
    "title": "safeAreaPadding(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/safeareapadding(_:_:)",
    "html": "Discussion\n\nUse this modifier when you would like to add a fixed amount of space to the safe area a view sees.\n\nScrollView(.horizontal) {\n    HStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nSee the View/safeAreaInset(edge:alignment:spacing:content) modifier for adding to the safe area based on the size of a view."
  },
  {
    "title": "redacted(reason:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/redacted(reason:)",
    "html": "Discussion\n\nAdding a redaction is an additive process: any redaction provided will be added to the reasons provided by the parent."
  },
  {
    "title": "safeAreaPadding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/safeareapadding(_:)-8p65q",
    "html": "Discussion\n\nUse this modifier when you would like to add a fixed amount of space to the safe area a view sees.\n\nScrollView(.horizontal) {\n    HStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nSee the View/safeAreaInset(edge:alignment:spacing:content) modifier for adding to the safe area based on the size of a view."
  },
  {
    "title": "invalidatableContent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/invalidatablecontent(_:)",
    "html": "Parameters\ninvalidatable\n\nWhether the receiver content might be invalidated.\n\nDiscussion\n\nUse this modifier to annotate views that display values that are derived from the current state of your data and might be invalidated in response of, for example, user interaction.\n\nThe view will change its appearance when RedactionReasons.invalidated is present in the environment.\n\nIn an interactive widget a view is invalidated from the moment the user interacts with a control on the widget to the moment when a new timeline update has been presented."
  },
  {
    "title": "lineLimit(_:reservesSpace:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/linelimit(_:reservesspace:)",
    "html": "Parameters\nlimit\n\nThe line limit.\n\nreservesSpace\n\nWhether text reserves space so that it always occupies the height required to display the specified number of lines.\n\nDiscussion\n\nUse this modifier to specify a limit to the lines that a Text or a vertical TextField may occupy. If passed a value of true for the reservesSpace parameter, and the text of such views occupies less space than the provided limit, that view expands to occupy the minimum number of lines. When the text occupies more space than the provided limit, a Text view truncates its content while a TextField becomes scrollable.\n\nGroupBox {\n    Text(\"Title\")\n        .font(.headline)\n        .lineLimit(2, reservesSpace: true)\n    Text(\"Subtitle\")\n        .font(.subheadline)\n        .lineLimit(4, reservesSpace: true)\n}\n"
  },
  {
    "title": "safeAreaPadding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/safeareapadding(_:)-5idki",
    "html": "Discussion\n\nUse this modifier when you would like to add a fixed amount of space to the safe area a view sees.\n\nScrollView(.horizontal) {\n    HStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nSee the View/safeAreaInset(edge:alignment:spacing:content) modifier for adding to the safe area based on the size of a view."
  },
  {
    "title": "rotation3DEffect(_:axis:anchor:anchorZ:perspective:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
    "html": "Parameters\nangle\n\nThe angle by which to rotate the view’s content.\n\naxis\n\nThe axis of rotation, specified as a tuple with named elements for each of the three spatial dimensions.\n\nanchor\n\nA two dimensional unit point within the view about which to perform the rotation. The default value is UnitPoint/center.\n\nanchorZ\n\nThe location on the z-axis around which to rotate the content. The default is 0.\n\nperspective\n\nThe relative vanishing point for the rotation. The default is 1.\n\nReturn Value\n\nA view with rotated content.\n\nDiscussion\n\nUse this method to create the effect of rotating a view in three dimensions around a specified axis of rotation. The modifier projects the rotated content onto the original view’s plane. Use the perspective value to control the renderer’s vanishing point. The following example creates the appearance of rotating text 45˚ about the y-axis:\n\nText(\"Rotation by passing an angle in degrees\")\n    .rotation3DEffect(\n        .degrees(45),\n        axis: (x: 0.0, y: 1.0, z: 0.0),\n        anchor: .center,\n        anchorZ: 0,\n        perspective: 1)\n    .border(Color.gray)\n\n\nImportant\n\nIn visionOS, create this effect with perspectiveRotationEffect(_:axis:anchor:anchorZ:perspective:) instead. To truly rotate a view in three dimensions, use a 3D rotation modifier without a perspective input like rotation3DEffect(_:axis:anchor:)-8vi88."
  },
  {
    "title": "replaceDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/replacedisabled(_:)",
    "html": "Parameters\nisDisabled\n\nA Boolean value that indicates whether text replacement in the find and replace interface is disabled.\n\nReturn Value\n\nA view that disables the replace feature of a find and replace interface.\n\nDiscussion\n\nAdd this modifier to ensure that people can’t activate the replace feature of a find and replace interface for a TextEditor:\n\nTextEditor(text: $text)\n    .replaceDisabled()\n\n\nIf you want to disable both find and replace, use the View/findDisabled(_:) modifier instead.\n\nUsing this modifer also disables the replace feature of a find and replace interface that you present programmatically using the View/findNavigator(isPresented:) method. Be sure to place the disabling modifier closer to the text editor for this to work:\n\nTextEditor(text: $text)\n    .replaceDisabled(isDisabled)\n    .findNavigator(isPresented: $isPresented)\n\n\nIf you apply this modifer at multiple levels of a view hierarchy, the call closest to the text editor takes precedence. For example, people can activate find and replace for the first text editor in the following example, but only find for the second:\n\nVStack {\n    TextEditor(text: $text1)\n        .replaceDisabled(false)\n    TextEditor(text: $text2)\n}\n.replaceDisabled(true)\n"
  },
  {
    "title": "safeAreaInset(edge:alignment:spacing:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/safeareainset(edge:alignment:spacing:content:)-6lq7i",
    "html": "Parameters\nedge\n\nThe vertical edge of the view to inset by the height of content, to make space for content.\n\nspacing\n\nExtra distance placed between the two views, or nil to use the default amount of spacing.\n\nalignment\n\nThe alignment guide used to position content horizontally.\n\ncontent\n\nA view builder function providing the view to display in the inset space of the modified view.\n\nReturn Value\n\nA new view that displays both content above or below the modified view, making space for the content view by vertically insetting the modified view, adjusting the safe area of the result to match.\n\nDiscussion\n\nThe content view is anchored to the specified vertical edge in the parent view, aligning its horizontal axis to the specified alignment guide. The modified view is inset by the height of content, from edge, with its safe area increased by the same amount.\n\nstruct ScrollableViewWithBottomBar: View {\n    var body: some View {\n        ScrollView {\n            ScrolledContent()\n        }\n        .safeAreaInset(edge: .bottom, spacing: 0) {\n            BottomBarContent()\n        }\n    }\n}\n"
  },
  {
    "title": "saturation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/saturation(_:)",
    "html": "Parameters\namount\n\nThe amount of saturation to apply to this view.\n\nReturn Value\n\nA view that adjusts the saturation of this view.\n\nDiscussion\n\nUse color saturation to increase or decrease the intensity of colors in a view.\n\nThe example below shows a series of red squares with their saturation increasing from 0 (gray) to 100% (fully-red) in 20% increments:\n\nstruct Saturation: View {\n    var body: some View {\n        HStack {\n            ForEach(0..<6) {\n                Color.red.frame(width: 60, height: 60, alignment: .center)\n                    .saturation(Double($0) * 0.2)\n                    .overlay(Text(\"\\(Double($0) * 0.2 * 100, specifier: \"%.0f\")%\"),\n                             alignment: .bottom)\n                    .border(Color.gray)\n            }\n        }\n    }\n}\n\n\nSee Also\n\ncontrast(_:)"
  },
  {
    "title": "scaleEffect(_:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scaleeffect(_:anchor:)-1yzmo",
    "html": "Parameters\nscale\n\nA CGSize that represents the horizontal and vertical amount to scale the view.\n\nanchor\n\nThe point with a default of UnitPoint/center that defines the location within the view from which to apply the transformation.\n\nDiscussion\n\nUse scaleEffect(_:anchor:) to scale a view by applying a scaling transform of a specific size, specified by scale.\n\nImage(systemName: \"envelope.badge.fill\")\n    .resizable()\n    .frame(width: 100, height: 100, alignment: .center)\n    .foregroundColor(Color.red)\n    .scaleEffect(CGSize(x: 0.9, y: 1.3), anchor: .leading)\n    .border(Color.gray)\n"
  },
  {
    "title": "rotationEffect(_:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/rotationeffect(_:anchor:)",
    "html": "Parameters\nangle\n\nThe angle by which to rotate the view.\n\nanchor\n\nA unit point within the view about which to perform the rotation. The default value is UnitPoint/center.\n\nReturn Value\n\nA view with rotated content.\n\nDiscussion\n\nThis modifier rotates the view’s content around the axis that points out of the xy-plane. It has no effect on the view’s frame. The following code rotates text by 22˚ and then draws a border around the modified view to show that the frame remains unchanged by the rotation modifier:\n\nText(\"Rotation by passing an angle in degrees\")\n    .rotationEffect(.degrees(22))\n    .border(Color.gray)\n"
  },
  {
    "title": "scaleEffect(_:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scaleeffect(_:anchor:)-k4jy",
    "html": "Parameters\ns\n\nThe amount to scale the view in the view in both the horizontal and vertical directions.\n\nanchor\n\nThe anchor point with a default of UnitPoint/center that indicates the starting position for the scale operation.\n\nDiscussion\n\nUse scaleEffect(_:anchor:) to apply a horizontally and vertically scaling transform to a view.\n\nImage(systemName: \"envelope.badge.fill\")\n    .resizable()\n    .frame(width: 100, height: 100, alignment: .center)\n    .foregroundColor(Color.red)\n    .scaleEffect(2, anchor: .leading)\n    .border(Color.gray)\n"
  },
  {
    "title": "font(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/font(_:)",
    "html": "Parameters\nfont\n\nThe default font to use in this view.\n\nReturn Value\n\nA view with the default font set to the value you supply.\n\nDiscussion\n\nUse font(_:) to apply a specific font to all of the text in a view.\n\nThe example below shows the effects of applying fonts to individual views and to view hierarchies. Font information flows down the view hierarchy as part of the environment, and remains in effect unless overridden at the level of an individual view or view container.\n\nHere, the outermost VStack applies a 16-point system font as a default font to views contained in that VStack. Inside that stack, the example applies a Font/largeTitle font to just the first text view; this explicitly overrides the default. The remaining stack and the views contained with it continue to use the 16-point system font set by their containing view:\n\nVStack {\n    Text(\"Font applied to a text view.\")\n        .font(.largeTitle)\n\n\n    VStack {\n        Text(\"These 2 text views have the same font\")\n        Text(\"applied to their parent hierarchy\")\n    }\n}\n.font(.system(size: 16, weight: .light, design: .default))\n"
  },
  {
    "title": "fontWeight(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fontweight(_:)",
    "html": "Parameters\nweight\n\nOne of the available font weights. Providing nil removes the effect of any font weight modifier applied higher in the view hierarchy.\n\nReturn Value\n\nA view that uses the font weight you specify."
  },
  {
    "title": "saturation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/saturation(_:)",
    "html": "Parameters\namount\n\nThe amount of saturation to apply to this view.\n\nReturn Value\n\nA view that adjusts the saturation of this view.\n\nDiscussion\n\nUse color saturation to increase or decrease the intensity of colors in a view.\n\nThe example below shows a series of red squares with their saturation increasing from 0 (gray) to 100% (fully-red) in 20% increments:\n\nstruct Saturation: View {\n    var body: some View {\n        HStack {\n            ForEach(0..<6) {\n                Color.red.frame(width: 60, height: 60, alignment: .center)\n                    .saturation(Double($0) * 0.2)\n                    .overlay(Text(\"\\(Double($0) * 0.2 * 100, specifier: \"%.0f\")%\"),\n                             alignment: .bottom)\n                    .border(Color.gray)\n            }\n        }\n    }\n}\n\n\nSee Also\n\ncontrast(_:)"
  },
  {
    "title": "foregroundColor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/foregroundcolor(_:)",
    "html": "Parameters\ncolor\n\nThe foreground color to use when displaying this view. Pass nil to remove any custom foreground color and to allow the system or the container to provide its own foreground color. If a container-specific override doesn’t exist, the system uses the primary color.\n\nReturn Value\n\nA view that uses the foreground color you supply."
  },
  {
    "title": "fontDesign(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fontdesign(_:)",
    "html": "Parameters\ndesign\n\nOne of the available font designs. Providing nil removes the effect of any font design modifier applied higher in the view hierarchy.\n\nReturn Value\n\nA view that uses the font design you specify."
  },
  {
    "title": "foregroundStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/foregroundstyle(_:)",
    "html": "Parameters\nstyle\n\nThe color or pattern to use when filling in the foreground elements. To indicate a specific value, use Color or ShapeStyle/image(_:sourceRect:scale:), or one of the gradient types, like ShapeStyle/linearGradient(colors:startPoint:endPoint:). To set a style that’s relative to the containing view’s style, use one of the semantic styles, like ShapeStyle/primary.\n\nReturn Value\n\nA view that uses the given foreground style.\n\nDiscussion\n\nUse this method to style foreground content like text, shapes, and template images (including symbols):\n\nHStack {\n    Image(systemName: \"triangle.fill\")\n    Text(\"Hello, world!\")\n    RoundedRectangle(cornerRadius: 5)\n        .frame(width: 40, height: 20)\n}\n.foregroundStyle(.teal)\n\n\nThe example above creates a row of ShapeStyle/teal foreground elements:\n\nYou can use any style that conforms to the ShapeStyle protocol, like the ShapeStyle/teal color in the example above, or the ShapeStyle/linearGradient(colors:startPoint:endPoint:) gradient shown below:\n\nText(\"Gradient Text\")\n    .font(.largeTitle)\n    .foregroundStyle(\n        .linearGradient(\n            colors: [.yellow, .blue],\n            startPoint: .top,\n            endPoint: .bottom\n        )\n    )\n\n\nTip\n\nIf you want to fill a single Shape instance with a style, use the Shape/fill(style:) shape modifier instead because it’s more efficient.\n\nSwiftUI creates a context-dependent render for a given style. For example, a Color that you load from an asset catalog can have different light and dark appearances, while some styles also vary by platform.\n\nHierarchical foreground styles like ShapeStyle/secondary don’t impose a style of their own, but instead modify other styles. In particular, they modify the primary level of the current foreground style to the degree given by the hierarchical style’s name. To find the current foreground style to modify, SwiftUI looks for the innermost containing style that you apply with the foregroundStyle(_:) or the View/foregroundColor(_:) modifier. If you haven’t specified a style, SwiftUI uses the default foreground style, as in the following example:\n\nVStack(alignment: .leading) {\n    Label(\"Primary\", systemImage: \"1.square.fill\")\n    Label(\"Secondary\", systemImage: \"2.square.fill\")\n        .foregroundStyle(.secondary)\n}\n\n\nIf you add a foreground style on the enclosing VStack, the hierarchical styling responds accordingly:\n\nVStack(alignment: .leading) {\n    Label(\"Primary\", systemImage: \"1.square.fill\")\n    Label(\"Secondary\", systemImage: \"2.square.fill\")\n        .foregroundStyle(.secondary)\n}\n.foregroundStyle(.blue)\n\n\nWhen you apply a custom style to a view, the view disables the vibrancy effect for foreground elements in that view, or in any of its child views, that it would otherwise gain from adding a background material — for example, using the View/background(_:ignoresSafeAreaEdges:) modifier. However, hierarchical styles applied to the default foreground don’t disable vibrancy."
  },
  {
    "title": "foregroundStyle(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/foregroundstyle(_:_:_:)",
    "html": "Parameters\nprimary\n\nThe primary color or pattern to use when filling in the foreground elements. To indicate a specific value, use Color or ShapeStyle/image(_:sourceRect:scale:), or one of the gradient types, like ShapeStyle/linearGradient(colors:startPoint:endPoint:). To set a style that’s relative to the containing view’s style, use one of the semantic styles, like ShapeStyle/primary.\n\nsecondary\n\nThe secondary color or pattern to use when filling in the foreground elements.\n\ntertiary\n\nThe tertiary color or pattern to use when filling in the foreground elements.\n\nReturn Value\n\nA view that uses the given foreground styles.\n\nDiscussion\n\nSwiftUI uses these styles when rendering child views that don’t have an explicit rendering style, like images, text, shapes, and so on.\n\nSymbol images within the view hierarchy use the SymbolRenderingMode/palette rendering mode when you apply this modifier, if you don’t explicitly specify another mode."
  },
  {
    "title": "frame(width:height:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/frame(width:height:alignment:)",
    "html": "Parameters\nwidth\n\nA fixed width for the resulting view. If width is nil, the resulting view assumes this view’s sizing behavior.\n\nheight\n\nA fixed height for the resulting view. If height is nil, the resulting view assumes this view’s sizing behavior.\n\nalignment\n\nThe alignment of this view inside the resulting frame. Note that most alignment values have no apparent effect when the size of the frame happens to match that of this view.\n\nReturn Value\n\nA view with fixed dimensions of width and height, for the parameters that are non-nil.\n\nDiscussion\n\nUse this method to specify a fixed size for a view’s width, height, or both. If you only specify one of the dimensions, the resulting view assumes this view’s sizing behavior in the other dimension.\n\nFor example, the following code lays out an ellipse in a fixed 200 by 100 frame. Because a shape always occupies the space offered to it by the layout system, the first ellipse is 200x100 points. The second ellipse is laid out in a frame with only a fixed height, so it occupies that height, and whatever width the layout system offers to its parent.\n\nVStack {\n    Ellipse()\n        .fill(Color.purple)\n        .frame(width: 200, height: 100)\n    Ellipse()\n        .fill(Color.blue)\n        .frame(height: 100)\n}\n\n\nThe alignment parameter specifies this view’s alignment within the frame.\n\nText(\"Hello world!\")\n    .frame(width: 200, height: 30, alignment: .topLeading)\n    .border(Color.gray)\n\n\nIn the example above, the text is positioned at the top, leading corner of the frame. If the text is taller than the frame, its bounds may extend beyond the bottom of the frame’s bounds."
  },
  {
    "title": "gridColumnAlignment(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/gridcolumnalignment(_:)",
    "html": "Parameters\nguide\n\nThe HorizontalAlignment guide to use for the grid column that the view appears in.\n\nReturn Value\n\nA view that uses the specified horizontal alignment, and that causes all cells in the same column of a grid to use the same alignment.\n\nDiscussion\n\nYou set a default alignment for the cells in a grid in both vertical and horizontal dimensions when you create the grid with the Grid/init(alignment:horizontalSpacing:verticalSpacing:content:) initializer. However, you can use the gridColumnAlignment(_:) modifier to override the horizontal alignment of a column within the grid. The following example sets a grid’s alignment to Alignment/leadingFirstTextBaseline, and then sets the first column to use HorizontalAlignment/trailing alignment:\n\nGrid(alignment: .leadingFirstTextBaseline) {\n    GridRow {\n        Text(\"Regular font:\")\n            .gridColumnAlignment(.trailing) // Align the entire first column.\n        Text(\"Helvetica 12\")\n        Button(\"Select...\") { }\n    }\n    GridRow {\n        Text(\"Fixed-width font:\")\n        Text(\"Menlo Regular 11\")\n        Button(\"Select...\") { }\n    }\n    GridRow {\n        Color.clear\n            .gridCellUnsizedAxes([.vertical, .horizontal])\n        Toggle(\"Use fixed-width font for new documents\", isOn: $isOn)\n            .gridCellColumns(2)\n    }\n}\n\n\nThis creates the layout of a typical macOS configuration view, with the trailing edge of the first column flush with the leading edge of the second column:\n\nAdd the modifier to only one cell in a column. The grid automatically aligns all cells in that column the same way. You get undefined behavior if you apply different alignments to different cells in the same column.\n\nTo override row alignment, see GridRow/init(alignment:content:). To override alignment for a single cell, see View/gridCellAnchor(_:)."
  },
  {
    "title": "gridCellUnsizedAxes(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/gridcellunsizedaxes(_:)",
    "html": "Parameters\naxes\n\nThe dimensions in which the grid shouldn’t offer the view a share of any available space. This prevents a flexible view like a Spacer, Divider, or Color from defining the size of a row or column.\n\nReturn Value\n\nA view that doesn’t ask an enclosing grid for extra size in one or more axes.\n\nDiscussion\n\nUse this modifier to prevent a flexible view from taking more space on the specified axes than the other cells in a row or column require. For example, consider the following Grid that places a Divider between two rows of content:\n\nGrid {\n    GridRow {\n        Text(\"Hello\")\n        Image(systemName: \"globe\")\n    }\n    Divider()\n    GridRow {\n        Image(systemName: \"hand.wave\")\n        Text(\"World\")\n    }\n}\n\n\nThe text and images all have ideal widths for their content. However, because a divider takes as much space as its parent offers, the grid fills the width of the display, expanding all the other cells to match:\n\nYou can prevent the grid from giving the divider more width than the other cells require by adding the modifier with the Axis/horizontal parameter:\n\nDivider()\n    .gridCellUnsizedAxes(.horizontal)\n\n\nThis restores the grid to the width that it would have without the divider:"
  },
  {
    "title": "formStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/formstyle(_:)",
    "html": "Parameters\nstyle\n\nThe form style to set.\n\nReturn Value\n\nA view that uses the specified form style for itself and its child views."
  },
  {
    "title": "geometryGroup() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/geometrygroup()",
    "html": "Discussion\n\nBy default SwiftUI views push position and size changes down through the view hierarchy, so that only views that draw something (known as leaf views) apply the current animation to their frame rectangle. However in some cases this coalescing behavior can give undesirable results; inserting a geometry group can correct that. A group acts as a barrier between the parent view and its subviews, forcing the position and size values to be resolved and animated by the parent, before being passed down to each subview.\n\nThe example below shows one use of this function: ensuring that the member views of each row in the stack apply (and animate as) a single geometric transform from their ancestor view, rather than letting the effects of the ancestor views be applied separately to each leaf view. If the members of ItemView may be added and removed at different times the group ensures that they stay locked together as animations are applied.\n\nVStack {\n    ForEach(items) { item in\n        ItemView(item: item)\n            .geometryGroup()\n    }\n}\n\n\nReturns: a new view whose geometry is isolated from that of its parent view."
  },
  {
    "title": "fullScreenCover(isPresented:onDismiss:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fullscreencover(ispresented:ondismiss:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the sheet.\n\nonDismiss\n\nThe closure to execute when dismissing the modal view.\n\ncontent\n\nA closure that returns the content of the modal view.\n\nDiscussion\n\nUse this method to show a modal view that covers as much of the screen as possible. The example below displays a custom view when the user toggles the value of the isPresenting binding:\n\nstruct FullScreenCoverPresentedOnDismiss: View {\n    @State private var isPresenting = false\n    var body: some View {\n        Button(\"Present Full-Screen Cover\") {\n            isPresenting.toggle()\n        }\n        .fullScreenCover(isPresented: $isPresenting,\n                         onDismiss: didDismiss) {\n            VStack {\n                Text(\"A full-screen modal view.\")\n                    .font(.title)\n                Text(\"Tap to Dismiss\")\n            }\n            .onTapGesture {\n                isPresenting.toggle()\n            }\n            .foregroundColor(.white)\n            .frame(maxWidth: .infinity,\n                   maxHeight: .infinity)\n            .background(Color.blue)\n            .ignoresSafeArea(edges: .all)\n        }\n    }\n\n\n    func didDismiss() {\n        // Handle the dismissing action.\n    }\n}\n"
  },
  {
    "title": "frame() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/frame()",
    "html": "Deprecated\n\nPlease pass one or more parameters.\n\nDiscussion\n\nUse SwiftUI/View/frame(width:height:alignment:) or SwiftUI/View/frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) instead."
  },
  {
    "title": "grayscale(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/grayscale(_:)",
    "html": "Parameters\namount\n\nThe intensity of grayscale to apply from 0.0 to less than 1.0. Values closer to 0.0 are more colorful, and values closer to 1.0 are less colorful.\n\nReturn Value\n\nA view that adds a grayscale effect to this view.\n\nDiscussion\n\nA grayscale effect reduces the intensity of colors in this view.\n\nThe example below shows a series of red squares with their grayscale effect increasing from 0 (reddest) to 99% (fully desaturated) in approximate 20% increments:\n\nstruct Saturation: View {\n    var body: some View {\n        HStack {\n            ForEach(0..<6) {\n                Color.red.frame(width: 60, height: 60, alignment: .center)\n                    .grayscale(Double($0) * 0.1999)\n                    .overlay(Text(\"\\(Double($0) * 0.1999 * 100, specifier: \"%.4f\")%\"),\n                             alignment: .bottom)\n                    .border(Color.gray)\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "gridCellColumns(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/gridcellcolumns(_:)",
    "html": "Parameters\ncount\n\nThe number of columns that the view should consume when placed in a grid row.\n\nReturn Value\n\nA view that occupies the specified number of columns in a grid row.\n\nDiscussion\n\nBy default, each view that you put into the content closure of a GridRow corresponds to exactly one column of the grid. Apply the gridCellColumns(_:) modifier to a view that you want to span more than one column, as in the following example of a typical macOS configuration view:\n\nGrid(alignment: .leadingFirstTextBaseline) {\n    GridRow {\n        Text(\"Regular font:\")\n            .gridColumnAlignment(.trailing)\n        Text(\"Helvetica 12\")\n        Button(\"Select...\") { }\n    }\n    GridRow {\n        Text(\"Fixed-width font:\")\n        Text(\"Menlo Regular 11\")\n        Button(\"Select...\") { }\n    }\n    GridRow {\n        Color.clear\n            .gridCellUnsizedAxes([.vertical, .horizontal])\n        Toggle(\"Use fixed-width font for new documents\", isOn: $isOn)\n            .gridCellColumns(2) // Span two columns.\n    }\n}\n\n\nThe Toggle in the example above spans the column that contains the font names and the column that contains the buttons:\n\nImportant\n\nWhen you tell a cell to span multiple columns, the grid changes the merged cell to use anchor alignment, rather than the usual alignment guides. For information about the behavior of anchor alignment, see View/gridCellAnchor(_:).\n\nAs a convenience you can cause a view to span all of the Grid columns by placing the view directly in the content closure of the Grid, outside of a GridRow, and omitting the modifier. To do the opposite and include more than one view in a cell, group the views using an appropriate layout container, like an HStack, so that they act as a single view."
  },
  {
    "title": "labelStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/labelstyle(_:)",
    "html": "Discussion\n\nUse this modifier to set a specific style for all labels within a view:\n\nVStack {\n    Label(\"Fire\", systemImage: \"flame.fill\")\n    Label(\"Lightning\", systemImage: \"bolt.fill\")\n}\n.labelStyle(MyCustomLabelStyle())\n"
  },
  {
    "title": "labelsHidden() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/labelshidden()",
    "html": "Discussion\n\nUse this modifier when you want to omit a label from one or more controls in your user interface. For example, the first Toggle in the following example hides its label:\n\nVStack {\n    Toggle(isOn: $toggle1) {\n        Text(\"Toggle 1\")\n    }\n    .labelsHidden()\n\n\n    Toggle(isOn: $toggle2) {\n        Text(\"Toggle 2\")\n    }\n}\n\n\nThe VStack in the example above centers the first toggle’s control element in the available space, while it centers the second toggle’s combined label and control element:\n\nAlways provide a label for controls, even when you hide the label, because SwiftUI uses labels for other purposes, including accessibility.\n\nNote\n\nThis modifier doesn’t work for all labels. It applies to labels that are separate from the rest of the control’s interface, like they are for Toggle, but not to controls like a bordered button where the label is inside the button’s border."
  },
  {
    "title": "layoutDirectionBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/layoutdirectionbehavior(_:)",
    "html": "Parameters\nbehavior\n\nA LayoutDirectionBehavior value that indicates whether this view should mirror in a particular layout direction. By default, views will adjust their layouts automatically in a right-to-left context and do not need to be mirrored.\n\nReturn Value\n\nA view that conditionally mirrors its contents horizontally in a given layout direction.\n\nDiscussion\n\nUse layoutDirectionBehavior(_:) when you need the system to horizontally mirror the contents of the view when presented in a layout direction.\n\nTo override the layout direction for a specific view, use the View/environment(_:_:) view modifier to explicitly override the EnvironmentValues/layoutDirection environment value for the view."
  },
  {
    "title": "layerEffect(_:maxSampleOffset:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/layereffect(_:maxsampleoffset:isenabled:)",
    "html": "Parameters\nshader\n\nThe shader to apply as a layer effect.\n\nmaxSampleOffset\n\nIf the shader function samples from the layer at locations not equal to the destination position, this value must specify the maximum sampling distance in each axis, for all source pixels.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a distortion effect.\n\nDiscussion\n\nFor a shader function to act as a layer effect it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position,\n  SwiftUI::Layer layer, args...)\n\n\nwhere position is the user-space coordinates of the destination pixel applied to the shader, and layer is a subregion of the rasterized contents of self. args... should be compatible with the uniform arguments bound to shader.\n\nThe SwiftUI::Layer type is defined in the <SwiftUI/SwiftUI.h> header file. It exports a single sample() function that returns a linearly-filtered pixel value from a position in the source content, as a premultiplied RGBA pixel value:\n\nnamespace SwiftUI {\n  struct Layer {\n    half4 sample(float2 position) const;\n  };\n};\n\n\nThe function should return the color mapping to the destination pixel, typically by sampling one or more pixels from layer at location(s) derived from position and them applying some kind of transformation to produce a new color.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error."
  },
  {
    "title": "layoutPriority(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/layoutpriority(_:)",
    "html": "Parameters\nvalue\n\nThe priority by which a parent layout apportions space to the child.\n\nDiscussion\n\nViews typically have a default priority of 0 which causes space to be apportioned evenly to all sibling views. Raising a view’s layout priority encourages the higher priority view to shrink later when the group is shrunk and stretch sooner when the group is stretched.\n\nHStack {\n    Text(\"This is a moderately long string.\")\n        .font(.largeTitle)\n        .border(Color.gray)\n\n\n    Spacer()\n\n\n    Text(\"This is a higher priority string.\")\n        .font(.largeTitle)\n        .layoutPriority(1)\n        .border(Color.gray)\n}\n\n\nIn the example above, the first Text element has the default priority 0 which causes its view to shrink dramatically due to the higher priority of the second Text element, even though all of their other attributes (font, font size and character count) are the same.\n\nA parent layout offers the child views with the highest layout priority all the space offered to the parent minus the minimum space required for all its lower-priority children."
  },
  {
    "title": "inspectorColumnWidth(min:ideal:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/inspectorcolumnwidth(min:ideal:max:)",
    "html": "Parameters\nmin\n\nThe minimum allowed width for the trailing column inspector\n\nideal\n\nThe initial width of the inspector in the absence of state restoration. ideal influences the resulting width on macOS when a user double-clicks the divider on the leading edge of the inspector. clicks a divider to readjust\n\nmax\n\nThe maximum allowed width for the trailing column inspector\n\nDiscussion\n\nApply this modifier on the content of a View/inspector(isPresented:content:) to specify a preferred flexible width for the column. Use View/inspectorColumnWidth(_:) if you need to specify a fixed width.\n\nThe following example shows an editor interface with an inspector, which when presented as a trailing-column, has a preferred width of 225 points, maximum of 400, and a minimum of 150 at which point it will collapse, if allowed.\n\nMyEditorView()\n    .inspector {\n        TextTraitsInspectorView()\n            .inspectorColumnWidth(min: 150, ideal: 225, max: 400)\n    }\n\n\nOnly some platforms enable flexible inspector columns. If you specify a width that the current presentation environment doesn’t support, SwiftUI may use a different width for your column."
  },
  {
    "title": "inspectorColumnWidth(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/inspectorcolumnwidth(_:)",
    "html": "Parameters\nwidth\n\nThe preferred fixed width for the inspector if presented as a trailing column.\n\nDiscussion\n\nApply this modifier on the content of a View/inspector(isPresented:content:) to specify a fixed preferred width for the trailing column. Use View/navigationSplitViewColumnWidth(min:ideal:max:) if you need to specify a flexible width.\n\nThe following example shows an editor interface with an inspector, which when presented as a trailing-column, has a fixed width of 225 points. The example also uses View/interactiveDismissDisabled(_:) to prevent the inspector from being collapsed by user action like dragging a divider.\n\nMyEditorView()\n    .inspector {\n        TextTraitsInspectorView()\n            .inspectorColumnWidth(225)\n            .interactiveDismissDisabled()\n    }\n\n\nNote\n\nA fixed width does not prevent the user collapsing the inspector on macOS. See View/interactiveDismissDisabled(_:)."
  },
  {
    "title": "interactiveDismissDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/interactivedismissdisabled(_:)",
    "html": "Parameters\nisDisabled\n\nA Boolean value that indicates whether to prevent nonprogrammatic dismissal of the containing view hierarchy when presented in a sheet or popover.\n\nDiscussion\n\nUsers can dismiss certain kinds of presentations using built-in gestures. In particular, a user can dismiss a sheet by dragging it down, or a popover by clicking or tapping outside of the presented view. Use the interactiveDismissDisabled(_:) modifier to conditionally prevent this kind of dismissal. You typically do this to prevent the user from dismissing a presentation before providing needed data or completing a required action.\n\nFor instance, suppose you have a view that displays a licensing agreement that the user must acknowledge before continuing:\n\nstruct TermsOfService: View {\n    @Binding var areTermsAccepted: Bool\n    @Environment(\\.dismiss) private var dismiss\n\n\n    var body: some View {\n        Form {\n            Text(\"License Agreement\")\n                .font(.title)\n            Text(\"Terms and conditions go here.\")\n            Button(\"Accept\") {\n                areTermsAccepted = true\n                dismiss()\n            }\n        }\n    }\n}\n\n\nIf you present this view in a sheet, the user can dismiss it by either tapping the button — which calls EnvironmentValues/dismiss from its action closure — or by dragging the sheet down. To ensure that the user accepts the terms by tapping the button, disable interactive dismissal, conditioned on the areTermsAccepted property:\n\nstruct ContentView: View {\n    @State private var isSheetPresented = false\n    @State private var areTermsAccepted = false\n\n\n    var body: some View {\n        Button(\"Use Service\") {\n            isSheetPresented = true\n        }\n        .sheet(isPresented: $isSheetPresented) {\n            TermsOfService()\n                .interactiveDismissDisabled(!areTermsAccepted)\n        }\n    }\n}\n\n\nYou can apply the modifier to any view in the sheet’s view hierarchy, including to the sheet’s top level view, as the example demonstrates, or to any child view, like the Form or the Accept Button.\n\nThe modifier has no effect on programmatic dismissal, which you can invoke by updating the Binding that controls the presentation, or by calling the environment’s EnvironmentValues/dismiss action. On macOS, disabling interactive dismissal in a popover makes the popover nontransient."
  },
  {
    "title": "italic(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/italic(_:)",
    "html": "Parameters\nisActive\n\nA Boolean value that indicates whether italic styling is added. The default value is true.\n\nReturn Value\n\nA View with italic text."
  },
  {
    "title": "indexViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/indexviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to apply to this view."
  },
  {
    "title": "inspector(isPresented:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/inspector(ispresented:content:)",
    "html": "Parameters\nisPresented\n\nA binding to Bool controlling the presented state.\n\ncontent\n\nThe inspector content.\n\nDiscussion\n\nApply this modifier to declare an inspector with a context-dependent presentation. For example, an inspector can present as a trailing column in a horizontally regular size class, but adapt to a sheet in a horizontally compact size class.\n\nstruct ShapeEditor: View {\n    @State var presented: Bool = false\n    var body: some View {\n        MyEditorView()\n            .inspector(isPresented: $presented) {\n                TextTraitsInspectorView()\n            }\n    }\n}\n\n\nNote\n\nTrailing column inspectors have their presentation state restored by the framework.\n\nSee Also\n\nInspectorCommands for including the default inspector commands and keyboard shortcuts."
  },
  {
    "title": "handlesExternalEvents(preferring:allowing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/handlesexternalevents(preferring:allowing:)",
    "html": "Parameters\npreferring\n\nA Set of Strings that are checked to see if they are contained in the targetContentIdenfifier to see if the Scene this View is in prefers to handle the Exernal Event. The empty Set and empty Strings never match. The String value “*” always matches. The String comparisons are case/diacritic insensitive\n\nallowing\n\nA Set of Strings that are checked to see if they are contained in the targetContentIdenfifier to see if the Scene this View is in allows handling the External Event. The empty Set and empty Strings never match. The String value “*” always matches.\n\nDiscussion\n\nIf no modifier is set in any Views within a Scene, the behavior is platform dependent. On macOS, a new Scene will be created to use for the External Event. On iOS, the system will choose an existing Scene to use.\n\nOn platforms that only allow a single Window/Scene, this method is ignored, and incoming External Events are always routed to the existing single Scene."
  },
  {
    "title": "focusedSceneValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedscenevalue(_:_:)-atdb",
    "html": "Parameters\nkeyPath\n\nThe key path to associate value with when adding it to the existing table of published focus values.\n\nvalue\n\nThe focus value to publish, or nil if no value is currently available.\n\nReturn Value\n\nA modified representation of this view.\n\nDiscussion\n\nUse this method instead of View/focusedValue(_:_:) for values that must be visible regardless of where focus is located in the active scene. For example, if an app needs a command for moving focus to a particular text field in the sidebar, it could use this modifier to publish a button action that’s visible to command views as long as the scene is active, and regardless of where focus happens to be in it.\n\nstruct Sidebar: View {\n    @FocusState var isFiltering: Bool\n\n\n    var body: some View {\n        VStack {\n            TextField(...)\n                .focused(when: $isFiltering)\n                .focusedSceneValue(\\.filterAction) {\n                    isFiltering = true\n                }\n        }\n    }\n}\n\n\nstruct NavigationCommands: Commands {\n    @FocusedValue(\\.filterAction) var filterAction\n\n\n    var body: some Commands {\n        CommandMenu(\"Navigate\") {\n            Button(\"Filter in Sidebar\") {\n                filterAction?()\n            }\n        }\n        .disabled(filterAction == nil)\n    }\n}\n\n\nstruct FilterActionKey: FocusedValuesKey {\n    typealias Value = () -> Void\n}\n\n\nextension FocusedValues {\n    var filterAction: (() -> Void)? {\n        get { self[FilterActionKey.self] }\n        set { self[FilterActionKey.self] = newValue }\n    }\n}\n"
  },
  {
    "title": "focusedValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedvalue(_:)",
    "html": "Discussion\n\nImportant\n\nThis initializer only accepts objects conforming to the Observable protocol. For reading environment objects that conform to ObservableObject, use focusedObject(_:), instead.\n\nTo read this value, use the FocusedValue property wrapper."
  },
  {
    "title": "help(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/help(_:)-3m9wt",
    "html": "Parameters\ntextKey\n\nThe key for the localized text to use as help.\n\nDiscussion\n\nAdding help to a view configures the view’s accessibility hint and its help tag (also called a tooltip) in macOS or visionOS. For more information on using help tags, see Offering help in the Human Interface Guidelines.\n\nButton(action: composeMessage) {\n    Image(systemName: \"square.and.pencil\")\n}\n.help(\"Compose a new message\")\n"
  },
  {
    "title": "focusedSceneObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedsceneobject(_:)-62y1b",
    "html": "Parameters\nobject\n\nThe observable object to associate with the scene.\n\nReturn Value\n\nA view that supplies an observable object while the scene is active.\n\nDiscussion\n\nUse this method instead of View/focusedObject(_:) for observable objects that must be visible regardless of where focus is located in the active scene. This is sometimes needed for things like main menu and discoverability HUD commands that observe and update data from the active scene but aren’t concerned with what the user is actually focused on. The scene’s root view can supply the scene’s state object:\n\nstruct RootView: View {\n    @StateObject private var sceneData = SceneData()\n\n\n    var body: some View {\n        NavigationSplitView {\n            ...\n        }\n        .focusedSceneObject(sceneData)\n    }\n}\n\n\nInterested views can then use the FocusedObject property wrapper to observe and update the active scene’s state object. In this example, an app command updates the active scene’s data, and is enabled as long as any scene is active.\n\nstruct MessageCommands: Commands {\n    @FocusedObject private var sceneData: SceneData?\n\n\n    var body: some Commands {\n        CommandGroup(after: .newItem) {\n            Button(\"New Message\") {\n                sceneData?.addMessage()\n            }\n            .keyboardShortcut(\"n\", modifiers: [.option, .command])\n            .disabled(sceneData == nil)\n        }\n    }\n}\n"
  },
  {
    "title": "focusedObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedobject(_:)-8wa6k",
    "html": "Parameters\nobject\n\nThe observable object to associate with focus.\n\nReturn Value\n\nA view that supplies an observable object when in focus.\n\nDiscussion\n\nUse this method instead of View/focusedSceneObject(_:) when your scene includes multiple focusable views with their own associated data, and you need an app- or scene-scoped element like a command or toolbar item that operates on the data associated with whichever view currently has focus. Each focusable view can supply its own object:\n\nstruct MessageView: View {\n    @StateObject private var message = Message(...)\n\n\n    var body: some View {\n        TextField(...)\n            .focusedObject(message)\n    }\n}\n\n\nInterested views can then use the FocusedObject property wrapper to observe and update the focused view’s object. In this example, an app command updates the focused view’s data, and is automatically disabled when focus is in an unrelated part of the scene:\n\nstruct MessageCommands: Commands {\n    @FocusedObject private var message: Message?\n\n\n    var body: some Commands {\n        CommandGroup(after: .pasteboard) {\n            Button(\"Add Duck to Message\") {\n                message?.text.append(\" 🦆\")\n            }\n            .keyboardShortcut(\"d\")\n            .disabled(message == nil)\n        }\n    }\n}\n"
  },
  {
    "title": "focusable(_:interactions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusable(_:interactions:)",
    "html": "Parameters\nisFocusable\n\ntrue if the view should participate in focus; false otherwise. The default value is true.\n\ninteractions\n\nThe types of focus interactions supported by the view. The default value is .automatic.\n\nReturn Value\n\nA view that sets whether its child is focusable.\n\nDiscussion\n\nBy default, SwiftUI enables all possible focus interactions. However, on macOS and iOS it is conventional for button-like views to only accept focus when the user has enabled keyboard navigation system-wide in the Settings app. Clients can reproduce this behavior with custom views by only supporting .activate interactions.\n\nMyTapGestureView(...)\n    .focusable(interactions: .activate)\n\n\nNote\n\nThe focus interactions allowed for custom views changed in macOS 14—previously, custom views could only become focused with keyboard navigation enabled system-wide. Clients built using older SDKs will continue to see the older focus behavior, while custom views in clients built using macOS 14 or later will always be focusable unless the client requests otherwise by specifying a restricted set of focus interactions."
  },
  {
    "title": "fixedSize(horizontal:vertical:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fixedsize(horizontal:vertical:)",
    "html": "Parameters\nhorizontal\n\nA Boolean value that indicates whether to fix the width of the view.\n\nvertical\n\nA Boolean value that indicates whether to fix the height of the view.\n\nReturn Value\n\nA view that fixes this view at its ideal size in the dimensions specified by horizontal and vertical.\n\nDiscussion\n\nThis function behaves like View/fixedSize(), except with fixedSize(horizontal:vertical:) the fixing of the axes can be optionally specified in one or both dimensions. For example, if you horizontally fix a text view before wrapping it in the frame view, you’re telling the text view to maintain its ideal width. The view calculates this to be the space needed to represent the entire string.\n\nText(\"A single line of text, too long to fit in a box.\")\n    .fixedSize(horizontal: true, vertical: false)\n    .frame(width: 200, height: 200)\n    .border(Color.gray)\n\n\nThis can result in the view exceeding the parent’s bounds, which may or may not be the effect you want."
  },
  {
    "title": "focusedSceneObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedsceneobject(_:)-137ih",
    "html": "Parameters\nobject\n\nThe observable object to associate with the scene, or nil if no object is currently available.\n\nReturn Value\n\nA view that supplies an observable object while the scene is active.\n\nDiscussion\n\nUse this method instead of View/focusedObject(_:) for observable objects that must be visible regardless of where focus is located in the active scene. This is sometimes needed for things like main menu and discoverability HUD commands that observe and update data from the active scene but aren’t concerned with what the user is actually focused on. The scene’s root view can supply the scene’s state object:\n\nstruct RootView: View {\n    @StateObject private var sceneData = SceneData()\n\n\n    var body: some View {\n        NavigationSplitView {\n            ...\n        }\n        .focusedSceneObject(sceneData)\n    }\n}\n\n\nInterested views can then use the FocusedObject property wrapper to observe and update the active scene’s state object. In this example, an app command updates the active scene’s data, and is enabled as long as any scene is active.\n\nstruct MessageCommands: Commands {\n    @FocusedObject private var sceneData: SceneData?\n\n\n    var body: some Commands {\n        CommandGroup(after: .newItem) {\n            Button(\"New Message\") {\n                sceneData?.addMessage()\n            }\n            .keyboardShortcut(\"n\", modifiers: [.option, .command])\n            .disabled(sceneData == nil)\n        }\n    }\n}\n"
  },
  {
    "title": "flipsForRightToLeftLayoutDirection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/flipsforrighttoleftlayoutdirection(_:)",
    "html": "Parameters\nenabled\n\nA Boolean value that indicates whether this view should have its content flipped horizontally when the layout direction is right-to-left. By default, views will adjust their layouts automatically in a right-to-left context and do not need to be mirrored.\n\nReturn Value\n\nA view that conditionally mirrors its contents horizontally when the layout direction is right-to-left.\n\nDiscussion\n\nUse flipsForRightToLeftLayoutDirection(_:) when you need the system to horizontally mirror the contents of the view when presented in a right-to-left layout.\n\nTo override the layout direction for a specific view, use the View/environment(_:_:) view modifier to explicitly override the EnvironmentValues/layoutDirection environment value for the view."
  },
  {
    "title": "focusEffectDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focuseffectdisabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean value that determines whether this view can display focus effects.\n\nReturn Value\n\nA view that controls whether focus effects can be displayed in this view.\n\nDiscussion\n\nThe higher views in a view hierarchy can override the value you set on this view. In the following example, the button does not display a focus effect because the outer focusEffectDisabled(_:) modifier overrides the inner one:\n\nHStack {\n    Button(\"Press\") {}\n        .focusEffectDisabled(false)\n}\n.focusEffectDisabled(true)\n"
  },
  {
    "title": "focusable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusable(_:)",
    "html": "Parameters\ns isFocusable\n\nA Boolean value that indicates whether this view is focusable.\n\nReturn Value\n\nA view that sets whether a view is focusable."
  },
  {
    "title": "fileMover(isPresented:file:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filemover(ispresented:file:oncompletion:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nfile\n\nThe URL of the file to be moved.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nNote\n\nThis interface provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nIn order for the interface to appear, both isPresented must be true and file must not be nil. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called."
  },
  {
    "title": "fileMover(isPresented:file:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filemover(ispresented:file:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\nfile\n\nThe URL of the file to be moved.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, a button that allows the user to move a file might look like this:\n\n  struct MoveFileButton: View {\n      @State private var showFileMover = false\n      var file: URL\n      var onCompletion: (URL) -> Void\n      var onCancellation: (() -> Void)?\n\n\n      var body: some View {\n          Button {\n              showFileMover = true\n          } label: {\n              Label(\"Choose destination\", systemImage: \"folder.circle\")\n          }\n          .fileMover(isPresented: $showFileMover, file: file) { result in\n              switch result {\n              case .success(let url):\n                  guard url.startAccessingSecurityScopedResource() else {\n                      return\n                  }\n                  onCompletion(url)\n                  url.stopAccessingSecurityScopedResource()\n              case .failure(let error):\n                  print(error)\n                  // handle error\n              }\n          } onCancellation: {\n              onCancellation?()\n          }\n      }\n  }\n"
  },
  {
    "title": "fileMover(isPresented:files:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filemover(ispresented:files:oncompletion:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nfiles\n\nA collection of URLs for the files to be moved.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nNote\n\nThis interface provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nIn order for the interface to appear, both isPresented must be true and files must not be empty. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called."
  },
  {
    "title": "safeAreaInset(edge:alignment:spacing:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/safeareainset(edge:alignment:spacing:content:)-5juls",
    "html": "Parameters\nedge\n\nThe horizontal edge of the view to inset by the width of content, to make space for content.\n\nspacing\n\nExtra distance placed between the two views, or nil to use the default amount of spacing.\n\nalignment\n\nThe alignment guide used to position content vertically.\n\ncontent\n\nA view builder function providing the view to display in the inset space of the modified view.\n\nReturn Value\n\nA new view that displays content beside the modified view, making space for the content view by horizontally insetting the modified view.\n\nDiscussion\n\nThe content view is anchored to the specified horizontal edge in the parent view, aligning its vertical axis to the specified alignment guide. The modified view is inset by the width of content, from edge, with its safe area increased by the same amount.\n\nstruct ScrollableViewWithSideBar: View {\n    var body: some View {\n        ScrollView {\n            ScrolledContent()\n        }\n        .safeAreaInset(edge: .leading, spacing: 0) {\n            SideBarContent()\n        }\n    }\n}\n"
  },
  {
    "title": "renameAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/renameaction(_:)-4lrtd",
    "html": "Parameters\nisFocused\n\nThe focus binding to update when activating the rename action.\n\nReturn Value\n\nA view that has the specified rename action.\n\nDiscussion\n\nUse this modifier in conjunction with the RenameButton to implement standard rename interactions. A rename button receives its action from the environment. Use this modifier to customize the action provided to the rename button.\n\nstruct RowView: View {\n    @State private var text = \"\"\n    @FocusState private var isFocused: Bool\n\n\n    var body: some View {\n        TextField(text: $item.name) {\n            Text(\"Prompt\")\n        }\n        .focused($isFocused)\n        .contextMenu {\n            RenameButton()\n            // ... your own custom actions\n        }\n        .renameAction($isFocused)\n}\n\n\nWhen someone taps the rename button in the context menu, the rename action focuses the text field by setting the isFocused property to true."
  },
  {
    "title": "fileDialogCustomizationID(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogcustomizationid(_:)",
    "html": "Parameters\nid\n\nAn identifier of the configuration.\n\nDiscussion\n\nAmong other parameters, it stores the current directory, view style (e.g., Icons, List, Columns), recent places, and expanded window size. It enables a refined user experience; for example, when importing an image, the user might switch to the Icons view, but the List view could be more convenient in another context. The file dialog stores these settings and applies them every time before presenting the panel. If not provided, on every launch, the file dialog uses the default configuration."
  },
  {
    "title": "renameAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/renameaction(_:)-77d9w",
    "html": "Parameters\naction\n\nA closure to run when renaming.\n\nReturn Value\n\nA view that has the specified rename action.\n\nDiscussion\n\nUse this modifier in conjunction with the RenameButton to implement standard rename interactions. A rename button receives its action from the environment. Use this modifier to customize the action provided to the rename button.\n\nstruct RowView: View {\n    @State private var text = \"\"\n    @FocusState private var isFocused: Bool\n\n\n    var body: some View {\n        TextField(text: $item.name) {\n            Text(\"Prompt\")\n        }\n        .focused($isFocused)\n        .contextMenu {\n            RenameButton()\n            // ... your own custom actions\n        }\n        .renameAction { isFocused = true }\n}\n\n\nWhen the user taps the rename button in the context menu, the rename action focuses the text field by setting the isFocused property to true."
  },
  {
    "title": "fileImporter(isPresented:allowedContentTypes:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nallowedContentTypes\n\nThe list of supported content types which can be imported.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, an application can have a button that allows the user to choose the default directory with document templates loaded on every launch. Such a button might look like this:\n\n struct PickTemplatesDirectoryButton: View {\n     @State private var showFileImporter = false\n     var onTemplatesDirectoryPicked: (URL) -> Void\n\n\n     var body: some View {\n         Button {\n             showFileImporter = true\n         } label: {\n             Label(\"Choose templates directory\", systemImage: \"folder.circle\")\n         }\n         .fileImporter(\n             isPresented: $showFileImporter,\n             allowedContentTypes: [.directory]\n         ) { result in\n              switch result {\n              case .success(let directory):\n                  // gain access to the directory\n                  let gotAccess = directory.startAccessingSecurityScopedResource()\n                  if !gotAccess { return }\n                  // access the directory URL\n                  // (read templates in the directory, make a bookmark, etc.)\n                  onTemplatesDirectoryPicked(directory)\n                  // release access\n                  directory.stopAccessingSecurityScopedResource()\n              case .failure(let error):\n                  // handle error\n                  print(error)\n              }\n         }\n     }\n }\n\n\nNote\n\nChanging allowedContentTypes while the file importer is presented will have no immediate effect, however will apply the next time it is presented."
  },
  {
    "title": "fileDialogURLEnabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogurlenabled(_:)",
    "html": "Parameters\npredicate\n\nThe predicate that evaluates the URLs presented to the user to conditionally disable them. The implementation is expected to have constant complexity and should not access the files contents or metadata. A common use case is inspecting the path or the file name."
  },
  {
    "title": "scenePadding(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scenepadding(_:edges:)",
    "html": "Parameters\npadding\n\nThe kind of padding to add.\n\nedges\n\nThe set of edges along which to pad this view.\n\nReturn Value\n\nA view that’s padded on specified edges by a scene-appropriate amount.\n\nDiscussion\n\nUse this modifier to add a scene-appropriate amount of padding to a view. Specify either a single edge value from Edge/Set, or an OptionSet that describes the edges to pad.\n\nIn macOS, use scene padding to produce the recommended spacing around the root view of a window. In watchOS, use scene padding to align elements of your user interface with top level elements, like the title of a navigation view. For example, compare the effects of different kinds of padding on text views presented inside a NavigationView in watchOS:\n\nVStack(alignment: .leading, spacing: 10) {\n    Text(\"Minimum Scene padding\")\n        .scenePadding(.minimum, edges: .horizontal)\n        .border(.red) // Border added for reference.\n    Text(\"Navigation Bar Scene padding\")\n        .scenePadding(.navigationBar, edges: .horizontal)\n        .border(.yellow)\n    Text(\"Regular padding\")\n        .padding(.horizontal)\n        .border(.green)\n    Text(\"Text with no padding\")\n        .border(.blue)\n    Button(\"Button\") { }\n}\n.navigationTitle(\"Hello World\")\n\n\nThe text with minimum scene padding uses the system minimum padding and the text with navigation bar scene padding automatically aligns with the navigation bar content. In contrast, the text that uses the default padding and the text without padding do not align with scene elements.\n\nScene padding in watchOS also ensures that your content avoids the curved edges of a device like Apple Watch Series 7. In other platforms, scene padding produces the same default padding that you get from the View/padding(_:_:) modifier.\n\nImportant\n\nScene padding doesn’t pad the top and bottom edges of a view in watchOS, even if you specify those edges as part of the input. For example, if you specify Edge/Set/vertical instead of Edge/Set/horizontal in the example above, the modifier would have no effect in watchOS. It does, however, apply to all the edges that you specify in other platforms."
  },
  {
    "title": "scaledToFit() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scaledtofit()",
    "html": "Return Value\n\nA view that scales this view to fit its parent, maintaining this view’s aspect ratio.\n\nDiscussion\n\nUse scaledToFit() to scale this view to fit its parent, while maintaining the view’s aspect ratio as the view scales.\n\nCircle()\n    .fill(Color.pink)\n    .scaledToFit()\n    .frame(width: 300, height: 150)\n    .border(Color(white: 0.75))\n\n\nThis method is equivalent to calling View/aspectRatio(_:contentMode:)-6j7xz with a nil aspectRatio and a content mode of ContentMode/fit."
  },
  {
    "title": "scenePadding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scenepadding(_:)",
    "html": "Parameters\nedges\n\nThe set of edges along which to pad this view.\n\nReturn Value\n\nA view that’s padded on specified edges by a scene-appropriate amount.\n\nDiscussion\n\nUse this modifier to add a scene-appropriate amount of padding to a view. Specify either a single edge value from Edge/Set, or an OptionSet that describes the edges to pad.\n\nIn macOS, use scene padding to produce the recommended spacing around the root view of a window. In watchOS, use scene padding to align elements of your user interface with top level elements, like the title of a navigation view. For example, compare the effects of different kinds of padding on text views presented inside a NavigationView in watchOS:\n\nVStack(alignment: .leading, spacing: 10) {\n    Text(\"Scene padding\")\n        .scenePadding(.horizontal)\n        .border(.red) // Border added for reference.\n    Text(\"Regular padding\")\n        .padding(.horizontal)\n        .border(.green)\n    Text(\"Text with no padding\")\n        .border(.blue)\n    Button(\"Button\") { }\n}\n.navigationTitle(\"Hello World\")\n\n\nThe text with scene padding automatically aligns with the title, unlike the text that uses the default padding or the text without padding:\n\nScene padding in watchOS also ensures that your content avoids the curved edges of a device like Apple Watch Series 7. In other platforms, scene padding produces the same default padding that you get from the View/padding(_:_:) modifier.\n\nImportant\n\nScene padding doesn’t pad the top and bottom edges of a view in watchOS, even if you specify those edges as part of the input. For example, if you specify Edge/Set/vertical instead of Edge/Set/horizontal in the example above, the modifier would have no effect in watchOS. It does, however, apply to all the edges that you specify in other platforms."
  },
  {
    "title": "scaleEffect(x:y:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scaleeffect(x:y:anchor:)",
    "html": "Parameters\nx\n\nAn amount that represents the horizontal amount to scale the view. The default value is 1.0.\n\ny\n\nAn amount that represents the vertical amount to scale the view. The default value is 1.0.\n\nanchor\n\nThe anchor point that indicates the starting position for the scale operation.\n\nDiscussion\n\nUse scaleEffect(x:y:anchor:) to apply a scaling transform to a view by a specific horizontal and vertical amount.\n\nImage(systemName: \"envelope.badge.fill\")\n    .resizable()\n    .frame(width: 100, height: 100, alignment: .center)\n    .foregroundColor(Color.red)\n    .scaleEffect(x: 0.5, y: 0.5, anchor: .bottomTrailing)\n    .border(Color.gray)\n"
  },
  {
    "title": "scaledToFill() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scaledtofill()",
    "html": "Return Value\n\nA view that scales this view to fill its parent, maintaining this view’s aspect ratio.\n\nDiscussion\n\nUse scaledToFill() to scale this view to fill its parent, while maintaining the view’s aspect ratio as the view scales:\n\nCircle()\n    .fill(Color.pink)\n    .scaledToFill()\n    .frame(width: 300, height: 150)\n    .border(Color(white: 0.75))\n\n\nThis method is equivalent to calling View/aspectRatio(_:contentMode:)-6j7xz with a nil aspectRatio and a content mode of ContentMode/fill."
  },
  {
    "title": "gesture(_:including:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/gesture(_:including:)",
    "html": "Parameters\ngesture\n\nA gesture to attach to the view.\n\nmask\n\nA value that controls how adding this gesture to the view affects other gestures recognized by the view and its subviews. Defaults to SwiftUI/GestureMask/all.\n\nDiscussion\n\nUse this method when you need to attach a gesture to a view. The example below defines a custom gesture that prints a message to the console and attaches it to the view’s VStack. Inside the VStack a red heart Image defines its own TapGesture handler that also prints a message to the console, and blue rectangle with no custom gesture handlers. Tapping or clicking the image prints a message to the console from the tap gesture handler on the image, while tapping or clicking the rectangle inside the VStack prints a message in the console from the enclosing vertical stack gesture handler.\n\nstruct GestureExample: View {\n    @State private var message = \"Message\"\n    let newGesture = TapGesture().onEnded {\n        print(\"Tap on VStack.\")\n    }\n\n\n    var body: some View {\n        VStack(spacing:25) {\n            Image(systemName: \"heart.fill\")\n                .resizable()\n                .frame(width: 75, height: 75)\n                .padding()\n                .foregroundColor(.red)\n                .onTapGesture {\n                    print(\"Tap on image.\")\n                }\n            Rectangle()\n                .fill(Color.blue)\n        }\n        .gesture(newGesture)\n        .frame(width: 200, height: 200)\n        .border(Color.purple)\n    }\n}\n"
  },
  {
    "title": "hidden() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/hidden()",
    "html": "Return Value\n\nA hidden view.\n\nDiscussion\n\nHidden views are invisible and can’t receive or respond to interactions. However, they do remain in the view hierarchy and affect layout. Use this modifier if you want to include a view for layout purposes, but don’t want it to display.\n\nHStack {\n    Image(systemName: \"a.circle.fill\")\n    Image(systemName: \"b.circle.fill\")\n    Image(systemName: \"c.circle.fill\")\n        .hidden()\n    Image(systemName: \"d.circle.fill\")\n}\n\n\nThe third circle takes up space, because it’s still present, but SwiftUI doesn’t draw it onscreen.\n\nIf you want to conditionally include a view in the view hierarchy, use an if statement instead:\n\nVStack {\n    HStack {\n        Image(systemName: \"a.circle.fill\")\n        Image(systemName: \"b.circle.fill\")\n        if !isHidden {\n            Image(systemName: \"c.circle.fill\")\n        }\n        Image(systemName: \"d.circle.fill\")\n    }\n    Toggle(\"Hide\", isOn: $isHidden)\n}\n\n\nDepending on the current value of the isHidden state variable in the example above, controlled by the Toggle instance, SwiftUI draws the circle or completely omits it from the layout."
  },
  {
    "title": "hoverEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/hovereffect(_:)",
    "html": "Parameters\neffect\n\nThe effect to apply to this view.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that applies a hover effect to self.\n\nDiscussion\n\nBy default, HoverEffect/automatic is used. You can control the behavior of the automatic effect with the View/defaultHoverEffect(_:) modifier."
  },
  {
    "title": "help(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/help(_:)-8u2lm",
    "html": "Parameters\ntext\n\nThe text to use as help.\n\nDiscussion\n\nAdding help to a view configures the view’s accessibility hint and its help tag (also called a tooltip) in macOS or visionOS. For more information on using help tags, see Offering help in the Human Interface Guidelines.\n\nImage(systemName: \"pin.circle\")\n    .foregroundColor(pointOfInterest.tintColor)\n    .help(pointOfInterest.name)\n"
  },
  {
    "title": "help(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/help(_:)-807cb",
    "html": "Parameters\ntext\n\nThe Text view to use as help.\n\nDiscussion\n\nAdding help to a view configures the view’s accessibility hint and its help tag (also called a tooltip) in macOS or visionOS. For more information on using help tags, see Offering help in the Human Interface Guidelines.\n\nSlider(\"Opacity\", value: $selectedShape.opacity)\n    .help(Text(\"Adjust the opacity of the selected \\(selectedShape.name)\"))\n"
  },
  {
    "title": "id(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/id(_:)",
    "html": "Discussion\n\nWhen the proxy value specified by the id parameter changes, the identity of the view — for example, its state — is reset."
  },
  {
    "title": "highPriorityGesture(_:including:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/highprioritygesture(_:including:)",
    "html": "Parameters\ngesture\n\nA gesture to attach to the view.\n\nmask\n\nA value that controls how adding this gesture to the view affects other gestures recognized by the view and its subviews. Defaults to SwiftUI/GestureMask/all.\n\nDiscussion\n\nUse this method when you need to define a high priority gesture to take precedence over the view’s existing gestures. The example below defines a custom gesture that prints a message to the console and attaches it to the view’s VStack. Inside the VStack a red heart Image defines its own TapGesture handler that also prints a message to the console, and a blue rectangle with no custom gesture handlers. Tapping or clicking any of the views results in a console message from the high priority gesture attached to the enclosing VStack.\n\nstruct HighPriorityGestureExample: View {\n    @State private var message = \"Message\"\n    let newGesture = TapGesture().onEnded {\n        print(\"Tap on VStack.\")\n    }\n\n\n    var body: some View {\n        VStack(spacing:25) {\n            Image(systemName: \"heart.fill\")\n                .resizable()\n                .frame(width: 75, height: 75)\n                .padding()\n                .foregroundColor(.red)\n                .onTapGesture {\n                    print(\"Tap on image.\")\n                }\n            Rectangle()\n                .fill(Color.blue)\n        }\n        .highPriorityGesture(newGesture)\n        .frame(width: 200, height: 200)\n        .border(Color.purple)\n    }\n}\n"
  },
  {
    "title": "hoverEffectDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/hovereffectdisabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean value that determines whether this view can display hover effects.\n\nReturn Value\n\nA view that controls whether hover effects can be displayed in this view.\n\nDiscussion\n\nThe higher views in a view hierarchy can override the value you set on this view. In the following example, the button does not display a hover effect because the outer hoverEffectDisabled(_:) modifier overrides the inner one:\n\nHStack {\n    Button(\"Press\") {}\n        .hoverEffectDisabled(false)\n}\n.hoverEffectDisabled(true)\n"
  },
  {
    "title": "hoverEffect(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/hovereffect(_:isenabled:)",
    "html": "Parameters\neffect\n\nThe effect to apply to this view.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that applies a hover effect to self.\n\nDiscussion\n\nBy default, HoverEffect/automatic is used. You can control the behavior of the automatic effect with the View/defaultHoverEffect(_:) modifier."
  },
  {
    "title": "hueRotation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/huerotation(_:)",
    "html": "Parameters\nangle\n\nThe hue rotation angle to apply to the colors in this view.\n\nReturn Value\n\nA view that applies a hue rotation effect to this view.\n\nDiscussion\n\nUse hue rotation effect to shift all of the colors in a view according to the angle you specify.\n\nThe example below shows a series of squares filled with a linear gradient. Each square shows the effect of a 36˚ hueRotation (a total of 180˚ across the 5 squares) on the gradient:\n\nstruct HueRotation: View {\n    var body: some View {\n        HStack {\n            ForEach(0..<6) {\n                Rectangle()\n                    .fill(.linearGradient(\n                        colors: [.blue, .red, .green],\n                        startPoint: .top, endPoint: .bottom))\n                    .hueRotation((.degrees(Double($0 * 36))))\n                    .frame(width: 60, height: 60, alignment: .center)\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "ignoresSafeArea(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/ignoressafearea(_:edges:)",
    "html": "Parameters\nregions\n\nthe kinds of rectangles removed from the safe area that should be ignored (i.e. added back to the safe area of the new child view).\n\nedges\n\nthe edges of the view that may be outset, any edges not in this set will be unchanged, even if that edge is abutting a safe area listed in regions.\n\nReturn Value\n\na new view with its safe area expanded."
  },
  {
    "title": "imageScale(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/imagescale(_:)",
    "html": "Parameters\nscale\n\nOne of the relative sizes provided by the image scale enumeration.\n\nDiscussion\n\nThe example below shows the relative scaling effect. The system renders the image at a relative size based on the available space and configuration options of the image it is scaling.\n\nVStack {\n    HStack {\n        Image(systemName: \"heart.fill\")\n            .imageScale(.small)\n        Text(\"Small\")\n    }\n    HStack {\n        Image(systemName: \"heart.fill\")\n            .imageScale(.medium)\n        Text(\"Medium\")\n    }\n\n\n    HStack {\n        Image(systemName: \"heart.fill\")\n            .imageScale(.large)\n        Text(\"Large\")\n    }\n}\n"
  },
  {
    "title": "headerProminence(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/headerprominence(_:)",
    "html": "Parameters\nprominence\n\nThe prominence to apply.\n\nDiscussion\n\nIn the following example, the section header appears with increased prominence:\n\nList {\n    Section(header: Text(\"Header\")) {\n        Text(\"Row\")\n    }\n    .headerProminence(.increased)\n}\n.listStyle(.insetGrouped)\n"
  },
  {
    "title": "focusedValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedvalue(_:_:)-2n168",
    "html": "Parameters\nkeyPath\n\nThe key path to associate value with when adding it to the existing table of exported focus values.\n\nvalue\n\nThe focus value to export, or nil if no value is currently available.\n\nReturn Value\n\nA modified representation of this view.\n\nDiscussion\n\nUse this method instead of View/focusedSceneValue(_:_:) when your scene includes multiple focusable views with their own associated values, and you need an app- or scene-scoped element like a command or toolbar item that operates on the value associated with whichever view currently has focus. Each focusable view can supply its own value:"
  },
  {
    "title": "focusedValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedvalue(_:_:)-6wuqk",
    "html": "Parameters\nkeyPath\n\nThe key path to associate value with when adding it to the existing table of exported focus values.\n\nvalue\n\nThe focus value to export.\n\nReturn Value\n\nA modified representation of this view."
  },
  {
    "title": "focused(_:equals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focused(_:equals:)",
    "html": "Parameters\nbinding\n\nThe state binding to register. When focus moves to the modified view, the binding sets the bound value to the corresponding match value. If a caller sets the state value programmatically to the matching value, then focus moves to the modified view. When focus leaves the modified view, the binding sets the bound value to nil. If a caller sets the value to nil, SwiftUI automatically dismisses focus.\n\nvalue\n\nThe value to match against when determining whether the binding should change.\n\nReturn Value\n\nThe modified view.\n\nDiscussion\n\nUse this modifier to cause the view to receive focus whenever the the binding equals the value. Typically, you create an enumeration of fields that may receive focus, bind an instance of this enumeration, and assign its cases to focusable views.\n\nThe following example uses the cases of a LoginForm enumeration to bind the focus state of two TextField views. A sign-in button validates the fields and sets the bound focusedField value to any field that requires the user to correct a problem.\n\nstruct LoginForm {\n    enum Field: Hashable {\n        case usernameField\n        case passwordField\n    }\n\n\n    @State private var username = \"\"\n    @State private var password = \"\"\n    @FocusState private var focusedField: Field?\n\n\n    var body: some View {\n        Form {\n            TextField(\"Username\", text: $username)\n                .focused($focusedField, equals: .usernameField)\n\n\n            SecureField(\"Password\", text: $password)\n                .focused($focusedField, equals: .passwordField)\n\n\n            Button(\"Sign In\") {\n                if username.isEmpty {\n                    focusedField = .usernameField\n                } else if password.isEmpty {\n                    focusedField = .passwordField\n                } else {\n                    handleLogin(username, password)\n                }\n            }\n        }\n    }\n}\n\n\nTo control focus using a Boolean, use the View/focused(_:) method instead."
  },
  {
    "title": "focusedObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focusedobject(_:)-4daun",
    "html": "Parameters\nobject\n\nThe observable object to associate with focus, or nil if no object is currently available.\n\nReturn Value\n\nA view that supplies an observable object when in focus.\n\nDiscussion\n\nUse this method instead of View/focusedSceneObject(_:) when your scene includes multiple focusable views with their own associated data, and you need an app- or scene-scoped element like a command or toolbar item that operates on the data associated with whichever view currently has focus. Each focusable view can supply its own object:\n\nstruct MessageView: View {\n    @StateObject private var message = Message(...)\n\n\n    var body: some View {\n        TextField(...)\n            .focusedObject(message)\n    }\n}\n\n\nInterested views can then use the FocusedObject property wrapper to observe and update the focused view’s object. In this example, an app command updates the focused view’s data, and is automatically disabled when focus is in an unrelated part of the scene:\n\nstruct MessageCommands: Commands {\n    @FocusedObject private var message: Message?\n\n\n    var body: some Commands {\n        CommandGroup(after: .pasteboard) {\n            Button(\"Add Duck to Message\") {\n                message?.text.append(\" 🦆\")\n            }\n            .keyboardShortcut(\"d\")\n            .disabled(message == nil)\n        }\n    }\n}\n"
  },
  {
    "title": "fileMover(isPresented:files:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filemover(ispresented:files:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\nfiles\n\nA collection of URLs for the files to be moved.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, a button that allows the user to move files might look like this:\n\n  struct MoveFilesButton: View {\n      @Binding var files: [URL]\n      @State private var showFileMover = false\n      var onCompletion: (URL) -> Void\n      var onCancellation: (() -> Void)?\n\n\n      var body: some View {\n          Button {\n              showFileMover = true\n          } label: {\n              Label(\"Choose destination\", systemImage: \"folder.circle\")\n          }\n          .fileMover(isPresented: $showFileMover, files: files) { result in\n              switch result {\n              case .success(let urls):\n                  urls.forEach { url in\n                      guard url.startAccessingSecurityScopedResource() else {\n                          return\n                      }\n                      onCompletion(url)\n                      url.stopAccessingSecurityScopedResource()\n                  }\n              case .failure(let error):\n                  print(error)\n                  // handle error\n              }\n          } onCancellation: {\n              onCancellation?()\n          }\n      }\n  }\n"
  },
  {
    "title": "findDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/finddisabled(_:)",
    "html": "Parameters\nisDisabled\n\nA Boolean value that indicates whether to disable the find and replace interface for a text editor.\n\nReturn Value\n\nA view that disables the find and replace interface.\n\nDiscussion\n\nAdd this modifier to ensure that people can’t activate the find and replace interface for a TextEditor:\n\nTextEditor(text: $text)\n    .findDisabled()\n\n\nWhen you disable the find operation, you also implicitly disable the replace operation. If you want to only disable replace, use View/replaceDisabled(_:) instead.\n\nUsing this modifer also prevents programmatic find and replace interface presentation using the View/findNavigator(isPresented:) method. Be sure to place the disabling modifier closer to the text editor for this to work:\n\nTextEditor(text: $text)\n    .findDisabled(isDisabled)\n    .findNavigator(isPresented: $isPresented)\n\n\nIf you apply this modifer at multiple levels of a view hierarchy, the call closest to the text editor takes precedence. For example, people can activate find and replace for the first text editor in the following example, but not the second:\n\nVStack {\n    TextEditor(text: $text1)\n        .findDisabled(false)\n    TextEditor(text: $text2)\n}\n.findDisabled(true)\n"
  },
  {
    "title": "fixedSize() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fixedsize()",
    "html": "Return Value\n\nA view that fixes this view at its ideal size.\n\nDiscussion\n\nDuring the layout of the view hierarchy, each view proposes a size to each child view it contains. If the child view doesn’t need a fixed size it can accept and conform to the size offered by the parent.\n\nFor example, a Text view placed in an explicitly sized frame wraps and truncates its string to remain within its parent’s bounds:\n\nText(\"A single line of text, too long to fit in a box.\")\n    .frame(width: 200, height: 200)\n    .border(Color.gray)\n\n\nThe fixedSize() modifier can be used to create a view that maintains the ideal size of its children both dimensions:\n\nText(\"A single line of text, too long to fit in a box.\")\n    .fixedSize()\n    .frame(width: 200, height: 200)\n    .border(Color.gray)\n\n\nThis can result in the view exceeding the parent’s bounds, which may or may not be the effect you want.\n\nYou can think of fixedSize() as the creation of a counter proposal to the view size proposed to a view by its parent. The ideal size of a view, and the specific effects of fixedSize() depends on the particular view and how you have configured it.\n\nTo create a view that fixes the view’s size in either the horizontal or vertical dimensions, see View/fixedSize(horizontal:vertical:)."
  },
  {
    "title": "findNavigator(isPresented:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/findnavigator(ispresented:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that controls the presentation of the find and replace interface.\n\nReturn Value\n\nA view that presents the find and replace interface when isPresented is true.\n\nDiscussion\n\nAdd this modifier to a TextEditor, or to a view hierarchy that contains at least one text editor, to control the presentation of the find and replace interface. When you set the isPresented binding to true, the system shows the interface, and when you set it to false, the system hides the interface. The following example shows and hides the interface based on the state of a toolbar button:\n\nTextEditor(text: $text)\n    .findNavigator(isPresented: $isPresented)\n    .toolbar {\n        Toggle(isOn: $isPresented) {\n            Label(\"Find\", systemImage: \"magnifyingglass\")\n        }\n    }\n\n\nThe find and replace interface allows people to search for instances of a specified string in the text editor, and optionally to replace instances of the search string with another string. They can also show and hide the interface using built-in controls, like menus and keyboard shortcuts. SwiftUI updates isPresented to reflect the users’s actions.\n\nIf the text editor view isn’t currently in focus, the system still presents the find and replace interface when you set isPresented to true. If the view hierarchy contains multiple editors, the one that shows the find and replace interface is nondeterministic.\n\nYou can disable the find and replace interface for a text editor by applying the View/findDisabled(_:) modifier to the editor. If you do that, setting this modifier’s isPresented binding to true has no effect, but only if the disabling modifier appears closer to the text editor, like this:\n\nTextEditor(text: $text)\n    .findDisabled(isDisabled)\n    .findNavigator(isPresented: $isPresented)\n"
  },
  {
    "title": "fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nitems\n\nCollection of values to be saved on disk.\n\ncontentTypes\n\nThe content types to use for the exported file. If empty, SwiftUI uses the content types from the transferRepresentation property provided for Transferable conformance.\n\nallowsOtherContentTypes\n\nA Boolean value that indicates if the users are allowed to save the files with a different file extension than specified by the contentType property.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the operation was cancelled.\n\nDiscussion\n\nIn order for the interface to appear isPresented must be set to true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called."
  },
  {
    "title": "focused(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/focused(_:)",
    "html": "Parameters\ncondition\n\nThe focus state to bind. When focus moves to the view, the binding sets the bound value to true. If a caller sets the value to true programmatically, then focus moves to the modified view. When focus leaves the modified view, the binding sets the value to false. If a caller sets the value to false, SwiftUI automatically dismisses focus.\n\nReturn Value\n\nThe modified view.\n\nDiscussion\n\nUse this modifier to cause the view to receive focus whenever the the condition value is true. You can use this modifier to observe the focus state of a single view, or programmatically set and remove focus from the view.\n\nIn the following example, a single TextField accepts a user’s desired username. The text field binds its focus state to the Boolean value usernameFieldIsFocused. A “Submit” button’s action verifies whether the name is available. If the name is unavailable, the button sets usernameFieldIsFocused to true, which causes focus to return to the text field, so the user can enter a different name.\n\n@State private var username: String = \"\"\n@FocusState private var usernameFieldIsFocused: Bool\n@State private var showUsernameTaken = false\n\n\nvar body: some View {\n    VStack {\n        TextField(\"Choose a username.\", text: $username)\n            .focused($usernameFieldIsFocused)\n        if showUsernameTaken {\n            Text(\"That username is taken. Please choose another.\")\n        }\n        Button(\"Submit\") {\n            showUsernameTaken = false\n            if !isUserNameAvailable(username: username) {\n                usernameFieldIsFocused = true\n                showUsernameTaken = true\n            }\n        }\n    }\n}\n\n\nTo control focus by matching a value, use the View/focused(_:equals:) method instead."
  },
  {
    "title": "fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\nallowedContentTypes\n\nThe list of supported content types which can be imported.\n\nallowsMultipleSelection\n\nWhether the importer allows the user to select more than one file to import.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the dialog to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, a button that allows the user to choose multiple PDF files for the application to combine them later, might look like this:\n\n   struct PickPDFsButton: View {\n       @State private var showFileImporter = false\n       var handlePickedPDF: (URL) -> Void\n\n\n       var body: some View {\n           Button {\n               showFileImporter = true\n           } label: {\n               Label(\"Choose PDFs to combine\", systemImage: \"doc.circle\")\n           }\n           .fileImporter(\n               isPresented: $showFileImporter,\n               allowedContentTypes: [.pdf],\n               allowsMultipleSelection: true\n           ) { result in\n               switch result {\n               case .success(let files):\n                   files.forEach { file in\n                       // gain access to the directory\n                       let gotAccess = file.startAccessingSecurityScopedResource()\n                       if !gotAccess { return }\n                       // access the directory URL\n                       // (read templates in the directory, make a bookmark, etc.)\n                       handlePickedPDF(file)\n                       // release access\n                       file.stopAccessingSecurityScopedResource()\n                   }\n               case .failure(let error):\n                   // handle error\n                   print(error)\n               }\n           }\n       }\n   }\n\n\nNote\n\nChanging allowedContentTypes or allowsMultipleSelection while the file importer is presented will have no immediate effect, however will apply the next time it is presented."
  },
  {
    "title": "fileExporterFilenameLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporterfilenamelabel(_:)-39eov",
    "html": "Parameters\nlabel\n\nThe optional text to use as the label for the file name field."
  },
  {
    "title": "fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nallowedContentTypes\n\nThe list of supported content types which can be imported.\n\nallowsMultipleSelection\n\nWhether the importer allows the user to select more than one file to import.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. To access the received URLs, call startAccessingSecurityScopedResource. When the access is no longer required, call stopAccessingSecurityScopedResource.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nNote\n\nThis dialog provides security-scoped URLs. Call the startAccessingSecurityScopedResource method to access or bookmark the URLs, and the stopAccessingSecurityScopedResource method to release the access.\n\nFor example, a button that allows the user to choose multiple PDF files for the application to combine them later, might look like this:\n\n   struct PickPDFsButton: View {\n       @State private var showFileImporter = false\n       var handlePickedPDF: (URL) -> Void\n\n\n       var body: some View {\n           Button {\n               showFileImporter = true\n           } label: {\n               Label(\"Choose PDFs to combine\", systemImage: \"doc.circle\")\n           }\n           .fileImporter(\n               isPresented: $showFileImporter,\n               allowedContentTypes: [.pdf],\n               allowsMultipleSelection: true\n           ) { result in\n               switch result {\n               case .success(let files):\n                   files.forEach { file in\n                       // gain access to the directory\n                       let gotAccess = file.startAccessingSecurityScopedResource()\n                       if !gotAccess { return }\n                       // access the directory URL\n                       // (read templates in the directory, make a bookmark, etc.)\n                       handlePickedPDF(file)\n                       // release access\n                       file.stopAccessingSecurityScopedResource()\n                   }\n               case .failure(let error):\n                   // handle error\n                   print(error)\n               }\n           }\n       }\n   }\n\n\nNote\n\nChanging allowedContentTypes or allowsMultipleSelection while the file importer is presented will have no immediate effect, however will apply the next time it is presented."
  },
  {
    "title": "fileExporterFilenameLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporterfilenamelabel(_:)-9kgi8",
    "html": "Parameters\nlabel\n\nThe string to use as the label for the file name field."
  },
  {
    "title": "fileExporterFilenameLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporterfilenamelabel(_:)-27d72",
    "html": "Parameters\nlabelKey\n\nThe key to a localized string to display."
  },
  {
    "title": "fileDialogConfirmationLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogconfirmationlabel(_:)-6mdrq",
    "html": "Parameters\nlabelKey\n\nThe key to a localized string to display."
  },
  {
    "title": "fileDialogConfirmationLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogconfirmationlabel(_:)-7sc2z",
    "html": "Parameters\nlabel\n\nThe string to use as the label for the confirmation button."
  },
  {
    "title": "fileDialogConfirmationLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogconfirmationlabel(_:)-5act7",
    "html": "Parameters\nlabel\n\nThe optional text to use as the label for the confirmation button."
  },
  {
    "title": "fileExporter(isPresented:documents:contentType:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:documents:contenttype:oncompletion:)-4inyk",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocuments\n\nThe collection of in-memory documents to export.\n\ncontentType\n\nThe content type to use for the exported file.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and documents must not be empty. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nThe contentType provided must be included within the document type’s writableContentTypes, otherwise the first valid writable content type will be used instead."
  },
  {
    "title": "fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-4xyn2",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocument\n\nThe in-memory document to export.\n\ncontentTypes\n\nThe list of supported content types which can be exported. If not provided, FileDocument.writableContentTypes are used.\n\ndefaultFilename\n\nIf provided, the default name to use for the exported file, which will the user will have an opportunity to edit prior to the export.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the interface to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCancellation will be called."
  },
  {
    "title": "fileExporter(isPresented:documents:contentType:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:documents:contenttype:oncompletion:)-8m68r",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocuments\n\nThe collection of in-memory documents to export.\n\ncontentType\n\nThe content type to use for the exported file.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and documents must not be empty. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nThe contentType provided must be included within the document type’s writableContentTypes, otherwise the first valid writable content type will be used instead."
  },
  {
    "title": "fileDialogDefaultDirectory(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogdefaultdirectory(_:)",
    "html": "Parameters\ndefaultDirectory\n\nThe directory to show when the system file dialog launches. If the given file dialog has a fileDialogCustomizationID if stores the user-chosen directory and subsequently opens with it, ignoring the default value provided in this modifier."
  },
  {
    "title": "fileDialogMessage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogmessage(_:)-8eir2",
    "html": "Parameters\nmessage\n\nThe string to use as the file dialog message."
  },
  {
    "title": "fileExporter(isPresented:document:contentType:defaultFilename:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5aiwm",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocument\n\nThe in-memory document to export.\n\ncontentType\n\nThe content type to use for the exported file.\n\ndefaultFilename\n\nIf provided, the default name to use for the exported file, which will the user will have an opportunity to edit prior to the export.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and document must not be nil. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nThe contentType provided must be included within the document type’s writableContentTypes, otherwise the first valid writable content type will be used instead."
  },
  {
    "title": "fileExporter(isPresented:document:contentType:defaultFilename:onCompletion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4l7yk",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\ndocument\n\nThe in-memory document to export.\n\ncontentType\n\nThe content type to use for the exported file.\n\ndefaultFilename\n\nIf provided, the default name to use for the exported file, which will the user will have an opportunity to edit prior to the export.\n\nonCompletion\n\nA callback that will be invoked when the operation has has succeeded or failed.\n\nresult\n\nA Result indicating whether the operation succeeded or failed.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and document must not be nil. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called.\n\nThe contentType provided must be included within the document type’s writableContentTypes, otherwise the first valid writable content type will be used instead."
  },
  {
    "title": "fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6utak",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\ndocument\n\nThe in-memory document to export.\n\ncontentTypes\n\nThe list of supported content types which can be exported. If not provided, ReferenceFileDocument.writableContentTypes are used.\n\ndefaultFilename\n\nIf provided, the default name to use for the exported file, which will the user will have an opportunity to edit prior to the export.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the dialog to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCancellation will be called."
  },
  {
    "title": "fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-99rsk",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\ndocuments\n\nThe in-memory documents to export.\n\ncontentTypes\n\nThe list of supported content types which can be exported. If not provided, ReferenceFileDocument.writableContentTypes are used.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the dialog to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCancellation will be called."
  },
  {
    "title": "fileDialogMessage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogmessage(_:)-2sh0y",
    "html": "Parameters\nmessage\n\nThe optional text to use as the file dialog message."
  },
  {
    "title": "fileDialogImportsUnresolvedAliases(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogimportsunresolvedaliases(_:)",
    "html": "Parameters\nimports\n\nA Boolean value that indicates if the application receives unresolved or resolved URLs when a user chooses aliases.\n\nDiscussion\n\nBy default, file dialogs resolve aliases and provide the URL of the item referred to by the chosen alias. This modifier allows control of this behavior: pass true if the application doesn’t want file dialog to resolve aliases."
  },
  {
    "title": "fileDialogMessage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogmessage(_:)-98muc",
    "html": "Parameters\nmessageKey\n\nThe key to a localized string to display."
  },
  {
    "title": "safeAreaPadding(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/safeareapadding(_:_:)",
    "html": "Discussion\n\nUse this modifier when you would like to add a fixed amount of space to the safe area a view sees.\n\nScrollView(.horizontal) {\n    HStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nSee the View/safeAreaInset(edge:alignment:spacing:content) modifier for adding to the safe area based on the size of a view."
  },
  {
    "title": "safeAreaPadding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/safeareapadding(_:)-szod",
    "html": "Discussion\n\nUse this modifier when you would like to add a fixed amount of space to the safe area a view sees.\n\nScrollView(.horizontal) {\n    HStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nSee the View/safeAreaInset(edge:alignment:spacing:content) modifier for adding to the safe area based on the size of a view."
  },
  {
    "title": "scaleEffect(_:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scaleeffect(_:anchor:)-3u552",
    "html": "Parameters\ns\n\nThe amount to scale the view in the view in both the horizontal and vertical directions.\n\nanchor\n\nThe anchor point with a default of UnitPoint/center that indicates the starting position for the scale operation.\n\nDiscussion\n\nUse scaleEffect(_:anchor:) to apply a horizontally and vertically scaling transform to a view.\n\nImage(systemName: \"envelope.badge.fill\")\n    .resizable()\n    .frame(width: 100, height: 100, alignment: .center)\n    .foregroundColor(Color.red)\n    .scaleEffect(2, anchor: .leading)\n    .border(Color.gray)\n"
  },
  {
    "title": "scaleEffect(_:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scaleeffect(_:anchor:)-7xyx",
    "html": "Parameters\nscale\n\nA CGSize that represents the horizontal and vertical amount to scale the view.\n\nanchor\n\nThe point with a default of UnitPoint/center that defines the location within the view from which to apply the transformation.\n\nDiscussion\n\nUse scaleEffect(_:anchor:) to scale a view by applying a scaling transform of a specific size, specified by scale.\n\nImage(systemName: \"envelope.badge.fill\")\n    .resizable()\n    .frame(width: 100, height: 100, alignment: .center)\n    .foregroundColor(Color.red)\n    .scaleEffect(CGSize(x: 0.9, y: 1.3), anchor: .leading)\n    .border(Color.gray)\n"
  },
  {
    "title": "scaledToFit() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scaledtofit()",
    "html": "Return Value\n\nA view that scales this view to fit its parent, maintaining this view’s aspect ratio.\n\nDiscussion\n\nUse scaledToFit() to scale this view to fit its parent, while maintaining the view’s aspect ratio as the view scales.\n\nCircle()\n    .fill(Color.pink)\n    .scaledToFit()\n    .frame(width: 300, height: 150)\n    .border(Color(white: 0.75))\n\n\nThis method is equivalent to calling View/aspectRatio(_:contentMode:)-6j7xz with a nil aspectRatio and a content mode of ContentMode/fit."
  },
  {
    "title": "scaledToFill() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scaledtofill()",
    "html": "Return Value\n\nA view that scales this view to fill its parent, maintaining this view’s aspect ratio.\n\nDiscussion\n\nUse scaledToFill() to scale this view to fill its parent, while maintaining the view’s aspect ratio as the view scales:\n\nCircle()\n    .fill(Color.pink)\n    .scaledToFill()\n    .frame(width: 300, height: 150)\n    .border(Color(white: 0.75))\n\n\nThis method is equivalent to calling View/aspectRatio(_:contentMode:)-6j7xz with a nil aspectRatio and a content mode of ContentMode/fill."
  },
  {
    "title": "scaleEffect(x:y:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scaleeffect(x:y:anchor:)",
    "html": "Parameters\nx\n\nAn amount that represents the horizontal amount to scale the view. The default value is 1.0.\n\ny\n\nAn amount that represents the vertical amount to scale the view. The default value is 1.0.\n\nanchor\n\nThe anchor point that indicates the starting position for the scale operation.\n\nDiscussion\n\nUse scaleEffect(x:y:anchor:) to apply a scaling transform to a view by a specific horizontal and vertical amount.\n\nImage(systemName: \"envelope.badge.fill\")\n    .resizable()\n    .frame(width: 100, height: 100, alignment: .center)\n    .foregroundColor(Color.red)\n    .scaleEffect(x: 0.5, y: 0.5, anchor: .bottomTrailing)\n    .border(Color.gray)\n"
  },
  {
    "title": "dropDestination(for:action:isTargeted:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/dropdestination(for:action:istargeted:)",
    "html": "Parameters\npayloadType\n\nThe expected type of the dropped models.\n\naction\n\nA closure that takes the dropped content and responds appropriately. The first parameter to action contains the dropped items. The second parameter contains the drop location in this view’s coordinate space. Return true if the drop operation was successful; otherwise, return false.\n\nisTargeted\n\nA closure that is called when a drag and drop operation enters or exits the drop target area. The received value is true when the cursor is inside the area, and false when the cursor is outside.\n\nReturn Value\n\nA view that provides a drop destination for a drag operation of the specified type.\n\nDiscussion\n\nThe dropped content can be provided as binary data, file URLs, or file promises.\n\nThe drop destination is the same size and position as this view.\n\n@State private var isDropTargeted = false\n\n\nvar body: some View {\n    Color.pink\n        .frame(width: 400, height: 400)\n        .dropDestination(for: String.self) { receivedTitles, location in\n            animateDrop(at: location)\n            process(titles: receivedTitles)\n        } isTargeted: {\n            isDropTargeted = $0\n        }\n}\n\n\nfunc process(titles: [String]) { ... }\nfunc animateDrop(at: CGPoint) { ... }\n"
  },
  {
    "title": "fileDialogBrowserOptions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/filedialogbrowseroptions(_:)",
    "html": "Parameters\noptions\n\nThe search options to apply to a given file dialog."
  },
  {
    "title": "dynamicTypeSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/dynamictypesize(_:)",
    "html": "Parameters\nsize\n\nThe size to set for this view.\n\nReturn Value\n\nA view that sets the Dynamic Type size to the specified size.\n\nDiscussion\n\nAs an example, you can set a Dynamic Type size in ContentView to be DynamicTypeSize/xLarge (this can be useful in previews to see your content at a different size) like this:\n\nContentView()\n    .dynamicTypeSize(.xLarge)\n\n\nIf a Dynamic Type size range is applied after setting a value, the value is limited by that range:\n\nContentView() // Dynamic Type size will be .large\n    .dynamicTypeSize(...DynamicTypeSize.large)\n    .dynamicTypeSize(.xLarge)\n\n\nWhen limiting the Dynamic Type size, consider if adding a large content view with View/accessibilityShowsLargeContentViewer() would be appropriate."
  },
  {
    "title": "environment(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/environment(_:)",
    "html": "Parameters\nobject\n\nThe object to set for this object’s type in the environment, or nil to clear an object of this type from the environment.\n\nReturn Value\n\nA view that has the specified object in its environment.\n\nDiscussion\n\nUse this modifier to place an object that you declare with the Observable() macro into a view’s environment. For example, you can add an instance of a custom observable Profile class to the environment of a ContentView:\n\n@Observable class Profile { ... }\n\n\nstruct RootView: View {\n    @State private var currentProfile: Profile?\n\n\n    var body: some View {\n        ContentView()\n            .environment(currentProfile)\n    }\n}\n\n\nYou then read the object inside ContentView or one of its descendants using the Environment property wrapper:\n\nstruct ContentView: View {\n    @Environment(Profile.self) private var currentProfile: Profile\n\n\n    var body: some View { ... }\n}\n\n\nThis modifier affects the given view, as well as that view’s descendant views. It has no effect outside the view hierarchy on which you call it. The environment of a given view hierarchy holds only one observable object of a given type.\n\nNote\n\nThis modifier takes an object that conforms to the Observable protocol. To add environment objects that conform to the ObservableObject protocol, use View/environmentObject(_:) instead."
  },
  {
    "title": "scrollBounceBehavior(_:axes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrollbouncebehavior(_:axes:)",
    "html": "Parameters\nbehavior\n\nThe bounce behavior to apply to any scrollable views within the configured view. Use one of the ScrollBounceBehavior values.\n\naxes\n\nThe set of axes to apply behavior to. The default is Axis/vertical.\n\nReturn Value\n\nA view that’s configured with the specified scroll bounce behavior.\n\nDiscussion\n\nUse this modifier to indicate whether scrollable views bounce when people scroll to the end of the view’s content, taking into account the relative sizes of the view and its content. For example, the following ScrollView only enables bounce behavior if its content is large enough to require scrolling:\n\nScrollView {\n    Text(\"Small\")\n    Text(\"Content\")\n}\n.scrollBounceBehavior(.basedOnSize)\n\n\nThe modifier passes the scroll bounce mode through the Environment, which means that the mode affects any scrollable views in the modified view hierarchy. Provide an axis to the modifier to constrain the kinds of scrollable views that the mode affects. For example, all the scroll views in the following example can access the mode value, but only the two nested scroll views are affected, because only they use horizontal scrolling:\n\nScrollView { // Defaults to vertical scrolling.\n    ScrollView(.horizontal) {\n        ShelfContent()\n    }\n    ScrollView(.horizontal) {\n        ShelfContent()\n    }\n}\n.scrollBounceBehavior(.basedOnSize, axes: .horizontal)\n\n\nYou can use this modifier to configure any kind of scrollable view, including ScrollView, List, Table, and TextEditor:\n\nList {\n    Text(\"Hello\")\n    Text(\"World\")\n}\n.scrollBounceBehavior(.basedOnSize)\n"
  },
  {
    "title": "edgesIgnoringSafeArea(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/edgesignoringsafearea(_:)",
    "html": "Parameters\nedges\n\nThe set of the edges in which to expand the size requested for this view.\n\nReturn Value\n\nA view that may extend outside of the screen’s safe area on the edges specified by edges.\n\nDiscussion\n\nUse edgesIgnoringSafeArea(_:) to change the area proposed for this view so that — were the proposal accepted — this view could extend outside the safe area to the bounds of the screen for the specified edges.\n\nFor example, you can propose that a text view ignore the safe area’s top inset:\n\nVStack {\n    Text(\"This text is outside of the top safe area.\")\n        .edgesIgnoringSafeArea([.top])\n        .border(Color.purple)\n    Text(\"This text is inside VStack.\")\n        .border(Color.yellow)\n}\n.border(Color.gray)\n\n\nDepending on the surrounding view hierarchy, SwiftUI may not honor an edgesIgnoringSafeArea(_:) request. This can happen, for example, if the view is inside a container that respects the screen’s safe area. In that case you may need to apply edgesIgnoringSafeArea(_:) to the container instead."
  },
  {
    "title": "scrollClipDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrollclipdisabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean value that specifies whether to disable scroll view clipping.\n\nReturn Value\n\nA view that disables or enables scroll view clipping.\n\nDiscussion\n\nBy default, a scroll view clips its content to its bounds, but you can disable that behavior by using this modifier. For example, if the views inside the scroll view have shadows that extend beyond the bounds of the scroll view, you can use this modifier to avoid clipping the shadows:\n\nstruct ContentView: View {\n    var disabled: Bool\n    let colors: [Color] = [.red, .green, .blue, .mint, .teal]\n\n\n    var body: some View {\n        ScrollView(.horizontal) {\n            HStack(spacing: 20) {\n                ForEach(colors, id: \\.self) { color in\n                    Rectangle()\n                        .frame(width: 100, height: 100)\n                        .foregroundStyle(color)\n                        .shadow(color: .primary, radius: 20)\n                }\n            }\n        }\n        .scrollClipDisabled(disabled)\n    }\n}\n\n\nThe scroll view in the above example clips when the content view’s disabled input is false, as it does if you omit the modifier, but not when the input is true:\n\nTrue\nFalse\n\nWhile you might want to avoid clipping parts of views that exceed the bounds of the scroll view, like the shadows in the above example, you typically still want the scroll view to clip at some point. Create custom clipping by using the View/clipShape(_:style:) modifier to add a different clip shape. The following code disables the default clipping and then adds rectangular clipping that exceeds the bounds of the scroll view by the default padding amount:\n\nScrollView(.horizontal) {\n    // ...\n}\n.scrollClipDisabled()\n.padding()\n.clipShape(Rectangle())\n"
  },
  {
    "title": "scrollDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrolldisabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean that indicates whether scrolling is disabled.\n\nDiscussion\n\nUse this modifier to control whether a ScrollView can scroll:\n\n@State private var isScrollDisabled = false\n\n\nvar body: some View {\n    ScrollView {\n        VStack {\n            Toggle(\"Disable\", isOn: $isScrollDisabled)\n            MyContent()\n        }\n    }\n    .scrollDisabled(isScrollDisabled)\n}\n\n\nSwiftUI passes the disabled property through the environment, which means you can use this modifier to disable scrolling for all scroll views within a view hierarchy. In the following example, the modifier affects both scroll views:\n\n ScrollView {\n     ForEach(rows) { row in\n         ScrollView(.horizontal) {\n             RowContent(row)\n         }\n     }\n }\n .scrollDisabled(true)\n\n\nYou can also use this modifier to disable scrolling for other kinds of scrollable views, like a List or a TextEditor."
  },
  {
    "title": "scrollIndicators(_:axes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrollindicators(_:axes:)",
    "html": "Parameters\nvisibility\n\nThe visibility to apply to scrollable views.\n\naxes\n\nThe axes of scrollable views that the visibility applies to.\n\nReturn Value\n\nA view with the specified scroll indicator visibility.\n\nDiscussion\n\nUse this modifier to hide or show scroll indicators on scrollable content in views like a ScrollView, List, or TextEditor. This modifier applies the prefered visibility to any scrollable content within a view hierarchy.\n\nScrollView {\n    VStack(alignment: .leading) {\n        ForEach(0..<100) {\n            Text(\"Row \\($0)\")\n        }\n    }\n}\n.scrollIndicators(.hidden)\n\n\nUse the ScrollIndicatorVisibility/hidden value to indicate that you prefer that views never show scroll indicators along a given axis. Use ScrollIndicatorVisibility/visible when you prefer that views show scroll indicators. Depending on platform conventions, visible scroll indicators might only appear while scrolling. Pass ScrollIndicatorVisibility/automatic to allow views to decide whether or not to show their indicators."
  },
  {
    "title": "scrollContentBackground(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrollcontentbackground(_:)",
    "html": "Parameters\nvisibility\n\nthe visibility to use for the background.\n\nDiscussion\n\nThe following example hides the standard system background of the List.\n\nList {\n    Text(\"One\")\n    Text(\"Two\")\n    Text(\"Three\")\n}\n.scrollContentBackground(.hidden)\n"
  },
  {
    "title": "scrollDismissesKeyboard(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrolldismisseskeyboard(_:)",
    "html": "Parameters\nmode\n\nThe keyboard dismissal mode that scrollable content uses.\n\nReturn Value\n\nA view that uses the specified keyboard dismissal mode.\n\nDiscussion\n\nYou use this modifier to customize how scrollable content interacts with the software keyboard. For example, you can specify a value of ScrollDismissesKeyboardMode/immediately to indicate that you would like scrollable content to immediately dismiss the keyboard if present when a scroll drag gesture begins.\n\n@State private var text = \"\"\n\n\nScrollView {\n    TextField(\"Prompt\", text: $text)\n    ForEach(0 ..< 50) { index in\n        Text(\"\\(index)\")\n            .padding()\n    }\n}\n.scrollDismissesKeyboard(.immediately)\n\n\nYou can also use this modifier to customize the keyboard dismissal behavior for other kinds of scrollable views, like a List or a TextEditor.\n\nBy default, a TextEditor is interactive while other kinds of scrollable content always dismiss the keyboard on a scroll when linked against iOS 16 or later. Pass a value of ScrollDismissesKeyboardMode/never to indicate that scrollable content should never automatically dismiss the keyboard."
  },
  {
    "title": "defaultScrollAnchor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/defaultscrollanchor(_:)",
    "html": "Discussion\n\nUse this modifier to specify an anchor to control both which part of the scroll view’s content should be visible initially and how the scroll view handles content size changes.\n\nProvide a value of `UnitPoint/center`` to have the scroll view start in the center of its content when a scroll view is scrollable in both axes.\n\nScrollView([.horizontal, .vertical]) {\n    // initially centered content\n}\n.defaultScrollAnchor(.center)\n\n\nProvide a value of UnitPoint/bottom to have the scroll view start at the bottom of its content when scrollable in the vertical axis.\n\n@Binding var items: [Item]\n@Binding var scrolledID: Item.ID?\n\n\nScrollView {\n    LazyVStack {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n}\n.defaultScrollAnchor(.bottom)\n\n\nThe user may scroll away from the initial defined scroll position. When the content size of the scroll view changes, it may consult the anchor to know how to reposition the content."
  },
  {
    "title": "scrollIndicatorsFlash(onAppear:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrollindicatorsflash(onappear:)",
    "html": "Parameters\nonAppear\n\nA Boolean value that indicates whether the scroll indicators flash when the scroll view appears.\n\nReturn Value\n\nA view that flashes any visible scroll indicators when it first appears.\n\nDiscussion\n\nUse this modifier to control whether the scroll indicators of a scroll view briefly flash when the view first appears. For example, you can make the indicators flash by setting the onAppear parameter to true:\n\nScrollView {\n    // ...\n}\n.scrollIndicatorsFlash(onAppear: true)\n\n\nOnly scroll indicators that you configure to be visible flash. To flash scroll indicators when a value changes, use View/scrollIndicatorsFlash(trigger:) instead."
  },
  {
    "title": "draggable(_:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/draggable(_:preview:)",
    "html": "Parameters\npayload\n\nA closure that returns a single class instance or a value conforming to Transferable that represents the draggable data from this view.\n\npreview\n\nA View to use as the source for the dragging preview, once the drag operation has begun. The preview is centered over the source view.\n\nReturn Value\n\nA view that activates this view as the source of a drag and drop operation, beginning with user gesture input.\n\nDiscussion\n\nApplying the draggable(_:preview:) modifier adds the appropriate gestures for drag and drop to this view. When a drag operation begins, a rendering of preview is generated and used as the preview image.\n\nvar title: String\nvar body: some View {\n    Color.pink\n        .frame(width: 400, height: 400)\n        .draggable(title) {\n             Text(\"Drop me\")\n         }\n}\n"
  },
  {
    "title": "scrollIndicatorsFlash(trigger:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrollindicatorsflash(trigger:)",
    "html": "Parameters\nvalue\n\nThe value that causes scroll indicators to flash. The value must conform to the Equatable protocol.\n\nReturn Value\n\nA view that flashes any visible scroll indicators when a value changes.\n\nDiscussion\n\nWhen the value that you provide to this modifier changes, the scroll indicators of any scrollable views within the modified view hierarchy briefly flash. The following example configures the scroll indicators to flash any time flashCount changes:\n\n@State private var isPresented = false\n@State private var flashCount = 0\n\n\nScrollView {\n    // ...\n}\n.scrollIndicatorsFlash(trigger: flashCount)\n.sheet(isPresented: $isPresented) {\n    // ...\n}\n.onChange(of: isPresented) { newValue in\n    if newValue {\n        flashCount += 1\n    }\n}\n\n\nOnly scroll indicators that you configure to be visible flash. To flash scroll indicators when a scroll view initially appears, use View/scrollIndicatorsFlash(onAppear:) instead."
  },
  {
    "title": "drawingGroup(opaque:colorMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/drawinggroup(opaque:colormode:)",
    "html": "Parameters\nopaque\n\nA Boolean value that indicates whether the image is opaque. The default is false; if set to true, the alpha channel of the image must be 1.\n\ncolorMode\n\nOne of the working color space and storage formats defined in ColorRenderingMode. The default is ColorRenderingMode/nonLinear.\n\nReturn Value\n\nA view that composites this view’s contents into an offscreen image before display.\n\nDiscussion\n\nThe drawingGroup(opaque:colorMode:) modifier flattens a subtree of views into a single view before rendering it.\n\nIn the example below, the contents of the view are composited to a single bitmap; the bitmap is then displayed in place of the view:\n\nVStack {\n    ZStack {\n        Text(\"DrawingGroup\")\n            .foregroundColor(.black)\n            .padding(20)\n            .background(Color.red)\n        Text(\"DrawingGroup\")\n            .blur(radius: 2)\n    }\n    .font(.largeTitle)\n    .compositingGroup()\n    .opacity(1.0)\n}\n .background(Color.white)\n .drawingGroup()\n\n\nNote\n\nViews backed by native platform views may not render into the image. Instead, they log a warning and display a placeholder image to highlight the error."
  },
  {
    "title": "defersSystemGestures(on:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/deferssystemgestures(on:)",
    "html": "Parameters\nedges\n\nA value that indicates the screen edge from which you want your gesture to take precedence over the system gesture.\n\nDiscussion\n\nThe following code defers the vertical screen edges system gestures of a given canvas.\n\nstruct DeferredView: View {\n    var body: some View {\n        Canvas()\n            .defersSystemGestures(on: .vertical)\n    }\n}\n"
  },
  {
    "title": "dialogIcon(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/dialogicon(_:)",
    "html": "Parameters\nicon\n\nThe custom icon to use for confirmation dialogs and alerts. Passing nil will use the default app icon.\n\nDiscussion\n\nOn macOS, this icon replaces the default icon of the app.\n\nOn watchOS, this icon will be shown in any dialogs presented.\n\nThis modifier has no effect on other platforms.\n\nThe following example configures a confirmationDialog with a custom image.\n\nButton(\"Delete items\") {\n    isShowingDialog = true\n}\n.confirmationDialog(\n    \"Are you sure you want to erase these items?\",\n        isPresented: $isShowingDialog\n) {\n    Button(\"Erase\", role: .destructive) {\n        // Handle item deletion.\n    }\n    Button(\"Cancel\", role: .cancel) {\n        isShowingDialog = false\n    }\n}\n.dialogIcon(Image(...))\n"
  },
  {
    "title": "dialogSuppressionToggle(_:isSuppressed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/dialogsuppressiontoggle(_:issuppressed:)-32772",
    "html": "Parameters\ntitle\n\nThe title of the suppression toggle in the dialog. This parameter can be elided to use the default suppression title.\n\nisSuppressed\n\nWhether the suppression toggle is on or off in the dialog.\n\nDiscussion\n\nApplying dialog suppression adds a toggle to dialogs on macOS, which allows the user to request the alert not be displayed again. Typically whether a dialog is suppressed is stored in AppStorage and used to decide whether to present the dialog in the future.\n\nThe following example configures a confirmationDialog with a suppression toggle. The toggle’s state is stored in AppStorage and used to determine whether or not to show the dialog when the “Delete Items” button is pressed.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n\n\n    @AppStorage(\"suppressEraseItemAlert\")\n    private var suppressAlert = false\n\n\n    var body: some View {\n        Button(\"Delete Items\") {\n            if !suppressAlert {\n                isShowingDialog = true\n            } else {\n                // Handle item deletion.\n            }\n        }\n        .confirmationDialog(\n            \"Are you sure you want to erase these items?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Erase\", role: .destructive) {\n                // Handle item deletion.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n        .dialogSuppressionToggle(\n            \"Do not ask about erasing items again\",\n            isSuppressed: $suppressAlert)\n    }\n}\n"
  },
  {
    "title": "fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-6urmh",
    "html": "Parameters\nisPresented\n\nA binding to whether the dialog should be shown.\n\ndocuments\n\nThe in-memory documents to export.\n\ncontentTypes\n\nThe list of supported content types which can be exported. If not provided, FileDocument.writableContentTypes are used.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed. The result indicates whether the operation succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the user cancels the operation.\n\nDiscussion\n\nIn order for the dialog to appear, isPresented must be true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCancellation will be called."
  },
  {
    "title": "coordinateSpace(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/coordinatespace(_:)",
    "html": "Parameters\nname\n\nA name used to identify this coordinate space.\n\nDiscussion\n\nUse coordinateSpace(_:) to allow another function to find and operate on a view and operate on dimensions relative to that view.\n\nThe example below demonstrates how a nested view can find and operate on its enclosing view’s coordinate space:\n\nstruct ContentView: View {\n    @State private var location = CGPoint.zero\n\n\n    var body: some View {\n        VStack {\n            Color.red.frame(width: 100, height: 100)\n                .overlay(circle)\n            Text(\"Location: \\(Int(location.x)), \\(Int(location.y))\")\n        }\n        .coordinateSpace(.named(\"stack\"))\n    }\n\n\n    var circle: some View {\n        Circle()\n            .frame(width: 25, height: 25)\n            .gesture(drag)\n            .padding(5)\n    }\n\n\n    var drag: some Gesture {\n        DragGesture(coordinateSpace: .named(\"stack\"))\n            .onChanged { info in location = info.location }\n    }\n}\n\n\nHere, the VStack in the ContentView named “stack” is composed of a red frame with a custom Circle view View/overlay(_:alignment:) at its center.\n\nThe circle view has an attached DragGesture that targets the enclosing VStack’s coordinate space. As the gesture recognizer’s closure registers events inside circle it stores them in the shared location state variable and the VStack displays the coordinates in a Text view."
  },
  {
    "title": "dialogSuppressionToggle(_:isSuppressed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/dialogsuppressiontoggle(_:issuppressed:)-7nloy",
    "html": "Parameters\ntitleKey\n\nThe title of the suppression toggle in the dialog. This parameter can be elided to use the default suppression title.\n\nisSuppressed\n\nWhether the suppression toggle is on or off in the dialog.\n\nDiscussion\n\nApplying dialog suppression adds a toggle to dialogs on macOS, which allows the user to request the alert not be displayed again. Typically whether a dialog is suppressed is stored in AppStorage and used to decide whether to present the dialog in the future.\n\nThe following example configures a confirmationDialog with a suppression toggle. The toggle’s state is stored in AppStorage and used to determine whether or not to show the dialog when the “Delete Items” button is pressed.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n\n\n    @AppStorage(\"suppressEraseItemAlert\")\n    private var suppressAlert = false\n\n\n    var body: some View {\n        Button(\"Delete Items\") {\n            if !suppressAlert {\n                isShowingDialog = true\n            } else {\n                // Handle item deletion.\n            }\n        }\n        .confirmationDialog(\n            \"Are you sure you want to erase these items?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Erase\", role: .destructive) {\n                // Handle item deletion.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n        .dialogSuppressionToggle(\n            \"Do not ask about erasing items again\",\n            isSuppressed: $suppressAlert)\n    }\n}\n"
  },
  {
    "title": "fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
    "html": "Parameters\nisPresented\n\nA binding to whether the interface should be shown.\n\nitem\n\nThe item to be saved on disk.\n\ncontentTypes\n\nThe optional content types to use for the exported file. If empty, SwiftUI uses the content types from the transferRepresentation property provided for Transferable conformance.\n\nonCompletion\n\nA callback that will be invoked when the operation has succeeded or failed.\n\nonCancellation\n\nA callback that will be invoked if the operation was cancelled.\n\nDiscussion\n\nIn order for the interface to appear isPresented must be set to true. When the operation is finished, isPresented will be set to false before onCompletion is called. If the user cancels the operation, isPresented will be set to false and onCompletion will not be called."
  },
  {
    "title": "coordinateSpace(name:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/coordinatespace(name:)",
    "html": "Parameters\nname\n\nA name used to identify this coordinate space.\n\nDiscussion\n\nUse coordinateSpace(name:) to allow another function to find and operate on a view and operate on dimensions relative to that view.\n\nThe example below demonstrates how a nested view can find and operate on its enclosing view’s coordinate space:\n\nstruct ContentView: View {\n    @State private var location = CGPoint.zero\n\n\n    var body: some View {\n        VStack {\n            Color.red.frame(width: 100, height: 100)\n                .overlay(circle)\n            Text(\"Location: \\(Int(location.x)), \\(Int(location.y))\")\n        }\n        .coordinateSpace(name: \"stack\")\n    }\n\n\n    var circle: some View {\n        Circle()\n            .frame(width: 25, height: 25)\n            .gesture(drag)\n            .padding(5)\n    }\n\n\n    var drag: some Gesture {\n        DragGesture(coordinateSpace: .named(\"stack\"))\n            .onChanged { info in location = info.location }\n    }\n}\n\n\nHere, the VStack in the ContentView named “stack” is composed of a red frame with a custom Circle view View/overlay(_:alignment:) at its center.\n\nThe circle view has an attached DragGesture that targets the enclosing VStack’s coordinate space. As the gesture recognizer’s closure registers events inside circle it stores them in the shared location state variable and the VStack displays the coordinates in a Text view."
  },
  {
    "title": "dialogSuppressionToggle(_:isSuppressed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/dialogsuppressiontoggle(_:issuppressed:)-96cc4",
    "html": "Parameters\nlabel\n\nThe label of the suppression toggle in the dialog. This parameter can be elided to use the default suppression title.\n\nisSuppressed\n\nWhether the suppression toggle is on or off in the dialog.\n\nDiscussion\n\nApplying dialog suppression adds a toggle to dialogs on macOS, which allows the user to request the alert not be displayed again. Typically whether a dialog is suppressed is stored in AppStorage and used to decide whether to present the dialog in the future.\n\nThe following example configures a confirmationDialog with a suppression toggle. The toggle’s state is stored in AppStorage and used to determine whether or not to show the dialog when the “Delete Items” button is pressed.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n\n\n    @AppStorage(\"suppressEraseItemAlert\")\n    private var suppressAlert = false\n\n\n    var body: some View {\n        Button(\"Delete Items\") {\n            if !suppressAlert {\n                isShowingDialog = true\n            } else {\n                // Handle item deletion.\n            }\n        }\n        .confirmationDialog(\n            \"Are you sure you want to erase these items?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Erase\", role: .destructive) {\n                // Handle item deletion.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n        .dialogSuppressionToggle(\n            Text(\"Do not ask about erasing items again\"),\n            isSuppressed: $suppressAlert)\n    }\n}\n"
  },
  {
    "title": "disableAutocorrection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/disableautocorrection(_:)",
    "html": "Parameters\nenabled\n\nA Boolean value that indicates whether autocorrection is disabled for this view.\n\nDiscussion\n\nUse disableAutocorrection(_:) when the effect of autocorrection would make it more difficult for the user to input information. The entry of proper names and street addresses are examples where autocorrection can negatively affect the user’s ability complete a data entry task.\n\nIn the example below configures a TextField with the .default keyboard. Disabling autocorrection allows the user to enter arbitrary text without the autocorrection system offering suggestions or attempting to override their input.\n\nTextField(\"1234 Main St.\", text: $address)\n    .keyboardType(.default)\n    .disableAutocorrection(true)\n"
  },
  {
    "title": "cornerRadius(_:antialiased:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/cornerradius(_:antialiased:)",
    "html": "Parameters\nantialiased\n\nA Boolean value that indicates whether the rendering system applies smoothing to the edges of the clipping rectangle.\n\nReturn Value\n\nA view that clips this view to its bounding frame with the specified corner radius.\n\nDiscussion\n\nBy default, a view’s bounding frame only affects its layout, so any content that extends beyond the edges of the frame remains visible. Use cornerRadius(_:antialiased:) to hide any content that extends beyond these edges while applying a corner radius.\n\nThe following code applies a corner radius of 25 to a text view:\n\nText(\"Rounded Corners\")\n    .frame(width: 175, height: 75)\n    .foregroundColor(Color.white)\n    .background(Color.black)\n    .cornerRadius(25)\n"
  },
  {
    "title": "dialogSuppressionToggle(isSuppressed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/dialogsuppressiontoggle(issuppressed:)",
    "html": "Parameters\nisSuppressed\n\nWhether the suppression toggle is on or off in the dialog.\n\nDiscussion\n\nApplying dialog suppression adds a toggle to dialogs on macOS, which allows the user to request the alert not be displayed again. Typically whether a dialog is suppressed is stored in AppStorage and used to decide whether to present the dialog in the future.\n\nThe following example configures a confirmationDialog with a suppression toggle. The toggle’s state is stored in AppStorage and used to determine whether or not to show the dialog when the “Delete Items” button is pressed.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n\n\n    @AppStorage(\"suppressEraseItemAlert\")\n    private var suppressAlert = false\n\n\n    var body: some View {\n        Button(\"Delete Items\") {\n            if !suppressAlert {\n                isShowingDialog = true\n            } else {\n                // Handle item deletion.\n            }\n        }\n        .confirmationDialog(\n            \"Are you sure you want to erase these items?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Erase\", role: .destructive) {\n                // Handle item deletion.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n        .dialogSuppressionToggle(isSuppressed: $suppressAlert)\n    }\n}\n"
  },
  {
    "title": "defaultFocus(_:_:priority:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/defaultfocus(_:_:priority:)",
    "html": "Parameters\nbinding\n\nA focus state binding to update when evaluating default focus in the modified view hierarchy.\n\nvalue\n\nThe value to set the binding to during evaluation.\n\npriority\n\nAn indication of how to prioritize the preferred default focus target when focus moves into the modified view hierarchy. The default value is automatic, which means the preference will be given priority when focus is being initialized or relocated programmatically, but not when responding to user-directed navigation commands.\n\nReturn Value\n\nThe modified view.\n\nDiscussion\n\nBy default, SwiftUI evaluates default focus when the window first appears, and when a focus state binding update moves focus automatically, but not when responding to user-driven navigation commands.\n\nClients can override the default behavior by specifying an evaluation priority of DefaultFocusEvaluationPriority/userInitiated, which causes SwiftUI to use the client’s preferred default focus in response to user-driven focus navigation as well as automatic changes.\n\nIn the following example, focus automatically goes to the second of the two text fields when the view is first presented in the window.\n\nWindowGroup {\n    VStack {\n        TextField(...)\n            .focused($focusedField, equals: .firstField)\n        TextField(...)\n            .focused($focusedField, equals: .secondField)\n    }\n    .defaultFocus($focusedField, .secondField)\n}\n"
  },
  {
    "title": "disabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/disabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean value that determines whether users can interact with this view.\n\nReturn Value\n\nA view that controls whether users can interact with this view.\n\nDiscussion\n\nThe higher views in a view hierarchy can override the value you set on this view. In the following example, the button isn’t interactive because the outer disabled(_:) modifier overrides the inner one:\n\nHStack {\n    Button(Text(\"Press\")) {}\n    .disabled(false)\n}\n.disabled(true)\n"
  },
  {
    "title": "distortionEffect(_:maxSampleOffset:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/distortioneffect(_:maxsampleoffset:isenabled:)",
    "html": "Parameters\nshader\n\nThe shader to apply as a distortion effect.\n\nmaxSampleOffset\n\nThe maximum distance in each axis between the returned source pixel position and the destination pixel position, for all source pixels.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a distortion effect.\n\nDiscussion\n\nFor a shader function to act as a distortion effect it must have a function signature matching:\n\n[[ stitchable ]] float2 name(float2 position, args...)\n\n\nwhere position is the user-space coordinates of the destination pixel applied to the shader. args... should be compatible with the uniform arguments bound to shader. The function should return the user-space coordinates of the corresponding source pixel.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error."
  },
  {
    "title": "defaultAppStorage(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/defaultappstorage(_:)",
    "html": "Parameters\nstore\n\nThe user defaults to use as the default store for AppStorage.\n\nDiscussion\n\nIf unspecified, the default store for a view hierarchy is UserDefaults.standard, but can be set a to a custom one. For example, sharing defaults between an app and an extension can override the default store to one created with UserDefaults.init(suiteName:_)."
  },
  {
    "title": "draggable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/draggable(_:)",
    "html": "Parameters\npayload\n\nA closure that returns a single instance or a value conforming to Transferable that represents the draggable data from this view.\n\nReturn Value\n\nA view that activates this view as the source of a drag and drop operation, beginning with user gesture input.\n\nDiscussion\n\nApplying the draggable(_:) modifier adds the appropriate gestures for drag and drop to this view. When a drag operation begins, a rendering of this view is generated and used as the preview image."
  },
  {
    "title": "controlGroupStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/controlgroupstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to apply to controls within this view."
  },
  {
    "title": "contextMenu(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contextmenu(_:)",
    "html": "Parameters\ncontextMenu\n\nA context menu container for views that you present as menu items in a context menu.\n\nReturn Value\n\nA view that can show a context menu.\n\nDiscussion\n\nUse this method to attach a specified context menu to a view. You can make the context menu unavailable by conditionally passing nil as the value for the contextMenu.\n\nThe example below creates a ContextMenu that contains two items and passes them into the modifier. The Boolean value shouldShowMenu, which defaults to true, controls the context menu availability:\n\nprivate let menuItems = ContextMenu {\n    Button {\n        // Add this item to a list of favorites.\n    } label: {\n        Label(\"Add to Favorites\", systemImage: \"heart\")\n    }\n    Button {\n        // Open Maps and center it on this item.\n    } label: {\n        Label(\"Show in Maps\", systemImage: \"mappin\")\n    }\n}\n\n\nprivate struct ContextMenuMenuItems: View {\n    @State private var shouldShowMenu = true\n\n\n    var body: some View {\n        Text(\"Turtle Rock\")\n            .contextMenu(shouldShowMenu ? menuItems : nil)\n    }\n}\n"
  },
  {
    "title": "contextMenu(forSelectionType:menu:primaryAction:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contextmenu(forselectiontype:menu:primaryaction:)",
    "html": "Parameters\nitemType\n\nThe identifier type of the items. Ensure that this matches the container’s selection type.\n\nmenu\n\nA closure that produces the menu. A single parameter to the closure contains the set of items to act on. An empty set indicates menu activation over the empty area of the selectable container, while a non-empty set indicates menu activation over selected items. Use controls like Button, Picker, and Toggle to define the menu items. You can also create submenus using Menu, or group items with Section. You can deactivate the context menu by returning nothing from the closure.\n\nprimaryAction\n\nA closure that defines the action to perform in response to the primary interaction. A single parameter to the closure contains the set of items to act on.\n\nReturn Value\n\nA view that can display an item-based context menu.\n\nDiscussion\n\nYou can add an item-based context menu to a container that supports selection, like a List or a Table. In the closure that you use to define the menu, you receive a collection of items that depends on the selection state of the container and the location where the person clicks or taps to activate the menu. The collection contains:\n\nThe selected item or items, when people initiate the context menu from any selected item.\n\nNothing, if people tap or click to activate the context menu from an empty part of the container. This is true even when one or more items is currently selected.\n\nYou can vary the menu contents according to the number of selected items. For example, the following code has a list that defines an empty area menu, a single item menu, and a multi-item menu:\n\nstruct ContextMenuItemExample: View {\n    var items: [Item]\n    @State private var selection = Set<Item.ID>()\n\n\n    var body: some View {\n        List(selection: $selection) {\n            ForEach(items) { item in\n                Text(item.name)\n            }\n        }\n        .contextMenu(forSelectionType: Item.ID.self) { items in\n            if items.isEmpty { // Empty area menu.\n                Button(\"New Item\") { }\n\n\n            } else if items.count == 1 { // Single item menu.\n                Button(\"Copy\") { }\n                Button(\"Delete\", role: .destructive) { }\n\n\n            } else { // Multi-item menu.\n                Button(\"Copy\") { }\n                Button(\"New Folder With Selection\") { }\n                Button(\"Delete Selected\", role: .destructive) { }\n            }\n        }\n    }\n}\n\n\nThe above example assumes that the Item type conforms to the Identifiable protocol, and relies on the associated ID type for both selection and context menu presentation.\n\nIf you add the modifier to a view hierarchy that doesn’t have a container that supports selection, the context menu never activates. To add a context menu that doesn’t depend on selection behavior, use View/contextMenu(menuItems:). To add a context menu to a specific row in a table, use TableRowContent/contextMenu(menuItems:).\n\nAdd a primary action\n\nOptionally, you can add a custom primary action to the context menu. In macOS, a single click on a row in a selectable container selects that row, and a double click performs the primary action. In iOS and iPadOS, tapping on the row activates the primary action. To select a row without performing an action, either enter edit mode or hold shift or command on a keyboard while tapping the row.\n\nFor example, you can modify the context menu from the previous example so that double clicking the row on macOS opens a new window for selected items. Get the OpenWindowAction from the environment:\n\n@Environment(\\.openWindow) private var openWindow\n\n\nThen call EnvironmentValues/openWindow from inside the primaryAction closure for each item:\n\n.contextMenu(forSelectionType: Item.ID.self) { items in\n    // ...\n} primaryAction: { items in\n    for item in items {\n        openWindow(value: item)\n    }\n}\n\n\nThe open window action depends on the declaration of a WindowGroup scene in your App that responds to the Item type:\n\nWindowGroup(\"Item Detail\", for: Item.self) { $item in\n    // ...\n}\n"
  },
  {
    "title": "contextMenu(menuItems:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contextmenu(menuitems:)",
    "html": "Parameters\nmenuItems\n\nA closure that produces the menu’s contents. You can deactivate the context menu by returning nothing from the closure.\n\nReturn Value\n\nA view that can display a context menu.\n\nDiscussion\n\nUse this modifier to add a context menu to a view in your app’s user interface. Compose the menu by returning controls like Button, Toggle, and Picker from the menuItems closure. You can also use Menu to define submenus or Section to group items.\n\nThe following example creates a Text view that has a context menu with two buttons:\n\nText(\"Turtle Rock\")\n    .padding()\n    .contextMenu {\n        Button {\n            // Add this item to a list of favorites.\n        } label: {\n            Label(\"Add to Favorites\", systemImage: \"heart\")\n        }\n        Button {\n            // Open Maps and center it on this item.\n        } label: {\n            Label(\"Show in Maps\", systemImage: \"mappin\")\n        }\n    }\n\n\nPeople can activate the menu with an action like Control-clicking, or by using the touch and hold gesture in iOS and iPadOS:\n\nThe system dismisses the menu if someone makes a selection, or taps or clicks outside the menu.\n\nIf you want to show a preview beside the menu, use View/contextMenu(menuItems:preview:). To add a context menu to a container that supports selection, like a List or a Table, and to distinguish between menu activation on a selection and activation in an empty area of the container, use View/contextMenu(forSelectionType:menu:primaryAction:)."
  },
  {
    "title": "contrast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contrast(_:)",
    "html": "Parameters\namount\n\nThe intensity of color contrast to apply. negative values invert colors in addition to applying contrast.\n\nReturn Value\n\nA view that applies color contrast to this view.\n\nDiscussion\n\nApply contrast to a view to increase or decrease the separation between similar colors in the view.\n\nIn the example below, the contrast(_:) modifier is applied to a set of red squares each containing a contrasting green inner circle. At each step in the loop, the contrast(_:) modifier changes the contrast of the circle/square view in 20% increments. This ranges from -20% contrast (yielding inverted colors — turning the red square to pale-green and the green circle to mauve), to neutral-gray at 0%, to 100% contrast (bright-red square / bright-green circle). Applying negative contrast values, as shown in the -20% square, will apply contrast in addition to inverting colors.\n\nstruct CircleView: View {\n    var body: some View {\n        Circle()\n            .fill(Color.green)\n            .frame(width: 25, height: 25, alignment: .center)\n    }\n}\n\n\nstruct Contrast: View {\n    var body: some View {\n        HStack {\n            ForEach(-1..<6) {\n                Color.red.frame(width: 50, height: 50, alignment: .center)\n                    .overlay(CircleView(), alignment: .center)\n                    .contrast(Double($0) * 0.2)\n                    .overlay(Text(\"\\(Double($0) * 0.2 * 100, specifier: \"%.0f\")%\")\n                                 .font(.callout),\n                             alignment: .bottom)\n                    .border(Color.gray)\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "containerRelativeFrame(_:count:span:spacing:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/containerrelativeframe(_:count:span:spacing:alignment:)",
    "html": "Discussion\n\nUse the View/containerRelativeFrame(_:alignment:) modifier to specify a size for a view’s width, height, or both that is dependent on the size of the nearest container. Different things can represent a “container” including:\n\nThe window presenting a view on iPadOS or macOS, or the screen of a device on iOS.\n\nA column of a NavigationSplitView\n\nA NavigationStack\n\nA tab of a TabView\n\nA scrollable view like ScrollView or List\n\nThe size provided to this modifier is the size of a container like the ones listed above subtracting any safe area insets that might be applied to that container.\n\nThe following example will have each purple rectangle occupy the full size of the screen on iOS:\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 0.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .containerRelativeFrame([.horizontal, .vertical])\n        }\n    }\n}\n\n\nUse this modifier to size a view such that multiple views will be visible in the container. When using this modifier, the count refers to the total number of rows or columns that the length of the container size in a particular axis should be divided into. The span refers to the number of rows or columns that the modified view should actually occupy. Thus the size of the element can be described like so:\n\nlet availableWidth = (containerWidth - (spacing * (count - 1)))\nlet columnWidth = (availableWidth / count)\nlet itemWidth = (columnWidth * span) + ((span - 1) * spacing)\n\n\nThe following example only uses the nearest container size in the horizontal axis, allowing the vertical axis to be determined using the View/aspectRatio(_:contentMode:)-771ow modifier.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .aspectRatio(3.0 / 2.0, contentMode: .fit)\n                .containerRelativeFrame(\n                    .horizontal, count: 4, span: 3, spacing: 10.0)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nUse the View/containerRelativeFrame(_:alignment:_:) modifier to apply your own custom logic to adjust the size of the nearest container for your view. The following example will result in the container frame’s width being divided by 3 and using that value as the width of the purple rectangle.\n\nRectangle()\n    .fill(.purple)\n    .aspectRatio(1.0, contentMode: .fill)\n    .containerRelativeFrame(\n        .horizontal, alignment: .topLeading\n    ) { length, axis in\n        if axis == .vertical {\n            return length / 3.0\n        } else {\n            return length / 5.0\n        }\n    }\n"
  },
  {
    "title": "environment(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/environment(_:_:)",
    "html": "Parameters\nkeyPath\n\nA key path that indicates the property of the EnvironmentValues structure to update.\n\nvalue\n\nThe new value to set for the item specified by keyPath.\n\nReturn Value\n\nA view that has the given value set in its environment.\n\nDiscussion\n\nUse this modifier to set one of the writable properties of the EnvironmentValues structure, including custom values that you create. For example, you can set the value associated with the EnvironmentValues/truncationMode key:\n\nMyView()\n    .environment(\\.truncationMode, .head)\n\n\nYou then read the value inside MyView or one of its descendants using the Environment property wrapper:\n\nstruct MyView: View {\n    @Environment(\\.truncationMode) var truncationMode: Text.TruncationMode\n\n\n    var body: some View { ... }\n}\n\n\nSwiftUI provides dedicated view modifiers for setting most environment values, like the View/truncationMode(_:) modifier which sets the EnvironmentValues/truncationMode value:\n\nMyView()\n    .truncationMode(.head)\n\n\nPrefer the dedicated modifier when available, and offer your own when defining custom environment values, as described in EnvironmentKey.\n\nThis modifier affects the given view, as well as that view’s descendant views. It has no effect outside the view hierarchy on which you call it."
  },
  {
    "title": "scrollTransition(_:axis:transition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrolltransition(_:axis:transition:)",
    "html": "Parameters\nconfiguration\n\nThe configuration controlling how the transition will be applied. The configuration will be applied both while the view is coming into view and while it is disappearing (the transition is symmetrical).\n\naxis\n\nThe axis of the containing scroll view over which the transition will be applied. The default value of nil uses the axis of the innermost containing scroll view, or .vertical if the innermost scroll view is scrollable along both axes.\n\ncoordinateSpace\n\nThe coordinate space of the container that visibility is evaluated within. Defaults to .scrollView.\n\ntransition\n\nA closure that applies visual effects as a function of the provided phase."
  },
  {
    "title": "environmentObject(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/environmentobject(_:)",
    "html": "Parameters\nobject\n\nThe object to store and make available to the view’s hierarchy.\n\nDiscussion\n\nUse this modifier to add an observable object to a view’s environment. The object must conform to the ObservableObject protocol.\n\nAdding an object to a view’s environment makes the object available to subviews in the view’s hierarchy. To retrieve the object in a subview, use the EnvironmentObject property wrapper.\n\nNote\n\nIf the observable object conforms to the Observable protocol, use either View/environment(_:) or the View/environment(_:_:) modifier to add the object to the view’s environment."
  },
  {
    "title": "contentMargins(_:_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contentmargins(_:_:for:)-4dp7d",
    "html": "Parameters\nedges\n\nThe edges to add the margins to.\n\nlength\n\nThe amount of margins to add.\n\nplacement\n\nWhere the margins should be added.\n\nDiscussion\n\nUse this modifier to customize the content margins of different kinds of views. For example, you can use this modifier to customize the margins of scrollable views like ScrollView. In the following example, the scroll view will automatically inset its content by the safe area plus an additional 20 points on the leading and trailing edge.\n\nScrollView(.horizontal) {\n    // ...\n}\n.contentMargins(.horizontal, 20.0)\n\n\nYou can provide a ContentMarginPlacement to target specific parts of a view to customize. For example, provide a ContentMargingPlacement/scrollContent placement to inset the content of a TextEditor without affecting the insets of its scroll indicators.\n\nTextEditor(text: $text)\n    .contentMargins(.horizontal, 20.0, for: .scrollContent)\n\n\nSimilarly, you can customize the insets of scroll indicators separately from scroll content. Consider doing this when applying a custom clip shape that may clip the indicators.\n\nScrollView {\n    // ...\n}\n.clipShape(.rect(cornerRadius: 20.0))\n.contentMargins(10.0, for: .scrollIndicators)\n\n\nWhen applying multiple contentMargins modifiers, modifiers with the same placement will override modifiers higher up in the view hierarchy."
  },
  {
    "title": "containerShape(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/containershape(_:)",
    "html": "Discussion\n\nThe example below defines a view that shows its content with a rounded rectangle background and the same container shape. Any ContainerRelativeShape within the content matches the rounded rectangle shape from this container inset as appropriate.\n\nstruct PlatterContainer<Content: View> : View {\n    @ViewBuilder var content: Content\n    var body: some View {\n        content\n            .padding()\n            .containerShape(shape)\n            .background(shape.fill(.background))\n    }\n    var shape: RoundedRectangle { RoundedRectangle(cornerRadius: 20) }\n}\n"
  },
  {
    "title": "contentTransition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contenttransition(_:)",
    "html": "Parameters\ntransition\n\nThe transition to apply when animating the content change.\n\nDiscussion\n\nThis modifier allows you to perform a transition that animates a change within a single view. The provided ContentTransition can present an opacity animation for content changes, an interpolated animation of the content’s paths as they change, or perform no animation at all.\n\nTip\n\nThe contentTransition(_:) modifier only has an effect within the context of an Animation.\n\nIn the following example, a Button changes the color and font size of a Text view. Since both of these properties apply to the paths of the text, the ContentTransition/interpolate transition can animate a gradual change to these properties through the entire transition. By contrast, the ContentTransition/opacity transition would simply fade between the start and end states.\n\nprivate static let font1 = Font.system(size: 20)\nprivate static let font2 = Font.system(size: 45)\n\n\n@State private var color = Color.red\n@State private var currentFont = font1\n\n\nvar body: some View {\n    VStack {\n        Text(\"Content transition\")\n            .foregroundColor(color)\n            .font(currentFont)\n            .contentTransition(.interpolate)\n        Spacer()\n        Button(\"Change\") {\n            withAnimation(Animation.easeInOut(duration: 5.0)) {\n                color = (color == .red) ? .green : .red\n                currentFont = (currentFont == font1) ? font2 : font1\n            }\n        }\n    }\n}\n\n\nThis example uses an ease-in–ease-out animation with a five-second duration to make it easier to see the effect of the interpolation. The figure below shows the Text at the beginning of the animation, halfway through, and at the end.\n\nTime\n\n\t\n\nDisplay\n\n\n\n\nStart\n\n\t\n\n\n\n\nMiddle\n\n\t\n\n\n\n\nEnd\n\n\t\n\nTo control whether content transitions use GPU-accelerated rendering, set the value of the EnvironmentValues/contentTransitionAddsDrawingGroup environment variable."
  },
  {
    "title": "contentShape(_:_:eoFill:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contentshape(_:_:eofill:)",
    "html": "Parameters\nkind\n\nThe kinds to apply to this content shape.\n\nshape\n\nThe shape to use.\n\neoFill\n\nA Boolean that indicates whether the shape is interpreted with the even-odd winding number rule.\n\nReturn Value\n\nA view that uses the given shape for the specified kind.\n\nDiscussion\n\nThe content shape has a variety of uses. You can control the kind of the content shape by specifying one in kind. For example, the following example only sets the focus ring shape of the view, without affecting its shape for hit-testing:\n\nMyFocusableView()\n    .contentShape(.focusEffect, Circle())\n"
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-j261",
    "html": "Parameters\ntitle\n\nA text string used as the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nmessage\n\nA view builder returning the message for the dialog.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var title: String\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            title,\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        } message: {\n            Text(\"You cannot undo this action.\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action."
  },
  {
    "title": "contextMenu(menuItems:preview:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contextmenu(menuitems:preview:)",
    "html": "Parameters\nmenuItems\n\nA closure that produces the menu’s contents. You can deactivate the context menu by returning nothing from the closure.\n\npreview\n\nA view that the system displays along with the menu.\n\nReturn Value\n\nA view that can display a context menu with a preview.\n\nDiscussion\n\nWhen you use this modifer to add a context menu to a view in your app’s user interface, the system shows a preview beside the menu. Compose the menu by returning controls like Button, Toggle, and Picker from the menuItems closure. You can also use Menu to define submenus or Section to group items.\n\nDefine the preview by returning a view from the preview closure. The system sizes the preview to match the size of its content. For example, you can add a two button context menu to a Text view, and include an Image as a preview:\n\nText(\"Turtle Rock\")\n    .padding()\n    .contextMenu {\n        Button {\n            // Add this item to a list of favorites.\n        } label: {\n            Label(\"Add to Favorites\", systemImage: \"heart\")\n        }\n        Button {\n            // Open Maps and center it on this item.\n        } label: {\n            Label(\"Show in Maps\", systemImage: \"mappin\")\n        }\n    } preview: {\n        Image(\"turtlerock\") // Loads the image from an asset catalog.\n    }\n\n\nWhen someone activates the context menu with an action like touch and hold in iOS or iPadOS, the system displays the image and the menu:\n\nNote\n\nThis view modifier produces a context menu on macOS, but that platform doesn’t display the preview.\n\nIf you don’t need a preview, use View/contextMenu(menuItems:) instead. If you want to add a context menu to a container that supports selection, like a List or a Table, and you want to distinguish between menu activation on a selection and activation in an empty area of the container, use View/contextMenu(forSelectionType:menu:primaryAction:)."
  },
  {
    "title": "defaultHoverEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/defaulthovereffect(_:)",
    "html": "Parameters\neffect\n\nThe default hover effect to use for views within this view.\n\nReturn Value\n\nA view that uses this effect as the default hover effect.\n\nDiscussion\n\nUse this modifier to set a specific hover effect for all views with the View/hoverEffect(_:) modifier applied within a view. The default effect is typically used when no HoverEffect was provided or if HoverEffect/automatic is specified.\n\nFor example, this view uses HoverEffect/highlight for both the red and green Color views:\n\nHStack {\n    Color.red.hoverEffect()\n    Color.green.hoverEffect()\n}\n.defaultHoverEffect(.highlight)\n\n\nThis also works for customizing the default hover effect in views like Buttons when using a SwiftUI-defined style like ButtonStyle/bordered, which can provide a hover effect by default. For example, this view replaces the hover effect for a Button with HoverEffect/highlight:\n\nButton(\"Next\") {}\n    // perform action\n}\n.buttonStyle(.bordered)\n.defaultHoverEffect(.highlight)\n\n\nUse a nil effect to indicate that the default hover effect should not be modified."
  },
  {
    "title": "controlSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/controlsize(_:)",
    "html": "Parameters\ncontrolSize\n\nOne of the control sizes specified in the ControlSize enumeration.\n\nDiscussion\n\nUse controlSize(_:) to override the system default size for controls in this view. In this example, a view displays several typical controls at .mini, .small and .regular sizes.\n\nstruct ControlSize: View {\n    var body: some View {\n        VStack {\n            MyControls(label: \"Mini\")\n                .controlSize(.mini)\n            MyControls(label: \"Small\")\n                .controlSize(.small)\n            MyControls(label: \"Regular\")\n                .controlSize(.regular)\n        }\n        .padding()\n        .frame(width: 450)\n        .border(Color.gray)\n    }\n}\n\n\nstruct MyControls: View {\n    var label: String\n    @State private var value = 3.0\n    @State private var selected = 1\n    var body: some View {\n        HStack {\n            Text(label + \":\")\n            Picker(\"Selection\", selection: $selected) {\n                Text(\"option 1\").tag(1)\n                Text(\"option 2\").tag(2)\n                Text(\"option 3\").tag(3)\n            }\n            Slider(value: $value, in: 1...10)\n            Button(\"OK\") { }\n        }\n    }\n}\n"
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6kt07",
    "html": "Parameters\ntitle\n\nA text string used as the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nmessage\n\nA view builder returning the message for the dialog given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    var title: String\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            title, isPresented: $isConfirming,\n            presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"Import \\(detail.name)\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        } message: { detail in\n            Text(\n                \"\"\"\n                This will add \\(detail.name).\\(detail.fileType) \\\n                to your library.\n                \"\"\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "searchable(text:editableTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1neod",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding which controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9ijow",
    "html": "Parameters\ntitle\n\nthe title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nmessage\n\nA view builder returning the message for the dialog given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            Text(\"Import New File?\"),\n            isPresented: $isConfirming, presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"Import \\(detail.name)\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        } message: { detail in\n            Text(\n                \"\"\"\n                This will add \\(detail.name).\\(detail.fileType) \\\n                to your library.\n                \"\"\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "scenePadding(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scenepadding(_:)",
    "html": "Parameters\nedges\n\nThe set of edges along which to pad this view.\n\nReturn Value\n\nA view that’s padded on specified edges by a scene-appropriate amount.\n\nDiscussion\n\nUse this modifier to add a scene-appropriate amount of padding to a view. Specify either a single edge value from Edge/Set, or an OptionSet that describes the edges to pad.\n\nIn macOS, use scene padding to produce the recommended spacing around the root view of a window. In watchOS, use scene padding to align elements of your user interface with top level elements, like the title of a navigation view. For example, compare the effects of different kinds of padding on text views presented inside a NavigationView in watchOS:\n\nVStack(alignment: .leading, spacing: 10) {\n    Text(\"Scene padding\")\n        .scenePadding(.horizontal)\n        .border(.red) // Border added for reference.\n    Text(\"Regular padding\")\n        .padding(.horizontal)\n        .border(.green)\n    Text(\"Text with no padding\")\n        .border(.blue)\n    Button(\"Button\") { }\n}\n.navigationTitle(\"Hello World\")\n\n\nThe text with scene padding automatically aligns with the title, unlike the text that uses the default padding or the text without padding:\n\nScene padding in watchOS also ensures that your content avoids the curved edges of a device like Apple Watch Series 7. In other platforms, scene padding produces the same default padding that you get from the View/padding(_:_:) modifier.\n\nImportant\n\nScene padding doesn’t pad the top and bottom edges of a view in watchOS, even if you specify those edges as part of the input. For example, if you specify Edge/Set/vertical instead of Edge/Set/horizontal in the example above, the modifier would have no effect in watchOS. It does, however, apply to all the edges that you specify in other platforms."
  },
  {
    "title": "scrollBounceBehavior(_:axes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrollbouncebehavior(_:axes:)",
    "html": "Parameters\nbehavior\n\nThe bounce behavior to apply to any scrollable views within the configured view. Use one of the ScrollBounceBehavior values.\n\naxes\n\nThe set of axes to apply behavior to. The default is Axis/vertical.\n\nReturn Value\n\nA view that’s configured with the specified scroll bounce behavior.\n\nDiscussion\n\nUse this modifier to indicate whether scrollable views bounce when people scroll to the end of the view’s content, taking into account the relative sizes of the view and its content. For example, the following ScrollView only enables bounce behavior if its content is large enough to require scrolling:\n\nScrollView {\n    Text(\"Small\")\n    Text(\"Content\")\n}\n.scrollBounceBehavior(.basedOnSize)\n\n\nThe modifier passes the scroll bounce mode through the Environment, which means that the mode affects any scrollable views in the modified view hierarchy. Provide an axis to the modifier to constrain the kinds of scrollable views that the mode affects. For example, all the scroll views in the following example can access the mode value, but only the two nested scroll views are affected, because only they use horizontal scrolling:\n\nScrollView { // Defaults to vertical scrolling.\n    ScrollView(.horizontal) {\n        ShelfContent()\n    }\n    ScrollView(.horizontal) {\n        ShelfContent()\n    }\n}\n.scrollBounceBehavior(.basedOnSize, axes: .horizontal)\n\n\nYou can use this modifier to configure any kind of scrollable view, including ScrollView, List, Table, and TextEditor:\n\nList {\n    Text(\"Hello\")\n    Text(\"World\")\n}\n.scrollBounceBehavior(.basedOnSize)\n"
  },
  {
    "title": "scenePadding(_:edges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scenepadding(_:edges:)",
    "html": "Parameters\npadding\n\nThe kind of padding to add.\n\nedges\n\nThe set of edges along which to pad this view.\n\nReturn Value\n\nA view that’s padded on specified edges by a scene-appropriate amount.\n\nDiscussion\n\nUse this modifier to add a scene-appropriate amount of padding to a view. Specify either a single edge value from Edge/Set, or an OptionSet that describes the edges to pad.\n\nIn macOS, use scene padding to produce the recommended spacing around the root view of a window. In watchOS, use scene padding to align elements of your user interface with top level elements, like the title of a navigation view. For example, compare the effects of different kinds of padding on text views presented inside a NavigationView in watchOS:\n\nVStack(alignment: .leading, spacing: 10) {\n    Text(\"Minimum Scene padding\")\n        .scenePadding(.minimum, edges: .horizontal)\n        .border(.red) // Border added for reference.\n    Text(\"Navigation Bar Scene padding\")\n        .scenePadding(.navigationBar, edges: .horizontal)\n        .border(.yellow)\n    Text(\"Regular padding\")\n        .padding(.horizontal)\n        .border(.green)\n    Text(\"Text with no padding\")\n        .border(.blue)\n    Button(\"Button\") { }\n}\n.navigationTitle(\"Hello World\")\n\n\nThe text with minimum scene padding uses the system minimum padding and the text with navigation bar scene padding automatically aligns with the navigation bar content. In contrast, the text that uses the default padding and the text without padding do not align with scene elements.\n\nScene padding in watchOS also ensures that your content avoids the curved edges of a device like Apple Watch Series 7. In other platforms, scene padding produces the same default padding that you get from the View/padding(_:_:) modifier.\n\nImportant\n\nScene padding doesn’t pad the top and bottom edges of a view in watchOS, even if you specify those edges as part of the input. For example, if you specify Edge/Set/vertical instead of Edge/Set/horizontal in the example above, the modifier would have no effect in watchOS. It does, however, apply to all the edges that you specify in other platforms."
  },
  {
    "title": "scrollClipDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrollclipdisabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean value that specifies whether to disable scroll view clipping.\n\nReturn Value\n\nA view that disables or enables scroll view clipping.\n\nDiscussion\n\nBy default, a scroll view clips its content to its bounds, but you can disable that behavior by using this modifier. For example, if the views inside the scroll view have shadows that extend beyond the bounds of the scroll view, you can use this modifier to avoid clipping the shadows:\n\nstruct ContentView: View {\n    var disabled: Bool\n    let colors: [Color] = [.red, .green, .blue, .mint, .teal]\n\n\n    var body: some View {\n        ScrollView(.horizontal) {\n            HStack(spacing: 20) {\n                ForEach(colors, id: \\.self) { color in\n                    Rectangle()\n                        .frame(width: 100, height: 100)\n                        .foregroundStyle(color)\n                        .shadow(color: .primary, radius: 20)\n                }\n            }\n        }\n        .scrollClipDisabled(disabled)\n    }\n}\n\n\nThe scroll view in the above example clips when the content view’s disabled input is false, as it does if you omit the modifier, but not when the input is true:\n\nTrue\nFalse\n\nWhile you might want to avoid clipping parts of views that exceed the bounds of the scroll view, like the shadows in the above example, you typically still want the scroll view to clip at some point. Create custom clipping by using the View/clipShape(_:style:) modifier to add a different clip shape. The following code disables the default clipping and then adds rectangular clipping that exceeds the bounds of the scroll view by the default padding amount:\n\nScrollView(.horizontal) {\n    // ...\n}\n.scrollClipDisabled()\n.padding()\n.clipShape(Rectangle())\n"
  },
  {
    "title": "scrollContentBackground(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrollcontentbackground(_:)",
    "html": "Parameters\nvisibility\n\nthe visibility to use for the background.\n\nDiscussion\n\nThe following example hides the standard system background of the List.\n\nList {\n    Text(\"One\")\n    Text(\"Two\")\n    Text(\"Three\")\n}\n.scrollContentBackground(.hidden)\n"
  },
  {
    "title": "scrollDismissesKeyboard(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrolldismisseskeyboard(_:)",
    "html": "Parameters\nmode\n\nThe keyboard dismissal mode that scrollable content uses.\n\nReturn Value\n\nA view that uses the specified keyboard dismissal mode.\n\nDiscussion\n\nYou use this modifier to customize how scrollable content interacts with the software keyboard. For example, you can specify a value of ScrollDismissesKeyboardMode/immediately to indicate that you would like scrollable content to immediately dismiss the keyboard if present when a scroll drag gesture begins.\n\n@State private var text = \"\"\n\n\nScrollView {\n    TextField(\"Prompt\", text: $text)\n    ForEach(0 ..< 50) { index in\n        Text(\"\\(index)\")\n            .padding()\n    }\n}\n.scrollDismissesKeyboard(.immediately)\n\n\nYou can also use this modifier to customize the keyboard dismissal behavior for other kinds of scrollable views, like a List or a TextEditor.\n\nBy default, a TextEditor is interactive while other kinds of scrollable content always dismiss the keyboard on a scroll when linked against iOS 16 or later. Pass a value of ScrollDismissesKeyboardMode/never to indicate that scrollable content should never automatically dismiss the keyboard."
  },
  {
    "title": "scrollIndicators(_:axes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrollindicators(_:axes:)",
    "html": "Parameters\nvisibility\n\nThe visibility to apply to scrollable views.\n\naxes\n\nThe axes of scrollable views that the visibility applies to.\n\nReturn Value\n\nA view with the specified scroll indicator visibility.\n\nDiscussion\n\nUse this modifier to hide or show scroll indicators on scrollable content in views like a ScrollView, List, or TextEditor. This modifier applies the prefered visibility to any scrollable content within a view hierarchy.\n\nScrollView {\n    VStack(alignment: .leading) {\n        ForEach(0..<100) {\n            Text(\"Row \\($0)\")\n        }\n    }\n}\n.scrollIndicators(.hidden)\n\n\nUse the ScrollIndicatorVisibility/hidden value to indicate that you prefer that views never show scroll indicators along a given axis. Use ScrollIndicatorVisibility/visible when you prefer that views show scroll indicators. Depending on platform conventions, visible scroll indicators might only appear while scrolling. Pass ScrollIndicatorVisibility/automatic to allow views to decide whether or not to show their indicators."
  },
  {
    "title": "scrollIndicatorsFlash(trigger:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrollindicatorsflash(trigger:)",
    "html": "Parameters\nvalue\n\nThe value that causes scroll indicators to flash. The value must conform to the Equatable protocol.\n\nReturn Value\n\nA view that flashes any visible scroll indicators when a value changes.\n\nDiscussion\n\nWhen the value that you provide to this modifier changes, the scroll indicators of any scrollable views within the modified view hierarchy briefly flash. The following example configures the scroll indicators to flash any time flashCount changes:\n\n@State private var isPresented = false\n@State private var flashCount = 0\n\n\nScrollView {\n    // ...\n}\n.scrollIndicatorsFlash(trigger: flashCount)\n.sheet(isPresented: $isPresented) {\n    // ...\n}\n.onChange(of: isPresented) { newValue in\n    if newValue {\n        flashCount += 1\n    }\n}\n\n\nOnly scroll indicators that you configure to be visible flash. To flash scroll indicators when a scroll view initially appears, use View/scrollIndicatorsFlash(onAppear:) instead."
  },
  {
    "title": "containerRelativeFrame(_:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/containerrelativeframe(_:alignment:)",
    "html": "Discussion\n\nUse this modifier to specify a size for a view’s width, height, or both that is dependent on the size of the nearest container. Different things can represent a “container” including:\n\nThe window presenting a view on iPadOS or macOS, or the screen of a device on iOS.\n\nA column of a NavigationSplitView\n\nA NavigationStack\n\nA tab of a TabView\n\nA scrollable view like ScrollView or List\n\nThe size provided to this modifier is the size of a container like the ones listed above subtracting any safe area insets that might be applied to that container.\n\nThe following example will have each purple rectangle occupy the full size of the screen on iOS:\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 0.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .containerRelativeFrame([.horizontal, .vertical])\n        }\n    }\n}\n\n\nUse the View/containerRelativeFrame(_:count:span:spacing:alignment:) modifier to size a view such that multiple views will be visible in the container. When using this modifier, the count refers to the total number of rows or columns that the length of the container size in a particular axis should be divided into. The span refers to the number of rows or columns that the modified view should actually occupy. Thus the size of the element can be described like so:\n\nlet availableWidth = (containerWidth - (spacing * (count - 1)))\nlet columnWidth = (availableWidth / count)\nlet itemWidth = (columnWidth * span) + ((span - 1) * spacing)\n\n\nThe following example only uses the nearest container size in the horizontal axis, allowing the vertical axis to be determined using the View/aspectRatio(_:contentMode:)-771ow modifier.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .aspectRatio(3.0 / 2.0, contentMode: .fit)\n                .containerRelativeFrame(\n                    .horizontal, count: 4, span: 3, spacing: 10.0)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nUse the View/containerRelativeFrame(_:alignment:_:) modifier to apply your own custom logic to adjust the size of the nearest container for your view. The following example will result in the container frame’s width being divided by 3 and using that value as the width of the purple rectangle.\n\nRectangle()\n    .fill(.purple)\n    .aspectRatio(1.0, contentMode: .fill)\n    .containerRelativeFrame(\n        .horizontal, alignment: .topLeading\n    ) { length, axis in\n        if axis == .vertical {\n            return length / 3.0\n        } else {\n            return length / 5.0\n        }\n    }\n"
  },
  {
    "title": "clipped(antialiased:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/clipped(antialiased:)",
    "html": "Parameters\nantialiased\n\nA Boolean value that indicates whether the rendering system applies smoothing to the edges of the clipping rectangle.\n\nReturn Value\n\nA view that clips this view to its bounding frame.\n\nDiscussion\n\nUse the clipped(antialiased:) modifier to hide any content that extends beyond the layout bounds of the shape.\n\nBy default, a view’s bounding frame is used only for layout, so any content that extends beyond the edges of the frame is still visible.\n\nText(\"This long text string is clipped\")\n    .fixedSize()\n    .frame(width: 175, height: 100)\n    .clipped()\n    .border(Color.gray)\n"
  },
  {
    "title": "scrollTargetBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrolltargetbehavior(_:)",
    "html": "Discussion\n\nA scrollable view calculates where scroll gestures should end using its deceleration rate and the state of its scroll gesture by default. A scroll behavior allows for customizing this logic. You can provide your own ScrollTargetBehavior or use one of the built in behaviors provided by SwiftUI.\n\nPaging Behavior\n\nSwiftUI offers a PagingScrollTargetBehavior behavior which uses the geometry of the scroll view to decide where to allow scrolls to end.\n\nIn the following example, every view in the lazy stack is flexible in both directions and the scroll view will settle to container aligned boundaries.\n\nScrollView {\n    LazyVStack(spacing: 0.0) {\n        ForEach(items) { item in\n            FullScreenItem(item)\n        }\n    }\n}\n.scrollTargetBehavior(.paging)\n\nView Aligned Behavior\n\nSwiftUI offers a ViewAlignedScrollTargetBehavior scroll behavior that will always settle on the geometry of individual views.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollTargetBehavior(.viewAligned)\n.safeAreaPadding(.horizontal, 20.0)\n\n\nYou configure which views should be used for settling using the View/scrollTargetLayout(isEnabled:) modifier. Apply this modifier to a layout container like LazyVStack or HStack and each individual view in that layout will be considered for alignment."
  },
  {
    "title": "scrollTargetLayout(isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrolltargetlayout(isenabled:)",
    "html": "Discussion\n\nThis modifier works together with the ViewAlignedScrollTargetBehavior to ensure that scroll views align to view based content.\n\nApply this modifier to layout containers like LazyHStack or VStack within a ScrollView that contain the main repeating content of your ScrollView.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollTargetBehavior(.viewAligned)\n\n\nScroll target layouts act as a convenience for applying a View/scrollTarget(isEnabled:) modifier to each views in the layout.\n\nA scroll target layout will ensure that any target layout nested within the primary one will not also become a scroll target layout.\n\nLazyHStack { // a scroll target layout\n    VStack { ... } // not a scroll target layout\n    LazyHStack { ... } // also not a scroll target layout\n}\n.scrollTargetLayout()\n"
  },
  {
    "title": "scrollDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrolldisabled(_:)",
    "html": "Parameters\ndisabled\n\nA Boolean that indicates whether scrolling is disabled.\n\nDiscussion\n\nUse this modifier to control whether a ScrollView can scroll:\n\n@State private var isScrollDisabled = false\n\n\nvar body: some View {\n    ScrollView {\n        VStack {\n            Toggle(\"Disable\", isOn: $isScrollDisabled)\n            MyContent()\n        }\n    }\n    .scrollDisabled(isScrollDisabled)\n}\n\n\nSwiftUI passes the disabled property through the environment, which means you can use this modifier to disable scrolling for all scroll views within a view hierarchy. In the following example, the modifier affects both scroll views:\n\n ScrollView {\n     ForEach(rows) { row in\n         ScrollView(.horizontal) {\n             RowContent(row)\n         }\n     }\n }\n .scrollDisabled(true)\n\n\nYou can also use this modifier to disable scrolling for other kinds of scrollable views, like a List or a TextEditor."
  },
  {
    "title": "scrollTargetBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrolltargetbehavior(_:)",
    "html": "Discussion\n\nA scrollable view calculates where scroll gestures should end using its deceleration rate and the state of its scroll gesture by default. A scroll behavior allows for customizing this logic. You can provide your own ScrollTargetBehavior or use one of the built in behaviors provided by SwiftUI.\n\nPaging Behavior\n\nSwiftUI offers a PagingScrollTargetBehavior behavior which uses the geometry of the scroll view to decide where to allow scrolls to end.\n\nIn the following example, every view in the lazy stack is flexible in both directions and the scroll view will settle to container aligned boundaries.\n\nScrollView {\n    LazyVStack(spacing: 0.0) {\n        ForEach(items) { item in\n            FullScreenItem(item)\n        }\n    }\n}\n.scrollTargetBehavior(.paging)\n\nView Aligned Behavior\n\nSwiftUI offers a ViewAlignedScrollTargetBehavior scroll behavior that will always settle on the geometry of individual views.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollTargetBehavior(.viewAligned)\n.safeAreaPadding(.horizontal, 20.0)\n\n\nYou configure which views should be used for settling using the View/scrollTargetLayout(isEnabled:) modifier. Apply this modifier to a layout container like LazyVStack or HStack and each individual view in that layout will be considered for alignment."
  },
  {
    "title": "containerRelativeFrame(_:alignment:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/containerrelativeframe(_:alignment:_:)",
    "html": "Discussion\n\nUse the View/containerRelativeFrame(_:alignment:) modifier to specify a size for a view’s width, height, or both that is dependent on the size of the nearest container. Different things can represent a “container” including:\n\nThe window presenting a view on iPadOS or macOS, or the screen of a device on iOS.\n\nA column of a NavigationSplitView\n\nA NavigationStack\n\nA tab of a TabView\n\nA scrollable view like ScrollView or List\n\nThe size provided to this modifier is the size of a container like the ones listed above subtracting any safe area insets that might be applied to that container.\n\nThe following example will have each purple rectangle occupy the full size of the screen on iOS:\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 0.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .containerRelativeFrame([.horizontal, .vertical])\n        }\n    }\n}\n\n\nUse the View/containerRelativeFrame(_:count:spacing:alignment:) modifier to size a view such that multiple views will be visible in the container. When using this modifier, the count refers to the total number of rows or columns that the length of the container size in a particular axis should be divided into. The span refers to the number of rows or columns that the modified view should actually occupy. Thus the size of the element can be described like so:\n\nlet availableWidth = (containerWidth - (spacing * (count - 1)))\nlet columnWidth = (availableWidth / count)\nlet itemWidth = (columnWidth * span) + ((span - 1) * spacing)\n\n\nThe following example only uses the nearest container size in the horizontal axis, allowing the vertical axis to be determined using the View/aspectRatio(_:contentMode:)-771ow modifier.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            Rectangle()\n                .fill(.purple)\n                .aspectRatio(3.0 / 2.0, contentMode: .fit)\n                .containerRelativeFrame(\n                    .horizontal, count: 4, span: 3, spacing: 10.0)\n        }\n    }\n}\n.safeAreaPadding(.horizontal, 20.0)\n\n\nUse this modifier to apply your own custom logic to adjust the size of the nearest container for your view. The following example will result in the container frame’s width being divided by 3 and using that value as the width of the purple rectangle.\n\nRectangle()\n    .fill(.purple)\n    .aspectRatio(1.0, contentMode: .fill)\n    .containerRelativeFrame(\n        .horizontal, alignment: .topLeading\n    ) { length, axis in\n        if axis == .vertical {\n            return length / 3.0\n        } else {\n            return length / 5.0\n        }\n    }\n"
  },
  {
    "title": "scrollTargetLayout(isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrolltargetlayout(isenabled:)",
    "html": "Discussion\n\nThis modifier works together with the ViewAlignedScrollTargetBehavior to ensure that scroll views align to view based content.\n\nApply this modifier to layout containers like LazyHStack or VStack within a ScrollView that contain the main repeating content of your ScrollView.\n\nScrollView(.horizontal) {\n    LazyHStack(spacing: 10.0) {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollTargetBehavior(.viewAligned)\n\n\nScroll target layouts act as a convenience for applying a View/scrollTarget(isEnabled:) modifier to each views in the layout.\n\nA scroll target layout will ensure that any target layout nested within the primary one will not also become a scroll target layout.\n\nLazyHStack { // a scroll target layout\n    VStack { ... } // not a scroll target layout\n    LazyHStack { ... } // also not a scroll target layout\n}\n.scrollTargetLayout()\n"
  },
  {
    "title": "searchCompletion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchcompletion(_:)",
    "html": "Parameters\ntext\n\nA string to use as the view’s completion.\n\nDiscussion\n\nUse this method to associate a fully formed string with a view that is within a search suggestion list context. The system uses this value when the view is selected to replace the partial text being currently edited of the associated search field.\n\nOn tvOS, the string that you provide to the this modifier is used when displaying the associated suggestion and when replacing the partial text of the search field.\n\nSearchPlaceholderView()\n    .searchable(text: $text) {\n        Text(\"🍎\").searchCompletion(\"apple\")\n        Text(\"🍐\").searchCompletion(\"pear\")\n        Text(\"🍌\").searchCompletion(\"banana\")\n    }\n"
  },
  {
    "title": "contentMargins(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contentmargins(_:for:)",
    "html": "Parameters\nlength\n\nThe amount of margins to add on all edges.\n\nplacement\n\nWhere the margins should be added.\n\nDiscussion\n\nUse this modifier to customize the content margins of different kinds of views. For example, you can use this modifier to customize the margins of scrollable views like ScrollView. In the following example, the scroll view will automatically inset its content by the safe area plus an additional 20 points on the leading and trailing edge.\n\nScrollView(.horizontal) {\n    // ...\n}\n.contentMargins(.horizontal, 20.0)\n\n\nYou can provide a ContentMarginPlacement to target specific parts of a view to customize. For example, provide a ContentMargingPlacement/scrollContent placement to inset the content of a TextEditor without affecting the insets of its scroll indicators.\n\nTextEditor(text: $text)\n    .contentMargins(.horizontal, 20.0, for: .scrollContent)\n\n\nSimilarly, you can customize the insets of scroll indicators separately from scroll content. Consider doing this when applying a custom clip shape that may clip the indicators.\n\nScrollView {\n    // ...\n}\n.clipShape(.rect(cornerRadius: 20.0))\n.contentMargins(10.0, for: .scrollIndicators)\n\n\nWhen applying multiple contentMargins modifiers, modifiers with the same placement will override modifiers higher up in the view hierarchy."
  },
  {
    "title": "contentShape(_:eoFill:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contentshape(_:eofill:)",
    "html": "Parameters\nshape\n\nThe hit testing shape for the view.\n\neoFill\n\nA Boolean that indicates whether the shape is interpreted with the even-odd winding number rule.\n\nReturn Value\n\nA view that uses the given shape for hit testing."
  },
  {
    "title": "searchScopes(_:scopes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchscopes(_:scopes:)",
    "html": "Parameters\nscope\n\nThe active scope of the search field.\n\nscopes\n\nA view builder that represents the scoping options SwiftUI uses to populate a Picker.\n\nDiscussion\n\nTo enable people to narrow the scope of their searches, you can create a type that represents the possible scopes, and then create a state variable to hold the current selection. For example, you can scope the product search to just fruits or just vegetables:\n\nenum ProductScope {\n    case fruit\n    case vegetable\n}\n\n\n@State private var scope: ProductScope = .fruit\n\n\nProvide a binding to the scope, as well as a view that represents each scope:\n\nProductList()\n    .searchable(text: $text, tokens: $tokens) { token in\n        switch token {\n        case .apple: Text(\"Apple\")\n        case .pear: Text(\"Pear\")\n        case .banana: Text(\"Banana\")\n        }\n    }\n    .searchScopes($scope) {\n        Text(\"Fruit\").tag(ProductScope.fruit)\n        Text(\"Vegetable\").tag(ProductScope.vegetable)\n    }\n\n\nSwiftUI uses this binding and view to add a Picker with the search field. In iOS, iPadOS, macOS, and tvOS, the picker appears below the search field when search is active. To ensure that the picker operates correctly, match the type of the scope binding with the type of each view’s tag. Then modify your search to account for the current value of the scope state property.\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchPresentationToolbarBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchpresentationtoolbarbehavior(_:)",
    "html": "Discussion\n\nBy default on iOS, a toolbar may hide parts of its content when presenting search to focus on searching. You can override this behavior by providing a value of SearchPresentationToolbarBehavior/avoidHidingContent to this modifer.\n\n@State private var searchText = \"\"\n\n\nList {\n    // ... content\n}\n.searchable(text: $searchText)\n.searchPresentationToolbarBehavior(.avoidHidingContent)\n"
  },
  {
    "title": "colorInvert() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/colorinvert()",
    "html": "Return Value\n\nA view that inverts its colors.\n\nDiscussion\n\nThe colorInvert() modifier inverts all of the colors in a view so that each color displays as its complementary color. For example, blue converts to yellow, and white converts to black.\n\nIn the example below, two red squares each have an interior green circle. The inverted square shows the effect of the square’s colors: complimentary colors for red and green — teal and purple.\n\nstruct InnerCircleView: View {\n    var body: some View {\n        Circle()\n            .fill(Color.green)\n            .frame(width: 40, height: 40, alignment: .center)\n    }\n}\n\n\nstruct ColorInvert: View {\n    var body: some View {\n        HStack {\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .overlay(InnerCircleView(), alignment: .center)\n                .overlay(Text(\"Normal\")\n                             .font(.callout),\n                         alignment: .bottom)\n                .border(Color.gray)\n\n\n            Spacer()\n\n\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .overlay(InnerCircleView(), alignment: .center)\n                .colorInvert()\n                .overlay(Text(\"Inverted\")\n                             .font(.callout),\n                         alignment: .bottom)\n                .border(Color.gray)\n        }\n        .padding(50)\n    }\n}\n"
  },
  {
    "title": "colorScheme(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/colorscheme(_:)",
    "html": "Parameters\ncolorScheme\n\nThe color scheme for this view.\n\nReturn Value\n\nA view that sets this view’s color scheme.\n\nDiscussion\n\nUse colorScheme(_:) to set the color scheme for the view to which you apply it and any subviews. If you want to set the color scheme for all views in the presentation, use View/preferredColorScheme(_:) instead."
  },
  {
    "title": "compositingGroup() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/compositinggroup()",
    "html": "Return Value\n\nA view that wraps this view in a compositing group.\n\nDiscussion\n\nA compositing group makes compositing effects in this view’s ancestor views, such as opacity and the blend mode, take effect before this view is rendered.\n\nUse compositingGroup() to apply effects to a parent view before applying effects to this view.\n\nIn the example below the compositingGroup() modifier separates the application of effects into stages. It applies the View/opacity(_:) effect to the VStack before the blur(radius:) effect is applied to the views inside the enclosed ZStack. This limits the scope of the opacity change to the outermost view.\n\nVStack {\n    ZStack {\n        Text(\"CompositingGroup\")\n            .foregroundColor(.black)\n            .padding(20)\n            .background(Color.red)\n        Text(\"CompositingGroup\")\n            .blur(radius: 2)\n    }\n    .font(.largeTitle)\n    .compositingGroup()\n    .opacity(0.9)\n}\n"
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:actions:)-2xa9k",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            \"Permanently erase the items in the Trash?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-33psm",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nmessage\n\nA view builder returning the message for the dialog.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            \"Permanently erase the items in the Trash?\",\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n        } message: {\n            Text(\"You cannot undo this action.\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:actions:)-q22q",
    "html": "Parameters\ntitle\n\nthe title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            Text(\"Permanently erase the items in the trash?\"),\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-25f3t",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            \"Are you sure you want to import this file?\",\n            isPresented: $isConfirming, presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"\"\"\n                Import \\(detail.name)\n                File Type: \\(detail.fileType.description)\n                \"\"\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        }\n    }\n}\n\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1eroa",
    "html": "Parameters\ntitle\n\nA text string used as the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    var title: String\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            title, isPresented: $isConfirming,\n            presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"\"\"\n                Import \\(detail.name)\n                File Type: \\(detail.fileType.description)\n                \"\"\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "buttonStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/buttonstyle(_:)-4zdrd",
    "html": "Discussion\n\nUse this modifier to set a specific style for all button instances within a view:\n\nHStack {\n    Button(\"Sign In\", action: signIn)\n    Button(\"Register\", action: register)\n}\n.buttonStyle(.bordered)\n\n\nYou can also use this modifier to set the style for controls with a button style through composition:\n\nVStack {\n    Menu(\"Terms and Conditions\") {\n        Button(\"Open in Preview\", action: openInPreview)\n        Button(\"Save as PDF\", action: saveAsPDF)\n    }\n    Toggle(\"Remember Password\", isOn: $isToggleOn)\n    Toggle(\"Flag\", isOn: $flagged)\n    Button(\"Sign In\", action: signIn)\n}\n.menuStyle(.button)\n.toggleStyle(.button)\n.buttonStyle(.bordered)\n\n\nIn this example, .menuStyle(.button) says that the Terms and Conditions menu renders as a button, while .toggleStyle(.button) says that the two toggles also render as buttons. Finally, .buttonStyle(.bordered) says that the menu, both toggles, and the Sign In button all render with the bordered button style.```"
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-2vszn",
    "html": "Parameters\ntitle\n\nthe title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            Text(\"Import New File?\"),\n            isPresented: $isConfirming, presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"\"\"\n                Import \\(detail.name)\n                File Type: \\(detail.fileType.description)\n                \"\"\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "buttonRepeatBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/buttonrepeatbehavior(_:)",
    "html": "Parameters\nbehavior\n\nA value of enabled means that buttons should enable repeating behavior and a value of disabled means that buttons should disallow repeating behavior.\n\nDiscussion\n\nApply this to buttons that increment or decrement a value or perform some other inherently iterative operation. Interactions such as pressing-and-holding on the button, holding the button’s keyboard shortcut, or holding down the space key while the button is focused will trigger this repeat behavior.\n\nButton {\n    playbackSpeed.advance(by: 1)\n} label: {\n    Label(\"Speed up\", systemImage: \"hare\")\n}\n.buttonRepeatBehavior(.enabled)\n\n\nThis affects all system button styles, as well as automatically affects custom ButtonStyle conforming types. This does not automatically apply to custom PrimitiveButtonStyle conforming types, and the EnvironmentValues.buttonRepeatBehavior value should be used to adjust their custom gestures as appropriate."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1lq0n",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\ndata\n\nAn optional source of truth for the confirmation dialog. The system passes the contents to the modifier’s closures. You use this data to populate the fields of a confirmation dialog that you create that the system displays to the user.\n\nactions\n\nA view builder returning the dialog’s actions given the currently available data.\n\nmessage\n\nA view builder returning the message for the dialog given the currently available data.\n\nDiscussion\n\nIn order for the interface to appear, both isPresented must be true and data must not be nil. data should not change after the presentation occurs. Any changes which occur after the presentation occurs will be ignored.\n\nUse this method when you need to populate the fields of a confirmation dialog with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the dialog:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\nstruct ConfirmFileImport: View {\n    @State private var isConfirming = false\n    @State private var dialogDetail: FileDetails?\n    var body: some View {\n        Button(\"Import File\") {\n            dialogDetail = FileDetails(\n                name: \"MyImageFile.png\", fileType: .png)\n            isConfirming = true\n        }\n        .confirmationDialog(\n            \"Are you sure you want to import this file?\",\n            isPresented: $isConfirming, presenting: dialogDetail\n        ) { detail in\n            Button {\n                // Handle import action.\n            } label: {\n                Text(\"Import \\(detail.name)\")\n            }\n            Button(\"Cancel\", role: .cancel) {\n                dialogDetail = nil\n            }\n        } message: { detail in\n            Text(\n                \"\"\"\n                This will add \\(detail.name).\\(detail.fileType) \\\n                to your library.\n                \"\"\")\n        }\n    }\n}\n\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action.\n\nOn iOS, tvOS, and watchOS, confirmation dialogs only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "border(_:width:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/border(_:width:)",
    "html": "Parameters\ncontent\n\nA value that conforms to the ShapeStyle protocol, like a Color or HierarchicalShapeStyle, that SwiftUI uses to fill the border.\n\nwidth\n\nThe thickness of the border. The default is 1 pixel.\n\nReturn Value\n\nA view that adds a border with the specified style and width to this view.\n\nDiscussion\n\nUse this modifier to draw a border of a specified width around the view’s frame. By default, the border appears inside the bounds of this view. For example, you can add a four-point wide border covers the text:\n\nText(\"Purple border inside the view bounds.\")\n    .border(Color.purple, width: 4)\n\n\nTo place a border around the outside of this view, apply padding of the same width before adding the border:\n\nText(\"Purple border outside the view bounds.\")\n    .padding(4)\n    .border(Color.purple, width: 4)\n"
  },
  {
    "title": "brightness(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/brightness(_:)",
    "html": "Parameters\namount\n\nA value between 0 (no effect) and 1 (full white brightening) that represents the intensity of the brightness effect.\n\nReturn Value\n\nA view that brightens this view by the specified amount.\n\nDiscussion\n\nUse brightness(_:) to brighten the intensity of the colors in a view. The example below shows a series of red squares, with their brightness increasing from 0 (fully red) to 100% (white) in 20% increments.\n\nstruct Brightness: View {\n    var body: some View {\n        HStack {\n            ForEach(0..<6) {\n                Color.red.frame(width: 60, height: 60, alignment: .center)\n                    .brightness(Double($0) * 0.2)\n                    .overlay(Text(\"\\(Double($0) * 0.2 * 100, specifier: \"%.0f\")%\"),\n                             alignment: .bottom)\n                    .border(Color.gray)\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "scrollPosition(id:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrollposition(id:anchor:)",
    "html": "Discussion\n\nUse this modifier along with the View/scrollTargetLayout() modifier to know the identity of the view that is actively scrolled. As the scroll view scrolls, the binding will be updated with the identity of the leading-most / top-most view.\n\nUse the View/scrollTargetLayout() modifier to configure which the layout that contains your scroll targets. In the following example, the top-most ItemView will update with the scrolledID binding as the scroll view scrolls.\n\n@Binding var items: [Item]\n@Binding var scrolledID: Item.ID?\n\n\nScrollView {\n    LazyVStack {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollPosition(id: $scrolledID)\n\n\nYou can write to the binding to scroll to the view with the provided identity.\n\n@Binding var items: [Item]\n@Binding var scrolledID: Item.ID?\n\n\nScrollView {\n    // ...\n}\n.scrollPosition(id: $scrolledID)\n.toolbar {\n    Button(\"Scroll to Top\") {\n        scrolledID = items.first\n    }\n}\n\n\nSwiftUI will attempt to keep the view with the identity specified in the provided binding when events occur that might cause it to be scrolled out of view by the system. Some examples of these include:\n\nThe data backing the content of a scroll view is re-ordered.\n\nThe size of the scroll view changes, like when a window is resized on macOS or during a rotation on iOS.\n\nThe scroll view initially lays out it content defaulting to the top most view, but the binding has a different view’s identity.\n\nYou can provide an anchor to this modifier to both:\n\nInfluence which view the system chooses as the view whose identity value will update the providing binding as the scroll view scrolls.\n\nControl the alignment of the view when scrolling to a view when writing a new binding value.\n\nFor example, providing a value of UnitPoint/bottom will prefer to have the bottom-most view chosen and prefer to scroll to views aligned to the bottom."
  },
  {
    "title": "scrollTransition(topLeading:bottomTrailing:axis:transition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/scrolltransition(topleading:bottomtrailing:axis:transition:)",
    "html": "Parameters\ntransition\n\nthe transition to apply.\n\ntopLeading\n\nThe configuration that drives the transition when the view is about to appear at the top edge of a vertical scroll view, or the leading edge of a horizont scroll view.\n\nbottomTrailing\n\nThe configuration that drives the transition when the view is about to appear at the bottom edge of a vertical scroll view, or the trailing edge of a horizont scroll view.\n\naxis\n\nThe axis of the containing scroll view over which the transition will be applied. The default value of nil uses the axis of the innermost containing scroll view, or .vertical if the innermost scroll view is scrollable along both axes.\n\ntransition\n\nA closure that applies visual effects as a function of the provided phase."
  },
  {
    "title": "containerBackground(for:alignment:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/containerbackground(for:alignment:content:)",
    "html": "Parameters\nalignment\n\nThe alignment that the modifier uses to position the implicit ZStack that groups the background views. The default is Alignment/center.\n\ncontainer\n\nThe container that will use the background.\n\ncontent\n\nThe view to use as the background of the container.\n\nDiscussion\n\nThe following example uses a custom View as a background:\n\nstruct ContentView: View {\n    var body: some View {\n        NavigationStack {\n            List {\n                NavigationLink(\"Image\") {\n                    Text(\"Image\")\n                    .containerBackground(for: .navigation) {\n                        Image(name: \"ImageAsset\")\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nThe .containerBackground(for:alignment:content:) modifier differs from the View/background(_:ignoresSafeAreaEdges:) modifier by automatically filling an entire parent container. ContainerBackgroundPlacement describes the available containers."
  },
  {
    "title": "containerBackground(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/containerbackground(_:for:)",
    "html": "Discussion\n\nThe following example uses a LinearGradient as a background:\n\nstruct ContentView: View {\n    var body: some View {\n        NavigationStack {\n            List {\n                NavigationLink(\"Blue\") {\n                    Text(\"Blue\")\n                    .containerBackground(.blue.gradient, for: .navigation)\n                }\n                NavigationLink(\"Red\") {\n                    Text(\"Red\")\n                    .containerBackground(.red.gradient, for: .navigation)\n                }\n            }\n        }\n    }\n}\n\n\nThe .containerBackground(_:for:) modifier differs from the View/background(_:ignoresSafeAreaEdges:) modifier by automatically filling an entire parent container. ContainerBackgroundPlacement describes the available containers.\n\nParameters\n\nstyle: The shape style to use as the container background.\n\ncontainer: The container that will use the background."
  },
  {
    "title": "buttonBorderShape(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/buttonbordershape(_:)",
    "html": "Parameters\nshape\n\nthe shape to use.\n\nDiscussion\n\nThe border shape is used to draw the platter for a bordered button. On macOS, the specified border shape is only applied to bordered buttons in widgets."
  },
  {
    "title": "contentMargins(_:_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/contentmargins(_:_:for:)-3g4op",
    "html": "Parameters\nedges\n\nThe edges to add the margins to.\n\ninsets\n\nThe amount of margins to add.\n\nplacement\n\nWhere the margins should be added.\n\nDiscussion\n\nUse this modifier to customize the content margins of different kinds of views. For example, you can use this modifier to customize the margins of scrollable views like ScrollView. In the following example, the scroll view will automatically inset its content by the safe area plus an additional 20 points on the leading and trailing edge.\n\nScrollView(.horizontal) {\n    // ...\n}\n.contentMargins(.horizontal, 20.0)\n\n\nYou can provide a ContentMarginPlacement to target specific parts of a view to customize. For example, provide a ContentMargingPlacement/scrollContent placement to inset the content of a TextEditor without affecting the insets of its scroll indicators.\n\nTextEditor(text: $text)\n    .contentMargins(.horizontal, 20.0, for: .scrollContent)\n\n\nSimilarly, you can customize the insets of scroll indicators separately from scroll content. Consider doing this when applying a custom clip shape that may clip the indicators.\n\nScrollView {\n    // ...\n}\n.clipShape(.rect(cornerRadius: 20.0))\n.contentMargins(10.0, for: .scrollIndicators)\n\n\nWhen applying multiple contentMargins modifiers, modifiers with the same placement will override modifiers higher up in the view hierarchy."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3gca1",
    "html": "Parameters\ntitle\n\nthe title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nmessage\n\nA view builder returning the message for the dialog.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            Text(\"Permanently erase the items in the trash?\"),\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n        } message: {\n            Text(\"You cannot undo this action.\")\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action."
  },
  {
    "title": "confirmationDialog(_:isPresented:titleVisibility:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/confirmationdialog(_:ispresented:titlevisibility:actions:)-540w9",
    "html": "Parameters\ntitle\n\nA text string used as the title of the dialog.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the dialog. When the user presses or taps the dialog’s default action button, the system sets this value to false, dismissing the dialog.\n\ntitleVisibility\n\nThe visibility of the dialog’s title. The default value is Visibility/automatic.\n\nactions\n\nA view builder returning the dialog’s actions.\n\nDiscussion\n\nIn the example below, a button conditionally presents a confirmation dialog depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays a confirmation dialog with a cancel action and a destructive action.\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingDialog = false\n    var title: String\n    var body: some View {\n        Button(\"Empty Trash\") {\n            isShowingDialog = true\n        }\n        .confirmationDialog(\n            title,\n            isPresented: $isShowingDialog\n        ) {\n            Button(\"Empty Trash\", role: .destructive) {\n                // Handle empty trash action.\n            }\n            Button(\"Cancel\", role: .cancel) {\n                isShowingDialog = false\n            }\n        }\n    }\n}\n\n\nAll actions in a confirmation dialog will dismiss the dialog after the action runs. The default button will be shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nDialogs include a standard dismiss action by default. If you provide a button with a role of ButtonRole/cancel, that button takes the place of the default dismiss action. You don’t have to dismiss the presentation with the cancel button’s action.\n\nNote\n\nIn regular size classes in iOS, the system renders confirmation dialogs as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the standard dismiss action."
  },
  {
    "title": "colorMultiply(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/colormultiply(_:)",
    "html": "Parameters\ncolor\n\nThe color to bias this view toward.\n\nReturn Value\n\nA view with a color multiplication effect.\n\nDiscussion\n\nThe following example shows two versions of the same image side by side; at left is the original, and at right is a duplicate with the colorMultiply(_:) modifier applied with ShapeStyle/purple.\n\nstruct InnerCircleView: View {\n    var body: some View {\n        Circle()\n            .fill(Color.green)\n            .frame(width: 40, height: 40, alignment: .center)\n    }\n}\n\n\nstruct ColorMultiply: View {\n    var body: some View {\n        HStack {\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .overlay(InnerCircleView(), alignment: .center)\n                .overlay(Text(\"Normal\")\n                             .font(.callout),\n                         alignment: .bottom)\n                .border(Color.gray)\n\n\n            Spacer()\n\n\n            Color.red.frame(width: 100, height: 100, alignment: .center)\n                .overlay(InnerCircleView(), alignment: .center)\n                .colorMultiply(Color.purple)\n                .overlay(Text(\"Multiply\")\n                            .font(.callout),\n                         alignment: .bottom)\n                .border(Color.gray)\n        }\n        .padding(50)\n    }\n}\n"
  },
  {
    "title": "colorEffect(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/coloreffect(_:isenabled:)",
    "html": "Parameters\nshader\n\nThe shader to apply to self as a color filter.\n\nisEnabled\n\nWhether the effect is enabled or not.\n\nReturn Value\n\nA new view that renders self with the shader applied as a color filter.\n\nDiscussion\n\nFor a shader function to act as a color filter it must have a function signature matching:\n\n[[ stitchable ]] half4 name(float2 position, half4 color, args...)\n\n\nwhere position is the user-space coordinates of the pixel applied to the shader and color its source color, as a pre-multiplied color in the destination color space. args... should be compatible with the uniform arguments bound to shader. The function should return the modified color value.\n\nImportant\n\nViews backed by AppKit or UIKit views may not render into the filtered layer. Instead, they log a warning and display a placeholder image to highlight the error."
  },
  {
    "title": "background(_:alignment:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/background(_:alignment:)",
    "html": "Parameters\nbackground\n\nThe view to draw behind this view.\n\nalignment\n\nThe alignment with a default value of Alignment/center that you use to position the background view.\n\nDiscussion\n\nUse background(_:alignment:) when you need to place one view behind another, with the background view optionally aligned with a specified edge of the frontmost view.\n\nThe example below creates two views: the Frontmost view, and the DiamondBackground view. The Frontmost view uses the DiamondBackground view for the background of the image element inside the Frontmost view’s VStack.\n\nstruct DiamondBackground: View {\n    var body: some View {\n        VStack {\n            Rectangle()\n                .fill(.gray)\n                .frame(width: 250, height: 250, alignment: .center)\n                .rotationEffect(.degrees(45.0))\n        }\n    }\n}\n\n\nstruct Frontmost: View {\n    var body: some View {\n        VStack {\n            Image(systemName: \"folder\")\n                .font(.system(size: 128, weight: .ultraLight))\n                .background(DiamondBackground())\n        }\n    }\n}\n"
  },
  {
    "title": "background(_:in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/background(_:in:fillstyle:)-42iz8",
    "html": "Parameters\nstyle\n\nA ShapeStyle that SwiftUI uses to the fill the shape that you specify.\n\nshape\n\nAn instance of a type that conforms to Shape that SwiftUI draws behind the view.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified shape drawn behind it.\n\nDiscussion\n\nUse this modifier to layer a type that conforms to the Shape protocol behind a view. Specify the ShapeStyle that’s used to fill the shape. For example, you can create a Path that outlines a trapezoid:\n\nlet trapezoid = Path { path in\n    path.move(to: .zero)\n    path.addLine(to: CGPoint(x: 90, y: 0))\n    path.addLine(to: CGPoint(x: 80, y: 50))\n    path.addLine(to: CGPoint(x: 10, y: 50))\n}\n\n\nThen you can use that shape as a background for a Label:\n\nLabel(\"Flag\", systemImage: \"flag.fill\")\n    .padding()\n    .background(.teal, in: trapezoid)\n\n\nThe ShapeStyle/teal color fills the shape:\n\nThis modifier and View/background(_:in:fillStyle:)-20tq5 are convenience methods for placing a single shape behind a view. To create a background with other View types — or with a stack of views — use View/background(alignment:content:) instead. To add a ShapeStyle as a background, use View/background(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "background(_:ignoresSafeAreaEdges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/background(_:ignoressafeareaedges:)",
    "html": "Parameters\nstyle\n\nAn instance of a type that conforms to ShapeStyle that SwiftUI draws behind the modified view.\n\nedges\n\nThe set of edges for which to ignore safe area insets when adding the background. The default value is Edge/Set/all. Specify an empty set to respect safe area insets on all edges.\n\nReturn Value\n\nA view with the specified style drawn behind it.\n\nDiscussion\n\nUse this modifier to place a type that conforms to the ShapeStyle protocol — like a Color, Material, or HierarchicalShapeStyle — behind a view. For example, you can add the ShapeStyle/regularMaterial behind a Label:\n\nstruct FlagLabel: View {\n    var body: some View {\n        Label(\"Flag\", systemImage: \"flag.fill\")\n            .padding()\n            .background(.regularMaterial)\n    }\n}\n\n\nSwiftUI anchors the style to the view’s bounds. For the example above, the background fills the entirety of the label’s frame, which includes the padding:\n\nSwiftUI limits the background style’s extent to the modified view’s container-relative shape. You can see this effect if you constrain the FlagLabel view with a View/containerShape(_:) modifier:\n\nFlagLabel()\n    .containerShape(RoundedRectangle(cornerRadius: 16))\n\n\nThe background takes on the specified container shape:\n\nBy default, the background ignores safe area insets on all edges, but you can provide a specific set of edges to ignore, or an empty set to respect safe area insets on all edges:\n\nRectangle()\n    .background(\n        .regularMaterial,\n        ignoresSafeAreaEdges: []) // Ignore no safe area insets.\n\n\nIf you want to specify a View or a stack of views as the background, use View/background(alignment:content:) instead. To specify a Shape or InsettableShape, use View/background(_:in:fillStyle:)-89n7j or View/background(_:in:fillStyle:)-20tq5, respectively. To configure the background of a presentation, like a sheet, use View/presentationBackground(_:)."
  },
  {
    "title": "scrollIndicatorsFlash(onAppear:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrollindicatorsflash(onappear:)",
    "html": "Parameters\nonAppear\n\nA Boolean value that indicates whether the scroll indicators flash when the scroll view appears.\n\nReturn Value\n\nA view that flashes any visible scroll indicators when it first appears.\n\nDiscussion\n\nUse this modifier to control whether the scroll indicators of a scroll view briefly flash when the view first appears. For example, you can make the indicators flash by setting the onAppear parameter to true:\n\nScrollView {\n    // ...\n}\n.scrollIndicatorsFlash(onAppear: true)\n\n\nOnly scroll indicators that you configure to be visible flash. To flash scroll indicators when a value changes, use View/scrollIndicatorsFlash(trigger:) instead."
  },
  {
    "title": "scrollPosition(id:anchor:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrollposition(id:anchor:)",
    "html": "Discussion\n\nUse this modifier along with the View/scrollTargetLayout() modifier to know the identity of the view that is actively scrolled. As the scroll view scrolls, the binding will be updated with the identity of the leading-most / top-most view.\n\nUse the View/scrollTargetLayout() modifier to configure which the layout that contains your scroll targets. In the following example, the top-most ItemView will update with the scrolledID binding as the scroll view scrolls.\n\n@Binding var items: [Item]\n@Binding var scrolledID: Item.ID?\n\n\nScrollView {\n    LazyVStack {\n        ForEach(items) { item in\n            ItemView(item)\n        }\n    }\n    .scrollTargetLayout()\n}\n.scrollPosition(id: $scrolledID)\n\n\nYou can write to the binding to scroll to the view with the provided identity.\n\n@Binding var items: [Item]\n@Binding var scrolledID: Item.ID?\n\n\nScrollView {\n    // ...\n}\n.scrollPosition(id: $scrolledID)\n.toolbar {\n    Button(\"Scroll to Top\") {\n        scrolledID = items.first\n    }\n}\n\n\nSwiftUI will attempt to keep the view with the identity specified in the provided binding when events occur that might cause it to be scrolled out of view by the system. Some examples of these include:\n\nThe data backing the content of a scroll view is re-ordered.\n\nThe size of the scroll view changes, like when a window is resized on macOS or during a rotation on iOS.\n\nThe scroll view initially lays out it content defaulting to the top most view, but the binding has a different view’s identity.\n\nYou can provide an anchor to this modifier to both:\n\nInfluence which view the system chooses as the view whose identity value will update the providing binding as the scroll view scrolls.\n\nControl the alignment of the view when scrolling to a view when writing a new binding value.\n\nFor example, providing a value of UnitPoint/bottom will prefer to have the bottom-most view chosen and prefer to scroll to views aligned to the bottom."
  },
  {
    "title": "background(_:in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/background(_:in:fillstyle:)-7zq0c",
    "html": "Parameters\nstyle\n\nA ShapeStyle that SwiftUI uses to the fill the shape that you specify.\n\nshape\n\nAn instance of a type that conforms to InsettableShape that SwiftUI draws behind the view.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified insettable shape drawn behind it.\n\nDiscussion\n\nUse this modifier to layer a type that conforms to the InsettableShape protocol — like a Rectangle, Circle, or Capsule — behind a view. Specify the ShapeStyle that’s used to fill the shape. For example, you can place a RoundedRectangle behind a Label:\n\nLabel(\"Flag\", systemImage: \"flag.fill\")\n    .padding()\n    .background(.teal, in: RoundedRectangle(cornerRadius: 8))\n\n\nThe ShapeStyle/teal color fills the shape:\n\nThis modifier and View/background(_:in:fillStyle:)-89n7j are convenience methods for placing a single shape behind a view. To create a background with other View types — or with a stack of views — use View/background(alignment:content:) instead. To add a ShapeStyle as a background, use View/background(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "background(alignment:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/background(alignment:content:)",
    "html": "Parameters\nalignment\n\nThe alignment that the modifier uses to position the implicit ZStack that groups the background views. The default is Alignment/center.\n\ncontent\n\nA ViewBuilder that you use to declare the views to draw behind this view, stacked in a cascading order from bottom to top. The last view that you list appears at the front of the stack.\n\nReturn Value\n\nA view that uses the specified content as a background.\n\nDiscussion\n\nUse this modifier to place one or more views behind another view. For example, you can place a collection of stars beind a Text view:\n\nText(\"ABCDEF\")\n    .background(alignment: .leading) { Star(color: .red) }\n    .background(alignment: .center) { Star(color: .green) }\n    .background(alignment: .trailing) { Star(color: .blue) }\n\n\nThe example above assumes that you’ve defined a Star view with a parameterized color:\n\nstruct Star: View {\n    var color: Color\n\n\n    var body: some View {\n        Image(systemName: \"star.fill\")\n            .foregroundStyle(color)\n    }\n}\n\n\nBy setting different alignment values for each modifier, you make the stars appear in different places behind the text:\n\nIf you specify more than one view in the content closure, the modifier collects all of the views in the closure into an implicit ZStack, taking them in order from back to front. For example, you can layer a vertical bar behind a circle, with both of those behind a horizontal bar:\n\nColor.blue\n    .frame(width: 200, height: 10) // Creates a horizontal bar.\n    .background {\n        Color.green\n            .frame(width: 10, height: 100) // Creates a vertical bar.\n        Circle()\n            .frame(width: 50, height: 50)\n    }\n\n\nBoth the background modifier and the implicit ZStack composed from the background content — the circle and the vertical bar — use a default Alignment/center alignment. The vertical bar appears centered behind the circle, and both appear as a composite view centered behind the horizontal bar:\n\nIf you specify an alignment for the background, it applies to the implicit stack rather than to the individual views in the closure. You can see this if you add the Alignment/leading alignment:\n\nColor.blue\n    .frame(width: 200, height: 10)\n    .background(alignment: .leading) {\n        Color.green\n            .frame(width: 10, height: 100)\n        Circle()\n            .frame(width: 50, height: 50)\n    }\n\n\nThe vertical bar and the circle move as a unit to align the stack with the leading edge of the horizontal bar, while the vertical bar remains centered on the circle:\n\nTo control the placement of individual items inside the content closure, either use a different background modifier for each item, as the earlier example of stars under text demonstrates, or add an explicit ZStack inside the content closure with its own alignment:\n\nColor.blue\n    .frame(width: 200, height: 10)\n    .background(alignment: .leading) {\n        ZStack(alignment: .leading) {\n            Color.green\n                .frame(width: 10, height: 100)\n            Circle()\n                .frame(width: 50, height: 50)\n        }\n    }\n\n\nThe stack alignment ensures that the circle’s leading edge aligns with the vertical bar’s, while the background modifier aligns the composite view with the horizontal bar:\n\nYou can achieve layering without a background modifier by putting both the modified view and the background content into a ZStack. This produces a simpler view hierarchy, but it changes the layout priority that SwiftUI applies to the views. Use the background modifier when you want the modified view to dominate the layout.\n\nIf you want to specify a ShapeStyle like a HierarchicalShapeStyle or a Material as the background, use View/background(_:ignoresSafeAreaEdges:) instead. To specify a Shape or InsettableShape, use View/background(_:in:fillStyle:)-89n7j or View/background(_:in:fillStyle:)-20tq5, respectively. To configure the background of a presentation, like a sheet, use View/presentationBackground(alignment:content:)."
  },
  {
    "title": "background(in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/background(in:fillstyle:)-3rged",
    "html": "Parameters\nshape\n\nAn instance of a type that conforms to InsettableShape that SwiftUI draws behind the view using the ShapeStyle/background shape style.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified insettable shape drawn behind it.\n\nDiscussion\n\nThis modifier behaves like View/background(_:in:fillStyle:)-20tq5, except that it always uses the ShapeStyle/background shape style to fill the specified insettable shape. For example, you can use a RoundedRectangle as a background on a Label:\n\nZStack {\n    Color.teal\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background(in: RoundedRectangle(cornerRadius: 8))\n}\n\n\nWithout the background modifier, the fill color shows through the label. With the modifier, the label’s text and icon appear backed by a shape filled with a color that’s appropriate for light or dark appearance:\n\nTo create a background with other View types — or with a stack of views — use View/background(alignment:content:) instead. To add a ShapeStyle as a background, use View/background(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "backgroundPreferenceValue(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/backgroundpreferencevalue(_:_:)",
    "html": "Parameters\nkey\n\nThe preference key type whose value is to be read.\n\ntransform\n\nA function that produces the background view from the preference value read from the original view.\n\nReturn Value\n\nA view that layers a second view behind the view."
  },
  {
    "title": "background(ignoresSafeAreaEdges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/background(ignoressafeareaedges:)",
    "html": "Parameters\nedges\n\nThe set of edges for which to ignore safe area insets when adding the background. The default value is Edge/Set/all. Specify an empty set to respect safe area insets on all edges.\n\nReturn Value\n\nA view with the ShapeStyle/background shape style drawn behind it.\n\nDiscussion\n\nThis modifier behaves like View/background(_:ignoresSafeAreaEdges:), except that it always uses the ShapeStyle/background shape style. For example, you can add a background to a Label:\n\nZStack {\n    Color.teal\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background()\n}\n\n\nWithout the background modifier, the teal color behind the label shows through the label. With the modifier, the label’s text and icon appear backed by a region filled with a color that’s appropriate for light or dark appearance:\n\nIf you want to specify a View or a stack of views as the background, use View/background(alignment:content:) instead. To specify a Shape or InsettableShape, use View/background(_:in:fillStyle:)-89n7j or View/background(_:in:fillStyle:)-20tq5, respectively. To configure the background of a presentation, like a sheet, use View/presentationBackground(_:)."
  },
  {
    "title": "backgroundStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/backgroundstyle(_:)",
    "html": "Discussion\n\nThe following example uses this modifier to set the EnvironmentValues/backgroundStyle environment value to a ShapeStyle/blue color that includes a subtle Color/gradient. SwiftUI fills the Circle shape that acts as a background element with this style:\n\nImage(systemName: \"swift\")\n    .padding()\n    .background(in: Circle())\n    .backgroundStyle(.blue.gradient)\n\n\nTo restore the default background style, set the EnvironmentValues/backgroundStyle environment value to nil using the View/environment(_:_:) modifer:\n\n.environment(\\.backgroundStyle, nil)\n"
  },
  {
    "title": "backgroundPreferenceValue(_:alignment:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/backgroundpreferencevalue(_:alignment:_:)",
    "html": "Parameters\nkey\n\nThe preference key type whose value is to be read.\n\nalignment\n\nAn optional alignment to use when positioning the background view relative to the original view.\n\ntransform\n\nA function that produces the background view from the preference value read from the original view.\n\nReturn Value\n\nA view that layers a second view behind the view.\n\nDiscussion\n\nThe values of the preference key from both views are combined and made visible to the parent view."
  },
  {
    "title": "badge(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/badge(_:)-43zjv",
    "html": "Parameters\nkey\n\nAn optional string key to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThis modifier creates a Text view on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). For more information about localizing strings, see Text. The following example shows a list with a “Default” badge on one of its rows.\n\nNavigationView {\n    List(servers) { server in\n        Text(server.name)\n            .badge(server.isDefault ? \"Default\" : nil)\n    }\n    .navigationTitle(\"Servers\")\n}\n"
  },
  {
    "title": "badgeProminence(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/badgeprominence(_:)",
    "html": "Parameters\nprominence\n\nThe prominence to apply to badges.\n\nDiscussion\n\nBadges can be used for different kinds of information, from the passive number of items in a container to the number of required actions. The prominence of badges in Lists can be adjusted to reflect this and be made to draw more or less attention to themselves.\n\nBadges will default to standard prominence unless specified.\n\nThe following example shows a List displaying a list of folders with an informational badge with lower prominence, showing the number of items in the folder.\n\nList(folders) { folder in\n    Text(folder.name)\n        .badge(folder.numberOfItems)\n}\n.badgeProminence(.decreased)\n"
  },
  {
    "title": "blur(radius:opaque:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/blur(radius:opaque:)",
    "html": "Parameters\nradius\n\nThe radial size of the blur. A blur is more diffuse when its radius is large.\n\nopaque\n\nA Boolean value that indicates whether the blur renderer permits transparency in the blur output. Set to true to create an opaque blur, or set to false to permit transparency.\n\nDiscussion\n\nUse blur(radius:opaque:) to apply a gaussian blur effect to the rendering of this view.\n\nThe example below shows two Text views, the first with no blur effects, the second with blur(radius:opaque:) applied with the radius set to 2. The larger the radius, the more diffuse the effect.\n\nstruct Blur: View {\n    var body: some View {\n        VStack {\n            Text(\"This is some text.\")\n                .padding()\n            Text(\"This is some blurry text.\")\n                .blur(radius: 2.0)\n        }\n    }\n}\n"
  },
  {
    "title": "badge(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/badge(_:)-5hnb",
    "html": "Parameters\ncount\n\nAn integer value to display in the badge. Set the value to zero to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThe following example shows a List with the value of recentItems.count represented by a badge on one of the rows:\n\nList {\n    Text(\"Recents\")\n        .badge(recentItems.count)\n    Text(\"Favorites\")\n}\n"
  },
  {
    "title": "badge(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/badge(_:)-7uk2g",
    "html": "Parameters\nlabel\n\nAn optional string to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nThis modifier creates a Text view on your behalf, and treats the localized key similar to Text/init(_:)-9d1g4. The following example shows a list with a “Default” badge on one of its rows.\n\nNavigationView {\n    List(servers) { server in\n        Text(server.name)\n            .badge(server.defaultString())\n    }\n    .navigationTitle(\"Servers\")\n}\n"
  },
  {
    "title": "baselineOffset(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/baselineoffset(_:)",
    "html": "Parameters\nbaselineOffset\n\nThe amount to shift the text vertically (up or down) relative to its baseline.\n\nReturn Value\n\nA view where text is above or below its baseline."
  },
  {
    "title": "blendMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/blendmode(_:)",
    "html": "Parameters\nblendMode\n\nThe BlendMode for compositing this view.\n\nReturn Value\n\nA view that applies blendMode to this view.\n\nDiscussion\n\nUse blendMode(_:) to combine overlapping views and use a different visual effect to produce the result. The BlendMode enumeration defines many possible effects.\n\nIn the example below, the two overlapping rectangles have a BlendMode/colorBurn effect applied, which effectively removes the non-overlapping portion of the second image:\n\nHStack {\n    Color.yellow.frame(width: 50, height: 50, alignment: .center)\n\n\n    Color.red.frame(width: 50, height: 50, alignment: .center)\n        .rotationEffect(.degrees(45))\n        .padding(-20)\n        .blendMode(.colorBurn)\n}\n"
  },
  {
    "title": "scrollTransition(_:axis:transition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrolltransition(_:axis:transition:)",
    "html": "Parameters\nconfiguration\n\nThe configuration controlling how the transition will be applied. The configuration will be applied both while the view is coming into view and while it is disappearing (the transition is symmetrical).\n\naxis\n\nThe axis of the containing scroll view over which the transition will be applied. The default value of nil uses the axis of the innermost containing scroll view, or .vertical if the innermost scroll view is scrollable along both axes.\n\ncoordinateSpace\n\nThe coordinate space of the container that visibility is evaluated within. Defaults to .scrollView.\n\ntransition\n\nA closure that applies visual effects as a function of the provided phase."
  },
  {
    "title": "searchCompletion(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchcompletion(_:)",
    "html": "Parameters\ntext\n\nA string to use as the view’s completion.\n\nDiscussion\n\nUse this method to associate a fully formed string with a view that is within a search suggestion list context. The system uses this value when the view is selected to replace the partial text being currently edited of the associated search field.\n\nOn tvOS, the string that you provide to the this modifier is used when displaying the associated suggestion and when replacing the partial text of the search field.\n\nSearchPlaceholderView()\n    .searchable(text: $text) {\n        Text(\"🍎\").searchCompletion(\"apple\")\n        Text(\"🍐\").searchCompletion(\"pear\")\n        Text(\"🍌\").searchCompletion(\"banana\")\n    }\n"
  },
  {
    "title": "searchScopes(_:scopes:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchscopes(_:scopes:)",
    "html": "Parameters\nscope\n\nThe active scope of the search field.\n\nscopes\n\nA view builder that represents the scoping options SwiftUI uses to populate a Picker.\n\nDiscussion\n\nTo enable people to narrow the scope of their searches, you can create a type that represents the possible scopes, and then create a state variable to hold the current selection. For example, you can scope the product search to just fruits or just vegetables:\n\nenum ProductScope {\n    case fruit\n    case vegetable\n}\n\n\n@State private var scope: ProductScope = .fruit\n\n\nProvide a binding to the scope, as well as a view that represents each scope:\n\nProductList()\n    .searchable(text: $text, tokens: $tokens) { token in\n        switch token {\n        case .apple: Text(\"Apple\")\n        case .pear: Text(\"Pear\")\n        case .banana: Text(\"Banana\")\n        }\n    }\n    .searchScopes($scope) {\n        Text(\"Fruit\").tag(ProductScope.fruit)\n        Text(\"Vegetable\").tag(ProductScope.vegetable)\n    }\n\n\nSwiftUI uses this binding and view to add a Picker with the search field. In iOS, iPadOS, macOS, and tvOS, the picker appears below the search field when search is active. To ensure that the picker operates correctly, match the type of the scope binding with the type of each view’s tag. Then modify your search to account for the current value of the scope state property.\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchScopes(_:activation:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchscopes(_:activation:_:)",
    "html": "Parameters\nscope\n\nThe active scope of the search field.\n\nactivation\n\nThe activation style of the search field’s scopes.\n\nscopes\n\nA view builder that represents the scoping options SwiftUI uses to populate a Picker.\n\nDiscussion\n\nTo enable people to narrow the scope of their searches, you can create a type that represents the possible scopes, and then create a state variable to hold the current selection. For example, you can scope the product search to just fruits or just vegetables:\n\nenum ProductScope {\n    case fruit\n    case vegetable\n}\n\n\n@State private var scope: ProductScope = .fruit\n\n\nProvide a binding to the scope, as well as a view that represents each scope:\n\nProductList()\n    .searchable(text: $text, tokens: $tokens) { token in\n        switch token {\n        case .apple: Text(\"Apple\")\n        case .pear: Text(\"Pear\")\n        case .banana: Text(\"Banana\")\n        }\n    }\n    .searchScopes($scope) {\n        Text(\"Fruit\").tag(ProductScope.fruit)\n        Text(\"Vegetable\").tag(ProductScope.vegetable)\n    }\n\n\nSwiftUI uses this binding and view to add a Picker below the search field. In iOS, macOS, and tvOS, the picker appears below the search field when search is active. To ensure that the picker operates correctly, match the type of the scope binding with the type of each view’s tag. Then condition your search on the current value of the scope state property.\n\nBy default, the appearance of scopes varies by platform:\n\nIn iOS and iPadOS, search scopes appear when someone enters text into the search field and disappear when someone cancels the search.\n\nIn macOS, search scopes appear when SwiftUI presents search and disappear when someone cancels the search.\n\nHowever, you can use the activation parameter with a value of SearchScopeActivation/onTextEntry or SearchScopeActivation/onSearchPresentation to configure this behavior:\n\n.searchScopes($scope, activation: .onSearchPresentation) {\n    Text(\"Fruit\").tag(ProductScope.fruit)\n    Text(\"Vegetable\").tag(ProductScope.vegetable)\n}\n\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "anchorPreference(key:value:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/anchorpreference(key:value:transform:)",
    "html": "Parameters\nkey\n\nthe preference key type.\n\nvalue\n\nthe geometry value in the current coordinate space.\n\ntransform\n\nthe function to produce the preference value.\n\nReturn Value\n\na new version of the view that writes the preference."
  },
  {
    "title": "searchSuggestions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchsuggestions(_:)",
    "html": "Parameters\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nYou can suggest search terms during a search operation by providing a collection of view to this modifier. The interface presents the suggestion views as a list of choices when someone activates the search interface. Associate a string with each suggestion view by adding the View/searchCompletion(_:)-2uaf3 modifier to the view. For example, you can suggest fruit types by displaying their emoji, and provide the corresponding search string as a search completion in each case:\n\nProductList()\n    .searchable(text: $text)\n    .searchSuggestions {\n        Text(\"🍎\").searchCompletion(\"apple\")\n        Text(\"🍐\").searchCompletion(\"pear\")\n        Text(\"🍌\").searchCompletion(\"banana\")\n    }\n\n\nWhen someone chooses a suggestion, SwiftUI replaces the text in the search field with the search completion string. If you omit the search completion modifier for a particular suggestion view, SwiftUI displays the suggestion, but the suggestion view doesn’t react to taps or clicks.\n\nImportant\n\nIn tvOS, searchable modifiers only support suggestion views of type Text, like in the above example. Other platforms can use any view for the suggestions, including custom views.\n\nYou can update the suggestions that you provide as conditions change.\n\nFor example, you can specify an array of suggestions that you store in a model:\n\nProductList()\n    .searchable(text: $text)\n    .searchSuggestions {\n        ForEach(model.suggestedSearches) { suggestion in\n            Label(suggestion.title,  image: suggestion.image)\n                .searchCompletion(suggestion.text)\n        }\n    }\n\n\nIf the model’s suggestedSearches begins as an empty array, the interface doesn’t display any suggestions to start. You can then provide logic that updates the array based on some condition. For example, you might update the completions based on the current search text. Note that certain events or actions, like when someone moves a macOS window, might dismiss the suggestion view.\n\nFor more information about using search modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchScopes(_:activation:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchscopes(_:activation:_:)",
    "html": "Parameters\nscope\n\nThe active scope of the search field.\n\nactivation\n\nThe activation style of the search field’s scopes.\n\nscopes\n\nA view builder that represents the scoping options SwiftUI uses to populate a Picker.\n\nDiscussion\n\nTo enable people to narrow the scope of their searches, you can create a type that represents the possible scopes, and then create a state variable to hold the current selection. For example, you can scope the product search to just fruits or just vegetables:\n\nenum ProductScope {\n    case fruit\n    case vegetable\n}\n\n\n@State private var scope: ProductScope = .fruit\n\n\nProvide a binding to the scope, as well as a view that represents each scope:\n\nProductList()\n    .searchable(text: $text, tokens: $tokens) { token in\n        switch token {\n        case .apple: Text(\"Apple\")\n        case .pear: Text(\"Pear\")\n        case .banana: Text(\"Banana\")\n        }\n    }\n    .searchScopes($scope) {\n        Text(\"Fruit\").tag(ProductScope.fruit)\n        Text(\"Vegetable\").tag(ProductScope.vegetable)\n    }\n\n\nSwiftUI uses this binding and view to add a Picker below the search field. In iOS, macOS, and tvOS, the picker appears below the search field when search is active. To ensure that the picker operates correctly, match the type of the scope binding with the type of each view’s tag. Then condition your search on the current value of the scope state property.\n\nBy default, the appearance of scopes varies by platform:\n\nIn iOS and iPadOS, search scopes appear when someone enters text into the search field and disappear when someone cancels the search.\n\nIn macOS, search scopes appear when SwiftUI presents search and disappear when someone cancels the search.\n\nHowever, you can use the activation parameter with a value of SearchScopeActivation/onTextEntry or SearchScopeActivation/onSearchPresentation to configure this behavior:\n\n.searchScopes($scope, activation: .onSearchPresentation) {\n    Text(\"Fruit\").tag(ProductScope.fruit)\n    Text(\"Vegetable\").tag(ProductScope.vegetable)\n}\n\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchSuggestions(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchsuggestions(_:for:)",
    "html": "Parameters\nvisibility\n\nThe visibility of the search suggestions for the specified locations.\n\nplacements\n\nThe set of locations in which to set the visibility of search suggestions.\n\nDiscussion\n\nSwiftUI presents search suggestions differently depending on several factors, like the platform, the position of the search field, and the size class. Use this modifier when you want to only display suggestions in certain ways under certain conditions. For example, you might choose to display suggestions in a menu when possible, but directly filter your data source otherwise.\n\nenum FruitSuggestion: String, Identifiable {\n    case apple, banana, orange\n    var id: Self { self }\n}\n\n\n@State private var text = \"\"\n@State private var suggestions: [FruitSuggestion] = []\n\n\nvar body: some View {\n    MainContent()\n        .searchable(text: $text) {\n            ForEach(suggestions) { suggestion\n                Text(suggestion.rawValue)\n                    .searchCompletion(suggestion.rawValue)\n            }\n            .searchSuggestions(.hidden, for: .content)\n        }\n}\n"
  },
  {
    "title": "searchSuggestions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchsuggestions(_:)",
    "html": "Parameters\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nYou can suggest search terms during a search operation by providing a collection of view to this modifier. The interface presents the suggestion views as a list of choices when someone activates the search interface. Associate a string with each suggestion view by adding the View/searchCompletion(_:)-2uaf3 modifier to the view. For example, you can suggest fruit types by displaying their emoji, and provide the corresponding search string as a search completion in each case:\n\nProductList()\n    .searchable(text: $text)\n    .searchSuggestions {\n        Text(\"🍎\").searchCompletion(\"apple\")\n        Text(\"🍐\").searchCompletion(\"pear\")\n        Text(\"🍌\").searchCompletion(\"banana\")\n    }\n\n\nWhen someone chooses a suggestion, SwiftUI replaces the text in the search field with the search completion string. If you omit the search completion modifier for a particular suggestion view, SwiftUI displays the suggestion, but the suggestion view doesn’t react to taps or clicks.\n\nImportant\n\nIn tvOS, searchable modifiers only support suggestion views of type Text, like in the above example. Other platforms can use any view for the suggestions, including custom views.\n\nYou can update the suggestions that you provide as conditions change.\n\nFor example, you can specify an array of suggestions that you store in a model:\n\nProductList()\n    .searchable(text: $text)\n    .searchSuggestions {\n        ForEach(model.suggestedSearches) { suggestion in\n            Label(suggestion.title,  image: suggestion.image)\n                .searchCompletion(suggestion.text)\n        }\n    }\n\n\nIf the model’s suggestedSearches begins as an empty array, the interface doesn’t display any suggestions to start. You can then provide logic that updates the array based on some condition. For example, you might update the completions based on the current search text. Note that certain events or actions, like when someone moves a macOS window, might dismiss the suggestion view.\n\nFor more information about using search modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "bold(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/bold(_:)",
    "html": "Parameters\nisActive\n\nA Boolean value that indicates whether bold font styling is added. The default value is true.\n\nReturn Value\n\nA view with bold text."
  },
  {
    "title": "searchable(text:editableTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4jcl9",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding which controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "clipShape(_:style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/clipshape(_:style:)",
    "html": "Parameters\nshape\n\nThe clipping shape to use for this view. The shape fills the view’s frame, while maintaining its aspect ratio.\n\nstyle\n\nThe fill style to use when rasterizing shape.\n\nReturn Value\n\nA view that clips this view to shape, using style to define the shape’s rasterization.\n\nDiscussion\n\nUse clipShape(_:style:) to clip the view to the provided shape. By applying a clipping shape to a view, you preserve the parts of the view covered by the shape, while eliminating other parts of the view. The clipping shape itself isn’t visible.\n\nFor example, this code applies a circular clipping shape to a Text view:\n\nText(\"Clipped text in a circle\")\n    .frame(width: 175, height: 100)\n    .foregroundColor(Color.white)\n    .background(Color.black)\n    .clipShape(Circle())\n\n\nThe resulting view shows only the portion of the text that lies within the bounds of the circle."
  },
  {
    "title": "buttonStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/buttonstyle(_:)-5qmbr",
    "html": "Discussion\n\nUse this modifier to set a specific style for button instances within a view:\n\nHStack {\n    Button(\"Sign In\", action: signIn)\n    Button(\"Register\", action: register)\n}\n.buttonStyle(.bordered)\n"
  },
  {
    "title": "autocapitalization(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/autocapitalization(_:)",
    "html": "Parameters\nstyle\n\nOne of the autocapitalization modes defined in the UITextAutocapitalizationType enumeration.\n\nDiscussion\n\nUse autocapitalization(_:) when you need to automatically capitalize words, sentences, or other text like proper nouns.\n\nIn example below, as the user enters text each word is automatically capitalized:\n\nTextField(\"Last, First\", text: $fullName)\n    .autocapitalization(UITextAutocapitalizationType.words)\n\n\nThe UITextAutocapitalizationType enumeration defines the available capitalization modes. The default is UITextAutocapitalizationType.sentences."
  },
  {
    "title": "autocorrectionDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/autocorrectiondisabled(_:)",
    "html": "Parameters\ndisable\n\nA Boolean value that indicates whether autocorrection is disabled for this view. The default value is true.\n\nDiscussion\n\nUse this method when the effect of autocorrection would make it more difficult for the user to input information. The entry of proper names and street addresses are examples where autocorrection can negatively affect the user’s ability complete a data entry task.\n\nThe example below configures a TextField with the default keyboard. Disabling autocorrection allows the user to enter arbitrary text without the autocorrection system offering suggestions or attempting to override their input.\n\nTextField(\"1234 Main St.\", text: $address)\n    .keyboardType(.default)\n    .autocorrectionDisabled(true)\n"
  },
  {
    "title": "background(in:fillStyle:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/background(in:fillstyle:)-94liv",
    "html": "Parameters\nshape\n\nAn instance of a type that conforms to Shape that SwiftUI draws behind the view using the ShapeStyle/background shape style.\n\nfillStyle\n\nThe FillStyle to use when drawing the shape. The default style uses the nonzero winding number rule and antialiasing.\n\nReturn Value\n\nA view with the specified shape drawn behind it.\n\nDiscussion\n\nThis modifier behaves like View/background(_:in:fillStyle:)-89n7j, except that it always uses the ShapeStyle/background shape style to fill the specified shape. For example, you can create a Path that outlines a trapezoid:\n\nlet trapezoid = Path { path in\n    path.move(to: .zero)\n    path.addLine(to: CGPoint(x: 90, y: 0))\n    path.addLine(to: CGPoint(x: 80, y: 50))\n    path.addLine(to: CGPoint(x: 10, y: 50))\n}\n\n\nThen you can use that shape as a background for a Label:\n\nZStack {\n    Color.teal\n    Label(\"Flag\", systemImage: \"flag.fill\")\n        .padding()\n        .background(in: trapezoid)\n}\n\n\nWithout the background modifier, the fill color shows through the label. With the modifier, the label’s text and icon appear backed by a shape filled with a color that’s appropriate for light or dark appearance:\n\nTo create a background with other View types — or with a stack of views — use View/background(alignment:content:) instead. To add a ShapeStyle as a background, use View/background(_:ignoresSafeAreaEdges:)."
  },
  {
    "title": "badge(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/badge(_:)-9mvc6",
    "html": "Parameters\nlabel\n\nAn optional Text view to display as a badge. Set the value to nil to hide the badge.\n\nDiscussion\n\nUse a badge to convey optional, supplementary information about a view. Keep the contents of the badge as short as possible. Badges appear only in list rows, tab bars, and menus.\n\nUse this initializer when you want to style a Text view for use as a badge. The following example customizes the badge with the Text/monospacedDigit(), Text/foregroundColor(_:), and Text/bold() modifiers.\n\nvar body: some View {\n    let badgeView = Text(\"\\(recentItems.count)\")\n        .monospacedDigit()\n        .foregroundColor(.red)\n        .bold()\n\n\n    List {\n        Text(\"Recents\")\n            .badge(badgeView)\n        Text(\"Favorites\")\n    }\n}\n\n\nStyling the text view has no effect when the badge appears in a TabView."
  },
  {
    "title": "searchable(text:editableTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:editabletokens:ispresented:placement:prompt:token:)-9es06",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding which controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "alignmentGuide(_:computeValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alignmentguide(_:computevalue:)-r8ti",
    "html": "Parameters\ng\n\nA VerticalAlignment value at which to base the offset.\n\ncomputeValue\n\nA closure that returns the offset value to apply to this view.\n\nReturn Value\n\nA view modified with respect to its vertical alignment according to the computation performed in the method’s closure.\n\nDiscussion\n\nUse alignmentGuide(_:computeValue:) to calculate specific offsets to reposition views in relationship to one another. You can return a constant or can use the ViewDimensions argument to the closure to calculate a return value.\n\nIn the example below, the weather emoji are offset 20 points from the vertical center of the HStack.\n\nVStack {\n    Text(\"Today's Weather\")\n        .font(.title)\n        .border(.gray)\n\n\n    HStack {\n        Text(\"🌧\")\n            .alignmentGuide(VerticalAlignment.center) { _ in -20 }\n            .border(.gray)\n        Text(\"Rain & Thunderstorms\")\n            .border(.gray)\n        Text(\"⛈\")\n            .alignmentGuide(VerticalAlignment.center) { _ in 20 }\n            .border(.gray)\n    }\n}\n\n\nChanging the alignment of one view may have effects on surrounding views. Here the offset values inside a stack and its contained views is the difference of their absolute offsets."
  },
  {
    "title": "searchable(text:editableTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:editabletokens:placement:prompt:token:)-7qv0r",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "scrollTransition(topLeading:bottomTrailing:axis:transition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/scrolltransition(topleading:bottomtrailing:axis:transition:)",
    "html": "Parameters\ntransition\n\nthe transition to apply.\n\ntopLeading\n\nThe configuration that drives the transition when the view is about to appear at the top edge of a vertical scroll view, or the leading edge of a horizont scroll view.\n\nbottomTrailing\n\nThe configuration that drives the transition when the view is about to appear at the bottom edge of a vertical scroll view, or the trailing edge of a horizont scroll view.\n\naxis\n\nThe axis of the containing scroll view over which the transition will be applied. The default value of nil uses the axis of the innermost containing scroll view, or .vertical if the innermost scroll view is scrollable along both axes.\n\ntransition\n\nA closure that applies visual effects as a function of the provided phase."
  },
  {
    "title": "searchable(text:editableTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-6asb",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding which controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchPresentationToolbarBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchpresentationtoolbarbehavior(_:)",
    "html": "Discussion\n\nBy default on iOS, a toolbar may hide parts of its content when presenting search to focus on searching. You can override this behavior by providing a value of SearchPresentationToolbarBehavior/avoidHidingContent to this modifer.\n\n@State private var searchText = \"\"\n\n\nList {\n    // ... content\n}\n.searchable(text: $searchText)\n.searchPresentationToolbarBehavior(.avoidHidingContent)\n"
  },
  {
    "title": "allowedDynamicRange(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alloweddynamicrange(_:)",
    "html": "Parameters\nrange\n\nthe requested dynamic range, or nil to restore the default allowed range.\n\nReturn Value\n\na new view.\n\nDiscussion\n\nThe following example enables HDR rendering within a view hierarchy:\n\nMyView().allowedDynamicRange(.high)\n"
  },
  {
    "title": "searchable(text:editableTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:editabletokens:placement:prompt:token:)-9umjl",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:isPresented:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:ispresented:placement:prompt:)-5no2m",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "animation(_:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/animation(_:value:)",
    "html": "Parameters\nanimation\n\nThe animation to apply. If animation is nil, the view doesn’t animate.\n\nvalue\n\nA value to monitor for changes.\n\nReturn Value\n\nA view that applies animation to this view whenever value changes."
  },
  {
    "title": "aspectRatio(_:contentMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/aspectratio(_:contentmode:)-xqmx",
    "html": "Parameters\naspectRatio\n\nA size that specifies the ratio of width to height to use for the resulting view.\n\ncontentMode\n\nA flag indicating whether this view should fit or fill the parent context.\n\nReturn Value\n\nA view that constrains this view’s dimensions to aspectRatio, using contentMode as its scaling algorithm.\n\nDiscussion\n\nUse aspectRatio(_:contentMode:) to constrain a view’s dimensions to an aspect ratio specified by a CGSize.\n\nIf this view is resizable, the resulting view uses aspectRatio as its own aspect ratio. In this example, the purple ellipse has a 3:4 width-to-height ratio, and scales to fill its frame:\n\nEllipse()\n    .fill(Color.purple)\n    .aspectRatio(CGSize(width: 3, height: 4), contentMode: .fill)\n    .frame(width: 200, height: 200)\n    .border(Color(white: 0.75))\n"
  },
  {
    "title": "allowsTightening(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/allowstightening(_:)",
    "html": "Parameters\nflag\n\nA Boolean value that indicates whether the space between characters compresses when necessary.\n\nReturn Value\n\nA view that can compress the space between characters when necessary to fit text in a line.\n\nDiscussion\n\nUse allowsTightening(_:) to enable the compression of inter-character spacing of text in a view to try to fit the text in the view’s bounds.\n\nIn the example below, two identically configured text views show the effects of allowsTightening(_:) on the compression of the spacing between characters:\n\nVStack {\n    Text(\"This is a wide text element\")\n        .font(.body)\n        .frame(width: 200, height: 50, alignment: .leading)\n        .lineLimit(1)\n        .allowsTightening(true)\n\n\n    Text(\"This is a wide text element\")\n        .font(.body)\n        .frame(width: 200, height: 50, alignment: .leading)\n        .lineLimit(1)\n        .allowsTightening(false)\n}\n"
  },
  {
    "title": "aspectRatio(_:contentMode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/aspectratio(_:contentmode:)-5ybt2",
    "html": "Parameters\naspectRatio\n\nThe ratio of width to height to use for the resulting view. Use nil to maintain the current aspect ratio in the resulting view.\n\ncontentMode\n\nA flag that indicates whether this view fits or fills the parent context.\n\nReturn Value\n\nA view that constrains this view’s dimensions to the aspect ratio of the given size using contentMode as its scaling algorithm.\n\nDiscussion\n\nUse aspectRatio(_:contentMode:) to constrain a view’s dimensions to an aspect ratio specified by a CGFloat using the specified content mode.\n\nIf this view is resizable, the resulting view will have aspectRatio as its aspect ratio. In this example, the purple ellipse has a 3:4 width-to-height ratio, and scales to fit its frame:\n\nEllipse()\n    .fill(Color.purple)\n    .aspectRatio(0.75, contentMode: .fit)\n    .frame(width: 200, height: 200)\n    .border(Color(white: 0.75))\n"
  },
  {
    "title": "animation(_:body:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/animation(_:body:)",
    "html": "Discussion\n\nAny modifiers applied to the content of body will be applied to this view, and the animation will only be used on the modifiers defined in the body.\n\nThe following code animates the opacity changing with an easeInOut animation, while the contents of MyView are animated with the implicit transaction’s animation:\n\nMyView(isActive: isActive)\n    .animation(.easeInOut) { content in\n        content.opacity(isActive ? 1.0 : 0.0)\n    }\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryID:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:entryid:entrylabel:)-7bhaz",
    "html": "Parameters\nrotorLabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of values that will be used to generate the entries of the Rotor.\n\nentryID\n\nKey path on the entry type that can be used to generate an identifier for the Entry. The identifiers must match up with identifiers in ForEach or explicit id calls within the ScrollView.\n\nentryLabel\n\nKey path on the entry type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs. // messages is a list of Messages that have a subject and a // uuid. vipMessages is a filtered version of that list // containing only messages from VIPs. ScrollView { LazyVStack { ForEach(messages) { message in MessageView(message) } } } .accessibilityElement(children: .contain) .accessibilityRotor(“VIPs”, entries: vipMessages, id: .uuid, label: .subject)"
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityvalue(_:)-8poju",
    "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that’s different than the view’s label. For example, for a slider that you label as “Volume” using accessibilityLabel(), you can provide the current volume setting, like “60%”, using accessibilityValue()."
  },
  {
    "title": "accessibilityZoomAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityzoomaction(_:)",
    "html": "Discussion\n\nFor example, this is how a zoom action is used to transform the scale of a shape which has a MagnificationGesture.\n\nvar body: some View {\n    Circle()\n        .scaleEffect(magnifyBy)\n        .gesture(magnification)\n        .accessibilityLabel(\"Circle Magnifier\")\n        .accessibilityZoomAction { action in\n            switch action.direction {\n            case .zoomIn:\n                magnifyBy += 0.5\n            case .zoomOut:\n                 magnifyBy -= 0.5\n            }\n        }\n}\n"
  },
  {
    "title": "searchable(text:isPresented:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:ispresented:placement:prompt:)-80rmz",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "accessibilityRotor(_:entries:entryID:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:entryid:entrylabel:)-8q75m",
    "html": "Parameters\nsystemRotor\n\nThe system-provided Rotor that will be overridden by this custom Rotor.\n\nentries\n\nAn array of values that will be used to generate the entries of the Rotor.\n\nentryID\n\nKey path on the entry type that can be used to generate an identifier for the Entry. The identifiers must match up with identifiers in ForEach or explicit id calls within the ScrollView.\n\nentryLabel\n\nKey path on the entry type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to the headings in its vertical stack of messages.\n\n// `messageListItems` is a list of `MessageListItem`s\n// that are either a `Message` or a heading, containing a `subject`\n// and a `uuid`.\n// `headingMessageListItems` is a filtered list of\n// `messageListItems` containing just the headings.\nScrollView {\n    LazyVStack {\n        ForEach(messageListItems) { messageListItem in\n            switch messageListItem {\n                case .heading(let subject):\n                    Text(subject)\n                case .message(let message):\n                    MessageView(message)\n            }\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\n    .heading, entries: headingMessageListItems,\n    entryID: \\.uuid, label: \\.subject\n)\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:entrylabel:)-9qzuh",
    "html": "Parameters\nrotorLabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of identifiable values that will be used to generate the entries of the Rotor. The identifiers of the Identifiable values must match up with identifiers in a ForEach or explicit id calls within the ScrollView. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nentry\n\nKey path on the Identifiable type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s that have a\n// `subject`.\n// `vipMesages` is a filtered version of that list containing only\n// messages from VIPs.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages, label: \\.subject)\n"
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityvalue(_:)-6jvrt",
    "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that’s different than the view’s label. For example, for a slider that you label as “Volume” using accessibilityLabel(), you can provide the current volume setting, like “60%”, using accessibilityValue()."
  },
  {
    "title": "searchable(text:editableTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:editabletokens:placement:prompt:token:)-2duxb",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:editableTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:editabletokens:placement:prompt:token:)-3k0zl",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:editableTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:editabletokens:placement:prompt:token:)-xf4n",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:isPresented:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:ispresented:placement:prompt:)-9cf6",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "searchable(text:isPresented:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:ispresented:placement:prompt:)-1dnc7",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityvalue(_:)-o1oe",
    "html": "Discussion\n\nUse this method to describe the value represented by a view, but only if that’s different than the view’s label. For example, for a slider that you label as “Volume” using accessibilityLabel(), you can provide the current volume setting, like “60%”, using accessibilityValue()."
  },
  {
    "title": "searchable(text:isPresented:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:ispresented:placement:prompt:)-8hj5",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "actionSheet(item:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/actionsheet(item:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the action sheet. When item is non-nil, the system passes the contents to the modifier’s closure. You use this content to populate the fields of an action sheet that you create that the system displays to the user. If item changes, the system dismisses the currently displayed action sheet and replaces it with a new one using the same process.\n\ncontent\n\nA closure returning the ActionSheet you create.\n\nDiscussion\n\nUse this method when you need to populate the fields of an action sheet with content from a data source. The example below shows a custom data source, FileDetails, that provides data to populate the action sheet:\n\nstruct FileDetails: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\n\n\nstruct ConfirmFileImport: View {\n    @State private var sheetDetail: FileDetails?\n\n\n    var body: some View {\n        Button(\"Show Action Sheet\") {\n            sheetDetail = FileDetails(name: \"MyImageFile.png\",\n                                      fileType: .png)\n        }\n        .actionSheet(item: $sheetDetail) { detail in\n            ActionSheet(\n                title: Text(\"File Import\"),\n                message: Text(\"\"\"\n                         Import \\(detail.name)?\n                         File Type: \\(detail.fileType.description)\n                         \"\"\"),\n                buttons: [\n                    .destructive(Text(\"Import\"),\n                                 action: importFile),\n                    .cancel()\n                ])\n        }\n    }\n\n\n    func importFile() {\n        // Handle import action.\n    }\n}\n"
  },
  {
    "title": "alert(_:isPresented:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:actions:)-7wqgn",
    "html": "Parameters\ntitle\n\nThe title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n    let alertTitle: String = \"Login failed.\"\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                Text(alertTitle),\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "alert(_:isPresented:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:actions:)-qr13",
    "html": "Parameters\ntitle\n\nA text string used as the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n    let alertTitle: String = \"Login failed.\"\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                alertTitle,\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "alert(_:isPresented:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:actions:message:)-22eqj",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nmessage\n\nA ViewBuilder returning the message for the alert.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                \"Login failed.\",\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            } message: {\n                Text(\"Please check your credentials and try again.\")\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "alert(_:isPresented:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:actions:message:)-2yiua",
    "html": "Parameters\ntitle\n\nA text string used as the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nmessage\n\nA ViewBuilder returning the message for the alert.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n    let alertTitle: String = \"Login failed.\"\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                alertTitle,\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            } message: {\n                Text(\"Please check your credentials and try again.\")\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:presenting:actions:message:)-1f51p",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nmessage\n\nA ViewBuilder returning the message for the alert given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            \"Save failed.\",\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        } message: { details in\n            Text(details.error)\n        }\n    }\n}\n\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(_:isPresented:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:actions:message:)-7lfei",
    "html": "Parameters\ntitle\n\nThe title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nmessage\n\nA ViewBuilder returning the message for the alert.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n    let alertTitle: String = \"Login failed.\"\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                Text(alertTitle),\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            } message: {\n               Text(\"Please check your credentials and try again.\")\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:presenting:actions:message:)-2lob",
    "html": "Parameters\ntitle\n\nA text string used as the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nmessage\n\nA ViewBuilder returning the message for the alert given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n    let alertTitle: String = \"Save failed.\"\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            alertTitle,\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        } message: { details in\n            Text(details.error)\n        }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:presenting:actions:)-13mxn",
    "html": "Parameters\ntitle\n\nthe title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n    let alertTitle: String = \"Save failed.\"\n\n\n        var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            Text(alertTitle),\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:presenting:actions:)-36epo",
    "html": "Parameters\ntitle\n\nA text string used as the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n    let alertTitle: String = \"Save failed.\"\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            alertTitle,\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:presenting:actions:)-81nqk",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            \"Save failed.\",\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        }\n    }\n}\n\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings.\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted."
  },
  {
    "title": "alert(_:isPresented:presenting:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:presenting:actions:message:)-81vvt",
    "html": "Parameters\ntitle\n\nthe title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\ndata\n\nAn optional source of truth for the alert. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions given the currently available data.\n\nmessage\n\nA ViewBuilder returning the message for the alert given the currently available data.\n\nDiscussion\n\nFor the alert to appear, both isPresented must be true and data must not be nil. The data should not change after the presentation occurs. Any changes that you make after the presentation occurs are ignored.\n\nUse this method when you need to populate the fields of an alert with content from a data source. The example below shows a custom data source, SaveDetails, that provides data to populate the alert:\n\nstruct SaveDetails: Identifiable {\n    let name: String\n    let error: String\n    let id = UUID()\n}\n\n\nstruct SaveButton: View {\n    @State private var didError = false\n    @State private var details: SaveDetails?\n    let alertTitle: String = \"Save failed.\"\n\n\n    var body: some View {\n        Button(\"Save\") {\n            details = model.save(didError: $didError)\n        }\n        .alert(\n            Text(alertTitle),\n            isPresented: $didError,\n            presenting: details\n        ) { details in\n            Button(role: .destructive) {\n                // Handle the deletion.\n            } label: {\n                Text(\"Delete \\(details.name)\")\n            }\n            Button(\"Retry\") {\n                // Handle the retry action.\n            }\n        } message: { details in\n            Text(details.error)\n        }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nOnly unstyled text is supported for the message."
  },
  {
    "title": "alert(isPresented:error:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(ispresented:error:actions:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nerror\n\nAn optional localized Error that is used to generate the alert’s title. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nDiscussion\n\nIn the example below, a form conditionally presents an alert depending upon the value of an error. When the error value isn’t nil, the system presents an alert with an “OK” action.\n\nThe title of the alert is inferred from the error’s errorDescription.\n\nstruct TicketPurchase: View {\n    @State private var error: TicketPurchaseError? = nil\n    @State private var showAlert = false\n\n\n    var body: some View {\n        TicketForm(showAlert: $showAlert, error: $error)\n            .alert(isPresented: $showAlert, error: error) {\n                Button(\"OK\") {\n                    // Handle acknowledgement.\n                }\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "alert(isPresented:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(ispresented:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert that you create in the modifier’s content closure. When the user presses or taps OK the system sets isPresented to false which dismisses the alert.\n\ncontent\n\nA closure returning the alert to present.\n\nDiscussion\n\nUse this method when you need to show an alert to the user. The example below displays an alert that is shown when the user toggles a Boolean value that controls the presentation of the alert:\n\nstruct OrderCompleteAlert: View {\n    @State private var isPresented = false\n    var body: some View {\n        Button(\"Show Alert\", action: {\n            isPresented = true\n        })\n        .alert(isPresented: $isPresented) {\n            Alert(title: Text(\"Order Complete\"),\n                  message: Text(\"Thank you for shopping with us.\"),\n                  dismissButton: .default(Text(\"OK\")))\n        }\n    }\n}\n"
  },
  {
    "title": "alert(isPresented:error:actions:message:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(ispresented:error:actions:message:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nerror\n\nAn optional localized Error that is used to generate the alert’s title. The system passes the contents to the modifier’s closures. You use this data to populate the fields of an alert that you create that the system displays to the user.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nmessage\n\nA view builder returning the message for the alert given the current error.\n\nDiscussion\n\nIn the example below, a form conditionally presents an alert depending upon the value of an error. When the error value isn’t nil, the system presents an alert with an “OK” action.\n\nThe title of the alert is inferred from the error’s errorDescription.\n\nstruct TicketPurchase: View {\n    @State private var error: TicketPurchaseError? = nil\n    @State private var showAlert = false\n\n\n    var body: some View {\n        TicketForm(showAlert: $showAlert, error: $error)\n            .alert(isPresented: $showAlert, error: error) { _ in\n                Button(\"OK\") {\n                    // Handle acknowledgement.\n                }\n            } message: { error in\n                Text(error.recoverySuggestion ?? \"Try again later.\")\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "alignmentGuide(_:computeValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alignmentguide(_:computevalue:)-55stq",
    "html": "Parameters\ng\n\nA HorizontalAlignment value at which to base the offset.\n\ncomputeValue\n\nA closure that returns the offset value to apply to this view.\n\nReturn Value\n\nA view modified with respect to its horizontal alignment according to the computation performed in the method’s closure.\n\nDiscussion\n\nUse alignmentGuide(_:computeValue:) to calculate specific offsets to reposition views in relationship to one another. You can return a constant or can use the ViewDimensions argument to the closure to calculate a return value.\n\nIn the example below, the HStack is offset by a constant of 50 points to the right of center:\n\nVStack {\n    Text(\"Today's Weather\")\n        .font(.title)\n        .border(.gray)\n    HStack {\n        Text(\"🌧\")\n        Text(\"Rain & Thunderstorms\")\n        Text(\"⛈\")\n    }\n    .alignmentGuide(HorizontalAlignment.center) { _ in  50 }\n    .border(.gray)\n}\n.border(.gray)\n\n\nChanging the alignment of one view may have effects on surrounding views. Here the offset values inside a stack and its contained views is the difference of their absolute offsets."
  },
  {
    "title": "alert(item:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(item:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the alert. if item is non-nil, the system passes the contents to the modifier’s closure. You use this content to populate the fields of an alert that you create that the system displays to the user. If item changes, the system dismisses the currently displayed alert and replaces it with a new one using the same process.\n\ncontent\n\nA closure returning the alert to present.\n\nDiscussion\n\nUse this method when you need to show an alert that contains information from a binding to an optional data source that you provide. The example below shows a custom data source FileInfo whose properties configure the alert’s message field:\n\nstruct FileInfo: Identifiable {\n    var id: String { name }\n    let name: String\n    let fileType: UTType\n}\n\n\nstruct ConfirmImportAlert: View {\n    @State private var alertDetails: FileInfo?\n    var body: some View {\n        Button(\"Show Alert\") {\n            alertDetails = FileInfo(name: \"MyImageFile.png\",\n                                    fileType: .png)\n        }\n        .alert(item: $alertDetails) { details in\n            Alert(title: Text(\"Import Complete\"),\n                  message: Text(\"\"\"\n                    Imported \\(details.name) \\n File\n                    type: \\(details.fileType.description).\n                    \"\"\"),\n                  dismissButton: .default(Text(\"Dismiss\")))\n        }\n    }\n}\n"
  },
  {
    "title": "searchable(text:editableTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-6n2un",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding which controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "animation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/animation(_:)",
    "html": "Deprecated\n\nUse withAnimation or animation(_:value:) instead.\n\nParameters\nanimation\n\nThe animation to apply to animatable values within this view.\n\nReturn Value\n\nA view that wraps this view and applies animation to all animatable values used within the view.\n\nDiscussion\n\nUse this modifier on leaf views rather than container views. The animation applies to all child views within this view; calling animation(_:) on a container view can lead to unbounded scope."
  },
  {
    "title": "searchable(text:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:placement:prompt:)-31st3",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "actionSheet(isPresented:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/actionsheet(ispresented:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the action sheet that you create in the modifier’s content closure. When the user presses or taps the sheet’s default action button the system sets this value to false dismissing the sheet.\n\ncontent\n\nA closure returning the ActionSheet to present.\n\nDiscussion\n\nIn the example below, a button conditionally presents an action sheet depending upon the value of a bound Boolean variable. When the Boolean value is set to true, the system displays an action sheet with both destructive and default actions:\n\nstruct ConfirmEraseItems: View {\n    @State private var isShowingSheet = false\n    var body: some View {\n        Button(\"Show Action Sheet\", action: {\n            isShowingSheet = true\n        })\n        .actionSheet(isPresented: $isShowingSheet) {\n            ActionSheet(\n                title: Text(\"Permanently erase the items in the Trash?\"),\n                message: Text(\"You can't undo this action.\"),\n                buttons:[\n                    .destructive(Text(\"Empty Trash\"),\n                                 action: emptyTrashAction),\n                    .cancel()\n                ]\n            )}\n    }\n\n\n    func emptyTrashAction() {\n        // Handle empty trash action.\n    }\n}\n\n\nNote\n\nIn regular size classes in iOS, the system renders alert sheets as a popover that the user dismisses by tapping anywhere outside the popover, rather than displaying the default dismiss button."
  },
  {
    "title": "alert(_:isPresented:actions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/alert(_:ispresented:actions:)-2dqe4",
    "html": "Parameters\ntitleKey\n\nThe key for the localized string that describes the title of the alert.\n\nisPresented\n\nA binding to a Boolean value that determines whether to present the alert. When the user presses or taps one of the alert’s actions, the system sets this value to false and dismisses.\n\nactions\n\nA ViewBuilder returning the alert’s actions.\n\nDiscussion\n\nIn the example below, a login form conditionally presents an alert by setting the didFail state variable. When the form sets the value to to true, the system displays an alert with an “OK” action.\n\nstruct Login: View {\n    @State private var didFail = false\n\n\n    var body: some View {\n        LoginForm(didFail: $didFail)\n            .alert(\n                \"Login failed.\",\n                isPresented: $didFail\n            ) {\n                Button(\"OK\") {\n                    // Handle the acknowledgement.\n                }\n            }\n    }\n}\n\n\nAll actions in an alert dismiss the alert after the action runs. The default button is shown with greater prominence. You can influence the default button by assigning it the KeyboardShortcut/defaultAction keyboard shortcut.\n\nThe system may reorder the buttons based on their role and prominence.\n\nIf no actions are present, the system includes a standard “OK” action. No default cancel action is provided. If you want to show a cancel action, use a button with a role of ButtonRole/cancel.\n\nOn iOS, tvOS, and watchOS, alerts only support controls with labels that are Text. Passing any other type of view results in the content being omitted.\n\nThis modifier creates a Text view for the title on your behalf, and treats the localized key similar to Text/init(_:tableName:bundle:comment:). See Text for more information about localizing strings."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitycustomcontent(_:_:importance:)-ajnf",
    "html": "Parameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example: accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "accessibilityActivationPoint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityactivationpoint(_:)-2kbzb",
    "html": "Discussion\n\nUse this modifier to ensure that the activation point for a small element remains accurate even if you present a larger version of the element to VoiceOver.\n\nIf an activation point is not provided, an activation point will be derrived from one of the accessibility elements decendents or from the center of the accessibility frame."
  },
  {
    "title": "accessibilityAdjustableAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityadjustableaction(_:)",
    "html": "Discussion\n\nFor example, this is how an adjustable action to navigate through pages could be added to a view.\n\nvar body: some View {\n    PageControl()\n        .accessibilityAdjustableAction { direction in\n            switch direction {\n            case .increment:\n                // Go to next page\n            case .decrement:\n                // Go to previous page\n            }\n        }\n}\n"
  },
  {
    "title": "accessibilityAction(action:label:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityaction(action:label:)",
    "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction {\n            // Handle action\n        } label: {\n            Label(\"New Message\", systemImage: \"plus\")\n        }\n}\n"
  },
  {
    "title": "accessibilityAction(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityaction(_:_:)",
    "html": "Discussion\n\nFor example, this is how a .default action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction {\n            // Handle action\n        }\n}\n"
  },
  {
    "title": "accessibility(identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibility(identifier:)",
    "html": "Discussion\n\nUse this value for testing. It isn’t visible to the user."
  },
  {
    "title": "accessibilityActivationPoint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityactivationpoint(_:)-17i3o",
    "html": "Discussion\n\nUse this modifier to ensure that the activation point for a small element remains accurate even if you present a larger version of the element to VoiceOver.\n\nIf an activation point is not provided, an activation point will be derrived from one of the accessibility elements decendents or from the center of the accessibility frame."
  },
  {
    "title": "searchable(text:placement:prompt:suggestions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:placement:prompt:suggestions:)-58qku",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nWhere the search field should attempt to be placed based on the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:placement:prompt:)-7uayx",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchSuggestions(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchsuggestions(_:for:)",
    "html": "Parameters\nvisibility\n\nThe visibility of the search suggestions for the specified locations.\n\nplacements\n\nThe set of locations in which to set the visibility of search suggestions.\n\nDiscussion\n\nSwiftUI presents search suggestions differently depending on several factors, like the platform, the position of the search field, and the size class. Use this modifier when you want to only display suggestions in certain ways under certain conditions. For example, you might choose to display suggestions in a menu when possible, but directly filter your data source otherwise.\n\nenum FruitSuggestion: String, Identifiable {\n    case apple, banana, orange\n    var id: Self { self }\n}\n\n\n@State private var text = \"\"\n@State private var suggestions: [FruitSuggestion] = []\n\n\nvar body: some View {\n    MainContent()\n        .searchable(text: $text) {\n            ForEach(suggestions) { suggestion\n                Text(suggestion.rawValue)\n                    .searchCompletion(suggestion.rawValue)\n            }\n            .searchSuggestions(.hidden, for: .content)\n        }\n}\n"
  },
  {
    "title": "searchable(text:editableTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8tjlr",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding which controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:editableTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:editabletokens:placement:prompt:token:)-777eo",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\neditableTokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "accessibility(inputLabels:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibility(inputlabels:)",
    "html": "Parameters\ninputLabels\n\nAn array of Text elements to use as input labels.\n\nDiscussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don’t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibility(label:) modifier."
  },
  {
    "title": "accessibilityAction(named:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityaction(named:_:)-98uqi",
    "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction(named: \"New Message\") {\n            // Handle action\n        }\n}\n"
  },
  {
    "title": "accessibilityRespondsToUserInteraction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrespondstouserinteraction(_:)",
    "html": "Discussion\n\nIf this is not set, the value is inferred from the traits of the Accessibility element, the presence of Accessibility actions on the element, or the presence of gestures on the element or containing views."
  },
  {
    "title": "accessibility(hint:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibility(hint:)",
    "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like “Purchases the item” or “Downloads the attachment”."
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitylabel(_:)-1xc1a",
    "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn’t display text, like an icon. For example, you could use this method to label a button that plays music with the text “Play”. Don’t include text in the label that repeats information that users already have. For example, don’t use the label “Play button” because a button already has a trait that identifies it as a button."
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitylabel(_:)-2vnrg",
    "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn’t display text, like an icon. For example, you could use this method to label a button that plays music with the text “Play”. Don’t include text in the label that repeats information that users already have. For example, don’t use the label “Play button” because a button already has a trait that identifies it as a button."
  },
  {
    "title": "accessibilityRotor(_:entries:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:)-1bbab",
    "html": "Parameters\nlabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nContent used to generate Rotor entries. This can include AccessibilityRotorEntry structs, as well as constructs such as if and ForEach.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\") {\n    // Not all the MessageViews are generated at once, the model knows\n    // about all the messages.\n    ForEach(messages) { message in\n        // If the Message is from a VIP, make a Rotor entry for it.\n        if message.isVIP {\n            AccessibilityRotorEntry(message.subject, id: message.id)\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryID:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:entryid:entrylabel:)-756rn",
    "html": "Parameters\nlabelKey\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of values that will be used to generate the entries of the Rotor.\n\nentryID\n\nKey path on the entry type that can be used to generate an identifier for the Entry. The identifiers must match up with identifiers in ForEach or explicit id calls within the ScrollView.\n\nentryLabel\n\nKey path on the entry type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Message`s that have a `subject` and a\n// `uuid`. `vipMesages` is a filtered version of that list\n// containing only messages from VIPs.\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages,\n    entryID: \\.uuid, entryLabel: \\.subject)\n"
  },
  {
    "title": "accessibilityRotor(_:entries:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:)-3ztdd",
    "html": "Parameters\nlabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nContent used to generate Rotor entries. This can include AccessibilityRotorEntry structs, as well as constructs such as if and ForEach.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\") {\n    // Not all the MessageViews are generated at once, the model\n    // knows about all the messages.\n    ForEach(messages) { message in\n        // If the Message is from a VIP, make a Rotor entry for it.\n        if message.isVIP {\n            AccessibilityRotorEntry(message.subject, id: message.id)\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityRotor(_:entries:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:)-9u08x",
    "html": "Parameters\nsystemRotor\n\nThe system-provided Rotor that will be overridden by this custom Rotor.\n\nentries\n\nContent used to generate Rotor entries. This can include AccessibilityRotorEntry structs, as well as constructs such as if and ForEach.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements. Replacing system Rotors this way is useful when the System Rotor does not automatically pick up elements that aren’t on-screen, such as elements far down in a LazyVStack or List.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing headings.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated\n    // when `content` is set and then cached so that we don't have\n    // to re-compute them.\n    var contentHeadingRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(.heading) {\n            ForEach(range in message.contentHeadingRanges) {\n                AccessibilityRotorEntry(textRange: range)\n            }\n        }\n}\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryID:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:entryid:entrylabel:)-53k89",
    "html": "Parameters\nrotorLabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of values that will be used to generate the entries of the Rotor.\n\nentryID\n\nKey path on the entry type that can be used to generate an identifier for the Entry. The identifiers must match up with identifiers in ForEach or explicit id calls within the ScrollView.\n\nentryLabel\n\nKey path on the entry type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Message`s that have a `subject` and a\n// `uuid`. `vipMessages` is a filtered version of that list\n// containing only messages from VIPs.\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages,\n    id: \\.uuid, label: \\.subject)\n"
  },
  {
    "title": "accessibilityRotor(_:entries:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:)-50h30",
    "html": "Parameters\nlabelKey\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nContent used to generate Rotor entries. This can include AccessibilityRotorEntry structs, as well as constructs such as if and ForEach.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\") {\n    // Not all the MessageViews are generated at once, the model\n    // knows about all the messages.\n    ForEach(messages) { message in\n        // If the Message is from a VIP, make a Rotor entry for it.\n        if message.isVIP {\n            AccessibilityRotorEntry(message.subject, id: message.id)\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:entrylabel:)-10j83",
    "html": "Parameters\nrotorLabel\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of identifiable values that will be used to generate the entries of the Rotor. The identifiers of the Identifiable values must match up with identifiers in a ForEach or explicit id calls within the ScrollView. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nentryLabel\n\nKey path on the Identifiable type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s that have a\n// `subject`.\n// `vipMessages` is a filtered version of that list containing only\n// messages from VIPs.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages, label: \\.subject)\n"
  },
  {
    "title": "accessibilityRotorEntry(id:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotorentry(id:in:)",
    "html": "Parameters\nid\n\nAn arbitrary hashable identifier. Pass this same value when initializing an AccessibilityRotorEntry.\n\nnamespace\n\nA namespace created with @Namespace(). Pass this same namespace when initializing an AccessibilityRotorEntry.\n\nDiscussion\n\nUse this when creating an AccessibilityRotorEntry without a namespace does not allow SwiftUI to automatically find and reveal the element, or when the Rotor entry should be associated with a sub-element of a complex view generated in a ForEach, for example."
  },
  {
    "title": "accessibilitySortPriority(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitysortpriority(_:)",
    "html": "Discussion\n\nHigher numbers are sorted first. The default sort priority is zero."
  },
  {
    "title": "accessibilityRotor(_:textRanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:textranges:)-2mep8",
    "html": "Parameters\nlabel\n\nLocalized label identifying this Rotor to the user.\n\ntextRanges\n\nAn array of ranges that will be used to generate the entries of the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing email addresses.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated\n    // when `content` is set and then cached so that we don't have\n    // to re-compute them.\n    var emailAddressRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(\"Email Addresses\",\n            textRanges: message.emailAddressRanges)\n}\n"
  },
  {
    "title": "accessibilityRotor(_:textRanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:textranges:)-5l3al",
    "html": "Parameters\nsystemRotor\n\nThe system-provided Rotor that will be overridden by this custom Rotor.\n\ntextRanges\n\nAn array of ranges that will be used to generate the entries of the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing headings.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated when\n    // `content` is set and then cached so that we don't have to\n    // re-compute them.\n    var headingRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(\n            .heading,\n            textRanges: message.headingRanges\n        )\n}\n"
  },
  {
    "title": "accessibilityRotor(_:textRanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:textranges:)-8gmf2",
    "html": "Parameters\nlabel\n\nLocalized label identifying this Rotor to the user.\n\ntextRanges\n\nAn array of ranges that will be used to generate the entries of the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing email addresses.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated\n    // when `content` is set and then cached so that we don't have\n    // to re-compute them.\n    var emailAddressRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(\"Email Addresses\",\n            textRanges: message.emailAddressRanges)\n}\n"
  },
  {
    "title": "accessibilityShowsLargeContentViewer(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityshowslargecontentviewer(_:)",
    "html": "Discussion\n\nRely on the large content viewer only in situations where items must remain small due to unavoidable design constraints. For example, buttons in a tab bar remain small to leave more room for the main app content.\n\nThe following example shows how to add a custom large content view:\n\nvar body: some View {\n    Button(action: newMessage) {\n        Image(systemName: \"plus\")\n    }\n    .accessibilityShowsLargeContentViewer {\n        Label(\"New Message\", systemImage: \"plus\")\n    }\n}\n\n\nDon’t use the large content viewer as a replacement for proper Dynamic Type support. For example, Dynamic Type allows items in a list to grow or shrink vertically to accommodate the user’s preferred font size. Rely on the large content viewer only in situations where items must remain small due to unavoidable design constraints.\n\nFor example, views that have their Dynamic Type size constrained with View/dynamicTypeSize(_:)-26aj0 or View/dynamicTypeSize(_:)-26aj0 may require a large content view."
  },
  {
    "title": "accessibilityRotor(_:textRanges:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:textranges:)-8mglc",
    "html": "Parameters\nlabelKey\n\nLocalized label identifying this Rotor to the user.\n\ntextRanges\n\nAn array of ranges that will be used to generate the entries of the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nIn the following example, a Message application adds a Rotor allowing the user to navigate through all the ranges of text containing email addresses.\n\nextension Message {\n    // Ranges of special areas in the `content` text. Calculated\n    // when `content` is set and then cached so that we don't have\n    // to re-compute them.\n    var emailAddressRanges: [Range<String.Index>]\n}\n\n\nstruct MessageContentView: View {\n    TextEditor(.constant(message.content))\n        .accessibilityRotor(\"Email Addresses\",\n            textRanges: message.emailAddressRanges)\n}\n"
  },
  {
    "title": "accessibilityTextContentType(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitytextcontenttype(_:)",
    "html": "Parameters\nvalue\n\nThe accessibility content type from the available AccessibilityTextContentType options.\n\nDiscussion\n\nUse this modifier to set the content type of this accessibility element. Assistive technologies can use this property to choose an appropriate way to output the text. For example, when encountering a source coding context, VoiceOver could choose to speak all punctuation.\n\nThe default content type AccessibilityTextContentType/plain."
  },
  {
    "title": "accessibilityScrollAction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityscrollaction(_:)",
    "html": "Discussion\n\nFor example, this is how a scroll action to trigger a refresh could be added to a view.\n\nvar body: some View {\n    ScrollView {\n        ContentView()\n    }\n    .accessibilityScrollAction { edge in\n        if edge == .top {\n            // Refresh content\n        }\n    }\n}\n"
  },
  {
    "title": "accessibilityShowsLargeContentViewer() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityshowslargecontentviewer()",
    "html": "Discussion\n\nRely on the large content viewer only in situations where items must remain small due to unavoidable design constraints. For example, buttons in a tab bar remain small to leave more room for the main app content.\n\nThe following example shows how to add a custom large content view:\n\nvar body: some View {\n    Button(\"New Message\", action: newMessage)\n        .accessibilityShowsLargeContentViewer()\n}\n\n\nDon’t use the large content viewer as a replacement for proper Dynamic Type support. For example, Dynamic Type allows items in a list to grow or shrink vertically to accommodate the user’s preferred font size. Rely on the large content viewer only in situations where items must remain small due to unavoidable design constraints.\n\nFor example, views that have their Dynamic Type size constrained with View/dynamicTypeSize(_:)-26aj0 or View/dynamicTypeSize(_:)-26aj0 may require a large content view."
  },
  {
    "title": "searchable(text:placement:prompt:suggestions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:placement:prompt:suggestions:)-rijc",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nWhere the search field should attempt to be placed based on the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "accessibilityHint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityhint(_:)-4offr",
    "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like “Purchases the item” or “Downloads the attachment”."
  },
  {
    "title": "accessibilityActions(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityactions(_:)",
    "html": "Discussion\n\nActions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action. For example, this is how a dynamic number of custom action could be added to a view.\n\nvar isDraft: Bool\n\n\nvar body: some View {\n    ContentView()\n        .accessibilityActions {\n            ForEach(actions) { action in\n                Button {\n                    action()\n                } label: {\n                    Text(action.title)\n                }\n            }\n\n\n            if isDraft {\n                Button {\n                    // Handle Delete\n                } label: {\n                    Text(\"Delete\")\n                }\n            }\n        }\n"
  },
  {
    "title": "accessibilityAction(named:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityaction(named:_:)-4fqf2",
    "html": "Discussion\n\nFor example, this is how a custom action to compose a new email could be added to a view.\n\nvar body: some View {\n    ContentView()\n        .accessibilityAction(named: \"New Message\") {\n            // Handle action\n        }\n}\n"
  },
  {
    "title": "accessibility(selectionIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibility(selectionidentifier:)",
    "html": "Discussion\n\nPicker uses the value to determine what node to use for the accessibility value."
  },
  {
    "title": "accessibilityRepresentation(representation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrepresentation(representation:)",
    "html": "Parameters\nrepresentation\n\nA hidden view that the accessibility system uses to generate accessibility elements.\n\nDiscussion\n\nYou can make controls accessible by using a custom style. For example, a custom ToggleStyle that you create inherits the accessibility features of Toggle automatically. When you can’t use the parent view’s accessibility elements, use the accessibilityRepresentation(representation:) modifier instead. This modifier replaces default accessibility elements with different accessibility elements that you provide. You use synthetic, non-visual accessibility elements to represent what the view displays.\n\nThe example below makes a custom adjustable control accessible by explicitly defining the representation of its step increments using a Slider:\n\nvar body: some View {\n    VStack {\n        SliderTrack(...) // Custom slider implementation.\n    }\n    .accessibilityRepresentation {\n        Slider(value: $value, in: 0...100) {\n            Text(\"Label\")\n        }\n    }\n}\n\n\nSwiftUI hides the view that you provide in the representation closure and makes it non-interactive. The framework uses it only to generate accessibility elements."
  },
  {
    "title": "accessibilityLinkedGroup(id:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitylinkedgroup(id:in:)",
    "html": "Parameters\nid\n\nA hashable identifier used to separate sets of linked elements within the same namespace. Elements with matching namespace and id will be linked together.\n\nnamespace\n\nThe namespace to use to organize linked accessibility elements. All elements marked with accessibilityLink in this namespace and with the specified id will be linked together.\n\nDiscussion\n\nThis can be useful to allow quickly jumping between content in a list and the same content shown in a detail view, for example. All elements marked with accessibilityLinkedGroup with the same namespace and identifier will be linked together."
  },
  {
    "title": "accessibilityLabeledPair(role:id:in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitylabeledpair(role:id:in:)",
    "html": "Parameters\nrole\n\nDetermines whether this element should be used as the label in the pair, or the content in the pair.\n\nid\n\nThe identifier for the label / content pair. Elements with matching identifiers within the same namespace will be paired together.\n\nnamespace\n\nThe namespace used to organize label and content. Label and content under the same namespace with matching identifiers will be paired together.\n\nDiscussion\n\nUse accessibilityLabeledPair with a role of AccessibilityLabeledPairRole.label to identify the label, and a role of AccessibilityLabeledPairRole.content to identify the content. This improves the behavior of accessibility features such as VoiceOver when navigating such elements, allowing users to better understand the relationship between them."
  },
  {
    "title": "accessibilityRotor(_:entries:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:entrylabel:)-9mth9",
    "html": "Parameters\nrotorLabelKey\n\nLocalized label identifying this Rotor to the user.\n\nentries\n\nAn array of identifiable values that will be used to generate the entries of the Rotor. The identifiers of the Identifiable values must match up with identifiers in a ForEach or explicit id calls within the ScrollView. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nentryLabel\n\nKey path on the Identifiable type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.\n\n// `messages` is a list of `Identifiable` `Message`s that have a\n// `subject`.\n// `vipMessages` is a filtered version of that list containing only\n// messages from VIPs.\n\n\nScrollView {\n    LazyVStack {\n        ForEach(messages) { message in\n            MessageView(message)\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\"VIPs\", entries: vipMessages,\n    entryLabel: \\.subject)\n"
  },
  {
    "title": "accessibilityRotor(_:entries:entryLabel:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityrotor(_:entries:entrylabel:)-utdt",
    "html": "Parameters\nsystemRotor\n\nThe system-provided Rotor that will be overridden by this custom Rotor.\n\nentries\n\nAn array of identifiable values that will be used to generate the entries of the Rotor. The identifiers of the Identifiable values must match up with identifiers in a ForEach or explicit id calls within the ScrollView. When the user navigates to entries from this Rotor, SwiftUI will automatically scroll them into place as needed.\n\nentryLabel\n\nKey path on the Identifiable type that can be used to get a user-visible label for every Rotor entry. This is used on macOS when the user opens the list of entries for the Rotor.\n\nDiscussion\n\nAn Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.\n\nUsing this modifier requires that the Rotor be attached to a ScrollView, or an Accessibility Element directly within a ScrollView, such as a ForEach.\n\nIn the following example, a Message application creates a Rotor allowing users to navigate to the headings in its vertical stack of messages.\n\n// `messageListItems` is a list of `Identifiable` `MessageListItem`s\n// that are either a `Message` or a heading, containing a `subject`.\n// `headingMessageListItems` is a filtered list of\n// `messageListItems` containing just the headings.\nScrollView {\n    LazyVStack {\n        ForEach(messageListItems) { messageListItem in\n            switch messageListItem {\n                case .heading(let subject):\n                    Text(subject)\n                case .message(let message):\n                    MessageView(message)\n            }\n        }\n    }\n}\n.accessibilityElement(children: .contain)\n.accessibilityRotor(\n    .heading, entries: headingMessageListItems, label: \\.subject)\n"
  },
  {
    "title": "searchable(text:isPresented:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:ispresented:placement:prompt:)-6wgrt",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "searchable(text:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:placement:prompt:)-8bhtt",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:placement:prompt:)-98b0g",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:placement:prompt:)-71fcn",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitycustomcontent(_:_:importance:)-71nyz",
    "html": "Parameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example: accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitycustomcontent(_:_:importance:)-vryw",
    "html": "Deprecated\n\nUsing non-localized strings for labels is not directly supported. Instead, wrap both the label and the value in a Text struct.\n\nParameters\nlabel\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "accessibilityHeading(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityheading(_:)",
    "html": "Parameters\nlevel\n\nThe heading level to associate with this element from the available AccessibilityHeadingLevel levels.\n\nDiscussion\n\nUse this modifier to set the level of this heading in relation to other headings. The system speaks the level number of levels AccessibilityHeadingLevel/h1 through AccessibilityHeadingLevel/h6 alongside the text.\n\nThe default heading level if you don’t use this modifier is AccessibilityHeadingLevel/unspecified."
  },
  {
    "title": "accessibility(label:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibility(label:)",
    "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn’t display text, like an icon. For example, you could use this method to label a button that plays music with the text “Play”. Don’t include text in the label that repeats information that users already have. For example, don’t use the label “Play button” because a button already has a trait that identifies it as a button."
  },
  {
    "title": "accessibilityActivationPoint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityactivationpoint(_:)-17i3o",
    "html": "Discussion\n\nUse this modifier to ensure that the activation point for a small element remains accurate even if you present a larger version of the element to VoiceOver.\n\nIf an activation point is not provided, an activation point will be derrived from one of the accessibility elements decendents or from the center of the accessibility frame."
  },
  {
    "title": "accessibility(sortPriority:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibility(sortpriority:)",
    "html": "Discussion\n\nHigher numbers are sorted first. The default sort priority is zero."
  },
  {
    "title": "accessibilityHint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityhint(_:)-8b3m",
    "html": "Discussion\n\nProvide a hint in the form of a brief phrase, like “Purchases the item” or “Downloads the attachment”.\n\nNote\n\nOn macOS, if the view does not have an action and it has been made into a container with accessibilityElement(children: .contain), this will be used to describe the container. For example, if the container is for a graph, the hint could be “graph”."
  },
  {
    "title": "accessibilityIdentifier(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityidentifier(_:)",
    "html": "Discussion\n\nUse this value for testing. It isn’t visible to the user."
  },
  {
    "title": "searchable(text:tokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:ispresented:placement:prompt:token:)-8vatr",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "searchable(text:tokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:ispresented:placement:prompt:token:)-dxwe",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "accessibilityIgnoresInvertColors(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityignoresinvertcolors(_:)",
    "html": "Parameters\nactive\n\nA true value ignores the system Smart Invert setting. A false value follows the system setting.\n\nDiscussion\n\nUse this modifier to suppress Smart Invert in a view that shouldn’t be inverted. Or pass an active argument of false to begin following the Smart Invert setting again when it was previously disabled."
  },
  {
    "title": "accessibilityInputLabels(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityinputlabels(_:)-9sprg",
    "html": "Discussion\n\nProvide labels in descending order of importance. Voice Control and Full Keyboard Access use the input labels.\n\nNote\n\nIf you don’t specify any input labels, the user can still refer to the view using the accessibility label that you add with the accessibilityLabel() modifier."
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitylabel(_:)-1taf3",
    "html": "Discussion\n\nUse this method to provide an accessibility label for a view that doesn’t display text, like an icon. For example, you could use this method to label a button that plays music with the text “Play”. Don’t include text in the label that repeats information that users already have. For example, don’t use the label “Play button” because a button already has a trait that identifies it as a button."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitycustomcontent(_:_:importance:)-9pmyq",
    "html": "Parameters\nlabelKey\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "searchable(text:tokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:placement:prompt:token:)-5es8q",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:tokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:ispresented:placement:prompt:token:)-xw71",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "searchable(text:placement:prompt:suggestions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:placement:prompt:suggestions:)-7h41d",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nWhere the search field should attempt to be placed based on the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:placement:prompt:suggestions:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:placement:prompt:suggestions:)-932nr",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nWhere the search field should attempt to be placed based on the containing view hierarchy.\n\nprompt\n\nA key for the localized prompt of the search field which provides users with guidance on what to search for.\n\nsuggestions\n\nA view builder that produces content that populates a list of suggestions.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:placement:prompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:placement:prompt:)-wu2x",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricresistance/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricresistance/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricresistance/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitycustomcontent(_:_:importance:)-5fyx4",
    "html": "Parameters\nlabelKey\n\nLocalized text describing to the user what is contained in this additional information entry. For example: “orientation”.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.”\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with different labels will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with the same label will instead replace the previous value and importance."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/volume/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitycustomcontent(_:_:importance:)-89s4u",
    "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalueKey\n\nText value for the additional accessibility information. For example: “landscape.” A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitycustomcontent(_:_:importance:)-8j83c",
    "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.” A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nimportance\n\nImportance of the accessibility information. High-importance information gets read out immediately, while default-importance information must be explicitly asked for by the user.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
  },
  {
    "title": "accessibilityCustomContent(_:_:importance:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitycustomcontent(_:_:importance:)-9grq4",
    "html": "Parameters\nkey\n\nKey used to specify the identifier and label of the of the additional accessibility information entry.\n\nvalue\n\nText value for the additional accessibility information. For example: “landscape.” A value of nil will remove any entry of additional information added earlier for any key with the same identifier.\n\nDiscussion\n\nUse this method to add information you want accessibility users to be able to access about this element, beyond the basics of label, value, and hint. For example, accessibilityCustomContent can be used to add information about the orientation of a photograph, or the number of people found in the picture.\n\nNote\n\nRepeated calls of accessibilityCustomContent with keys having different identifiers will create new entries of additional information. Calling accessibilityAdditionalContent repeatedly with keys having matching identifiers will replace the previous entry."
  },
  {
    "title": "accessibilityChildren(children:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitychildren(children:)",
    "html": "Parameters\nchildren\n\nA ViewBuilder that represents the replacement child views the framework uses to generate accessibility elements.\n\nDiscussion\n\nUse this modifier to replace an existing element’s children with one or more new synthetic accessibility elements you provide. This allows for synthetic, non-visual accessibility elements to be set as children of a visual accessibility element.\n\nSwiftUI creates an accessibility container implicitly when needed. If an accessibility element already exists, the framework converts it into an accessibility container.\n\nIn the example below, a Canvas displays a graph of vertical bars that don’t have any inherent accessibility elements. You make the view accessible by adding the accessibilityChildren(children:) modifier with views whose accessibility elements represent the values of each bar drawn in the canvas:\n\nvar body: some View {\n    Canvas { context, size in\n        // Draw Graph\n        for data in dataSet {\n            let path = Path(\n                roundedRect: CGRect(\n                    x: (size.width / CGFloat(dataSet.count))\n                    * CGFloat(data.week),\n                    y: 0,\n                    width: size.width / CGFloat(dataSet.count),\n                    height: CGFloat(data.lines),\n                cornerRadius: 5)\n            context.fill(path, with: .color(.blue))\n        }\n        // Draw Axis and Labels\n        ...\n    }\n    .accessibilityLabel(\"Lines of Code per Week\")\n    .accessibilityChildren {\n        HStack {\n            ForEach(dataSet) { data in\n                RoundedRectangle(cornerRadius: 5)\n                    .accessibilityLabel(\"Week \\(data.week)\")\n                    .accessibilityValue(\"\\(data.lines) lines\")\n            }\n        }\n    }\n}\n\n\nSwiftUI hides any views that you provide with the children parameter, then the framework uses the views to generate the accessibility elements."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/volume/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "accessibilityChartDescriptor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilitychartdescriptor(_:)",
    "html": "Parameters\nchartDescriptor\n\nThe AXChartDescriptorRepresentable used to describe your chart and its data.\n\nDiscussion\n\nUse this method to provide information about your chart view to allow VoiceOver and other assistive technology users to perceive and interact with your chart and its data.\n\nThis may be applied to any View that represents a chart, including Image and custom-rendered chart views.\n\nThe accessibilityChartDescriptor modifier can be applied to -any- view representing a chart, the simplest case being just an image of a chart. The implementation details of the view aren’t important, only the fact that it represents a chart, and that the provided chart descriptor accurately describes the content of the chart.\n\nExample usage:\n\nFirst define your AXChartDescriptorRepresentable type.\n\nstruct MyChartDescriptorRepresentable:\nAXChartDescriptorRepresentable {\n    func makeChartDescriptor() -> AXChartDescriptor {\n        // Build and return your `AXChartDescriptor` here.\n    }\n\n\n    func updateChartDescriptor(_ descriptor: AXChartDescriptor) {\n        // Update your chart descriptor with any new values, or\n        // don't override if your chart doesn't have changing\n        // values.\n    }\n}\n\n\nThen use the accessibilityChartDescriptor modifier to provide an instance of your AXChartDescriptorRepresentable type to the view representing your chart:\n\nSomeChartView()\n    .accessibilityChartDescriptor(MyChartDescriptorRepresentable())\n"
  },
  {
    "title": "accessibilityFocused(_:equals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accessibilityfocused(_:equals:)",
    "html": "Parameters\nbinding\n\nThe state binding to register. When accessibility focus moves to the accessibility element of the modified view, SwiftUI sets the bound value to the corresponding match value. If you set the state value programmatically to the matching value, then accessibility focus moves to the accessibility element of the modified view. SwiftUI sets the value to nil if accessibility focus leaves the accessibility element associated with the modified view, and programmatically setting the value to nil dismisses focus automatically.\n\nvalue\n\nThe value to match against when determining whether the binding should change.\n\nReturn Value\n\nThe modified view."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/volume/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "searchable(text:tokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:ispresented:placement:prompt:token:)-8cpmp",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricpotentialdifference/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/speed/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricpotentialdifference/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricpotentialdifference/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/speed/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricpotentialdifference/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/illuminance/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/frequency/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/pressure/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/pressure/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/temperature/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/temperature/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/speed/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/speed/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/illuminance/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/pressure/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/frequency/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/pressure/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/temperature/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/temperature/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/frequency/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/frequency/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/informationstorage/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "toolbar(id:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbar(id:content:)",
    "html": "Parameters\nid\n\nA unique identifier for this toolbar.\n\ncontent\n\nThe content representing the content of the toolbar.\n\nDiscussion\n\nUse this modifier when you want to allow the user to customize the components and layout of elements in the toolbar. The toolbar modifier expects a collection of toolbar items which you can provide either by supplying a collection of views with each view wrapped in a ToolbarItem.\n\nNote\n\nCustomizable toolbars will be displayed on both macOS and iOS, but only apps running on iPadOS 16.0 and later will support user customization.\n\nThe example below creates a view that represents each ToolbarItem along with an ID that uniquely identifies the toolbar item to the customization editor:\n\nstruct ToolsEditorView: View {\n    @State private var text = \"\"\n    @State private var bold = false\n    @State private var italic = false\n    @State private var fontSize = 12.0\n\n\n    var displayFont: Font {\n        let font = Font.system(\n           size: CGFloat(fontSize),\n             weight: bold == true ? .bold : .regular)\n        return italic == true ? font.italic() : font\n    }\n\n\n    var body: some View {\n        TextEditor(text: $text)\n            .font(displayFont)\n            .toolbar(id: \"editingtools\") {\n                ToolbarItem(\n                    id: \"sizeSelector\", placement: .secondaryAction\n                ) {\n                    Slider(\n                        value: $fontSize,\n                        in: 8...120,\n                        minimumValueLabel:\n                            Text(\"A\").font(.system(size: 8)),\n                        maximumValueLabel:\n                            Text(\"A\").font(.system(size: 16))\n                    ) {\n                        Text(\"Font Size (\\(Int(fontSize)))\")\n                    }\n                    .frame(width: 150)\n                }\n                ToolbarItem(\n                    id: \"bold\", placement: .secondaryAction\n                ) {\n                    Toggle(isOn: $bold) {\n                        Image(systemName: \"bold\")\n                    }\n                }\n                ToolbarItem(\n                    id: \"italic\", placement: .secondaryAction\n                ) {\n                    Toggle(isOn: $italic) {\n                        Image(systemName: \"italic\")\n                    }\n                }\n            }\n            .navigationTitle(\"My Note\")\n    }\n}\n\n\nNote\n\nOnly ToolbarItemPlacement/secondaryAction items support customization in iPadOS. Other items follow the normal placement rules and can’t be customized by the user.\n\nIn macOS you can enable menu support for toolbar customization by adding a ToolbarCommands instance to a scene using the Scene/commands(content:) scene modifier:\n\n@main\nstruct ToolbarContent_macOSApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ToolsEditorView()\n                .frame(maxWidth: .infinity, maxHeight: .infinity)\n        }\n        .commands {\n            ToolbarCommands()\n        }\n    }\n}\n\n\nWhen you add the toolbar commands, the system adds a menu item to your app’s main menu to provide toolbar customization support. This is in addition to the ability to Control-click on the toolbar to open the toolbar customization editor."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/acceleration/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "transaction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/transaction(_:)",
    "html": "Parameters\ntransform\n\nThe transformation to apply to transactions within this view.\n\nReturn Value\n\nA view that wraps this view and applies a transformation to all transactions used within the view.\n\nDiscussion\n\nUse this modifier to change or replace the animation used in a view. Consider three identical animations controlled by a button that executes all three animations simultaneously:\n\nThe first animation rotates the “Rotation” Text view by 360 degrees.\n\nThe second uses the transaction(_:) modifier to change the animation by adding a delay to the start of the animation by two seconds and then increases the rotational speed of the “Rotation\\nModified” Text view animation by a factor of 2.\n\nThe third animation uses the transaction(_:) modifier to replace the rotation animation affecting the “Animation\\nReplaced” Text view with a spring animation.\n\nThe following code implements these animations:\n\nstruct TransactionExample: View {\n    @State private var flag = false\n\n\n    var body: some View {\n        VStack(spacing: 50) {\n            HStack(spacing: 30) {\n                Text(\"Rotation\")\n                    .rotationEffect(Angle(degrees:\n                                            self.flag ? 360 : 0))\n\n\n                Text(\"Rotation\\nModified\")\n                    .rotationEffect(Angle(degrees:\n                                            self.flag ? 360 : 0))\n                    .transaction { view in\n                        view.animation =\n                            view.animation?.delay(2.0).speed(2)\n                    }\n\n\n                Text(\"Animation\\nReplaced\")\n                    .rotationEffect(Angle(degrees:\n                                            self.flag ? 360 : 0))\n                    .transaction { view in\n                        view.animation = .interactiveSpring(\n                            response: 0.60,\n                            dampingFraction: 0.20,\n                            blendDuration: 0.25)\n                    }\n            }\n\n\n            Button(\"Animate\") {\n                withAnimation(.easeIn(duration: 2.0)) {\n                    self.flag.toggle()\n                }\n            }\n        }\n    }\n}\n\n\nUse this modifier on leaf views such as Image or Button rather than container views such as VStack or HStack. The transformation applies to all child views within this view; calling transaction(_:) on a container view can lead to unbounded scope of execution depending on the depth of the view hierarchy."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/duration/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "typeSelectEquivalent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/typeselectequivalent(_:)-9yj03",
    "html": "Parameters\nstring\n\nThe string to use as a type select equivalent for a view in a collection.\n\nDiscussion\n\nBy default, a type select equivalent is automatically derived from any Text or TextField content in a list or table. In the below example, type select can be used to select a person, even though no explicit value has been set.\n\nList(people, selection: $selectedPersonID) { person in\n    Label {\n        Text(person.name)\n    } icon: {\n        person.avatar\n    }\n}\n\n\nAn explicit type select value should be set when there is no textual content or when a different value is desired compared to what’s displayed in the view. Explicit values also provide a more performant for complex view types. In the below example, type select is explicitly set to allow selection of views that otherwise only display an image.\n\nList(people, selection: $selectedPersonID) { person in\n    person.avatar\n        .accessibilityLabel(person.name)\n        .typeSelectEquivalent(person.name)\n}\n\n\nSetting an empty string value disables text selection for the view, and a value of nil results in the view using its default value."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/illuminance/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/informationstorage/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/informationstorage/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/informationstorage/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/illuminance/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "transition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/transition(_:)",
    "html": "Discussion\n\nWhen this view appears or disappears, the transition will be applied to it, allowing for animating it in and out.\n\nThe following code will conditionally show MyView, and when it appears or disappears, will use a slide transition to show it.\n\nif isActive {\n    MyView()\n        .transition(.slide)\n}\nButton(\"Toggle\") {\n    withAnimation {\n        isActive.toggle()\n    }\n}\n"
  },
  {
    "title": "truncationMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/truncationmode(_:)",
    "html": "Parameters\nmode\n\nThe truncation mode that specifies where to truncate the text within the text view, if needed. You can truncate at the beginning, middle, or end of the text view.\n\nReturn Value\n\nA view that truncates text at different points in a line depending on the mode you select.\n\nDiscussion\n\nUse the truncationMode(_:) modifier to determine whether text in a long line is truncated at the beginning, middle, or end. Truncation is indicated by adding an ellipsis (…) to the line when removing text to indicate to readers that text is missing.\n\nIn the example below, the bounds of text view constrains the amount of text that the view displays and the truncationMode(_:) specifies from which direction and where to display the truncation indicator:\n\nText(\"This is a block of text that will show up in a text element as multiple lines. The text will fill the available space, and then, eventually, be truncated.\")\n    .frame(width: 150, height: 150)\n    .truncationMode(.tail)\n"
  },
  {
    "title": "typesettingLanguage(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/typesettinglanguage(_:isenabled:)-6wwem",
    "html": "Parameters\nlanguage\n\nThe language to use for typesetting.\n\nisEnabled\n\nA Boolean value that indicates whether text language is added\n\nReturn Value\n\nA view with the typesetting language set to the value you supply.\n\nDiscussion\n\nIn some cases Text may contain text of a particular language which doesn’t match the device UI language. In that case it’s useful to specify a language so line height, line breaking and spacing will respect the script used for that language. For example:\n\nText(verbatim: \"แอปเปิล\").typesettingLanguage(\n    .explicit(.init(languageCode: .thai)))\n\n\nNote: this language does not affect text localized localization."
  },
  {
    "title": "underline(_:pattern:color:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/underline(_:pattern:color:)",
    "html": "Parameters\nisActive\n\nA Boolean value that indicates whether underline is added. The default value is true.\n\npattern\n\nThe pattern of the line. The default value is solid.\n\ncolor\n\nThe color of the underline. If color is nil, the underline uses the default foreground color.\n\nReturn Value\n\nA view where text has a line running along its baseline."
  },
  {
    "title": "typeSelectEquivalent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/typeselectequivalent(_:)-70bjn",
    "html": "Parameters\ntext\n\nThe explicit text value to use as a type select equivalent for a view in a collection.\n\nDiscussion\n\nBy default, a type select equivalent is automatically derived from any Text or TextField content in a list or table. In the below example, type select can be used to select a person, even though no explicit value has been set.\n\nList(people, selection: $selectedPersonID) { person in\n    Label {\n        Text(person.name)\n    } icon: {\n        person.avatar\n    }\n}\n\n\nAn explicit type select value should be set when there is no textual content or when a different value is desired compared to what’s displayed in the view. Explicit values also provide a more performant for complex view types. In the below example, type select is explicitly set to allow selection of views that otherwise only display an image.\n\nList(people, selection: $selectedPersonID) { person in\n    person.avatar\n        .accessibilityLabel(person.name)\n        .typeSelectEquivalent(person.name)\n}\n\n\nSetting an empty string value disables text selection for the view, and a value of nil results in the view using its default value."
  },
  {
    "title": "typeSelectEquivalent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/typeselectequivalent(_:)-4sxmv",
    "html": "Parameters\nstringKey\n\nThe localized string key to use as a type select equivalent for a view in a collection.\n\nDiscussion\n\nBy default, a type select equivalent is automatically derived from any Text or TextField content in a list or table. In the below example, type select can be used to select a person, even though no explicit value has been set.\n\nList(people, selection: $selectedPersonID) { person in\n    Label {\n        Text(person.name)\n    } icon: {\n        person.avatar\n    }\n}\n\n\nAn explicit type select value should be set when there is no textual content or when a different value is desired compared to what’s displayed in the view. Explicit values also provide a more performant for complex view types. In the below example, type select is explicitly set to allow selection of views that otherwise only display an image.\n\nList(people, selection: $selectedPersonID) { person in\n    person.avatar\n        .accessibilityLabel(person.name)\n        .typeSelectEquivalent(person.name)\n}\n\n\nSetting an empty string value disables text selection for the view, and a value of nil results in the view using its default value."
  },
  {
    "title": "typesettingLanguage(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/typesettinglanguage(_:isenabled:)-3jeo9",
    "html": "Parameters\nlanguage\n\nThe explicit language to use for typesetting.\n\nisEnabled\n\nA Boolean value that indicates whether text langauge is added\n\nReturn Value\n\nA view with the typesetting language set to the value you supply.\n\nDiscussion\n\nIn some cases Text may contain text of a particular language which doesn’t match the device UI language. In that case it’s useful to specify a language so line height, line breaking and spacing will respect the script used for that language. For example:\n\nText(verbatim: \"แอปเปิล\")\n    .typesettingLanguage(.init(languageCode: .thai))\n\n\nNote: this language does not affect text localization."
  },
  {
    "title": "toolbar(removing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbar(removing:)",
    "html": "Parameters\ndefaultItemKind\n\nThe kind of default item to remove\n\nDiscussion\n\nUse this modifier to remove toolbar items other Views add by default. For example, to remove the sidebar toggle toolbar item provided by NavigationSplitView:\n\nNavigationSplitView {\n    SidebarView()\n        .toolbar(removing: .sidebarToggle)\n} detail: {\n    DetailView()\n}\n"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/area/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/duration/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/acceleration/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/acceleration/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/acceleration/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "transition(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/transition(_:)",
    "html": "Discussion\n\nWhen this view appears or disappears, the transition will be applied to it, allowing for animating it in and out.\n\nThe following code will conditionally show MyView, and when it appears or disappears, will use a slide transition to show it.\n\nif isActive {\n    MyView()\n        .transition(.slide)\n}\nButton(\"Toggle\") {\n    withAnimation {\n        isActive.toggle()\n    }\n}\n"
  },
  {
    "title": "typeSelectEquivalent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/typeselectequivalent(_:)-3agnh",
    "html": "Parameters\nstring\n\nThe string to use as a type select equivalent for a view in a collection.\n\nDiscussion\n\nBy default, a type select equivalent is automatically derived from any Text or TextField content in a list or table. In the below example, type select can be used to select a person, even though no explicit value has been set.\n\nList(people, selection: $selectedPersonID) { person in\n    Label {\n        Text(person.name)\n    } icon: {\n        person.avatar\n    }\n}\n\n\nAn explicit type select value should be set when there is no textual content or when a different value is desired compared to what’s displayed in the view. Explicit values also provide a more performant for complex view types. In the below example, type select is explicitly set to allow selection of views that otherwise only display an image.\n\nList(people, selection: $selectedPersonID) { person in\n    person.avatar\n        .accessibilityLabel(person.name)\n        .typeSelectEquivalent(person.name)\n}\n\n\nSetting an empty string value disables text selection for the view, and a value of nil results in the view using its default value."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4v6zu",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:tokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:placement:prompt:token:)-36bu2",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4m8hw",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8dc6d",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3yglt",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "selectionDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/selectiondisabled(_:)",
    "html": "Parameters\nisDisabled\n\nA Boolean value that determines whether users can select this view.\n\nDiscussion\n\nUse this modifier to control the selectability of views in selectable containers like List or Table. In the example, below, the user can’t select the first item in the list.\n\n@Binding var selection: Item.ID?\n@Binding var items: [Item]\n\n\nvar body: some View {\n    List(selection: $selection) {\n        ForEach(items) { item in\n            ItemView(item: item)\n                .selectionDisabled(item.id == items.first?.id)\n        }\n    }\n}\n\n\nYou can also use this modifier to specify the selectability of views within a Picker. The following example represents a flavor picker that disables selection on flavors that are unavailable.\n\nPicker(\"Flavor\", selection: $selectedFlavor) {\n    ForEach(Flavor.allCases) { flavor in\n        Text(flavor.rawValue.capitalized)\n            .selectionDisabled(isSoldOut(flavor))\n    }\n}\n"
  },
  {
    "title": "transformEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/transformeffect(_:)",
    "html": "Parameters\ntransform\n\nA CGAffineTransform to apply to the view.\n\nDiscussion\n\nUse transformEffect(_:) to rotate, scale, translate, or skew the output of the view according to the provided CGAffineTransform.\n\nIn the example below, the text is rotated at -30˚ on the y axis.\n\nlet transform = CGAffineTransform(rotationAngle: -30 * (.pi / 180))\n\n\nText(\"Projection effect using transforms\")\n    .transformEffect(transform)\n    .border(Color.gray)\n"
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-96780",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "tracking(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/tracking(_:)",
    "html": "Parameters\ntracking\n\nThe amount of additional space, in points, that the view should add to each character cluster after layout. Value of 0 sets the tracking to the system default value.\n\nReturn Value\n\nA view where text has the specified amount of tracking."
  },
  {
    "title": "toolbarTitleDisplayMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbartitledisplaymode(_:)",
    "html": "Discussion\n\nUse this modifier to override the default toolbar title display mode.\n\nNavigationStack {\n    ContentView()\n        .toolbarTitleDisplayMode(.inlineLarge)\n}\n\n\nSee ToolbarTitleDisplayMode for more information on the different kinds of display modes. This modifier has no effect on macOS."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-3d21p",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5uzbt",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "toolbarTitleMenu(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbartitlemenu(content:)",
    "html": "Parameters\ncontent\n\nThe content associated to the toolbar title menu.\n\nDiscussion\n\nA title menu represent common functionality that can be done on the content represented by your app’s toolbar or navigation title. This menu may be populated from your app’s commands like CommandGroupPlacement/saveItem or CommandGroupPlacement/printItem.\n\nContentView()\n    .toolbar {\n        ToolbarTitleMenu()\n    }\n\n\nYou can provide your own set of actions to override this behavior.\n\nContentView()\n    .toolbarTitleMenu {\n        DuplicateButton()\n        PrintButton()\n    }\n\n\nIn iOS and iPadOS, this will construct a menu that can be presented by tapping the navigation title in the app’s navigation bar."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/area/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/duration/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "searchable(text:tokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:placement:prompt:token:)-aptj",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/area/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/duration/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/area/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "searchable(text:tokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:placement:prompt:token:)-1nlm8",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "accentColor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/accentcolor(_:)",
    "html": "Parameters\naccentColor\n\nThe color to use as an accent color. Set the value to nil to use the inherited accent color.\n\nDiscussion\n\nUse accentColor(_:) when you want to apply a broad theme color to your app’s user interface. Some styles of controls use the accent color as a default tint color.\n\nNote\n\nIn macOS, SwiftUI applies customization of the accent color only if the user chooses Multicolor under General > Accent color in System Preferences.\n\nIn the example below, the outer VStack contains two child views. The first is a button with the default accent color. The second is a VStack that contains a button and a slider, both of which adopt the purple accent color of their containing view. Note that the Text element used as a label alongside the Slider retains its default color.\n\nVStack(spacing: 20) {\n    Button(action: {}) {\n        Text(\"Regular Button\")\n    }\n    VStack {\n        Button(action: {}) {\n            Text(\"Accented Button\")\n        }\n        HStack {\n            Text(\"Accented Slider\")\n            Slider(value: $sliderValue, in: -100...100, step: 0.1)\n        }\n    }\n    .accentColor(.purple)\n}\n"
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8k677",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "searchable(text:tokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:placement:prompt:token:)-2flqz",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/compactmap(_:)",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns an optional value.\n\nReturn Value\n\nAn array of the non-nil results of calling transform with each element of the sequence.\n\nDiscussion\n\nUse this method to receive an array of non-optional values when your transformation produces an optional value.\n\nIn this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.\n\nlet possibleNumbers = [\"1\", \"2\", \"three\", \"///4///\", \"5\"]\n\n\nlet mapped: [Int?] = possibleNumbers.map { str in Int(str) }\n// [1, 2, nil, nil, 5]\n\n\nlet compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }\n// [1, 2, 5]\n\n\nComplexity\n\nO(n), where n is the length of this sequence."
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/max(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s maximum element if the sequence is not empty; otherwise, nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet greatestHue = hues.max { a, b in a.value < b.value }\nprint(greatestHue)\n// Prints \"Optional((key: \"Heliotrope\", value: 296))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/prefix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting at the beginning of this sequence with at most maxLength elements.\n\nDiscussion\n\nIf the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.prefix(2))\n// Prints \"[1, 2]\"\nprint(numbers.prefix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "truncationMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/truncationmode(_:)",
    "html": "Parameters\nmode\n\nThe truncation mode that specifies where to truncate the text within the text view, if needed. You can truncate at the beginning, middle, or end of the text view.\n\nReturn Value\n\nA view that truncates text at different points in a line depending on the mode you select.\n\nDiscussion\n\nUse the truncationMode(_:) modifier to determine whether text in a long line is truncated at the beginning, middle, or end. Truncation is indicated by adding an ellipsis (…) to the line when removing text to indicate to readers that text is missing.\n\nIn the example below, the bounds of text view constrains the amount of text that the view displays and the truncationMode(_:) specifies from which direction and where to display the truncation indicator:\n\nText(\"This is a block of text that will show up in a text element as multiple lines. The text will fill the available space, and then, eventually, be truncated.\")\n    .frame(width: 150, height: 150)\n    .truncationMode(.tail)\n"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/value-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/value-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "IntentPerson.Handle.Label.homeFax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/homefax",
    "html": "See Also\nGetting the handle labels\ncase home\ncase iPhone\ncase main\ncase mobile\ncase other\ncase pager\ncase school\ncase work\ncase workFax"
  },
  {
    "title": "tracking(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/tracking(_:)",
    "html": "Parameters\ntracking\n\nThe amount of additional space, in points, that the view should add to each character cluster after layout. Value of 0 sets the tracking to the system default value.\n\nReturn Value\n\nA view where text has the specified amount of tracking."
  },
  {
    "title": "toolbarBackground(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbarbackground(_:for:)",
    "html": "Parameters\nvisibility\n\nThe preferred visibility of the background of the bar.\n\nbars\n\nThe bars to update the color scheme of or ToolbarPlacement/automatic if empty.\n\nDiscussion\n\nThe preferred visibility flows up to the nearest container that renders a bar. This could be a NavigationView or TabView in iOS, or the root view of a WindowGroup in macOS.\n\nIn iOS, a value of ToolbarPlacement/automatic makes the visibility of a tab bar or navigation bar background depend on where a List or ScrollView settles. For example, when aligned to the bottom edge of of a scroll view’s content, the background of a tab bar becomes transparent.\n\nSpecify a value of Visibility/visible to ensure that the background of a bar remains visible regardless of where any scroll view or list stops scrolling.\n\nThis example shows a view that prefers to always have the tab bar visible when the middle tab is selected:\n\nTabView {\n    FirstTab()\n    MiddleTab()\n        .toolbarBackground(.visible, for: .tabBar)\n    LastTab()\n}\n\n\nYou can provide multiple placements to customize multiple bars at once, as in the following example:\n\nTabView {\n    NavigationView {\n        ContentView()\n            .toolbarBackground(\n                .visible, for: .navigationBar, .tabBar)\n    }\n}\n"
  },
  {
    "title": "toolbarTitleDisplayMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbartitledisplaymode(_:)",
    "html": "Discussion\n\nUse this modifier to override the default toolbar title display mode.\n\nNavigationStack {\n    ContentView()\n        .toolbarTitleDisplayMode(.inlineLarge)\n}\n\n\nSee ToolbarTitleDisplayMode for more information on the different kinds of display modes. This modifier has no effect on macOS."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-1jw9n",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA Text view representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "transformAnchorPreference(key:value:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/transformanchorpreference(key:value:transform:)",
    "html": "Parameters\nkey\n\nthe preference key type.\n\nvalue\n\nthe geometry value in the current coordinate space.\n\ntransform\n\nthe function to produce the preference value.\n\nReturn Value\n\na new version of the view that writes the preference."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-6juq0",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nThe key for the localized prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "transaction(value:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/transaction(value:_:)",
    "html": "Parameters\nvalue\n\nA value to monitor for changes.\n\ntransform\n\nThe transformation to apply to transactions within this view.\n\nReturn Value\n\nA view that wraps this view and applies a transformation to all transactions used within the view whenever value changes.\n\nDiscussion\n\nUse this modifier to change or replace the animation used in a view. Consider three identical views controlled by a button that changes all three simultaneously:\n\nThe first view animates rotating the “Rotation” Text view by 360 degrees.\n\nThe second uses the transaction(_:) modifier to change the animation by adding a delay to the start of the animation by two seconds and then increases the rotational speed of the “Rotation\\nModified” Text view animation by a factor of 2.\n\nThe third uses the transaction(_:) modifier to disable animations affecting the “Animation\\nReplaced” Text view.\n\nThe following code implements these animations:\n\nstruct TransactionExample: View {\n    @State var flag = false\n\n\n    var body: some View {\n        VStack(spacing: 50) {\n            HStack(spacing: 30) {\n                Text(\"Rotation\")\n                    .rotationEffect(Angle(degrees: flag ? 360 : 0))\n\n\n                Text(\"Rotation\\nModified\")\n                    .rotationEffect(Angle(degrees: flag ? 360 : 0))\n                    .transaction(value: flag) { t in\n                        t.animation =\n                            t.animation?.delay(2.0).speed(2)\n                    }\n\n\n                Text(\"Animation\\nReplaced\")\n                    .rotationEffect(Angle(degrees: flag ? 360 : 0))\n                    .transaction(value: flag) { t in\n                        t.disableAnimations = true\n                    }\n            }\n\n\n            Button(\"Animate\") {\n                withAnimation(.easeIn(duration: 2.0)) {\n                    flag.toggle()\n                }\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:isPresented:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-80mta",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nisPresenting\n\nA Binding that controls the presented state of search.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app. For information about presenting a search field programmatically, see doc:Managing-search-interface-activation."
  },
  {
    "title": "toolbar(removing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbar(removing:)",
    "html": "Parameters\ndefaultItemKind\n\nThe kind of default item to remove\n\nDiscussion\n\nUse this modifier to remove toolbar items other Views add by default. For example, to remove the sidebar toggle toolbar item provided by NavigationSplitView:\n\nNavigationSplitView {\n    SidebarView()\n        .toolbar(removing: .sidebarToggle)\n} detail: {\n    DetailView()\n}\n"
  },
  {
    "title": "toolbar(id:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbar(id:content:)",
    "html": "Parameters\nid\n\nA unique identifier for this toolbar.\n\ncontent\n\nThe content representing the content of the toolbar.\n\nDiscussion\n\nUse this modifier when you want to allow the user to customize the components and layout of elements in the toolbar. The toolbar modifier expects a collection of toolbar items which you can provide either by supplying a collection of views with each view wrapped in a ToolbarItem.\n\nNote\n\nCustomizable toolbars will be displayed on both macOS and iOS, but only apps running on iPadOS 16.0 and later will support user customization.\n\nThe example below creates a view that represents each ToolbarItem along with an ID that uniquely identifies the toolbar item to the customization editor:\n\nstruct ToolsEditorView: View {\n    @State private var text = \"\"\n    @State private var bold = false\n    @State private var italic = false\n    @State private var fontSize = 12.0\n\n\n    var displayFont: Font {\n        let font = Font.system(\n           size: CGFloat(fontSize),\n             weight: bold == true ? .bold : .regular)\n        return italic == true ? font.italic() : font\n    }\n\n\n    var body: some View {\n        TextEditor(text: $text)\n            .font(displayFont)\n            .toolbar(id: \"editingtools\") {\n                ToolbarItem(\n                    id: \"sizeSelector\", placement: .secondaryAction\n                ) {\n                    Slider(\n                        value: $fontSize,\n                        in: 8...120,\n                        minimumValueLabel:\n                            Text(\"A\").font(.system(size: 8)),\n                        maximumValueLabel:\n                            Text(\"A\").font(.system(size: 16))\n                    ) {\n                        Text(\"Font Size (\\(Int(fontSize)))\")\n                    }\n                    .frame(width: 150)\n                }\n                ToolbarItem(\n                    id: \"bold\", placement: .secondaryAction\n                ) {\n                    Toggle(isOn: $bold) {\n                        Image(systemName: \"bold\")\n                    }\n                }\n                ToolbarItem(\n                    id: \"italic\", placement: .secondaryAction\n                ) {\n                    Toggle(isOn: $italic) {\n                        Image(systemName: \"italic\")\n                    }\n                }\n            }\n            .navigationTitle(\"My Note\")\n    }\n}\n\n\nNote\n\nOnly ToolbarItemPlacement/secondaryAction items support customization in iPadOS. Other items follow the normal placement rules and can’t be customized by the user.\n\nIn macOS you can enable menu support for toolbar customization by adding a ToolbarCommands instance to a scene using the Scene/commands(content:) scene modifier:\n\n@main\nstruct ToolbarContent_macOSApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ToolsEditorView()\n                .frame(maxWidth: .infinity, maxHeight: .infinity)\n        }\n        .commands {\n            ToolbarCommands()\n        }\n    }\n}\n\n\nWhen you add the toolbar commands, the system adds a menu item to your app’s main menu to provide toolbar customization support. This is in addition to the ability to Control-click on the toolbar to open the toolbar customization editor."
  },
  {
    "title": "toolbarRole(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbarrole(_:)",
    "html": "Parameters\nrole\n\nThe role of the toolbar.\n\nDiscussion\n\nUse this modifier to configure the semantic role for content populating your app’s toolbar. SwiftUI uses this role when rendering the content of your app’s toolbar.\n\nContentView()\n    .navigationTitle(\"Browser\")\n    .toolbarRole(.browser)\n    .toolbar {\n        ToolbarItem(placement: .primaryAction) {\n            AddButton()\n        }\n     }\n"
  },
  {
    "title": "toolbar(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbar(content:)-9fw5h",
    "html": "Parameters\ncontent\n\nThe items representing the content of the toolbar.\n\nDiscussion\n\nUse this method to populate a toolbar with a collection of views that you provide to a toolbar view builder.\n\nThe toolbar modifier expects a collection of toolbar items which you can provide either by supplying a collection of views with each view wrapped in a ToolbarItem, or by providing a collection of views as a ToolbarItemGroup. The example below uses a collection of ToolbarItem views to create a macOS toolbar that supports text editing features:\n\nstruct StructToolbarItemGroupView: View {\n    @State private var text = \"\"\n    @State private var bold = false\n    @State private var italic = false\n    @State private var fontSize = 12.0\n\n\n    var displayFont: Font {\n        let font = Font.system(size: CGFloat(fontSize),\n                               weight: bold == true ? .bold : .regular)\n        return italic == true ? font.italic() : font\n    }\n\n\n    var body: some View {\n        TextEditor(text: $text)\n            .font(displayFont)\n            .toolbar {\n                ToolbarItemGroup {\n                    Slider(\n                        value: $fontSize,\n                        in: 8...120,\n                        minimumValueLabel:\n                            Text(\"A\").font(.system(size: 8)),\n                        maximumValueLabel:\n                            Text(\"A\").font(.system(size: 16))\n                    ) {\n                        Text(\"Font Size (\\(Int(fontSize)))\")\n                    }\n                    .frame(width: 150)\n                    Toggle(isOn: $bold) {\n                        Image(systemName: \"bold\")\n                    }\n                    Toggle(isOn: $italic) {\n                        Image(systemName: \"italic\")\n                    }\n                }\n            }\n            .navigationTitle(\"My Note\")\n    }\n}\n\n\nAlthough it’s not mandatory, wrapping a related group of toolbar items together in a ToolbarItemGroup provides a one-to-one mapping between controls and toolbar items which results in the correct layout and spacing on each platform. For design guidance on toolbars for macOS apps, see macOS Human Interface Guidelines > Toolbars. For design guidance on toolbars for iOS apps, see iOS Human Interface Guidelines > Toolbars."
  },
  {
    "title": "toolbarTitleMenu(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbartitlemenu(content:)",
    "html": "Parameters\ncontent\n\nThe content associated to the toolbar title menu.\n\nDiscussion\n\nA title menu represent common functionality that can be done on the content represented by your app’s toolbar or navigation title. This menu may be populated from your app’s commands like CommandGroupPlacement/saveItem or CommandGroupPlacement/printItem.\n\nContentView()\n    .toolbar {\n        ToolbarTitleMenu()\n    }\n\n\nYou can provide your own set of actions to override this behavior.\n\nContentView()\n    .toolbarTitleMenu {\n        DuplicateButton()\n        PrintButton()\n    }\n\n\nIn iOS and iPadOS, this will construct a menu that can be presented by tapping the navigation title in the app’s navigation bar."
  },
  {
    "title": "toolbarColorScheme(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbarcolorscheme(_:for:)",
    "html": "Parameters\ncolorScheme\n\nThe preferred color scheme of the background of the bar.\n\nbars\n\nThe bars to update the color scheme of or ToolbarPlacement/automatic if empty.\n\nDiscussion\n\nThe preferred color scheme flows up to the nearest container that renders a bar. This could be a NavigationView or TabView in iOS, or the root view of a WindowGroup in macOS. Pass in a value of nil to match the current system’s color scheme.\n\nThis examples shows a view that renders the navigation bar with a blue background and dark color scheme:\n\nTabView {\n    NavigationView {\n        ContentView()\n            .toolbarBackground(.blue)\n            .toolbarColorScheme(.dark)\n    }\n    // other tabs...\n}\n\n\nYou can provide multiple ToolbarPlacement instances to customize multiple bars at once.\n\nTabView {\n    NavigationView {\n        ContentView()\n            .toolbarBackground(\n                .blue, for: .navigationBar, .tabBar)\n            .toolbarColorScheme(\n                .dark, for: .navigationBar, .tabBar)\n    }\n}\n\n\nNote that the provided color scheme is only respected while a background is visible in the requested bar. As the background becomes visible, the bar transitions from the color scheme of the app to the requested color scheme. You can ensure that the color scheme is always respected by specifying that the background of the bar always be visible.\n\nNavigationView {\n    ContentView()\n        .toolbarBackground(.visible)\n        .toolbarColorScheme(.dark)\n}\n\n\nDepending on the specified bars, the requested color scheme may not be able to be fullfilled."
  },
  {
    "title": "transaction(_:body:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/transaction(_:body:)",
    "html": "Discussion\n\nAny modifiers applied to the content of body will be applied to this view, and the changes to the transaction performed in the transform will only affect the modifiers defined in the body.\n\nThe following code animates the opacity changing with a faster animation, while the contents of MyView are animated with the implicit transaction:\n\nMyView(isActive: isActive)\n    .transaction { transaction in\n        transaction.animation = transaction.animation?.speed(2)\n    } body: { content in\n        content.opacity(isActive ? 1.0 : 0.0)\n    }\n\n\nSee Also: Transaction.disablesAnimations"
  },
  {
    "title": "userActivity(_:element:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/useractivity(_:element:_:)",
    "html": "Parameters\nactivityType\n\nThe type of activity to advertise.\n\nelement\n\nIf the element is nil, the handler will not be associated with the activity (and if there are no handlers, no activity is advertised). The method passes the non-nil element to the handler as a convenience so the handlers don’t all need to implement an early exit with guard element = element else { return }.\n\nupdate\n\nA function that modifies the passed-in activity for advertisement.\n\nDiscussion\n\nThe scope of the activity applies only to the scene or window the view is in."
  },
  {
    "title": "userActivity(_:isActive:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/useractivity(_:isactive:_:)",
    "html": "Parameters\nactivityType\n\nThe type of activity to advertise.\n\nisActive\n\nWhen false, avoids advertising the activity. Defaults to true.\n\nupdate\n\nA function that modifies the passed-in activity for advertisement.\n\nDiscussion\n\nYou can use userActivity(_:isActive:_:) to start, stop, or modify the advertisement of a specific type of user activity.\n\nThe scope of the activity applies only to the scene or window the view is in."
  },
  {
    "title": "zIndex(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/zindex(_:)",
    "html": "Parameters\nvalue\n\nA relative front-to-back ordering for this view; the default is 0.\n\nDiscussion\n\nUse zIndex(_:) when you want to control the front-to-back ordering of views.\n\nIn this example there are two overlapping rotated rectangles. The frontmost is represented by the larger index value.\n\nVStack {\n    Rectangle()\n        .fill(Color.yellow)\n        .frame(width: 100, height: 100, alignment: .center)\n        .zIndex(1) // Top layer.\n\n\n    Rectangle()\n        .fill(Color.red)\n        .frame(width: 100, height: 100, alignment: .center)\n        .rotationEffect(.degrees(45))\n        // Here a zIndex of 0 is the default making\n        // this the bottom layer.\n}\n"
  },
  {
    "title": "visualEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/visualeffect(_:)",
    "html": "Parameters\neffect\n\nA closure that returns the effect to be applied. The first argument provided to the closure is a placeholder representing this view. The second argument is a GeometryProxy.\n\nReturn Value\n\nA view with the effect applied.\n\nDiscussion\n\nYou return new effects by calling functions on the first argument provided to the effect closure. In this example, ContentView is offset by its own size, causing its top left corner to appear where the bottom right corner was originally located:\n\nContentView()\n    .visualEffect { content, geometryProxy in\n        content.offset(geometryProxy.size)\n    }\n"
  },
  {
    "title": "toolbarBackground(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbarbackground(_:for:)",
    "html": "Parameters\nvisibility\n\nThe preferred visibility of the background of the bar.\n\nbars\n\nThe bars to update the color scheme of or ToolbarPlacement/automatic if empty.\n\nDiscussion\n\nThe preferred visibility flows up to the nearest container that renders a bar. This could be a NavigationView or TabView in iOS, or the root view of a WindowGroup in macOS.\n\nIn iOS, a value of ToolbarPlacement/automatic makes the visibility of a tab bar or navigation bar background depend on where a List or ScrollView settles. For example, when aligned to the bottom edge of of a scroll view’s content, the background of a tab bar becomes transparent.\n\nSpecify a value of Visibility/visible to ensure that the background of a bar remains visible regardless of where any scroll view or list stops scrolling.\n\nThis example shows a view that prefers to always have the tab bar visible when the middle tab is selected:\n\nTabView {\n    FirstTab()\n    MiddleTab()\n        .toolbarBackground(.visible, for: .tabBar)\n    LastTab()\n}\n\n\nYou can provide multiple placements to customize multiple bars at once, as in the following example:\n\nTabView {\n    NavigationView {\n        ContentView()\n            .toolbarBackground(\n                .visible, for: .navigationBar, .tabBar)\n    }\n}\n"
  },
  {
    "title": "toolbarColorScheme(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbarcolorscheme(_:for:)",
    "html": "Parameters\ncolorScheme\n\nThe preferred color scheme of the background of the bar.\n\nbars\n\nThe bars to update the color scheme of or ToolbarPlacement/automatic if empty.\n\nDiscussion\n\nThe preferred color scheme flows up to the nearest container that renders a bar. This could be a NavigationView or TabView in iOS, or the root view of a WindowGroup in macOS. Pass in a value of nil to match the current system’s color scheme.\n\nThis examples shows a view that renders the navigation bar with a blue background and dark color scheme:\n\nTabView {\n    NavigationView {\n        ContentView()\n            .toolbarBackground(.blue)\n            .toolbarColorScheme(.dark)\n    }\n    // other tabs...\n}\n\n\nYou can provide multiple ToolbarPlacement instances to customize multiple bars at once.\n\nTabView {\n    NavigationView {\n        ContentView()\n            .toolbarBackground(\n                .blue, for: .navigationBar, .tabBar)\n            .toolbarColorScheme(\n                .dark, for: .navigationBar, .tabBar)\n    }\n}\n\n\nNote that the provided color scheme is only respected while a background is visible in the requested bar. As the background becomes visible, the bar transitions from the color scheme of the app to the requested color scheme. You can ensure that the color scheme is always respected by specifying that the background of the bar always be visible.\n\nNavigationView {\n    ContentView()\n        .toolbarBackground(.visible)\n        .toolbarColorScheme(.dark)\n}\n\n\nDepending on the specified bars, the requested color scheme may not be able to be fullfilled."
  },
  {
    "title": "toolbarRole(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbarrole(_:)",
    "html": "Parameters\nrole\n\nThe role of the toolbar.\n\nDiscussion\n\nUse this modifier to configure the semantic role for content populating your app’s toolbar. SwiftUI uses this role when rendering the content of your app’s toolbar.\n\nContentView()\n    .navigationTitle(\"Browser\")\n    .toolbarRole(.browser)\n    .toolbar {\n        ToolbarItem(placement: .primaryAction) {\n            AddButton()\n        }\n     }\n"
  },
  {
    "title": "IntentPerson.Handle.Label.school | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/school",
    "html": "See Also\nGetting the handle labels\ncase home\ncase homeFax\ncase iPhone\ncase main\ncase mobile\ncase other\ncase pager\ncase work\ncase workFax"
  },
  {
    "title": "IntentPerson.Handle.Label.pager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/pager",
    "html": "See Also\nGetting the handle labels\ncase home\ncase homeFax\ncase iPhone\ncase main\ncase mobile\ncase other\ncase school\ncase work\ncase workFax"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/intcontrolstyle/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-7e0ti",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nenum ElectricPotentialDifference\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/intcontrolstyle/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "underline(_:pattern:color:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/underline(_:pattern:color:)",
    "html": "Parameters\nisActive\n\nA Boolean value that indicates whether underline is added. The default value is true.\n\npattern\n\nThe pattern of the line. The default value is solid.\n\ncolor\n\nThe color of the underline. If color is nil, the underline uses the default foreground color.\n\nReturn Value\n\nA view where text has a line running along its baseline."
  },
  {
    "title": "typesettingLanguage(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/typesettinglanguage(_:isenabled:)-h5v7",
    "html": "Parameters\nlanguage\n\nThe language to use for typesetting.\n\nisEnabled\n\nA Boolean value that indicates whether text language is added\n\nReturn Value\n\nA view with the typesetting language set to the value you supply.\n\nDiscussion\n\nIn some cases Text may contain text of a particular language which doesn’t match the device UI language. In that case it’s useful to specify a language so line height, line breaking and spacing will respect the script used for that language. For example:\n\nText(verbatim: \"แอปเปิล\").typesettingLanguage(\n    .explicit(.init(languageCode: .thai)))\n\n\nNote: this language does not affect text localized localization."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-5zan3",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "typesettingLanguage(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/typesettinglanguage(_:isenabled:)-8fbs0",
    "html": "Parameters\nlanguage\n\nThe explicit language to use for typesetting.\n\nisEnabled\n\nA Boolean value that indicates whether text langauge is added\n\nReturn Value\n\nA view with the typesetting language set to the value you supply.\n\nDiscussion\n\nIn some cases Text may contain text of a particular language which doesn’t match the device UI language. In that case it’s useful to specify a language so line height, line breaking and spacing will respect the script used for that language. For example:\n\nText(verbatim: \"แอปเปิล\")\n    .typesettingLanguage(.init(languageCode: .thai))\n\n\nNote: this language does not affect text localization."
  },
  {
    "title": "typeSelectEquivalent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/typeselectequivalent(_:)-3nqx1",
    "html": "Parameters\nstringKey\n\nThe localized string key to use as a type select equivalent for a view in a collection.\n\nDiscussion\n\nBy default, a type select equivalent is automatically derived from any Text or TextField content in a list or table. In the below example, type select can be used to select a person, even though no explicit value has been set.\n\nList(people, selection: $selectedPersonID) { person in\n    Label {\n        Text(person.name)\n    } icon: {\n        person.avatar\n    }\n}\n\n\nAn explicit type select value should be set when there is no textual content or when a different value is desired compared to what’s displayed in the view. Explicit values also provide a more performant for complex view types. In the below example, type select is explicitly set to allow selection of views that otherwise only display an image.\n\nList(people, selection: $selectedPersonID) { person in\n    person.avatar\n        .accessibilityLabel(person.name)\n        .typeSelectEquivalent(person.name)\n}\n\n\nSetting an empty string value disables text selection for the view, and a value of nil results in the view using its default value."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-4hoq0",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nenum ElectricPotentialDifference\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "typeSelectEquivalent(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/typeselectequivalent(_:)-3tubc",
    "html": "Parameters\ntext\n\nThe explicit text value to use as a type select equivalent for a view in a collection.\n\nDiscussion\n\nBy default, a type select equivalent is automatically derived from any Text or TextField content in a list or table. In the below example, type select can be used to select a person, even though no explicit value has been set.\n\nList(people, selection: $selectedPersonID) { person in\n    Label {\n        Text(person.name)\n    } icon: {\n        person.avatar\n    }\n}\n\n\nAn explicit type select value should be set when there is no textual content or when a different value is desired compared to what’s displayed in the view. Explicit values also provide a more performant for complex view types. In the below example, type select is explicitly set to allow selection of views that otherwise only display an image.\n\nList(people, selection: $selectedPersonID) { person in\n    person.avatar\n        .accessibilityLabel(person.name)\n        .typeSelectEquivalent(person.name)\n}\n\n\nSetting an empty string value disables text selection for the view, and a value of nil results in the view using its default value."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/displaystyle/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/displaystyle/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/placemarkdisplaystyle/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "userActivity(_:element:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/useractivity(_:element:_:)",
    "html": "Parameters\nactivityType\n\nThe type of activity to advertise.\n\nelement\n\nIf the element is nil, the handler will not be associated with the activity (and if there are no handlers, no activity is advertised). The method passes the non-nil element to the handler as a convenience so the handlers don’t all need to implement an early exit with guard element = element else { return }.\n\nupdate\n\nA function that modifies the passed-in activity for advertisement.\n\nDiscussion\n\nThe scope of the activity applies only to the scene or window the view is in."
  },
  {
    "title": "enumerated() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/enumerated()",
    "html": "Return Value\n\nA sequence of pairs enumerating the sequence.\n\nDiscussion\n\nThis example enumerates the characters of the string “Swift” and prints each character along with its place in the string.\n\nfor (n, c) in \"Swift\".enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n// Prints \"0: 'S'\"\n// Prints \"1: 'w'\"\n// Prints \"2: 'i'\"\n// Prints \"3: 'f'\"\n// Prints \"4: 't'\"\n\n\nWhen you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function.\n\nThis example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.\n\nlet names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nvar shorterIndices: [Set<String>.Index] = []\nfor (i, name) in zip(names.indices, names) {\n    if name.count <= 5 {\n        shorterIndices.append(i)\n    }\n}\n\n\nNow that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.\n\nfor i in shorterIndices {\n    print(names[i])\n}\n// Prints \"Sofia\"\n// Prints \"Mateo\"\n\n\nComplexity\n\nO(1)"
  },
  {
    "title": "underestimatedCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/underestimatedcount",
    "html": "Discussion\n\nThe default implementation returns 0. If you provide your own implementation, make sure to compute the value nondestructively.\n\nComplexity\n\nO(1), except if the sequence also conforms to Collection. In this case, see the documentation of Collection.underestimatedCount."
  },
  {
    "title": "userActivity(_:isActive:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/useractivity(_:isactive:_:)",
    "html": "Parameters\nactivityType\n\nThe type of activity to advertise.\n\nisActive\n\nWhen false, avoids advertising the activity. Defaults to true.\n\nupdate\n\nA function that modifies the passed-in activity for advertisement.\n\nDiscussion\n\nYou can use userActivity(_:isActive:_:) to start, stop, or modify the advertisement of a specific type of user activity.\n\nThe scope of the activity applies only to the scene or window the view is in."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/drop(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence starting after the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the drop(while:) method to skip over the positive numbers at the beginning of the numbers array. The result begins with the first element of numbers that does not satisfy predicate.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet startingWithNegative = numbers.drop(while: { $0 > 0 })\n// startingWithNegative == [-2, 9, -6, 10, 1]\n\n\nIf predicate matches every element in the sequence, the result is an empty sequence.\n\nComplexity\n\nO(k), where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/allsatisfy(_:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nThe following code uses this method to test whether all the names in an array have at least five characters:\n\nlet names = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]\nlet allHaveAtLeastFive = names.allSatisfy({ $0.count >= 5 })\n// allHaveAtLeastFive == true\n\n\nIf the sequence is empty, this method returns true.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "zIndex(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/zindex(_:)",
    "html": "Parameters\nvalue\n\nA relative front-to-back ordering for this view; the default is 0.\n\nDiscussion\n\nUse zIndex(_:) when you want to control the front-to-back ordering of views.\n\nIn this example there are two overlapping rotated rectangles. The frontmost is represented by the larger index value.\n\nVStack {\n    Rectangle()\n        .fill(Color.yellow)\n        .frame(width: 100, height: 100, alignment: .center)\n        .zIndex(1) // Top layer.\n\n\n    Rectangle()\n        .fill(Color.red)\n        .frame(width: 100, height: 100, alignment: .center)\n        .rotationEffect(.degrees(45))\n        // Here a zIndex of 0 is the default making\n        // this the bottom layer.\n}\n"
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/contains(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]\nlet hadError = lastThreeResponses.contains { element in\n    if case .error = element {\n        return true\n    } else {\n        return false\n    }\n}\n// 'hadError' == true\n\n\nAlternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.\n\nlet expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]\nlet hasBigPurchase = expenses.contains { $0 > 100 }\n// 'hasBigPurchase' == true\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "elementsEqual(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/elementsequal(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false.\n\nDiscussion\n\nAt least one of the sequences must be finite.\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/dropfirst(_:)",
    "html": "Parameters\nk\n\nThe number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.\n\nReturn Value\n\nA sequence starting after the specified number of elements.\n\nDiscussion\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropFirst(2))\n// Prints \"[3, 4, 5]\"\nprint(numbers.dropFirst(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(1), with O(k) deferred to each iteration of the result, where k is the number of elements to drop from the beginning of the sequence."
  },
  {
    "title": "visualEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/visualeffect(_:)",
    "html": "Parameters\neffect\n\nA closure that returns the effect to be applied. The first argument provided to the closure is a placeholder representing this view. The second argument is a GeometryProxy.\n\nReturn Value\n\nA view with the effect applied.\n\nDiscussion\n\nYou return new effects by calling functions on the first argument provided to the effect closure. In this example, ContentView is offset by its own size, causing its top left corner to appear where the bottom right corner was originally located:\n\nContentView()\n    .visualEffect { content, geometryProxy in\n        content.offset(geometryProxy.size)\n    }\n"
  },
  {
    "title": "dropLast(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/droplast(_:)",
    "html": "Parameters\nn\n\nThe number of elements to drop off the end of the sequence. n must be greater than or equal to zero.\n\nReturn Value\n\nA sequence leaving off the specified number of elements.\n\nDiscussion\n\nThe sequence must be finite. If the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.dropLast(2))\n// Prints \"[1, 2, 3]\"\nprint(numbers.dropLast(10))\n// Prints \"[]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/flatmap(_:)-802vq",
    "html": "Parameters\ntransform\n\nA closure that accepts an element of this sequence as its argument and returns a sequence or collection.\n\nReturn Value\n\nThe resulting flattened array.\n\nDiscussion\n\nUse this method to receive a single-level collection when your transformation produces a sequence or collection for each element.\n\nIn this example, note the difference in the result of using map and flatMap with a transformation that returns an array.\n\nlet numbers = [1, 2, 3, 4]\n\n\nlet mapped = numbers.map { Array(repeating: $0, count: $0) }\n// [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]\n\n\nlet flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }\n// [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n\nIn fact, s.flatMap(transform) is equivalent to Array(s.map(transform).joined()).\n\nComplexity\n\nO(m + n), where n is the length of this sequence and m is the length of the result."
  },
  {
    "title": "forEach(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/foreach(_:)",
    "html": "Parameters\nbody\n\nA closure that takes an element of the sequence as a parameter.\n\nDiscussion\n\nThe two loops in the following example produce the same output:\n\nlet numberWords = [\"one\", \"two\", \"three\"]\nfor word in numberWords {\n    print(word)\n}\n// Prints \"one\"\n// Prints \"two\"\n// Prints \"three\"\n\n\nnumberWords.forEach { word in\n    print(word)\n}\n// Same as above\n\n\nUsing the forEach method is distinct from a for-in loop in two important ways:\n\nYou cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls.\n\nUsing the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/map(_:)",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn array containing the transformed elements of this sequence.\n\nDiscussion\n\nIn this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet lowercaseNames = cast.map { $0.lowercased() }\n// 'lowercaseNames' == [\"vivien\", \"marlon\", \"kim\", \"karl\"]\nlet letterCounts = cast.map { $0.count }\n// 'letterCounts' == [6, 6, 3, 4]\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "lexicographicallyPrecedes(_:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/lexicographicallyprecedes(_:by:)",
    "html": "Parameters\nother\n\nA sequence to compare to this sequence.\n\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\ntrue if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nNote\n\nThis method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode. If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead.\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of other."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/reduce(into:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value.\n\nupdateAccumulatingResult\n\nA closure that updates the accumulating value with an element of the sequence.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies.\n\nThis method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary.\n\nThe updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.\n\nlet letters = \"abracadabra\"\nlet letterCount = letters.reduce(into: [:]) { counts, letter in\n    counts[letter, default: 0] += 1\n}\n// letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]\n\n\nWhen letters.reduce(into:_:) is called, the following steps occur:\n\nThe updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\".\n\nThe closure is called again repeatedly with the updated accumulating value and each element of the sequence.\n\nWhen the sequence is exhausted, the accumulating value is returned to the caller.\n\nIf the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reversed() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/reversed()",
    "html": "Return Value\n\nAn array containing the elements of this sequence in reverse order.\n\nDiscussion\n\nThe sequence must be finite.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "transformEffect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/transformeffect(_:)",
    "html": "Parameters\ntransform\n\nA CGAffineTransform to apply to the view.\n\nDiscussion\n\nUse transformEffect(_:) to rotate, scale, translate, or skew the output of the view according to the provided CGAffineTransform.\n\nIn the example below, the text is rotated at -30˚ on the y axis.\n\nlet transform = CGAffineTransform(rotationAngle: -30 * (.pi / 180))\n\n\nText(\"Projection effect using transforms\")\n    .transformEffect(transform)\n    .border(Color.gray)\n"
  },
  {
    "title": "shuffled() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/shuffled()",
    "html": "Return Value\n\nA shuffled array of this sequence’s elements.\n\nDiscussion\n\nFor example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled()\n// shuffledNumbers == [1, 7, 6, 2, 8, 9, 4, 3, 5, 0]\n\n\nThis method is equivalent to calling shuffled(using:), passing in the system’s default random generator.\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "sorted(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/sorted(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nA sorted array of the sequence’s elements.\n\nDiscussion\n\nWhen you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.\n\nIn the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.\n\nenum HTTPResponse {\n    case ok\n    case error(Int)\n}\n\n\nlet responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]\nlet sortedResponses = responses.sorted {\n    switch ($0, $1) {\n    // Order errors by code\n    case let (.error(aCode), .error(bCode)):\n        return aCode < bCode\n\n\n    // All successes are equivalent, so none is before any other\n    case (.ok, .ok): return false\n\n\n    // Order errors before successes\n    case (.error, .ok): return true\n    case (.ok, .error): return false\n    }\n}\nprint(sortedResponses)\n// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\"\n\n\nYou also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.\n\nlet students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]\nlet descendingStudents = students.sorted(by: >)\nprint(descendingStudents)\n// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\"\n\n\nCalling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.\n\nprint(students.sorted())\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\nprint(students.sorted(by: <))\n// Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"\n\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.\n\nComplexity\n\nO(n log n), where n is the length of the sequence."
  },
  {
    "title": "transaction(value:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/transaction(value:_:)",
    "html": "Parameters\nvalue\n\nA value to monitor for changes.\n\ntransform\n\nThe transformation to apply to transactions within this view.\n\nReturn Value\n\nA view that wraps this view and applies a transformation to all transactions used within the view whenever value changes.\n\nDiscussion\n\nUse this modifier to change or replace the animation used in a view. Consider three identical views controlled by a button that changes all three simultaneously:\n\nThe first view animates rotating the “Rotation” Text view by 360 degrees.\n\nThe second uses the transaction(_:) modifier to change the animation by adding a delay to the start of the animation by two seconds and then increases the rotational speed of the “Rotation\\nModified” Text view animation by a factor of 2.\n\nThe third uses the transaction(_:) modifier to disable animations affecting the “Animation\\nReplaced” Text view.\n\nThe following code implements these animations:\n\nstruct TransactionExample: View {\n    @State var flag = false\n\n\n    var body: some View {\n        VStack(spacing: 50) {\n            HStack(spacing: 30) {\n                Text(\"Rotation\")\n                    .rotationEffect(Angle(degrees: flag ? 360 : 0))\n\n\n                Text(\"Rotation\\nModified\")\n                    .rotationEffect(Angle(degrees: flag ? 360 : 0))\n                    .transaction(value: flag) { t in\n                        t.animation =\n                            t.animation?.delay(2.0).speed(2)\n                    }\n\n\n                Text(\"Animation\\nReplaced\")\n                    .rotationEffect(Angle(degrees: flag ? 360 : 0))\n                    .transaction(value: flag) { t in\n                        t.disableAnimations = true\n                    }\n            }\n\n\n            Button(\"Animate\") {\n                withAnimation(.easeIn(duration: 2.0)) {\n                    flag.toggle()\n                }\n            }\n        }\n    }\n}\n"
  },
  {
    "title": "transaction(_:body:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/transaction(_:body:)",
    "html": "Discussion\n\nAny modifiers applied to the content of body will be applied to this view, and the changes to the transaction performed in the transform will only affect the modifiers defined in the body.\n\nThe following code animates the opacity changing with a faster animation, while the contents of MyView are animated with the implicit transaction:\n\nMyView(isActive: isActive)\n    .transaction { transaction in\n        transaction.animation = transaction.animation?.speed(2)\n    } body: { content in\n        content.opacity(isActive ? 1.0 : 0.0)\n    }\n\n\nSee Also: Transaction.disablesAnimations"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/value-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "transaction(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/transaction(_:)",
    "html": "Parameters\ntransform\n\nThe transformation to apply to transactions within this view.\n\nReturn Value\n\nA view that wraps this view and applies a transformation to all transactions used within the view.\n\nDiscussion\n\nUse this modifier to change or replace the animation used in a view. Consider three identical animations controlled by a button that executes all three animations simultaneously:\n\nThe first animation rotates the “Rotation” Text view by 360 degrees.\n\nThe second uses the transaction(_:) modifier to change the animation by adding a delay to the start of the animation by two seconds and then increases the rotational speed of the “Rotation\\nModified” Text view animation by a factor of 2.\n\nThe third animation uses the transaction(_:) modifier to replace the rotation animation affecting the “Animation\\nReplaced” Text view with a spring animation.\n\nThe following code implements these animations:\n\nstruct TransactionExample: View {\n    @State private var flag = false\n\n\n    var body: some View {\n        VStack(spacing: 50) {\n            HStack(spacing: 30) {\n                Text(\"Rotation\")\n                    .rotationEffect(Angle(degrees:\n                                            self.flag ? 360 : 0))\n\n\n                Text(\"Rotation\\nModified\")\n                    .rotationEffect(Angle(degrees:\n                                            self.flag ? 360 : 0))\n                    .transaction { view in\n                        view.animation =\n                            view.animation?.delay(2.0).speed(2)\n                    }\n\n\n                Text(\"Animation\\nReplaced\")\n                    .rotationEffect(Angle(degrees:\n                                            self.flag ? 360 : 0))\n                    .transaction { view in\n                        view.animation = .interactiveSpring(\n                            response: 0.60,\n                            dampingFraction: 0.20,\n                            blendDuration: 0.25)\n                    }\n            }\n\n\n            Button(\"Animate\") {\n                withAnimation(.easeIn(duration: 2.0)) {\n                    self.flag.toggle()\n                }\n            }\n        }\n    }\n}\n\n\nUse this modifier on leaf views such as Image or Button rather than container views such as VStack or HStack. The transformation applies to all child views within this view; calling transaction(_:) on a container view can lead to unbounded scope of execution depending on the depth of the view hierarchy."
  },
  {
    "title": "sorted(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/sorted(using:)-6pfyg",
    "html": "Parameters\ncomparator\n\nthe comparator to use in ordering elements\n\nReturn Value\n\nan array of the elements sorted using comparator."
  },
  {
    "title": "transformAnchorPreference(key:value:transform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/transformanchorpreference(key:value:transform:)",
    "html": "Parameters\nkey\n\nthe preference key type.\n\nvalue\n\nthe geometry value in the current coordinate space.\n\ntransform\n\nthe function to produce the preference value.\n\nReturn Value\n\na new version of the view that writes the preference."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/value-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "withContiguousStorageIfAvailable(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/withcontiguousstorageifavailable(_:)",
    "html": "Parameters\nbody\n\nA closure that receives an UnsafeBufferPointer to the sequence’s contiguous storage.\n\nReturn Value\n\nThe value returned from body, unless the sequence doesn’t support contiguous storage, in which case the method ignores body and returns nil.\n\nDiscussion\n\nThis method calls body(buffer), where buffer is a pointer to the collection’s contiguous storage. If the contiguous storage doesn’t exist, the collection creates it. If the collection doesn’t support an internal representation in a form of contiguous storage, the method doesn’t call body — it immediately returns nil.\n\nThe optimizer can often eliminate bounds- and uniqueness-checking within an algorithm. When that fails, however, invoking the same algorithm on the buffer argument may let you trade safety for speed.\n\nSuccessive calls to this method may provide a different pointer on each call. Don’t store buffer outside of this method.\n\nA Collection that provides its own implementation of this method must provide contiguous storage to its elements in the same order as they appear in the collection. This guarantees that it’s possible to generate contiguous mutable storage to any of its subsequences by slicing buffer with a range formed from the distances to the subsequence’s startIndex and endIndex, respectively."
  },
  {
    "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/split(maxsplits:omittingemptysubsequences:whereseparator:)",
    "html": "Parameters\nmaxSplits\n\nThe maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.\n\nomittingEmptySubsequences\n\nIf false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the sequence satisfying the isSeparator predicate. If true, only nonempty subsequences are returned. The default value is true.\n\nisSeparator\n\nA closure that returns true if its argument should be used to split the sequence; otherwise, false.\n\nReturn Value\n\nAn array of subsequences, split from this sequence’s elements.\n\nDiscussion\n\nThe following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.\n\nlet line = \"BLANCHE:   I don't want realism. I want magic!\"\nprint(line.split(whereSeparator: { $0 == \" \" })\n          .map(String.init))\n// Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nThe second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.\n\nprint(\n   line.split(maxSplits: 1, whereSeparator: { $0 == \" \" })\n                  .map(String.init))\n// Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\"\n\n\nThe final example passes true for the allowEmptySlices parameter, so the returned array contains empty strings where spaces were repeated.\n\nprint(\n    line.split(\n        omittingEmptySubsequences: false,\n        whereSeparator: { $0 == \" \" }\n    ).map(String.init))\n// Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "IntentPerson.Handle.Label.main | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/main",
    "html": "See Also\nGetting the handle labels\ncase home\ncase homeFax\ncase iPhone\ncase mobile\ncase other\ncase pager\ncase school\ncase work\ncase workFax"
  },
  {
    "title": "IntentPerson.Handle.Label.home | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/home",
    "html": "See Also\nGetting the handle labels\ncase homeFax\ncase iPhone\ncase main\ncase mobile\ncase other\ncase pager\ncase school\ncase work\ncase workFax"
  },
  {
    "title": "IntentPerson.Handle.Label.iPhone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/iphone",
    "html": "See Also\nGetting the handle labels\ncase home\ncase homeFax\ncase main\ncase mobile\ncase other\ncase pager\ncase school\ncase work\ncase workFax"
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-4mrsv",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nenum ElectricResistance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "IntentParameter.ElectricResistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricresistance",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.ElectricResistance, IntentParameter<Value>.ElectricResistance) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase kiloohms\ncase megaohms\ncase microohms\ncase milliohms\ncase ohms\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar defaultUnit: IntentParameter<Value>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-2ca9l",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nenum Temperature\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar defaultUnit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-2bsyg",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nenum Volume\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-62blf",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nenum Temperature\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "sorted(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/sorted(using:)-2gheb",
    "html": "Parameters\ncomparators\n\nan array of comparators used to compare elements. The first comparator specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values.\n\nReturn Value\n\nan array of the elements sorted using comparators."
  },
  {
    "title": "suffix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/suffix(_:)",
    "html": "Parameters\nmaxLength\n\nThe maximum number of elements to return. The value of maxLength must be greater than or equal to zero.\n\nDiscussion\n\nThe sequence must be finite. If the maximum length exceeds the number of elements in the sequence, the result contains all the elements in the sequence.\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.suffix(2))\n// Prints \"[4, 5]\"\nprint(numbers.suffix(10))\n// Prints \"[1, 2, 3, 4, 5]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "starts(with:by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/starts(with:by:)",
    "html": "Parameters\npossiblePrefix\n\nA sequence to compare to this sequence.\n\nareEquivalent\n\nA predicate that returns true if its two arguments are equivalent; otherwise, false.\n\nReturn Value\n\ntrue if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true.\n\nDiscussion\n\nThe predicate must be a equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareEquivalent(a, a) is always true. (Reflexivity)\n\nareEquivalent(a, b) implies areEquivalent(b, a). (Symmetry)\n\nIf areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity)\n\nComplexity\n\nO(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."
  },
  {
    "title": "compare(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/compare(_:_:)",
    "html": "Discussion\n\nThe first element of the sequence of comparators specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/first(where:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nThe following example uses the first(where:) method to find the first negative number in an array of integers:\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nif let firstNegative = numbers.first(where: { $0 < 0 }) {\n    print(\"The first negative number is \\(firstNegative).\")\n}\n// Prints \"The first negative number is -2.\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/filter(_:)-8l5x9",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.\n\nReturn Value\n\nAn array of the elements that isIncluded allowed.\n\nDiscussion\n\nIn this example, filter(_:) is used to include only names shorter than five characters.\n\nlet cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]\nlet shortNames = cast.filter { $0.count < 5 }\nprint(shortNames)\n// Prints \"[\"Kim\", \"Karl\"]\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/min(by:)",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThis example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.\n\nlet hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]\nlet leastHue = hues.min { a, b in a.value < b.value }\nprint(leastHue)\n// Prints \"Optional((key: \"Coral\", value: 16))\"\n\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/reduce(_:_:)",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product.\n\nThe nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.\n\nlet numbers = [1, 2, 3, 4]\nlet numberSum = numbers.reduce(0, { x, y in\n    x + y\n})\n// numberSum == 10\n\n\nWhen numbers.reduce(_:_:) is called, the following steps occur:\n\nThe nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1.\n\nThe closure is called again repeatedly with the previous call’s return value and each element of the sequence.\n\nWhen the sequence is exhausted, the last value returned from the closure is returned to the caller.\n\nIf the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:).\n\nComplexity\n\nO(n), where n is the length of the sequence."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/prefix(while:)",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.\n\nReturn Value\n\nA sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nThe following example uses the prefix(while:) method to find the positive numbers at the beginning of the numbers array. Every element of numbers up to, but not including, the first negative value is included in the result.\n\nlet numbers = [3, 7, 4, -2, 9, -6, 10, 1]\nlet positivePrefix = numbers.prefix(while: { $0 > 0 })\n// positivePrefix == [3, 7, 4]\n\n\nIf predicate matches every element in the sequence, the resulting sequence contains every element of the sequence.\n\nComplexity\n\nO(k), where k is the length of the result."
  },
  {
    "title": "shuffled(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/shuffled(using:)",
    "html": "Parameters\ngenerator\n\nThe random number generator to use when shuffling the sequence.\n\nReturn Value\n\nAn array of this sequence’s elements in a shuffled order.\n\nDiscussion\n\nYou use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:\n\nlet numbers = 0...9\nlet shuffledNumbers = numbers.shuffled(using: &myGenerator)\n// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]\n\n\nComplexity\n\nO(n), where n is the length of the sequence.\n\nNote\n\nThe algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-2v1t4",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-zx45",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.InformationStorage?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.InformationStorage?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.InformationStorage, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.InformationStorage, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/doublecontrolstyle/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-42ayi",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-7sgxq",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "IntentParameter.Volume | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/volume",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Volume, IntentParameter<Value>.Volume) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase acreFeet\ncase bushels\ncase centiliters\ncase cubicCentimeters\ncase cubicDecimeters\ncase cubicFeet\ncase cubicInches\ncase cubicKilometers\ncase cubicMeters\ncase cubicMiles\ncase cubicMillimeters\ncase cubicYards\ncase cups\ncase deciliters\ncase fluidOunces\ncase gallons\ncase imperialFluidOunces\ncase imperialGallons\ncase imperialPints\ncase imperialQuarts\ncase imperialTablespoons\ncase imperialTeaspoons\ncase kiloliters\ncase liters\ncase megaliters\ncase metricCups\ncase milliliters\ncase pints\ncase quarts\ncase tablespoons\ncase teaspoons\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar defaultUnit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/datekind-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-95hrl",
    "html": "See Also\nAccessing unit details\nenum Volume\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar defaultUnit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-3t56o",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-2lxxx",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-3u0y1",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-903r6",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nenum Volume\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar defaultUnit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-14ddy",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nenum ElectricResistance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar defaultUnit: IntentParameter<Value>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-670ic",
    "html": "See Also\nAccessing unit details\nenum ElectricResistance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar defaultUnit: IntentParameter<Value>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-9ln52",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nenum Volume\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar defaultUnit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-15i5o",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-9iqxr",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/placemarkdisplaystyle/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-9bl77",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nenum Temperature\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar defaultUnit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-4pnv9",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-4214k",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-631td",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-6tmsl",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-5prj2",
    "html": "See Also\nAccessing unit details\nenum ElectricCurrent\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar defaultUnit: IntentParameter<Value>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "IntentPerson.Handle.Label.other | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/other",
    "html": "See Also\nGetting the handle labels\ncase home\ncase homeFax\ncase iPhone\ncase main\ncase mobile\ncase pager\ncase school\ncase work\ncase workFax"
  },
  {
    "title": "IntentPerson.Handle.Label.mobile | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/mobile",
    "html": "See Also\nGetting the handle labels\ncase home\ncase homeFax\ncase iPhone\ncase main\ncase other\ncase pager\ncase school\ncase work\ncase workFax"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "IntentPerson.Handle.Label.work | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/work",
    "html": "See Also\nGetting the handle labels\ncase home\ncase homeFax\ncase iPhone\ncase main\ncase mobile\ncase other\ncase pager\ncase school\ncase workFax"
  },
  {
    "title": "IntentPerson.Handle.Label.workFax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum/workfax",
    "html": "See Also\nGetting the handle labels\ncase home\ncase homeFax\ncase iPhone\ncase main\ncase mobile\ncase other\ncase pager\ncase school\ncase work"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/intcontrolstyle/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/intcontrolstyle/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-90byi",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-20tna",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/displaystyle/default",
    "html": "Discussion\n\nYou don’t need to explicitly specify this since it is the default. This rendering style is appropriate, for example, for thumbnails generated by your app representing user generated content such as files or notes. When using this style, provide a full-bleed image, and the system will render it while respecting the aspect ratio."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-5tqr4",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-2uqct",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nenum ElectricPotentialDifference\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "circular | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/displaystyle/circular",
    "html": "Discussion\n\nUse this for situations where an entity is represented within your app as a circle, such as the colorful circles that are used to represent destinations in Apple Maps. When using this style, provide a full-bleed image, and the system will attempt to render your image within a circle mask when possible."
  },
  {
    "title": "IntentParameter.ElectricPotentialDifference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/electricpotentialdifference",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.ElectricPotentialDifference, IntentParameter<Value>.ElectricPotentialDifference) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase kilovolts\ncase megavolts\ncase microvolts\ncase millivolts\ncase volts\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-85h1x",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-3clo2",
    "html": "See Also\nAccessing unit details\nenum ElectricPotentialDifference\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-9tm7b",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Frequency?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Frequency, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Frequency, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-5xtid",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Frequency?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Frequency?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Frequency, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-4xd9k",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Frequency?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Frequency?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Frequency, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Frequency, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-po5z",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nenum Illuminance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar defaultUnit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-52v1p",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nenum Frequency\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar defaultUnit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-9llvy",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-5i0hc",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Speed, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Speed, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-2486g",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-4hm4",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-1ji9i",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-7gjzx",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-19rj5",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-81yqr",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-4kgba",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-3hah0",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "IntentParameter.Speed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/speed",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Speed, IntentParameter<Value>.Speed) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase kilometersPerHour\ncase knots\ncase metersPerSecond\ncase milesPerHour\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Speed?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar defaultUnit: IntentParameter<Value>.Speed?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-2j2ui",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nenum Illuminance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-5d6kq",
    "html": "See Also\nAccessing unit details\nenum Illuminance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar defaultUnit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-7l000",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-irv",
    "html": "See Also\nAccessing unit details\nenum Temperature\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar defaultUnit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "IntentParameter.Temperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/temperature",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Temperature, IntentParameter<Value>.Temperature) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase celsius\ncase fahrenheit\ncase kelvin\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar defaultUnit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/placemarkdisplaystyle/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/placemarkdisplaystyle/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-35vja",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-6ufuu",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-44r3e",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nenum ElectricCurrent\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar defaultUnit: IntentParameter<Value>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-m6h5",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nenum ElectricCurrent\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-4hant",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nenum ElectricCurrent\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar defaultUnit: IntentParameter<Value>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "IntentParameter.Pressure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/pressure",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Pressure, IntentParameter<Value>.Pressure) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase bars\ncase gigapascals\ncase hectopascals\ncase inchesOfMercury\ncase kilopascals\ncase megapascals\ncase millibars\ncase millimetersOfMercury\ncase newtonsPerMetersSquared\ncase poundsForcePerSquareInch\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Pressure?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar defaultUnit: IntentParameter<Value>.Pressure?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>."
  },
  {
    "title": "IntentParameter.Frequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/frequency",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Frequency, IntentParameter<Value>.Frequency) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase framesPerSecond\ncase gigahertz\ncase hertz\ncase kilohertz\ncase megahertz\ncase microhertz\ncase millihertz\ncase nanohertz\ncase terahertz\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar defaultUnit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-83fjo",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Pressure?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nenum Pressure\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar defaultUnit: IntentParameter<Value>.Pressure?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-61co5",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nenum Frequency\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-8j88q",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-73fj3",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-6mvvw",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nenum Illuminance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar defaultUnit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "IntentParameter.Illuminance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/illuminance",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Illuminance, IntentParameter<Value>.Illuminance) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase lux\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar defaultUnit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-620ka",
    "html": "See Also\nAccessing unit details\nenum Speed\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar defaultUnit: IntentParameter<Value>.Speed?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>."
  },
  {
    "title": "IntentParameter.InformationStorage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/informationstorage",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.InformationStorage, IntentParameter<Value>.InformationStorage) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase bits\ncase bytes\ncase exabits\ncase exabytes\ncase exbibits\ncase exbibytes\ncase gibibits\ncase gibibytes\ncase gigabits\ncase gigabytes\ncase kibibits\ncase kibibytes\ncase kilobits\ncase kilobytes\ncase mebibits\ncase mebibytes\ncase megabits\ncase megabytes\ncase nibbles\ncase pebibits\ncase pebibytes\ncase petabits\ncase petabytes\ncase tebibits\ncase tebibytes\ncase terabits\ncase terabytes\ncase yobibits\ncase yobibytes\ncase yottabits\ncase yottabytes\ncase zebibits\ncase zebibytes\ncase zettabits\ncase zettabytes\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar defaultUnit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-4kad6",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-990sk",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-59wna",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-9qbxt",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nenum InformationStorage\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar defaultUnit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-36fxd",
    "html": "See Also\nAccessing unit details\nenum InformationStorage\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar defaultUnit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-f41e",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nenum InformationStorage\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar defaultUnit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-3u9af",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/doublecontrolstyle/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-7tfgo",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-9yrm9",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-8rqdf",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-ry6s",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nenum InformationStorage\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/datekind-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/datekind-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/datekind-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-38cqc",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nenum Area\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar defaultUnit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-l3in",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-4yeng",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-6r9fy",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-5q8nx",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-ytbn",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "IntentParameter.Acceleration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/acceleration",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Acceleration, IntentParameter<Value>.Acceleration) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase gravity\ncase metersPerSecondSquared\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar defaultUnit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-4kgwq",
    "html": "See Also\nAccessing unit details\nenum Acceleration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar defaultUnit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-8d17e",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nenum Acceleration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar defaultUnit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-8qdin",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-5kph6",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-2jck9",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nenum Acceleration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar defaultUnit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-5jrle",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-6s3bu",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nenum Acceleration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-31nta",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-4ixko",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/doublecontrolstyle/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-8i8i1",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nenum Frequency\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar defaultUnit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-9sm2x",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nenum Area\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "IntentPaymentMethod.PaymentType.applePay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/applepay",
    "html": "See Also\nGetting the payment options\ncase brokerage\ncase checking\ncase credit\ncase debit\ncase prepaid\ncase savings\ncase store\ncase unknown"
  },
  {
    "title": "IntentPaymentMethod.PaymentType.debit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/debit",
    "html": "See Also\nGetting the payment options\ncase applePay\ncase brokerage\ncase checking\ncase credit\ncase prepaid\ncase savings\ncase store\ncase unknown"
  },
  {
    "title": "IntentPaymentMethod.PaymentType.checking | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/checking",
    "html": "See Also\nGetting the payment options\ncase applePay\ncase brokerage\ncase credit\ncase debit\ncase prepaid\ncase savings\ncase store\ncase unknown"
  },
  {
    "title": "IntentPaymentMethod.PaymentType.credit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/credit",
    "html": "See Also\nGetting the payment options\ncase applePay\ncase brokerage\ncase checking\ncase debit\ncase prepaid\ncase savings\ncase store\ncase unknown"
  },
  {
    "title": "IntentPaymentMethod.PaymentType.prepaid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/prepaid",
    "html": "See Also\nGetting the payment options\ncase applePay\ncase brokerage\ncase checking\ncase credit\ncase debit\ncase savings\ncase store\ncase unknown"
  },
  {
    "title": "IntentPaymentMethod.PaymentType.savings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/savings",
    "html": "See Also\nGetting the payment options\ncase applePay\ncase brokerage\ncase checking\ncase credit\ncase debit\ncase prepaid\ncase store\ncase unknown"
  },
  {
    "title": "IntentPaymentMethod.PaymentType.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/unknown",
    "html": "See Also\nGetting the payment options\ncase applePay\ncase brokerage\ncase checking\ncase credit\ncase debit\ncase prepaid\ncase savings\ncase store"
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-8ba5t",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:)-1nq46",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "init(title:description:defaultValue:defaultUnit:defaultUnitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:defaultunit:defaultunitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-3enhk",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-hetl",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-2bek3",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nenum Duration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar defaultUnit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-92pkd",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "IntentParameter.Duration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/duration",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Duration, IntentParameter<Value>.Duration) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase hours\ncase microseconds\ncase milliseconds\ncase minutes\ncase nanoseconds\ncase picoseconds\ncase seconds\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar defaultUnit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "defaultUnit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/defaultunit-7lkkh",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nenum Duration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "supportsNegativeNumbers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/supportsnegativenumbers-89ub3",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nenum Duration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar defaultUnit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-6yxwx",
    "html": "See Also\nAccessing unit details\nenum Duration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar defaultUnit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>."
  },
  {
    "title": "TupleIntentPrediction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/tupleintentprediction",
    "html": "Relationships\nConforms To\nIntentPredictionConfiguration\nSee Also\nBuilding predictions\nstatic func buildBlock<A0>(A0) -> A0\nstatic func buildBlock<A0, A1>(A0, A1) -> TupleIntentPrediction<A0.Intent, (A0, A1)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2>(A0, A1, A2) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2)>\nAvailable when Intent conforms to AppIntent."
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "IntentParameter.Area | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/area",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.Area, IntentParameter<Value>.Area) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase acres\ncase ares\ncase hectares\ncase squareCentimeters\ncase squareFeet\ncase squareInches\ncase squareKilometers\ncase squareMegameters\ncase squareMeters\ncase squareMicrometers\ncase squareMiles\ncase squareMillimeters\ncase squareNanometers\ncase squareYards\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar defaultUnit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "init(title:description:defaultValue:unit:unitAdjustForLocale:supportsNegativeNumbers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:defaultvalue:unit:unitadjustforlocale:supportsnegativenumbers:requestvaluedialog:inputconnectionbehavior:resolvers:)-8t00h",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-9l0az",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "Intent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpredictionconfiguration/intent",
    "html": "Required"
  },
  {
    "title": "unitAdjustForLocale | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unitadjustforlocale-8xbaf",
    "html": "See Also\nAccessing unit details\nvar unit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nenum Area\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar defaultUnit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-3m63b",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "unit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/unit-42nhg",
    "html": "See Also\nAccessing unit details\nenum Area\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar defaultUnit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>."
  },
  {
    "title": "submitLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/submitlabel(_:)",
    "html": "Parameters\nsubmitLabel\n\nOne of the cases specified in SubmitLabel.\n\nDiscussion\nForm {\n    TextField(\"Username\", $viewModel.username)\n        .submitLabel(.continue)\n    SecureField(\"Password\", $viewModel.password)\n        .submitLabel(.done)\n}\n"
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "IntentPaymentMethod.PaymentType.brokerage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/brokerage",
    "html": "See Also\nGetting the payment options\ncase applePay\ncase checking\ncase credit\ncase debit\ncase prepaid\ncase savings\ncase store\ncase unknown"
  },
  {
    "title": "IntentPaymentMethod.PaymentType.store | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/store",
    "html": "See Also\nGetting the payment options\ncase applePay\ncase brokerage\ncase checking\ncase credit\ncase debit\ncase prepaid\ncase savings\ncase unknown"
  },
  {
    "title": "submitScope(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/submitscope(_:)",
    "html": "Parameters\nisBlocking\n\nA Boolean that indicates whether this scope is actively blocking submission triggers from reaching higher submission actions.\n\nDiscussion\n\nUse this modifier when you want to avoid specific views from initiating a submission action configured by the View/onSubmit(of:_:) modifier. In the example below, the tag field doesn’t trigger the submission of the form:\n\nForm {\n    TextField(\"Username\", text: $viewModel.userName)\n    SecureField(\"Password\", text: $viewModel.password)\n\n\n    TextField(\"Tags\", text: $viewModel.tags)\n        .submitScope()\n}\n.onSubmit {\n    guard viewModel.validate() else { return }\n    viewModel.login()\n}\n"
  },
  {
    "title": "buildBlock(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpredictionsbuilder/buildblock(_:_:_:)",
    "html": "See Also\nBuilding predictions\nstatic func buildBlock<A0>(A0) -> A0\nstatic func buildBlock<A0, A1>(A0, A1) -> TupleIntentPrediction<A0.Intent, (A0, A1)>\nAvailable when Intent conforms to AppIntent.\nstruct TupleIntentPrediction\nA type that represents a collection of predictions for a specific app intent."
  },
  {
    "title": "buildBlock(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpredictionsbuilder/buildblock(_:_:)",
    "html": "See Also\nBuilding predictions\nstatic func buildBlock<A0>(A0) -> A0\nstatic func buildBlock<A0, A1, A2>(A0, A1, A2) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2)>\nAvailable when Intent conforms to AppIntent.\nstruct TupleIntentPrediction\nA type that represents a collection of predictions for a specific app intent."
  },
  {
    "title": "buildBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpredictionsbuilder/buildblock(_:)",
    "html": "See Also\nBuilding predictions\nstatic func buildBlock<A0, A1>(A0, A1) -> TupleIntentPrediction<A0.Intent, (A0, A1)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2>(A0, A1, A2) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2)>\nAvailable when Intent conforms to AppIntent.\nstruct TupleIntentPrediction\nA type that represents a collection of predictions for a specific app intent."
  },
  {
    "title": "appendLiteral(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/stringinterpolation/appendliteral(_:)",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nParameters\nliteral\n\nA string literal containing the characters that appear next in the string literal.\n\nDiscussion\n\nDon’t call this method directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nInterpolated expressions don’t pass through this method; instead, Swift selects an overload of appendInterpolation. For more information, see the top-level StringInterpolationProtocol documentation."
  },
  {
    "title": "AppShortcutParameterPresentationTitleString.StringInterpolation.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/stringinterpolation/stringliteraltype",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)"
  },
  {
    "title": "appendInterpolation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/stringinterpolation/appendinterpolation(_:)",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)"
  },
  {
    "title": "init(literalCapacity:interpolationCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/stringinterpolation/init(literalcapacity:interpolationcount:)",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nParameters\nliteralCapacity\n\nThe approximate size of all literal segments combined. This is meant to be passed to String.reserveCapacity(_:); it may be slightly larger or smaller than the sum of the counts of each literal segment.\n\ninterpolationCount\n\nThe number of interpolations which will be appended. Use this value to estimate how much additional capacity will be needed for the interpolated segments.\n\nDiscussion\n\nDon’t call this initializer directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nSwift passes this initializer a pair of arguments specifying the size of the literal segments and the number of interpolated segments. Use this information to estimate the amount of storage you will need."
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "appendLiteral(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/stringinterpolation/appendliteral(_:)",
    "html": "Parameters\nliteral\n\nA string literal containing the characters that appear next in the string literal.\n\nDiscussion\n\nDon’t call this method directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nInterpolated expressions don’t pass through this method; instead, Swift selects an overload of appendInterpolation. For more information, see the top-level StringInterpolationProtocol documentation."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantintent/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "init(literalCapacity:interpolationCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/stringinterpolation/init(literalcapacity:interpolationcount:)",
    "html": "Parameters\nliteralCapacity\n\nThe approximate size of all literal segments combined. This is meant to be passed to String.reserveCapacity(_:); it may be slightly larger or smaller than the sum of the counts of each literal segment.\n\ninterpolationCount\n\nThe number of interpolations which will be appended. Use this value to estimate how much additional capacity will be needed for the interpolated segments.\n\nDiscussion\n\nDon’t call this initializer directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nSwift passes this initializer a pair of arguments specifying the size of the literal segments and the number of interpolated segments. Use this information to estimate the amount of storage you will need."
  },
  {
    "title": "textSelection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/textselection(_:)",
    "html": "Discussion\n\nPeople sometimes need to copy useful information from Text views — including error messages, serial numbers, or IP addresses — so they can then paste the text into another context. Enable text selection to let people select text in a platform-appropriate way.\n\nYou can apply this method to an individual text view, or to a container to make each contained text view selectable. In the following example, the person using the app can select text that shows the date of an event or the name or email of any of the event participants:\n\nvar body: some View {\n    VStack {\n        Text(\"Event Invite\")\n            .font(.title)\n        Text(invite.date.formatted(date: .long, time: .shortened))\n            .textSelection(.enabled)\n\n\n        List(invite.recipients) { recipient in\n            VStack (alignment: .leading) {\n                Text(recipient.name)\n                Text(recipient.email)\n                    .foregroundStyle(.secondary)\n            }\n        }\n        .textSelection(.enabled)\n    }\n    .navigationTitle(\"New Invitation\")\n}\n\n\nOn macOS, people use the mouse or trackpad to select a range of text, which they can quickly copy by choosing Edit > Copy, or with the standard keyboard shortcut.\n\nOn iOS, the person using the app touches and holds on a selectable Text view, which brings up a system menu with menu items appropriate for the current context. These menu items operate on the entire contents of the Text view; the person can’t select a range of text like they can on macOS.\n\nNote\n\nButton views don’t support text selection."
  },
  {
    "title": "textInputAutocapitalization(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/textinputautocapitalization(_:)",
    "html": "Parameters\nautocapitalization\n\nOne of the capitalizing behaviors defined in the TextInputAutocapitalization struct or nil.\n\nDiscussion\n\nUse textInputAutocapitalization(_:) when you need to automatically capitalize words, sentences, or other text like proper nouns.\n\nIn example below, as the user enters text the shift key is automatically enabled before every word:\n\nTextField(\"Last, First\", text: $fullName)\n    .textInputAutocapitalization(.words)\n\n\nThe TextInputAutocapitalization struct defines the available autocapitalizing behavior. Providing nil to this view modifier does not change the autocapitalization behavior. The default is TextInputAutocapitalization.sentences."
  },
  {
    "title": "sheet(isPresented:onDismiss:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/sheet(ispresented:ondismiss:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the sheet that you create in the modifier’s content closure.\n\nonDismiss\n\nThe closure to execute when dismissing the sheet.\n\ncontent\n\nA closure that returns the content of the sheet.\n\nDiscussion\n\nUse this method when you want to present a modal view to the user when a Boolean value you provide is true. The example below displays a modal view of the mockup for a software license agreement when the user toggles the isShowingSheet variable by clicking or tapping on the “Show License Agreement” button:\n\nstruct ShowLicenseAgreement: View {\n    @State private var isShowingSheet = false\n    var body: some View {\n        Button(action: {\n            isShowingSheet.toggle()\n        }) {\n            Text(\"Show License Agreement\")\n        }\n        .sheet(isPresented: $isShowingSheet,\n               onDismiss: didDismiss) {\n            VStack {\n                Text(\"License Agreement\")\n                    .font(.title)\n                    .padding(50)\n                Text(\"\"\"\n                        Terms and conditions go here.\n                    \"\"\")\n                    .padding(50)\n                Button(\"Dismiss\",\n                       action: { isShowingSheet.toggle() })\n            }\n        }\n    }\n\n\n    func didDismiss() {\n        // Handle the dismissing action.\n    }\n}\n\n\nIn vertically compact environments, such as iPhone in landscape orientation, a sheet presentation automatically adapts to appear as a full-screen cover. Use the View/presentationCompactAdaptation(_:) or View/presentationCompactAdaptation(horizontal:vertical:) modifier to override this behavior."
  },
  {
    "title": "simultaneousGesture(_:including:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/simultaneousgesture(_:including:)",
    "html": "Parameters\ngesture\n\nA gesture to attach to the view.\n\nmask\n\nA value that controls how adding this gesture to the view affects other gestures recognized by the view and its subviews. Defaults to SwiftUI/GestureMask/all.\n\nDiscussion\n\nUse this method when you need to define and process a view specific gesture simultaneously with the same priority as the view’s existing gestures. The example below defines a custom gesture that prints a message to the console and attaches it to the view’s VStack. Inside the VStack is a red heart Image defines its own TapGesture handler that also prints a message to the console and a blue rectangle with no custom gesture handlers.\n\nTapping or clicking the “heart” image sends two messages to the console: one for the image’s tap gesture handler, and the other from a custom gesture handler attached to the enclosing vertical stack. Tapping or clicking on the blue rectangle results only in the single message to the console from the tap recognizer attached to the VStack:\n\nstruct SimultaneousGestureExample: View {\n    @State private var message = \"Message\"\n    let newGesture = TapGesture().onEnded {\n        print(\"Gesture on VStack.\")\n    }\n\n\n    var body: some View {\n        VStack(spacing:25) {\n            Image(systemName: \"heart.fill\")\n                .resizable()\n                .frame(width: 75, height: 75)\n                .padding()\n                .foregroundColor(.red)\n                .onTapGesture {\n                    print(\"Gesture on image.\")\n                }\n            Rectangle()\n                .fill(Color.blue)\n        }\n        .simultaneousGesture(newGesture)\n        .frame(width: 200, height: 200)\n        .border(Color.purple)\n    }\n}\n"
  },
  {
    "title": "sheet(item:onDismiss:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/sheet(item:ondismiss:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the sheet. When item is non-nil, the system passes the item’s content to the modifier’s closure. You display this content in a sheet that you create that the system displays to the user. If item changes, the system dismisses the sheet and replaces it with a new one using the same process.\n\nonDismiss\n\nThe closure to execute when dismissing the sheet.\n\ncontent\n\nA closure returning the content of the sheet.\n\nDiscussion\n\nUse this method when you need to present a modal view with content from a custom data source. The example below shows a custom data source InventoryItem that the content closure uses to populate the display the action sheet shows to the user:\n\nstruct ShowPartDetail: View {\n    @State private var sheetDetail: InventoryItem?\n\n\n    var body: some View {\n        Button(\"Show Part Details\") {\n            sheetDetail = InventoryItem(\n                id: \"0123456789\",\n                partNumber: \"Z-1234A\",\n                quantity: 100,\n                name: \"Widget\")\n        }\n        .sheet(item: $sheetDetail,\n               onDismiss: didDismiss) { detail in\n            VStack(alignment: .leading, spacing: 20) {\n                Text(\"Part Number: \\(detail.partNumber)\")\n                Text(\"Name: \\(detail.name)\")\n                Text(\"Quantity On-Hand: \\(detail.quantity)\")\n            }\n            .onTapGesture {\n                sheetDetail = nil\n            }\n        }\n    }\n\n\n    func didDismiss() {\n        // Handle the dismissing action.\n    }\n}\n\n\nstruct InventoryItem: Identifiable {\n    var id: String\n    let partNumber: String\n    let quantity: Int\n    let name: String\n}\n\n\nIn vertically compact environments, such as iPhone in landscape orientation, a sheet presentation automatically adapts to appear as a full-screen cover. Use the View/presentationCompactAdaptation(_:) or View/presentationCompactAdaptation(horizontal:vertical:) modifier to override this behavior."
  },
  {
    "title": "sensoryFeedback(_:trigger:condition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/sensoryfeedback(_:trigger:condition:)",
    "html": "Parameters\nfeedback\n\nWhich type of feedback to play.\n\ntrigger\n\nA value to monitor for changes to determine when to play.\n\ncondition\n\nA closure to determine whether to play the feedback when trigger changes.\n\nDiscussion\n\nFor example, you could play feedback for certain state transitions:\n\nstruct MyView: View {\n    @State private var phase = Phase.inactive\n\n\n    var body: some View {\n        ContentView(phase: $phase)\n            .sensoryFeedback(.selection, trigger: phase) { old, new in\n                old == .inactive || new == .expanded\n            }\n    }\n\n\n    enum Phase {\n        case inactive\n        case preparing\n        case active\n        case expanded\n    }\n}\n"
  },
  {
    "title": "siriTipViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/siritipviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to set.\n\nReturn Value\n\nA view that uses the specified style on its child views."
  },
  {
    "title": "sensoryFeedback(_:trigger:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/sensoryfeedback(_:trigger:)",
    "html": "Parameters\nfeedback\n\nWhich type of feedback to play.\n\ntrigger\n\nA value to monitor for changes to determine when to play.\n\nDiscussion\n\nFor example, you could play feedback when a state value changes:\n\nstruct MyView: View {\n    @State private var showAccessory = false\n\n\n    var body: some View {\n        ContentView()\n            .sensoryFeedback(.selection, trigger: showAccessory)\n            .onLongPressGesture {\n                showAccessory.toggle()\n            }\n\n\n        if showAccessory {\n            AccessoryView()\n        }\n    }\n}\n"
  },
  {
    "title": "submitLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/submitlabel(_:)",
    "html": "Parameters\nsubmitLabel\n\nOne of the cases specified in SubmitLabel.\n\nDiscussion\nForm {\n    TextField(\"Username\", $viewModel.username)\n        .submitLabel(.continue)\n    SecureField(\"Password\", $viewModel.password)\n        .submitLabel(.done)\n}\n"
  },
  {
    "title": "speechAlwaysIncludesPunctuation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/speechalwaysincludespunctuation(_:)",
    "html": "Parameters\nvalue\n\nA Boolean value that you set to true if VoiceOver should speak all punctuation in the text. Defaults to true.\n\nDiscussion\n\nUse this modifier to control whether the system speaks punctuation characters in the text. You might use this for code or other text where the punctuation is relevant, or where you want VoiceOver to speak a verbatim transcription of the text you provide. For example, given the text:\n\nText(\"All the world's a stage, \" +\n     \"And all the men and women merely players;\")\n     .speechAlwaysIncludesPunctuation()\n\n\nVoiceOver would speak “All the world apostrophe s a stage comma and all the men and women merely players semicolon”.\n\nBy default, VoiceOver voices punctuation based on surrounding context."
  },
  {
    "title": "swipeActions(edge:allowsFullSwipe:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/swipeactions(edge:allowsfullswipe:content:)",
    "html": "Parameters\nedge\n\nThe edge of the view to associate the swipe actions with. The default is HorizontalEdge/trailing.\n\nallowsFullSwipe\n\nA Boolean value that indicates whether a full swipe automatically performs the first action. The default is true.\n\ncontent\n\nThe content of the swipe actions.\n\nDiscussion\n\nUse this method to add swipe actions to a view that acts as a row in a list. Indicate the HorizontalEdge where the swipe action originates, and define individual actions with Button instances. For example, if you have a list of messages, you can add an action to toggle a message as unread on a swipe from the leading edge, and actions to delete or flag messages on a trailing edge swipe:\n\nList {\n    ForEach(store.messages) { message in\n        MessageCell(message: message)\n            .swipeActions(edge: .leading) {\n                Button { store.toggleUnread(message) } label: {\n                    if message.isUnread {\n                        Label(\"Read\", systemImage: \"envelope.open\")\n                    } else {\n                        Label(\"Unread\", systemImage: \"envelope.badge\")\n                    }\n                }\n            }\n            .swipeActions(edge: .trailing) {\n                Button(role: .destructive) {\n                    store.delete(message)\n                } label: {\n                    Label(\"Delete\", systemImage: \"trash\")\n                }\n                Button { store.flag(message) } label: {\n                    Label(\"Flag\", systemImage: \"flag\")\n                }\n            }\n        }\n    }\n}\n\n\nActions appear in the order you list them, starting from the swipe’s originating edge. In the example above, the Delete action appears closest to the screen’s trailing edge:\n\nFor labels or images that appear in swipe actions, SwiftUI automatically applies the SymbolVariants/fill-swift.type.property symbol variant, as shown above.\n\nBy default, the user can perform the first action for a given swipe direction with a full swipe. For the example above, the user can perform both the toggle unread and delete actions with full swipes. You can opt out of this behavior for an edge by setting the allowsFullSwipe parameter to false. For example, you can disable the full swipe on the leading edge:\n\n.swipeActions(edge: .leading, allowsFullSwipe: false) {\n    Button { store.toggleUnread(message) } label: {\n        if message.isUnread {\n            Label(\"Read\", systemImage: \"envelope.open\")\n        } else {\n            Label(\"Unread\", systemImage: \"envelope.badge\")\n        }\n    }\n}\n\n\nWhen you set a role for a button using one of the values from the ButtonRole enumeration, SwiftUI styles the button according to its role. In the example above, the delete action appears in ShapeStyle/red because it has the ButtonRole/destructive role. If you want to set a different color — for example, to match the overall theme of your app’s UI — add the View/tint(_:) modifier to the button:\n\nMessageCell(message: message)\n    .swipeActions(edge: .leading) {\n        Button { store.toggleUnread(message) } label: {\n            if message.isUnread {\n                Label(\"Read\", systemImage: \"envelope.open\")\n            } else {\n                Label(\"Unread\", systemImage: \"envelope.badge\")\n            }\n        }\n        .tint(.blue)\n    }\n    .swipeActions(edge: .trailing) {\n        Button(role: .destructive) { store.delete(message) } label: {\n            Label(\"Delete\", systemImage: \"trash\")\n        }\n        Button { store.flag(message) } label: {\n            Label(\"Flag\", systemImage: \"flag\")\n        }\n        .tint(.orange)\n    }\n\n\nThe modifications in the code above make the toggle unread action ShapeStyle/blue and the flag action ShapeStyle/orange:\n\nWhen you add swipe actions, SwiftUI no longer synthesizes the Delete actions that otherwise appear when using the ForEach/onDelete(perform:) method on a ForEach instance. You become responsible for creating a Delete action, if appropriate, among your swipe actions.\n\nActions accumulate for a given edge if you call the modifier multiple times on the same list row view."
  },
  {
    "title": "speechSpellsOutCharacters(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/speechspellsoutcharacters(_:)",
    "html": "Parameters\nvalue\n\nA Boolean value that when true indicates VoiceOver should speak text as individual characters. Defaults to true.\n\nDiscussion\n\nUse this modifier when you want VoiceOver to speak text as individual letters, character by character. This is important for text that is not meant to be spoken together, like:\n\nAn acronym that isn’t a word, like APPL, spoken as “A-P-P-L”.\n\nA number representing a series of digits, like 25, spoken as “two-five” rather than “twenty-five”."
  },
  {
    "title": "springLoadingBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/springloadingbehavior(_:)",
    "html": "Parameters\nbehavior\n\nWhether spring loading is enabled or not. If unspecified, the default behavior is .automatic.\n\nDiscussion\n\nSpring loading refers to a view being activated during a drag and drop interaction. On iOS this can occur when pausing briefly on top of a view with dragged content. On macOS this can occur with similar brief pauses or on pressure-sensitive systems by “force clicking” during the drag. This has no effect on tvOS or watchOS.\n\nThis is commonly used with views that have a navigation or presentation effect, allowing the destination to be revealed without pausing the drag interaction. For example, a button that reveals a list of folders that a dragged item can be dropped onto.\n\nButton {\n    showFolders = true\n} label: {\n    Label(\"Show Folders\", systemImage: \"folder\")\n}\n.springLoadingBehavior(.enabled)\n\n\nUnlike disabled(_:), this modifier overrides the value set by an ancestor view rather than being unioned with it. For example, the below button would allow spring loading:\n\nHStack {\n    Button {\n        showFolders = true\n    } label: {\n        Label(\"Show Folders\", systemImage: \"folder\")\n    }\n    .springLoadingBehavior(.enabled)\n\n\n    ...\n}\n.springLoadingBehavior(.disabled)\n"
  },
  {
    "title": "statusBar(hidden:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/statusbar(hidden:)",
    "html": "Parameters\nhidden\n\nA Boolean value that indicates whether to hide the status bar.\n\nDiscussion\n\nUse statusBar(hidden:) to show or hide the status bar."
  },
  {
    "title": "symbolEffect(_:options:isActive:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/symboleffect(_:options:isactive:)",
    "html": "Parameters\neffect\n\nA symbol effect to add to the view. Existing effects added by ancestors of the view are preserved, but may be overridden by the new effect. Added effects will be applied to the ``SwiftUI/Image` views contained by the child view.\n\nisActive\n\nwhether the effect is active or inactive.\n\nReturn Value\n\na copy of the view with a symbol effect added.\n\nDiscussion\n\nThe following example adds a repeating pulse effect to two symbol images:\n\nVStack {\n    Image(systemName: \"bolt.slash.fill\")\n    Image(systemName: \"folder.fill.badge.person.crop\")\n}\n.symbolEffect(.pulse)\n"
  },
  {
    "title": "tableColumnHeaders(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/tablecolumnheaders(_:)",
    "html": "Parameters\nvisibility\n\nA value of visible will show table columns, hidden will remove them, and automatic will defer to default behavior.\n\nDiscussion\n\nBy default, Table will display a global header view with the labels of each table column. This area is also where users can sort, resize, and rearrange the columns. For simple cases that don’t require those features, this header can be hidden.\n\nThis will not affect the header of any Sections in a table.\n\nTable(article.authors) {\n    TableColumn(\"Name\", value: \\.name)\n    TableColumn(\"Title\", value: \\.title)\n}\n.tableColumnHeaders(.hidden)\n"
  },
  {
    "title": "tag(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/tag(_:)",
    "html": "Parameters\ntag\n\nA Hashable value to use as the view’s tag.\n\nReturn Value\n\nA view with the specified tag set.\n\nDiscussion\n\nUse this modifier to differentiate among certain selectable views, like the possible values of a Picker or the tabs of a TabView. Tag values can be of any type that conforms to the Hashable protocol.\n\nIn the example below, the ForEach loop in the Picker view builder iterates over the Flavor enumeration. It extracts the string value of each enumeration element for use in constructing the row label, and uses the enumeration value, cast as an optional, as input to the tag(_:) modifier. The Picker requires the tags to have a type that exactly matches the selection type, which in this case is an optional Flavor.\n\nstruct FlavorPicker: View {\n    enum Flavor: String, CaseIterable, Identifiable {\n        case chocolate, vanilla, strawberry\n        var id: Self { self }\n    }\n\n\n    @State private var selectedFlavor: Flavor? = nil\n\n\n    var body: some View {\n        Picker(\"Flavor\", selection: $selectedFlavor) {\n            ForEach(Flavor.allCases) { flavor in\n                Text(flavor.rawValue).tag(Optional(flavor))\n            }\n        }\n    }\n}\n\n\nIf you change selectedFlavor to be non-optional, you need to remove the Optional cast from the tag input to match.\n\nA ForEach automatically applies a default tag to each enumerated view using the id parameter of the corresponding element. If the element’s id parameter and the picker’s selection input have exactly the same type, you can omit the explicit tag modifier. To see examples that don’t require an explicit tag, see Picker."
  },
  {
    "title": "textContentType(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/textcontenttype(_:)",
    "html": "Parameters\ntextContentType\n\nOne of the content types available in the UITextContentType structure that identify the semantic meaning expected for a text-entry area. These include support for email addresses, location names, URLs, and telephone numbers, to name just a few.\n\nDiscussion\n\nUse this method to set the content type for input text. For example, you can configure a TextField for the entry of email addresses:\n\nTextField(\"Enter your email\", text: $emailAddress)\n    .textContentType(.emailAddress)\n"
  },
  {
    "title": "tabItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/tabitem(_:)",
    "html": "Parameters\nlabel\n\nThe tab bar item to associate with this view.\n\nDiscussion\n\nUse tabItem(_:) to configure a view as a tab bar item in a TabView. The example below adds two views as tabs in a TabView:\n\nstruct View1: View {\n    var body: some View {\n        Text(\"View 1\")\n    }\n}\n\n\nstruct View2: View {\n    var body: some View {\n        Text(\"View 2\")\n    }\n}\n\n\nstruct TabItem: View {\n    var body: some View {\n        TabView {\n            View1()\n                .tabItem {\n                    Label(\"Menu\", systemImage: \"list.dash\")\n                }\n\n\n            View2()\n                .tabItem {\n                    Label(\"Order\", systemImage: \"square.and.pencil\")\n                }\n        }\n    }\n}\n"
  },
  {
    "title": "tableColumnHeaders(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/tablecolumnheaders(_:)",
    "html": "Parameters\nvisibility\n\nA value of visible will show table columns, hidden will remove them, and automatic will defer to default behavior.\n\nDiscussion\n\nBy default, Table will display a global header view with the labels of each table column. This area is also where users can sort, resize, and rearrange the columns. For simple cases that don’t require those features, this header can be hidden.\n\nThis will not affect the header of any Sections in a table.\n\nTable(article.authors) {\n    TableColumn(\"Name\", value: \\.name)\n    TableColumn(\"Title\", value: \\.title)\n}\n.tableColumnHeaders(.hidden)\n"
  },
  {
    "title": "task(priority:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/task(priority:_:)",
    "html": "Parameters\npriority\n\nThe task priority to use when creating the asynchronous task. The default priority is userInitiated.\n\naction\n\nA closure that SwiftUI calls as an asynchronous task before the view appears. SwiftUI will automatically cancel the task at some point after the view disappears before the action completes.\n\nReturn Value\n\nA view that runs the specified action asynchronously before the view appears.\n\nDiscussion\n\nUse this modifier to perform an asynchronous task with a lifetime that matches that of the modified view. If the task doesn’t finish before SwiftUI removes the view or the view changes identity, SwiftUI cancels the task.\n\nUse the await keyword inside the task to wait for an asynchronous call to complete, or to wait on the values of an AsyncSequence instance. For example, you can modify a Text view to start a task that loads content from a remote resource:\n\nlet url = URL(string: \"https://example.com\")!\n@State private var message = \"Loading...\"\n\n\nvar body: some View {\n    Text(message)\n        .task {\n            do {\n                var receivedLines = [String]()\n                for try await line in url.lines {\n                    receivedLines.append(line)\n                    message = \"Received \\(receivedLines.count) lines\"\n                }\n            } catch {\n                message = \"Failed to load\"\n            }\n        }\n}\n\n\nThis example uses the lines method to get the content stored at the specified URL as an asynchronous sequence of strings. When each new line arrives, the body of the for-await-in loop stores the line in an array of strings and updates the content of the text view to report the latest line count."
  },
  {
    "title": "toolbar(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbar(_:for:)",
    "html": "Parameters\nvisibility\n\nThe preferred visibility of the bar.\n\nbars\n\nThe bars to update the visibility of or ToolbarPlacement/automatic if empty.\n\nDiscussion\n\nThe preferred visibility flows up to the nearest container that renders a bar. This could be a NavigationView or TabView in iOS, or the root view of a WindowGroup in macOS.\n\nThis examples shows a view that hides the navigation bar.\n\nNavigationView {\n    ContentView()\n        .toolbar(.hidden)\n}\n\n\nYou can provide multiple ToolbarPlacement instances to hide multiple bars at once.\n\nTabView {\n    NavigationView {\n        ContentView()\n            .toolbar(\n                .hidden, for: .navigationBar, .tabBar)\n    }\n}\n\n\nNote\n\nIn macOS, if you provide ToolbarCommands to the scene of your app, this modifier disables the toolbar visibility command while the value of the modifier is not ToolbarPlacement/automatic.\n\nDepending on the specified bars, the requested visibility may not be able to be fullfilled."
  },
  {
    "title": "toggleStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/togglestyle(_:)",
    "html": "Parameters\nstyle\n\nThe toggle style to set. Use one of the built-in values, like ToggleStyle/switch or ToggleStyle/button, or a custom style that you define by creating a type that conforms to the ToggleStyle protocol.\n\nReturn Value\n\nA view that uses the specified toggle style for itself and its child views.\n\nDiscussion\n\nUse this modifier on a Toggle instance to set a style that defines the control’s appearance and behavior. For example, you can choose the ToggleStyle/switch style:\n\nToggle(\"Vibrate on Ring\", isOn: $vibrateOnRing)\n    .toggleStyle(.switch)\n\n\nBuilt-in styles typically have a similar appearance across platforms, tailored to the platform’s overall style:\n\nPlatform\n\n\t\n\nAppearance\n\n\n\n\niOS, iPadOS\n\n\t\n\n\n\n\nmacOS\n\n\t\n\nStyling toggles in a hierarchy\n\nYou can set a style for all toggle instances within a view hierarchy by applying the style modifier to a container view. For example, you can apply the ToggleStyle/button style to an HStack:\n\nHStack {\n    Toggle(isOn: $isFlagged) {\n        Label(\"Flag\", systemImage: \"flag.fill\")\n    }\n    Toggle(isOn: $isMuted) {\n        Label(\"Mute\", systemImage: \"speaker.slash.fill\")\n    }\n}\n.toggleStyle(.button)\n\n\nThe example above has the following appearance when isFlagged is true and isMuted is false:\n\nPlatform\n\n\t\n\nAppearance\n\n\n\n\niOS, iPadOS\n\n\t\n\n\n\n\nmacOS\n\n\t\n\nAutomatic styling\n\nIf you don’t set a style, SwiftUI assumes a value of ToggleStyle/automatic, which corresponds to a context-specific default. Specify the automatic style explicitly to override a container’s style and revert to the default:\n\nHStack {\n    Toggle(isOn: $isShuffling) {\n        Label(\"Shuffle\", systemImage: \"shuffle\")\n    }\n    Toggle(isOn: $isRepeating) {\n        Label(\"Repeat\", systemImage: \"repeat\")\n    }\n\n\n    Divider()\n\n\n    Toggle(\"Enhance Sound\", isOn: $isEnhanced)\n        .toggleStyle(.automatic) // Revert to the default style.\n}\n.toggleStyle(.button) // Use button style for toggles in the stack.\n.labelStyle(.iconOnly) // Omit the title from any labels.\n\n\nThe style that SwiftUI uses as the default depends on both the platform and the context. In macOS, the default in most contexts is a ToggleStyle/checkbox, while in iOS, the default toggle style is a ToggleStyle/switch:\n\nPlatform\n\n\t\n\nAppearance\n\n\n\n\niOS, iPadOS\n\n\t\n\n\n\n\nmacOS\n\n\t\n\nNote\n\nLike toggle style does for toggles, the View/labelStyle(_:) modifier sets the style for Label instances in the hierarchy. The example above demostrates the compact LabelStyle/iconOnly style, which is useful for button toggles in space-constrained contexts. Always include a descriptive title for better accessibility.\n\nFor more information about how SwiftUI chooses a default toggle style, see the ToggleStyle/automatic style."
  },
  {
    "title": "tint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/tint(_:)",
    "html": "Parameters\ntint\n\nThe tint Color to apply.\n\nDiscussion\n\nUse this method to override the default accent color for this view. Unlike an app’s accent color, which can be overridden by user preference, the tint color is always respected and should be used as a way to provide additional meaning to the control.\n\nThis example shows Answer and Decline buttons with ShapeStyle/green and ShapeStyle/red tint colors, respectively.\n\nstruct ControlTint: View {\n    var body: some View {\n        HStack {\n            Button {\n                // Answer the call\n            } label: {\n                Label(\"Answer\", systemImage: \"phone\")\n            }\n            .tint(.green)\n            Button {\n                // Decline the call\n            } label: {\n                Label(\"Decline\", systemImage: \"phone.down\")\n            }\n            .tint(.red)\n        }\n        .padding()\n    }\n}\n"
  },
  {
    "title": "toolbar(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/toolbar(content:)-69fd",
    "html": "Parameters\ncontent\n\nThe views representing the content of the toolbar.\n\nDiscussion\n\nUse this modifier to add content to the toolbar. The toolbar modifier expects a collection of toolbar items that you can provide either by supplying a collection of views with each view wrapped in a ToolbarItem, or by providing a collection of views as a ToolbarItemGroup. The example below adds views to using a toolbar item group to support text editing features:\n\nstruct StructToolbarItemGroupView: View {\n    @State private var text = \"\"\n    @State private var bold = false\n    @State private var italic = false\n    @State private var fontSize = 12.0\n\n\n    var displayFont: Font {\n        let font = Font.system(size: CGFloat(fontSize),\n                               weight: bold == true ? .bold : .regular)\n        return italic == true ? font.italic() : font\n    }\n\n\n    var body: some View {\n        TextEditor(text: $text)\n            .font(displayFont)\n            .toolbar {\n                ToolbarItemGroup {\n                    Slider(\n                        value: $fontSize,\n                        in: 8...120,\n                        minimumValueLabel:\n                            Text(\"A\").font(.system(size: 8)),\n                        maximumValueLabel:\n                            Text(\"A\").font(.system(size: 16))\n                    ) {\n                        Text(\"Font Size (\\(Int(fontSize)))\")\n                    }\n                    .frame(width: 150)\n                    Toggle(isOn: $bold) {\n                        Image(systemName: \"bold\")\n                    }\n                    Toggle(isOn: $italic) {\n                        Image(systemName: \"italic\")\n                    }\n                }\n            }\n            .navigationTitle(\"My Note\")\n    }\n}\n"
  },
  {
    "title": "sensoryFeedback(_:trigger:condition:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/sensoryfeedback(_:trigger:condition:)",
    "html": "Parameters\nfeedback\n\nWhich type of feedback to play.\n\ntrigger\n\nA value to monitor for changes to determine when to play.\n\ncondition\n\nA closure to determine whether to play the feedback when trigger changes.\n\nDiscussion\n\nFor example, you could play feedback for certain state transitions:\n\nstruct MyView: View {\n    @State private var phase = Phase.inactive\n\n\n    var body: some View {\n        ContentView(phase: $phase)\n            .sensoryFeedback(.selection, trigger: phase) { old, new in\n                old == .inactive || new == .expanded\n            }\n    }\n\n\n    enum Phase {\n        case inactive\n        case preparing\n        case active\n        case expanded\n    }\n}\n"
  },
  {
    "title": "sensoryFeedback(_:trigger:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/sensoryfeedback(_:trigger:)",
    "html": "Parameters\nfeedback\n\nWhich type of feedback to play.\n\ntrigger\n\nA value to monitor for changes to determine when to play.\n\nDiscussion\n\nFor example, you could play feedback when a state value changes:\n\nstruct MyView: View {\n    @State private var showAccessory = false\n\n\n    var body: some View {\n        ContentView()\n            .sensoryFeedback(.selection, trigger: showAccessory)\n            .onLongPressGesture {\n                showAccessory.toggle()\n            }\n\n\n        if showAccessory {\n            AccessoryView()\n        }\n    }\n}\n"
  },
  {
    "title": "shadow(color:radius:x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/shadow(color:radius:x:y:)",
    "html": "Parameters\ncolor\n\nThe shadow’s color.\n\nradius\n\nA measure of how much to blur the shadow. Larger values result in more blur.\n\nx\n\nAn amount to offset the shadow horizontally from the view.\n\ny\n\nAn amount to offset the shadow vertically from the view.\n\nReturn Value\n\nA view that adds a shadow to this view.\n\nDiscussion\n\nUse this modifier to add a shadow of a specified color behind a view. You can offset the shadow from its view independently in the horizontal and vertical dimensions using the x and y parameters. You can also blur the edges of the shadow using the radius parameter. Use a radius of zero to create a sharp shadow. Larger radius values produce softer shadows.\n\nThe example below creates a grid of boxes with varying offsets and blur. Each box displays its radius and offset values for reference.\n\nstruct Shadow: View {\n    let steps = [0, 5, 10]\n\n\n    var body: some View {\n        VStack(spacing: 50) {\n            ForEach(steps, id: \\.self) { offset in\n                HStack(spacing: 50) {\n                    ForEach(steps, id: \\.self) { radius in\n                        Color.blue\n                            .shadow(\n                                color: .primary,\n                                radius: CGFloat(radius),\n                                x: CGFloat(offset), y: CGFloat(offset))\n                            .overlay {\n                                VStack {\n                                    Text(\"\\(radius)\")\n                                    Text(\"(\\(offset), \\(offset))\")\n                                }\n                            }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nThe example above uses Color/primary as the color to make the shadow easy to see for the purpose of illustration. In practice, you might prefer something more subtle, like Color/gray-8j2b. If you don’t specify a color, the method uses a semi-transparent black."
  },
  {
    "title": "sensoryFeedback(trigger:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/sensoryfeedback(trigger:_:)",
    "html": "Parameters\ntrigger\n\nA value to monitor for changes to determine when to play.\n\nfeedback\n\nA closure to determine whether to play the feedback and what type of feedback to play when trigger changes.\n\nDiscussion\n\nFor example, you could play different feedback for different state transitions:\n\nstruct MyView: View {\n    @State private var phase = Phase.inactive\n\n\n    var body: some View {\n        ContentView(phase: $phase)\n            .sensoryFeedback(trigger: phase) { old, new in\n                switch (old, new) {\n                    case (.inactive, _): return .success\n                    case (_, .expanded): return .impact\n                    default: return nil\n                }\n            }\n    }\n\n\n    enum Phase {\n        case inactive\n        case preparing\n        case active\n        case expanded\n    }\n}\n"
  },
  {
    "title": "shortcutsLinkStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/shortcutslinkstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to set.\n\nReturn Value\n\nA view that uses the specified shortcuts button style on its child views."
  },
  {
    "title": "simultaneousGesture(_:including:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/simultaneousgesture(_:including:)",
    "html": "Parameters\ngesture\n\nA gesture to attach to the view.\n\nmask\n\nA value that controls how adding this gesture to the view affects other gestures recognized by the view and its subviews. Defaults to SwiftUI/GestureMask/all.\n\nDiscussion\n\nUse this method when you need to define and process a view specific gesture simultaneously with the same priority as the view’s existing gestures. The example below defines a custom gesture that prints a message to the console and attaches it to the view’s VStack. Inside the VStack is a red heart Image defines its own TapGesture handler that also prints a message to the console and a blue rectangle with no custom gesture handlers.\n\nTapping or clicking the “heart” image sends two messages to the console: one for the image’s tap gesture handler, and the other from a custom gesture handler attached to the enclosing vertical stack. Tapping or clicking on the blue rectangle results only in the single message to the console from the tap recognizer attached to the VStack:\n\nstruct SimultaneousGestureExample: View {\n    @State private var message = \"Message\"\n    let newGesture = TapGesture().onEnded {\n        print(\"Gesture on VStack.\")\n    }\n\n\n    var body: some View {\n        VStack(spacing:25) {\n            Image(systemName: \"heart.fill\")\n                .resizable()\n                .frame(width: 75, height: 75)\n                .padding()\n                .foregroundColor(.red)\n                .onTapGesture {\n                    print(\"Gesture on image.\")\n                }\n            Rectangle()\n                .fill(Color.blue)\n        }\n        .simultaneousGesture(newGesture)\n        .frame(width: 200, height: 200)\n        .border(Color.purple)\n    }\n}\n"
  },
  {
    "title": "speechAdjustedPitch(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/speechadjustedpitch(_:)",
    "html": "Parameters\nvalue\n\nThe amount to raise or lower the pitch. Values between -1 and 0 result in a lower pitch while values between 0 and 1 result in a higher pitch. The method clamps values to the range -1 to 1.\n\nDiscussion\n\nUse this modifier when you want to change the pitch of spoken text. The value indicates how much higher or lower to change the pitch."
  },
  {
    "title": "speechAlwaysIncludesPunctuation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/speechalwaysincludespunctuation(_:)",
    "html": "Parameters\nvalue\n\nA Boolean value that you set to true if VoiceOver should speak all punctuation in the text. Defaults to true.\n\nDiscussion\n\nUse this modifier to control whether the system speaks punctuation characters in the text. You might use this for code or other text where the punctuation is relevant, or where you want VoiceOver to speak a verbatim transcription of the text you provide. For example, given the text:\n\nText(\"All the world's a stage, \" +\n     \"And all the men and women merely players;\")\n     .speechAlwaysIncludesPunctuation()\n\n\nVoiceOver would speak “All the world apostrophe s a stage comma and all the men and women merely players semicolon”.\n\nBy default, VoiceOver voices punctuation based on surrounding context."
  },
  {
    "title": "speechAnnouncementsQueued(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/speechannouncementsqueued(_:)",
    "html": "Parameters\nvalue\n\nA Boolean value that determines if VoiceOver speaks changes to text immediately or enqueues them behind existing speech. Defaults to true.\n\nDiscussion\n\nUse this modifier when you want affect the order in which the accessibility system delivers spoken text. Announcements can occur automatically when the label or value of an accessibility element changes."
  },
  {
    "title": "searchable(text:tokens:suggestedTokens:placement:prompt:token:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-59z0d",
    "html": "Parameters\ntext\n\nThe text to display and edit in the search field.\n\ntokens\n\nA collection of tokens to display and edit in the search field.\n\nsuggestedTokens\n\nA collection of tokens to display as suggestions.\n\nplacement\n\nThe preferred placement of the search field within the containing view hierarchy.\n\nprompt\n\nA string representing the prompt of the search field which provides users with guidance on what to search for.\n\ntoken\n\nA view builder that creates a view given an element in tokens.\n\nDiscussion\n\nFor more information about using searchable modifiers, see doc:Adding-a-search-interface-to-your-app."
  },
  {
    "title": "speechSpellsOutCharacters(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/speechspellsoutcharacters(_:)",
    "html": "Parameters\nvalue\n\nA Boolean value that when true indicates VoiceOver should speak text as individual characters. Defaults to true.\n\nDiscussion\n\nUse this modifier when you want VoiceOver to speak text as individual letters, character by character. This is important for text that is not meant to be spoken together, like:\n\nAn acronym that isn’t a word, like APPL, spoken as “A-P-P-L”.\n\nA number representing a series of digits, like 25, spoken as “two-five” rather than “twenty-five”."
  },
  {
    "title": "shadow(color:radius:x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/shadow(color:radius:x:y:)",
    "html": "Parameters\ncolor\n\nThe shadow’s color.\n\nradius\n\nA measure of how much to blur the shadow. Larger values result in more blur.\n\nx\n\nAn amount to offset the shadow horizontally from the view.\n\ny\n\nAn amount to offset the shadow vertically from the view.\n\nReturn Value\n\nA view that adds a shadow to this view.\n\nDiscussion\n\nUse this modifier to add a shadow of a specified color behind a view. You can offset the shadow from its view independently in the horizontal and vertical dimensions using the x and y parameters. You can also blur the edges of the shadow using the radius parameter. Use a radius of zero to create a sharp shadow. Larger radius values produce softer shadows.\n\nThe example below creates a grid of boxes with varying offsets and blur. Each box displays its radius and offset values for reference.\n\nstruct Shadow: View {\n    let steps = [0, 5, 10]\n\n\n    var body: some View {\n        VStack(spacing: 50) {\n            ForEach(steps, id: \\.self) { offset in\n                HStack(spacing: 50) {\n                    ForEach(steps, id: \\.self) { radius in\n                        Color.blue\n                            .shadow(\n                                color: .primary,\n                                radius: CGFloat(radius),\n                                x: CGFloat(offset), y: CGFloat(offset))\n                            .overlay {\n                                VStack {\n                                    Text(\"\\(radius)\")\n                                    Text(\"(\\(offset), \\(offset))\")\n                                }\n                            }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nThe example above uses Color/primary as the color to make the shadow easy to see for the purpose of illustration. In practice, you might prefer something more subtle, like Color/gray-8j2b. If you don’t specify a color, the method uses a semi-transparent black."
  },
  {
    "title": "springLoadingBehavior(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/springloadingbehavior(_:)",
    "html": "Parameters\nbehavior\n\nWhether spring loading is enabled or not. If unspecified, the default behavior is .automatic.\n\nDiscussion\n\nSpring loading refers to a view being activated during a drag and drop interaction. On iOS this can occur when pausing briefly on top of a view with dragged content. On macOS this can occur with similar brief pauses or on pressure-sensitive systems by “force clicking” during the drag. This has no effect on tvOS or watchOS.\n\nThis is commonly used with views that have a navigation or presentation effect, allowing the destination to be revealed without pausing the drag interaction. For example, a button that reveals a list of folders that a dragged item can be dropped onto.\n\nButton {\n    showFolders = true\n} label: {\n    Label(\"Show Folders\", systemImage: \"folder\")\n}\n.springLoadingBehavior(.enabled)\n\n\nUnlike disabled(_:), this modifier overrides the value set by an ancestor view rather than being unioned with it. For example, the below button would allow spring loading:\n\nHStack {\n    Button {\n        showFolders = true\n    } label: {\n        Label(\"Show Folders\", systemImage: \"folder\")\n    }\n    .springLoadingBehavior(.enabled)\n\n\n    ...\n}\n.springLoadingBehavior(.disabled)\n"
  },
  {
    "title": "speechAdjustedPitch(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/speechadjustedpitch(_:)",
    "html": "Parameters\nvalue\n\nThe amount to raise or lower the pitch. Values between -1 and 0 result in a lower pitch while values between 0 and 1 result in a higher pitch. The method clamps values to the range -1 to 1.\n\nDiscussion\n\nUse this modifier when you want to change the pitch of spoken text. The value indicates how much higher or lower to change the pitch."
  },
  {
    "title": "sensoryFeedback(trigger:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/sensoryfeedback(trigger:_:)",
    "html": "Parameters\ntrigger\n\nA value to monitor for changes to determine when to play.\n\nfeedback\n\nA closure to determine whether to play the feedback and what type of feedback to play when trigger changes.\n\nDiscussion\n\nFor example, you could play different feedback for different state transitions:\n\nstruct MyView: View {\n    @State private var phase = Phase.inactive\n\n\n    var body: some View {\n        ContentView(phase: $phase)\n            .sensoryFeedback(trigger: phase) { old, new in\n                switch (old, new) {\n                    case (.inactive, _): return .success\n                    case (_, .expanded): return .impact\n                    default: return nil\n                }\n            }\n    }\n\n\n    enum Phase {\n        case inactive\n        case preparing\n        case active\n        case expanded\n    }\n}\n"
  },
  {
    "title": "selectionDisabled(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/selectiondisabled(_:)",
    "html": "Parameters\nisDisabled\n\nA Boolean value that determines whether users can select this view.\n\nDiscussion\n\nUse this modifier to control the selectability of views in selectable containers like List or Table. In the example, below, the user can’t select the first item in the list.\n\n@Binding var selection: Item.ID?\n@Binding var items: [Item]\n\n\nvar body: some View {\n    List(selection: $selection) {\n        ForEach(items) { item in\n            ItemView(item: item)\n                .selectionDisabled(item.id == items.first?.id)\n        }\n    }\n}\n\n\nYou can also use this modifier to specify the selectability of views within a Picker. The following example represents a flavor picker that disables selection on flavors that are unavailable.\n\nPicker(\"Flavor\", selection: $selectedFlavor) {\n    ForEach(Flavor.allCases) { flavor in\n        Text(flavor.rawValue.capitalized)\n            .selectionDisabled(isSoldOut(flavor))\n    }\n}\n"
  },
  {
    "title": "speechAnnouncementsQueued(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/speechannouncementsqueued(_:)",
    "html": "Parameters\nvalue\n\nA Boolean value that determines if VoiceOver speaks changes to text immediately or enqueues them behind existing speech. Defaults to true.\n\nDiscussion\n\nUse this modifier when you want affect the order in which the accessibility system delivers spoken text. Announcements can occur automatically when the label or value of an accessibility element changes."
  },
  {
    "title": "strikethrough(_:pattern:color:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/strikethrough(_:pattern:color:)",
    "html": "Parameters\nisActive\n\nA Boolean value that indicates whether strikethrough is added. The default value is true.\n\npattern\n\nThe pattern of the line. The default value is solid.\n\ncolor\n\nThe color of the strikethrough. If color is nil, the strikethrough uses the default foreground color.\n\nReturn Value\n\nA view where text has a line through its center."
  },
  {
    "title": "statusBarHidden(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/statusbarhidden(_:)",
    "html": "Parameters\nhidden\n\nA Boolean value that indicates whether to hide the status bar."
  },
  {
    "title": "toolbar(_:for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbar(_:for:)",
    "html": "Parameters\nvisibility\n\nThe preferred visibility of the bar.\n\nbars\n\nThe bars to update the visibility of or ToolbarPlacement/automatic if empty.\n\nDiscussion\n\nThe preferred visibility flows up to the nearest container that renders a bar. This could be a NavigationView or TabView in iOS, or the root view of a WindowGroup in macOS.\n\nThis examples shows a view that hides the navigation bar.\n\nNavigationView {\n    ContentView()\n        .toolbar(.hidden)\n}\n\n\nYou can provide multiple ToolbarPlacement instances to hide multiple bars at once.\n\nTabView {\n    NavigationView {\n        ContentView()\n            .toolbar(\n                .hidden, for: .navigationBar, .tabBar)\n    }\n}\n\n\nNote\n\nIn macOS, if you provide ToolbarCommands to the scene of your app, this modifier disables the toolbar visibility command while the value of the modifier is not ToolbarPlacement/automatic.\n\nDepending on the specified bars, the requested visibility may not be able to be fullfilled."
  },
  {
    "title": "symbolEffect(_:options:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/symboleffect(_:options:value:)",
    "html": "Parameters\neffect\n\nA symbol effect to add to the view. Existing effects added by ancestors of the view are preserved, but may be overridden by the new effect. Added effects will be applied to the ``SwiftUI/Image` views contained by the child view.\n\nvalue\n\nthe value to monitor for changes, the animation is triggered each time the value changes.\n\nReturn Value\n\na copy of the view with a symbol effect added.\n\nDiscussion\n\nThe following example adds a bounce effect to two symbol images, the animation will play each time counter changes:\n\nVStack {\n    Image(systemName: \"bolt.slash.fill\")\n    Image(systemName: \"folder.fill.badge.person.crop\")\n}\n.symbolEffect(.bounce, value: counter)\n"
  },
  {
    "title": "statusBarHidden(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/statusbarhidden(_:)",
    "html": "Parameters\nhidden\n\nA Boolean value that indicates whether to hide the status bar."
  },
  {
    "title": "tabItem(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/tabitem(_:)",
    "html": "Parameters\nlabel\n\nThe tab bar item to associate with this view.\n\nDiscussion\n\nUse tabItem(_:) to configure a view as a tab bar item in a TabView. The example below adds two views as tabs in a TabView:\n\nstruct View1: View {\n    var body: some View {\n        Text(\"View 1\")\n    }\n}\n\n\nstruct View2: View {\n    var body: some View {\n        Text(\"View 2\")\n    }\n}\n\n\nstruct TabItem: View {\n    var body: some View {\n        TabView {\n            View1()\n                .tabItem {\n                    Label(\"Menu\", systemImage: \"list.dash\")\n                }\n\n\n            View2()\n                .tabItem {\n                    Label(\"Order\", systemImage: \"square.and.pencil\")\n                }\n        }\n    }\n}\n"
  },
  {
    "title": "symbolVariant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/symbolvariant(_:)",
    "html": "Parameters\nvariant\n\nThe variant to use for symbols. Use the values in SymbolVariants.\n\nReturn Value\n\nA view that applies the specified symbol variant or variants to itself and its child views.\n\nDiscussion\n\nWhen you want all the SF Symbols in a part of your app’s user interface to use the same variant, use the symbolVariant(_:) modifier with a SymbolVariants value, like SymbolVariants/fill-swift.type.property:\n\nVStack(spacing: 20) {\n    HStack(spacing: 20) {\n        Image(systemName: \"person\")\n        Image(systemName: \"folder\")\n        Image(systemName: \"gearshape\")\n        Image(systemName: \"list.bullet\")\n    }\n\n\n    HStack(spacing: 20) {\n        Image(systemName: \"person\")\n        Image(systemName: \"folder\")\n        Image(systemName: \"gearshape\")\n        Image(systemName: \"list.bullet\")\n    }\n    .symbolVariant(.fill) // Shows filled variants, when available.\n}\n\n\nA symbol that doesn’t have the specified variant remains unaffected. In the example above, the list.bullet symbol doesn’t have a filled variant, so the symbolVariant(_:) modifer has no effect.\n\nIf you apply the modifier more than once, its effects accumulate. Alternatively, you can apply multiple variants in one call:\n\nLabel(\"Airplane\", systemImage: \"airplane.circle.fill\")\n\n\nLabel(\"Airplane\", systemImage: \"airplane\")\n    .symbolVariant(.circle)\n    .symbolVariant(.fill)\n\n\nLabel(\"Airplane\", systemImage: \"airplane\")\n    .symbolVariant(.circle.fill)\n\n\nAll of the labels in the code above produce the same output:\n\nYou can apply all these variants in any order, but if you apply more than one shape variant, the one closest to the symbol takes precedence. For example, the following image uses the SymbolVariants/square-swift.type.property shape:\n\nImage(systemName: \"arrow.left\")\n    .symbolVariant(.square) // This shape takes precedence.\n    .symbolVariant(.circle)\n    .symbolVariant(.fill)\n\n\nTo cause a symbol to ignore the variants currently in the environment, directly set the EnvironmentValues/symbolVariants environment value to SymbolVariants/none using the View/environment(_:_:) modifer."
  },
  {
    "title": "symbolEffectsRemoved(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/symboleffectsremoved(_:)",
    "html": "Parameters\nisEnabled\n\nWhether to remove inherited symbol effects or not.\n\nReturn Value\n\na copy of the view with its symbol effects either removed or left unchanged.\n\nDiscussion\n\nThe following example adds a repeating pulse effect to two symbol images, but then disables the effect on one of them:\n\nVStack {\n    Image(systemName: \"bolt.slash.fill\") // does not pulse\n        .symbolEffectsRemoved()\n    Image(systemName: \"folder.fill.badge.person.crop\") // pulses\n}\n.symbolEffect(.pulse)\n"
  },
  {
    "title": "symbolRenderingMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/symbolrenderingmode(_:)",
    "html": "Parameters\nmode\n\nThe symbol rendering mode to use.\n\nReturn Value\n\nA view that uses the rendering mode you supply."
  },
  {
    "title": "strikethrough(_:pattern:color:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/strikethrough(_:pattern:color:)",
    "html": "Parameters\nisActive\n\nA Boolean value that indicates whether strikethrough is added. The default value is true.\n\npattern\n\nThe pattern of the line. The default value is solid.\n\ncolor\n\nThe color of the strikethrough. If color is nil, the strikethrough uses the default foreground color.\n\nReturn Value\n\nA view where text has a line through its center."
  },
  {
    "title": "tabViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/tabviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to apply to this tab view."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(withresolvers:mappingtransform:)-wpei",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(mappingtransform:)-xvws",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "submitScope(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/submitscope(_:)",
    "html": "Parameters\nisBlocking\n\nA Boolean that indicates whether this scope is actively blocking submission triggers from reaching higher submission actions.\n\nDiscussion\n\nUse this modifier when you want to avoid specific views from initiating a submission action configured by the View/onSubmit(of:_:) modifier. In the example below, the tag field doesn’t trigger the submission of the form:\n\nForm {\n    TextField(\"Username\", text: $viewModel.userName)\n    SecureField(\"Password\", text: $viewModel.password)\n\n\n    TextField(\"Tags\", text: $viewModel.tags)\n        .submitScope()\n}\n.onSubmit {\n    guard viewModel.validate() else { return }\n    viewModel.login()\n}\n"
  },
  {
    "title": "swipeActions(edge:allowsFullSwipe:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/swipeactions(edge:allowsfullswipe:content:)",
    "html": "Parameters\nedge\n\nThe edge of the view to associate the swipe actions with. The default is HorizontalEdge/trailing.\n\nallowsFullSwipe\n\nA Boolean value that indicates whether a full swipe automatically performs the first action. The default is true.\n\ncontent\n\nThe content of the swipe actions.\n\nDiscussion\n\nUse this method to add swipe actions to a view that acts as a row in a list. Indicate the HorizontalEdge where the swipe action originates, and define individual actions with Button instances. For example, if you have a list of messages, you can add an action to toggle a message as unread on a swipe from the leading edge, and actions to delete or flag messages on a trailing edge swipe:\n\nList {\n    ForEach(store.messages) { message in\n        MessageCell(message: message)\n            .swipeActions(edge: .leading) {\n                Button { store.toggleUnread(message) } label: {\n                    if message.isUnread {\n                        Label(\"Read\", systemImage: \"envelope.open\")\n                    } else {\n                        Label(\"Unread\", systemImage: \"envelope.badge\")\n                    }\n                }\n            }\n            .swipeActions(edge: .trailing) {\n                Button(role: .destructive) {\n                    store.delete(message)\n                } label: {\n                    Label(\"Delete\", systemImage: \"trash\")\n                }\n                Button { store.flag(message) } label: {\n                    Label(\"Flag\", systemImage: \"flag\")\n                }\n            }\n        }\n    }\n}\n\n\nActions appear in the order you list them, starting from the swipe’s originating edge. In the example above, the Delete action appears closest to the screen’s trailing edge:\n\nFor labels or images that appear in swipe actions, SwiftUI automatically applies the SymbolVariants/fill-swift.type.property symbol variant, as shown above.\n\nBy default, the user can perform the first action for a given swipe direction with a full swipe. For the example above, the user can perform both the toggle unread and delete actions with full swipes. You can opt out of this behavior for an edge by setting the allowsFullSwipe parameter to false. For example, you can disable the full swipe on the leading edge:\n\n.swipeActions(edge: .leading, allowsFullSwipe: false) {\n    Button { store.toggleUnread(message) } label: {\n        if message.isUnread {\n            Label(\"Read\", systemImage: \"envelope.open\")\n        } else {\n            Label(\"Unread\", systemImage: \"envelope.badge\")\n        }\n    }\n}\n\n\nWhen you set a role for a button using one of the values from the ButtonRole enumeration, SwiftUI styles the button according to its role. In the example above, the delete action appears in ShapeStyle/red because it has the ButtonRole/destructive role. If you want to set a different color — for example, to match the overall theme of your app’s UI — add the View/tint(_:) modifier to the button:\n\nMessageCell(message: message)\n    .swipeActions(edge: .leading) {\n        Button { store.toggleUnread(message) } label: {\n            if message.isUnread {\n                Label(\"Read\", systemImage: \"envelope.open\")\n            } else {\n                Label(\"Unread\", systemImage: \"envelope.badge\")\n            }\n        }\n        .tint(.blue)\n    }\n    .swipeActions(edge: .trailing) {\n        Button(role: .destructive) { store.delete(message) } label: {\n            Label(\"Delete\", systemImage: \"trash\")\n        }\n        Button { store.flag(message) } label: {\n            Label(\"Flag\", systemImage: \"flag\")\n        }\n        .tint(.orange)\n    }\n\n\nThe modifications in the code above make the toggle unread action ShapeStyle/blue and the flag action ShapeStyle/orange:\n\nWhen you add swipe actions, SwiftUI no longer synthesizes the Delete actions that otherwise appear when using the ForEach/onDelete(perform:) method on a ForEach instance. You become responsible for creating a Delete action, if appropriate, among your swipe actions.\n\nActions accumulate for a given edge if you call the modifier multiple times on the same list row view."
  },
  {
    "title": "symbolEffect(_:options:isActive:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/symboleffect(_:options:isactive:)",
    "html": "Parameters\neffect\n\nA symbol effect to add to the view. Existing effects added by ancestors of the view are preserved, but may be overridden by the new effect. Added effects will be applied to the ``SwiftUI/Image` views contained by the child view.\n\nisActive\n\nwhether the effect is active or inactive.\n\nReturn Value\n\na copy of the view with a symbol effect added.\n\nDiscussion\n\nThe following example adds a repeating pulse effect to two symbol images:\n\nVStack {\n    Image(systemName: \"bolt.slash.fill\")\n    Image(systemName: \"folder.fill.badge.person.crop\")\n}\n.symbolEffect(.pulse)\n"
  },
  {
    "title": "task(id:priority:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/task(id:priority:_:)",
    "html": "Parameters\nid\n\nThe value to observe for changes. The value must conform to the Equatable protocol.\n\npriority\n\nThe task priority to use when creating the asynchronous task. The default priority is userInitiated.\n\naction\n\nA closure that SwiftUI calls as an asynchronous task before the view appears. SwiftUI can automatically cancel the task after the view disappears before the action completes. If the id value changes, SwiftUI cancels and restarts the task.\n\nReturn Value\n\nA view that runs the specified action asynchronously before the view appears, or restarts the task when the id value changes.\n\nDiscussion\n\nThis method behaves like View/task(priority:_:), except that it also cancels and recreates the task when a specified value changes. To detect a change, the modifier tests whether a new value for the id parameter equals the previous value. For this to work, the value’s type must conform to the Equatable protocol.\n\nFor example, if you define an equatable Server type that posts custom notifications whenever its state changes — for example, from signed out to signed in — you can use the task modifier to update the contents of a Text view to reflect the state of the currently selected server:\n\nText(status ?? \"Signed Out\")\n    .task(id: server) {\n        let sequence = NotificationCenter.default.notifications(\n            named: .didUpdateStatus,\n            object: server\n        ).compactMap {\n            $0.userInfo?[\"status\"] as? String\n        }\n        for await value in sequence {\n            status = value\n        }\n    }\n\n\nThis example uses the notifications(named:object:) method to create an asynchronous sequence of notifications, given by an AsyncSequence instance. The example then maps the notification sequence to a sequence of strings that correspond to values stored with each notification.\n\nElsewhere, the server defines a custom didUpdateStatus notification:\n\nextension NSNotification.Name {\n    static var didUpdateStatus: NSNotification.Name {\n        NSNotification.Name(\"didUpdateStatus\")\n    }\n}\n\n\nWhenever the server status changes, like after the user signs in, the server posts a notification of this custom type:\n\nlet notification = Notification(\n    name: .didUpdateStatus,\n    object: self,\n    userInfo: [\"status\": \"Signed In\"])\nNotificationCenter.default.post(notification)\n\n\nThe task attached to the Text view gets and displays the status value from the notification’s user information dictionary. When the user chooses a different server, SwiftUI cancels the task and creates a new one, which then waits for notifications from the new server."
  },
  {
    "title": "symbolVariant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/symbolvariant(_:)",
    "html": "Parameters\nvariant\n\nThe variant to use for symbols. Use the values in SymbolVariants.\n\nReturn Value\n\nA view that applies the specified symbol variant or variants to itself and its child views.\n\nDiscussion\n\nWhen you want all the SF Symbols in a part of your app’s user interface to use the same variant, use the symbolVariant(_:) modifier with a SymbolVariants value, like SymbolVariants/fill-swift.type.property:\n\nVStack(spacing: 20) {\n    HStack(spacing: 20) {\n        Image(systemName: \"person\")\n        Image(systemName: \"folder\")\n        Image(systemName: \"gearshape\")\n        Image(systemName: \"list.bullet\")\n    }\n\n\n    HStack(spacing: 20) {\n        Image(systemName: \"person\")\n        Image(systemName: \"folder\")\n        Image(systemName: \"gearshape\")\n        Image(systemName: \"list.bullet\")\n    }\n    .symbolVariant(.fill) // Shows filled variants, when available.\n}\n\n\nA symbol that doesn’t have the specified variant remains unaffected. In the example above, the list.bullet symbol doesn’t have a filled variant, so the symbolVariant(_:) modifer has no effect.\n\nIf you apply the modifier more than once, its effects accumulate. Alternatively, you can apply multiple variants in one call:\n\nLabel(\"Airplane\", systemImage: \"airplane.circle.fill\")\n\n\nLabel(\"Airplane\", systemImage: \"airplane\")\n    .symbolVariant(.circle)\n    .symbolVariant(.fill)\n\n\nLabel(\"Airplane\", systemImage: \"airplane\")\n    .symbolVariant(.circle.fill)\n\n\nAll of the labels in the code above produce the same output:\n\nYou can apply all these variants in any order, but if you apply more than one shape variant, the one closest to the symbol takes precedence. For example, the following image uses the SymbolVariants/square-swift.type.property shape:\n\nImage(systemName: \"arrow.left\")\n    .symbolVariant(.square) // This shape takes precedence.\n    .symbolVariant(.circle)\n    .symbolVariant(.fill)\n\n\nTo cause a symbol to ignore the variants currently in the environment, directly set the EnvironmentValues/symbolVariants environment value to SymbolVariants/none using the View/environment(_:_:) modifer."
  },
  {
    "title": "tag(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/tag(_:)",
    "html": "Parameters\ntag\n\nA Hashable value to use as the view’s tag.\n\nReturn Value\n\nA view with the specified tag set.\n\nDiscussion\n\nUse this modifier to differentiate among certain selectable views, like the possible values of a Picker or the tabs of a TabView. Tag values can be of any type that conforms to the Hashable protocol.\n\nIn the example below, the ForEach loop in the Picker view builder iterates over the Flavor enumeration. It extracts the string value of each enumeration element for use in constructing the row label, and uses the enumeration value, cast as an optional, as input to the tag(_:) modifier. The Picker requires the tags to have a type that exactly matches the selection type, which in this case is an optional Flavor.\n\nstruct FlavorPicker: View {\n    enum Flavor: String, CaseIterable, Identifiable {\n        case chocolate, vanilla, strawberry\n        var id: Self { self }\n    }\n\n\n    @State private var selectedFlavor: Flavor? = nil\n\n\n    var body: some View {\n        Picker(\"Flavor\", selection: $selectedFlavor) {\n            ForEach(Flavor.allCases) { flavor in\n                Text(flavor.rawValue).tag(Optional(flavor))\n            }\n        }\n    }\n}\n\n\nIf you change selectedFlavor to be non-optional, you need to remove the Optional cast from the tag input to match.\n\nA ForEach automatically applies a default tag to each enumerated view using the id parameter of the corresponding element. If the element’s id parameter and the picker’s selection input have exactly the same type, you can omit the explicit tag modifier. To see examples that don’t require an explicit tag, see Picker."
  },
  {
    "title": "task(priority:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/task(priority:_:)",
    "html": "Parameters\npriority\n\nThe task priority to use when creating the asynchronous task. The default priority is userInitiated.\n\naction\n\nA closure that SwiftUI calls as an asynchronous task before the view appears. SwiftUI will automatically cancel the task at some point after the view disappears before the action completes.\n\nReturn Value\n\nA view that runs the specified action asynchronously before the view appears.\n\nDiscussion\n\nUse this modifier to perform an asynchronous task with a lifetime that matches that of the modified view. If the task doesn’t finish before SwiftUI removes the view or the view changes identity, SwiftUI cancels the task.\n\nUse the await keyword inside the task to wait for an asynchronous call to complete, or to wait on the values of an AsyncSequence instance. For example, you can modify a Text view to start a task that loads content from a remote resource:\n\nlet url = URL(string: \"https://example.com\")!\n@State private var message = \"Loading...\"\n\n\nvar body: some View {\n    Text(message)\n        .task {\n            do {\n                var receivedLines = [String]()\n                for try await line in url.lines {\n                    receivedLines.append(line)\n                    message = \"Received \\(receivedLines.count) lines\"\n                }\n            } catch {\n                message = \"Failed to load\"\n            }\n        }\n}\n\n\nThis example uses the lines method to get the content stored at the specified URL as an asynchronous sequence of strings. When each new line arrives, the body of the for-await-in loop stores the line in an array of strings and updates the content of the text view to report the latest line count."
  },
  {
    "title": "symbolRenderingMode(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/symbolrenderingmode(_:)",
    "html": "Parameters\nmode\n\nThe symbol rendering mode to use.\n\nReturn Value\n\nA view that uses the rendering mode you supply."
  },
  {
    "title": "symbolEffectsRemoved(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/symboleffectsremoved(_:)",
    "html": "Parameters\nisEnabled\n\nWhether to remove inherited symbol effects or not.\n\nReturn Value\n\na copy of the view with its symbol effects either removed or left unchanged.\n\nDiscussion\n\nThe following example adds a repeating pulse effect to two symbol images, but then disables the effect on one of them:\n\nVStack {\n    Image(systemName: \"bolt.slash.fill\") // does not pulse\n        .symbolEffectsRemoved()\n    Image(systemName: \"folder.fill.badge.person.crop\") // pulses\n}\n.symbolEffect(.pulse)\n"
  },
  {
    "title": "tabViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/tabviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to apply to this tab view."
  },
  {
    "title": "textCase(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/textcase(_:)",
    "html": "Parameters\ntextCase\n\nOne of the Text/Case enumerations; the default is nil.\n\nReturn Value\n\nA view that transforms the case of the text.\n\nDiscussion\n\nThe default value is nil, displaying the text without any case changes."
  },
  {
    "title": "textInputAutocapitalization(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/textinputautocapitalization(_:)",
    "html": "Parameters\nautocapitalization\n\nOne of the capitalizing behaviors defined in the TextInputAutocapitalization struct or nil.\n\nDiscussion\n\nUse textInputAutocapitalization(_:) when you need to automatically capitalize words, sentences, or other text like proper nouns.\n\nIn example below, as the user enters text the shift key is automatically enabled before every word:\n\nTextField(\"Last, First\", text: $fullName)\n    .textInputAutocapitalization(.words)\n\n\nThe TextInputAutocapitalization struct defines the available autocapitalizing behavior. Providing nil to this view modifier does not change the autocapitalization behavior. The default is TextInputAutocapitalization.sentences."
  },
  {
    "title": "textScale(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/textscale(_:isenabled:)",
    "html": "Parameters\nscale\n\nThe text scale to apply.\n\nisEnabled\n\nIf true the text scale is applied; otherwise text scale is unchanged.\n\nReturn Value\n\nA view with the specified text scale applied."
  },
  {
    "title": "textSelection(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/textselection(_:)",
    "html": "Discussion\n\nPeople sometimes need to copy useful information from Text views — including error messages, serial numbers, or IP addresses — so they can then paste the text into another context. Enable text selection to let people select text in a platform-appropriate way.\n\nYou can apply this method to an individual text view, or to a container to make each contained text view selectable. In the following example, the person using the app can select text that shows the date of an event or the name or email of any of the event participants:\n\nvar body: some View {\n    VStack {\n        Text(\"Event Invite\")\n            .font(.title)\n        Text(invite.date.formatted(date: .long, time: .shortened))\n            .textSelection(.enabled)\n\n\n        List(invite.recipients) { recipient in\n            VStack (alignment: .leading) {\n                Text(recipient.name)\n                Text(recipient.email)\n                    .foregroundStyle(.secondary)\n            }\n        }\n        .textSelection(.enabled)\n    }\n    .navigationTitle(\"New Invitation\")\n}\n\n\nOn macOS, people use the mouse or trackpad to select a range of text, which they can quickly copy by choosing Edit > Copy, or with the standard keyboard shortcut.\n\nOn iOS, the person using the app touches and holds on a selectable Text view, which brings up a system menu with menu items appropriate for the current context. These menu items operate on the entire contents of the Text view; the person can’t select a range of text like they can on macOS.\n\nNote\n\nButton views don’t support text selection."
  },
  {
    "title": "tint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/tint(_:)",
    "html": "Parameters\ntint\n\nThe tint Color to apply.\n\nDiscussion\n\nUse this method to override the default accent color for this view. Unlike an app’s accent color, which can be overridden by user preference, the tint color is always respected and should be used as a way to provide additional meaning to the control.\n\nThis example shows Answer and Decline buttons with ShapeStyle/green and ShapeStyle/red tint colors, respectively.\n\nstruct ControlTint: View {\n    var body: some View {\n        HStack {\n            Button {\n                // Answer the call\n            } label: {\n                Label(\"Answer\", systemImage: \"phone\")\n            }\n            .tint(.green)\n            Button {\n                // Decline the call\n            } label: {\n                Label(\"Decline\", systemImage: \"phone.down\")\n            }\n            .tint(.red)\n        }\n        .padding()\n    }\n}\n"
  },
  {
    "title": "toggleStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/togglestyle(_:)",
    "html": "Parameters\nstyle\n\nThe toggle style to set. Use one of the built-in values, like ToggleStyle/switch or ToggleStyle/button, or a custom style that you define by creating a type that conforms to the ToggleStyle protocol.\n\nReturn Value\n\nA view that uses the specified toggle style for itself and its child views.\n\nDiscussion\n\nUse this modifier on a Toggle instance to set a style that defines the control’s appearance and behavior. For example, you can choose the ToggleStyle/switch style:\n\nToggle(\"Vibrate on Ring\", isOn: $vibrateOnRing)\n    .toggleStyle(.switch)\n\n\nBuilt-in styles typically have a similar appearance across platforms, tailored to the platform’s overall style:\n\nPlatform\n\n\t\n\nAppearance\n\n\n\n\niOS, iPadOS\n\n\t\n\n\n\n\nmacOS\n\n\t\n\nStyling toggles in a hierarchy\n\nYou can set a style for all toggle instances within a view hierarchy by applying the style modifier to a container view. For example, you can apply the ToggleStyle/button style to an HStack:\n\nHStack {\n    Toggle(isOn: $isFlagged) {\n        Label(\"Flag\", systemImage: \"flag.fill\")\n    }\n    Toggle(isOn: $isMuted) {\n        Label(\"Mute\", systemImage: \"speaker.slash.fill\")\n    }\n}\n.toggleStyle(.button)\n\n\nThe example above has the following appearance when isFlagged is true and isMuted is false:\n\nPlatform\n\n\t\n\nAppearance\n\n\n\n\niOS, iPadOS\n\n\t\n\n\n\n\nmacOS\n\n\t\n\nAutomatic styling\n\nIf you don’t set a style, SwiftUI assumes a value of ToggleStyle/automatic, which corresponds to a context-specific default. Specify the automatic style explicitly to override a container’s style and revert to the default:\n\nHStack {\n    Toggle(isOn: $isShuffling) {\n        Label(\"Shuffle\", systemImage: \"shuffle\")\n    }\n    Toggle(isOn: $isRepeating) {\n        Label(\"Repeat\", systemImage: \"repeat\")\n    }\n\n\n    Divider()\n\n\n    Toggle(\"Enhance Sound\", isOn: $isEnhanced)\n        .toggleStyle(.automatic) // Revert to the default style.\n}\n.toggleStyle(.button) // Use button style for toggles in the stack.\n.labelStyle(.iconOnly) // Omit the title from any labels.\n\n\nThe style that SwiftUI uses as the default depends on both the platform and the context. In macOS, the default in most contexts is a ToggleStyle/checkbox, while in iOS, the default toggle style is a ToggleStyle/switch:\n\nPlatform\n\n\t\n\nAppearance\n\n\n\n\niOS, iPadOS\n\n\t\n\n\n\n\nmacOS\n\n\t\n\nNote\n\nLike toggle style does for toggles, the View/labelStyle(_:) modifier sets the style for Label instances in the hierarchy. The example above demostrates the compact LabelStyle/iconOnly style, which is useful for button toggles in space-constrained contexts. Always include a descriptive title for better accessibility.\n\nFor more information about how SwiftUI chooses a default toggle style, see the ToggleStyle/automatic style."
  },
  {
    "title": "init(literalCapacity:interpolationCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/stringinterpolation/init(literalcapacity:interpolationcount:)",
    "html": "Parameters\nliteralCapacity\n\nThe approximate size of all literal segments combined. This is meant to be passed to String.reserveCapacity(_:); it may be slightly larger or smaller than the sum of the counts of each literal segment.\n\ninterpolationCount\n\nThe number of interpolations which will be appended. Use this value to estimate how much additional capacity will be needed for the interpolated segments.\n\nDiscussion\n\nDon’t call this initializer directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nSwift passes this initializer a pair of arguments specifying the size of the literal segments and the number of interpolated segments. Use this information to estimate the amount of storage you will need."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrasetoken/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrasetoken/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrasetoken/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrasetoken/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "task(id:priority:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/task(id:priority:_:)",
    "html": "Parameters\nid\n\nThe value to observe for changes. The value must conform to the Equatable protocol.\n\npriority\n\nThe task priority to use when creating the asynchronous task. The default priority is userInitiated.\n\naction\n\nA closure that SwiftUI calls as an asynchronous task before the view appears. SwiftUI can automatically cancel the task after the view disappears before the action completes. If the id value changes, SwiftUI cancels and restarts the task.\n\nReturn Value\n\nA view that runs the specified action asynchronously before the view appears, or restarts the task when the id value changes.\n\nDiscussion\n\nThis method behaves like View/task(priority:_:), except that it also cancels and recreates the task when a specified value changes. To detect a change, the modifier tests whether a new value for the id parameter equals the previous value. For this to work, the value’s type must conform to the Equatable protocol.\n\nFor example, if you define an equatable Server type that posts custom notifications whenever its state changes — for example, from signed out to signed in — you can use the task modifier to update the contents of a Text view to reflect the state of the currently selected server:\n\nText(status ?? \"Signed Out\")\n    .task(id: server) {\n        let sequence = NotificationCenter.default.notifications(\n            named: .didUpdateStatus,\n            object: server\n        ).compactMap {\n            $0.userInfo?[\"status\"] as? String\n        }\n        for await value in sequence {\n            status = value\n        }\n    }\n\n\nThis example uses the notifications(named:object:) method to create an asynchronous sequence of notifications, given by an AsyncSequence instance. The example then maps the notification sequence to a sequence of strings that correspond to values stored with each notification.\n\nElsewhere, the server defines a custom didUpdateStatus notification:\n\nextension NSNotification.Name {\n    static var didUpdateStatus: NSNotification.Name {\n        NSNotification.Name(\"didUpdateStatus\")\n    }\n}\n\n\nWhenever the server status changes, like after the user signs in, the server posts a notification of this custom type:\n\nlet notification = Notification(\n    name: .didUpdateStatus,\n    object: self,\n    userInfo: [\"status\": \"Signed In\"])\nNotificationCenter.default.post(notification)\n\n\nThe task attached to the Text view gets and displays the status value from the notification’s user information dictionary. When the user chooses a different server, SwiftUI cancels the task and creates a new one, which then waits for notifications from the new server."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysort/ordering/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "textContentType(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/textcontenttype(_:)",
    "html": "Parameters\ntextContentType\n\nOne of the content types available in the UITextContentType structure that identify the semantic meaning expected for a text-entry area. These include support for email addresses, location names, URLs, and telephone numbers, to name just a few.\n\nDiscussion\n\nUse this method to set the content type for input text. For example, you can configure a TextField for the entry of email addresses:\n\nTextField(\"Enter your email\", text: $emailAddress)\n    .textContentType(.emailAddress)\n"
  },
  {
    "title": "textCase(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/textcase(_:)",
    "html": "Parameters\ntextCase\n\nOne of the Text/Case enumerations; the default is nil.\n\nReturn Value\n\nA view that transforms the case of the text.\n\nDiscussion\n\nThe default value is nil, displaying the text without any case changes."
  },
  {
    "title": "textScale(_:isEnabled:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/textscale(_:isenabled:)",
    "html": "Parameters\nscale\n\nThe text scale to apply.\n\nisEnabled\n\nIf true the text scale is applied; otherwise text scale is unchanged.\n\nReturn Value\n\nA view with the specified text scale applied."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysort/ordering/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysort/ordering/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysort/ordering/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "sheet(item:onDismiss:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/sheet(item:ondismiss:content:)",
    "html": "Parameters\nitem\n\nA binding to an optional source of truth for the sheet. When item is non-nil, the system passes the item’s content to the modifier’s closure. You display this content in a sheet that you create that the system displays to the user. If item changes, the system dismisses the sheet and replaces it with a new one using the same process.\n\nonDismiss\n\nThe closure to execute when dismissing the sheet.\n\ncontent\n\nA closure returning the content of the sheet.\n\nDiscussion\n\nUse this method when you need to present a modal view with content from a custom data source. The example below shows a custom data source InventoryItem that the content closure uses to populate the display the action sheet shows to the user:\n\nstruct ShowPartDetail: View {\n    @State private var sheetDetail: InventoryItem?\n\n\n    var body: some View {\n        Button(\"Show Part Details\") {\n            sheetDetail = InventoryItem(\n                id: \"0123456789\",\n                partNumber: \"Z-1234A\",\n                quantity: 100,\n                name: \"Widget\")\n        }\n        .sheet(item: $sheetDetail,\n               onDismiss: didDismiss) { detail in\n            VStack(alignment: .leading, spacing: 20) {\n                Text(\"Part Number: \\(detail.partNumber)\")\n                Text(\"Name: \\(detail.name)\")\n                Text(\"Quantity On-Hand: \\(detail.quantity)\")\n            }\n            .onTapGesture {\n                sheetDetail = nil\n            }\n        }\n    }\n\n\n    func didDismiss() {\n        // Handle the dismissing action.\n    }\n}\n\n\nstruct InventoryItem: Identifiable {\n    var id: String\n    let partNumber: String\n    let quantity: Int\n    let name: String\n}\n\n\nIn vertically compact environments, such as iPhone in landscape orientation, a sheet presentation automatically adapts to appear as a full-screen cover. Use the View/presentationCompactAdaptation(_:) or View/presentationCompactAdaptation(horizontal:vertical:) modifier to override this behavior."
  },
  {
    "title": "sheet(isPresented:onDismiss:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/sheet(ispresented:ondismiss:content:)",
    "html": "Parameters\nisPresented\n\nA binding to a Boolean value that determines whether to present the sheet that you create in the modifier’s content closure.\n\nonDismiss\n\nThe closure to execute when dismissing the sheet.\n\ncontent\n\nA closure that returns the content of the sheet.\n\nDiscussion\n\nUse this method when you want to present a modal view to the user when a Boolean value you provide is true. The example below displays a modal view of the mockup for a software license agreement when the user toggles the isShowingSheet variable by clicking or tapping on the “Show License Agreement” button:\n\nstruct ShowLicenseAgreement: View {\n    @State private var isShowingSheet = false\n    var body: some View {\n        Button(action: {\n            isShowingSheet.toggle()\n        }) {\n            Text(\"Show License Agreement\")\n        }\n        .sheet(isPresented: $isShowingSheet,\n               onDismiss: didDismiss) {\n            VStack {\n                Text(\"License Agreement\")\n                    .font(.title)\n                    .padding(50)\n                Text(\"\"\"\n                        Terms and conditions go here.\n                    \"\"\")\n                    .padding(50)\n                Button(\"Dismiss\",\n                       action: { isShowingSheet.toggle() })\n            }\n        }\n    }\n\n\n    func didDismiss() {\n        // Handle the dismissing action.\n    }\n}\n\n\nIn vertically compact environments, such as iPhone in landscape orientation, a sheet presentation automatically adapts to appear as a full-screen cover. Use the View/presentationCompactAdaptation(_:) or View/presentationCompactAdaptation(horizontal:vertical:) modifier to override this behavior."
  },
  {
    "title": "appendLiteral(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/stringinterpolation/appendliteral(_:)",
    "html": "Parameters\nliteral\n\nA string literal containing the characters that appear next in the string literal.\n\nDiscussion\n\nDon’t call this method directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nInterpolated expressions don’t pass through this method; instead, Swift selects an overload of appendInterpolation. For more information, see the top-level StringInterpolationProtocol documentation."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/isbetweencomparator/init(withresolvers:mappingtransform:)",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(literalCapacity:interpolationCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/stringinterpolation/init(literalcapacity:interpolationcount:)",
    "html": "Parameters\nliteralCapacity\n\nThe approximate size of all literal segments combined. This is meant to be passed to String.reserveCapacity(_:); it may be slightly larger or smaller than the sum of the counts of each literal segment.\n\ninterpolationCount\n\nThe number of interpolations which will be appended. Use this value to estimate how much additional capacity will be needed for the interpolated segments.\n\nDiscussion\n\nDon’t call this initializer directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nSwift passes this initializer a pair of arguments specifying the size of the literal segments and the number of interpolated segments. Use this information to estimate the amount of storage you will need."
  },
  {
    "title": "statusBar(hidden:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/statusbar(hidden:)",
    "html": "Parameters\nhidden\n\nA Boolean value that indicates whether to hide the status bar.\n\nDiscussion\n\nUse statusBar(hidden:) to show or hide the status bar."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(mappingtransform:)-7rx55",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(mappingtransform:)-3xuvt",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/isbetweencomparator/init(mappingtransform:)",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(mappingtransform:)-9fn0e",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(mappingtransform:)-coon",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(withresolvers:mappingtransform:)-4482k",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(withresolvers:mappingtransform:)-3esov",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(withresolvers:mappingtransform:)-5j3ie",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "symbolEffect(_:options:value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/symboleffect(_:options:value:)",
    "html": "Parameters\neffect\n\nA symbol effect to add to the view. Existing effects added by ancestors of the view are preserved, but may be overridden by the new effect. Added effects will be applied to the ``SwiftUI/Image` views contained by the child view.\n\nvalue\n\nthe value to monitor for changes, the animation is triggered each time the value changes.\n\nReturn Value\n\na copy of the view with a symbol effect added.\n\nDiscussion\n\nThe following example adds a bounce effect to two symbol images, the animation will play each time counter changes:\n\nVStack {\n    Image(systemName: \"bolt.slash.fill\")\n    Image(systemName: \"folder.fill.badge.person.crop\")\n}\n.symbolEffect(.bounce, value: counter)\n"
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(withresolvers:mappingtransform:)-7vx0d",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(withresolvers:mappingtransform:)-83nih",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasprefixcomparator/init(withresolvers:mappingtransform:)-2n67a",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasprefixcomparator/init(mappingtransform:)-4i1bf",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasprefixcomparator/init(withresolvers:mappingtransform:)-48o75",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasprefixcomparator/init(mappingtransform:)-5kri6",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "EmptyResolverSpecification.Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/output",
    "html": "See Also\nIterating over the values\nfunc makeIterator() -> IndexingIterator<[Resolver]>\nReturns an iterator over the elements of this sequence."
  },
  {
    "title": "toolbar(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbar(content:)-20bc1",
    "html": "Parameters\ncontent\n\nThe items representing the content of the toolbar.\n\nDiscussion\n\nUse this method to populate a toolbar with a collection of views that you provide to a toolbar view builder.\n\nThe toolbar modifier expects a collection of toolbar items which you can provide either by supplying a collection of views with each view wrapped in a ToolbarItem, or by providing a collection of views as a ToolbarItemGroup. The example below uses a collection of ToolbarItem views to create a macOS toolbar that supports text editing features:\n\nstruct StructToolbarItemGroupView: View {\n    @State private var text = \"\"\n    @State private var bold = false\n    @State private var italic = false\n    @State private var fontSize = 12.0\n\n\n    var displayFont: Font {\n        let font = Font.system(size: CGFloat(fontSize),\n                               weight: bold == true ? .bold : .regular)\n        return italic == true ? font.italic() : font\n    }\n\n\n    var body: some View {\n        TextEditor(text: $text)\n            .font(displayFont)\n            .toolbar {\n                ToolbarItemGroup {\n                    Slider(\n                        value: $fontSize,\n                        in: 8...120,\n                        minimumValueLabel:\n                            Text(\"A\").font(.system(size: 8)),\n                        maximumValueLabel:\n                            Text(\"A\").font(.system(size: 16))\n                    ) {\n                        Text(\"Font Size (\\(Int(fontSize)))\")\n                    }\n                    .frame(width: 150)\n                    Toggle(isOn: $bold) {\n                        Image(systemName: \"bold\")\n                    }\n                    Toggle(isOn: $italic) {\n                        Image(systemName: \"italic\")\n                    }\n                }\n            }\n            .navigationTitle(\"My Note\")\n    }\n}\n\n\nAlthough it’s not mandatory, wrapping a related group of toolbar items together in a ToolbarItemGroup provides a one-to-one mapping between controls and toolbar items which results in the correct layout and spacing on each platform. For design guidance on toolbars for macOS apps, see macOS Human Interface Guidelines > Toolbars. For design guidance on toolbars for iOS apps, see iOS Human Interface Guidelines > Toolbars."
  },
  {
    "title": "toolbar(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/toolbar(content:)-60e73",
    "html": "Parameters\ncontent\n\nThe views representing the content of the toolbar.\n\nDiscussion\n\nUse this modifier to add content to the toolbar. The toolbar modifier expects a collection of toolbar items that you can provide either by supplying a collection of views with each view wrapped in a ToolbarItem, or by providing a collection of views as a ToolbarItemGroup. The example below adds views to using a toolbar item group to support text editing features:\n\nstruct StructToolbarItemGroupView: View {\n    @State private var text = \"\"\n    @State private var bold = false\n    @State private var italic = false\n    @State private var fontSize = 12.0\n\n\n    var displayFont: Font {\n        let font = Font.system(size: CGFloat(fontSize),\n                               weight: bold == true ? .bold : .regular)\n        return italic == true ? font.italic() : font\n    }\n\n\n    var body: some View {\n        TextEditor(text: $text)\n            .font(displayFont)\n            .toolbar {\n                ToolbarItemGroup {\n                    Slider(\n                        value: $fontSize,\n                        in: 8...120,\n                        minimumValueLabel:\n                            Text(\"A\").font(.system(size: 8)),\n                        maximumValueLabel:\n                            Text(\"A\").font(.system(size: 16))\n                    ) {\n                        Text(\"Font Size (\\(Int(fontSize)))\")\n                    }\n                    .frame(width: 150)\n                    Toggle(isOn: $bold) {\n                        Image(systemName: \"bold\")\n                    }\n                    Toggle(isOn: $italic) {\n                        Image(systemName: \"italic\")\n                    }\n                }\n            }\n            .navigationTitle(\"My Note\")\n    }\n}\n"
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "perform() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/openintent/perform()",
    "html": "Discussion\n\nIn the body of this function, validate your parameters and provide the system with information about needed parameter values or user clarification."
  },
  {
    "title": "appendInterpolation(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/stringinterpolation/appendinterpolation(_:)-47gqg",
    "html": "See Also\nAppending values to the string\nfunc appendLiteral(String)\nAppends a literal segment to the interpolation."
  },
  {
    "title": "appendLiteral(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/stringinterpolation/appendliteral(_:)",
    "html": "Parameters\nliteral\n\nA string literal containing the characters that appear next in the string literal.\n\nDiscussion\n\nDon’t call this method directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nInterpolated expressions don’t pass through this method; instead, Swift selects an overload of appendInterpolation. For more information, see the top-level StringInterpolationProtocol documentation.\n\nSee Also\nAppending values to the string\nfunc appendInterpolation(AppShortcutPhraseToken)"
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hassuffixcomparator/init(withresolvers:mappingtransform:)-7tdan",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "Sequence Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/sequence-implementations",
    "html": "Topics\nInstance Properties\nvar lazy: LazySequence<Self>\nA sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.\nvar publisher: Publishers.Sequence<Self, Never>\nvar underestimatedCount: Int\nA value less than or equal to the number of elements in the sequence, calculated nondestructively.\nInstance Methods\nfunc allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether every element of a sequence satisfies a given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nReturns an array containing the non-nil results of calling the given transformation with each element of this sequence.\nfunc compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult\nIf lhs is ordered before rhs in the ordering described by the given sequence of SortComparators\nfunc contains(where: (Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>\nReturns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.\nfunc dropFirst(Int) -> DropFirstSequence<Self>\nReturns a sequence containing all but the given number of initial elements.\nfunc dropLast(Int) -> [Self.Element]\nReturns a sequence containing all but the given number of final elements.\nfunc elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.\nfunc enumerated() -> EnumeratedSequence<Self>\nReturns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.\nfunc filter(Predicate<Self.Element>) throws -> [Self.Element]\nfunc filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns an array containing, in order, the elements of the sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]\nfunc flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]\nReturns an array containing the concatenated results of calling the given transformation with each element of this sequence.\nfunc forEach((Self.Element) throws -> Void) rethrows\nCalls the given closure on each element in the sequence in the same order as a for-in loop.\nfunc formatted<S>(S) -> S.FormatOutput\nfunc lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.\nfunc map<T>((Self.Element) throws -> T) rethrows -> [T]\nReturns an array containing the results of mapping the given closure over the sequence’s elements.\nfunc max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the maximum element in the sequence, using the given predicate as the comparison between elements.\nfunc min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?\nReturns the minimum element in the sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> PrefixSequence<Self>\nReturns a sequence, up to the specified maximum length, containing the initial elements of the sequence.\nfunc prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns a sequence containing the initial, consecutive elements that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result\nReturns the result of combining the elements of the sequence using the given closure.\nfunc reversed() -> [Self.Element]\nReturns an array containing the elements of this sequence in reverse order.\nfunc shuffled() -> [Self.Element]\nReturns the elements of the sequence, shuffled.\nfunc shuffled<T>(using: inout T) -> [Self.Element]\nReturns the elements of the sequence, shuffled using the given generator as a source for randomness.\nfunc sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]\nReturns the elements of the sequence, sorted using the given predicate as the comparison between elements.\nfunc sorted<S, Comparator>(using: S) -> [Self.Element]\nReturns the elements of the sequence, sorted using the given array of SortComparators to compare elements.\nfunc sorted<Comparator>(using: Comparator) -> [Self.Element]\nReturns the elements of the sequence, sorted using the given comparator to compare elements.\nfunc split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\nReturns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.\nfunc starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool\nReturns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.\nfunc suffix(Int) -> [Self.Element]\nReturns a subsequence, up to the given maximum length, containing the final elements of the sequence.\nfunc withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?\nExecutes a closure on the sequence’s contiguous storage."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hassuffixcomparator/init(mappingtransform:)-5cmgi",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/greaterthanorequaltocomparator/init(mappingtransform:)",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "buildBlock(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:_:_:_:_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "buildBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatorsbuilder/buildblock(_:)",
    "html": "See Also\nBuilding query comparators\nstruct AnyEntityQueryComparator\nA type that erases the type information of the underlying query comparator.\nclass EntityQueryComparator\nThe base class for all concrete entity query comparators."
  },
  {
    "title": "Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecification/output",
    "html": "Required"
  },
  {
    "title": "buildBlock(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:_:_:_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "buildBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameterdependency/debugdescription",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(reflecting:) initializer. This initializer works with any type, and uses the custom debugDescription property for types that conform to CustomDebugStringConvertible:\n\nstruct Point: CustomDebugStringConvertible {\n    let x: Int, y: Int\n\n\n    var debugDescription: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(reflecting: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s debugDescription property."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:_:_:_:_:_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "buildBlock() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock()",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "ParameterSummaryTupleCaseCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarytuplecasecondition",
    "html": "Topics\nType Aliases\ntypealias Summary\nSee Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "buildBlock(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator/init(mappingtransform:)-7ya5",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "makeIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification/makeiterator()",
    "html": "See Also\nIterating over the values\ntypealias Output"
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/lessthanorequaltocomparator/init(withresolvers:mappingtransform:)",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummaryswitchcondition/widgetfamily/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummaryswitchcondition/widgetfamily/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummaryswitchcondition/widgetfamily/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummaryswitchcondition/widgetfamily/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hassuffixcomparator/init(withresolvers:mappingtransform:)-5rtmw",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "buildBlock(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder/buildblock(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)",
    "html": "See Also\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/greaterthanorequaltocomparator/init(withresolvers:mappingtransform:)",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hassuffixcomparator/init(mappingtransform:)-4dp26",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "buildBlock(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:_:_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "buildBlock(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder/buildblock(_:_:)",
    "html": "See Also\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/greaterthancomparator/init(withresolvers:mappingtransform:)",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/lessthanorequaltocomparator/init(mappingtransform:)",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equaltocomparator/init(mappingtransform:)",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/notequaltocomparator/init(withresolvers:mappingtransform:)",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringcomparisonoperator/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringcomparisonoperator/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringcomparisonoperator/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "EntityQueryComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparator",
    "html": "Relationships\nInherited By\nContainsComparator\nEqualToComparator\nGreaterThanComparator\nGreaterThanOrEqualToComparator\nHasPrefixComparator\nHasSuffixComparator\nIsBetweenComparator\nLessThanComparator\nLessThanOrEqualToComparator\nNotEqualToComparator\nSee Also\nBuilding query comparators\nstatic func buildBlock(AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>...) -> [AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>]\nstruct AnyEntityQueryComparator\nA type that erases the type information of the underlying query comparator."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/lessthancomparator/init(withresolvers:mappingtransform:)",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringcomparisonoperator/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "AnyEntityQueryComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/anyentityquerycomparator",
    "html": "See Also\nBuilding query comparators\nstatic func buildBlock(AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>...) -> [AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>]\nclass EntityQueryComparator\nThe base class for all concrete entity query comparators."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/notequaltocomparator/init(mappingtransform:)",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/lessthancomparator/init(mappingtransform:)",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "buildBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerypropertiesbuilder/buildblock(_:)",
    "html": "See Also\nBuilding queryable properties\nclass EntityQueryPropertyDeclaration\nAn object that identifies a specific entity property and the query comparators it supports."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "IntentPerson.ParameterMode.emailOrPhone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/emailorphone",
    "html": "See Also\nGetting the interface type\ncase contact\nThe parameter shows an interface allowing the user to pick a contact\ncase email\nThe parameter shows an interface allowing the user to pick an email\ncase phone\nThe parameter shows an interface allowing the user to pick a phone number"
  },
  {
    "title": "appendLiteral(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/stringinterpolation/appendliteral(_:)",
    "html": "Parameters\nliteral\n\nA string literal containing the characters that appear next in the string literal.\n\nDiscussion\n\nDon’t call this method directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nInterpolated expressions don’t pass through this method; instead, Swift selects an overload of appendInterpolation. For more information, see the top-level StringInterpolationProtocol documentation."
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(literalCapacity:interpolationCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/stringinterpolation/init(literalcapacity:interpolationcount:)",
    "html": "Parameters\nliteralCapacity\n\nThe approximate size of all literal segments combined. This is meant to be passed to String.reserveCapacity(_:); it may be slightly larger or smaller than the sum of the counts of each literal segment.\n\ninterpolationCount\n\nThe number of interpolations which will be appended. Use this value to estimate how much additional capacity will be needed for the interpolated segments.\n\nDiscussion\n\nDon’t call this initializer directly. Instead, initialize a variable or constant using a string literal with interpolated expressions.\n\nSwift passes this initializer a pair of arguments specifying the size of the literal segments and the number of interpolated segments. Use this information to estimate the amount of storage you will need."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:supportedvalues:resolvers:)-21q7p",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum."
  },
  {
    "title": "Error Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appdependencymanager/error/error-implementations",
    "html": "Topics\nInstance Properties\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "init(mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/greaterthancomparator/init(mappingtransform:)",
    "html": "Parameters\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(withResolvers:mappingTransform:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equaltocomparator/init(withresolvers:mappingtransform:)",
    "html": "Parameters\nwithResolvers\n\nSet of Resolvers to apply when converting user input to the target Value type.\n\nmappingTransform\n\nClosure that transforms the user-supplied value into the ComparatorMappingType output type."
  },
  {
    "title": "init(title:description:default:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:controlstyle:inclusiverange:requestvaluedialog:inputconnectionbehavior:resolvers:)-9yclx",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "IntentPerson.Handle.Value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/value-swift.enum",
    "html": "Topics\nOperators\nstatic func == (IntentPerson.Handle.Value, IntentPerson.Handle.Value) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase applicationDefined(String)\nAn application-defined point of contact, such as a username of an a social networking service\ncase emailAddress(String)\ncase phoneNumber(String)\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "RawRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "IntentPerson.Handle.Label | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/label-swift.enum",
    "html": "Topics\nGetting the handle labels\ncase home\ncase homeFax\ncase iPhone\ncase main\ncase mobile\ncase other\ncase pager\ncase school\ncase work\ncase workFax\nOperators\nstatic func == (IntentPerson.Handle.Label, IntentPerson.Handle.Label) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase custom(String)\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:inputoptions:requestvaluedialog:inputconnectionbehavior:resolvers:)",
    "html": "See Also\nCreating an intent parameter for a string\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "IntentPerson.ParameterMode.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "init(title:description:inputOptions:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:inputoptions:requestvaluedialog:inputconnectionbehavior:optionsprovider:)",
    "html": "See Also\nCreating an intent parameter for a string\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String."
  },
  {
    "title": "init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:inputoptions:requestvaluedialog:inputconnectionbehavior:)",
    "html": "See Also\nCreating an intent parameter for a string\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String."
  },
  {
    "title": "IntentPerson.ParameterMode.phone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/phone",
    "html": "See Also\nGetting the interface type\ncase contact\nThe parameter shows an interface allowing the user to pick a contact\ncase email\nThe parameter shows an interface allowing the user to pick an email\ncase emailOrPhone\nThe parameter shows an interface allowing the user to pick an email or phone number"
  },
  {
    "title": "IntentPerson.ParameterMode.email | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/email",
    "html": "See Also\nGetting the interface type\ncase contact\nThe parameter shows an interface allowing the user to pick a contact\ncase emailOrPhone\nThe parameter shows an interface allowing the user to pick an email or phone number\ncase phone\nThe parameter shows an interface allowing the user to pick a phone number"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "IntentParameter.IntControlStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/intcontrolstyle",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.IntControlStyle, IntentParameter<Value>.IntControlStyle) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase field\ncase stepper\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing the control style\nvar controlStyle: IntentParameter<Value>.IntControlStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int."
  },
  {
    "title": "controlStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/controlstyle-4q1s9",
    "html": "See Also\nAccessing the control style\nenum IntControlStyle\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "LocalizedError Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appdependencymanager/error/localizederror-implementations",
    "html": "Topics\nInstance Properties\nvar failureReason: String?\nA localized message describing the reason for the failure.\nvar helpAnchor: String?\nA localized message providing “help” text if the user requests help.\nvar recoverySuggestion: String?\nA localized message describing how one might recover from the failure."
  },
  {
    "title": "ComparableComparisonOperator.greaterThan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator/greaterthan",
    "html": "See Also\nComparable operators\ncase greaterThanOrEqualTo\nAn operator that determines if the parameter is greater than or equal to the value.\ncase lessThan\nAn operator that determines if the parameter is less than the value.\ncase lessThanOrEqualTo\nAn operator that determines if the parameter is less than or equal to the value."
  },
  {
    "title": "ComparableComparisonOperator.greaterThanOrEqualTo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator/greaterthanorequalto",
    "html": "See Also\nComparable operators\ncase greaterThan\nAn operator that determines if the parameter is greater than the value.\ncase lessThan\nAn operator that determines if the parameter is less than the value.\ncase lessThanOrEqualTo\nAn operator that determines if the parameter is less than or equal to the value."
  },
  {
    "title": "IntentPerson.ParameterMode.contact | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode/contact",
    "html": "See Also\nGetting the interface type\ncase email\nThe parameter shows an interface allowing the user to pick an email\ncase emailOrPhone\nThe parameter shows an interface allowing the user to pick an email or phone number\ncase phone\nThe parameter shows an interface allowing the user to pick a phone number"
  },
  {
    "title": "ComparableComparisonOperator.lessThan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator/lessthan",
    "html": "See Also\nComparable operators\ncase greaterThan\nAn operator that determines if the parameter is greater than the value.\ncase greaterThanOrEqualTo\nAn operator that determines if the parameter is greater than or equal to the value.\ncase lessThanOrEqualTo\nAn operator that determines if the parameter is less than or equal to the value."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "ComparableComparisonOperator.lessThanOrEqualTo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator/lessthanorequalto",
    "html": "See Also\nComparable operators\ncase greaterThan\nAn operator that determines if the parameter is greater than the value.\ncase greaterThanOrEqualTo\nAn operator that determines if the parameter is greater than or equal to the value.\ncase lessThan\nAn operator that determines if the parameter is less than the value."
  },
  {
    "title": "buildExpression(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametersummary/parameterkeypathsbuilder/buildexpression(_:)",
    "html": "See Also\nBuilding the path\nstatic func buildBlock(PartialKeyPath<Intent>...) -> [PartialKeyPath<Intent>]"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "IntentPerson.Identifier.applicationDefined(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/identifier-swift.enum/applicationdefined(_:)",
    "html": "See Also\nGetting the identifier types\ncase contact(String)\nAn identifier from the Contacts framework (see CNContact.identifier)"
  },
  {
    "title": "IntentPerson.Identifier.contact(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/identifier-swift.enum/contact(_:)",
    "html": "See Also\nGetting the identifier types\ncase applicationDefined(String)\nAn identifier specific to your app"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/identifier-swift.enum/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "buildBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametersummary/parameterkeypathsbuilder/buildblock(_:)",
    "html": "See Also\nBuilding the path\nstatic func buildExpression<ValueType>(KeyPath<Intent, IntentParameter<ValueType>>) -> PartialKeyPath<Intent>"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/identifier-swift.enum/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/identifier-swift.enum/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/identifier-swift.enum/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "DisplayRepresentation.Image.DisplayStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/displaystyle",
    "html": "Overview\n\nNote that these are only used when an image, not a symbol name, is specified. When symbol names are specified, they are rendered automatically as appropriate for the system.\n\nTopics\nOperators\nstatic func == (DisplayRepresentation.Image.DisplayStyle, DisplayRepresentation.Image.DisplayStyle) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nType Properties\nstatic var circular: DisplayRepresentation.Image.DisplayStyle\nDisplay this representation in a circle.\nstatic var `default`: DisplayRepresentation.Image.DisplayStyle\nDisplay this representation in the default style.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable"
  },
  {
    "title": "defaultResult() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/dynamicoptionsprovider/defaultresult()-57ptr",
    "html": "Discussion\n\nEither a single value or an array of values may be provided. If an array is provided and the parameter requires a single value, only the first element of the array is used."
  },
  {
    "title": "init(title:description:default:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:inputconnectionbehavior:)-5ouxs",
    "html": "See Also\nCreating an intent parameter for an attributed string\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString."
  },
  {
    "title": "init(systemName:tintColor:symbolConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/init(systemname:tintcolor:symbolconfiguration:)-5p911",
    "html": "Parameters\nsystemName\n\nname of the SF Symbol\n\ntintColor\n\nan optional UIColor to tint the icon\n\nsymbolConfiguration\n\nan optional symbol configuration"
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:supportedvalues:resolvers:)-1mxkz",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum."
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:supportedvalues:optionsprovider:)-4aw32",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasvaluecomparisonoperator/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equatablecomparisonoperator/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasvaluecomparisonoperator/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/oneofcomparisonoperator/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatormode/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "init(title:description:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:optionsprovider:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "init(title:description:supportedTypeIdentifiers:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:supportedtypeidentifiers:requestvaluedialog:inputconnectionbehavior:optionsprovider:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile."
  },
  {
    "title": "init(title:description:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:optionsprovider:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "init(title:description:default:size:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:size:inputconnectionbehavior:)-7cox5",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "init(title:description:default:size:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:size:inputconnectionbehavior:resolvers:)-1f92a",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "EquatableComparisonOperator.equalTo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equatablecomparisonoperator/equalto",
    "html": "See Also\nEquatable operators\ncase notEqualTo\nAn operator that determines if the parameter and the value aren’t equal."
  },
  {
    "title": "init(systemName:tintColor:symbolConfiguration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/init(systemname:tintcolor:symbolconfiguration:)-3snvy",
    "html": "Parameters\nsystemName\n\nname of the SF Symbol\n\ntintColor\n\nan optional UIColor to tint the icon\n\nsymbolConfiguration\n\nan optional symbol configuration"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatormode/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatormode/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "EntityQueryComparatorMode.or | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatormode/or",
    "html": "See Also\nComparator modes\ncase and"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatormode/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(title:description:supportedTypeIdentifiers:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:supportedtypeidentifiers:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile."
  },
  {
    "title": "init(title:description:default:supportedTypeIdentifiers:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:supportedtypeidentifiers:requestvaluedialog:inputconnectionbehavior:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile."
  },
  {
    "title": "init(title:description:default:supportedTypeIdentifiers:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:supportedtypeidentifiers:requestvaluedialog:inputconnectionbehavior:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile."
  },
  {
    "title": "EntityQueryComparatorMode.and | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatormode/and",
    "html": "See Also\nComparator modes\ncase or"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasvaluecomparisonoperator/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasvaluecomparisonoperator/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/oneofcomparisonoperator/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "init(title:description:default:size:inputConnectionBehavior:query:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:size:inputconnectionbehavior:query:)-1rwev",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "init(title:description:default:size:inputConnectionBehavior:query:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:size:inputconnectionbehavior:query:)-7yfm3",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "init(title:description:default:size:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:size:inputconnectionbehavior:resolvers:)-8o0lz",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:query:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "HasValueComparisonOperator.hasNoValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasvaluecomparisonoperator/hasnovalue",
    "html": "See Also\nValue operators\ncase hasAnyValue\nAn operator that determines if the parameter has a value."
  },
  {
    "title": "init(title:description:default:size:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:size:inputconnectionbehavior:)-8bfkz",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity."
  },
  {
    "title": "HasValueComparisonOperator.hasAnyValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasvaluecomparisonoperator/hasanyvalue",
    "html": "See Also\nValue operators\ncase hasNoValue\nAn operator that determines if the parameter’s empty."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equatablecomparisonoperator/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:supportedvalues:)-9lv7y",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equatablecomparisonoperator/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:supportedvalues:)-2wsgy",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum."
  },
  {
    "title": "EquatableComparisonOperator.notEqualTo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equatablecomparisonoperator/notequalto",
    "html": "See Also\nEquatable operators\ncase equalTo\nAn operator that determines if the parameter and the value are equal."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/oneofcomparisonoperator/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:requestdisambiguationdialog:inputconnectionbehavior:supportedvalues:optionsprovider:)-3vfr6",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equatablecomparisonoperator/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/oneofcomparisonoperator/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(title:description:displayStyle:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:displaystyle:requestvaluedialog:inputconnectionbehavior:optionsprovider:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark."
  },
  {
    "title": "Electric potential difference | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-electric-difference",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricPotentialDifference, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nenum ElectricPotentialDifference\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar defaultUnit: IntentParameter<Value>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "init(title:description:kind:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:kind:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-38o37",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents."
  },
  {
    "title": "IntentParameter.PlacemarkDisplayStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/placemarkdisplaystyle",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.PlacemarkDisplayStyle, IntentParameter<Value>.PlacemarkDisplayStyle) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase address\ncase city\ncase name\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing the display style\nvar displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark."
  },
  {
    "title": "init(title:description:currencyCodes:inclusiveRange:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:currencycodes:inclusiverange:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount."
  },
  {
    "title": "Temperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-temperature",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Temperature?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Temperature, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nenum Temperature\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar defaultUnit: IntentParameter<Value>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "Volume | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-volume",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Volume?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Volume, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nenum Volume\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar defaultUnit: IntentParameter<Value>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures."
  },
  {
    "title": "Electric resistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-electric-resistance",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricResistance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricResistance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nenum ElectricResistance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar defaultUnit: IntentParameter<Value>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "Illuminance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-illuminance",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Illuminance?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Illuminance, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nenum Illuminance\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar defaultUnit: IntentParameter<Value>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "Speed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-speed",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Speed?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Speed, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Speed, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Speed?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nenum Speed\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar defaultUnit: IntentParameter<Value>.Speed?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "Information storage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-information-storage",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.InformationStorage?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.InformationStorage?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.InformationStorage, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.InformationStorage, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nAccessing unit details\nvar unit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nenum InformationStorage\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar defaultUnit: IntentParameter<Value>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "displayStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/displaystyle",
    "html": "See Also\nAccessing the display style\nenum PlacemarkDisplayStyle\nDetermines how locations are represented in strings used by Shortcuts.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:currencyCodes:inclusiveRange:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:currencycodes:inclusiverange:requestvaluedialog:inputconnectionbehavior:optionsprovider:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount."
  },
  {
    "title": "init(title:description:displayStyle:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:displaystyle:requestvaluedialog:inputconnectionbehavior:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark."
  },
  {
    "title": "init(title:description:kind:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:kind:requestvaluedialog:inputconnectionbehavior:resolvers:)-6834b",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date."
  },
  {
    "title": "init(title:description:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:controlstyle:inclusiverange:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)-2iugu",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:kind:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:kind:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)-3hg6n",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date."
  },
  {
    "title": "init(title:description:default:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:controlstyle:inclusiverange:requestvaluedialog:inputconnectionbehavior:)-4mc52",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:kind:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:kind:requestvaluedialog:inputconnectionbehavior:)-97fq8",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date."
  },
  {
    "title": "dateKind | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/datekind-15hd7",
    "html": "See Also\nAccessing the date kind\nenum DateKind\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:displayname:requestvaluedialog:inputconnectionbehavior:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, displayName: Bool.IntentDisplayName?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Bool."
  },
  {
    "title": "init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:displayname:requestvaluedialog:inputconnectionbehavior:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, displayName: Bool.IntentDisplayName?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Bool."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)-8g3g7",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL."
  },
  {
    "title": "init(title:description:mode:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:mode:requestvaluedialog:inputconnectionbehavior:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson."
  },
  {
    "title": "init(title:description:mode:size:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:mode:size:inputconnectionbehavior:)-6efsz",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson."
  },
  {
    "title": "init(title:description:mode:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:mode:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson."
  },
  {
    "title": "init(title:description:mode:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:mode:requestvaluedialog:inputconnectionbehavior:optionsprovider:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)-7dvis",
    "html": "See Also\nCreating an intent parameter for an attributed string\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString."
  },
  {
    "title": "init(title:description:default:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:controlstyle:inclusiverange:requestvaluedialog:inputconnectionbehavior:resolvers:)-83igq",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-2i6xs",
    "html": "See Also\nCreating an intent parameter for an attributed string\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString."
  },
  {
    "title": "init(title:description:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:controlstyle:inclusiverange:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-86n3q",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:controlstyle:inclusiverange:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)-8ej37",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:default:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:controlstyle:inclusiverange:requestvaluedialog:inputconnectionbehavior:)-2wjbq",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "dateKind | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/datekind-7wjso",
    "html": "See Also\nAccessing the date kind\nenum DateKind\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:mode:size:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:mode:size:inputconnectionbehavior:)-1i2sn",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson."
  },
  {
    "title": "init(title:description:mode:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:mode:requestvaluedialog:inputconnectionbehavior:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson."
  },
  {
    "title": "IntentParameter.DateKind | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/datekind-swift.enum",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.DateKind, IntentParameter<Value>.DateKind) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase date\ncase dateTime\ncase time\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing the date kind\nvar dateKind: IntentParameter<Value>.DateKind?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date."
  },
  {
    "title": "init(title:description:default:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:inputconnectionbehavior:resolvers:)-7u5zw",
    "html": "See Also\nCreating an intent parameter for an attributed string\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString."
  },
  {
    "title": "TypeDisplayRepresentation.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "IntentWidgetFamily.accessoryCorner | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/accessorycorner",
    "html": "Discussion\n\nThe accessory corner widget can appear as a complication in watchOS."
  },
  {
    "title": "IntentParameter.DoubleControlStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/doublecontrolstyle",
    "html": "Topics\nOperators\nstatic func == (IntentParameter<Value>.DoubleControlStyle, IntentParameter<Value>.DoubleControlStyle) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase field\ncase slider\ncase stepper\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nAccessing the control style\nvar controlStyle: IntentParameter<Value>.DoubleControlStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double."
  },
  {
    "title": "controlStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/controlstyle-5ryd1",
    "html": "See Also\nAccessing the control style\nenum DoubleControlStyle\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "result(actionButtonIntent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(actionbuttonintent:)",
    "html": "Parameters\nnextIntent\n\nthe AppIntent used perform next"
  },
  {
    "title": "result(dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(dialog:)",
    "html": "Parameters\ndialog\n\nA custom success dialog"
  },
  {
    "title": "init(title:description:kind:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:kind:requestvaluedialog:inputconnectionbehavior:resolvers:)-8vfnx",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents."
  },
  {
    "title": "init(title:description:kind:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:kind:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)-4438x",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents."
  },
  {
    "title": "init(title:description:kind:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:kind:requestvaluedialog:inputconnectionbehavior:)-1no2a",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents."
  },
  {
    "title": "IntentParameter.InclusiveRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/inclusiverange-swift.typealias",
    "html": "See Also\nAccessing the configuration\nvar currencyCodes: [String]?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nvar inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount."
  },
  {
    "title": "result(value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(value:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent"
  },
  {
    "title": "result(value:opensIntent:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(value:opensintent:dialog:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "Electric current | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-electric-current",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.ElectricCurrent?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.ElectricCurrent, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nAccessing unit details\nvar unit: IntentParameter<Value>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nenum ElectricCurrent\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar defaultUnit: IntentParameter<Value>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "Pressure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-pressure",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Pressure?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Pressure, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Pressure?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nenum Pressure\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar defaultUnit: IntentParameter<Value>.Pressure?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "Frequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-frequency",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Frequency?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Frequency?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Frequency, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Frequency, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nenum Frequency\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar defaultUnit: IntentParameter<Value>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(title:description:controlStyle:inclusiveRange:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:controlstyle:inclusiverange:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-3la41",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "init(title:description:default:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:inputconnectionbehavior:resolvers:)-7lt0",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL."
  },
  {
    "title": "init(title:description:default:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:inputconnectionbehavior:resolvers:)-6mfw6",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL."
  },
  {
    "title": "init(title:description:kind:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:kind:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-1adrk",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date."
  },
  {
    "title": "init(title:description:default:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:inputconnectionbehavior:)-518bz",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL."
  },
  {
    "title": "init(title:description:default:requestValueDialog:inputConnectionBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:default:requestvaluedialog:inputconnectionbehavior:)-9wlo0",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-17a31",
    "html": "See Also\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL."
  },
  {
    "title": "Durations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-duration",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Duration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Duration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nenum Duration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar defaultUnit: IntentParameter<Value>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "Acceleration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-acceleration",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Acceleration?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Acceleration, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nenum Acceleration\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar defaultUnit: IntentParameter<Value>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nSee Also\nCreating an intent parameter for measurements\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "Area | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements-area",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse defaultUnit to specify the default unit that should be selected when this parameter is initially created.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, defaultUnit: IntentParameter<Value>.Area?, defaultUnitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nUse unit to specify the exact unit that should be used for this parameter. No other units will be able to be selected by the user.\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, defaultValue: Double?, unit: IntentParameter<Value>.Area, unitAdjustForLocale: Bool, supportsNegativeNumbers: Bool, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nAccessing unit details\nvar unit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nenum Area\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar defaultUnit: IntentParameter<Value>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nSee Also\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:optionsprovider:)-1x2m9",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:resolvers:)",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:resolvers:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:resolvers:)-7y2uj",
    "html": "See Also\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod."
  },
  {
    "title": "init(title:description:requestValueDialog:inputConnectionBehavior:optionsProvider:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/init(title:description:requestvaluedialog:inputconnectionbehavior:optionsprovider:)-7urpy",
    "html": "See Also\nCreating an intent parameter\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintenterror/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "TypeDisplayRepresentation.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "synonyms | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/synonyms",
    "html": "Discussion\n\nExample:\n\nstruct PizzaEntity: AppEntity {\n    static var typeDisplayRepresentation = TypeDisplayRepresentation(\n        name: \"Pizza\",\n        synonyms: [\"Pie\", \"Za\"]\n    )\n}\n\n\n\n\nIn this case, we are saying that PizzaEntity can be represented as “Pizza”, “Pie” or “Za”"
  },
  {
    "title": "IntentWidgetFamily.systemLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/systemlarge",
    "html": "Discussion\n\nThe large system widget can appear on the Home Screen or in the Today View in iOS or iPadOS, or in the Notification Center on macOS."
  },
  {
    "title": "IntentWidgetFamily.systemExtraLarge | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/systemextralarge",
    "html": "Discussion\n\nThe extra-large system widget can appear on the Home Screen in iPadOS and on macOS.\n\nNote\n\nThis value is only available in iPadOS and macOS."
  },
  {
    "title": "IntentWidgetFamily.systemMedium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/systemmedium",
    "html": "Discussion\n\nThe medium system widget can appear on the Home Screen or in the Today View in iOS and iPadOS, or in the Notification Center on macOS."
  },
  {
    "title": "IntentWidgetFamily.accessoryRectangular | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/accessoryrectangular",
    "html": "Discussion\n\nThe accessory rectangular widget can appear as a complication in watchOS or on the Lock Screen in iOS."
  },
  {
    "title": "IntentWidgetFamily.accessoryInline | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/accessoryinline",
    "html": "Discussion\n\nThe accessory inline widget can appear as a complication in watchOS, or on the Lock Screen in iOS. On some watch faces, the system renders the complication along a curve."
  },
  {
    "title": "suggestedFocusFilters(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintent/suggestedfocusfilters(for:)-3d5tv",
    "html": "Parameters\ncontext\n\nThe focus configuration context which the suggested configurations could be determined from.\n\nReturn Value\n\nA list of suggested focus configurations where the first one is the most suggested configuration. Returns an empty array if there is no suggested focus configurations. The system will use the default value per parameters in this case."
  },
  {
    "title": "result(actionButtonIntent:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(actionbuttonintent:dialog:)",
    "html": "Parameters\nnextIntent\n\nthe AppIntent used perform next\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "result(opensIntent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(opensintent:)",
    "html": "Parameters\nopensIntent\n\nAn AppIntent to shows the result of current intent"
  },
  {
    "title": "result(value:actionButtonIntent:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(value:actionbuttonintent:dialog:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nnextIntent\n\nthe AppIntent used perform next\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "result(value:actionButtonIntent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(value:actionbuttonintent:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nnextIntent\n\nthe AppIntent used perform next"
  },
  {
    "title": "result(value:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(value:dialog:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "ShortcutsLink.Body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/body-swift.typealias",
    "html": "See Also\nImplementing the view\nvar body: some View\nThe content and behavior of the view."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentauthenticationpolicy/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "identificationHint | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/identificationhint",
    "html": "See Also\nGetting the payment details\nvar paymentType: IntentPaymentMethod.PaymentType\nThe kind of payment method, such as a credit card or bank account\nvar name: String?\nThe user-visible name of the payment method\nvar icon: DisplayRepresentation.Image?\nThe icon or image representing this payment method\nenum PaymentType\nConstants that describe the available payment options."
  },
  {
    "title": "icon | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/icon",
    "html": "See Also\nGetting the payment details\nvar paymentType: IntentPaymentMethod.PaymentType\nThe kind of payment method, such as a credit card or bank account\nvar name: String?\nThe user-visible name of the payment method\nvar identificationHint: String?\nA hint making it easier for the user to identify the payment method among others of similar name or type, such as the last several digits of a credit card number\nenum PaymentType\nConstants that describe the available payment options."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromintresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "result(value:opensIntent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/result(value:opensintent:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nopensIntent\n\nAn AppIntent to shows the result of current intent"
  },
  {
    "title": "TypeDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/typedisplayrepresentable-implementations",
    "html": "Topics\nType Properties\nstatic var typeDisplayRepresentation: TypeDisplayRepresentation\nA short, localized, human-readable name for the type."
  },
  {
    "title": "TypeDisplayRepresentation.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "numericFormat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/numericformat",
    "html": "Discussion\n\nIn your numericFormat implementation, use StringInterpolation placeholders and provide a .stringsdict file with all possible pluralizations for the type, such as “0 books”, “1 book”, and “2 books”.\n\nExample:\n\nTypeDisplayRepresentation(\n    name: LocalizedStringResource(\"Book\"),\n    numericFormat: LocalizedStringResource(\"\\(placeholder: .int) books\")\n)\n\n<dict>\n   <key>Book</key>\n   <dict>\n     <key>NSStringLocalizedFormatKey</key>\n     <string>%#@VARIABLE@</string>\n     <key>VARIABLE</key>\n     <dict>\n       <key>NSStringFormatSpecTypeKey</key>\n       <string>NSStringPluralRuleType</string>\n       <key>one</key>\n       <string>Book</string>\n       <key>other</key>\n       <string>Books</string>\n     </dict>\n   </dict>\n   <key>%lld books</key>\n   <dict>\n     <key>NSStringLocalizedFormatKey</key>\n     <string>%#@count@</string>\n     <key>count</key>\n     <dict>\n       <key>NSStringFormatSpecTypeKey</key>\n       <string>NSStringPluralRuleType</string>\n       <key>NSStringFormatValueTypeKey</key>\n       <string>lld</string>\n       <key>zero</key>\n       <string>%lld books</string>\n       <key>one</key>\n       <string>%lld book</string>\n       <key>other</key>\n       <string>%lld books</string>\n     </dict>\n   </dict>\n </dict>\n"
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "init(unicodeScalarLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription/init(unicodescalarliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(extendedGraphemeClusterLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription/init(extendedgraphemeclusterliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "IntentWidgetFamily.systemSmall | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/systemsmall",
    "html": "Discussion\n\nThe small system widget can appear on the Home Screen or in the Today View in iOS and iPadOS, or in the Notification Center on macOS."
  },
  {
    "title": "IntentWidgetFamily.accessoryCircular | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/accessorycircular",
    "html": "Discussion\n\nThe accessory circular widget can appear as a complication in watchOS, or on the Lock Screen in iOS."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentauthenticationpolicy/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/body-swift.property",
    "html": "See Also\nImplementing the view\ntypealias Body\nThe type of view representing the body of this view."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/urlfromstringresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/urlfromstringresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/urlfromstringresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/urlfromstringresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/urlfromstringresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/urlfromstringresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromintresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromintresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromintresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "IntentPaymentMethod.PaymentType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.enum",
    "html": "Topics\nGetting the payment options\ncase applePay\ncase brokerage\ncase checking\ncase credit\ncase debit\ncase prepaid\ncase savings\ncase store\ncase unknown\nOperators\nstatic func == (IntentPaymentMethod.PaymentType, IntentPaymentMethod.PaymentType) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting the payment details\nvar paymentType: IntentPaymentMethod.PaymentType\nThe kind of payment method, such as a credit card or bank account\nvar name: String?\nThe user-visible name of the payment method\nvar identificationHint: String?\nA hint making it easier for the user to identify the payment method among others of similar name or type, such as the last several digits of a credit card number\nvar icon: DisplayRepresentation.Image?\nThe icon or image representing this payment method"
  },
  {
    "title": "paymentType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/paymenttype-swift.property",
    "html": "See Also\nGetting the payment details\nvar name: String?\nThe user-visible name of the payment method\nvar identificationHint: String?\nA hint making it easier for the user to identify the payment method among others of similar name or type, such as the last several digits of a credit card number\nvar icon: DisplayRepresentation.Image?\nThe icon or image representing this payment method\nenum PaymentType\nConstants that describe the available payment options."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/name",
    "html": "See Also\nGetting the payment details\nvar paymentType: IntentPaymentMethod.PaymentType\nThe kind of payment method, such as a credit card or bank account\nvar identificationHint: String?\nA hint making it easier for the user to identify the payment method among others of similar name or type, such as the last several digits of a credit card number\nvar icon: DisplayRepresentation.Image?\nThe icon or image representing this payment method\nenum PaymentType\nConstants that describe the available payment options."
  },
  {
    "title": "InstanceDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/instancedisplayrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar displayRepresentation: DisplayRepresentation\nThe visual elements to display when presenting an instance of the type.\nvar localizedStringResource: LocalizedStringResource"
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod/_intentvalue-implementations",
    "html": "Topics\nType Aliases\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var defaultResolverSpecification: EmptyResolverSpecification<IntentPaymentMethod>"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationidentifier/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "init(integerLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcollectionsize/init(integerliteral:)",
    "html": "Parameters\nvalue\n\nThe value to create.\n\nDiscussion\n\nDo not call this initializer directly. Instead, initialize a variable or constant using an integer literal. For example:\n\nlet x = 23\n\n\nIn this example, the assignment to the x constant calls this integer literal initializer behind the scenes."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcollectionsize/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "IntentItemSection.Builder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentitemsection/builder",
    "html": "Topics\nType Methods\nstatic func buildBlock() -> [IntentItemSection<Result>]\nstatic func buildBlock(IntentItemSection<Result>...) -> [IntentItemSection<Result>]\nstatic func buildBlock(IntentItem<Result>...) -> [IntentItemSection<Result>]"
  },
  {
    "title": "init(_:title:subtitle:image:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentitem/init(_:title:subtitle:image:)",
    "html": "Parameters\nvalue\n\nThe value the item represents.\n\ntitle\n\nThe item’s title.\n\nsubtitle\n\nThe item’s subtitle.\n\nimage\n\nAn image to display alongside the item’s title.\n\nDiscussion\n\nNote\n\nThe system uses the provided values even when value conforms to the DisplayRepresentable protocol."
  },
  {
    "title": "IntentAuthenticationPolicy.requiresAuthentication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentauthenticationpolicy/requiresauthentication",
    "html": "Discussion\n\nIf the device is in a locked state and the request doesn’t originate on an authenticated remote device; for example a connected Apple Watch; the system prompts a person to unlock the device before it runs the app intent.\n\nSee Also\nAuthentication policies\ncase alwaysAllowed\nA policy that allows the app intent to always run, even on a locked device.\ncase requiresLocalDeviceAuthentication\nA policy that requires the user to authenticate on the local device."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentauthenticationpolicy/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "IntentAuthenticationPolicy.requiresLocalDeviceAuthentication | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentauthenticationpolicy/requireslocaldeviceauthentication",
    "html": "Discussion\n\nUse this policy if your app intent relies on data or services that are only available when the device is unlocked. The system always prompts a person to unlock if their device is locked, even when the request originates on an authenticated remote device; for example, their connected Apple Watch.\n\nSee Also\nAuthentication policies\ncase alwaysAllowed\nA policy that allows the app intent to always run, even on a locked device.\ncase requiresAuthentication\nA policy that requires the user to authenticate."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentauthenticationpolicy/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "IntentAuthenticationPolicy.alwaysAllowed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentauthenticationpolicy/alwaysallowed",
    "html": "See Also\nAuthentication policies\ncase requiresAuthentication\nA policy that requires the user to authenticate.\ncase requiresLocalDeviceAuthentication\nA policy that requires the user to authenticate on the local device."
  },
  {
    "title": "IntentPredictionConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpredictionconfiguration",
    "html": "Topics\nAssociated Types\nassociatedtype Intent : AppIntent\n\nRequired\n\nRelationships\nConforming Types\nIntentPrediction\nTupleIntentPrediction\nSee Also\nProviding predictions\nstatic var predictionConfiguration: Self.Prediction\nA collection of predictions the system can use when it suggests the app intent.\n\nRequired\n\nenum IntentPredictionsBuilder\nA result builder that allows you to declaratively describe the predictions for an app intent."
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/_intentvalue-implementations",
    "html": "Topics\nType Aliases\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var defaultResolverSpecification: EmptyResolverSpecification<IntentCurrencyAmount>"
  },
  {
    "title": "currencyCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/currencycode",
    "html": "See Also\nGetting the currency details\nlet amount: Decimal\nThe monetary amount."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "InstanceDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/instancedisplayrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar displayRepresentation: DisplayRepresentation\nThe visual elements to display when presenting an instance of the type.\nvar localizedStringResource: LocalizedStringResource"
  },
  {
    "title": "TypeDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/typedisplayrepresentable-implementations",
    "html": "Topics\nType Properties\nstatic var typeDisplayRepresentation: TypeDisplayRepresentation\nA short, localized, human-readable name for the type."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromintresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcollectionsize/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromintresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "IntentCollectionSize.IntegerLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcollectionsize/integerliteraltype",
    "html": "Discussion\n\nThe standard library integer and floating-point types are all valid types for IntegerLiteralType."
  },
  {
    "title": "intentType(_:entityIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationmatchingpredicate/intenttype(_:entityidentifier:)",
    "html": "See Also\nCreating a predicate\nstatic func donationIdentifier(IntentDonationIdentifier) -> IntentDonationMatchingPredicate\nDelete the transcript record with the given donation identifier\nstatic func entityIdentifier(EntityIdentifier) -> IntentDonationMatchingPredicate\nDelete all transcript records referencing the given AppEntity instance"
  },
  {
    "title": "RelevantContext.InferredLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantcontext/inferredlocation",
    "html": "Topics\nType Properties\nstatic var commute: RelevantContext.InferredLocation\nThe route during the user’s commute, for example between “home” and “work”.\nstatic var home: RelevantContext.InferredLocation\nThe user’s home.\nstatic var school: RelevantContext.InferredLocation\nThe user’s school.\nstatic var work: RelevantContext.InferredLocation\nThe user’s workplace."
  },
  {
    "title": "RelevantContext.FitnessCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantcontext/fitnesscondition",
    "html": "Topics\nType Properties\nstatic var activityRingsIncomplete: RelevantContext.FitnessCondition\nBehind schedule on activity rings.\nstatic var workoutActive: RelevantContext.FitnessCondition\nA workout is currently active."
  },
  {
    "title": "RelevantContext.HeadphonesCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantcontext/headphonescondition",
    "html": "Topics\nType Properties\nstatic var connected: RelevantContext.HeadphonesCondition\nHeadphones are connected to this device."
  },
  {
    "title": "RelevantContext.SleepCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantcontext/sleepcondition",
    "html": "Topics\nType Properties\nstatic var bedtime: RelevantContext.SleepCondition\nA time period around when the user typically goes to bed.\nstatic var wakeup: RelevantContext.SleepCondition\nA time period around when the user typically wakes up."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromstringresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromstringresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromstringresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromstringresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationidentifier/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationidentifier/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(from:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationidentifier/init(from:)",
    "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
  },
  {
    "title": "Prediction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/predictableintent/prediction",
    "html": "Required"
  },
  {
    "title": "IntentPredictionsBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpredictionsbuilder",
    "html": "Topics\nBuilding predictions\nstatic func buildBlock<A0>(A0) -> A0\nstatic func buildBlock<A0, A1>(A0, A1) -> TupleIntentPrediction<A0.Intent, (A0, A1)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2>(A0, A1, A2) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2)>\nAvailable when Intent conforms to AppIntent.\nstruct TupleIntentPrediction\nA type that represents a collection of predictions for a specific app intent.\nType Methods\nstatic func buildBlock<A0, A1, A2, A3>(A0, A1, A2, A3) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4>(A0, A1, A2, A3, A4) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5>(A0, A1, A2, A3, A4, A5) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6>(A0, A1, A2, A3, A4, A5, A6) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7>(A0, A1, A2, A3, A4, A5, A6, A7) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8>(A0, A1, A2, A3, A4, A5, A6, A7, A8) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9>(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildBlock<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) -> TupleIntentPrediction<A0.Intent, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)>\nAvailable when Intent conforms to AppIntent.\nstatic func buildExpression<A0>(A0) -> A0\nSee Also\nProviding predictions\nstatic var predictionConfiguration: Self.Prediction\nA collection of predictions the system can use when it suggests the app intent.\n\nRequired\n\nprotocol IntentPredictionConfiguration\nAn interface that provides the configuration for a single prediction."
  },
  {
    "title": "donate(intent:result:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationmanager/donate(intent:result:)-7ztce",
    "html": "Discussion\n\nThis synchronous interface is available for adopting application that haven’t adopted Swift async concurrency. Any exceptions encountered in donating this intent are ignored."
  },
  {
    "title": "IntentItem.Builder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentitem/builder",
    "html": "Topics\nType Methods\nstatic func buildArray([[IntentItem<Value>]]) -> [IntentItem<Value>]\nstatic func buildBlock() -> [Value]\nstatic func buildBlock(IntentItem<Value>...) -> [IntentItem<Value>]\nstatic func buildBlock([IntentItem<Value>]) -> [IntentItem<Value>]\nstatic func buildExpression(Value) -> IntentItem<Value>\nstatic func buildExpression<ExpressionValue>(IntentItem<ExpressionValue>) -> IntentItem<ExpressionValue>"
  },
  {
    "title": "donate(intent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationmanager/donate(intent:)-57fg4",
    "html": "Discussion\n\nThis synchronous interface is available for adopting application that haven’t adopted Swift async concurrency. Any exceptions encountered in donating this intent are ignored."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "init(amount:currencyCode:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/init(amount:currencycode:)",
    "html": "Parameters\namount\n\nmonetary amount\n\ncurrencyCode\n\nISO 4217 currency code that applies to the monetary amount."
  },
  {
    "title": "amount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount/amount",
    "html": "See Also\nGetting the currency details\nlet currencyCode: String\nThe ISO 4217 currency code that applies to the monetary amount."
  },
  {
    "title": "AppShortcutParameterPresentationTitleString.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/stringliteraltype",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nDiscussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "AppShortcutParameterPresentationTitleString.StringInterpolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/stringinterpolation",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nOverview\n\nThe StringLiteralType of an interpolation type must match the StringLiteralType of the conforming type.\n\nTopics\nInitializers\ninit(literalCapacity: Int, interpolationCount: Int)\nCreates an empty instance ready to be filled with string literal content.\nInstance Methods\nfunc appendInterpolation(ParameterKeyPath)\nfunc appendLiteral(String)\nAppends a literal segment to the interpolation.\nType Aliases\ntypealias StringLiteralType\nThe type that should be used for literal segments.\nRelationships\nConforms To\nStringInterpolationProtocol"
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "init(specific:generic:table:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitle/init(specific:generic:table:)",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nParameters\nspecific\n\nAn AppShortcutParameterPresentationTitleString representing the specific title of the AppShortcutParameterPresentation. Example: “Call (.$person)”.\n\ngeneric\n\nA StaticString representing the generic title of the AppShortcutParameterPresentation. Example: “Call Person…”.\n\ntable\n\nAn optional StaticString representing the table to use when localizing the title."
  },
  {
    "title": "entityIdentifier(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationmatchingpredicate/entityidentifier(_:)",
    "html": "See Also\nCreating a predicate\nstatic func donationIdentifier(IntentDonationIdentifier) -> IntentDonationMatchingPredicate\nDelete the transcript record with the given donation identifier\nstatic func intentType(AppIntent.Type, entityIdentifier: EntityIdentifier?) -> IntentDonationMatchingPredicate\nDelete all transcript records for the given AppIntent type, optionally only those referencing a given AppEntity instance identifier"
  },
  {
    "title": "donationIdentifier(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationmatchingpredicate/donationidentifier(_:)",
    "html": "See Also\nCreating a predicate\nstatic func entityIdentifier(EntityIdentifier) -> IntentDonationMatchingPredicate\nDelete all transcript records referencing the given AppEntity instance\nstatic func intentType(AppIntent.Type, entityIdentifier: EntityIdentifier?) -> IntentDonationMatchingPredicate\nDelete all transcript records for the given AppIntent type, optionally only those referencing a given AppEntity instance identifier"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/description",
    "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type’s description property."
  },
  {
    "title": "init(for:identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/init(for:identifier:)",
    "html": "See Also\nCreating an entity identifier\ninit<Entity>(for: Entity)\nCreates an identifier for the specified entity"
  },
  {
    "title": "init(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/init(for:)",
    "html": "See Also\nCreating an entity identifier\ninit<Entity>(for: Entity.Type, identifier: Entity.ID)\nCreates an EntityIdentifier representing an instance of the specified entity type backed by the specified identifier value."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/anyintentvalue/title",
    "html": "Required"
  },
  {
    "title": "isOptional | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/anyintentvalue/isoptional",
    "html": "Required"
  },
  {
    "title": "RangeCheckingResolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromstringresolver/rangecheckingresolver-implementations",
    "html": "Topics\nInstance Methods\nfunc checkParameterRangeContains<Value>(value: Value, context: IntentParameterContext<Self.Output>) throws"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromstringresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromstringresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromstringresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromstringresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "RangeCheckingResolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromstringresolver/rangecheckingresolver-implementations",
    "html": "Topics\nInstance Methods\nfunc checkParameterRangeContains<Value>(value: Value, context: IntentParameterContext<Self.Output>) throws"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationidentifier/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantintent/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromstringresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "encode(to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationidentifier/encode(to:)",
    "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder’s format."
  },
  {
    "title": "predictionConfiguration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/predictableintent/predictionconfiguration",
    "html": "Required\n\nSee Also\nProviding predictions\nprotocol IntentPredictionConfiguration\nAn interface that provides the configuration for a single prediction.\nenum IntentPredictionsBuilder\nA result builder that allows you to declaratively describe the predictions for an app intent."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollectionprotocol/title",
    "html": "Required"
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/init(stringliteral:)",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nParameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "target | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/openintent/target",
    "html": "Required"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/init(_:)",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)"
  },
  {
    "title": "init(stringInterpolation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/init(stringinterpolation:)",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nParameters\nstringInterpolation\n\nAn instance of StringInterpolation which has had each segment of the string literal appended to it.\n\nDiscussion\n\nMost StringInterpolation types will store information about the literals and interpolations appended to them in one or more properties. init(stringInterpolation:) should use these properties to initialize the instance."
  },
  {
    "title": "AppShortcutParameterPresentationTitleString.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/extendedgraphemeclusterliteraltype",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nDiscussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "AppShortcutParameterPresentationTitleString.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/unicodescalarliteraltype",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nDiscussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "AppShortcutParameterPresentationSummaryString.StringInterpolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/stringinterpolation",
    "html": "Overview\n\nThe StringLiteralType of an interpolation type must match the StringLiteralType of the conforming type.\n\nTopics\nInitializers\ninit(literalCapacity: Int, interpolationCount: Int)\nCreates an empty instance ready to be filled with string literal content.\nInstance Methods\nfunc appendInterpolation(ParameterKeyPath)\nfunc appendLiteral(String)\nAppends a literal segment to the interpolation.\nType Aliases\ntypealias StringLiteralType\nThe type that should be used for literal segments.\nRelationships\nConforms To\nStringInterpolationProtocol"
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "AppShortcutParameterPresentationSummaryString.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "AppShortcutParameterPresentationSummaryString.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "AppShortcutParameterPresentationSummaryString.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/_intentvalue-implementations",
    "html": "Topics\nType Aliases\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var defaultResolverSpecification: EmptyResolverSpecification<EntityIdentifier>"
  },
  {
    "title": "valueMaximumLength | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/valuemaximumlength",
    "html": "See Also\nGetting the identifier details\nlet identifier: String\nlet entityType: AppEntity.Type"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "entityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/entitytype",
    "html": "See Also\nGetting the identifier details\nlet identifier: String\nstatic let valueMaximumLength: Int\nMaximum allowed length for the identifier value. This is a constraint imposed by the system and thus forces us to truncate the identifier if it exceeds the maximum length."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier/identifier",
    "html": "See Also\nGetting the identifier details\nlet entityType: AppEntity.Type\nstatic let valueMaximumLength: Int\nMaximum allowed length for the identifier value. This is a constraint imposed by the system and thus forces us to truncate the identifier if it exceeds the maximum length."
  },
  {
    "title": "shortcutsLinkStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink/shortcutslinkstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to set.\n\nReturn Value\n\nA view that uses the specified shortcuts button style on its child views."
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromstringresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "Value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/anyintentvalue/value",
    "html": "Required"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/transientappentity/init()",
    "html": "Required"
  },
  {
    "title": "Identifiable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/transientappentity/identifiable-implementations",
    "html": "Topics\nInstance Properties\nvar id: UUID\nThe stable identity of the entity associated with this instance."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromstringresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "automatic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslinkstyle/automatic",
    "html": "See Also\nGetting the styles\nstatic let automaticOutline: ShortcutsLinkStyle\nThe default button style with an outline, based on the current color scheme."
  },
  {
    "title": "automaticOutline | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslinkstyle/automaticoutline",
    "html": "See Also\nGetting the styles\nstatic let automatic: ShortcutsLinkStyle\nThe default button style, based on the current color scheme."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromstringresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "ShortcutTileColor.grayBrown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/graybrown",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.grayBlue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/grayblue",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "systemImageName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollectionprotocol/systemimagename",
    "html": "Required"
  },
  {
    "title": "dynamicOptionsProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollectionprotocol/dynamicoptionsprovider",
    "html": "Required"
  },
  {
    "title": "Provider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollectionprotocol/provider",
    "html": "Required"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "ShortcutTileColor.yellow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/yellow",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color."
  },
  {
    "title": "ShortcutTileColor.red | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/red",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.pink | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/pink",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.purple | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/purple",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.orange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/orange",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "siriTipViewStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/siritipviewstyle(_:)",
    "html": "Parameters\nstyle\n\nThe style to set.\n\nReturn Value\n\nA view that uses the specified style on its child views."
  },
  {
    "title": "AppIntent Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/openintent/appintent-implementations",
    "html": "Topics\nInstance Methods\nfunc perform() async throws -> some IntentResult\nPerforms the intent after resolving the provided parameters.\nType Properties\nstatic var openAppWhenRun: Bool\nA boolean property that tells the system to consider the app intent even if its app is not in the foreground."
  },
  {
    "title": "init(for:summary:optionsCollections:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentation/init(for:summary:optionscollections:)",
    "html": "Parameters\nfor\n\nA KeyPath representing the parameter being used in the presentation.\n\nsummary\n\nAn AppShortcutParameterPresentationSummary representing the summary of the parameter used in the presentation.\n\noptionsCollection\n\nA closure returning an AppShortcutOptionsCollectionSpecification that defines the options available for the parameter used in the presentation."
  },
  {
    "title": "Value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/openintent/value",
    "html": "Required"
  },
  {
    "title": "init(stringInterpolation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring/init(stringinterpolation:)",
    "html": "Parameters\nstringInterpolation\n\nAn instance of StringInterpolation which has had each segment of the string literal appended to it.\n\nDiscussion\n\nMost StringInterpolation types will store information about the literals and interpolations appended to them in one or more properties. init(stringInterpolation:) should use these properties to initialize the instance."
  },
  {
    "title": "requestConfirmation(for:dialog:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametercontext/requestconfirmation(for:dialog:view:)-6n0qp",
    "html": "Parameters\nitemToConfirm\n\nthe items to be presented to the user for confirmation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nview\n\na view to display when requesting confirmation."
  },
  {
    "title": "needsValueError(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametercontext/needsvalueerror(_:)",
    "html": "Parameters\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nan error that should be thrown within the intent perform() method."
  },
  {
    "title": "ShortcutTileColor.grape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/grape",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.blue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/blue",
    "html": "See Also\nGetting the tile colors\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "AppShortcutPhrase.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "AppShortcutPhrase.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "AppShortcutPhrase.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "init(stringInterpolation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/init(stringinterpolation:)",
    "html": "Parameters\nstringInterpolation\n\nAn instance of StringInterpolation which has had each segment of the string literal appended to it.\n\nDiscussion\n\nMost StringInterpolation types will store information about the literals and interpolations appended to them in one or more properties. init(stringInterpolation:) should use these properties to initialize the instance."
  },
  {
    "title": "NegativeAppShortcutPhrase.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "AppShortcutPhrase.StringInterpolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/stringinterpolation",
    "html": "Topics\nCreating a string interpolation\ninit(literalCapacity: Int, interpolationCount: Int)\nCreates an empty instance ready to be filled with string literal content.\nAppending values to the string\nfunc appendLiteral(String)\nAppends a literal segment to the interpolation.\nfunc appendInterpolation(AppShortcutPhraseToken)\nInstance Methods\nfunc appendInterpolation<Value, Subject>(Subject)\nType Aliases\ntypealias StringLiteralType\nThe type that should be used for literal segments.\nRelationships\nConforms To\nStringInterpolationProtocol\nSee Also\nCreating a shortcut phrase\ninit(String)\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: AppShortcutPhrase<Intent>.StringInterpolation)\nCreates an instance from a string interpolation.\nenum AppShortcutPhraseToken\nDynamic values you can include in the spoken phrases that run your shortcut."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance.\n\nSee Also\nCreating a shortcut phrase\ninit(String)\ninit(stringInterpolation: AppShortcutPhrase<Intent>.StringInterpolation)\nCreates an instance from a string interpolation.\nstruct StringInterpolation\nA string you construct using literal values, content from intent parameters, and other interpolated values.\nenum AppShortcutPhraseToken\nDynamic values you can include in the spoken phrases that run your shortcut."
  },
  {
    "title": "init(_:title:systemImageName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollection/init(_:title:systemimagename:)",
    "html": "Parameters\ndynamicOptionsProvider\n\nThe object that provides the dynamic options for an App Shortcut.\n\ntitle\n\nA localized string that represents the title for the collection of dynamic options in the Shortcuts app.\n\nsystemImageName\n\nThe name of the system image for the collection of App Shortcuts."
  },
  {
    "title": "ShortcutTileColor.tangerine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/tangerine",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.teal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/teal",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.navy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/navy",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.lime | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/lime",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "requestConfirmation(for:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametercontext/requestconfirmation(for:dialog:)",
    "html": "Parameters\nitemToConfirm\n\nthe items to be presented to the user for confirmation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nwhether or not the user confirmed the value"
  },
  {
    "title": "needsDisambiguationError(among:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametercontext/needsdisambiguationerror(among:dialog:)",
    "html": "Parameters\nitemsToDisambiguate\n\nthe list of items to be presented to the user for disambiguation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nan error that should be thrown within the intent perform() method."
  },
  {
    "title": "requestDisambiguation(among:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametercontext/requestdisambiguation(among:dialog:)",
    "html": "Parameters\nitemsToDisambiguate\n\nthe list of items to be presented to the user for disambiguation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nthe value supplied by the user"
  },
  {
    "title": "init(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysortingoptions/init(content:)",
    "html": "See Also\nCreating the sorting options\nenum EntityQuerySortingOptionsBuilder\nA result builder that allows you to declaratively describe the sorting options for an entity query."
  },
  {
    "title": "ShortcutTileColor.grayGreen | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/graygreen",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "ShortcutTileColor.lightBlue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor/lightblue",
    "html": "See Also\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color."
  },
  {
    "title": "init(stringInterpolation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/init(stringinterpolation:)",
    "html": "Parameters\nstringInterpolation\n\nAn instance of StringInterpolation which has had each segment of the string literal appended to it.\n\nDiscussion\n\nMost StringInterpolation types will store information about the literals and interpolations appended to them in one or more properties. init(stringInterpolation:) should use these properties to initialize the instance.\n\nSee Also\nCreating a shortcut phrase\ninit(String)\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\nstruct StringInterpolation\nA string you construct using literal values, content from intent parameters, and other interpolated values.\nenum AppShortcutPhraseToken\nDynamic values you can include in the spoken phrases that run your shortcut."
  },
  {
    "title": "NegativeAppShortcutPhrase.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "NegativeAppShortcutPhrase.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "AppShortcutPhraseToken | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrasetoken",
    "html": "Topics\nGetting the tokens\ncase applicationName\nOperators\nstatic func == (AppShortcutPhraseToken, AppShortcutPhraseToken) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nCreating a shortcut phrase\ninit(String)\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: AppShortcutPhrase<Intent>.StringInterpolation)\nCreates an instance from a string interpolation.\nstruct StringInterpolation\nA string you construct using literal values, content from intent parameters, and other interpolated values."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "EntityQuerySort.Ordering | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysort/ordering",
    "html": "Topics\nOperators\nstatic func == (EntityQuerySort<Entity>.Ordering, EntityQuerySort<Entity>.Ordering) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase ascending\ncase descending\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting the sort order\nlet order: EntityQuerySort<Entity>.Ordering"
  },
  {
    "title": "order | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysort/order",
    "html": "See Also\nGetting the sort order\nenum Ordering"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase/init(_:)",
    "html": "See Also\nCreating a shortcut phrase\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: AppShortcutPhrase<Intent>.StringInterpolation)\nCreates an instance from a string interpolation.\nstruct StringInterpolation\nA string you construct using literal values, content from intent parameters, and other interpolated values.\nenum AppShortcutPhraseToken\nDynamic values you can include in the spoken phrases that run your shortcut."
  },
  {
    "title": "NegativeAppShortcutPhrase.StringInterpolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase/stringinterpolation",
    "html": "Overview\n\nThe StringLiteralType of an interpolation type must match the StringLiteralType of the conforming type.\n\nTopics\nInitializers\ninit(literalCapacity: Int, interpolationCount: Int)\nCreates an empty instance ready to be filled with string literal content.\nInstance Methods\nfunc appendInterpolation(AppShortcutPhraseToken)\nfunc appendLiteral(String)\nAppends a literal segment to the interpolation.\nType Aliases\ntypealias StringLiteralType\nThe type that should be used for literal segments.\nRelationships\nConforms To\nStringInterpolationProtocol"
  },
  {
    "title": "requestConfirmation(for:dialog:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametercontext/requestconfirmation(for:dialog:view:)-97i0g",
    "html": "Parameters\nitemToConfirm\n\nthe items to be presented to the user for confirmation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nview\n\na view to display when requesting confirmation."
  },
  {
    "title": "requestValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametercontext/requestvalue(_:)",
    "html": "Parameters\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nthe value supplied by the user"
  },
  {
    "title": "EntityQuerySortingOptionsBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysortingoptionsbuilder",
    "html": "Topics\nBuilding sorting options\nstatic func buildBlock(EntityQuerySortableByProperty<Entity>...) -> [EntityQuerySortableByProperty<Entity>]\nType Methods\nstatic func buildExpression(EntityQuerySortableByProperty<Entity>) -> EntityQuerySortableByProperty<Entity>\nSee Also\nCreating the sorting options\ninit(content: () -> [EntityQuerySortableByProperty<Entity>])"
  },
  {
    "title": "IsBetweenComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/isbetweencomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (InputType, InputType) -> ComparatorMappingType)\nDeclares support for Between comparisons between a property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType, InputType) -> ComparatorMappingType)\nDeclares support for Between comparisons between a property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nEquatable comparisons\nclass EqualToComparator\nAn object that determines whether the value of an equatable property is equal to the specified value.\nclass NotEqualToComparator\nAn object that determines whether the value of an equatable property is not equal to the specified value.\nclass GreaterThanComparator\nAn object that determines whether the value of a comparable property is greater than the specified value.\nclass GreaterThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is greater than or equal to the specified value.\nclass LessThanComparator\nAn object that determines whether the value of a comparable property is less than the specified value.\nclass LessThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is less than or equal to the specified value."
  },
  {
    "title": "ContainsComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/containscomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between a String property and user-supplied values.\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between an optional Array property and user-supplied values.\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between a AttributedString? property and user-supplied values.\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between a String? property and user-supplied values.\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between an Array property and user-supplied values.\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between a AttributedString property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between a String property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between an Array property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between a String? property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between an optional Array property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between a AttributedString property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the contains operator between a AttributedString? property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator"
  },
  {
    "title": "HasPrefixComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasprefixcomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the hasPrefix operator between a String property and user-supplied values.\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the hasPrefix operator between a String property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the hasPrefix operator between a String property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the hasPrefix operator between a String property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nString comparisons\nclass HasSuffixComparator\nAn object that determines whether the value of a string property has the specified suffix.\nenum StringComparisonOperator"
  },
  {
    "title": "Output | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolver/output",
    "html": "Required\n\nSee Also\nResolving the type\nfunc resolve(from: Self.Input, context: IntentParameterContext<Self.Output>) async throws -> Self.Output?\nConverts the specified value into the expected data type.\n\nRequired\n\nassociatedtype Input : _IntentValue\n\nRequired"
  },
  {
    "title": "EmptyResolverSpecification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/emptyresolverspecification",
    "html": "Topics\nCreating the specification type\ninit()\nIterating over the values\nfunc makeIterator() -> IndexingIterator<[Resolver]>\nReturns an iterator over the elements of this sequence.\ntypealias Output\nOperators\nstatic func == (EmptyResolverSpecification<Value>, EmptyResolverSpecification<Value>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Element\nA type representing the sequence’s elements.\ntypealias Iterator\nA type that provides the sequence’s iteration interface and encapsulates its iteration state.\nDefault Implementations\nEquatable Implementations\nSequence Implementations\nRelationships\nConforms To\nEquatable\nHashable\nResolverSpecification\nSendable\nSequence\nSee Also\nManaging the resolution process\nprotocol ResolverSpecification\nAn internal type that a resolver uses to convert data values.\nenum ResolverSpecificationBuilder\nA result builder that declaratively specifies a set of resolvers."
  },
  {
    "title": "ResolverSpecification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecification",
    "html": "Overview\n\nDon’t use a ResolverSpecification type directly in your code. The system uses this type internally to manage the resolution process.\n\nTopics\nGetting the value type\nassociatedtype Output : _IntentValue\n\nRequired\n\nRelationships\nInherits From\nEquatable\nHashable\nSendable\nSequence\nConforming Types\nEmptyResolverSpecification\nSee Also\nManaging the resolution process\nstruct EmptyResolverSpecification\nAn internal type that a resolver uses to convert data values.\nenum ResolverSpecificationBuilder\nA result builder that declaratively specifies a set of resolvers."
  },
  {
    "title": "EntityQueryComparatorsBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatorsbuilder",
    "html": "Topics\nBuilding query comparators\nstatic func buildBlock(AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>...) -> [AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>]\nstruct AnyEntityQueryComparator\nA type that erases the type information of the underlying query comparator.\nclass EntityQueryComparator\nThe base class for all concrete entity query comparators.\nType Methods\nstatic func buildExpression(EntityQueryComparator<Property, PropertyType, PropertyType.UnwrappedType, ComparatorMappingType>) -> AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>\nstatic func buildExpression(EntityQueryComparator<Property, PropertyType, PropertyType, ComparatorMappingType>) -> AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>\nstatic func buildExpression<InputType>(ContainsComparator<Property, PropertyType, InputType, ComparatorMappingType>) -> AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>\nstatic func buildExpression<InputType>(IsBetweenComparator<Property, PropertyType, InputType, ComparatorMappingType>) -> AnyEntityQueryComparator<Entity, Subject, Property, PropertyType, ComparatorMappingType>\nSee Also\nCreating queryable properties\ntypealias QueryComparators\nA type alias for the type that represents a collection of query comparators."
  },
  {
    "title": "init(_:entityProvider:comparators:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityqueryproperty/init(_:entityprovider:comparators:)",
    "html": "Parameters\nkeyPath\n\nThe keypath to the property that this EntityQueryProperty applies to. The target property type determines which comparator modifiers will be available.\n\nentityProvider\n\nClosure which, given a Entity instance, returns the appropriate Subject instance to apply EntityQueryComparators to.\n\ncomparators\n\nThe set of EntityQueryComparators that this property supports being queried by."
  },
  {
    "title": "init(_:comparators:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityqueryproperty/init(_:comparators:)",
    "html": "Parameters\ntitle\n\nA short, localized, human-readable string that describes the query property using a title case verb + noun.\n\nkeyPath\n\nThe keypath to the property that this EntityQueryProperty applies to. The target property type determines which comparator modifiers will be available.\n\ncomparators\n\nThe set of EntityQueryComparators that this property supports being queried by."
  },
  {
    "title": "CustomDebugStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameterdependency/customdebugstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar debugDescription: String\nA textual representation of this instance, suitable for debugging.\nAvailable when Intent conforms to AppIntent."
  },
  {
    "title": "ResolverSpecificationBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolverspecificationbuilder",
    "html": "Topics\nBuilding the resolver specification\nstatic func buildBlock() -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0>(R0) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1>(R0, R1) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2>(R0, R1, R2) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3>(R0, R1, R2, R3) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4>(R0, R1, R2, R3, R4) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5>(R0, R1, R2, R3, R4, R5) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6>(R0, R1, R2, R3, R4, R5, R6) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7>(R0, R1, R2, R3, R4, R5, R6, R7) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8>(R0, R1, R2, R3, R4, R5, R6, R7, R8) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nType Methods\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10>(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11>(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12>(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13>(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nstatic func buildBlock<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14>(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14) -> some ResolverSpecification\nAvailable when Property conforms to _IntentValue.\nSee Also\nManaging the resolution process\nprotocol ResolverSpecification\nAn internal type that a resolver uses to convert data values.\nstruct EmptyResolverSpecification\nAn internal type that a resolver uses to convert data values."
  },
  {
    "title": "ParameterSummaryCaseBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasebuilder",
    "html": "Topics\nBuilding switch statement cases\nstatic func buildBlock<C0, DefaultSummary>(C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, DefaultSummary>(C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, DefaultSummary>(C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, DefaultSummary>(C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, DefaultSummary>(C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, DefaultSummary>(C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, DefaultSummary>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>) -> ParameterSummaryTupleCaseCondition<Intent, Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, ParameterSummaryDefaultCaseCondition<Intent, Value, DefaultSummary>)>\nAvailable when Intent conforms to AppIntent and Value conforms to _IntentValue.\nstruct ParameterSummaryTupleCaseCondition\nA type that represents a collection of case conditions for a specific switch statement.\nType Methods\nstatic func buildExpression<C0>(C0) -> C0"
  },
  {
    "title": "RangeCheckingResolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doubleresolver/rangecheckingresolver-implementations",
    "html": "Topics\nInstance Methods\nfunc checkParameterRangeContains<Value>(value: Value, context: IntentParameterContext<Self.Output>) throws"
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "SiriTipView.Body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/body-swift.typealias",
    "html": "See Also\nImplementing the view\nvar body: some View\nThe content and behavior of the view."
  },
  {
    "title": "EntityQueryPropertiesBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerypropertiesbuilder",
    "html": "Topics\nBuilding queryable properties\nstatic func buildBlock(EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>...) -> [EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>]\nclass EntityQueryPropertyDeclaration\nAn object that identifies a specific entity property and the query comparators it supports.\nType Methods\nstatic func buildExpression(EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>) -> EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>"
  },
  {
    "title": "ParameterSummarySwitchCondition.WidgetFamily | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummaryswitchcondition/widgetfamily",
    "html": "Topics\nOperators\nstatic func == (ParameterSummarySwitchCondition<Intent, Value, CaseCondition>.WidgetFamily, ParameterSummarySwitchCondition<Intent, Value, CaseCondition>.WidgetFamily) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase widgetFamily\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/boolfromstringresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Intent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummary/intent",
    "html": "Required"
  },
  {
    "title": "HasSuffixComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hassuffixcomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the hasSuffix operator between a String property and user-supplied values.\ninit(mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the hasSuffix operator between a String? property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the hasSuffix operator between a String? property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (InputType) -> ComparatorMappingType)\nDeclares support for the hasSuffix operator between a String property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nString comparisons\nclass HasPrefixComparator\nAn object that determines whether the value of a string property has the specified prefix.\nenum StringComparisonOperator"
  },
  {
    "title": "GreaterThanOrEqualToComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/greaterthanorequaltocomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (PropertyType.UnwrappedType) -> ComparatorMappingType)\nDeclares support for Comparable > comparisons between a property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (PropertyType.UnwrappedType) -> ComparatorMappingType)\nDeclares support for Comparable > comparisons between a property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nEquatable comparisons\nclass EqualToComparator\nAn object that determines whether the value of an equatable property is equal to the specified value.\nclass NotEqualToComparator\nAn object that determines whether the value of an equatable property is not equal to the specified value.\nclass GreaterThanComparator\nAn object that determines whether the value of a comparable property is greater than the specified value.\nclass LessThanComparator\nAn object that determines whether the value of a comparable property is less than the specified value.\nclass LessThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is less than or equal to the specified value.\nclass IsBetweenComparator\nThis comparator is only supported for Date types in Shortcuts."
  },
  {
    "title": "LessThanOrEqualToComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/lessthanorequaltocomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (PropertyType.UnwrappedType) -> ComparatorMappingType)\nDeclares support for Comparable <= comparisons between a property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (PropertyType.UnwrappedType) -> ComparatorMappingType)\nDeclares support for Comparable <= comparisons between a property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nEquatable comparisons\nclass EqualToComparator\nAn object that determines whether the value of an equatable property is equal to the specified value.\nclass NotEqualToComparator\nAn object that determines whether the value of an equatable property is not equal to the specified value.\nclass GreaterThanComparator\nAn object that determines whether the value of a comparable property is greater than the specified value.\nclass GreaterThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is greater than or equal to the specified value.\nclass LessThanComparator\nAn object that determines whether the value of a comparable property is less than the specified value.\nclass IsBetweenComparator\nThis comparator is only supported for Date types in Shortcuts."
  },
  {
    "title": "GreaterThanComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/greaterthancomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (PropertyType.UnwrappedType) -> ComparatorMappingType)\nDeclares support for Comparable > comparisons between a property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (PropertyType.UnwrappedType) -> ComparatorMappingType)\nDeclares support for Comparable > comparisons between a property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nEquatable comparisons\nclass EqualToComparator\nAn object that determines whether the value of an equatable property is equal to the specified value.\nclass NotEqualToComparator\nAn object that determines whether the value of an equatable property is not equal to the specified value.\nclass GreaterThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is greater than or equal to the specified value.\nclass LessThanComparator\nAn object that determines whether the value of a comparable property is less than the specified value.\nclass LessThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is less than or equal to the specified value.\nclass IsBetweenComparator\nThis comparator is only supported for Date types in Shortcuts."
  },
  {
    "title": "StringComparisonOperator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringcomparisonoperator",
    "html": "Topics\nOperators\nstatic func == (StringComparisonOperator, StringComparisonOperator) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase contains\ncase doesNotContain\ncase hasPrefix\ncase hasSuffix\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nString comparisons\nclass HasPrefixComparator\nAn object that determines whether the value of a string property has the specified prefix.\nclass HasSuffixComparator\nAn object that determines whether the value of a string property has the specified suffix."
  },
  {
    "title": "EqualToComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equaltocomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (PropertyType) -> ComparatorMappingType)\nDeclares support for Equatable == comparisons between a property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (PropertyType) -> ComparatorMappingType)\nDeclares support for Equatable == comparisons between a property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nEquatable comparisons\nclass NotEqualToComparator\nAn object that determines whether the value of an equatable property is not equal to the specified value.\nclass GreaterThanComparator\nAn object that determines whether the value of a comparable property is greater than the specified value.\nclass GreaterThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is greater than or equal to the specified value.\nclass LessThanComparator\nAn object that determines whether the value of a comparable property is less than the specified value.\nclass LessThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is less than or equal to the specified value.\nclass IsBetweenComparator\nThis comparator is only supported for Date types in Shortcuts."
  },
  {
    "title": "LessThanComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/lessthancomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (PropertyType.UnwrappedType) -> ComparatorMappingType)\nDeclares support for Comparable > comparisons between a property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (PropertyType.UnwrappedType) -> ComparatorMappingType)\nDeclares support for Comparable > comparisons between a property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nEquatable comparisons\nclass EqualToComparator\nAn object that determines whether the value of an equatable property is equal to the specified value.\nclass NotEqualToComparator\nAn object that determines whether the value of an equatable property is not equal to the specified value.\nclass GreaterThanComparator\nAn object that determines whether the value of a comparable property is greater than the specified value.\nclass GreaterThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is greater than or equal to the specified value.\nclass LessThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is less than or equal to the specified value.\nclass IsBetweenComparator\nThis comparator is only supported for Date types in Shortcuts."
  },
  {
    "title": "NotEqualToComparator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/notequaltocomparator",
    "html": "Topics\nInitializers\ninit(mappingTransform: (PropertyType) -> ComparatorMappingType)\nDeclares support for Equatable != comparisons between a property and user-supplied values.\ninit<Spec>(withResolvers: () -> Spec, mappingTransform: (PropertyType) -> ComparatorMappingType)\nDeclares support for Equatable != comparisons between a property and user-supplied values.\nRelationships\nInherits From\nEntityQueryComparator\nSee Also\nEquatable comparisons\nclass EqualToComparator\nAn object that determines whether the value of an equatable property is equal to the specified value.\nclass GreaterThanComparator\nAn object that determines whether the value of a comparable property is greater than the specified value.\nclass GreaterThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is greater than or equal to the specified value.\nclass LessThanComparator\nAn object that determines whether the value of a comparable property is less than the specified value.\nclass LessThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is less than or equal to the specified value.\nclass IsBetweenComparator\nThis comparator is only supported for Date types in Shortcuts."
  },
  {
    "title": "EntityQueryPropertyDeclaration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerypropertydeclaration",
    "html": "Relationships\nInherited By\nEntityQueryProperty\nSee Also\nBuilding queryable properties\nstatic func buildBlock(EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>...) -> [EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>]"
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/type",
    "html": "See Also\nGetting the file information\nvar filename: String\nThe human-readable name of the file, which will be displayed to the user.\nvar fileURL: URL?\nURL to the file on disk, if any. If the file isn’t stored on disk, access the contents using the data property.\nvar data: Data\nThe contents of the file. If the file was created with a URL, accessing this property will memory map the file contents.\nvar removedOnCompletion: Bool\nIndicates whether the file should be automatically deleted from disk when the Shortcut is done running. false by default."
  },
  {
    "title": "init(fileURL:filename:type:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/init(fileurl:filename:type:)",
    "html": "See Also\nCreating a file\ninit(data: Data, filename: String, type: UTType?)"
  },
  {
    "title": "filename | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/filename",
    "html": "See Also\nGetting the file information\nvar fileURL: URL?\nURL to the file on disk, if any. If the file isn’t stored on disk, access the contents using the data property.\nvar type: UTType?\nThe uniform type identifier of the file. (i.e. “public.json”, “public.png”, or any custom type) More information about uniform type identifiers can be found in <CoreServices/UTCoreTypes.h>\nvar data: Data\nThe contents of the file. If the file was created with a URL, accessing this property will memory map the file contents.\nvar removedOnCompletion: Bool\nIndicates whether the file should be automatically deleted from disk when the Shortcut is done running. false by default."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/name-swift.property",
    "html": "See Also\nGetting the person’s name\nenum Name\nA type that stores name-related information for a person."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/image",
    "html": "See Also\nGetting identifying information\nvar handle: IntentPerson.Handle?\nThe primary Handle used to contact this IntentPerson\nvar aliases: [IntentPerson.Handle]\nOther secondary Handles used to contact this IntentPerson, if any\nvar isMe: Bool\nWhether this IntentPerson represents the owner of the device\nstruct Handle\nA type that manages a single way to contact a person.\nenum ParameterMode\nThe type of interface to show when someone chooses a parameter that contains information about a person."
  },
  {
    "title": "handle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.property",
    "html": "See Also\nGetting identifying information\nvar aliases: [IntentPerson.Handle]\nOther secondary Handles used to contact this IntentPerson, if any\nvar isMe: Bool\nWhether this IntentPerson represents the owner of the device\nvar image: DisplayRepresentation.Image?\nAn image representing this IntentPerson\nstruct Handle\nA type that manages a single way to contact a person.\nenum ParameterMode\nThe type of interface to show when someone chooses a parameter that contains information about a person."
  },
  {
    "title": "EntityQueryProperty.QueryComparators | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityqueryproperty/querycomparators",
    "html": "See Also\nCreating queryable properties\nenum EntityQueryComparatorsBuilder\nA result builder that allows you to declaratively describe the comparators for a queryable property."
  },
  {
    "title": "init(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummaryswitchcondition/init(_:_:)-4vxvs",
    "html": "Discussion\n\nFor example:\n\nstatic var parameterSummary: some ParameterSummary {\n    Switch(.widgetFamily) {\n        Case(.systemLarge) {\n            Summary(\"Parameter summary for large widgets\")\n        }\n        Case([.systemSmall, .systemMedium]) {\n            Summary(\"Parameter summary for small and medium widgets\")\n        }\n        DefaultCase {\n            Summary(\"Default parameter summary\")\n        }\n    }\n}\n"
  },
  {
    "title": "ParameterSummaryString.StringInterpolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/stringinterpolation",
    "html": "Overview\n\nThe StringLiteralType of an interpolation type must match the StringLiteralType of the conforming type.\n\nTopics\nInitializers\ninit(literalCapacity: Int, interpolationCount: Int)\nCreates an empty instance ready to be filled with string literal content.\nInstance Methods\nfunc appendInterpolation<ValueType, Subject>(Subject)\nfunc appendLiteral(String)\nAppends a literal segment to the interpolation.\nType Aliases\ntypealias StringLiteralType\nThe type that should be used for literal segments.\nRelationships\nConforms To\nStringInterpolationProtocol\nSee Also\nCreating the summary string\ninit(String)\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: ParameterSummaryString<Intent>.StringInterpolation)\nCreates an instance from a string interpolation."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "ParameterSummaryString.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "ParameterSummaryString.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "init(stringInterpolation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/init(stringinterpolation:)",
    "html": "Parameters\nstringInterpolation\n\nAn instance of StringInterpolation which has had each segment of the string literal appended to it.\n\nDiscussion\n\nMost StringInterpolation types will store information about the literals and interpolations appended to them in one or more properties. init(stringInterpolation:) should use these properties to initialize the instance.\n\nSee Also\nCreating the summary string\ninit(String)\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\nstruct StringInterpolation\nThe type each segment of a string literal containing interpolations should be appended to."
  },
  {
    "title": "ParameterSummaryString.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/init(_:)",
    "html": "See Also\nCreating the summary string\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: ParameterSummaryString<Intent>.StringInterpolation)\nCreates an instance from a string interpolation.\nstruct StringInterpolation\nThe type each segment of a string literal containing interpolations should be appended to."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance.\n\nSee Also\nCreating the summary string\ninit(String)\ninit(stringInterpolation: ParameterSummaryString<Intent>.StringInterpolation)\nCreates an instance from a string interpolation.\nstruct StringInterpolation\nThe type each segment of a string literal containing interpolations should be appended to."
  },
  {
    "title": "isMe | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/isme",
    "html": "See Also\nGetting identifying information\nvar handle: IntentPerson.Handle?\nThe primary Handle used to contact this IntentPerson\nvar aliases: [IntentPerson.Handle]\nOther secondary Handles used to contact this IntentPerson, if any\nvar image: DisplayRepresentation.Image?\nAn image representing this IntentPerson\nstruct Handle\nA type that manages a single way to contact a person.\nenum ParameterMode\nThe type of interface to show when someone chooses a parameter that contains information about a person."
  },
  {
    "title": "RangeCheckingResolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intresolver/rangecheckingresolver-implementations",
    "html": "Topics\nInstance Methods\nfunc checkParameterRangeContains<Value>(value: Value, context: IntentParameterContext<Self.Output>) throws"
  },
  {
    "title": "add(key:dependency:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appdependencymanager/add(key:dependency:)-3l7jr",
    "html": "Discussion\n\nDependencies are not loaded until they are needed when performing an intent or query."
  },
  {
    "title": "add(key:dependency:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appdependencymanager/add(key:dependency:)-14j68",
    "html": "Discussion\n\nDependencies are not loaded until they are needed when performing an intent or query."
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/_intentvalue-implementations",
    "html": "Topics\nType Aliases\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var defaultResolverSpecification: EmptyResolverSpecification<IntentFile>"
  },
  {
    "title": "TypeDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/typedisplayrepresentable-implementations",
    "html": "Topics\nType Properties\nstatic var typeDisplayRepresentation: TypeDisplayRepresentation\nA short, localized, human-readable name for the type."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "InstanceDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/instancedisplayrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar displayRepresentation: DisplayRepresentation\nThe visual elements to display when presenting an instance of the type.\nvar localizedStringResource: LocalizedStringResource"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (IntentFile, IntentFile) -> Bool\nReturns a Boolean value indicating whether two values are equal."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/boolfromstringresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "Hashable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/hashable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/boolfromstringresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromdoubleresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintenterror/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintenterror/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintenterror/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "RangeCheckingResolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromdoubleresolver/rangecheckingresolver-implementations",
    "html": "Topics\nInstance Methods\nfunc checkParameterRangeContains<Value>(value: Value, context: IntentParameterContext<Self.Output>) throws"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromdoubleresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromdoubleresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/boolfromstringresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "perform() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/perform()-2523c",
    "html": "Discussion\n\nIn the body of this function, validate your parameters and provide the system with information about needed parameter values or user clarification."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromdoubleresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolver/resolve(from:context:)",
    "html": "Required\n\nParameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails.\n\nSee Also\nResolving the type\nassociatedtype Input : _IntentValue\n\nRequired\n\nassociatedtype Output : _IntentValue\n\nRequired"
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromdoubleresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "Input | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolver/input",
    "html": "Required\n\nSee Also\nResolving the type\nfunc resolve(from: Self.Input, context: IntentParameterContext<Self.Output>) async throws -> Self.Output?\nConverts the specified value into the expected data type.\n\nRequired\n\nassociatedtype Output : _IntentValue\n\nRequired"
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/boolfromstringresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/boolfromstringresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview/body-swift.property",
    "html": "See Also\nImplementing the view\ntypealias Body\nThe type of view representing the body of this view."
  },
  {
    "title": "data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/data",
    "html": "See Also\nGetting the file information\nvar filename: String\nThe human-readable name of the file, which will be displayed to the user.\nvar fileURL: URL?\nURL to the file on disk, if any. If the file isn’t stored on disk, access the contents using the data property.\nvar type: UTType?\nThe uniform type identifier of the file. (i.e. “public.json”, “public.png”, or any custom type) More information about uniform type identifiers can be found in <CoreServices/UTCoreTypes.h>\nvar removedOnCompletion: Bool\nIndicates whether the file should be automatically deleted from disk when the Shortcut is done running. false by default."
  },
  {
    "title": "fileURL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/fileurl",
    "html": "Discussion\n\nIf the file was created elsewhere on the system, make sure to surround access to file contents with startAccessingSecurityScopedResource() and stopAccessingSecurityScopedResource().\n\nSee Also\nGetting the file information\nvar filename: String\nThe human-readable name of the file, which will be displayed to the user.\nvar type: UTType?\nThe uniform type identifier of the file. (i.e. “public.json”, “public.png”, or any custom type) More information about uniform type identifiers can be found in <CoreServices/UTCoreTypes.h>\nvar data: Data\nThe contents of the file. If the file was created with a URL, accessing this property will memory map the file contents.\nvar removedOnCompletion: Bool\nIndicates whether the file should be automatically deleted from disk when the Shortcut is done running. false by default."
  },
  {
    "title": "removedOnCompletion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile/removedoncompletion",
    "html": "See Also\nGetting the file information\nvar filename: String\nThe human-readable name of the file, which will be displayed to the user.\nvar fileURL: URL?\nURL to the file on disk, if any. If the file isn’t stored on disk, access the contents using the data property.\nvar type: UTType?\nThe uniform type identifier of the file. (i.e. “public.json”, “public.png”, or any custom type) More information about uniform type identifiers can be found in <CoreServices/UTCoreTypes.h>\nvar data: Data\nThe contents of the file. If the file was created with a URL, accessing this property will memory map the file contents."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteriafromstringresolverspecificification/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "LocalizedError Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintenterror/localizederror-implementations",
    "html": "Topics\nInstance Properties\nvar errorDescription: String?\nA localized message describing what error occurred.\nvar failureReason: String?\nA localized message describing the reason for the failure.\nvar helpAnchor: String?\nA localized message providing “help” text if the user requests help.\nvar recoverySuggestion: String?\nA localized message describing how one might recover from the failure."
  },
  {
    "title": "Error Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintenterror/error-implementations",
    "html": "Topics\nInstance Properties\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintenterror/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromdoubleresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "InputConnectionBehavior.connectToPreviousIntentResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/inputconnectionbehavior/connecttopreviousintentresult",
    "html": "See Also\nGetting the connection behaviors\ncase `default`\nA behavior that allows the system to determine if the parameter accepts the output.\ncase never\nA behavior that prohibits the parameter from accepting the output."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/inputconnectionbehavior/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/inputconnectionbehavior/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "IntentPerson.Handle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/handle-swift.struct",
    "html": "Topics\nGetting the handle label\nenum Label\nA location description that applies to the handle’s content.\nOperators\nstatic func == (IntentPerson.Handle, IntentPerson.Handle) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(IntentPerson.Handle.Value, label: IntentPerson.Handle.Label)\ninit(applicationDefined: String, label: String?)\ninit(emailAddress: String, label: IntentPerson.Handle.Label)\ninit(phoneNumber: String, label: IntentPerson.Handle.Label)\nInstance Properties\nvar hashValue: Int\nThe hash value.\nvar label: IntentPerson.Handle.Label\nvar value: IntentPerson.Handle.Value\nThe string value for this Handle, such as the specific phone number or email address\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nEnumerations\nenum Value\nA type representing the kind of the point of contact, such as whether it is an email address, or a phone number.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting identifying information\nvar handle: IntentPerson.Handle?\nThe primary Handle used to contact this IntentPerson\nvar aliases: [IntentPerson.Handle]\nOther secondary Handles used to contact this IntentPerson, if any\nvar isMe: Bool\nWhether this IntentPerson represents the owner of the device\nvar image: DisplayRepresentation.Image?\nAn image representing this IntentPerson\nenum ParameterMode\nThe type of interface to show when someone chooses a parameter that contains information about a person."
  },
  {
    "title": "IntentPerson.ParameterMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/parametermode",
    "html": "Topics\nGetting the interface type\ncase contact\nThe parameter shows an interface allowing the user to pick a contact\ncase email\nThe parameter shows an interface allowing the user to pick an email\ncase emailOrPhone\nThe parameter shows an interface allowing the user to pick an email or phone number\ncase phone\nThe parameter shows an interface allowing the user to pick a phone number\nCreating a parameter mode\ninit?(rawValue: String)\nCreates a new instance with the specified raw value.\nInstance Properties\nvar rawValue: String\nThe corresponding value of the raw type.\nType Aliases\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\nDefault Implementations\nEquatable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRawRepresentable\nSee Also\nGetting identifying information\nvar handle: IntentPerson.Handle?\nThe primary Handle used to contact this IntentPerson\nvar aliases: [IntentPerson.Handle]\nOther secondary Handles used to contact this IntentPerson, if any\nvar isMe: Bool\nWhether this IntentPerson represents the owner of the device\nvar image: DisplayRepresentation.Image?\nAn image representing this IntentPerson\nstruct Handle\nA type that manages a single way to contact a person."
  },
  {
    "title": "IntentPerson.Name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/name-swift.enum",
    "html": "Topics\nGetting a displayable name\ncase displayName(String)\nThe user-visible display name of this IntentPerson.\nGetting the name components\ncase components(PersonNameComponents)\nStructured components of this IntentPerson’s name\nRelationships\nConforms To\nSendable\nSee Also\nGetting the person’s name\nvar name: IntentPerson.Name\nThe name of this IntentPerson"
  },
  {
    "title": "aliases | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/aliases",
    "html": "See Also\nGetting identifying information\nvar handle: IntentPerson.Handle?\nThe primary Handle used to contact this IntentPerson\nvar isMe: Bool\nWhether this IntentPerson represents the owner of the device\nvar image: DisplayRepresentation.Image?\nAn image representing this IntentPerson\nstruct Handle\nA type that manages a single way to contact a person.\nenum ParameterMode\nThe type of interface to show when someone chooses a parameter that contains information about a person."
  },
  {
    "title": "init(style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipuiview/init(style:)",
    "html": "Parameters\nstyle\n\nThe style to use for this view, defaults to automatic."
  },
  {
    "title": "style | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipuiview/style",
    "html": "See Also\nGetting the view style\nstruct SiriTipViewStyle\nThe styles to apply to the tip views you use to display spoken phrases."
  },
  {
    "title": "localizedStringResource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/casedisplayrepresentable/localizedstringresource-78c15",
    "html": "See Also\nProviding a localized description\nvar localizedStringResource: LocalizedStringResource"
  },
  {
    "title": "defaultQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity/defaultquery-3qobd",
    "html": "Discussion\n\nYou can create a query that uses identifier, name and more. For additional information, see Query."
  },
  {
    "title": "allowsDismissal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipuiview/allowsdismissal",
    "html": "Discussion\n\nDefaults to false.\n\nSee Also\nGetting the view’s configuration\nvar isPresented: Bool\nDetermines if the view should be presented to the user."
  },
  {
    "title": "localizedStringResource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/casedisplayrepresentable/localizedstringresource-7gj71",
    "html": "See Also\nProviding a localized description\nvar localizedStringResource: LocalizedStringResource\nAvailable when Self conforms to InstanceDisplayRepresentable."
  },
  {
    "title": "isPresented | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipuiview/ispresented",
    "html": "Discussion\n\nDefaults to true and gets set to false after the dismissal button is tapped. Changing this has no affect if allowsDismissal is set to false. This value is KVO compliant.\n\nSee Also\nGetting the view’s configuration\nvar allowsDismissal: Bool\nIndicates if the tip view should display a dismissal button"
  },
  {
    "title": "defaultQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity/defaultquery-8vl7p",
    "html": "Discussion\n\nYou can create a query that uses identifier, name and more. For additional information, see Query."
  },
  {
    "title": "setIntent(intent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipuiview/setintent(intent:)",
    "html": "Discussion\n\nThe provided AppIntent must be a valid App Shortcut for this view to work correctly."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance.\n\nSee Also\nCreating a representation\ninit(title: LocalizedStringResource, subtitle: LocalizedStringResource?, image: DisplayRepresentation.Image?)"
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doubleresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "add(key:dependency:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appdependencymanager/add(key:dependency:)-7j2mg",
    "html": "Discussion\n\nDependencies are not loaded until they are needed when performing an intent or query."
  },
  {
    "title": "AppDependencyManager.Error | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appdependencymanager/error",
    "html": "Topics\nEnumeration Cases\ncase failedToLoadDependency(AnyHashable, Value.Type)\ncase failedToRetrieveDependency(AnyHashable, Value.Type)\ncase incorrectDependencyType(AnyHashable, Value.Type, Any.Type)\nInstance Properties\nvar errorDescription: String?\nA localized message describing what error occurred.\nDefault Implementations\nError Implementations\nLocalizedError Implementations\nRelationships\nConforms To\nError\nLocalizedError\nSendable"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doubleresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doubleresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doubleresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doubleresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "persistentIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/persistentlyidentifiable/persistentidentifier-35ikx",
    "html": "Required Default implementations provided.\n\nDefault Implementations\nPersistentlyIdentifiable Implementations\nstatic var persistentIdentifier: String\nA string that uniquely identifies this type.\nstatic var persistentIdentifier: String\nA string that uniquely identifies this type."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doubleresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "ComparableComparisonOperator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/comparablecomparisonoperator",
    "html": "Topics\nComparable operators\ncase greaterThan\nAn operator that determines if the parameter is greater than the value.\ncase greaterThanOrEqualTo\nAn operator that determines if the parameter is greater than or equal to the value.\ncase lessThan\nAn operator that determines if the parameter is less than the value.\ncase lessThanOrEqualTo\nAn operator that determines if the parameter is less than or equal to the value.\nOperators\nstatic func == (ComparableComparisonOperator, ComparableComparisonOperator) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nCreating a conditional statement\ninit<Parameter>(KeyPath<Intent, Parameter>, HasValueComparisonOperator, () -> WhenCondition, otherwise: () -> Otherwise)\nenum EquatableComparisonOperator\nOperators that indicate the type of equality check for a conditional statement.\nenum HasValueComparisonOperator\nOperators that indicate the type of value check for a conditional statement.\nenum OneOfComparisonOperator\nOperators that indicate the type of containment check for a conditional statement."
  },
  {
    "title": "init(_:_:_:otherwise:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarywhencondition/init(_:_:_:otherwise:)",
    "html": "See Also\nCreating a conditional statement\nenum EquatableComparisonOperator\nOperators that indicate the type of equality check for a conditional statement.\nenum ComparableComparisonOperator\nOperators that indicate the type of comparison check for a conditional statement.\nenum HasValueComparisonOperator\nOperators that indicate the type of value check for a conditional statement.\nenum OneOfComparisonOperator\nOperators that indicate the type of containment check for a conditional statement."
  },
  {
    "title": "buildExpression(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutsbuilder/buildexpression(_:)",
    "html": "See Also\nBuilding App Shortcuts\nstatic func buildBlock(AppShortcut...) -> [AppShortcut]"
  },
  {
    "title": "init(_:table:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummary/init(_:table:)",
    "html": "Parameters\nsummaryString\n\nAn AppShortcutParameterPresentationSummaryString representing the summary of the AppShortcutParameterPresentation. Example: “Call (.$person)”.\n\ntable\n\nAn optional StaticString representing the table to use when localizing the summary."
  },
  {
    "title": "buildBlock(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutsbuilder/buildblock(_:)",
    "html": "See Also\nBuilding App Shortcuts\nstatic func buildExpression(AppShortcut) -> AppShortcut"
  },
  {
    "title": "IntentParameterSummary.ParameterKeyPathsBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametersummary/parameterkeypathsbuilder",
    "html": "Topics\nBuilding the path\nstatic func buildBlock(PartialKeyPath<Intent>...) -> [PartialKeyPath<Intent>]\nstatic func buildExpression<ValueType>(KeyPath<Intent, IntentParameter<ValueType>>) -> PartialKeyPath<Intent>"
  },
  {
    "title": "init(_:table:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametersummary/init(_:table:_:)",
    "html": "See Also\nCrearing a parameter summary\ninit()\ninit(() -> [PartialKeyPath<Intent>])\ninit(ParameterSummaryString<Intent>, table: String?)"
  },
  {
    "title": "init(_:table:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametersummary/init(_:table:)",
    "html": "See Also\nCrearing a parameter summary\ninit()\ninit(() -> [PartialKeyPath<Intent>])\ninit(ParameterSummaryString<Intent>, table: String?, () -> [PartialKeyPath<Intent>])"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametersummary/init(_:)",
    "html": "See Also\nCrearing a parameter summary\ninit()\ninit(ParameterSummaryString<Intent>, table: String?)\ninit(ParameterSummaryString<Intent>, table: String?, () -> [PartialKeyPath<Intent>])"
  },
  {
    "title": "wrappedValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/wrappedvalue",
    "html": "See Also\nAccessing the underlying value\nlet defaultValue: Value.UnwrappedType?\nvar projectedValue: IntentParameter<Value>"
  },
  {
    "title": "projectedValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/projectedvalue",
    "html": "See Also\nAccessing the underlying value\nlet defaultValue: Value.UnwrappedType?\nvar wrappedValue: Value"
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/_intentvalue-implementations",
    "html": "Topics\nType Aliases\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var defaultResolverSpecification: EmptyResolverSpecification<IntentPerson>"
  },
  {
    "title": "IntentPerson.Identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/identifier-swift.enum",
    "html": "Topics\nGetting the identifier types\ncase contact(String)\nAn identifier from the Contacts framework (see CNContact.identifier)\ncase applicationDefined(String)\nAn identifier specific to your app\nOperators\nstatic func == (IntentPerson.Identifier, IntentPerson.Identifier) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nGetting person-related identifiers\nvar identifier: IntentPerson.Identifier"
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/identifier-swift.property",
    "html": "See Also\nGetting person-related identifiers\nenum Identifier\nA type that manages a unique identifier for a person."
  },
  {
    "title": "InstanceDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/instancedisplayrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar displayRepresentation: DisplayRepresentation\nThe visual elements to display when presenting an instance of the type.\nvar localizedStringResource: LocalizedStringResource"
  },
  {
    "title": "TypeDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson/typedisplayrepresentable-implementations",
    "html": "Topics\nType Properties\nstatic var typeDisplayRepresentation: TypeDisplayRepresentation\nA short, localized, human-readable name for the type."
  },
  {
    "title": "results() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/dynamicoptionsprovider/results()-6c6xv",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nDynamicOptionsProvider Implementations\nfunc results() async throws -> Self.Result\nSee Also\nReturning the parameter options\nassociatedtype Result : ResultsCollection\n\nRequired"
  },
  {
    "title": "defaultResult() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/dynamicoptionsprovider/defaultresult()-7yh1v",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nEither a single value or an array of values may be provided. If an array is provided and the parameter requires a single value, only the first element of the array is used.\n\nDefault Implementations\nDynamicOptionsProvider Implementations\nfunc defaultResult() async -> Self.DefaultValue?\nThe default value for parameters using this provider when no value is provided by the user."
  },
  {
    "title": "DefaultValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/dynamicoptionsprovider/defaultvalue",
    "html": "Required"
  },
  {
    "title": "Result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/dynamicoptionsprovider/result",
    "html": "Required\n\nSee Also\nReturning the parameter options\nfunc results() async throws -> Self.Result\n\nRequired Default implementation provided."
  },
  {
    "title": "DisplayRepresentation.Image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.struct",
    "html": "Topics\nStructures\nstruct DisplayStyle\nThe style with which to display the image for this DisplayRepresentation.\nOperators\nstatic func == (DisplayRepresentation.Image, DisplayRepresentation.Image) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(data: Data, isTemplate: Bool?)\nCreates an image object from the specified data.\ninit(data: Data, isTemplate: Bool?, displayStyle: DisplayRepresentation.Image.DisplayStyle)\nCreates an image from the specified data, specifying the display style.\ninit(named: String, isTemplate: Bool?)\nCreates an image object from an image file in the extension’s bundle.\ninit(named: String, isTemplate: Bool?, displayStyle: DisplayRepresentation.Image.DisplayStyle)\nCreates an image from an image file in the extension’s bundle, specifying the display style.\ninit(systemName: String, isTemplate: Bool?)\nCreates an image object that contains the specified system symbol image.\ninit?(systemName: String, tintColor: UIColor?, symbolConfiguration: UIImage.SymbolConfiguration?)\nCreates an image object backed by the given SF Symbol name, with optional configuration options.\ninit?(systemName: String, tintColor: NSColor?, symbolConfiguration: NSImage.SymbolConfiguration?)\nCreates an image object backed by the given SF Symbol name, with optional configuration options.\ninit(url: URL, isTemplate: Bool?)\nCreates an image object from an image file in the local file system.\ninit(url: URL, isTemplate: Bool?, displayStyle: DisplayRepresentation.Image.DisplayStyle)\nCreates an image from an image file in the local file system, specifying the display style.\ninit(url: URL, width: Double, height: Double, isTemplate: Bool?)\nCreates an image object, of the specified size, from an image file in the local file system.\ninit(url: URL, width: Double, height: Double, isTemplate: Bool?, displayStyle: DisplayRepresentation.Image.DisplayStyle)\nCreates an image, of the specified size, from an image file in the local file system, specifying the display style.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nSendable\nSee Also\nDisplaying the content\nvar title: LocalizedStringResource\nvar subtitle: LocalizedStringResource?\nvar image: DisplayRepresentation.Image?"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "DisplayRepresentation.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "init(title:subtitle:image:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/init(title:subtitle:image:)",
    "html": "See Also\nCreating a representation\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value."
  },
  {
    "title": "DisplayRepresentation.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "synonyms | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/synonyms",
    "html": "Discussion\n\nExample:\n\nDisplayRepresentation(\n    name: \"Pizza\",\n    synonyms: [\"Pie\", \"Za\"]\n)\n\n\nIn this case, “Pie”, “Za” and “Pizza” are all ways to display this"
  },
  {
    "title": "DisplayRepresentation.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "requestConfirmation(for:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/requestconfirmation(for:dialog:)",
    "html": "Parameters\nitemToConfirm\n\nthe items to be presented to the user for confirmation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nwhether or not the user confirmed the value\n\nSee Also\nRequesting confirmation\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: () -> ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "Files | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-file",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, supportedTypeIdentifiers: [String], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nSee Also\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nDate components\nConfigure the details for parameter variables that contain date components.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values."
  },
  {
    "title": "InputConnectionBehavior.default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/inputconnectionbehavior/default",
    "html": "See Also\nGetting the connection behaviors\ncase never\nA behavior that prohibits the parameter from accepting the output.\ncase connectToPreviousIntentResult\nA behavior that permits the parameter to accept the output."
  },
  {
    "title": "EntityQueryComparatorMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerycomparatormode",
    "html": "Topics\nComparator modes\ncase and\ncase or\nOperators\nstatic func == (EntityQueryComparatorMode, EntityQueryComparatorMode) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSendable\nSee Also\nSearching for entities\nfunc entities(matching: [Self.ComparatorMappingType], mode: Self.ComparatorMode, sortedBy: [EntityQuerySort<Self.Entity>], limit: Int?) async throws -> Self.Result\nRetrieves instances matching the supplied comparators.\n\nRequired\n\ntypealias Sort\ntypealias ComparatorMode"
  },
  {
    "title": "findIntentDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/findintentdescription-97u0i",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nEntityPropertyQuery Implementations\nstatic var findIntentDescription: IntentDescription?\nDefines how the generated ‘Find’ Shortcuts action of this query type is displayed to the user."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteriafromstringresolverspecificification/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteriafromstringresolverspecificification/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "EntityPropertyQuery.ComparatorMode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/comparatormode",
    "html": "See Also\nSearching for entities\nfunc entities(matching: [Self.ComparatorMappingType], mode: Self.ComparatorMode, sortedBy: [EntityQuerySort<Self.Entity>], limit: Int?) async throws -> Self.Result\nRetrieves instances matching the supplied comparators.\n\nRequired\n\ntypealias Sort\nenum EntityQueryComparatorMode\nModes that determine how to apply a query’s comparators."
  },
  {
    "title": "entities(matching:mode:sortedBy:limit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/entities(matching:mode:sortedby:limit:)",
    "html": "Required\n\nParameters\ncomparators\n\nArray containing mapped values for comparators that entities need to match\n\nmode\n\nWhether entity instances should match any or all comparators\n\nsortedBy\n\nArray describing the query’s sorting order\n\nlimit\n\nOptional limit on the number of entity instances to return\n\nSee Also\nSearching for entities\ntypealias Sort\ntypealias ComparatorMode\nenum EntityQueryComparatorMode\nModes that determine how to apply a query’s comparators."
  },
  {
    "title": "EntityPropertyQuery.Sort | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/sort",
    "html": "See Also\nSearching for entities\nfunc entities(matching: [Self.ComparatorMappingType], mode: Self.ComparatorMode, sortedBy: [EntityQuerySort<Self.Entity>], limit: Int?) async throws -> Self.Result\nRetrieves instances matching the supplied comparators.\n\nRequired\n\ntypealias ComparatorMode\nenum EntityQueryComparatorMode\nModes that determine how to apply a query’s comparators."
  },
  {
    "title": "EntityPropertyQuery.SortingOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/sortingoptions-swift.typealias",
    "html": "See Also\nSorting the results\nstatic var sortingOptions: Self.SortingOptions\nThe set of sorting orders supported by this query.\n\nRequired\n\ntypealias SortableBy"
  },
  {
    "title": "EntityPropertyQuery.Property | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/property",
    "html": "See Also\nSpecifying the queryable properties\nstatic var properties: Self.QueryProperties\nThe set of query properties supported by this query.\n\nRequired\n\ntypealias QueryProperties\nassociatedtype ComparatorMappingType\nType produced by EntityQueryComparator mapping closures and supplied as input to results.\n\nRequired"
  },
  {
    "title": "EntityPropertyQuery.SortableBy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/sortableby",
    "html": "See Also\nSorting the results\nstatic var sortingOptions: Self.SortingOptions\nThe set of sorting orders supported by this query.\n\nRequired\n\ntypealias SortingOptions"
  },
  {
    "title": "ComparatorMappingType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/comparatormappingtype",
    "html": "Required\n\nSee Also\nSpecifying the queryable properties\nstatic var properties: Self.QueryProperties\nThe set of query properties supported by this query.\n\nRequired\n\ntypealias QueryProperties\ntypealias Property"
  },
  {
    "title": "sortingOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/sortingoptions-swift.type.property",
    "html": "Required\n\nSee Also\nSorting the results\ntypealias SortingOptions\ntypealias SortableBy"
  },
  {
    "title": "properties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/properties",
    "html": "Required\n\nSee Also\nSpecifying the queryable properties\ntypealias QueryProperties\ntypealias Property\nassociatedtype ComparatorMappingType\nType produced by EntityQueryComparator mapping closures and supplied as input to results.\n\nRequired"
  },
  {
    "title": "EntityPropertyQuery.QueryProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery/queryproperties",
    "html": "See Also\nSpecifying the queryable properties\nstatic var properties: Self.QueryProperties\nThe set of query properties supported by this query.\n\nRequired\n\ntypealias Property\nassociatedtype ComparatorMappingType\nType produced by EntityQueryComparator mapping closures and supplied as input to results.\n\nRequired"
  },
  {
    "title": "Value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollectionspecification/value",
    "html": "Required"
  },
  {
    "title": "HasValueComparisonOperator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/hasvaluecomparisonoperator",
    "html": "Topics\nValue operators\ncase hasAnyValue\nAn operator that determines if the parameter has a value.\ncase hasNoValue\nAn operator that determines if the parameter’s empty.\nOperators\nstatic func == (HasValueComparisonOperator, HasValueComparisonOperator) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nCreating a conditional statement\ninit<Parameter>(KeyPath<Intent, Parameter>, HasValueComparisonOperator, () -> WhenCondition, otherwise: () -> Otherwise)\nenum EquatableComparisonOperator\nOperators that indicate the type of equality check for a conditional statement.\nenum ComparableComparisonOperator\nOperators that indicate the type of comparison check for a conditional statement.\nenum OneOfComparisonOperator\nOperators that indicate the type of containment check for a conditional statement."
  },
  {
    "title": "OneOfComparisonOperator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/oneofcomparisonoperator",
    "html": "Topics\nContainment operators\ncase oneOf\nAn operator that determines if the parameter is equal to one of the values in the array.\nOperators\nstatic func == (OneOfComparisonOperator, OneOfComparisonOperator) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nCreating a conditional statement\ninit<Parameter>(KeyPath<Intent, Parameter>, HasValueComparisonOperator, () -> WhenCondition, otherwise: () -> Otherwise)\nenum EquatableComparisonOperator\nOperators that indicate the type of equality check for a conditional statement.\nenum ComparableComparisonOperator\nOperators that indicate the type of comparison check for a conditional statement.\nenum HasValueComparisonOperator\nOperators that indicate the type of value check for a conditional statement."
  },
  {
    "title": "EquatableComparisonOperator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/equatablecomparisonoperator",
    "html": "Topics\nEquatable operators\ncase equalTo\nAn operator that determines if the parameter and the value are equal.\ncase notEqualTo\nAn operator that determines if the parameter and the value aren’t equal.\nOperators\nstatic func == (EquatableComparisonOperator, EquatableComparisonOperator) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nCreating a conditional statement\ninit<Parameter>(KeyPath<Intent, Parameter>, HasValueComparisonOperator, () -> WhenCondition, otherwise: () -> Otherwise)\nenum ComparableComparisonOperator\nOperators that indicate the type of comparison check for a conditional statement.\nenum HasValueComparisonOperator\nOperators that indicate the type of value check for a conditional statement.\nenum OneOfComparisonOperator\nOperators that indicate the type of containment check for a conditional statement."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/title",
    "html": "See Also\nAccessing the configuration\nvar isOptional: Bool"
  },
  {
    "title": "App entities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-app-entity",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Query>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, query: Query)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType conforms to AppEntity.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nSee Also\nCreating an intent parameter for custom types\nApp enums\nConfigure the details for parameter variables that contain custom app enums."
  },
  {
    "title": "App enums | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-app-enum",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType])\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.ValueType conforms to AppEntity, and Value.ValueType conforms to AppEnum.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, requestDisambiguationDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, supportedValues: [Value.ValueType], resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nSee Also\nCreating an intent parameter for custom types\nApp entities\nConfigure the details for parameter variables that contain custom app entities."
  },
  {
    "title": "isOptional | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/isoptional",
    "html": "See Also\nAccessing the configuration\nlet title: LocalizedStringResource"
  },
  {
    "title": "requestValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/requestvalue(_:)-592nd",
    "html": "Parameters\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nthe value supplied by the user\n\nSee Also\nRequesting a value\nfunc needsValueError(IntentDialog?) -> AppIntentError\nReturns a restartPerform error with context to request a value from the user for this parameter and re-perform the intent with the new value.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "requestConfirmation(for:dialog:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/requestconfirmation(for:dialog:view:)-6hiyi",
    "html": "Parameters\nitemToConfirm\n\nthe items to be presented to the user for confirmation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nview\n\na view to display when requesting confirmation.\n\nSee Also\nRequesting confirmation\nfunc requestConfirmation(for: Value.ValueType, dialog: IntentDialog?) async throws -> Bool\nRequest that the user confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: () -> ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "requestDisambiguation(among:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/requestdisambiguation(among:dialog:)",
    "html": "Parameters\nitemsToDisambiguate\n\nthe list of items to be presented to the user for disambiguation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nthe value supplied by the user\n\nSee Also\nRequesting disambiguation\nfunc needsDisambiguationError(among: [Value.ValueType], dialog: IntentDialog?) -> AppIntentError\nReturns a restartPerform error with context for the user to disambiguate amongst an array of values from for this parameter and re-perform the intent with the new value.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "needsValueError(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/needsvalueerror(_:)",
    "html": "Parameters\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nan error that should be thrown within the intent perform() method.\n\nSee Also\nRequesting a value\nfunc requestValue(IntentDialog?) async throws -> Value.ValueType\nRequest a value from the user for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "requestConfirmation(for:dialog:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/requestconfirmation(for:dialog:view:)-9z0pe",
    "html": "Parameters\nitemToConfirm\n\nthe items to be presented to the user for confirmation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nview\n\na view to display when requesting confirmation.\n\nSee Also\nRequesting confirmation\nfunc requestConfirmation(for: Value.ValueType, dialog: IntentDialog?) async throws -> Bool\nRequest that the user confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "needsDisambiguationError(among:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/needsdisambiguationerror(among:dialog:)",
    "html": "Parameters\nitemsToDisambiguate\n\nthe list of items to be presented to the user for disambiguation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nan error that should be thrown within the intent perform() method.\n\nSee Also\nRequesting disambiguation\nfunc requestDisambiguation(among: [Value.ValueType], dialog: IntentDialog?) async throws -> Value.ValueType\nRequest that the user disambiguate amongst an array of values for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "Deprecated symbols | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-deprecated",
    "html": "Topics\nDeprecated methods\nfunc requestValue(IntentDialog?) -> Error\nAvailable when Value conforms to _IntentValue and Sendable.\nDeprecated"
  },
  {
    "title": "Integers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-int",
    "html": "Topics\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.IntControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable.\nAccessing the control style\nvar controlStyle: IntentParameter<Value>.IntControlStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nenum IntControlStyle\nAvailable when Value conforms to _IntentValue and Sendable.\nSee Also\nCreating an intent parameter for primitive types\nDoubles\nConfigure the details for parameter variables that contain floating-point values.\nBooleans\nConfigure the details for parameter variables that contain Boolean values.\nStrings\nConfigure the details for parameter variables that contain strings or attributed strings.\nURLs\nConfigure the details for parameter variables that contain URLs."
  },
  {
    "title": "Strings | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-string",
    "html": "Topics\nCreating an intent parameter for a string\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, inputOptions: String.IntentInputOptions?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nCreating an intent parameter for an attributed string\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nAccessing the input options\nvar inputOptions: String.IntentInputOptions?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nSee Also\nCreating an intent parameter for primitive types\nIntegers\nConfigure the details for parameter variables that contain integers.\nDoubles\nConfigure the details for parameter variables that contain floating-point values.\nBooleans\nConfigure the details for parameter variables that contain Boolean values.\nURLs\nConfigure the details for parameter variables that contain URLs."
  },
  {
    "title": "Doubles | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-double",
    "html": "Topics\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, controlStyle: IntentParameter<Value>.DoubleControlStyle, inclusiveRange: IntentParameter<Value>.InclusiveRange<Value.ValueType>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable.\nAccessing the control style\nvar controlStyle: IntentParameter<Value>.DoubleControlStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nenum DoubleControlStyle\nAvailable when Value conforms to _IntentValue and Sendable.\nSee Also\nCreating an intent parameter for primitive types\nIntegers\nConfigure the details for parameter variables that contain integers.\nBooleans\nConfigure the details for parameter variables that contain Boolean values.\nStrings\nConfigure the details for parameter variables that contain strings or attributed strings.\nURLs\nConfigure the details for parameter variables that contain URLs."
  },
  {
    "title": "Dates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-date",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nAccessing the date kind\nvar dateKind: IntentParameter<Value>.DateKind?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nenum DateKind\nAvailable when Value conforms to _IntentValue and Sendable.\nSee Also\nCreating an intent parameter for common framework types\nDate components\nConfigure the details for parameter variables that contain date components.\nFiles\nConfigure the details for parameter variables that contain files.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values."
  },
  {
    "title": "Booleans | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-boolean",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, displayName: Bool.IntentDisplayName?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Bool.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, displayName: Bool.IntentDisplayName?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Bool.\nSpecifying the display name\nvar displayName: Bool.IntentDisplayName?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Bool.\nSee Also\nCreating an intent parameter for primitive types\nIntegers\nConfigure the details for parameter variables that contain integers.\nDoubles\nConfigure the details for parameter variables that contain floating-point values.\nStrings\nConfigure the details for parameter variables that contain strings or attributed strings.\nURLs\nConfigure the details for parameter variables that contain URLs."
  },
  {
    "title": "URLs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-url",
    "html": "Topics\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: [Value.ValueType?], requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is URL.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, default: Value.UnwrappedType?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nSee Also\nCreating an intent parameter for primitive types\nIntegers\nConfigure the details for parameter variables that contain integers.\nDoubles\nConfigure the details for parameter variables that contain floating-point values.\nBooleans\nConfigure the details for parameter variables that contain Boolean values.\nStrings\nConfigure the details for parameter variables that contain strings or attributed strings."
  },
  {
    "title": "People | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-person",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: [IntentWidgetFamily : IntentCollectionSize], inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, mode: IntentPerson.ParameterMode, size: IntentCollectionSize, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, Value.UnwrappedType conforms to Collection, and Value.ValueType is IntentPerson.\nAccessing the parameter mode\nvar parameterMode: IntentPerson.ParameterMode?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nenum ParameterMode\nThe type of interface to show when someone chooses a parameter that contains information about a person.\nSee Also\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nDate components\nConfigure the details for parameter variables that contain date components.\nFiles\nConfigure the details for parameter variables that contain files.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values."
  },
  {
    "title": "Date components | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-date-components",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, kind: IntentParameter<Value>.DateKind, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nAccessing the date kind\nvar dateKind: IntentParameter<Value>.DateKind?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nenum DateKind\nAvailable when Value conforms to _IntentValue and Sendable.\nSee Also\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nFiles\nConfigure the details for parameter variables that contain files.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values."
  },
  {
    "title": "Currencies | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-currencies",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, currencyCodes: [String], inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nAccessing the configuration\nvar currencyCodes: [String]?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nvar inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\ntypealias InclusiveRange\nAvailable when Value conforms to _IntentValue and Sendable.\nSee Also\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nDate components\nConfigure the details for parameter variables that contain date components.\nFiles\nConfigure the details for parameter variables that contain files.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values."
  },
  {
    "title": "Placemarks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-placemark",
    "html": "Topics\nCreating an intent parameter\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nAccessing the display style\nvar displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nenum PlacemarkDisplayStyle\nDetermines how locations are represented in strings used by Shortcuts.\nAvailable when Value conforms to _IntentValue and Sendable.\nSee Also\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nDate components\nConfigure the details for parameter variables that contain date components.\nFiles\nConfigure the details for parameter variables that contain files.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values."
  },
  {
    "title": "Measurements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-measurements",
    "html": "Topics\nCreating an intent parameter for measurements\nAcceleration\nConfigure the details for parameter variables that contain acceleration values.\nAngles\nConfigure the details for parameter variables that contain angles.\nArea\nConfigure the details for parameter variables that contain area values.\nConcentration mass\nConfigure the details for parameter variables that contain concentration mass values.\nDispersion\nConfigure the details for parameter variables that contain dispersion values.\nDurations\nConfigure the details for parameter variables that contain durations.\nElectric charge\nConfigure the details for parameter variables that contain electric charge values.\nElectric current\nConfigure the details for parameter variables that contain electric current values.\nElectric potential difference\nConfigure the details for parameter variables that contain values of electric potential difference.\nElectric resistance\nConfigure the details for parameter variables that contain electric resistance values.\nEnergy\nConfigure the details for parameter variables that contain energy values.\nFrequency\nConfigure the details for parameter variables that contain frequency values.\nFuel efficiency\nConfigure the details for parameter variables that contain fuel efficiency values.\nIlluminance\nConfigure the details for parameter variables that contain illuminance values.\nInformation storage\nConfigure the details for parameter variables that contain information storage values.\nLength\nConfigure the details for parameter variables that contain length values.\nMass\nConfigure the details for parameter variables that contain values of mass.\nPower\nConfigure the details for parameter variables that contain power values.\nPressure\nConfigure the details for parameter variables that contain pressure values.\nSpeed\nConfigure the details for parameter variables that contain speed values.\nTemperature\nConfigure the details for parameter variables that contain temperatures.\nVolume\nConfigure the details for parameter variables that contain volume values.\nSee Also\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nDate components\nConfigure the details for parameter variables that contain date components.\nFiles\nConfigure the details for parameter variables that contain files.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteriafromstringresolverspecificification/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteriafromstringresolverspecificification/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteriafromstringresolverspecificification/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "Payments | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter-payments",
    "html": "Topics\nCreating an intent parameter\nconvenience init<OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, optionsProvider: OptionsProvider, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init<Spec, OptionsProvider>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec, optionsProvider: OptionsProvider)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init<Spec>(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior, resolvers: () -> Spec)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nSee Also\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nDate components\nConfigure the details for parameter variables that contain date components.\nFiles\nConfigure the details for parameter variables that contain files.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values."
  },
  {
    "title": "appShortcuts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutsprovider/appshortcuts",
    "html": "Required"
  },
  {
    "title": "findIntentDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/enumerableentityquery/findintentdescription-4pyh6",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nEnumerableEntityQuery Implementations\nstatic var findIntentDescription: IntentDescription?\nDefines how the generated ‘Find’ Shortcuts action of this query type is displayed to the user."
  },
  {
    "title": "allEntities() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/enumerableentityquery/allentities()",
    "html": "Required"
  },
  {
    "title": "Result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquery/result",
    "html": "Required"
  },
  {
    "title": "InstanceDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity/instancedisplayrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar displayRepresentation: DisplayRepresentation\nThe visual elements to display when presenting an instance of the type.\nAvailable when Self conforms to CaseDisplayRepresentable."
  },
  {
    "title": "Identifiable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity/identifiable-implementations",
    "html": "Topics\nInstance Properties\nvar id: Self.ID\nThe stable identity of the entity associated with this instance.\nAvailable when Self conforms to RawRepresentable and ID is Self.RawValue."
  },
  {
    "title": "defaultResolverSpecification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity/defaultresolverspecification-589eq",
    "html": "See Also\nMaking the entity queryable\nstatic var defaultQuery: Self.DefaultQuery\nThe default query to use to retrieve entity property instances.\n\nRequired Default implementations provided.\n\nassociatedtype DefaultQuery : EntityQuery\n\nRequired\n\nstatic var defaultResolverSpecification: EmptyResolverSpecification<Self>"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquery/init()",
    "html": "Required"
  },
  {
    "title": "shortcutTileColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutsprovider/shortcuttilecolor-5qi8g",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nAppShortcutsProvider Implementations\nstatic var shortcutTileColor: ShortcutTileColor\nThe background color of the tile that Shortcuts displays for each of the app’s App Shortcuts."
  },
  {
    "title": "defaultResolverSpecification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity/defaultresolverspecification-2dpf2",
    "html": "See Also\nMaking the entity queryable\nstatic var defaultQuery: Self.DefaultQuery\nThe default query to use to retrieve entity property instances.\n\nRequired Default implementations provided.\n\nassociatedtype DefaultQuery : EntityQuery\n\nRequired\n\nstatic var defaultResolverSpecification: some ResolverSpecification\nAvailable when Self conforms to AppEnum."
  },
  {
    "title": "AppShortcutsProvider.Title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutsprovider/title",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)"
  },
  {
    "title": "Error Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintenterror/error-implementations",
    "html": "Topics\nInstance Properties\nvar localizedDescription: String\nRetrieve the localized description for this error."
  },
  {
    "title": "CustomStringConvertible Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintenterror/customstringconvertible-implementations",
    "html": "Topics\nInstance Properties\nvar description: String\nA textual representation of this instance."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/attributedstringfromstringresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromdoubleresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/attributedstringfromstringresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "usesIndexedCollation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resultscollection/usesindexedcollation",
    "html": "Required"
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromintresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "result(value:opensIntent:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:opensintent:view:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\nview\n\nA custom View to display the result"
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromintresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "WorkoutStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/startworkoutintent/workoutstyle-swift.associatedtype",
    "html": "Required\n\nDiscussion\n\nAssign a type that adopts either the AppEnum or AppEntity protocol.\n\nSee Also\nDefining supported workouts\nvar workoutStyle: Self.WorkoutStyle\nThe workout style for the intent.\n\nRequired\n\nstatic var suggestedWorkouts: [Self]\nA list of the supported workout styles.\n\nRequired\n\nstatic func invalidateSuggestedWorkouts()\nTells the system when the list of suggested workouts changes."
  },
  {
    "title": "invalidateSuggestedWorkouts() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/startworkoutintent/invalidatesuggestedworkouts()",
    "html": "Discussion\n\nCall this method when you change the value of the suggestedWorkouts property.\n\nSee Also\nDefining supported workouts\nassociatedtype WorkoutStyle : AppValue\nThe type to use for defining the intent’s workout style.\n\nRequired\n\nvar workoutStyle: Self.WorkoutStyle\nThe workout style for the intent.\n\nRequired\n\nstatic var suggestedWorkouts: [Self]\nA list of the supported workout styles.\n\nRequired"
  },
  {
    "title": "suggestedWorkouts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/startworkoutintent/suggestedworkouts",
    "html": "Required\n\nDiscussion\n\nIf your app is installed on Apple Watch Ultra, the system displays these workouts as options under the First Press settings when someone sets your app as the workout app in Settings > Action Button.\n\nFor a complete description of implementing a StartWorkoutIntent, see Responding to the Action button on Apple Watch Ultra\n\nSee Also\nDefining supported workouts\nassociatedtype WorkoutStyle : AppValue\nThe type to use for defining the intent’s workout style.\n\nRequired\n\nvar workoutStyle: Self.WorkoutStyle\nThe workout style for the intent.\n\nRequired\n\nstatic func invalidateSuggestedWorkouts()\nTells the system when the list of suggested workouts changes."
  },
  {
    "title": "invalidateFocusFilterAppContext() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintent/invalidatefocusfilterappcontext()",
    "html": "See Also\nConfiguring app context for the Focus\nvar appContext: FocusFilterAppContext\nAn app context that is associated with the focus configuration. The system will retrieve this app context and adapt the system behavior based on the context provided.\n\nRequired Default implementation provided."
  },
  {
    "title": "appContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintent/appcontext-7yn9g",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nSetFocusFilterIntent Implementations\nvar appContext: FocusFilterAppContext\nAn app context that is associated with the focus configuration. The system will retrieve this app context and adapt the system behavior based on the context provided.\nSee Also\nConfiguring app context for the Focus\nstatic func invalidateFocusFilterAppContext()"
  },
  {
    "title": "suggestedFocusFilters(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintent/suggestedfocusfilters(for:)-owtq",
    "html": "Required Default implementation provided.\n\nParameters\ncontext\n\nThe focus configuration context which the suggested configurations could be determined from.\n\nReturn Value\n\nA list of suggested focus configurations where the first one is the most suggested configuration. Returns an empty array if there is no suggested focus configurations. The system will use the default value per parameters in this case.\n\nDefault Implementations\nSetFocusFilterIntent Implementations\nstatic func suggestedFocusFilters(for: FocusFilterSuggestionContext) async -> [Self]\nYou can implement this method to return a list of suggested focus configurations. This is useful when the suggested focus configurations are different from the configuration when the focus is turned off.\nSee Also\nGetting the current app configuration\nstatic var current: Self"
  },
  {
    "title": "current | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintent/current",
    "html": "See Also\nGetting the current app configuration\nstatic func suggestedFocusFilters(for: FocusFilterSuggestionContext) async -> [Self]\nYou can implement this method to return a list of suggested focus configurations. This is useful when the suggested focus configurations are different from the configuration when the focus is turned off.\n\nRequired Default implementation provided."
  },
  {
    "title": "Entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquery/entity",
    "html": "Required\n\nSee Also\nSearching for entities\nfunc entities(for: [Self.Entity.ID]) async throws -> [Self.Entity]\nRetrieves instances by identifier.\n\nRequired"
  },
  {
    "title": "DefaultQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity/defaultquery-swift.associatedtype",
    "html": "Required\n\nSee Also\nMaking the entity queryable\nstatic var defaultQuery: Self.DefaultQuery\nThe default query to use to retrieve entity property instances.\n\nRequired Default implementations provided.\n\nstatic var defaultResolverSpecification: EmptyResolverSpecification<Self>\nstatic var defaultResolverSpecification: some ResolverSpecification\nAvailable when Self conforms to AppEnum."
  },
  {
    "title": "result(dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(dialog:)",
    "html": "Parameters\ndialog\n\nA custom success dialog"
  },
  {
    "title": "result(dialog:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(dialog:view:)",
    "html": "Parameters\ndialog\n\nA custom success dialog\n\nview\n\nA custom View to display the result"
  },
  {
    "title": "AppExtension Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintentsextension/appextension-implementations",
    "html": "Topics\nInstance Properties\nvar configuration: some AppExtensionConfiguration\nThe configuration that defines the extension’s behavior."
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/attributedstringfromstringresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/attributedstringfromstringresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/attributedstringfromstringresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "Result | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resultscollection/result",
    "html": "Required"
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromdoubleresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromdoubleresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "items | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resultscollection/items",
    "html": "Required"
  },
  {
    "title": "promptLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resultscollection/promptlabel",
    "html": "Required"
  },
  {
    "title": "empty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resultscollection/empty",
    "html": "Required"
  },
  {
    "title": "RangeCheckingResolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromintresolver/rangecheckingresolver-implementations",
    "html": "Topics\nInstance Methods\nfunc checkParameterRangeContains<Value>(value: Value, context: IntentParameterContext<Self.Output>) throws"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromintresolver/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromintresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromintresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "resolve(from:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromintresolver/resolve(from:context:)",
    "html": "Parameters\ninput\n\nThe value to convert.\n\ncontext\n\nContextual resolution information, including resolution source and information about the associated parameter if applicable.\n\nReturn Value\n\nThe converted value, or nil if conversion fails."
  },
  {
    "title": "result(view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(view:)",
    "html": "Parameters\nview\n\nA custom View to display the result"
  },
  {
    "title": "result(value:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:view:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nview\n\nA custom View to display the result"
  },
  {
    "title": "openAppWhenRun | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/startworkoutintent/openappwhenrun",
    "html": "Discussion\n\nBy default, the start workout intents set their openAppWhenRun property to true. To ensure these intents run as expected, don’t change the property’s value."
  },
  {
    "title": "workoutStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/startworkoutintent/workoutstyle-swift.property",
    "html": "Required\n\nDiscussion\n\nYour implementation’s workoutStyle property must be a type you define that adopts either the AppEnum or AppEntity protocol. Declare this property using the AppIntent.Parameter property wrapper.\n\n// Define a parameter that specifies the type of workout that this \n// intent starts.\n@Parameter(title: \"Start Workout Entity\")\nvar workoutStyle: WorkoutEnum\n\n\nFor a complete description of implementing a StartWorkoutIntent, see Responding to the Action button on Apple Watch Ultra\n\nSee Also\nDefining supported workouts\nassociatedtype WorkoutStyle : AppValue\nThe type to use for defining the intent’s workout style.\n\nRequired\n\nstatic var suggestedWorkouts: [Self]\nA list of the supported workout styles.\n\nRequired\n\nstatic func invalidateSuggestedWorkouts()\nTells the system when the list of suggested workouts changes."
  },
  {
    "title": "IntentDescription.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "result(value:opensIntent:dialog:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:opensintent:dialog:view:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ndialog\n\nA custom success dialog\n\nview\n\nA custom View to display the result"
  },
  {
    "title": "Value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/value-swift.associatedtype",
    "html": "Required"
  },
  {
    "title": "result(actionButtonIntent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(actionbuttonintent:)",
    "html": "Parameters\nnextIntent\n\nthe AppIntent used perform next"
  },
  {
    "title": "result(dialog:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(dialog:content:)",
    "html": "Parameters\ndialog\n\nA custom success dialog\n\ncontent\n\nA custom View to display the result"
  },
  {
    "title": "result(actionButtonIntent:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(actionbuttonintent:dialog:)",
    "html": "Parameters\nnextIntent\n\nthe AppIntent used perform next\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "result(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(content:)",
    "html": "Parameters\ncontent\n\nA custom View to display the result"
  },
  {
    "title": "result(opensIntent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(opensintent:)",
    "html": "Parameters\nopensIntent\n\nAn AppIntent to shows the result of current intent"
  },
  {
    "title": "result(opensIntent:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(opensintent:content:)",
    "html": "Parameters\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ncontent\n\nA custom View to display the result"
  },
  {
    "title": "result(opensIntent:dialog:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(opensintent:dialog:content:)",
    "html": "Parameters\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ndialog\n\nA custom success dialog\n\ncontent\n\nA custom View to display the result"
  },
  {
    "title": "result(opensIntent:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(opensintent:dialog:)",
    "html": "Parameters\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "result(opensIntent:dialog:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(opensintent:dialog:view:)",
    "html": "Parameters\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ndialog\n\nA custom success dialog\n\nview\n\nA custom View to display the result"
  },
  {
    "title": "result(opensIntent:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(opensintent:view:)",
    "html": "Parameters\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\nview\n\nA custom View to display the result"
  },
  {
    "title": "result(value:actionButtonIntent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:actionbuttonintent:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nnextIntent\n\nthe AppIntent used perform next"
  },
  {
    "title": "result(value:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent"
  },
  {
    "title": "result(value:dialog:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:dialog:content:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\ndialog\n\nA custom success dialog\n\ncontent\n\nA custom View to display the result"
  },
  {
    "title": "result(value:dialog:view:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:dialog:view:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\ndialog\n\nA custom success dialog\n\nview\n\nA custom View to display the result"
  },
  {
    "title": "result(value:actionButtonIntent:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:actionbuttonintent:dialog:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nnextIntent\n\nthe AppIntent used perform next\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "result(value:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:dialog:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "result(value:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:content:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\ncontent\n\nA custom View to display the result"
  },
  {
    "title": "result(value:opensIntent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:opensintent:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nopensIntent\n\nAn AppIntent to shows the result of current intent"
  },
  {
    "title": "result(value:opensIntent:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:opensintent:content:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ncontent\n\nA custom View to display the result"
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/attributedstringfromstringresolver/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "Resolver Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromdoubleresolver/resolver-implementations",
    "html": "Topics\nType Aliases\ntypealias Context"
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromdoubleresolver/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromdoubleresolver/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "donate(result:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/donate(result:)-9b25i",
    "html": "Discussion\n\nThis synchronous function is available to applications that haven’t adopted Swift async concurrency. The system ignores any exceptions encountered when donating this intent.\n\nSee Also\nDonating the intent to the system\nfunc donate() async throws -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate() -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate(result: some IntentResult) async throws -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc callAsFunction(donate: Bool) async throws -> Self.PerformResult.Value\nfunc callAsFunction(donate: Bool) async throws"
  },
  {
    "title": "donate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/donate()-jp6k",
    "html": "Discussion\n\nThis synchronous function is available to applications that haven’t adopted Swift async concurrency. The system ignores any exceptions encountered when donating this intent.\n\nSee Also\nDonating the intent to the system\nfunc donate() async throws -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate(result: some IntentResult) async throws -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc donate(result: some IntentResult) -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc callAsFunction(donate: Bool) async throws -> Self.PerformResult.Value\nfunc callAsFunction(donate: Bool) async throws"
  },
  {
    "title": "init(full:supporting:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/init(full:supporting:)",
    "html": "Discussion\n\nParameters:\n\nfull: a standalone message that will fully describe the output\n\nsupporting: a message that may be used in conjunction with visual output\n\nSee Also\nCreating a dialog\ninit(LocalizedStringResource)\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: String.LocalizationValue.StringInterpolation)\nCreates an instance from a string interpolation."
  },
  {
    "title": "requestConfirmation() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/requestconfirmation()",
    "html": "See Also\nRequesting confirmation\nfunc requestConfirmation<Result>(result: Result, confirmationActionName: ConfirmationActionName, showPrompt: Bool) async throws\nRequests user confirmation before performing the app intent.\nfunc requestConfirmation<Result>(output: Result, confirmationActionName: ConfirmationActionName, showPrompt: Bool) async throws\nDeprecated"
  },
  {
    "title": "InstanceDisplayRepresentable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/instancedisplayrepresentable",
    "html": "Topics\nProviding the visual content\nvar displayRepresentation: DisplayRepresentation\nThe visual elements to display when presenting an instance of the type.\n\nRequired\n\nProviding a localized description\nvar localizedStringResource: LocalizedStringResource\nRelationships\nInherits From\nCustomLocalizedStringResourceConvertible\nInherited By\nAppEntity\nDisplayRepresentable\nSetFocusFilterIntent\nStartWorkoutIntent\nTransientAppEntity\nConforming Types\nIntentCurrencyAmount\nIntentFile\nIntentPaymentMethod\nIntentPerson\nSee Also\nEntity presentation\nstruct DisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol DisplayRepresentable\nAn interface for providing a dynamic visual representation of a specific type and instances of that type.\nprotocol TypeDisplayRepresentable\nAn interface for providing the visual representation of a specific type.\nstruct TypeDisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol StaticDisplayRepresentable\nAn interface for providing a static visual representation of a specific type.\nprotocol CaseDisplayRepresentable\nAn interface for providing the visual representation for an iterable collection of values."
  },
  {
    "title": "IntentResult Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer/intentresult-implementations",
    "html": "Topics\nType Methods\nstatic func result() -> Self\nIndicates the AppIntent finished performing\nstatic func result<Intent>(actionButtonIntent: Intent) -> Self\nIndicates the Intent finished performing with an AppIntent to continue with\nstatic func result<Intent>(actionButtonIntent: Intent, dialog: IntentDialog) -> Self\nIndicates the Intent finished performing with an AppIntent to continue with\nstatic func result(dialog: IntentDialog) -> Self\nIndicates the AppIntent finished performing\nstatic func result<OpensAppIntent>(opensIntent: OpensAppIntent) -> Self\nIndicates the AppIntent finished performing\nstatic func result<OpensAppIntent>(opensIntent: OpensAppIntent, dialog: IntentDialog) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value>(value: Value) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, Intent>(value: Value, actionButtonIntent: Intent) -> Self\nIndicates the Intent finished performing with an AppIntent to continue with\nstatic func result<Value, Intent>(value: Value, actionButtonIntent: Intent, dialog: IntentDialog) -> Self\nIndicates the Intent finished performing with an AppIntent to continue with\nstatic func result<Value>(value: Value, dialog: IntentDialog) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, OpensAppIntent>(value: Value, opensIntent: OpensAppIntent) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, OpensAppIntent>(value: Value, opensIntent: OpensAppIntent, dialog: IntentDialog) -> Self\nIndicates the AppIntent finished performing"
  },
  {
    "title": "TypeDisplayRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentation",
    "html": "Topics\nInitializers\ninit(name: LocalizedStringResource, numericFormat: LocalizedStringResource?)\ninit(name: LocalizedStringResource, numericFormat: LocalizedStringResource?, synonyms: [LocalizedStringResource])\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\nInstance Properties\nvar name: LocalizedStringResource\nThe singular type name, e.g. “Book”.\nvar numericFormat: LocalizedStringResource?\nA string representing a count for the type, e.g. “2 books”.\nvar synonyms: [LocalizedStringResource]\nA list of localized phrases that are synonyms of this particular type display representation\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nEntity presentation\nstruct DisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol DisplayRepresentable\nAn interface for providing a dynamic visual representation of a specific type and instances of that type.\nprotocol InstanceDisplayRepresentable\nAn interface for providing the visual representation for an instance of a specific type.\nprotocol TypeDisplayRepresentable\nAn interface for providing the visual representation of a specific type.\nprotocol StaticDisplayRepresentable\nAn interface for providing a static visual representation of a specific type.\nprotocol CaseDisplayRepresentable\nAn interface for providing the visual representation for an iterable collection of values."
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "IntentDialog.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "preciseTimestamp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentsystemcontext/precisetimestamp",
    "html": "Discussion\n\nThis will be set when executing an AppIntent based on a press of the Apple Watch Ultra’s Action button."
  },
  {
    "title": "IntentDialog.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "init(stringInterpolation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/init(stringinterpolation:)",
    "html": "Parameters\nstringInterpolation\n\nAn instance of StringInterpolation which has had each segment of the string literal appended to it.\n\nDiscussion\n\nMost StringInterpolation types will store information about the literals and interpolations appended to them in one or more properties. init(stringInterpolation:) should use these properties to initialize the instance.\n\nSee Also\nCreating a dialog\ninit(LocalizedStringResource)\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(full: LocalizedStringResource, supporting: LocalizedStringResource)\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance.\n\nSee Also\nCreating a dialog\ninit(LocalizedStringResource)\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\ninit(stringInterpolation: String.LocalizationValue.StringInterpolation)\nCreates an instance from a string interpolation.\ninit(full: LocalizedStringResource, supporting: LocalizedStringResource)\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/init(_:)",
    "html": "Discussion\n\nParameters:\n\nstring: a standalone message that will fully describe the output\n\nSee Also\nCreating a dialog\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: String.LocalizationValue.StringInterpolation)\nCreates an instance from a string interpolation.\ninit(full: LocalizedStringResource, supporting: LocalizedStringResource)\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action."
  },
  {
    "title": "init(stringLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription/init(stringliteral:)",
    "html": "Parameters\nvalue\n\nThe value of the new instance."
  },
  {
    "title": "result(value:opensIntent:dialog:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:opensintent:dialog:content:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ndialog\n\nA custom success dialog\n\ncontent\n\nA custom View to display the result"
  },
  {
    "title": "result(value:opensIntent:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/result(value:opensintent:dialog:)",
    "html": "Parameters\nvalue\n\nThe value produced by the AppIntent\n\nopensIntent\n\nAn AppIntent to shows the result of current intent\n\ndialog\n\nA custom success dialog"
  },
  {
    "title": "IntentDescription.StringLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription/stringliteraltype",
    "html": "Discussion\n\nValid types for StringLiteralType are String and StaticString."
  },
  {
    "title": "Snippet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/snippet",
    "html": "Required"
  },
  {
    "title": "Dialog | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/dialog",
    "html": "Required"
  },
  {
    "title": "OpensAppIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/opensappintent",
    "html": "Required"
  },
  {
    "title": "value | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult/value-swift.property",
    "html": "Required"
  },
  {
    "title": "AppEnum Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory/appenum-implementations",
    "html": "Topics\nType Properties\nstatic var defaultResolverSpecification: some ResolverSpecification"
  },
  {
    "title": "ExpressibleByUnicodeScalarLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription/expressiblebyunicodescalarliteral-implementations",
    "html": "Topics\nInitializers\ninit(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.UnicodeScalarLiteralType."
  },
  {
    "title": "IntentDescription.UnicodeScalarLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription/unicodescalarliteraltype",
    "html": "Discussion\n\nValid types for UnicodeScalarLiteralType are Unicode.Scalar, Character, String, and StaticString."
  },
  {
    "title": "entityIdentifierString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifierconvertible/entityidentifierstring",
    "html": "Required\n\nDiscussion\n\nNote: Due to system-imposed limitations, the length of this value can not exceed 512 characters!"
  },
  {
    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription/expressiblebyextendedgraphemeclusterliteral-implementations",
    "html": "Topics\nInitializers\ninit(extendedGraphemeClusterLiteral: Self.StringLiteralType)\nCreates an instance initialized to the given value.\nAvailable when ExtendedGraphemeClusterLiteralType is Self.StringLiteralType."
  },
  {
    "title": "includedPackages | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintentspackage/includedpackages-2yli5",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nAppIntentsPackage Implementations\nstatic var includedPackages: [AppIntentsPackage.Type]"
  },
  {
    "title": "intentClassName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/customintentmigratedappintent/intentclassname",
    "html": "Required"
  },
  {
    "title": "AppIntent.Summary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/summary",
    "html": "See Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Switch\ntypealias When"
  },
  {
    "title": "AppIntent.DefaultCase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/defaultcase",
    "html": "See Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias Summary\ntypealias Switch\ntypealias When"
  },
  {
    "title": "parameterSummary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/parametersummary-4vgic",
    "html": "See Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch\ntypealias When"
  },
  {
    "title": "IntentWidgetFamily | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentwidgetfamily",
    "html": "Topics\nOperators\nstatic func == (IntentWidgetFamily, IntentWidgetFamily) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase accessoryCircular\nA circular widget.\ncase accessoryCorner\nA corner widget.\ncase accessoryInline\nA flat widget that contains a single row of text and an optional image.\ncase accessoryRectangular\nA rectangular widget.\ncase systemExtraLarge\nAn extra large widget.\ncase systemLarge\nA large widget.\ncase systemMedium\nA medium-sized widget.\ncase systemSmall\nA small widget.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var defaultResolverSpecification: EmptyResolverSpecification<IntentWidgetFamily>\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable"
  },
  {
    "title": "entities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/deleteintent/entities",
    "html": "Required"
  },
  {
    "title": "ReplacementIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/deprecatedappintent/replacementintent",
    "html": "Required"
  },
  {
    "title": "AppIntent.Parameter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/parameter",
    "html": "See Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch\ntypealias When"
  },
  {
    "title": "AppIntent.Case | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/case",
    "html": "See Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch\ntypealias When"
  },
  {
    "title": "ParameterSummaryBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarybuilder",
    "html": "Topics\nType Methods\nstatic func buildBlock<Summary>(Summary) -> Summary\nstatic func buildExpression<Summary>(Summary) -> Summary\nSee Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch\ntypealias When"
  },
  {
    "title": "SummaryContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/summarycontent",
    "html": "Required\n\nDiscussion\n\nWhen you create an intent, Swift infers this type from your implementation of the parameterSummary property.\n\nSee Also\nSummarizing the parameters\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch\ntypealias When"
  },
  {
    "title": "callAsFunction(donate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/callasfunction(donate:)-7v1om",
    "html": "See Also\nDonating the intent to the system\nfunc donate() async throws -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate() -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate(result: some IntentResult) async throws -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc donate(result: some IntentResult) -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc callAsFunction(donate: Bool) async throws -> Self.PerformResult.Value"
  },
  {
    "title": "callAsFunction(donate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/callasfunction(donate:)-3qvbt",
    "html": "See Also\nDonating the intent to the system\nfunc donate() async throws -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate() -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate(result: some IntentResult) async throws -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc donate(result: some IntentResult) -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc callAsFunction(donate: Bool) async throws"
  },
  {
    "title": "donate(result:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/donate(result:)-36cia",
    "html": "See Also\nDonating the intent to the system\nfunc donate() async throws -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate() -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate(result: some IntentResult) -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc callAsFunction(donate: Bool) async throws -> Self.PerformResult.Value\nfunc callAsFunction(donate: Bool) async throws"
  },
  {
    "title": "requestConfirmation(output:confirmationActionName:showPrompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/requestconfirmation(output:confirmationactionname:showprompt:)",
    "html": "Deprecated\n\nPlease use requestConfirmation(result:confirmationActionName:showPrompt:)\n\nSee Also\nRequesting confirmation\nfunc requestConfirmation() async throws\nRequests user confirmation before performing the app intent.\nfunc requestConfirmation<Result>(result: Result, confirmationActionName: ConfirmationActionName, showPrompt: Bool) async throws\nRequests user confirmation before performing the app intent."
  },
  {
    "title": "donate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/donate()-1e60c",
    "html": "See Also\nDonating the intent to the system\nfunc donate() -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate(result: some IntentResult) async throws -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc donate(result: some IntentResult) -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc callAsFunction(donate: Bool) async throws -> Self.PerformResult.Value\nfunc callAsFunction(donate: Bool) async throws"
  },
  {
    "title": "systemContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/systemcontext",
    "html": "Discussion\n\nThis includes information such as a precise timestamp in cases where the AppIntent is being executed as a result of the user pressing the Apple Watch Ultra’s Action button.\n\nSee Also\nPerforming the action\nfunc perform() async throws -> Self.PerformResult\n\nRequired Default implementation provided.\n\nassociatedtype PerformResult : IntentResult\n\nRequired"
  },
  {
    "title": "PerformResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/performresult",
    "html": "Required\n\nSee Also\nPerforming the action\nfunc perform() async throws -> Self.PerformResult\n\nRequired Default implementation provided.\n\nvar systemContext: IntentSystemContext\nRetrieves the IntentSystemContext during the perform of an AppIntent. IntentSystemContext carries information provided by the system that can be accessed during perform"
  },
  {
    "title": "IntentDialog.StringInterpolation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/stringinterpolation",
    "html": "Discussion\n\nThe StringLiteralType of an interpolation type must match the StringLiteralType of the conforming type."
  },
  {
    "title": "isDiscoverable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/isdiscoverable-1fl1s",
    "html": "Required Default implementation provided.\n\nDiscussion\n\nApp Intents must be discoverable to support App Shortcuts. If you an app intend isn’t discoverable, people can use it only when it’s directly connected by a button in a SwiftUI app or a widget.\n\nThis property is true by default.\n\nDefault Implementations\nAppIntent Implementations\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\nSee Also\nConfiguring the metadata\nstatic var title: LocalizedStringResource\n\nRequired\n\nstatic var description: IntentDescription?\n\nRequired Default implementation provided.\n\nstatic var openAppWhenRun: Bool\n\nRequired Default implementation provided.\n\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent."
  },
  {
    "title": "IntentDialog.ExtendedGraphemeClusterLiteralType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog/extendedgraphemeclusterliteraltype",
    "html": "Discussion\n\nValid types for ExtendedGraphemeClusterLiteralType are Character, String, and StaticString."
  },
  {
    "title": "RawRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "CaseDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope/casedisplayrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar localizedStringResource: LocalizedStringResource"
  },
  {
    "title": "PersistentlyIdentifiable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope/persistentlyidentifiable-implementations",
    "html": "Topics\nType Properties\nstatic var persistentIdentifier: String\nA string that uniquely identifies this type."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteria/==(_:_:)",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false."
  },
  {
    "title": "IntentPaymentMethod | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentpaymentmethod",
    "html": "Overview\n\nAn IntentPaymentMethod type describes a way someone pays for goods and services. This type contains information you can display in your interface to convey the payment type to people. Specifically, it stores the name of the payment service and an icon for any related brand information. Typical payment methods include credit cards and bank accounts.\n\nTopics\nCreating a payment method\ninit(type: IntentPaymentMethod.PaymentType, name: LocalizedStringResource?, identificationHint: String?, icon: DisplayRepresentation.Image?)\nGetting the payment details\nvar paymentType: IntentPaymentMethod.PaymentType\nThe kind of payment method, such as a credit card or bank account\nvar name: String?\nThe user-visible name of the payment method\nvar identificationHint: String?\nA hint making it easier for the user to identify the payment method among others of similar name or type, such as the last several digits of a credit card number\nvar icon: DisplayRepresentation.Image?\nThe icon or image representing this payment method\nenum PaymentType\nConstants that describe the available payment options.\nDefault Implementations\nInstanceDisplayRepresentable Implementations\nTypeDisplayRepresentable Implementations\n_IntentValue Implementations\nRelationships\nConforms To\nCustomLocalizedStringResourceConvertible\nDisplayRepresentable\nInstanceDisplayRepresentable\nSendable\nTypeDisplayRepresentable\nSee Also\nMonetary types\nstruct IntentCurrencyAmount\nAn amount of money to transfer during a financial transaction."
  },
  {
    "title": "term | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/playvideointent/term",
    "html": "Required"
  },
  {
    "title": "AppIntent Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/playvideointent/appintent-implementations",
    "html": "Topics\nType Properties\nstatic var openAppWhenRun: Bool\nA boolean property that tells the system to consider the app intent even if its app is not in the foreground."
  },
  {
    "title": "isDiscoverable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/isdiscoverable-95nxm",
    "html": "Discussion\n\nApp Intents must be discoverable to support App Shortcuts. If you an app intend isn’t discoverable, people can use it only when it’s directly connected by a button in a SwiftUI app or a widget.\n\nThis property is true by default.\n\nSee Also\nConfiguring the metadata\nstatic var title: LocalizedStringResource\n\nRequired\n\nstatic var description: IntentDescription?\n\nRequired Default implementation provided.\n\nstatic var openAppWhenRun: Bool\n\nRequired Default implementation provided.\n\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\n\nRequired Default implementation provided."
  },
  {
    "title": "authenticationPolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/authenticationpolicy-7ymas",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nAppIntent Implementations\nstatic var authenticationPolicy: IntentAuthenticationPolicy\nSee Also\nSpecifying the authentication policy\nenum IntentAuthenticationPolicy\nAuthentication policies to apply when running an app intent."
  },
  {
    "title": "IntentAuthenticationPolicy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentauthenticationpolicy",
    "html": "Topics\nAuthentication policies\ncase alwaysAllowed\nA policy that allows the app intent to always run, even on a locked device.\ncase requiresAuthentication\nA policy that requires the user to authenticate.\ncase requiresLocalDeviceAuthentication\nA policy that requires the user to authenticate on the local device.\nOperators\nstatic func == (IntentAuthenticationPolicy, IntentAuthenticationPolicy) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nSpecifying the authentication policy\nstatic var authenticationPolicy: IntentAuthenticationPolicy\n\nRequired Default implementation provided."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/init()",
    "html": "Required"
  },
  {
    "title": "TypeDisplayRepresentable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentable",
    "html": "Topics\nType Properties\nstatic var typeDisplayRepresentation: TypeDisplayRepresentation\nA short, localized, human-readable name for the type.\n\nRequired\n\nRelationships\nInherited By\nAppEntity\nAppEnum\nAppValue\nDisplayRepresentable\nStaticDisplayRepresentable\nTransientAppEntity\nConforming Types\nIntentCurrencyAmount\nIntentFile\nIntentPaymentMethod\nIntentPerson\nStringSearchScope\nVideoCategory\nSee Also\nEntity presentation\nstruct DisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol DisplayRepresentable\nAn interface for providing a dynamic visual representation of a specific type and instances of that type.\nprotocol InstanceDisplayRepresentable\nAn interface for providing the visual representation for an instance of a specific type.\nstruct TypeDisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol StaticDisplayRepresentable\nAn interface for providing a static visual representation of a specific type.\nprotocol CaseDisplayRepresentable\nAn interface for providing the visual representation for an iterable collection of values."
  },
  {
    "title": "VideoCategory.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "CaseDisplayRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory/casedisplayrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar localizedStringResource: LocalizedStringResource"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "PersistentlyIdentifiable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory/persistentlyidentifiable-implementations",
    "html": "Topics\nType Properties\nstatic var persistentIdentifier: String\nA string that uniquely identifies this type."
  },
  {
    "title": "DisplayRepresentable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentable",
    "html": "Relationships\nInherits From\nCustomLocalizedStringResourceConvertible\nInstanceDisplayRepresentable\nTypeDisplayRepresentable\nInherited By\nAppEntity\nTransientAppEntity\nConforming Types\nIntentCurrencyAmount\nIntentFile\nIntentPaymentMethod\nIntentPerson\nSee Also\nEntity presentation\nstruct DisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol InstanceDisplayRepresentable\nAn interface for providing the visual representation for an instance of a specific type.\nprotocol TypeDisplayRepresentable\nAn interface for providing the visual representation of a specific type.\nstruct TypeDisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol StaticDisplayRepresentable\nAn interface for providing a static visual representation of a specific type.\nprotocol CaseDisplayRepresentable\nAn interface for providing the visual representation for an iterable collection of values."
  },
  {
    "title": "EntityProperty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityproperty",
    "html": "Topics\nInitializers\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitMass>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFuelEfficiency>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDispersion>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitEnergy>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitConcentrationMass>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAngle>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitLength>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPower>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCharge>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Bool.\nInstance Properties\nvar isOptional: Bool\nvar projectedValue: EntityProperty<Value>\nvar title: LocalizedStringResource\nvar wrappedValue: Value\nRelationships\nConforms To\nAnyIntentValue\nSendable\nSee Also\nEntity content\nprotocol AppValue\nA protocol designating conceptual types that are understood by App Intents such as AppEntity and AppEnum.\nprotocol AnyIntentValue\nprotocol AppEnum\nAn interface to express that a custom type has a predefined, static set of valid values to display."
  },
  {
    "title": "RawRepresentable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory/rawrepresentable-implementations",
    "html": "Topics\nInstance Properties\nvar hashValue: Int\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nAvailable when Self conforms to Hashable and RawValue conforms to Hashable."
  },
  {
    "title": "CaseDisplayRepresentable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/casedisplayrepresentable",
    "html": "Topics\nDescribing the case conditions\nstatic var caseDisplayRepresentations: [Self : DisplayRepresentation]\nA dictionary that maps each value to the visual elements that reperesent it.\n\nRequired\n\nProviding a localized description\nvar localizedStringResource: LocalizedStringResource\nvar localizedStringResource: LocalizedStringResource\nAvailable when Self conforms to InstanceDisplayRepresentable.\nRelationships\nInherits From\nCaseIterable\nCustomLocalizedStringResourceConvertible\nEquatable\nHashable\nInherited By\nAppEnum\nStaticDisplayRepresentable\nConforming Types\nStringSearchScope\nVideoCategory\nSee Also\nEntity presentation\nstruct DisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol DisplayRepresentable\nAn interface for providing a dynamic visual representation of a specific type and instances of that type.\nprotocol InstanceDisplayRepresentable\nAn interface for providing the visual representation for an instance of a specific type.\nprotocol TypeDisplayRepresentable\nAn interface for providing the visual representation of a specific type.\nstruct TypeDisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol StaticDisplayRepresentable\nAn interface for providing a static visual representation of a specific type."
  },
  {
    "title": "StaticDisplayRepresentable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/staticdisplayrepresentable",
    "html": "Relationships\nInherits From\nCaseDisplayRepresentable\nCaseIterable\nCustomLocalizedStringResourceConvertible\nEquatable\nHashable\nTypeDisplayRepresentable\nInherited By\nAppEnum\nConforming Types\nStringSearchScope\nVideoCategory\nSee Also\nEntity presentation\nstruct DisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol DisplayRepresentable\nAn interface for providing a dynamic visual representation of a specific type and instances of that type.\nprotocol InstanceDisplayRepresentable\nAn interface for providing the visual representation for an instance of a specific type.\nprotocol TypeDisplayRepresentable\nAn interface for providing the visual representation of a specific type.\nstruct TypeDisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol CaseDisplayRepresentable\nAn interface for providing the visual representation for an iterable collection of values."
  },
  {
    "title": "AppIntent.Switch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/switch",
    "html": "See Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias When"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope/init(rawvalue:)",
    "html": "Parameters\nrawValue\n\nThe raw value to use for the new instance.\n\nDiscussion\n\nIf there is no value of the type that corresponds with the specified raw value, this initializer returns nil. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nprint(PaperSize(rawValue: \"Legal\"))\n// Prints \"Optional(\"PaperSize.Legal\")\"\n\n\nprint(PaperSize(rawValue: \"Tabloid\"))\n// Prints \"nil\"\n"
  },
  {
    "title": "AppValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appvalue",
    "html": "Relationships\nInherits From\nPersistentlyIdentifiable\nSendable\nTypeDisplayRepresentable\nInherited By\nAppEntity\nAppEnum\nTransientAppEntity\nConforming Types\nStringSearchScope\nVideoCategory\nSee Also\nEntity content\nclass EntityProperty\nA property wrapper that exposes the associated property to the system.\nprotocol AnyIntentValue\nprotocol AppEnum\nAn interface to express that a custom type has a predefined, static set of valid values to display."
  },
  {
    "title": "PersistentlyIdentifiable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/customintentmigratedappintent/persistentlyidentifiable-implementations",
    "html": "Topics\nType Properties\nstatic var persistentIdentifier: String\nA string that uniquely identifies this type."
  },
  {
    "title": "NeverResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/widgetconfigurationintent/neverresult",
    "html": "Required"
  },
  {
    "title": "deprecation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/deprecatedappintent/deprecation-6q6dr",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nDeprecatedAppIntent Implementations\nstatic var deprecation: IntentDeprecation<Never>"
  },
  {
    "title": "Entity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/deleteintent/entity",
    "html": "Required"
  },
  {
    "title": "requestConfirmation(result:confirmationActionName:showPrompt:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/requestconfirmation(result:confirmationactionname:showprompt:)",
    "html": "See Also\nRequesting confirmation\nfunc requestConfirmation() async throws\nRequests user confirmation before performing the app intent.\nfunc requestConfirmation<Result>(output: Result, confirmationActionName: ConfirmationActionName, showPrompt: Bool) async throws\nDeprecated"
  },
  {
    "title": "ShortcutsLink | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslink",
    "html": "Topics\nCreating the link\ninit(action: () -> Void)\nCreates a link that launches Shortcuts and then executes the specified closure.\nImplementing the view\nvar body: some View\nThe content and behavior of the view.\ntypealias Body\nThe type of view representing the body of this view.\nDefault Implementations\nView Implementations\nRelationships\nConforms To\nView\nSee Also\nButtons\nclass ShortcutsUIButton\nA button that opens the current app’s page in the Shortcuts app.\nstruct ShortcutsLinkStyle\nThe styles to apply to buttons you use to open your app’s page in the Shortcuts app."
  },
  {
    "title": "init(intent:phrases:shortTitle:systemImageName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcut/init(intent:phrases:shorttitle:systemimagename:)-2hk1x",
    "html": "Discussion\n\nUse init(intent:phrases:shortTitle:systemImageName:) or init(intent:phrases:shortTitle:systemImageName:parameterPresentation:) instead to allow people to place your App Shortcut on the Action button of supported iPhone models.\n\nSee Also\nCreating an app shortcut\ninit<Intent>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource, systemImageName: String)\ninit<Intent, Value, Parameter, ParameterKeyPath>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource, systemImageName: String, parameterPresentation: AppShortcutParameterPresentation<Intent, Value, Parameter, ParameterKeyPath>)\nInitializes an App Shortcut with phrases that run the app intent, a title, an image, and specified parameters."
  },
  {
    "title": "URLFromStringResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/urlfromstringresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: String, context: IntentParameterContext<URL>) async throws -> URL?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (URLFromStringResolver, URLFromStringResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nResolver\nSendable"
  },
  {
    "title": "StringFromIntResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromintresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: Input, context: IntentParameterContext<Output>) async throws -> Output?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (StringFromIntResolver<Input, Output>, StringFromIntResolver<Input, Output>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nResolver\nSendable\nSee Also\nString resolution\nstruct AttributedStringFromStringResolver\nA resolver that converts a string into an attributed string.\nstruct StringFromDoubleResolver\nA resolver that converts a double into a string."
  },
  {
    "title": "StringSearchScope.RawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope/rawvalue-swift.typealias",
    "html": "Discussion\n\nEvery distinct value of the conforming type has a corresponding unique value of the RawValue type, but there may be values of the RawValue type that don’t have a corresponding value of the conforming type."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteria/hashvalue",
    "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
  },
  {
    "title": "AppEnum Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope/appenum-implementations",
    "html": "Topics\nType Properties\nstatic var defaultResolverSpecification: some ResolverSpecification"
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "_IntentValue Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteria/_intentvalue-implementations",
    "html": "Topics\nType Properties\nstatic var defaultResolverSpecification: some ResolverSpecification"
  },
  {
    "title": "supportedCategories | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/playvideointent/supportedcategories",
    "html": "Required"
  },
  {
    "title": "Criteria | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/showinappsearchresultsintent/criteria-swift.associatedtype",
    "html": "Required"
  },
  {
    "title": "criteria | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/showinappsearchresultsintent/criteria-swift.property",
    "html": "Required"
  },
  {
    "title": "SearchScopes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/searchcriteria/searchscopes",
    "html": "Required"
  },
  {
    "title": "IntentCollectionSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcollectionsize",
    "html": "Topics\nOperators\nstatic func == (IntentCollectionSize, IntentCollectionSize) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(exactly: Int)\ninit(integerLiteral: Int)\nCreates an instance initialized to the specified integer value.\ninit(min: Int, max: Int)\nType Aliases\ntypealias IntegerLiteralType\nA type that represents an integer literal.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nExpressibleByIntegerLiteral\nSee Also\nItems and collections\nstruct IntentItem\nA type describing a value returned from a dynamic options provider, plus information about how to display it to users.\nstruct IntentItemCollection\nReturn this object to provide an advanced list of options, optionally divided in sections.\nstruct IntentItemSection\nAn object used to divide dynamic options int sections. IntentItemSections are returned within a IntentItemCollection."
  },
  {
    "title": "IntentItemSection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentitemsection",
    "html": "Topics\nInitializers\ninit(LocalizedStringResource, items: [Result])\ninit(LocalizedStringResource, items: [IntentItem<Result>])\ninit(LocalizedStringResource?, itemsBuilder: () -> [IntentItem<Result>])\ninit(LocalizedStringResource, subtitle: LocalizedStringResource?, image: DisplayRepresentation.Image?, itemsBuilder: () -> [IntentItem<Result>])\ninit(items: [IntentItem<Result>])\ninit(title: LocalizedStringResource, items: [IntentItem<Result>])\nDeprecated\nInstance Properties\nvar description: DisplayRepresentation?\nvar items: [IntentItem<Result>]\nEnumerations\nenum Builder\nAvailable when Result conforms to _IntentValue.\nSee Also\nItems and collections\nstruct IntentItem\nA type describing a value returned from a dynamic options provider, plus information about how to display it to users.\nstruct IntentItemCollection\nReturn this object to provide an advanced list of options, optionally divided in sections.\nstruct IntentCollectionSize"
  },
  {
    "title": "IntentItemCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentitemcollection",
    "html": "Example\nstruct CreateBookIntent: AppIntent {\n    @Parameter(title: \"Author Name\", optionsProvider: AuthorNamesOptionsProvider())\n    var authorName: String\n\n\n    struct AuthorNamesOptionsProvider: DynamicOptionsProvider {\n        func results() async throws -> ItemCollection<Int> {\n            ItemCollection {\n                ItemSection(\"Italian Authors\") {\n                    \"Dante Alighieri\"\n                    \"Alessandro Manzoni\"\n                }\n                ItemSection(\"Russian Authors\") {\n                    \"Anton Chekhov\"\n                    \"Fyodor Dostoevsky\"\n                }\n            }\n        }\n    }\n}\n\nTopics\nInitializers\ninit(promptLabel: LocalizedStringResource?, usesIndexedCollation: Bool, items: [Result])\nCreate a ItemCollection containing Items, or one or more Sections.\ninit(promptLabel: LocalizedStringResource?, usesIndexedCollation: Bool, sections: [IntentItemSection<Result>])\nCreate an ItemCollection containing one or more Sections.\ninit(promptLabel: LocalizedStringResource?, usesIndexedCollation: Bool, sectionsBuilder: () -> [IntentItemSection<Result>])\nCreate an ItemCollection containing Items, or one or more Sections provided by a builder.\nInstance Properties\nvar items: [Result.ValueType]\nReturns all results as an array.\nvar promptLabel: LocalizedStringResource?\nA text prompt shown at the top of the view that presents the options.\nvar sections: [IntentItemSection<Result>]\nvar usesIndexedCollation: Bool\nIf set to true, presents the list of options with an alphabetical index on the right side of the screen (table view section index titles).\nType Properties\nstatic var empty: IntentItemCollection<Result>\nReturns an empty result.\nRelationships\nConforms To\nResultsCollection\nSee Also\nItems and collections\nstruct IntentItem\nA type describing a value returned from a dynamic options provider, plus information about how to display it to users.\nstruct IntentItemSection\nAn object used to divide dynamic options int sections. IntentItemSections are returned within a IntentItemCollection.\nstruct IntentCollectionSize"
  },
  {
    "title": "IntentItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentitem",
    "html": "Topics\nInitializers\ninit(Value)\nInitialize an IntentItem and use displayRepresentation from value\ninit(Value, title: LocalizedStringResource, subtitle: LocalizedStringResource?, image: DisplayRepresentation.Image?)\nCreates an item with the specified value and visual attributes.\nInstance Properties\nvar description: DisplayRepresentation\nvar value: Value\nEnumerations\nenum Builder\nAvailable when Value conforms to _IntentValue.\nSee Also\nItems and collections\nstruct IntentItemCollection\nReturn this object to provide an advanced list of options, optionally divided in sections.\nstruct IntentItemSection\nAn object used to divide dynamic options int sections. IntentItemSections are returned within a IntentItemCollection.\nstruct IntentCollectionSize"
  },
  {
    "title": "IntentCurrencyAmount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentcurrencyamount",
    "html": "Topics\nCreating a currency type\ninit(amount: Decimal, currencyCode: String)\nCreates a IntentCurrencyAmount from a monetary amount and a currency code.\nGetting the currency details\nlet amount: Decimal\nThe monetary amount.\nlet currencyCode: String\nThe ISO 4217 currency code that applies to the monetary amount.\nOperators\nstatic func == (IntentCurrencyAmount, IntentCurrencyAmount) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nInstanceDisplayRepresentable Implementations\nTypeDisplayRepresentable Implementations\n_IntentValue Implementations\nRelationships\nConforms To\nCustomLocalizedStringResourceConvertible\nDisplayRepresentable\nEquatable\nHashable\nInstanceDisplayRepresentable\nSendable\nTypeDisplayRepresentable\nSee Also\nMonetary types\nstruct IntentPaymentMethod\nInformation about a form of payment supported by your app."
  },
  {
    "title": "IntentPrediction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentprediction",
    "html": "Topics\nCreating a prediction\ninit(displayRepresentation: () -> DisplayRepresentation)\nInitializers\ninit<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, P0, P1, P2, P3, P4, P5, K0, K1, K2, K3, K4, K5>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13, K14>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, P0, P1, K0, K1>(parameters: T, displayRepresentation: (V0, V1) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, P0>(parameters: T, displayRepresentation: (V0) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, P0, P1, P2, P3, P4, K0, K1, K2, K3, K4>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, V6, V7, P0, P1, P2, P3, P4, P5, P6, P7, K0, K1, K2, K3, K4, K5, K6, K7>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6, V7) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, P0, P1, P2, K0, K1, K2>(parameters: T, displayRepresentation: (V0, V1, V2) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, V6, P0, P1, P2, P3, P4, P5, P6, K0, K1, K2, K3, K4, K5, K6>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, V6, V7, V8, P0, P1, P2, P3, P4, P5, P6, P7, P8, K0, K1, K2, K3, K4, K5, K6, K7, K8>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6, V7, V8) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, P0, P1, P2, P3, K0, K1, K2, K3>(parameters: T, displayRepresentation: (V0, V1, V2, V3) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\ninit<V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, K0, K1, K2, K3, K4, K5, K6, K7, K8, K9, K10, K11, K12, K13>(parameters: T, displayRepresentation: (V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> DisplayRepresentation)\nAvailable when Intent conforms to AppIntent.\nRelationships\nConforms To\nIntentPredictionConfiguration\nSee Also\nIntent predictions\nprotocol PredictableIntent\nAn interface that allows the system to suggest the app intent to someone in the future using predictions you provide."
  },
  {
    "title": "RelevantIntentManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantintentmanager",
    "html": "Topics\nInstance Methods\nfunc updateRelevantIntents([RelevantIntent]) async throws\nGive the system the list of relevant intents for your app. To replace the list, call this method again, passing in a new list of relevant intents. To remove all relevant intents associated with your app, call this method with an empty array.\nType Properties\nstatic let shared: RelevantIntentManager\nGet the singleton shared instance of this class.\nSee Also\nIntent relevancy\nstruct RelevantIntent\nA type that specifies an intent and its relevance to the user.\nstruct RelevantContext\nA type that specifies conditions for relevance."
  },
  {
    "title": "RelevantContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantcontext",
    "html": "Topics\nStructures\nstruct FitnessCondition\nstruct HeadphonesCondition\nstruct InferredLocation\nstruct SleepCondition\nType Methods\nstatic func date(Date) -> RelevantContext\nAn exact point in time, such as the start of a sporting event or a live broadcast.\nstatic func date(from: Date, to: Date) -> RelevantContext\nAn exact range in time: similar uses as date(), but with a known endpoint.\nstatic func fitness(RelevantContext.FitnessCondition) -> RelevantContext\nFitness.\nstatic func hardware(headphones: RelevantContext.HeadphonesCondition) -> RelevantContext\nHardware\nstatic func location(CLRegion) -> RelevantContext\nAn exact region. To create a region based on a point location or an address, see CoreLocation.\nstatic func location(inferred: RelevantContext.InferredLocation) -> RelevantContext\nAn abstract location, inferred from user behavior.\nstatic func sleep(RelevantContext.SleepCondition) -> RelevantContext\nSleep\nSee Also\nIntent relevancy\nstruct RelevantIntent\nA type that specifies an intent and its relevance to the user.\nclass RelevantIntentManager\nA type that saves relevant intents."
  },
  {
    "title": "IntFromStringResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromstringresolver",
    "html": "Topics\nCreating the resolver\ninit(radix: Int)\nResolving the type\nfunc resolve(from: String, context: IntentParameterContext<Int>) async throws -> Int?\nConverts the specified value into the expected data type.\nGetting the radix setting\nvar radix: Int\nOperators\nstatic func == (IntFromStringResolver, IntFromStringResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nRangeCheckingResolver Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRangeCheckingResolver\nResolver\nSendable\nSee Also\nInteger resolution\nstruct IntFromDoubleResolver\nA resolver that converts a double into an integer using the specified rounding rule and validates the result is within the parameter’s inclusive range.\nstruct IntResolver\nA resolver that validates an integer is within the parameter’s inclusive range."
  },
  {
    "title": "RelevantIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/relevantintent",
    "html": "Topics\nInitializers\ninit<IntentType>(IntentType, widgetKind: String, relevance: RelevantContext)\nDefault Implementations\nCustomDebugStringConvertible Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nSee Also\nIntent relevancy\nclass RelevantIntentManager\nA type that saves relevant intents.\nstruct RelevantContext\nA type that specifies conditions for relevance."
  },
  {
    "title": "IntentDonationIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationidentifier",
    "html": "Topics\nCreating an identifier\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nEncoding the type\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder.\nComparing identifiers\nstatic func == (IntentDonationIdentifier, IntentDonationIdentifier) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nDonation management\nstruct IntentDonationManager\nA type you use to donate intents to the system, or delete intents when they become irrelevant.\nstruct IntentDonationMatchingPredicate\nThe match conditions that identify a set of previously donated app intents."
  },
  {
    "title": "PredictableIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/predictableintent",
    "html": "Topics\nProviding predictions\nstatic var predictionConfiguration: Self.Prediction\nA collection of predictions the system can use when it suggests the app intent.\n\nRequired\n\nprotocol IntentPredictionConfiguration\nAn interface that provides the configuration for a single prediction.\nenum IntentPredictionsBuilder\nA result builder that allows you to declaratively describe the predictions for an app intent.\nAssociated Types\nassociatedtype Prediction : IntentPredictionConfiguration\n\nRequired\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSee Also\nIntent predictions\nstruct IntentPrediction\nA prediction for a specific app intent that the system might display to someone when it’s relevant."
  },
  {
    "title": "IntentDonationManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationmanager",
    "html": "Topics\nGetting the donation manager\nstatic var shared: IntentDonationManager\nDeleting previous donations\nfunc deleteDonations(matching: IntentDonationMatchingPredicate) async throws -> [IntentDonationIdentifier]\nDeletes all transcript records matching the given predicate and returns their identifiers.\nInstance Methods\nfunc donate(intent: some AppIntent) -> IntentDonationIdentifier\nDonates an AppIntent to the transcript.\nfunc donate(intent: some AppIntent) async throws -> IntentDonationIdentifier\nDonates an AppIntent to the transcript.\nfunc donate(intent: some AppIntent, result: some IntentResult) async throws -> IntentDonationIdentifier\nDonates an AppIntent and IntentResult to the transcript.\nfunc donate(intent: some AppIntent, result: some IntentResult) -> IntentDonationIdentifier\nDonates an AppIntent and IntentResult to the transcript.\nSee Also\nDonation management\nstruct IntentDonationIdentifier\nAn opaque type that identifies a specific donation to the system.\nstruct IntentDonationMatchingPredicate\nThe match conditions that identify a set of previously donated app intents."
  },
  {
    "title": "IntentDonationMatchingPredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdonationmatchingpredicate",
    "html": "Topics\nCreating a predicate\nstatic func donationIdentifier(IntentDonationIdentifier) -> IntentDonationMatchingPredicate\nDelete the transcript record with the given donation identifier\nstatic func entityIdentifier(EntityIdentifier) -> IntentDonationMatchingPredicate\nDelete all transcript records referencing the given AppEntity instance\nstatic func intentType(AppIntent.Type, entityIdentifier: EntityIdentifier?) -> IntentDonationMatchingPredicate\nDelete all transcript records for the given AppIntent type, optionally only those referencing a given AppEntity instance identifier\nSee Also\nDonation management\nstruct IntentDonationManager\nA type you use to donate intents to the system, or delete intents when they become irrelevant.\nstruct IntentDonationIdentifier\nAn opaque type that identifies a specific donation to the system."
  },
  {
    "title": "EntityIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifier",
    "html": "Topics\nCreating an entity identifier\ninit<Entity>(for: Entity)\nCreates an identifier for the specified entity\ninit<Entity>(for: Entity.Type, identifier: Entity.ID)\nCreates an EntityIdentifier representing an instance of the specified entity type backed by the specified identifier value.\nGetting the identifier details\nlet identifier: String\nlet entityType: AppEntity.Type\nstatic let valueMaximumLength: Int\nMaximum allowed length for the identifier value. This is a constraint imposed by the system and thus forces us to truncate the identifier if it exceeds the maximum length.\nDescribing the identifier\nvar description: String\nA textual representation of this instance.\nProviding a hash value\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nOperators\nstatic func == (EntityIdentifier, EntityIdentifier) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nDefault Implementations\nEquatable Implementations\n_IntentValue Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nSendable\nSee Also\nEntity identity\nprotocol PersistentlyIdentifiable\nDefines a string that uniquely identifies a type. This is useful for maintaining the identity of a type, even when its type name is changed.\nprotocol EntityIdentifierConvertible\nAn interface for converting between an entity’s identifier and its string representation."
  },
  {
    "title": "AnyIntentValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/anyintentvalue",
    "html": "Topics\nAssociated Types\nassociatedtype Value : _IntentValue, Sendable\n\nRequired\n\nInstance Properties\nvar isOptional: Bool\n\nRequired\n\nvar title: LocalizedStringResource\n\nRequired\n\nRelationships\nInherits From\nSendable\nConforming Types\nEntityProperty\nIntentParameter\nConforms when Value conforms to _IntentValue and Sendable.\nIntentParameterContext\nSee Also\nEntity content\nclass EntityProperty\nA property wrapper that exposes the associated property to the system.\nprotocol AppValue\nA protocol designating conceptual types that are understood by App Intents such as AppEntity and AppEnum.\nprotocol AppEnum\nAn interface to express that a custom type has a predefined, static set of valid values to display."
  },
  {
    "title": "TransientAppEntity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/transientappentity",
    "html": "Topics\nInitializers\ninit()\nTransient entities must be initializable so they can be initialized and populated by the system.\n\nRequired\n\nDefault Implementations\nIdentifiable Implementations\nRelationships\nInherits From\nAppEntity\nAppValue\nCustomLocalizedStringResourceConvertible\nDisplayRepresentable\nIdentifiable\nInstanceDisplayRepresentable\nPersistentlyIdentifiable\nSendable\nTypeDisplayRepresentable\nSee Also\nEntities\nIntegrating custom data types into your intents\nProvide the system with information about the types your app uses to model its data so that your intents can use those types as parameters.\nprotocol AppEntity\nAn interface for exposing a custom type or app-specific concept to system services such as Siri and the Shortcuts app."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope/rawvalue-swift.property",
    "html": "Discussion\n\nA new instance initialized with rawValue will be equivalent to this instance. For example:\n\nenum PaperSize: String {\n    case A4, A5, Letter, Legal\n}\n\n\nlet selectedSize = PaperSize.Letter\nprint(selectedSize.rawValue)\n// Prints \"Letter\"\n\n\nprint(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)\n// Prints \"true\"\n"
  },
  {
    "title": "DoubleFromStringResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromstringresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: String, context: IntentParameterContext<Double>) async throws -> Double?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (DoubleFromStringResolver, DoubleFromStringResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nRangeCheckingResolver Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRangeCheckingResolver\nResolver\nSendable\nSee Also\nFloating-point resolution\nstruct DoubleFromIntResolver\nA resolver that converts an integer into a double and validates the result is within the parameter’s inclusive range.\nstruct DoubleResolver\nA resolver that validates a double is within the parameter’s inclusive range."
  },
  {
    "title": "SiriTipView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipview",
    "html": "Overview\n\nUse a SiriTipView to display the spoken phrase for the intent you specify. Include an instance of your intent when you create the view, and bind the view to a Boolean to handle the view’s presentation. The following example shows how to configure a button for a reorder intent and bind it to an isVisible variable.\n\nSiriTipView(intent: ReorderIntent(), isVisible: $isVisible)\n    .siriTipViewStyle(.black)\n\nTopics\nCreating the view\ninit<Intent>(intent: Intent, isVisible: Binding<Bool>?)\nCreates a SiriTipView for the associated action that displays when the binding to a Boolean value is true .\nImplementing the view\nvar body: some View\nThe content and behavior of the view.\ntypealias Body\nThe type of view representing the body of this view.\nDefault Implementations\nView Implementations\nRelationships\nConforms To\nView\nSee Also\nTip views\nclass SiriTipUIView\nA view that displays the phrase someone uses to invoke an App Shortcut.\nstruct SiriTipViewStyle\nThe styles to apply to the tip views you use to display spoken phrases."
  },
  {
    "title": "ShortcutsLinkStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutslinkstyle",
    "html": "Overview\n\nSpecify a ShortcutsLinkStyle value when you add a ShortcutsUIButton or ShortcutsLink type to your interface. For the ShortcutsLink type, specify the style using the shortcutsLinkStyle(_:) modifier.\n\nTopics\nGetting the styles\nstatic let automatic: ShortcutsLinkStyle\nThe default button style, based on the current color scheme.\nstatic let automaticOutline: ShortcutsLinkStyle\nThe default button style with an outline, based on the current color scheme.\nType Properties\nstatic let dark: ShortcutsLinkStyle\nA button style that applies a dark background with light text.\nstatic let darkOutline: ShortcutsLinkStyle\nA button style that applies a dark background with light text along with a light outline.\nstatic let light: ShortcutsLinkStyle\nA button style that applies a light background with dark text.\nstatic let lightOutline: ShortcutsLinkStyle\nA button style that applies a light background with dark text along with a dark outline.\nSee Also\nButtons\nclass ShortcutsUIButton\nA button that opens the current app’s page in the Shortcuts app.\nstruct ShortcutsLink\nA link that opens the current app’s page in the Shortcuts app."
  },
  {
    "title": "OpenIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/openintent",
    "html": "Overview\n\nThis intent can be used to open both dynamic items such as AppEntitys and static items such as AppEnums; eg. “Open ‘Vacation Ideas’” or “Open bookmarks”.\n\nTopics\nAssociated Types\nassociatedtype Value : AppValue\n\nRequired\n\nInstance Properties\nvar target: Self.Value\n\nRequired\n\nDefault Implementations\nAppIntent Implementations\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "SiriTipViewStyle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipviewstyle",
    "html": "Overview\n\nSpecify a SiriTipViewStyle value when you add a SiriTipUIView or SiriTipView type to your interface. For the SiriTipView type, specify the style using the siriTipViewStyle(_:) modifier.\n\nTopics\nGetting the styles\nstatic let automatic: SiriTipViewStyle\nThe default tip style, based on the current color scheme.\nType Properties\nstatic let dark: SiriTipViewStyle\nA tip style that applies a dark background with light text.\nstatic let light: SiriTipViewStyle\nA tip style that applies a light background with dark text.\nSee Also\nTip views\nclass SiriTipUIView\nA view that displays the phrase someone uses to invoke an App Shortcut.\nstruct SiriTipView\nA SwiftUI view that displays the phrase someone uses to invoke an App Shortcut."
  },
  {
    "title": "progress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/progressreportingintent/progress",
    "html": "Discussion\n\nYou can update this Progress object as your execution moves forward. The updates will be reported to the system.\n\nWarning\n\nThis progress is available only in the perform method. Trying to access this Progress object outside perform will result in a crash."
  },
  {
    "title": "AppEnum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appenum",
    "html": "Overview\n\nAdopt the AppEnum protocol in a type that has a known set of valid values. You might use this protocol to specify that a variable of one of your intents has a fixed set of possible values. For example, you might use a variable to specify whether to navigate to the next or previous track in a music playlist.\n\nBecause this type conforms to the StaticDisplayRepresentable protocol, provide a string-based representation of your type’s values in your implementation. For example, provide descriptions for each case of an enum type in the inherited caseDisplayRepresentations property.\n\nTopics\nResolving the type\nstatic var defaultResolverSpecification: some ResolverSpecification\nRelationships\nInherits From\nAppValue\nCaseDisplayRepresentable\nCaseIterable\nCustomLocalizedStringResourceConvertible\nEquatable\nHashable\nPersistentlyIdentifiable\nRawRepresentable\nSendable\nStaticDisplayRepresentable\nTypeDisplayRepresentable\nConforming Types\nStringSearchScope\nVideoCategory\nSee Also\nEntity content\nclass EntityProperty\nA property wrapper that exposes the associated property to the system.\nprotocol AppValue\nA protocol designating conceptual types that are understood by App Intents such as AppEntity and AppEnum.\nprotocol AnyIntentValue"
  },
  {
    "title": "AppShortcutParameterPresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentation",
    "html": "Topics\nInitializers\ninit(for: ParameterKeyPath, summary: AppShortcutParameterPresentationSummary<Intent, Value, Parameter, ParameterKeyPath>, optionsCollections: () -> some AppShortcutOptionsCollectionSpecification<Value.UnwrappedType>)\nInitializes an AppShortcutParameterPresentation with the specified parameters.\nSee Also\nApp Shortcut parameter presentation\nstruct AppShortcutParameterPresentationSummary\nThis struct represents the summary of an AppShortcutParameterPresentation, which should have the summary string. The summary should include the parameter in the interpolation, e.g. “Call (.$person)”.\nstruct AppShortcutParameterPresentationSummaryString\nstruct AppShortcutParameterPresentationTitle\nThis struct represents the title of an AppShortcutParameterPresentation, which should have both a specific and a generic title. The specific title should include the parameter in the interpolation, e.g. “Call (.$person)”, while the generic title is a simple string that doesn’t have the parameter specified, e.g. “Call Person…”.\nDeprecated\nstruct AppShortcutParameterPresentationTitleString\nDeprecated"
  },
  {
    "title": "AppShortcutParameterPresentationTitleString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitlestring",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nTopics\nStructures\nstruct StringInterpolation\nThe type each segment of a string literal containing interpolations should be appended to.\nInitializers\ninit(String)\ninit(stringInterpolation: AppShortcutParameterPresentationTitleString<Intent, Value, Parameter, ParameterKeyPath>.StringInterpolation)\nCreates an instance from a string interpolation.\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringInterpolation\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nApp Shortcut parameter presentation\nstruct AppShortcutParameterPresentation\nDescribes the presentation of an AppShortcut for the provided parameter.\nstruct AppShortcutParameterPresentationSummary\nThis struct represents the summary of an AppShortcutParameterPresentation, which should have the summary string. The summary should include the parameter in the interpolation, e.g. “Call (.$person)”.\nstruct AppShortcutParameterPresentationSummaryString\nstruct AppShortcutParameterPresentationTitle\nThis struct represents the title of an AppShortcutParameterPresentation, which should have both a specific and a generic title. The specific title should include the parameter in the interpolation, e.g. “Call (.$person)”, while the generic title is a simple string that doesn’t have the parameter specified, e.g. “Call Person…”.\nDeprecated"
  },
  {
    "title": "AppShortcutParameterPresentationSummaryString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummarystring",
    "html": "Topics\nStructures\nstruct StringInterpolation\nThe type each segment of a string literal containing interpolations should be appended to.\nInitializers\ninit(String)\ninit(stringInterpolation: AppShortcutParameterPresentationSummaryString<Intent, Value, Parameter, ParameterKeyPath>.StringInterpolation)\nCreates an instance from a string interpolation.\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringInterpolation\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nApp Shortcut parameter presentation\nstruct AppShortcutParameterPresentation\nDescribes the presentation of an AppShortcut for the provided parameter.\nstruct AppShortcutParameterPresentationSummary\nThis struct represents the summary of an AppShortcutParameterPresentation, which should have the summary string. The summary should include the parameter in the interpolation, e.g. “Call (.$person)”.\nstruct AppShortcutParameterPresentationTitle\nThis struct represents the title of an AppShortcutParameterPresentation, which should have both a specific and a generic title. The specific title should include the parameter in the interpolation, e.g. “Call (.$person)”, while the generic title is a simple string that doesn’t have the parameter specified, e.g. “Call Person…”.\nDeprecated\nstruct AppShortcutParameterPresentationTitleString\nDeprecated"
  },
  {
    "title": "AppShortcutParameterPresentationTitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationtitle",
    "html": "Deprecated\n\nPlease use init(for:summary:optionsCollections:)\n\nTopics\nInitializers\ninit(specific: AppShortcutParameterPresentationTitleString<Intent, Value, Parameter, ParameterKeyPath>, generic: StaticString, table: StaticString?)\nInitializes an AppShortcutParameterPresentationTitle with the specified parameters.\nSee Also\nApp Shortcut parameter presentation\nstruct AppShortcutParameterPresentation\nDescribes the presentation of an AppShortcut for the provided parameter.\nstruct AppShortcutParameterPresentationSummary\nThis struct represents the summary of an AppShortcutParameterPresentation, which should have the summary string. The summary should include the parameter in the interpolation, e.g. “Call (.$person)”.\nstruct AppShortcutParameterPresentationSummaryString\nstruct AppShortcutParameterPresentationTitleString\nDeprecated"
  },
  {
    "title": "AppShortcutOptionsCollectionSpecificationBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollectionspecificationbuilder",
    "html": "Topics\nType Methods\nstatic func buildBlock<C0>(C0) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1>(C0, C1) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nstatic func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14) -> some AppShortcutOptionsCollectionSpecification<Value>\nAvailable when Value conforms to _IntentValue.\nSee Also\nApp Shortcut options\nstruct AppShortcutOptionsCollection\nprotocol AppShortcutOptionsCollectionProtocol\nprotocol AppShortcutOptionsCollectionSpecification"
  },
  {
    "title": "AppShortcutOptionsCollectionProtocol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollectionprotocol",
    "html": "Topics\nAssociated Types\nassociatedtype Provider : DynamicOptionsProvider\n\nRequired\n\nInstance Properties\nvar dynamicOptionsProvider: Self.Provider\n\nRequired\n\nvar systemImageName: String?\n\nRequired\n\nvar title: LocalizedStringResource\n\nRequired\n\nRelationships\nConforming Types\nAppShortcutOptionsCollection\nSee Also\nApp Shortcut options\nstruct AppShortcutOptionsCollection\nprotocol AppShortcutOptionsCollectionSpecification\nenum AppShortcutOptionsCollectionSpecificationBuilder"
  },
  {
    "title": "NegativeAppShortcutPhrases | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrases",
    "html": "Topics\nInitializers\ninit(phrases: [NegativeAppShortcutPhrase])\nSee Also\nApp Shortcut definition\nstruct AppShortcut\nA type that defines a preconfigured shortcut for a specific app intent.\nstruct AppShortcutPhrase\nA spoken phrase that causes the system to run the corresponding App Shortcut.\nstruct NegativeAppShortcutPhrase\nThis is the representation of a negative phrase. Each negative phrase will be used to populate an app-level negative training set. This set will contain phrases that will completely bypass your app.\nenum AppShortcutsBuilder\nA result builder that allows you to declaratively describe the App Shortcuts that your app provides.\nenum ShortcutTileColor\nColors of a shortcut tile in the Shortcuts app."
  },
  {
    "title": "AppShortcutOptionsCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollection",
    "html": "Topics\nInitializers\ninit(Provider, title: LocalizedStringResource, systemImageName: String?)\nInitializes a collection of options for App Shortcuts with the specified parameters.\nInstance Properties\nlet dynamicOptionsProvider: Provider\nlet systemImageName: String?\nlet title: LocalizedStringResource\nRelationships\nConforms To\nAppShortcutOptionsCollectionProtocol\nSee Also\nApp Shortcut options\nprotocol AppShortcutOptionsCollectionProtocol\nprotocol AppShortcutOptionsCollectionSpecification\nenum AppShortcutOptionsCollectionSpecificationBuilder"
  },
  {
    "title": "ShortcutTileColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcuttilecolor",
    "html": "Topics\nGetting the tile colors\ncase blue\nA blue color.\ncase grape\nA grape color.\ncase grayBlue\nA grayish-blue color.\ncase grayBrown\nA grayish-brown color.\ncase grayGreen\nA grayish-green color.\ncase lightBlue\nA light blue color.\ncase lime\nA lime color.\ncase navy\nA navy blue color.\ncase orange\nAn orange color.\ncase pink\nA pink color.\ncase purple\nA purple color.\ncase red\nA red color.\ncase tangerine\nA tangerine color.\ncase teal\nA teal color.\ncase yellow\nA yellow color.\nOperators\nstatic func == (ShortcutTileColor, ShortcutTileColor) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nApp Shortcut definition\nstruct AppShortcut\nA type that defines a preconfigured shortcut for a specific app intent.\nstruct AppShortcutPhrase\nA spoken phrase that causes the system to run the corresponding App Shortcut.\nstruct NegativeAppShortcutPhrase\nThis is the representation of a negative phrase. Each negative phrase will be used to populate an app-level negative training set. This set will contain phrases that will completely bypass your app.\nstruct NegativeAppShortcutPhrases\nThis is a set of negative phrases, which will all be added to the app-level negative training set. All the training data specified here, will be used to completely bypass your app\nenum AppShortcutsBuilder\nA result builder that allows you to declaratively describe the App Shortcuts that your app provides."
  },
  {
    "title": "AppShortcutPhrase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutphrase",
    "html": "Topics\nCreating a shortcut phrase\ninit(String)\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: AppShortcutPhrase<Intent>.StringInterpolation)\nCreates an instance from a string interpolation.\nstruct StringInterpolation\nA string you construct using literal values, content from intent parameters, and other interpolated values.\nenum AppShortcutPhraseToken\nDynamic values you can include in the spoken phrases that run your shortcut.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringInterpolation\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nApp Shortcut definition\nstruct AppShortcut\nA type that defines a preconfigured shortcut for a specific app intent.\nstruct NegativeAppShortcutPhrase\nThis is the representation of a negative phrase. Each negative phrase will be used to populate an app-level negative training set. This set will contain phrases that will completely bypass your app.\nstruct NegativeAppShortcutPhrases\nThis is a set of negative phrases, which will all be added to the app-level negative training set. All the training data specified here, will be used to completely bypass your app\nenum AppShortcutsBuilder\nA result builder that allows you to declaratively describe the App Shortcuts that your app provides.\nenum ShortcutTileColor\nColors of a shortcut tile in the Shortcuts app."
  },
  {
    "title": "NegativeAppShortcutPhrase | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/negativeappshortcutphrase",
    "html": "Topics\nStructures\nstruct StringInterpolation\nThe type each segment of a string literal containing interpolations should be appended to.\nInitializers\ninit(String)\ninit(stringInterpolation: NegativeAppShortcutPhrase.StringInterpolation)\nCreates an instance from a string interpolation.\ninit(stringLiteral: StringLiteralType)\nCreates an instance initialized to the given string value.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringInterpolation\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nApp Shortcut definition\nstruct AppShortcut\nA type that defines a preconfigured shortcut for a specific app intent.\nstruct AppShortcutPhrase\nA spoken phrase that causes the system to run the corresponding App Shortcut.\nstruct NegativeAppShortcutPhrases\nThis is a set of negative phrases, which will all be added to the app-level negative training set. All the training data specified here, will be used to completely bypass your app\nenum AppShortcutsBuilder\nA result builder that allows you to declaratively describe the App Shortcuts that your app provides.\nenum ShortcutTileColor\nColors of a shortcut tile in the Shortcuts app."
  },
  {
    "title": "EntityQuerySort | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysort",
    "html": "Topics\nGetting the property details\nlet by: PartialKeyPath<Entity>\nGetting the sort order\nlet order: EntityQuerySort<Entity>.Ordering\nenum Ordering\nSee Also\nProperty-matched queries\nprotocol EntityPropertyQuery\nAn interface for locating entities by matching values against one or more of their properties.\nstruct EntityQueryProperties\nA type that provides the properties to include in a property-matched query.\nclass EntityQueryProperty\nAn object that provides the supported comparators for a queryable property.\nProperty comparators\nSpecify the type of comparison to perform during a property-matched query.\nstruct EntityQuerySortingOptions\nThe potential properties you can use to sort the results of a query.\nstruct EntityQuerySortableByProperty\nDetails about a specific property you use to sort the query results."
  },
  {
    "title": "AppShortcutsProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutsprovider",
    "html": "Overview\n\nRelated sessions from WWDC22\n\nSession 10170: Implement App Shortcuts with App Intents, and session 10169: Design App Shortcuts.\n\nNote\n\nApple may extract anonymized App Shortcuts data such as localized phrases, display representation values, and the title and description of related intents. Machine learning models use this data when training to help improve the App Shortcuts experience.\n\nTopics\nType Aliases\ntypealias OptionsCollection\ntypealias ParameterPresentation\ntypealias Summary\ntypealias Title\nDeprecated\nType Properties\nstatic var appShortcuts: [AppShortcut]\n\nRequired\n\nstatic var negativePhrases: NegativeAppShortcutPhrases\nstatic var shortcutTileColor: ShortcutTileColor\nThe background color of the tile that Shortcuts displays for each of the app’s App Shortcuts.\n\nRequired Default implementation provided.\n\nType Methods\nstatic func updateAppShortcutParameters()"
  },
  {
    "title": "EntityQuerySortingOptions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysortingoptions",
    "html": "Topics\nCreating the sorting options\ninit(content: () -> [EntityQuerySortableByProperty<Entity>])\nenum EntityQuerySortingOptionsBuilder\nA result builder that allows you to declaratively describe the sorting options for an entity query.\nGetting the sorting options\nsubscript(Int) -> EntityQuerySortableByProperty<Entity>\nInitializers\ninit()\nSee Also\nProperty-matched queries\nprotocol EntityPropertyQuery\nAn interface for locating entities by matching values against one or more of their properties.\nstruct EntityQueryProperties\nA type that provides the properties to include in a property-matched query.\nclass EntityQueryProperty\nAn object that provides the supported comparators for a queryable property.\nProperty comparators\nSpecify the type of comparison to perform during a property-matched query.\nstruct EntityQuerySortableByProperty\nDetails about a specific property you use to sort the query results.\nstruct EntityQuerySort\nThe properties to use to sort the results when the query runs."
  },
  {
    "title": "AppShortcut | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcut",
    "html": "Overview\n\nRelated sessions from WWDC22\n\nSession 10170: Implement App Shortcuts with App Intents, and session 10169: Design App Shortcuts.\n\nNote\n\nApple may extract anonymized App Shortcuts data such as localized phrases, display representation values, and the title and description of related intents. Machine learning models use this data when training to help improve the App Shortcuts experience.\n\nTopics\nCreating an app shortcut\ninit<Intent>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource, systemImageName: String)\ninit<Intent, Value, Parameter, ParameterKeyPath>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource, systemImageName: String, parameterPresentation: AppShortcutParameterPresentation<Intent, Value, Parameter, ParameterKeyPath>)\nInitializes an App Shortcut with phrases that run the app intent, a title, an image, and specified parameters.\ninit<Intent>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource?, systemImageName: String?)\nInitializes an App Shortcut with an optional title and an optional image that appear in the Shortcuts app.\nSee Also\nApp Shortcut definition\nstruct AppShortcutPhrase\nA spoken phrase that causes the system to run the corresponding App Shortcut.\nstruct NegativeAppShortcutPhrase\nThis is the representation of a negative phrase. Each negative phrase will be used to populate an app-level negative training set. This set will contain phrases that will completely bypass your app.\nstruct NegativeAppShortcutPhrases\nThis is a set of negative phrases, which will all be added to the app-level negative training set. All the training data specified here, will be used to completely bypass your app\nenum AppShortcutsBuilder\nA result builder that allows you to declaratively describe the App Shortcuts that your app provides.\nenum ShortcutTileColor\nColors of a shortcut tile in the Shortcuts app."
  },
  {
    "title": "IntentParameterContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametercontext",
    "html": "Topics\nInstance Properties\nvar controlStyle: IntentParameter<Value>.IntControlStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nvar controlStyle: IntentParameter<Value>.DoubleControlStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nvar currencyCodes: [String]?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nvar dateKind: IntentParameter<Value>.DateKind?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nvar dateKind: IntentParameter<Value>.DateKind?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nvar defaultUnit: IntentParameter<Measurement<UnitFuelEfficiency>>.FuelEfficiency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFuelEfficiency>.\nvar defaultUnit: IntentParameter<Measurement<UnitLength>>.Length?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitLength>.\nvar defaultUnit: IntentParameter<Measurement<UnitAcceleration>>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar defaultUnit: IntentParameter<Measurement<UnitElectricResistance>>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar defaultUnit: IntentParameter<Measurement<UnitDispersion>>.Dispersion?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDispersion>.\nvar defaultUnit: IntentParameter<Measurement<UnitVolume>>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar defaultUnit: IntentParameter<Measurement<UnitMass>>.Mass?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitMass>.\nvar defaultUnit: IntentParameter<Measurement<UnitConcentrationMass>>.ConcentrationMass?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitConcentrationMass>.\nvar defaultUnit: IntentParameter<Measurement<UnitElectricPotentialDifference>>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar defaultUnit: IntentParameter<Measurement<UnitEnergy>>.Energy?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitEnergy>.\nvar defaultUnit: IntentParameter<Measurement<UnitFrequency>>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar defaultUnit: IntentParameter<Measurement<UnitElectricCharge>>.ElectricCharge?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCharge>.\nvar defaultUnit: IntentParameter<Measurement<UnitTemperature>>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar defaultUnit: IntentParameter<Measurement<UnitAngle>>.Angle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAngle>.\nvar defaultUnit: IntentParameter<Measurement<UnitArea>>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar defaultUnit: IntentParameter<Measurement<UnitDuration>>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar defaultUnit: IntentParameter<Measurement<UnitIlluminance>>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar defaultUnit: IntentParameter<Measurement<UnitInformationStorage>>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar defaultUnit: IntentParameter<Measurement<UnitPower>>.Power?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPower>.\nvar defaultUnit: IntentParameter<Measurement<UnitPressure>>.Pressure?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar defaultUnit: IntentParameter<Measurement<UnitSpeed>>.Speed?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar defaultUnit: IntentParameter<Measurement<UnitElectricCurrent>>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar displayName: Bool.IntentDisplayName?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Bool.\nvar displayStyle: IntentParameter<Value>.PlacemarkDisplayStyle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nvar inclusiveRange: IntentParameter<Value>.InclusiveRange<Decimal>?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nvar inclusiveRange: IntentParameter<Value>.InclusiveRange<Double>?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nvar inclusiveRange: IntentParameter<Value>.InclusiveRange<Int>?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nvar isOptional: Bool\nvar parameterMode: IntentPerson.ParameterMode?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitMass>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPower>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFuelEfficiency>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitConcentrationMass>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDispersion>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCharge>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitLength>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAngle>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitEnergy>.\nvar supportsNegativeNumbers: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar title: LocalizedStringResource\nvar unit: IntentParameter<Measurement<UnitPower>>.Power?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPower>.\nvar unit: IntentParameter<Measurement<UnitElectricPotentialDifference>>.ElectricPotentialDifference?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar unit: IntentParameter<Measurement<UnitMass>>.Mass?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitMass>.\nvar unit: IntentParameter<Measurement<UnitElectricCurrent>>.ElectricCurrent?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar unit: IntentParameter<Measurement<UnitSpeed>>.Speed?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar unit: IntentParameter<Measurement<UnitElectricResistance>>.ElectricResistance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nvar unit: IntentParameter<Measurement<UnitTemperature>>.Temperature?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar unit: IntentParameter<Measurement<UnitPressure>>.Pressure?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar unit: IntentParameter<Measurement<UnitDispersion>>.Dispersion?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDispersion>.\nvar unit: IntentParameter<Measurement<UnitArea>>.Area?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar unit: IntentParameter<Measurement<UnitLength>>.Length?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitLength>.\nvar unit: IntentParameter<Measurement<UnitElectricCharge>>.ElectricCharge?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCharge>.\nvar unit: IntentParameter<Measurement<UnitVolume>>.Volume?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar unit: IntentParameter<Measurement<UnitInformationStorage>>.InformationStorage?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar unit: IntentParameter<Measurement<UnitFrequency>>.Frequency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar unit: IntentParameter<Measurement<UnitAngle>>.Angle?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAngle>.\nvar unit: IntentParameter<Measurement<UnitIlluminance>>.Illuminance?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar unit: IntentParameter<Measurement<UnitEnergy>>.Energy?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitEnergy>.\nvar unit: IntentParameter<Measurement<UnitFuelEfficiency>>.FuelEfficiency?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFuelEfficiency>.\nvar unit: IntentParameter<Measurement<UnitConcentrationMass>>.ConcentrationMass?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitConcentrationMass>.\nvar unit: IntentParameter<Measurement<UnitAcceleration>>.Acceleration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar unit: IntentParameter<Measurement<UnitDuration>>.Duration?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitEnergy>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCharge>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitLength>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDispersion>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitMass>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFuelEfficiency>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPower>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAngle>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitConcentrationMass>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nvar unitAdjustForLocale: Bool?\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nInstance Methods\nfunc needsDisambiguationError(among: [Value.ValueType], dialog: IntentDialog?) -> AppIntentError\nReturns a restartPerform error with context for the user to disambiguate amongst an array of values from for this parameter and re-perform the intent with the new value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc needsValueError(IntentDialog?) -> AppIntentError\nReturns a restartPerform error with context to request a value from the user for this parameter and re-perform the intent with the new value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation(for: Value.ValueType, dialog: IntentDialog?) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: () -> ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestDisambiguation(among: [Value.ValueType], dialog: IntentDialog?) async throws -> Value.ValueType\nRequest that the user disambiguate amongst an array of values for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestValue(IntentDialog?) async throws -> Value.ValueType\nRequest a value from the user for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable.\nRelationships\nConforms To\nAnyIntentValue\nSendable\nSee Also\nIntent parameters\nclass IntentParameter\nA property wrapper that indicates the associated property is an input argument of the app intent.\nclass IntentParameterDependency\nA property wrapper that represents an AppIntent dependency that can be used in an object that conforms to DynamicOptionsProvider.\nenum InputConnectionBehavior\nInput behaviors for connecting a parameter to the output of a previous app intent."
  },
  {
    "title": "Property comparators | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/property-comparators",
    "html": "Topics\nEquatable comparisons\nclass EqualToComparator\nAn object that determines whether the value of an equatable property is equal to the specified value.\nclass NotEqualToComparator\nAn object that determines whether the value of an equatable property is not equal to the specified value.\nclass GreaterThanComparator\nAn object that determines whether the value of a comparable property is greater than the specified value.\nclass GreaterThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is greater than or equal to the specified value.\nclass LessThanComparator\nAn object that determines whether the value of a comparable property is less than the specified value.\nclass LessThanOrEqualToComparator\nAn object that determines whether the value of a comparable property is less than or equal to the specified value.\nclass IsBetweenComparator\nThis comparator is only supported for Date types in Shortcuts.\nString comparisons\nclass HasPrefixComparator\nAn object that determines whether the value of a string property has the specified prefix.\nclass HasSuffixComparator\nAn object that determines whether the value of a string property has the specified suffix.\nenum StringComparisonOperator\nContainment comparisons\nclass ContainsComparator\nAn object that determines whether the value of sequence property contains the specified value.\nSee Also\nProperty-matched queries\nprotocol EntityPropertyQuery\nAn interface for locating entities by matching values against one or more of their properties.\nstruct EntityQueryProperties\nA type that provides the properties to include in a property-matched query.\nclass EntityQueryProperty\nAn object that provides the supported comparators for a queryable property.\nstruct EntityQuerySortingOptions\nThe potential properties you can use to sort the results of a query.\nstruct EntityQuerySortableByProperty\nDetails about a specific property you use to sort the query results.\nstruct EntityQuerySort\nThe properties to use to sort the results when the query runs."
  },
  {
    "title": "EntityQuerySortableByProperty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquerysortablebyproperty",
    "html": "Topics\nCreating the sort option\ninit<Property>(KeyPath<Entity, Property>)\nSee Also\nProperty-matched queries\nprotocol EntityPropertyQuery\nAn interface for locating entities by matching values against one or more of their properties.\nstruct EntityQueryProperties\nA type that provides the properties to include in a property-matched query.\nclass EntityQueryProperty\nAn object that provides the supported comparators for a queryable property.\nProperty comparators\nSpecify the type of comparison to perform during a property-matched query.\nstruct EntityQuerySortingOptions\nThe potential properties you can use to sort the results of a query.\nstruct EntityQuerySort\nThe properties to use to sort the results when the query runs."
  },
  {
    "title": "EntityQueryProperty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityqueryproperty",
    "html": "Topics\nCreating queryable properties\ntypealias QueryComparators\nA type alias for the type that represents a collection of query comparators.\nenum EntityQueryComparatorsBuilder\nA result builder that allows you to declaratively describe the comparators for a queryable property.\nInitializers\nconvenience init(KeyPath<Subject, Property>, comparators: () -> EntityQueryProperty<Entity, Subject, Property, PropertyType, ComparatorMappingType>.QueryComparators)\nInitializes a EntityQueryProperty that applies to entity property at the provided keyPath.\ninit(KeyPath<Subject, Property>, entityProvider: (Entity) -> Subject, comparators: () -> EntityQueryProperty<Entity, Subject, Property, PropertyType, ComparatorMappingType>.QueryComparators)\nInitializes a EntityQueryProperty that applies to entity property at the provided keyPath.\nRelationships\nInherits From\nEntityQueryPropertyDeclaration\nSee Also\nProperty-matched queries\nprotocol EntityPropertyQuery\nAn interface for locating entities by matching values against one or more of their properties.\nstruct EntityQueryProperties\nA type that provides the properties to include in a property-matched query.\nProperty comparators\nSpecify the type of comparison to perform during a property-matched query.\nstruct EntityQuerySortingOptions\nThe potential properties you can use to sort the results of a query.\nstruct EntityQuerySortableByProperty\nDetails about a specific property you use to sort the query results.\nstruct EntityQuerySort\nThe properties to use to sort the results when the query runs."
  },
  {
    "title": "IntentParameterDependency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameterdependency",
    "html": "Example\nstruct SoupQuery: EntityStringQuery {\n    @IntentParameterDependency<OrderSoup>(\n        \\.$quantity\n    )\n    var orderSoup\n\n\n    func entities(matching string: String) async throws -> [Soup] {\n        guard let orderSoup else {\n            return []\n        }\n        return Soup.allSoups.filter {\n            $0.name.contains(string) &&\n            $0.availableQuantity >= orderSoup.quantity\n        }\n    }\n}\n\nTopics\nInitializers\nconvenience init<V0, P0>(KeyPath<Intent, P0>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1>(KeyPath<Intent, P0>, KeyPath<Intent, P1>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>, KeyPath<Intent, P7>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>, KeyPath<Intent, P7>, KeyPath<Intent, P8>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>, KeyPath<Intent, P7>, KeyPath<Intent, P8>, KeyPath<Intent, P9>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>, KeyPath<Intent, P7>, KeyPath<Intent, P8>, KeyPath<Intent, P9>, KeyPath<Intent, P10>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10, V11, P11>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>, KeyPath<Intent, P7>, KeyPath<Intent, P8>, KeyPath<Intent, P9>, KeyPath<Intent, P10>, KeyPath<Intent, P11>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10, V11, P11, V12, P12>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>, KeyPath<Intent, P7>, KeyPath<Intent, P8>, KeyPath<Intent, P9>, KeyPath<Intent, P10>, KeyPath<Intent, P11>, KeyPath<Intent, P12>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10, V11, P11, V12, P12, V13, P13>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>, KeyPath<Intent, P7>, KeyPath<Intent, P8>, KeyPath<Intent, P9>, KeyPath<Intent, P10>, KeyPath<Intent, P11>, KeyPath<Intent, P12>, KeyPath<Intent, P13>)\nAvailable when Intent conforms to AppIntent.\nconvenience init<V0, P0, V1, P1, V2, P2, V3, P3, V4, P4, V5, P5, V6, P6, V7, P7, V8, P8, V9, P9, V10, P10, V11, P11, V12, P12, V13, P13, V14, P14>(KeyPath<Intent, P0>, KeyPath<Intent, P1>, KeyPath<Intent, P2>, KeyPath<Intent, P3>, KeyPath<Intent, P4>, KeyPath<Intent, P5>, KeyPath<Intent, P6>, KeyPath<Intent, P7>, KeyPath<Intent, P8>, KeyPath<Intent, P9>, KeyPath<Intent, P10>, KeyPath<Intent, P11>, KeyPath<Intent, P12>, KeyPath<Intent, P13>, KeyPath<Intent, P14>)\nAvailable when Intent conforms to AppIntent.\nInstance Properties\nvar wrappedValue: IntentProjection<Intent>?\nDefault Implementations\nCustomDebugStringConvertible Implementations\nRelationships\nConforms To\nCustomDebugStringConvertible\nSendable\nSee Also\nIntent parameters\nclass IntentParameter\nA property wrapper that indicates the associated property is an input argument of the app intent.\nstruct IntentParameterContext\nA type that provides information about an associated parameter during value resolution.\nenum InputConnectionBehavior\nInput behaviors for connecting a parameter to the output of a previous app intent."
  },
  {
    "title": "ParameterSummaryDefaultCaseCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarydefaultcasecondition",
    "html": "Topics\nCreating the case condition\ninit(() -> Summary)\nSee Also\nShortcuts support\nprotocol ParameterSummary\nAn interface for defining the visual representation of an app intent’s parameters.\nstruct IntentParameterSummary\nA type that describes the user interface configuration of an app intent’s parameters.\nstruct ParameterSummaryString\nA human-readable string that interpolates parameter key paths to provide user-configurable placeholders in the Shortcuts app.\nstruct ParameterSummaryWhenCondition\nA type that represents a conditional statement in a parameter summary.\nstruct ParameterSummarySwitchCondition\nA type that represents a switch statement in a parameter summary.\nstruct ParameterSummaryCaseCondition\nA type that represents an individual case of a switch statement in a parameter summary."
  },
  {
    "title": "EntityPropertyQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitypropertyquery",
    "html": "Topics\nSpecifying the queryable properties\nstatic var properties: Self.QueryProperties\nThe set of query properties supported by this query.\n\nRequired\n\ntypealias QueryProperties\ntypealias Property\nassociatedtype ComparatorMappingType\nType produced by EntityQueryComparator mapping closures and supplied as input to results.\n\nRequired\n\nSorting the results\nstatic var sortingOptions: Self.SortingOptions\nThe set of sorting orders supported by this query.\n\nRequired\n\ntypealias SortingOptions\ntypealias SortableBy\nSearching for entities\nfunc entities(matching: [Self.ComparatorMappingType], mode: Self.ComparatorMode, sortedBy: [EntityQuerySort<Self.Entity>], limit: Int?) async throws -> Self.Result\nRetrieves instances matching the supplied comparators.\n\nRequired\n\ntypealias Sort\ntypealias ComparatorMode\nenum EntityQueryComparatorMode\nModes that determine how to apply a query’s comparators.\nType Properties\nstatic var findIntentDescription: IntentDescription?\nDefines how the generated ‘Find’ Shortcuts action of this query type is displayed to the user.\n\nRequired Default implementation provided.\n\nRelationships\nInherits From\nDynamicOptionsProvider\nEntityQuery\nPersistentlyIdentifiable\nSendable\nSee Also\nProperty-matched queries\nstruct EntityQueryProperties\nA type that provides the properties to include in a property-matched query.\nclass EntityQueryProperty\nAn object that provides the supported comparators for a queryable property.\nProperty comparators\nSpecify the type of comparison to perform during a property-matched query.\nstruct EntityQuerySortingOptions\nThe potential properties you can use to sort the results of a query.\nstruct EntityQuerySortableByProperty\nDetails about a specific property you use to sort the query results.\nstruct EntityQuerySort\nThe properties to use to sort the results when the query runs."
  },
  {
    "title": "EntityQueryProperties | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityqueryproperties",
    "html": "Topics\nCreating the query properties\nenum EntityQueryPropertiesBuilder\nA result builder that allows you to declaratively describe the properties to include in a property-matched query.\nGetting the query properties\nsubscript(Int) -> EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>\nInitializers\ninit(properties: () -> [EntityQueryPropertyDeclaration<Entity, ComparatorMappingType>])\nSee Also\nProperty-matched queries\nprotocol EntityPropertyQuery\nAn interface for locating entities by matching values against one or more of their properties.\nclass EntityQueryProperty\nAn object that provides the supported comparators for a queryable property.\nProperty comparators\nSpecify the type of comparison to perform during a property-matched query.\nstruct EntityQuerySortingOptions\nThe potential properties you can use to sort the results of a query.\nstruct EntityQuerySortableByProperty\nDetails about a specific property you use to sort the query results.\nstruct EntityQuerySort\nThe properties to use to sort the results when the query runs."
  },
  {
    "title": "EnumerableEntityQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/enumerableentityquery",
    "html": "Overview\n\nEnumerableEntityQuery allows the Shortcuts app to generate a Find action and do filtering automatically. It should only be used in cases where the count of entities is relatively small, and their size in memory is limited. For situations where there may be many thousands of entities, or where individual entities may become large in memory usage, use EntityPropertyQuery to allow better performance by fetching only the entities matching the criteria from your model.\n\nTopics\nInstance Methods\nfunc allEntities() async throws -> Self.Result\nReturns all available results.\n\nRequired\n\nType Properties\nstatic var findIntentDescription: IntentDescription?\nDefines how the generated ‘Find’ Shortcuts action of this query type is displayed to the user.\n\nRequired Default implementation provided.\n\nRelationships\nInherits From\nDynamicOptionsProvider\nEntityQuery\nPersistentlyIdentifiable\nSendable\nSee Also\nIdentifier-based queries\nprotocol EntityQuery\nAn interface for locating entities using their identifiers."
  },
  {
    "title": "ParameterSummarySwitchCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummaryswitchcondition",
    "html": "Topics\nCreating a switch condition\nenum ParameterSummaryCaseBuilder\nA result builder that allows you to declaratively describe the cases of a switch statement in a parameter summary.\nInitializers\ninit(ParameterSummarySwitchCondition<Intent, Value, CaseCondition>.WidgetFamily, () -> CaseCondition)\nInitializes a parameter summary Switch statement over widget family.\ninit(KeyPath<Intent, IntentParameter<Value>>, () -> CaseCondition)\nEnumerations\nenum WidgetFamily\nAn enum that represents a parameter summary Switch statement over widget family.\nRelationships\nConforms To\nParameterSummary\nSee Also\nShortcuts support\nprotocol ParameterSummary\nAn interface for defining the visual representation of an app intent’s parameters.\nstruct IntentParameterSummary\nA type that describes the user interface configuration of an app intent’s parameters.\nstruct ParameterSummaryString\nA human-readable string that interpolates parameter key paths to provide user-configurable placeholders in the Shortcuts app.\nstruct ParameterSummaryWhenCondition\nA type that represents a conditional statement in a parameter summary.\nstruct ParameterSummaryCaseCondition\nA type that represents an individual case of a switch statement in a parameter summary.\nstruct ParameterSummaryDefaultCaseCondition\nA type that represents the default case of a switch statement in a parameter summary."
  },
  {
    "title": "ParameterSummaryString | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarystring",
    "html": "Topics\nCreating the summary string\ninit(String)\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: ParameterSummaryString<Intent>.StringInterpolation)\nCreates an instance from a string interpolation.\nstruct StringInterpolation\nThe type each segment of a string literal containing interpolations should be appended to.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringInterpolation\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nShortcuts support\nprotocol ParameterSummary\nAn interface for defining the visual representation of an app intent’s parameters.\nstruct IntentParameterSummary\nA type that describes the user interface configuration of an app intent’s parameters.\nstruct ParameterSummaryWhenCondition\nA type that represents a conditional statement in a parameter summary.\nstruct ParameterSummarySwitchCondition\nA type that represents a switch statement in a parameter summary.\nstruct ParameterSummaryCaseCondition\nA type that represents an individual case of a switch statement in a parameter summary.\nstruct ParameterSummaryDefaultCaseCondition\nA type that represents the default case of a switch statement in a parameter summary."
  },
  {
    "title": "ParameterSummary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummary",
    "html": "Topics\nAssociated Types\nassociatedtype Intent : AppIntent\n\nRequired\n\nRelationships\nConforming Types\nIntentParameterSummary\nParameterSummarySwitchCondition\nParameterSummaryWhenCondition\nSee Also\nShortcuts support\nstruct IntentParameterSummary\nA type that describes the user interface configuration of an app intent’s parameters.\nstruct ParameterSummaryString\nA human-readable string that interpolates parameter key paths to provide user-configurable placeholders in the Shortcuts app.\nstruct ParameterSummaryWhenCondition\nA type that represents a conditional statement in a parameter summary.\nstruct ParameterSummarySwitchCondition\nA type that represents a switch statement in a parameter summary.\nstruct ParameterSummaryCaseCondition\nA type that represents an individual case of a switch statement in a parameter summary.\nstruct ParameterSummaryDefaultCaseCondition\nA type that represents the default case of a switch statement in a parameter summary."
  },
  {
    "title": "RangeComparableProperty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/rangecomparableproperty",
    "html": "Relationships\nInherits From\nComparable\nEquatable\nSee Also\nRange validation\nprotocol RangeCheckingResolver\nAn interface for validating a value is within a parameter’s defined inclusive range."
  },
  {
    "title": "Resolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: Self.Input, context: IntentParameterContext<Self.Output>) async throws -> Self.Output?\nConverts the specified value into the expected data type.\n\nRequired\n\nassociatedtype Input : _IntentValue\n\nRequired\n\nassociatedtype Output : _IntentValue\n\nRequired\n\nManaging the resolution process\nprotocol ResolverSpecification\nAn internal type that a resolver uses to convert data values.\nstruct EmptyResolverSpecification\nAn internal type that a resolver uses to convert data values.\nenum ResolverSpecificationBuilder\nA result builder that declaratively specifies a set of resolvers.\nType Aliases\ntypealias Context\nRelationships\nInherits From\nEquatable\nHashable\nSendable\nInherited By\nRangeCheckingResolver\nConforming Types\nAttributedStringFromStringResolver\nBoolFromStringResolver\nDoubleFromIntResolver\nDoubleFromStringResolver\nDoubleResolver\nIntFromDoubleResolver\nIntFromStringResolver\nIntResolver\nStringFromDoubleResolver\nStringFromIntResolver\nStringSearchCriteriaFromStringResolverSpecificification\nURLFromStringResolver"
  },
  {
    "title": "BoolFromStringResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/boolfromstringresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: String, context: IntentParameterContext<Bool>) async throws -> Bool?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (BoolFromStringResolver, BoolFromStringResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nResolver\nSendable"
  },
  {
    "title": "RangeCheckingResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/rangecheckingresolver",
    "html": "Topics\nChecking the range of a parameter\nfunc checkParameterRangeContains<Value>(value: Value, context: IntentParameterContext<Self.Output>) throws\nRelationships\nInherits From\nEquatable\nHashable\nResolver\nSendable\nConforming Types\nDoubleFromIntResolver\nDoubleFromStringResolver\nDoubleResolver\nIntFromDoubleResolver\nIntFromStringResolver\nIntResolver\nSee Also\nRange validation\nprotocol RangeComparableProperty"
  },
  {
    "title": "entities(matching:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/EntityStringQuery/entities(matching:)",
    "html": "Required\n\nParameters\nstring\n\n“Name” used to refer to an entity instance (or a set thereof)."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteria/hash(into:)",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type’s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don’t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
  },
  {
    "title": "Equatable Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteria/equatable-implementations",
    "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
  },
  {
    "title": "searchScopes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/showinappsearchresultsintent/searchscopes-2xpgh",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nShowInAppSearchResultsIntent Implementations\nstatic var searchScopes: Void\nThe list of scopes that the app supports through this intent.\nAvailable when Criteria.SearchScopes is ()."
  },
  {
    "title": "AppIntent Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/showinappsearchresultsintent/appintent-implementations",
    "html": "Topics\nType Properties\nstatic var openAppWhenRun: Bool\nA boolean property that tells the system to consider the app intent even if its app is not in the foreground."
  },
  {
    "title": "SiriTipView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/SiriTipView",
    "html": "Overview\n\nUse a SiriTipView to display the spoken phrase for the intent you specify. Include an instance of your intent when you create the view, and bind the view to a Boolean to handle the view’s presentation. The following example shows how to configure a button for a reorder intent and bind it to an isVisible variable.\n\nSiriTipView(intent: ReorderIntent(), isVisible: $isVisible)\n    .siriTipViewStyle(.black)\n\nTopics\nCreating the view\ninit<Intent>(intent: Intent, isVisible: Binding<Bool>?)\nCreates a SiriTipView for the associated action that displays when the binding to a Boolean value is true .\nImplementing the view\nvar body: some View\nThe content and behavior of the view.\ntypealias Body\nThe type of view representing the body of this view.\nDefault Implementations\nView Implementations\nRelationships\nConforms To\nView\nSee Also\nTip views\nclass SiriTipUIView\nA view that displays the phrase someone uses to invoke an App Shortcut.\nstruct SiriTipViewStyle\nThe styles to apply to the tip views you use to display spoken phrases."
  },
  {
    "title": "IntentParameter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/IntentParameter",
    "html": "Topics\nCreating an intent parameter for primitive types\nIntegers\nConfigure the details for parameter variables that contain integers.\nDoubles\nConfigure the details for parameter variables that contain floating-point values.\nBooleans\nConfigure the details for parameter variables that contain Boolean values.\nStrings\nConfigure the details for parameter variables that contain strings or attributed strings.\nURLs\nConfigure the details for parameter variables that contain URLs.\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nDate components\nConfigure the details for parameter variables that contain date components.\nFiles\nConfigure the details for parameter variables that contain files.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values.\nCreating an intent parameter for custom types\nApp entities\nConfigure the details for parameter variables that contain custom app entities.\nApp enums\nConfigure the details for parameter variables that contain custom app enums.\nAccessing the configuration\nlet title: LocalizedStringResource\nvar isOptional: Bool\nAccessing the underlying value\nlet defaultValue: Value.UnwrappedType?\nvar projectedValue: IntentParameter<Value>\nvar wrappedValue: Value\nRequesting a value\nfunc requestValue(IntentDialog?) async throws -> Value.ValueType\nRequest a value from the user for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc needsValueError(IntentDialog?) -> AppIntentError\nReturns a restartPerform error with context to request a value from the user for this parameter and re-perform the intent with the new value.\nAvailable when Value conforms to _IntentValue and Sendable.\nRequesting confirmation\nfunc requestConfirmation(for: Value.ValueType, dialog: IntentDialog?) async throws -> Bool\nRequest that the user confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: () -> ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nRequesting disambiguation\nfunc requestDisambiguation(among: [Value.ValueType], dialog: IntentDialog?) async throws -> Value.ValueType\nRequest that the user disambiguate amongst an array of values for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc needsDisambiguationError(among: [Value.ValueType], dialog: IntentDialog?) -> AppIntentError\nReturns a restartPerform error with context for the user to disambiguate amongst an array of values from for this parameter and re-perform the intent with the new value.\nAvailable when Value conforms to _IntentValue and Sendable.\nDeprecated\nDeprecated symbols\nReview unsupported symbols and their replacements.\nInitializers\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is StringSearchCriteria.\nRelationships\nConforms To\nAnyIntentValue\nConforms when Value conforms to _IntentValue and Sendable.\nSendable\nSee Also\nIntent parameters\nclass IntentParameterDependency\nA property wrapper that represents an AppIntent dependency that can be used in an object that conforms to DynamicOptionsProvider.\nstruct IntentParameterContext\nA type that provides information about an associated parameter during value resolution.\nenum InputConnectionBehavior\nInput behaviors for connecting a parameter to the output of a previous app intent."
  },
  {
    "title": "init(intent:phrases:shortTitle:systemImageName:parameterPresentation:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcut/init(intent:phrases:shorttitle:systemimagename:parameterpresentation:)",
    "html": "Discussion\n\nUse this function to create an App Shortcut for your app intent that people discover in the Shortcuts app and that they can run using the Action button on supported iPhone models.\n\nSee Also\nCreating an app shortcut\ninit<Intent>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource, systemImageName: String)\ninit<Intent>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource?, systemImageName: String?)\nInitializes an App Shortcut with an optional title and an optional image that appear in the Shortcuts app."
  },
  {
    "title": "SetFocusFilterIntentError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintenterror",
    "html": "Topics\nGetting the error codes\ncase notFound\nOperators\nstatic func == (SetFocusFilterIntentError, SetFocusFilterIntentError) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEnumeration Cases\ncase missingParameterValue\nAn error indicating that the intent has an invalid parameter value. For example an intent has a non-optional parameter but it doesn’t have a default value.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nError Implementations\nLocalizedError Implementations\nRelationships\nConforms To\nEquatable\nError\nHashable\nLocalizedError\nSendable"
  },
  {
    "title": "Defining your app’s Focus filter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/focus/defining_your_app_s_focus_filter",
    "html": "Overview\n\nUse App Intents to define your app’s Focus filters, act on changes from the system, and filter notifications based on its parameters.\n\nNote\n\nThis sample code project is associated with WWDC22 session 10121: Meet Focus filters.\n\nConfigure the sample code project\n\nConfigure the iOS and App Intents extension targets to include your development team and a bundle identifier. The bundle identifier needs to support the App Groups capability.\n\nIf you’re using a suite name other than group.exampleChatApp, modify it in the following files: Repository.swift, ExampleAppIntentsExtension.entitlements, and ExampleChatApp.entitlements.\n\nCreate a Focus filter\n\nAfter launching the sample app, create a Focus filter for it by choosing Settings > Focus > Do Not Disturb (or another Focus) > Add Filter > Example Chat App. Modify the filter parameters, and then tap the Add button. Turn on the modified Focus to receive those parameters in the sample app’s App Intents extension. The system calls the perform function of the object conforming to SetFocusFilterIntent, and all @Parameters are available in the Focus filter. When you turn off the modified Focus, the system provides the sample app’s SetFocusFilterIntent conforming object with the following default parameters:\n\nalwaysUseDarkMode: false\n\nstatus: nil\n\naccount: nil\n\nDefine Focus filter parameters\n\nTo define Focus filter parameters for an object that conforms to the SetFocusFilterIntent parameter, the sample project annotates the relevant variables with the @Parameter property wrapper. It provides a default value for nonoptional parameters unless the filter requires the system to prompt for this value each time it enables it.\n\nstruct ExampleFocusFilter: SetFocusFilterIntent {\n    /// Providing a default value ensures setting this required Boolean value.\n    @Parameter(title: \"Use Dark Mode\", default: false)\n    var alwaysUseDarkMode: Bool\n\n\n    @Parameter(title: \"Status Message\")\n    var status: String?\n\n\n    /// A representation of a chat account this app uses for notification filtering and suppression.\n    /// The user receives suggestions from the suggestedEntities() function that AccountEntityQuery declares.\n    @Parameter(title: \"Selected Account\")\n    var account: AccountEntity?\n}\n\n\nUse custom parameters by adding app entity conformance\n\nTo use a custom object as a SetFocusFilterIntent parameter, the sample project adds AppEntity conformance to the object. In the example below, AppEntity conformance allows the system to use the AccountEntity object as a SetFocusFilterIntent @Parameter:\n\nstruct AccountEntity: AppEntity {\n    static var typeDisplayRepresentation: TypeDisplayRepresentation {\n        TypeDisplayRepresentation(name: \"A chat account\")\n    }\n\n\n    static var defaultQuery = AccountEntityQuery()\n\n\n    let id: String\n    let displayName: String\n    let displaySubtitle: String\n    let image: DisplayRepresentation.Image\n\n\n    var displayRepresentation: DisplayRepresentation {\n        DisplayRepresentation(title: \"\\(displayName) account\",\n                              subtitle: \"\\(displaySubtitle)\",\n                              image: image)\n    }\n}\n\n\nSuggest app entities using entity queries\n\nThe sample project adds a default entity query to suggest values when configuring the Focus filter in Settings. In the example below, the AccountEntityQuery that AccountEntity uses suggests chat accounts that are currently logged in:\n\nstruct AccountEntityQuery: EntityQuery {\n    func entities(for identifiers: [AccountEntity.ID]) async throws -> [AccountEntity] {\n        Repository.shared.accountsLoggedIn.filter {\n            identifiers.contains($0.id)\n        }\n    }\n\n\n    func suggestedEntities() async throws -> [AccountEntity] {\n        Repository.shared.accountsLoggedIn\n    }\n}\n\n\nFilter notifications using the app context\n\nTo filter notifications with Focus filters, the sample project sets the filterCriteria parameter for the notifications, and then lets the system know whether to suppress them by providing a predicate that evaluates against filterCriteria. In the example below, the FocusFilterAppContext appContext variable returns a predicate that states: If there’s an account @Parameter for this filter, suppress the notification unless the filterCriteria matches the account.id value:\n\nstruct ExampleFocusFilter: SetFocusFilterIntent {\n    var appContext: FocusFilterAppContext {\n        logger.debug(\"App Context Called\")\n        let predicate: NSPredicate\n        if let account = account {\n            predicate = NSPredicate(format: \"SELF IN %@\", [account.id])\n        } else {\n            predicate = NSPredicate(value: true)\n        }\n        return FocusFilterAppContext(notificationFilterPredicate: predicate)\n    }\n}\n\n\nUse an App Intents extension for background execution\n\nThe sample project adds an App Intents extension to handle Focus filters while the app is in the background. It sets the target membership of the object conforming to SetFocusFilterIntent to the App Intents extension only, and uses App Groups, or custom services, to share filter data between the extension and the app.\n\nSee Also\nFocus filters\nprotocol SetFocusFilterIntent\nAn interface for providing an app intent that you use to adapt your app’s behavior when Focus changes.\nstruct FocusFilterAppContext\nA type that contains app-specific contextual information for a particular Focus, such as the notification filter criteria to apply.\nstruct FocusFilterSuggestionContext\nA type you use to suggest app configurations for a given Focus."
  },
  {
    "title": "FocusFilterSuggestionContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/focusfiltersuggestioncontext",
    "html": "See Also\nFocus filters\nprotocol SetFocusFilterIntent\nAn interface for providing an app intent that you use to adapt your app’s behavior when Focus changes.\nstruct FocusFilterAppContext\nA type that contains app-specific contextual information for a particular Focus, such as the notification filter criteria to apply."
  },
  {
    "title": "IntFromDoubleResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intfromdoubleresolver",
    "html": "Topics\nCreating the resolver\ninit(roundingRule: FloatingPointRoundingRule)\nResolving the type\nfunc resolve(from: Double, context: IntentParameterContext<Int>) async throws -> Int?\nConverts the specified value into the expected data type.\nGetting the rounding rule\nvar roundingRule: FloatingPointRoundingRule\nOperators\nstatic func == (IntFromDoubleResolver, IntFromDoubleResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nRangeCheckingResolver Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRangeCheckingResolver\nResolver\nSendable\nSee Also\nInteger resolution\nstruct IntFromStringResolver\nA resolver that converts a string into an integer in the specified base and validates the result is within the parameter’s inclusive range.\nstruct IntResolver\nA resolver that validates an integer is within the parameter’s inclusive range."
  },
  {
    "title": "IntResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: Int, context: IntentParameterContext<Int>) async throws -> Int?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (IntResolver, IntResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nRangeCheckingResolver Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRangeCheckingResolver\nResolver\nSendable\nSee Also\nInteger resolution\nstruct IntFromDoubleResolver\nA resolver that converts a double into an integer using the specified rounding rule and validates the result is within the parameter’s inclusive range.\nstruct IntFromStringResolver\nA resolver that converts a string into an integer in the specified base and validates the result is within the parameter’s inclusive range."
  },
  {
    "title": "PersistentlyIdentifiable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/persistentlyidentifiable",
    "html": "Topics\nType Properties\nstatic var persistentIdentifier: String\nA string that uniquely identifies this type.\n\nRequired Default implementations provided.\n\nRelationships\nInherited By\nAppEntity\nAppEnum\nAppIntent\nAppValue\nAudioPlaybackIntent\nAudioStartingIntent\nCustomIntentMigratedAppIntent\nDeleteIntent\nDeprecatedAppIntent\nEntityPropertyQuery\nEntityQuery\nEntityStringQuery\nEnumerableEntityQuery\nForegroundContinuableIntent\nLiveActivityIntent\nLiveActivityStartingIntent\nOpenIntent\nPauseWorkoutIntent\nPlayVideoIntent\nPredictableIntent\nProgressReportingIntent\nResumeWorkoutIntent\nSetFocusFilterIntent\nShowInAppSearchResultsIntent\nStartDiveIntent\nStartWorkoutIntent\nSystemIntent\nTransientAppEntity\nWidgetConfigurationIntent\nConforming Types\nStringSearchScope\nVideoCategory\nSee Also\nEntity identity\nstruct EntityIdentifier\nA type that uniquely identifies a specific instance of an entity.\nprotocol EntityIdentifierConvertible\nAn interface for converting between an entity’s identifier and its string representation."
  },
  {
    "title": "DoubleResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doubleresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: Double, context: IntentParameterContext<Double>) async throws -> Double?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (DoubleResolver, DoubleResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nRangeCheckingResolver Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRangeCheckingResolver\nResolver\nSendable\nSee Also\nFloating-point resolution\nstruct DoubleFromIntResolver\nA resolver that converts an integer into a double and validates the result is within the parameter’s inclusive range.\nstruct DoubleFromStringResolver\nA resolver that converts a string into a double and validates the result is within the parameter’s inclusive range."
  },
  {
    "title": "AppDependencyManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appdependencymanager",
    "html": "Topics\nInitializers\ninit()\nCan be used to initialize a standalone AppDependencyManager for dependency injection during testing.\nInstance Methods\nfunc add<Dependency>(key: AnyHashable?, dependency: () -> () throws -> Dependency)\nRegister a dependency that is available to all AppIntent and EntityQuery types via the @Dependency property wrapper.\nfunc add<Dependency>(key: AnyHashable?, dependency: () async throws -> Dependency)\nRegister a dependency that is available to all AppIntent and EntityQuery types via the @Dependency property wrapper.\nfunc add<Dependency>(key: AnyHashable?, dependency: () -> Dependency)\nRegister a dependency that is available to all AppIntent and EntityQuery types via the @Dependency property wrapper.\nType Properties\nstatic var shared: AppDependencyManager\nEnumerations\nenum Error\nSee Also\nDependency management\nclass AppDependency\nA property wrapper that resolves a registered dependency at runtime."
  },
  {
    "title": "SystemIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/systemintent",
    "html": "Relationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nInherited By\nAudioPlaybackIntent\nAudioStartingIntent\nDeleteIntent\nLiveActivityIntent\nLiveActivityStartingIntent\nOpenIntent\nPauseWorkoutIntent\nPlayVideoIntent\nResumeWorkoutIntent\nShowInAppSearchResultsIntent\nStartDiveIntent\nStartWorkoutIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "AppIntent.When | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/when",
    "html": "See Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch"
  },
  {
    "title": "parameterSummary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/parametersummary-2pkyz",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nAppIntent Implementations\nstatic var parameterSummary: some ParameterSummary\nSee Also\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch\ntypealias When"
  },
  {
    "title": "IntentFile | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentfile",
    "html": "Topics\nCreating a file\ninit(data: Data, filename: String, type: UTType?)\ninit(fileURL: URL, filename: String?, type: UTType?)\nGetting the file information\nvar filename: String\nThe human-readable name of the file, which will be displayed to the user.\nvar fileURL: URL?\nURL to the file on disk, if any. If the file isn’t stored on disk, access the contents using the data property.\nvar type: UTType?\nThe uniform type identifier of the file. (i.e. “public.json”, “public.png”, or any custom type) More information about uniform type identifiers can be found in <CoreServices/UTCoreTypes.h>\nvar data: Data\nThe contents of the file. If the file was created with a URL, accessing this property will memory map the file contents.\nvar removedOnCompletion: Bool\nIndicates whether the file should be automatically deleted from disk when the Shortcut is done running. false by default.\nDefault Implementations\nEquatable Implementations\nHashable Implementations\nInstanceDisplayRepresentable Implementations\nTypeDisplayRepresentable Implementations\n_IntentValue Implementations\nRelationships\nConforms To\nCustomLocalizedStringResourceConvertible\nDisplayRepresentable\nEquatable\nHashable\nInstanceDisplayRepresentable\nSendable\nTypeDisplayRepresentable"
  },
  {
    "title": "DynamicOptionsProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/dynamicoptionsprovider",
    "html": "Overview\n\nImplement this protocol in a type that provides a set of possible values for an intent parameter. When configuring the parameter, specify your custom type as the options provider for that parameter. The type of result you return determines how the system displays the information.\n\nReturn an array of DisplayRepresentable types to display a list of values.\n\nReturn an array of DynamicOptionsResult types to divide values into sections or configure other presentation options.\n\nThe following example shows the configuration of a custom parameter that contains the author name of a book. The options provider offers two possible suggestions for the author name. For brevity, it omits the rest of the implementation.\n\nstruct CreateBook: AppIntent {\n    @Parameter(title: \"Author Name\", \n               optionsProvider: AuthorNamesOptionsProvider())\n    var authorName: String\n    \n    // Other properties and the perform() implementation.\n\n\n    private struct AuthorNamesOptionsProvider: DynamicOptionsProvider {\n        func results() async throws -> [String] {\n            [\"Juan Chavez\", \"Anne Johnson\"]\n        }\n    }\n}\n\nTopics\nReturning the parameter options\nfunc results() async throws -> Self.Result\n\nRequired Default implementation provided.\n\nassociatedtype Result : ResultsCollection\n\nRequired\n\nAssociated Types\nassociatedtype DefaultValue : _IntentValue = Self.Result.Result\n\nRequired\n\nInstance Methods\nfunc defaultResult() async -> Self.DefaultValue?\nThe default value for parameters using this provider when no value is provided by the user.\n\nRequired Default implementation provided.\n\nType Aliases\ntypealias Item\ntypealias ItemCollection\ntypealias ItemSection\ntypealias ParameterDependency\nRelationships\nInherited By\nEntityPropertyQuery\nEntityQuery\nEntityStringQuery\nEnumerableEntityQuery\nSee Also\nParameter choices\nprotocol AppEnum\nAn interface to express that a custom type has a predefined, static set of valid values to display."
  },
  {
    "title": "IntentParameter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter",
    "html": "Topics\nCreating an intent parameter for primitive types\nIntegers\nConfigure the details for parameter variables that contain integers.\nDoubles\nConfigure the details for parameter variables that contain floating-point values.\nBooleans\nConfigure the details for parameter variables that contain Boolean values.\nStrings\nConfigure the details for parameter variables that contain strings or attributed strings.\nURLs\nConfigure the details for parameter variables that contain URLs.\nCreating an intent parameter for common framework types\nDates\nConfigure the details for parameter variables that contain date values.\nDate components\nConfigure the details for parameter variables that contain date components.\nFiles\nConfigure the details for parameter variables that contain files.\nCurrencies\nConfigure the details for parameter variables that contain currency values.\nPayments\nConfigure the details for parameter variables that contain payment-related values.\nPeople\nConfigure the details for parameter variables that contain references to people.\nPlacemarks\nConfigure the details for parameter variables that contain a geographic location.\nMeasurements\nConfigure the details for parameter variables that contain, among others, temperature, mass, speed, energy, duration, length, and volume values.\nCreating an intent parameter for custom types\nApp entities\nConfigure the details for parameter variables that contain custom app entities.\nApp enums\nConfigure the details for parameter variables that contain custom app enums.\nAccessing the configuration\nlet title: LocalizedStringResource\nvar isOptional: Bool\nAccessing the underlying value\nlet defaultValue: Value.UnwrappedType?\nvar projectedValue: IntentParameter<Value>\nvar wrappedValue: Value\nRequesting a value\nfunc requestValue(IntentDialog?) async throws -> Value.ValueType\nRequest a value from the user for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc needsValueError(IntentDialog?) -> AppIntentError\nReturns a restartPerform error with context to request a value from the user for this parameter and re-perform the intent with the new value.\nAvailable when Value conforms to _IntentValue and Sendable.\nRequesting confirmation\nfunc requestConfirmation(for: Value.ValueType, dialog: IntentDialog?) async throws -> Bool\nRequest that the user confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc requestConfirmation<ViewType>(for: Value.ValueType, dialog: IntentDialog?, view: () -> ViewType) async throws -> Bool\nUse requestConfirmation when you need to the ask user to confirm the parameter value.\nAvailable when Value conforms to _IntentValue and Sendable.\nRequesting disambiguation\nfunc requestDisambiguation(among: [Value.ValueType], dialog: IntentDialog?) async throws -> Value.ValueType\nRequest that the user disambiguate amongst an array of values for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable.\nfunc needsDisambiguationError(among: [Value.ValueType], dialog: IntentDialog?) -> AppIntentError\nReturns a restartPerform error with context for the user to disambiguate amongst an array of values from for this parameter and re-perform the intent with the new value.\nAvailable when Value conforms to _IntentValue and Sendable.\nDeprecated\nDeprecated symbols\nReview unsupported symbols and their replacements.\nInitializers\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init(title: LocalizedStringResource, description: LocalizedStringResource?, requestValueDialog: IntentDialog?, inputConnectionBehavior: InputConnectionBehavior)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is StringSearchCriteria.\nRelationships\nConforms To\nAnyIntentValue\nConforms when Value conforms to _IntentValue and Sendable.\nSendable\nSee Also\nIntent parameters\nclass IntentParameterDependency\nA property wrapper that represents an AppIntent dependency that can be used in an object that conforms to DynamicOptionsProvider.\nstruct IntentParameterContext\nA type that provides information about an associated parameter during value resolution.\nenum InputConnectionBehavior\nInput behaviors for connecting a parameter to the output of a previous app intent."
  },
  {
    "title": "IntentPerson | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentperson",
    "html": "Topics\nCreating a contact\ninit(identifier: IntentPerson.Identifier, name: IntentPerson.Name, handle: IntentPerson.Handle?, aliases: [IntentPerson.Handle], isMe: Bool, image: DisplayRepresentation.Image?)\nGetting the person’s name\nvar name: IntentPerson.Name\nThe name of this IntentPerson\nenum Name\nA type that stores name-related information for a person.\nGetting identifying information\nvar handle: IntentPerson.Handle?\nThe primary Handle used to contact this IntentPerson\nvar aliases: [IntentPerson.Handle]\nOther secondary Handles used to contact this IntentPerson, if any\nvar isMe: Bool\nWhether this IntentPerson represents the owner of the device\nvar image: DisplayRepresentation.Image?\nAn image representing this IntentPerson\nstruct Handle\nA type that manages a single way to contact a person.\nenum ParameterMode\nThe type of interface to show when someone chooses a parameter that contains information about a person.\nGetting person-related identifiers\nvar identifier: IntentPerson.Identifier\nenum Identifier\nA type that manages a unique identifier for a person.\nDefault Implementations\nInstanceDisplayRepresentable Implementations\nTypeDisplayRepresentable Implementations\n_IntentValue Implementations\nRelationships\nConforms To\nCustomLocalizedStringResourceConvertible\nDisplayRepresentable\nInstanceDisplayRepresentable\nSendable\nTypeDisplayRepresentable"
  },
  {
    "title": "requestValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparameter/requestvalue(_:)-70qzm",
    "html": "Deprecated\n\nUse requestValue(_:) instead."
  },
  {
    "title": "description | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/description-8kw5i",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nAppIntent Implementations\nstatic var description: IntentDescription?\nSee Also\nConfiguring the metadata\nstatic var title: LocalizedStringResource\n\nRequired\n\nstatic var openAppWhenRun: Bool\n\nRequired Default implementation provided.\n\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\n\nRequired Default implementation provided."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/title",
    "html": "Required\n\nSee Also\nConfiguring the metadata\nstatic var description: IntentDescription?\n\nRequired Default implementation provided.\n\nstatic var openAppWhenRun: Bool\n\nRequired Default implementation provided.\n\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\n\nRequired Default implementation provided."
  },
  {
    "title": "caseDisplayRepresentations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/casedisplayrepresentable/casedisplayrepresentations",
    "html": "Required"
  },
  {
    "title": "defaultQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity/defaultquery-4khg7",
    "html": "Required Default implementations provided.\n\nDiscussion\n\nYou can create a query that uses identifier, name and more. For additional information, see Query.\n\nDefault Implementations\nAppEntity Implementations\nstatic var defaultQuery: _TransientAppEntityQuery<Self>\nThe default query to use to retrieve entity property instances.\nstatic var defaultQuery: _RawRepresentableStringQuery<Self>\nThe default query to use to retrieve entity property instances.\nAvailable when Self conforms to RawRepresentable and ID is Self.RawValue.\nSee Also\nMaking the entity queryable\nassociatedtype DefaultQuery : EntityQuery\n\nRequired\n\nstatic var defaultResolverSpecification: EmptyResolverSpecification<Self>\nstatic var defaultResolverSpecification: some ResolverSpecification\nAvailable when Self conforms to AppEnum."
  },
  {
    "title": "EntityStringQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitystringquery",
    "html": "Topics\nSearching for entities\nfunc entities(matching: String) async throws -> Self.Result\nRetrieves instances by string.\n\nRequired\n\nRelationships\nInherits From\nDynamicOptionsProvider\nEntityQuery\nPersistentlyIdentifiable\nSendable"
  },
  {
    "title": "entities(matching:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entitystringquery/entities(matching:)",
    "html": "Required\n\nParameters\nstring\n\n“Name” used to refer to an entity instance (or a set thereof)."
  },
  {
    "title": "suggestedEntities() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquery/suggestedentities()-2te6",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nEntityQuery Implementations\nfunc suggestedEntities() async throws -> Self.Result\nReturns the initial results shown when a list of options backed by this query is presented."
  },
  {
    "title": "subtitle | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/subtitle",
    "html": "See Also\nDisplaying the content\nvar title: LocalizedStringResource\nvar image: DisplayRepresentation.Image?\nstruct Image"
  },
  {
    "title": "entities(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquery/entities(for:)",
    "html": "Required\n\nParameters\nidentifiers\n\nArray of entity identifiers\n\nDiscussion\n\nIdentifiers for which there is no matching entity are skipped, so the number of elements in the resulting array of entities can be smaller than the number of supplied identifiers.\n\nSee Also\nSearching for entities\nassociatedtype Entity : AppEntity = Self.Result.Result.ValueType\nThe entity type that this query knows how to resolve.\n\nRequired"
  },
  {
    "title": "SiriTipUIView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/siritipuiview",
    "html": "Topics\nCreating a tip view\ninit(style: SiriTipViewStyle)\nA view that displays the phrase for an App Shortcut.\nGetting the view style\nvar style: SiriTipViewStyle\nThe style to use for the view.\nstruct SiriTipViewStyle\nThe styles to apply to the tip views you use to display spoken phrases.\nGetting the view’s configuration\nvar allowsDismissal: Bool\nIndicates if the tip view should display a dismissal button\nvar isPresented: Bool\nDetermines if the view should be presented to the user.\nInstance Properties\nvar intrinsicContentSize: CGSize\nInstance Methods\nfunc setIntent<Intent>(intent: Intent)\nSets an AppIntent for this view. This must be called before presenting the view.\nfunc sizeThatFits(CGSize) -> CGSize\nRelationships\nInherits From\nUIView\nConforms To\nCALayerDelegate\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCoding\nNSObjectProtocol\nUIAccessibilityIdentification\nUIActivityItemsConfigurationProviding\nUIAppearance\nUIAppearanceContainer\nUICoordinateSpace\nUIDynamicItem\nUIFocusEnvironment\nUIFocusItem\nUIFocusItemContainer\nUILargeContentViewerItem\nUIPasteConfigurationSupporting\nUIPopoverPresentationControllerSourceItem\nUIResponderStandardEditActions\nUITraitChangeObservable\nUITraitEnvironment\nUIUserActivityRestoring\nSee Also\nTip views\nstruct SiriTipView\nA SwiftUI view that displays the phrase someone uses to invoke an App Shortcut.\nstruct SiriTipViewStyle\nThe styles to apply to the tip views you use to display spoken phrases."
  },
  {
    "title": "DisplayRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation",
    "html": "Topics\nCreating a representation\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(title: LocalizedStringResource, subtitle: LocalizedStringResource?, image: DisplayRepresentation.Image?)\nDisplaying the content\nvar title: LocalizedStringResource\nvar subtitle: LocalizedStringResource?\nvar image: DisplayRepresentation.Image?\nstruct Image\nOperators\nstatic func == (DisplayRepresentation, DisplayRepresentation) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(title: LocalizedStringResource, subtitle: LocalizedStringResource?, image: DisplayRepresentation.Image?, synonyms: [LocalizedStringResource])\nInstance Properties\nvar synonyms: [LocalizedStringResource]\nA list of localized phrases that are synonyms of this particular display representation\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nEquatable Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nEquatable\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nEntity presentation\nprotocol DisplayRepresentable\nAn interface for providing a dynamic visual representation of a specific type and instances of that type.\nprotocol InstanceDisplayRepresentable\nAn interface for providing the visual representation for an instance of a specific type.\nprotocol TypeDisplayRepresentable\nAn interface for providing the visual representation of a specific type.\nstruct TypeDisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol StaticDisplayRepresentable\nAn interface for providing a static visual representation of a specific type.\nprotocol CaseDisplayRepresentable\nAn interface for providing the visual representation for an iterable collection of values."
  },
  {
    "title": "image | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/image-swift.property",
    "html": "See Also\nDisplaying the content\nvar title: LocalizedStringResource\nvar subtitle: LocalizedStringResource?\nstruct Image"
  },
  {
    "title": "EntityQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityquery",
    "html": "Topics\nCreating a query\ninit()\n\nRequired\n\nSearching for entities\nfunc entities(for: [Self.Entity.ID]) async throws -> [Self.Entity]\nRetrieves instances by identifier.\n\nRequired\n\nassociatedtype Entity : AppEntity = Self.Result.Result.ValueType\nThe entity type that this query knows how to resolve.\n\nRequired\n\nAssociated Types\nassociatedtype Result = [Self.Entity]\n\nRequired\n\nInstance Methods\nfunc suggestedEntities() async throws -> Self.Result\nReturns the initial results shown when a list of options backed by this query is presented.\n\nRequired Default implementation provided.\n\nRelationships\nInherits From\nDynamicOptionsProvider\nPersistentlyIdentifiable\nSendable\nInherited By\nEntityPropertyQuery\nEntityStringQuery\nEnumerableEntityQuery\nSee Also\nIdentifier-based queries\nprotocol EnumerableEntityQuery\nEnumerableEntityQuery is an alternate way of providing a complete list of entities, simpler and easier to implement than EntityPropertyQuery"
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/displayrepresentation/title",
    "html": "See Also\nDisplaying the content\nvar subtitle: LocalizedStringResource?\nvar image: DisplayRepresentation.Image?\nstruct Image"
  },
  {
    "title": "ShortcutsUIButton | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/shortcutsuibutton",
    "html": "Topics\nCreating the button\ninit(style: ShortcutsLinkStyle)\nCreate a button with the specified style.\nGetting the button style\nvar style: ShortcutsLinkStyle\nThe style to use for the button.\nConfiguring additional actions\nfunc addTarget(Any?, action: Selector, for: UIControl.Event)\nResizing the button\nfunc sizeThatFits(CGSize) -> CGSize\nRelationships\nInherits From\nUIButton\nConforms To\nCALayerDelegate\nCVarArg\nCustomDebugStringConvertible\nCustomStringConvertible\nEquatable\nHashable\nNSCoding\nNSObjectProtocol\nUIAccessibilityContentSizeCategoryImageAdjusting\nUIAccessibilityIdentification\nUIActivityItemsConfigurationProviding\nUIAppearance\nUIAppearanceContainer\nUIContextMenuInteractionDelegate\nUICoordinateSpace\nUIDynamicItem\nUIFocusEnvironment\nUIFocusItem\nUIFocusItemContainer\nUILargeContentViewerItem\nUIPasteConfigurationSupporting\nUIPopoverPresentationControllerSourceItem\nUIResponderStandardEditActions\nUISpringLoadedInteractionSupporting\nUITraitChangeObservable\nUITraitEnvironment\nUIUserActivityRestoring\nSee Also\nButtons\nstruct ShortcutsLink\nA link that opens the current app’s page in the Shortcuts app.\nstruct ShortcutsLinkStyle\nThe styles to apply to buttons you use to open your app’s page in the Shortcuts app."
  },
  {
    "title": "perform() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/perform()-2vmgc",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nAppIntent Implementations\nfunc perform() async throws -> Self.NeverResult\nPerforms the intent after resolving the provided parameters.\nSee Also\nPerforming the action\nvar systemContext: IntentSystemContext\nRetrieves the IntentSystemContext during the perform of an AppIntent. IntentSystemContext carries information provided by the system that can be accessed during perform\nassociatedtype PerformResult : IntentResult\n\nRequired"
  },
  {
    "title": "displayRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/instancedisplayrepresentable/displayrepresentation",
    "html": "Required"
  },
  {
    "title": "AppShortcutParameterPresentationSummary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutparameterpresentationsummary",
    "html": "Topics\nInitializers\ninit(AppShortcutParameterPresentationSummaryString<Intent, Value, Parameter, ParameterKeyPath>, table: StaticString?)\nInitializes an AppShortcutParameterPresentationSummary with the specified parameters.\nSee Also\nApp Shortcut parameter presentation\nstruct AppShortcutParameterPresentation\nDescribes the presentation of an AppShortcut for the provided parameter.\nstruct AppShortcutParameterPresentationSummaryString\nstruct AppShortcutParameterPresentationTitle\nThis struct represents the title of an AppShortcutParameterPresentation, which should have both a specific and a generic title. The specific title should include the parameter in the interpolation, e.g. “Call (.$person)”, while the generic title is a simple string that doesn’t have the parameter specified, e.g. “Call Person…”.\nDeprecated\nstruct AppShortcutParameterPresentationTitleString\nDeprecated"
  },
  {
    "title": "typeDisplayRepresentation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/typedisplayrepresentable/typedisplayrepresentation",
    "html": "Required"
  },
  {
    "title": "AppShortcutOptionsCollectionSpecification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutoptionscollectionspecification",
    "html": "Topics\nAssociated Types\nassociatedtype Value : _IntentValue\n\nRequired\n\nRelationships\nInherits From\nSendable\nSequence\nSee Also\nApp Shortcut options\nstruct AppShortcutOptionsCollection\nprotocol AppShortcutOptionsCollectionProtocol\nenum AppShortcutOptionsCollectionSpecificationBuilder"
  },
  {
    "title": "AppShortcutsBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcutsbuilder",
    "html": "Topics\nBuilding App Shortcuts\nstatic func buildBlock(AppShortcut...) -> [AppShortcut]\nstatic func buildExpression(AppShortcut) -> AppShortcut\nSee Also\nApp Shortcut definition\nstruct AppShortcut\nA type that defines a preconfigured shortcut for a specific app intent.\nstruct AppShortcutPhrase\nA spoken phrase that causes the system to run the corresponding App Shortcut.\nstruct NegativeAppShortcutPhrase\nThis is the representation of a negative phrase. Each negative phrase will be used to populate an app-level negative training set. This set will contain phrases that will completely bypass your app.\nstruct NegativeAppShortcutPhrases\nThis is a set of negative phrases, which will all be added to the app-level negative training set. All the training data specified here, will be used to completely bypass your app\nenum ShortcutTileColor\nColors of a shortcut tile in the Shortcuts app."
  },
  {
    "title": "ParameterSummaryWhenCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarywhencondition",
    "html": "Topics\nCreating a conditional statement\ninit<Parameter>(KeyPath<Intent, Parameter>, HasValueComparisonOperator, () -> WhenCondition, otherwise: () -> Otherwise)\nenum EquatableComparisonOperator\nOperators that indicate the type of equality check for a conditional statement.\nenum ComparableComparisonOperator\nOperators that indicate the type of comparison check for a conditional statement.\nenum HasValueComparisonOperator\nOperators that indicate the type of value check for a conditional statement.\nenum OneOfComparisonOperator\nOperators that indicate the type of containment check for a conditional statement.\nInitializers\ninit<ValueType, Parameter>(KeyPath<Intent, Parameter>, EquatableComparisonOperator, ValueType, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<ValueType, Parameter>(KeyPath<Intent, Parameter>, ComparableComparisonOperator, ValueType, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<Value, Parameter>(KeyPath<Intent, Parameter>, ComparableComparisonOperator, Value.ValueType, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<ValueType, Parameter>(KeyPath<Intent, Parameter>, EquatableComparisonOperator, ValueType.ValueType, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<ValueType, Parameter>(KeyPath<Intent, Parameter>, OneOfComparisonOperator, [ValueType.ValueType], () -> WhenCondition, otherwise: () -> Otherwise)\ninit<Parameter>(KeyPath<Intent, Parameter>, identifier: ComparableComparisonOperator, Parameter.Value.ValueType.ID, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<Parameter>(KeyPath<Intent, Parameter>, identifier: EquatableComparisonOperator, String, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<Parameter>(KeyPath<Intent, Parameter>, identifier: OneOfComparisonOperator, [Parameter.Value.ValueType.ID], () -> WhenCondition, otherwise: () -> Otherwise)\ninit<IntentType, Parameter>(KeyPath<IntentType, Parameter>, identifier: ComparableComparisonOperator, Parameter.Value.ValueType.ID, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<Parameter>(KeyPath<Intent, Parameter>, identifier: StringComparisonOperator, String, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<IntentType, Parameter>(KeyPath<IntentType, Parameter>, identifier: StringComparisonOperator, String, () -> WhenCondition, otherwise: () -> Otherwise)\ninit<Parameter>(KeyPath<Intent, Parameter>, identifier: OneOfComparisonOperator, [String], () -> WhenCondition, otherwise: () -> Otherwise)\ninit<Parameter>(KeyPath<Intent, Parameter>, identifier: EquatableComparisonOperator, Parameter.Value.ValueType.ID, () -> WhenCondition, otherwise: () -> Otherwise)\ninit(widgetFamily: OneOfComparisonOperator, [IntentWidgetFamily], () -> WhenCondition, otherwise: () -> Otherwise)\ninit(widgetFamily: EquatableComparisonOperator, IntentWidgetFamily, () -> WhenCondition, otherwise: () -> Otherwise)\nRelationships\nConforms To\nParameterSummary\nSee Also\nShortcuts support\nprotocol ParameterSummary\nAn interface for defining the visual representation of an app intent’s parameters.\nstruct IntentParameterSummary\nA type that describes the user interface configuration of an app intent’s parameters.\nstruct ParameterSummaryString\nA human-readable string that interpolates parameter key paths to provide user-configurable placeholders in the Shortcuts app.\nstruct ParameterSummarySwitchCondition\nA type that represents a switch statement in a parameter summary.\nstruct ParameterSummaryCaseCondition\nA type that represents an individual case of a switch statement in a parameter summary.\nstruct ParameterSummaryDefaultCaseCondition\nA type that represents the default case of a switch statement in a parameter summary."
  },
  {
    "title": "ParameterSummaryCaseCondition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parametersummarycasecondition",
    "html": "Topics\nInitializers\ninit(Value, () -> Summary)\ninit([Value], () -> Summary)\nSee Also\nShortcuts support\nprotocol ParameterSummary\nAn interface for defining the visual representation of an app intent’s parameters.\nstruct IntentParameterSummary\nA type that describes the user interface configuration of an app intent’s parameters.\nstruct ParameterSummaryString\nA human-readable string that interpolates parameter key paths to provide user-configurable placeholders in the Shortcuts app.\nstruct ParameterSummaryWhenCondition\nA type that represents a conditional statement in a parameter summary.\nstruct ParameterSummarySwitchCondition\nA type that represents a switch statement in a parameter summary.\nstruct ParameterSummaryDefaultCaseCondition\nA type that represents the default case of a switch statement in a parameter summary."
  },
  {
    "title": "IntentParameterSummary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentparametersummary",
    "html": "Topics\nCrearing a parameter summary\ninit()\ninit(() -> [PartialKeyPath<Intent>])\ninit(ParameterSummaryString<Intent>, table: String?)\ninit(ParameterSummaryString<Intent>, table: String?, () -> [PartialKeyPath<Intent>])\nBuilding the parameter key paths\nenum ParameterKeyPathsBuilder\nA result builder that declaratively builds the path to a parameter.\nRelationships\nConforms To\nParameterSummary\nSee Also\nShortcuts support\nprotocol ParameterSummary\nAn interface for defining the visual representation of an app intent’s parameters.\nstruct ParameterSummaryString\nA human-readable string that interpolates parameter key paths to provide user-configurable placeholders in the Shortcuts app.\nstruct ParameterSummaryWhenCondition\nA type that represents a conditional statement in a parameter summary.\nstruct ParameterSummarySwitchCondition\nA type that represents a switch statement in a parameter summary.\nstruct ParameterSummaryCaseCondition\nA type that represents an individual case of a switch statement in a parameter summary.\nstruct ParameterSummaryDefaultCaseCondition\nA type that represents the default case of a switch statement in a parameter summary."
  },
  {
    "title": "InputConnectionBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/inputconnectionbehavior",
    "html": "Topics\nGetting the connection behaviors\ncase `default`\nA behavior that allows the system to determine if the parameter accepts the output.\ncase never\nA behavior that prohibits the parameter from accepting the output.\ncase connectToPreviousIntentResult\nA behavior that permits the parameter to accept the output.\nOperators\nstatic func == (InputConnectionBehavior, InputConnectionBehavior) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nIntent parameters\nclass IntentParameter\nA property wrapper that indicates the associated property is an input argument of the app intent.\nclass IntentParameterDependency\nA property wrapper that represents an AppIntent dependency that can be used in an object that conforms to DynamicOptionsProvider.\nstruct IntentParameterContext\nA type that provides information about an associated parameter during value resolution."
  },
  {
    "title": "StringSearchCriteriaFromStringResolverSpecificification | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteriafromstringresolverspecificification",
    "html": "Topics\nOperators\nstatic func == (StringSearchCriteriaFromStringResolverSpecificification, StringSearchCriteriaFromStringResolverSpecificification) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nfunc resolve(from: String, context: IntentParameterContext<StringSearchCriteria>) async throws -> StringSearchCriteria?\nConverts the specified value into the expected data type.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nResolver\nSendable"
  },
  {
    "title": "AppEntity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appentity",
    "html": "Overview\n\nTo use a data model object to app intents, update it to conform to the AppEntity protocol. Declare two static properties to make them visible to the system. The following example shows a data model for soup:\n\nFor example:\n\nstruct Soup: AppEntity {\n   let id: String\n\n\n   @Property(title: \"Type of soup\")\n   let type: SoupType = .miso\n}\n\n\nFor additional types, see EntityProperty.\n\nIt is up to you whether you want to conform to the AppEntity protocol directly on the data models of your app, or if you create data models specific to your app intents implementation. In many cases, it’s a good idea to create models specific to app intents that shadow your app data models to keep entities separate from the rest of your app’s logic.\n\nTopics\nSpecifying properties\ntypealias Property\nMaking the entity queryable\nstatic var defaultQuery: Self.DefaultQuery\nThe default query to use to retrieve entity property instances.\n\nRequired Default implementations provided.\n\nassociatedtype DefaultQuery : EntityQuery\n\nRequired\n\nstatic var defaultResolverSpecification: EmptyResolverSpecification<Self>\nstatic var defaultResolverSpecification: some ResolverSpecification\nAvailable when Self conforms to AppEnum.\nDefault Implementations\nIdentifiable Implementations\nInstanceDisplayRepresentable Implementations\nRelationships\nInherits From\nAppValue\nCustomLocalizedStringResourceConvertible\nDisplayRepresentable\nIdentifiable\nInstanceDisplayRepresentable\nPersistentlyIdentifiable\nSendable\nTypeDisplayRepresentable\nInherited By\nTransientAppEntity\nSee Also\nEntities\nIntegrating custom data types into your intents\nProvide the system with information about the types your app uses to model its data so that your intents can use those types as parameters.\nprotocol TransientAppEntity\nA type that represents a transient model object which exposes its interface to App Intents via properties. Note that TransientAppEntity types are not meant to be queried."
  },
  {
    "title": "EntityPropertyQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/EntityPropertyQuery",
    "html": "Topics\nSpecifying the queryable properties\nstatic var properties: Self.QueryProperties\nThe set of query properties supported by this query.\n\nRequired\n\ntypealias QueryProperties\ntypealias Property\nassociatedtype ComparatorMappingType\nType produced by EntityQueryComparator mapping closures and supplied as input to results.\n\nRequired\n\nSorting the results\nstatic var sortingOptions: Self.SortingOptions\nThe set of sorting orders supported by this query.\n\nRequired\n\ntypealias SortingOptions\ntypealias SortableBy\nSearching for entities\nfunc entities(matching: [Self.ComparatorMappingType], mode: Self.ComparatorMode, sortedBy: [EntityQuerySort<Self.Entity>], limit: Int?) async throws -> Self.Result\nRetrieves instances matching the supplied comparators.\n\nRequired\n\ntypealias Sort\ntypealias ComparatorMode\nenum EntityQueryComparatorMode\nModes that determine how to apply a query’s comparators.\nType Properties\nstatic var findIntentDescription: IntentDescription?\nDefines how the generated ‘Find’ Shortcuts action of this query type is displayed to the user.\n\nRequired Default implementation provided.\n\nRelationships\nInherits From\nDynamicOptionsProvider\nEntityQuery\nPersistentlyIdentifiable\nSendable\nSee Also\nProperty-matched queries\nstruct EntityQueryProperties\nA type that provides the properties to include in a property-matched query.\nclass EntityQueryProperty\nAn object that provides the supported comparators for a queryable property.\nProperty comparators\nSpecify the type of comparison to perform during a property-matched query.\nstruct EntityQuerySortingOptions\nThe potential properties you can use to sort the results of a query.\nstruct EntityQuerySortableByProperty\nDetails about a specific property you use to sort the query results.\nstruct EntityQuerySort\nThe properties to use to sort the results when the query runs."
  },
  {
    "title": "allEntities() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/EnumerableEntityQuery/allEntities()",
    "html": "Required"
  },
  {
    "title": "needsDisambiguationError(among:dialog:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/IntentParameter/needsDisambiguationError(among:dialog:)",
    "html": "Parameters\nitemsToDisambiguate\n\nthe list of items to be presented to the user for disambiguation\n\ndialog\n\na custom dialog that may be used when prompting the user for the value\n\nReturn Value\n\nan error that should be thrown within the intent perform() method.\n\nSee Also\nRequesting disambiguation\nfunc requestDisambiguation(among: [Value.ValueType], dialog: IntentDialog?) async throws -> Value.ValueType\nRequest that the user disambiguate amongst an array of values for this parameter.\nAvailable when Value conforms to _IntentValue and Sendable."
  },
  {
    "title": "EntityProperty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/EntityProperty",
    "html": "Topics\nInitializers\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitMass>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricResistance>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFuelEfficiency>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCurrent>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is AttributedString.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAcceleration>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitFrequency>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDispersion>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentFile.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitEnergy>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitSpeed>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitInformationStorage>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitTemperature>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPerson.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricPotentialDifference>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitConcentrationMass>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitDuration>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEnum.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is String.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentCurrencyAmount.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is DateComponents.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Date.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType conforms to AppEntity.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is URL.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Int.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitAngle>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPressure>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitArea>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitLength>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is IntentPaymentMethod.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitVolume>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Double.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitPower>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitElectricCharge>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is CLPlacemark.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Measurement<UnitIlluminance>.\nconvenience init(title: LocalizedStringResource)\nAvailable when Value conforms to _IntentValue, Value conforms to Sendable, and Value.ValueType is Bool.\nInstance Properties\nvar isOptional: Bool\nvar projectedValue: EntityProperty<Value>\nvar title: LocalizedStringResource\nvar wrappedValue: Value\nRelationships\nConforms To\nAnyIntentValue\nSendable\nSee Also\nEntity content\nprotocol AppValue\nA protocol designating conceptual types that are understood by App Intents such as AppEntity and AppEnum.\nprotocol AnyIntentValue\nprotocol AppEnum\nAn interface to express that a custom type has a predefined, static set of valid values to display."
  },
  {
    "title": "EnumerableEntityQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/EnumerableEntityQuery",
    "html": "Overview\n\nEnumerableEntityQuery allows the Shortcuts app to generate a Find action and do filtering automatically. It should only be used in cases where the count of entities is relatively small, and their size in memory is limited. For situations where there may be many thousands of entities, or where individual entities may become large in memory usage, use EntityPropertyQuery to allow better performance by fetching only the entities matching the criteria from your model.\n\nTopics\nInstance Methods\nfunc allEntities() async throws -> Self.Result\nReturns all available results.\n\nRequired\n\nType Properties\nstatic var findIntentDescription: IntentDescription?\nDefines how the generated ‘Find’ Shortcuts action of this query type is displayed to the user.\n\nRequired Default implementation provided.\n\nRelationships\nInherits From\nDynamicOptionsProvider\nEntityQuery\nPersistentlyIdentifiable\nSendable\nSee Also\nIdentifier-based queries\nprotocol EntityQuery\nAn interface for locating entities using their identifiers."
  },
  {
    "title": "EntityStringQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/EntityStringQuery",
    "html": "Topics\nSearching for entities\nfunc entities(matching: String) async throws -> Self.Result\nRetrieves instances by string.\n\nRequired\n\nRelationships\nInherits From\nDynamicOptionsProvider\nEntityQuery\nPersistentlyIdentifiable\nSendable"
  },
  {
    "title": "suggestedEntities() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/EntityQuery/suggestedEntities()-2te6",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nEntityQuery Implementations\nfunc suggestedEntities() async throws -> Self.Result\nReturns the initial results shown when a list of options backed by this query is presented."
  },
  {
    "title": "ProvidesDialog | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/ProvidesDialog",
    "html": "Relationships\nInherits From\nIntentResult\nSendable\nConforming Types\nIntentResultContainer\nConforms when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Dialog is IntentDialog.\nSee Also\nResults\nprotocol IntentResult\nA type that contains the result of performing an action, and includes optional information to deliver back to the initiator.\nstruct IntentResultContainer\nAn object that represents the output of a completed intent.\nAvailable when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Dialog is IntentDialog.\nprotocol ReturnsValue\nAn IntentResult that returns a value\nprotocol ShowsSnippetView\nAn IntentResult that provides a SwiftUI View to show the result of your AppIntent\nprotocol ResultsCollection\nA protocol representing a collection of returned items with support for sectioning."
  },
  {
    "title": "ShowsSnippetView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/ShowsSnippetView",
    "html": "Relationships\nInherits From\nIntentResult\nSendable\nConforming Types\nIntentResultContainer\nConforms when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nSee Also\nResults\nprotocol IntentResult\nA type that contains the result of performing an action, and includes optional information to deliver back to the initiator.\nstruct IntentResultContainer\nAn object that represents the output of a completed intent.\nAvailable when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nprotocol ProvidesDialog\nAn IntentResult that provides IntentDialog\nprotocol ReturnsValue\nAn IntentResult that returns a value\nprotocol ResultsCollection\nA protocol representing a collection of returned items with support for sectioning."
  },
  {
    "title": "EntityQuery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/EntityQuery",
    "html": "Topics\nCreating a query\ninit()\n\nRequired\n\nSearching for entities\nfunc entities(for: [Self.Entity.ID]) async throws -> [Self.Entity]\nRetrieves instances by identifier.\n\nRequired\n\nassociatedtype Entity : AppEntity = Self.Result.Result.ValueType\nThe entity type that this query knows how to resolve.\n\nRequired\n\nAssociated Types\nassociatedtype Result = [Self.Entity]\n\nRequired\n\nInstance Methods\nfunc suggestedEntities() async throws -> Self.Result\nReturns the initial results shown when a list of options backed by this query is presented.\n\nRequired Default implementation provided.\n\nRelationships\nInherits From\nDynamicOptionsProvider\nPersistentlyIdentifiable\nSendable\nInherited By\nEntityPropertyQuery\nEntityStringQuery\nEnumerableEntityQuery\nSee Also\nIdentifier-based queries\nprotocol EnumerableEntityQuery\nEnumerableEntityQuery is an alternate way of providing a complete list of entities, simpler and easier to implement than EntityPropertyQuery"
  },
  {
    "title": "AppEntity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/AppEntity",
    "html": "Overview\n\nTo use a data model object to app intents, update it to conform to the AppEntity protocol. Declare two static properties to make them visible to the system. The following example shows a data model for soup:\n\nFor example:\n\nstruct Soup: AppEntity {\n   let id: String\n\n\n   @Property(title: \"Type of soup\")\n   let type: SoupType = .miso\n}\n\n\nFor additional types, see EntityProperty.\n\nIt is up to you whether you want to conform to the AppEntity protocol directly on the data models of your app, or if you create data models specific to your app intents implementation. In many cases, it’s a good idea to create models specific to app intents that shadow your app data models to keep entities separate from the rest of your app’s logic.\n\nTopics\nSpecifying properties\ntypealias Property\nMaking the entity queryable\nstatic var defaultQuery: Self.DefaultQuery\nThe default query to use to retrieve entity property instances.\n\nRequired Default implementations provided.\n\nassociatedtype DefaultQuery : EntityQuery\n\nRequired\n\nstatic var defaultResolverSpecification: EmptyResolverSpecification<Self>\nstatic var defaultResolverSpecification: some ResolverSpecification\nAvailable when Self conforms to AppEnum.\nDefault Implementations\nIdentifiable Implementations\nInstanceDisplayRepresentable Implementations\nRelationships\nInherits From\nAppValue\nCustomLocalizedStringResourceConvertible\nDisplayRepresentable\nIdentifiable\nInstanceDisplayRepresentable\nPersistentlyIdentifiable\nSendable\nTypeDisplayRepresentable\nInherited By\nTransientAppEntity\nSee Also\nEntities\nIntegrating custom data types into your intents\nProvide the system with information about the types your app uses to model its data so that your intents can use those types as parameters.\nprotocol TransientAppEntity\nA type that represents a transient model object which exposes its interface to App Intents via properties. Note that TransientAppEntity types are not meant to be queried."
  },
  {
    "title": "AppIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/AppIntent",
    "html": "Overview\n\nTo expose your app’s functionality to system services such as Siri or the Shortcuts app, and to support interactivity in widgets, you need to implement the AppIntent protocol. Use it to provide phrases that can trigger the functionality, describe the needed data for the functionality you make available, and implement the function that performs the functionality.\n\nThe system instantiates an app intent you create parameter-less using the init() initializer whenever a person invokes it through a system service like Siri, Shortcuts, and so on. If available, the system sets parameters based on user input or other available sources. With set parameters, the system attempts to resolve them in the order of their declaration in the AppIntent body. After it resolves all parameters, the system calls the perform() function to perform the app intent with its configured parameters. Note that the system retains the app intent and its output only for the duration of the invocation.\n\nRelated sessions from WWDC22\n\nSession 10032: Dive into App Intents.\n\nImplement the AppIntent Protocol\n\nDeclare a custom intent type by defining a structure that conforms to the AppIntent protocol:\n\nstruct OrderSoupIntent: AppIntent {\n   static var title = LocalizedStringResource(\"Order Soup\")\n   static var description = IntentDescription(\"Orders a soup from your favorite restaurant.\")\n}\n\n\nThen, declare the AppIntent’s parameters. When you implement an AppIntent type, parameters must be declared with one of the following property wrappers:\n\n@OptionalParameter, wraps an optional parameter.\n\n@Parameter, wraps a required parameter.\n\nstruct OrderSoupIntent: AppIntent {\n   @Parameter(title: \"Soup\")\n   var soup: Soup\n\n\n   @OptionalParameter(title: \"Quantity\")\n   var quantity: Int?\n}\n\n\nNext, implement the required perform()function: Validate your intent’s parameters, execute the intent, and return an IntentResult that represents the output of a completed intent; for example, a PerformResult.\n\nstruct OrderSoupIntent: AppIntent {\n   @Parameter(title: \"Soup\")\n   var soup: Soup\n\n\n   @OptionalParameter(title: \"Quantity\")\n   var quantity: Int?\n\n\n   func perform() async throws -> some IntentResult {\n       guard let quantity = quantity, quantity < 10 else {\n           throw $quantity.needsValue\n       }\n       soup.order(quantity: quantity)\n       return .result()\n   }\n}\n\nTopics\nCreating an app intent\ninit()\n\nRequired\n\nSpecifying the authentication policy\nstatic var authenticationPolicy: IntentAuthenticationPolicy\n\nRequired Default implementation provided.\n\nenum IntentAuthenticationPolicy\nAuthentication policies to apply when running an app intent.\nConfiguring the metadata\nstatic var title: LocalizedStringResource\n\nRequired\n\nstatic var description: IntentDescription?\n\nRequired Default implementation provided.\n\nstatic var openAppWhenRun: Bool\n\nRequired Default implementation provided.\n\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\n\nRequired Default implementation provided.\n\nPerforming the action\nfunc perform() async throws -> Self.PerformResult\n\nRequired Default implementation provided.\n\nvar systemContext: IntentSystemContext\nRetrieves the IntentSystemContext during the perform of an AppIntent. IntentSystemContext carries information provided by the system that can be accessed during perform\nassociatedtype PerformResult : IntentResult\n\nRequired\n\nRequesting confirmation\nfunc requestConfirmation() async throws\nRequests user confirmation before performing the app intent.\nfunc requestConfirmation<Result>(result: Result, confirmationActionName: ConfirmationActionName, showPrompt: Bool) async throws\nRequests user confirmation before performing the app intent.\nfunc requestConfirmation<Result>(output: Result, confirmationActionName: ConfirmationActionName, showPrompt: Bool) async throws\nDeprecated\nDonating the intent to the system\nfunc donate() async throws -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate() -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate(result: some IntentResult) async throws -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc donate(result: some IntentResult) -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc callAsFunction(donate: Bool) async throws -> Self.PerformResult.Value\nfunc callAsFunction(donate: Bool) async throws\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch\ntypealias When\nRelationships\nInherits From\nPersistentlyIdentifiable\nSendable\nInherited By\nAudioPlaybackIntent\nAudioStartingIntent\nCustomIntentMigratedAppIntent\nDeleteIntent\nDeprecatedAppIntent\nForegroundContinuableIntent\nLiveActivityIntent\nLiveActivityStartingIntent\nOpenIntent\nPauseWorkoutIntent\nPlayVideoIntent\nPredictableIntent\nProgressReportingIntent\nResumeWorkoutIntent\nSetFocusFilterIntent\nShowInAppSearchResultsIntent\nStartDiveIntent\nStartWorkoutIntent\nSystemIntent\nWidgetConfigurationIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "AppShortcut | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/AppShortcut",
    "html": "Overview\n\nRelated sessions from WWDC22\n\nSession 10170: Implement App Shortcuts with App Intents, and session 10169: Design App Shortcuts.\n\nNote\n\nApple may extract anonymized App Shortcuts data such as localized phrases, display representation values, and the title and description of related intents. Machine learning models use this data when training to help improve the App Shortcuts experience.\n\nTopics\nCreating an app shortcut\ninit<Intent>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource, systemImageName: String)\ninit<Intent, Value, Parameter, ParameterKeyPath>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource, systemImageName: String, parameterPresentation: AppShortcutParameterPresentation<Intent, Value, Parameter, ParameterKeyPath>)\nInitializes an App Shortcut with phrases that run the app intent, a title, an image, and specified parameters.\ninit<Intent>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource?, systemImageName: String?)\nInitializes an App Shortcut with an optional title and an optional image that appear in the Shortcuts app.\nSee Also\nApp Shortcut definition\nstruct AppShortcutPhrase\nA spoken phrase that causes the system to run the corresponding App Shortcut.\nstruct NegativeAppShortcutPhrase\nThis is the representation of a negative phrase. Each negative phrase will be used to populate an app-level negative training set. This set will contain phrases that will completely bypass your app.\nstruct NegativeAppShortcutPhrases\nThis is a set of negative phrases, which will all be added to the app-level negative training set. All the training data specified here, will be used to completely bypass your app\nenum AppShortcutsBuilder\nA result builder that allows you to declaratively describe the App Shortcuts that your app provides.\nenum ShortcutTileColor\nColors of a shortcut tile in the Shortcuts app."
  },
  {
    "title": "AppShortcutsProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents/AppShortcutsProvider",
    "html": "Overview\n\nRelated sessions from WWDC22\n\nSession 10170: Implement App Shortcuts with App Intents, and session 10169: Design App Shortcuts.\n\nNote\n\nApple may extract anonymized App Shortcuts data such as localized phrases, display representation values, and the title and description of related intents. Machine learning models use this data when training to help improve the App Shortcuts experience.\n\nTopics\nType Aliases\ntypealias OptionsCollection\ntypealias ParameterPresentation\ntypealias Summary\ntypealias Title\nDeprecated\nType Properties\nstatic var appShortcuts: [AppShortcut]\n\nRequired\n\nstatic var negativePhrases: NegativeAppShortcutPhrases\nstatic var shortcutTileColor: ShortcutTileColor\nThe background color of the tile that Shortcuts displays for each of the app’s App Shortcuts.\n\nRequired Default implementation provided.\n\nType Methods\nstatic func updateAppShortcutParameters()"
  },
  {
    "title": "init(intent:phrases:shortTitle:systemImageName:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appshortcut/init(intent:phrases:shorttitle:systemimagename:)-8yntq",
    "html": "See Also\nCreating an app shortcut\ninit<Intent, Value, Parameter, ParameterKeyPath>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource, systemImageName: String, parameterPresentation: AppShortcutParameterPresentation<Intent, Value, Parameter, ParameterKeyPath>)\nInitializes an App Shortcut with phrases that run the app intent, a title, an image, and specified parameters.\ninit<Intent>(intent: Intent, phrases: [AppShortcutPhrase<Intent>], shortTitle: LocalizedStringResource?, systemImageName: String?)\nInitializes an App Shortcut with an optional title and an optional image that appear in the Shortcuts app."
  },
  {
    "title": "AppIntentError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintenterror",
    "html": "Topics\nGetting the error codes\nstatic var restartPerform: AppIntentError\nDefault Implementations\nCustomStringConvertible Implementations\nError Implementations\nRelationships\nConforms To\nCustomStringConvertible\nError\nSendable"
  },
  {
    "title": "ConfirmationActionName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/confirmationactionname",
    "html": "Topics\nType Properties\nstatic var add: ConfirmationActionName\nstatic var addData: ConfirmationActionName\nstatic var book: ConfirmationActionName\nstatic var buy: ConfirmationActionName\nstatic var call: ConfirmationActionName\nstatic var checkIn: ConfirmationActionName\nstatic var `continue`: ConfirmationActionName\nstatic var create: ConfirmationActionName\nstatic var `do`: ConfirmationActionName\nstatic var download: ConfirmationActionName\nstatic var filter: ConfirmationActionName\nstatic var find: ConfirmationActionName\nstatic var get: ConfirmationActionName\nstatic var go: ConfirmationActionName\nstatic var log: ConfirmationActionName\nstatic var open: ConfirmationActionName\nstatic var order: ConfirmationActionName\nstatic var pay: ConfirmationActionName\nstatic var play: ConfirmationActionName\nstatic var playSound: ConfirmationActionName\nstatic var post: ConfirmationActionName\nstatic var request: ConfirmationActionName\nstatic var run: ConfirmationActionName\nstatic var search: ConfirmationActionName\nstatic var send: ConfirmationActionName\nstatic var set: ConfirmationActionName\nstatic var share: ConfirmationActionName\nstatic var start: ConfirmationActionName\nstatic var startNavigation: ConfirmationActionName\nstatic var toggle: ConfirmationActionName\nstatic var turnOff: ConfirmationActionName\nstatic var turnOn: ConfirmationActionName\nstatic var view: ConfirmationActionName\nType Methods\nstatic func custom(acceptLabel: LocalizedStringResource, acceptAlternatives: [LocalizedStringResource], denyLabel: LocalizedStringResource, denyAlternatives: [LocalizedStringResource], destructive: Bool) -> ConfirmationActionName\nRelationships\nConforms To\nSendable\nSee Also\nResponding to the Action button\nResponding to the Action button on Apple Watch Ultra\nUse App Intents to register actions for your app.\nprotocol StartWorkoutIntent\nAn App Intent for starting a workout.\nprotocol PauseWorkoutIntent\nAn App Intent that lets someone pause your app’s current workout session.\nprotocol ResumeWorkoutIntent\nAn App Intent that lets someone resume your app’s paused workout session.\nprotocol StartDiveIntent\nAn App Intent that lets people start a dive session when they press the Action button on Apple Watch Ultra."
  },
  {
    "title": "StartDiveIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/startdiveintent",
    "html": "Overview\n\nTo implement the start dive action, create a structure that adopts the StartDiveIntent protocol.\n\nstruct MyStartDiveIntent: StartDiveIntent {\n\n\n    static var title: LocalizedStringResource = \"Starting a dive session.\"\n\n\n    func perform() async throws -> some IntentResult {\n        logger.debug(\"*** Starting a dive session. ***\")\n\n\n        await DiveManager.shared.start()\n        return .result(actionButtonIntent: StartDive())\n    }\n}\n\n\nThis intent needs a title property that provides a localized description of the action, and a perform() method, which the system calls when it triggers the intent.\n\nTo read live depth, water pressure, and water temperature data, see Accessing submersion data.\n\nImportant\n\nBefore you can access live dive data, your app needs to include an entitlement to access submersion data. For more information, see Express interest in the Submerged Depth and Pressure API.\n\nFor more information, see Responding to the Action button on Apple Watch Ultra.\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nResponding to the Action button\nResponding to the Action button on Apple Watch Ultra\nUse App Intents to register actions for your app.\nprotocol StartWorkoutIntent\nAn App Intent for starting a workout.\nprotocol PauseWorkoutIntent\nAn App Intent that lets someone pause your app’s current workout session.\nprotocol ResumeWorkoutIntent\nAn App Intent that lets someone resume your app’s paused workout session.\nstruct ConfirmationActionName"
  },
  {
    "title": "StartWorkoutIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/startworkoutintent",
    "html": "Overview\n\nOn Apple Watch Ultra, this intent registers a start workout action for the Action button. After installing your app, the user can select this action in Settings > Action Button by setting Action to Workout and App to your app.\n\nWhen implementing this intent, define the following:\n\nA title property\n\nA workoutStyle property\n\nA list of suggestedWorkouts\n\nA displayRepresentation property\n\nA perform() method\n\nstruct MyStartWorkoutIntent: StartWorkoutIntent {\n\n\n    // Define the intent's title.\n    static var title: LocalizedStringResource = \"Start Workout\"\n\n\n    // Define a list of start workout intents that appear below the First Press \n    // settings when someone sets your app as the workout app in \n    // Settings > Action Button.\n    static var suggestedWorkouts: [MyStartWorkoutIntent] = [MyStartWorkoutIntent()]\n\n\n    // Define a parameter that specifies the type of workout that this \n    // intent starts.\n    @Parameter(title: \"Start Workout Entity\")\n    var workoutStyle: WorkoutEnum\n\n\n    // Define an init method that sets the default workout type.\n    init() {\n        workoutStyle = .workout\n    }\n\n\n    // Set the display representation based on the current workout style.\n    var displayRepresentation: DisplayRepresentation {\n        WorkoutEnum.caseDisplayRepresentations[workoutStyle] ??\n        DisplayRepresentation(title: \"Unknown\")\n    }\n\n\n        // Launch your app when the system triggers this intent.\n    static var openAppWhenRun: Bool { true }\n\n\n    // Define the method that the system calls when it triggers this event.\n    func perform() async throws -> some IntentResult {\n        let workoutManager = MyWorkoutManager.shared\n        await workoutManager.requestAuthorization()\n        await workoutManager.startWorkout()\n        return .result()\n    }\n}\n\n\nImportant\n\nWhen defining the workoutStyle property, ensure that it adopts either the AppEnum or AppEntity protocol. Declare this property using the AppIntent.Parameter property wrapper.\n\nFor more information, see Responding to the Action button on Apple Watch Ultra.\n\nTopics\nCreating an intent\ninit(style: Self.WorkoutStyle)\nCreates a new intent for the specified workout style.\nDefining supported workouts\nassociatedtype WorkoutStyle : AppValue\nThe type to use for defining the intent’s workout style.\n\nRequired\n\nvar workoutStyle: Self.WorkoutStyle\nThe workout style for the intent.\n\nRequired\n\nstatic var suggestedWorkouts: [Self]\nA list of the supported workout styles.\n\nRequired\n\nstatic func invalidateSuggestedWorkouts()\nTells the system when the list of suggested workouts changes.\nDefining the launch behavior\nstatic var openAppWhenRun: Bool\nA Boolean value that defines the presentation style for the intent.\nRelationships\nInherits From\nAppIntent\nCustomLocalizedStringResourceConvertible\nInstanceDisplayRepresentable\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nResponding to the Action button\nResponding to the Action button on Apple Watch Ultra\nUse App Intents to register actions for your app.\nprotocol PauseWorkoutIntent\nAn App Intent that lets someone pause your app’s current workout session.\nprotocol ResumeWorkoutIntent\nAn App Intent that lets someone resume your app’s paused workout session.\nprotocol StartDiveIntent\nAn App Intent that lets people start a dive session when they press the Action button on Apple Watch Ultra.\nstruct ConfirmationActionName"
  },
  {
    "title": "Responding to the Action button on Apple Watch Ultra | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/actionbuttonarticle",
    "html": "Overview\n\nOn Apple Watch Ultra, people can specify the action that the system triggers when they press the Action button. By default, the watch provides actions for starting workouts, starting dives, starting a backtrack navigation session, setting a waypoint, turning on the flashlight, and running a shortcut from the Shortcuts app. To add your dive or workout app to the list of apps that appear when someone chooses Settings > Action Button, use App Intents to register actions for your app.\n\nFor workout apps, you can implement the following protocols:\n\nStartWorkoutIntent\n\nStarts a workout session when someone first presses the Action button.\n\nAppIntent\n\nRuns a custom action when someone presses the Action button during your app’s active workout session. Donating an intent sets the Action button’s next action. Your app can have only one next action at a time; however, donating a new intent changes the next action.\n\nPauseWorkoutIntent\n\nPauses the current workout session when someone simultaneously presses the Action button and the side button during a workout session.\n\nResumeWorkoutIntent\n\nResumes the current workout session when someone simultaneously presses the Action button and the side button while a workout session is in a paused state.\n\nFor dive apps, you can implement the following protocols:\n\nStartDiveIntent\n\nStarts a dive session when someone first presses the Action button.\n\nAppIntent\n\nRuns a custom action when someone presses the Action button during your app’s active dive session. The system also triggers the next action if someone simultaneously presses the Action button and the side button. Donating an intent sets the Action button’s next action. Your app can have only one next action at a time; however, donating a new intent changes the next action.\n\nImportant\n\nWhen creating intents for the Action button, don’t implement them in an AppIntentsExtension. Always implement the intents directly in your watchOS app.\n\nStart a new workout session\n\nStart by creating either an AppEnum or an AppEntity that defines the types of workouts that your app supports. If your app supports only a single workout, you can create an enumeration with a single case. Also define the display representation for each type of workout that your app supports. Apple Watch Ultra shows the case description’s title and subtitle below the First Press settings when someone sets your app as the workout app in Settings > Action Button.\n\nenum WorkoutEnum: String, AppEnum {\n    \n    // List the types of workout your app supports.\n    case running\n\n\n    static var typeDisplayRepresentation: TypeDisplayRepresentation = \"Workout\"\n\n\n    // Define the display representation for each of the workouts your app supports.\n    static var caseDisplayRepresentations: [WorkoutEnum: DisplayRepresentation] =\n    [.running: DisplayRepresentation(title: \"Running\", subtitle: \"outside run\")]\n}\n\n\nNext, create a structure that adopts the StartWorkoutIntent protocol. Your implementation needs to define the intent’s title, a list of suggestedWorkouts, and a parameter that contains the workoutStyle.\n\nstruct MyStartWorkoutIntent: StartWorkoutIntent {\n\n\n    // Define the intent's title.\n    static var title: LocalizedStringResource = \"Start Workout\"\n    \n    // Define a list of start workout intents that appear below the First Press settings when someone sets your app as the workout app in Settings > Action Button.\n\n\n    static var suggestedWorkouts: [MyStartWorkoutIntent] = [MyStartWorkoutIntent()]\n\n\n    // Define a parameter that specifies the type of workout that this intent starts.\n    @Parameter(title: \"Type of Workout\")\n    var workoutStyle: WorkoutEnum\n\n\n    // Define an init method that sets the default workout type.\n    init() {\n        workoutStyle = .workout\n    }\n\n\n    // Add the display representation, and the perform method here.\n}\n\n\nImportant\n\nDefine your implementation’s workoutStyle property using the AppIntent.Parameter property wrapper.\n\nYou can dynamically change the list of suggested workouts by changing the value of the suggestedWorkouts property and then calling invalidateSuggestedWorkouts(), which tells the system to reread the suggested workouts.\n\nNext, set the display strings for the intent by defining the displayRepresentation just after the intent’s initializer.\n\nvar displayRepresentation: DisplayRepresentation {\n    WorkoutEnum.caseDisplayRepresentations[workoutStyle] ??\n    DisplayRepresentation(title: \"Unknown\")\n}\n\n\nThen, implement your intent’s perform() method. The system calls this method when anything triggers the intent. In your implementation, you have 30 seconds to start a workout session and return a successful value. If you don’t start a workout session in that time, the system displays an error message, but the app remains in the foreground. People can start a workout session directly from the app, but without a session, the app goes to the background the next time they drop their wrist.\n\n// Define the method that the system calls when it triggers the intent.\nfunc perform() async throws -> some IntentResult {\n    logger.debug(\"*** Performing a Start Intent. ***\")\n    \n    // Start a workout session inside the perform method.\n    let workoutManager = MyWorkoutManager.shared\n    try await workoutManager.startWorkout(type: workoutStyle)\n    \n    // Schedule a task to request authorization and then set up the data source and start collecting data from the workout.\n    Task {\n        await workoutManager.requestAuthorization()\n        \n        do {\n            try await workoutManager.startCollectingData()\n        } catch {\n            fatalError(\"*** An error occurred while setting up the data source: \\(error.localizedDescription) ***\")\n        }\n    }\n    \n    // Return a successful result.\n    return .result()\n}\n\n\nThe start workout intent becomes available as soon as someone downloads your app. This means they can set up the Action button and run your start workout intent without ever launching your app.\n\nSimilarly, if you update your app and change the data types that the workout session uses, someone can launch the updated workout from the Action button without launching your app.\n\nTo ensure that your app requests authorization for the current set of HealthKit data types it intends to use during its workout sessions, you need to schedule an authorization request from within your intent’s perform() method. Because someone using your app doesn’t have access to its user interface until after the perform() method returns, you need to schedule the request authorization using a Task.\n\nNote\n\nIf your app has never requested authorization for any HealthKit data types, the system just launches your app when someone presses the Action button. It doesn’t call your intent’s perform() method.\n\nBefore authorizing the HealthKit data, create and start your workout session.\n\nfunc startWorkout(type: WorkoutEnum) throws {\n    logger.debug(\"*** Start a workout of type \\(type.rawValue) ***\")\n    \n    logger.debug(\"==> Creating the workout configuration.\")\n    let configuration = HKWorkoutConfiguration()\n    configuration.activityType = .running\n    configuration.locationType = .outdoor\n    \n    self.configuration = configuration\n    \n    logger.debug(\"==> Creating the workout session.\")\n    let session = try HKWorkoutSession(healthStore: store, configuration: configuration)\n    \n    session.delegate = self\n    self.session = session\n    workoutType = type\n    \n    logger.debug(\"==> Starting the session.\")\n    session.startActivity(with: Date())\n}\n\n\nThe code example above creates a workout configuration for an outdoor run. It then uses the configuration to create the workout session, assigns a workout session delegate to receive state change and errors from the workout, and starts the session.\n\nBecause the app hasn’t created a data source for the workout session, the session doesn’t generate any data.\n\nNext, request authorization for all the HealthKit data types that your workout sessions use.\n\nfunc requestAuthorization1() async {\n    logger.debug(\"*** Requesting Authorization ***\")\n    \n    // The quantity type to write to the health store.\n    let typesToShare: Set = [\n        HKQuantityType.workoutType()\n    ]\n\n\n    // The quantity types to read from the health store.\n    let typesToRead: Set = [\n        HKQuantityType(.heartRate),\n        HKQuantityType(.activeEnergyBurned),\n        HKQuantityType(.distanceWalkingRunning)\n    ]\n    \n    guard HKHealthStore.isHealthDataAvailable() else {\n        logger.debug(\"*** HealthKit is not supported on this device. ***\")\n        return\n    }\n    \n    do {\n        try await store.requestAuthorization(toShare: typesToShare, read: typesToRead)\n    } catch {\n        fatalError(\"*** An error occurred while requesting authorization to read and save data: \\(error.localizedDescription) ***\")\n    }\n\n\n    enabled = true\n}\n\n\nThis authorization request can take an arbitrarily long amount of time. Any time you request authorization for new data, the system displays an authorization sheet, and waits until someone either authorizes the data or dismisses the sheet. However, if someone has already authorized the requested data types, the system returns immediately.\n\nAfter the authorization request finishes, set up the data source, assign a delegate to receive data from the workout builder, and begin collecting data from the workout.\n\nfunc startCollectingData() async throws {\n    precondition(enabled == true)\n    guard let configuration else { fatalError(\"*** You need to create a workout configuration before calling this method. ***\") }\n    guard let session else { fatalError(\"*** You need to create a session before calling this method. ***\") }\n    \n    logger.debug(\"==> Setting the session's data source.\")\n    let builder = session.associatedWorkoutBuilder()\n    builder.dataSource = HKLiveWorkoutDataSource(healthStore: store,\n                                                 workoutConfiguration: configuration)\n    \n    builder.delegate = self\n    \n    logger.debug(\"==> Begin collecting data.\")\n    try await builder.beginCollection(at: Date())\n    \n    self.builder = builder\n\n\n    logger.debug(\"==> Donate the mark lap intent as the Action button's next action.\")\n    try await MyStartWorkoutIntent().donate(result: .result(actionButtonIntent: MyMarkLapIntent()))\n}\n\n\nIn the code example above, the last line donates the MyMarkLapIntent() as the next action for the Action button. Donating the next action is described in more detail below.\n\nAfter implementing your StartWorkoutIntent, build and run your app to load it onto the test device or Simulator. Then, on the test device, choose Settings > Action Button. Tap Action and choose Workout, then tap App and choose your app.\n\nThe device starts a new workout session when you press the Action button.\n\nImportant\n\nThe system always launches your app before running the perform() method for your StartWorkoutIntent or StartDiveIntent structures. By default, these intents set their openAppWhenRun property to true. To ensure these intents run as expected, don’t change the property’s value.\n\nSupport multiple workout types\n\nYour app can provide a list of suggested workout types, letting people associate a particular workout type with the Action button.\n\nTo suggest multiple workout types, start by defining the different types of workouts that your app supports in your AppEnum implementation.\n\nenum WorkoutEnum: String, AppEnum {\n\n\n    // List the types of workout your app supports.\n    case walking\n    case running\n    case swimming\n    case cycling\n\n\n    static var typeDisplayRepresentation: TypeDisplayRepresentation = \"Workout\"\n\n\n    // Set the display representation here.\n}\n\n\nThen set a display representation for each case.\n\nstatic var caseDisplayRepresentations: [WorkoutEnum: DisplayRepresentation] =\n[.walking: DisplayRepresentation(title: \"Walking\", subtitle: \"outside walk\"),\n .running: DisplayRepresentation(title: \"Running\", subtitle: \"outside run\"),\n .swimming: DisplayRepresentation(title: \"Swimming\", subtitle: \"lap swim\"),\n .cycling: DisplayRepresentation(title: \"Cycling\", subtitle: \"outside cycling\")\n]\n\n\nNext, in your StartWorkoutIntent implementation, define the set of suggested workouts.\n\nstatic var suggestedWorkouts: [MyStartWorkoutIntent] =\n[MyStartWorkoutIntent(style: .walking),\n MyStartWorkoutIntent(style: .running),\n MyStartWorkoutIntent(style: .swimming),\n MyStartWorkoutIntent(style: .cycling)]\n\n\nThen, in the perform() method, check the intent’s workoutStyle and create the corresponding workout session.\n\nfunc perform() async throws -> some IntentResult {\n\n\n    let workoutManager = MyWorkoutManager.shared\n    await workoutManager.requestAuthorization()\n    await workoutManager.startWorkout(type: workoutStyle)\n    return .result()\n}\n\n\nCreate a configuration for the specified type of workout.\n\nfunc startWorkout(type: WorkoutEnum) throws {\n    logger.debug(\"*** Should be starting a workout of type \\(type.rawValue) ***\")\n    \n    logger.debug(\"==> Creating the workout configuration.\")\n    let configuration = HKWorkoutConfiguration()\n    \n    switch type {\n    case .walking:\n        configuration.activityType = .walking\n    case .running:\n        configuration.activityType = .running\n    case .swimming:\n        configuration.activityType = .swimming\n    case .cycling:\n        configuration.activityType = .cycling\n    }\n    configuration.activityType = type.activityType()\n    \n    if type == .swimming {\n        configuration.locationType = .indoor\n        configuration.swimmingLocationType = .pool\n        configuration.lapLength = HKQuantity(unit: HKUnit.yard(), doubleValue: 25.0)\n    } else {\n        configuration.locationType = .outdoor\n    }\n    \n    self.configuration = configuration\n    \n    logger.debug(\"==> Creating the workout session.\")\n    let session = try HKWorkoutSession(healthStore: store, configuration: configuration)\n    \n    session.delegate = self\n    self.session = session\n    workoutType = type\n    \n    logger.debug(\"==> Starting the session.\")\n    session.startActivity(with: Date())\n}\n\n\nAnd, finally, request authorization for all the data types that your workout sessions use.\n\n// The quantity types to read from the health store.\nlet typesToRead: Set = [\n    HKQuantityType(.heartRate),\n    HKQuantityType(.activeEnergyBurned),\n    HKQuantityType(.distanceCycling),\n    HKQuantityType(.distanceSwimming),\n    HKQuantityType(.distanceWalkingRunning)\n]\n\n\nBuild and run your app again. When you open the Action button settings, you can specify a particular workout for the First Press > Workout setting.\n\nAnd pressing the Action button launches the selected type of workout.\n\nDonate the next action\n\nApple Watch Ultra runs the next action when someone presses the Action button while a workout or dive session is already running. This means the first time someone presses the Action button, the system starts your session. If they press the Action button any other time during the session, it triggers the next action.\n\nTo set the next action, implement a structure that adopts the AppIntent protocol.\n\nstruct MarkLapIntent: AppIntent {\n    static var title: LocalizedStringResource = \"Mark Lap\"\n\n\n    func perform() async throws -> some IntentResult {\n        logger.debug(\"*** Perform a mark lap intent. ***\")\n        await MyWorkoutManager.shared.markLap(at: Date())\n        return .result()\n    }\n}\n\n\nThis intent needs a title property that provides a localized description of the action, and a perform() method, which the system calls when it triggers the intent.\n\nNext, donate the app intent as the current session’s next action. For example, in your start workout intent’s perform() method, you can donate the next action for the new session by returning result(actionButtonIntent:).\n\nHowever, in most cases you want to donate a next action regardless of whether the user presses the Action button or launches the session from within your app. To ensure that your app donates the correct intent, simply return .result() from your start intent, and then donate the next intent as soon as the session starts.\n\nPrevious code examples show how to donate the MyMarkLapIntent in its startCollectingData() method. The app then calls this method when starting a workout from the Action button or from the app’s user interface.\n\nlogger.debug(\"==> Donate the mark lap intent as the Action button's next action.\")\ntry await MyStartWorkoutIntent().donate(result: .result(actionButtonIntent: MyMarkLapIntent()))\n\n\nYou can donate as many action intents as you need; however, your app can use only the most recently donated intent as the next action. Donating a new intent changes the next action.\n\nPause and resume a workout\n\nApple Watch Ultra supports pausing and resuming a current workout session by simultaneously pressing both the Action button and the side button.\n\nTo implement the pause action, create a structure that adopts the PauseWorkoutIntent protocol.\n\nstruct MyPauseWorkoutIntent: PauseWorkoutIntent {\n    static var title: LocalizedStringResource = \"Pause Workout\"\n\n\n    func perform() async throws -> some IntentResult {\n        logger.debug(\"*** Performing a pause intent. ***\")\n        await MyWorkoutManager.shared.pauseWorkout()\n        return .result()\n    }\n}\n\n\nThis intent needs a title property that provides a localized description of the action, and a perform() method, which the system calls when it triggers the intent.\n\nSimilarly, to implement the resume action, create a structure that adopts the ResumeWorkoutIntent protocol.\n\nstruct MyResumeWorkoutIntent: ResumeWorkoutIntent {\n    static var title: LocalizedStringResource = \"Resume Workout\"\n\n\n    func perform() async throws -> some IntentResult {\n        logger.debug(\"*** Performing a resume intent. ***\")\n        await MyWorkoutManager.shared.resumeWorkout()\n        return .result()\n    }\n}\n\n\nIf your app doesn’t implement structures that adopt these protocols, the system ignores simultaneous presses.\n\nStart a new dive session\n\nDive sessions work similarly to workout sessions. To start a dive session, implement a structure that adopts the StartDiveIntent protocol. Typically, people start the dive session just before entering the water. Your app can then donate App Intents that help them use your app while in the water. For example, while in the water they can’t use the touch screen, but the Action button and Digital Crown function normally.\n\nstruct MyStartDiveSessionIntent: StartDiveIntent {\n\n\n    static var title: LocalizedStringResource = \"Starting a dive session.\"\n\n\n    func perform() async throws -> some IntentResult {\n        logger.debug(\"*** Starting a dive session. ***\")\n\n\n        await DiveManager.shared.start()\n        return .result(actionButtonIntent: MyCollectSubmergedDataIntent())\n    }\n}\n\n\nThis intent needs a title property that provides a localized description of the action, and a perform() method, which the system calls when it triggers the intent.\n\nTo read live depth, water pressure, and water temperature data, see Accessing submersion data.\n\nImportant\n\nBefore you can access live dive data, your app needs to include an entitlement to access submersion data. For more information, see Express interest in the Submerged Depth and Pressure API.\n\nUnlike workout sessions, the start dive intent supports only a single type of session. You can donate next actions for your dive session; however, you can’t create intents to pause or resume the session.\n\nPassing data to the intents\n\nThe previous examples use singleton objects to share data between the different parts of your app; however, App Intents support dependency injection, letting you define the data in your main app, and access it in your intents.\n\nIn your intents, create a property that uses the AppDependency property wrapper.\n\nstruct MyStartWorkoutIntent: StartWorkoutIntent {\n  @Dependency var workoutManager: MyWorkoutManager\n\n\n  // Add remaining code here.\n}\n\n\nThen, as early as possible when your app launches, use the AppDependencyManager to define the dependency.\n\nAppDependencyManager.shared.add { MyWorkoutManager() }\n\n\nYou can set the dependency in your app’s applicationDidFinishLaunching() method. Or, if your app uses SwiftUI life cycles, add an init() method to your App structure, and set it there.\n\nOne of the main advantages of dependency injection is that you can easily replace your main data object with a mock object during testing.\n\nNote\n\nYou can only use dependency injection to pass data objects from your main app to its intents. If you need to pass the data to other parts of your app, you need to use a different approach.\n\nDebug intents\n\nTo see console output and respond to breakpoints in Xcode, use the following steps to debug your intents:\n\nBuild and run your app in Xcode.\n\nOn the test device or Simulator, send your app to the background. For example, press Shift-Command-H in Simulator to send your app to the background.\n\nMake sure you set the actions you want to test by choosing Settings > Action Button.\n\nPress the Action button to test the primary and next actions. On a test device, you can also test the pause and resume actions for workout sessions by pressing the Action button and the side button simultaneously.\n\nAny logging from your intents appears in Xcode’s console. The system also pauses execution for any breakpoints you set in Xcode.\n\nSee Also\nResponding to the Action button\nprotocol StartWorkoutIntent\nAn App Intent for starting a workout.\nprotocol PauseWorkoutIntent\nAn App Intent that lets someone pause your app’s current workout session.\nprotocol ResumeWorkoutIntent\nAn App Intent that lets someone resume your app’s paused workout session.\nprotocol StartDiveIntent\nAn App Intent that lets people start a dive session when they press the Action button on Apple Watch Ultra.\nstruct ConfirmationActionName"
  },
  {
    "title": "PauseWorkoutIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/pauseworkoutintent",
    "html": "Overview\n\nOn Apple Watch Ultra, someone can pause your workout by simultaneously pressing the Action button and the side button while your app is running a workout session.\n\nTo implement the pause action, create a structure that adopts the PauseWorkoutIntent protocol.\n\nstruct MyPauseWorkoutIntent: PauseWorkoutIntent {\n   static var title: LocalizedStringResource = \"Pause Workout\"\n\n\n   func perform() async throws -> some IntentResult {\n       logger.debug(\"*** Performing a pause intent. ***\")\n       await MyWorkoutManager.shared.pauseWorkout()\n       return .result()\n   }\n}\n\n\nThis intent needs a title property that provides a localized description of the action, and a perform() method, which the system calls when it triggers the intent.\n\nFor more information, see Responding to the Action button on Apple Watch Ultra.\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nResponding to the Action button\nResponding to the Action button on Apple Watch Ultra\nUse App Intents to register actions for your app.\nprotocol StartWorkoutIntent\nAn App Intent for starting a workout.\nprotocol ResumeWorkoutIntent\nAn App Intent that lets someone resume your app’s paused workout session.\nprotocol StartDiveIntent\nAn App Intent that lets people start a dive session when they press the Action button on Apple Watch Ultra.\nstruct ConfirmationActionName"
  },
  {
    "title": "ResumeWorkoutIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resumeworkoutintent",
    "html": "Overview\n\nOn Apple Watch Ultra, someone can resume your app’s workout by simultaneously pressing the Action button and the side button when your app has a paused workout session.\n\nTo implement the resume action, create a structure that adopts the ResumeWorkoutIntent protocol.\n\nstruct MyResumeWorkoutIntent: ResumeWorkoutIntent {\n    static var title: LocalizedStringResource = \"Resume Workout\"\n\n\n    func perform() async throws -> some IntentResult {\n        logger.debug(\"*** Performing a resume intent. ***\")\n        await MyWorkoutManager.shared.resumeWorkout()\n        return .result()\n    }\n}\n\n\nThis intent needs a title property that provides a localized description of the action, and a perform() method, which the system calls when it triggers the intent.\n\nFor more information, see Responding to the Action button on Apple Watch Ultra.\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nResponding to the Action button\nResponding to the Action button on Apple Watch Ultra\nUse App Intents to register actions for your app.\nprotocol StartWorkoutIntent\nAn App Intent for starting a workout.\nprotocol PauseWorkoutIntent\nAn App Intent that lets someone pause your app’s current workout session.\nprotocol StartDiveIntent\nAn App Intent that lets people start a dive session when they press the Action button on Apple Watch Ultra.\nstruct ConfirmationActionName"
  },
  {
    "title": "SetFocusFilterIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/setfocusfilterintent",
    "html": "Overview\n\nRelated sessions from WWDC22\n\nSession 10121: Meet Focus filters.\n\nTopics\nGetting the current app configuration\nstatic var current: Self\nstatic func suggestedFocusFilters(for: FocusFilterSuggestionContext) async -> [Self]\nYou can implement this method to return a list of suggested focus configurations. This is useful when the suggested focus configurations are different from the configuration when the focus is turned off.\n\nRequired Default implementation provided.\n\nConfiguring app context for the Focus\nvar appContext: FocusFilterAppContext\nAn app context that is associated with the focus configuration. The system will retrieve this app context and adapt the system behavior based on the context provided.\n\nRequired Default implementation provided.\n\nstatic func invalidateFocusFilterAppContext()\nRelationships\nInherits From\nAppIntent\nCustomLocalizedStringResourceConvertible\nInstanceDisplayRepresentable\nPersistentlyIdentifiable\nSendable\nSee Also\nFocus filters\nstruct FocusFilterAppContext\nA type that contains app-specific contextual information for a particular Focus, such as the notification filter criteria to apply.\nstruct FocusFilterSuggestionContext\nA type you use to suggest app configurations for a given Focus."
  },
  {
    "title": "AttributedStringFromStringResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/attributedstringfromstringresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: String, context: IntentParameterContext<AttributedString>) async throws -> AttributedString?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (AttributedStringFromStringResolver, AttributedStringFromStringResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nResolver\nSendable\nSee Also\nString resolution\nstruct StringFromDoubleResolver\nA resolver that converts a double into a string.\nstruct StringFromIntResolver\nA resolver that converts one or more integers into one or more strings."
  },
  {
    "title": "StringFromDoubleResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringfromdoubleresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: Double, context: IntentParameterContext<String>) async throws -> String?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (StringFromDoubleResolver, StringFromDoubleResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nResolver\nSendable\nSee Also\nString resolution\nstruct AttributedStringFromStringResolver\nA resolver that converts a string into an attributed string.\nstruct StringFromIntResolver\nA resolver that converts one or more integers into one or more strings."
  },
  {
    "title": "FocusFilterAppContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/focusfilterappcontext",
    "html": "Topics\nCreating the app context\ninit(notificationFilterPredicate: NSPredicate?)\nCreates a FocusFilterAppContext with a specified notificationFilterPredicate\nGetting the filter predicate\nlet notificationFilterPredicate: NSPredicate?\nAn NSPredicate for system to filter the user’s notifications of the app when a Focus is active.\nInitializers\ninit(notificationFilterPredicate: NSPredicate?, targetContentIdentifierPrefix: String?)\nCreates a FocusFilterAppContext with a specified notificationFilterPredicate and a specified targetContentIdentifierPrefix\nInstance Properties\nlet targetContentIdentifierPrefix: String?\nAn identifier that will be combined with the scheme focus: to prefix any targetContentIdentifier strings evaluated against your app’s sceneActivationConditions.\nSee Also\nFocus filters\nprotocol SetFocusFilterIntent\nAn interface for providing an app intent that you use to adapt your app’s behavior when Focus changes.\nstruct FocusFilterSuggestionContext\nA type you use to suggest app configurations for a given Focus."
  },
  {
    "title": "ResultsCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resultscollection",
    "html": "Topics\nAssociated Types\nassociatedtype Result : _IntentValue\n\nRequired\n\nInstance Properties\nvar items: [Self.Result.ValueType]\nAll result items.\n\nRequired\n\nvar promptLabel: LocalizedStringResource?\nA text prompt shown at the top of the view that presents the options.\n\nRequired\n\nvar usesIndexedCollation: Bool\nIf set to true, presents the list of options with an alphabetical index on the right side of the screen (table view section index titles).\n\nRequired\n\nType Properties\nstatic var empty: Self\nAn empty result.\n\nRequired\n\nRelationships\nConforming Types\nIntentItemCollection\nSee Also\nResults\nprotocol IntentResult\nA type that contains the result of performing an action, and includes optional information to deliver back to the initiator.\nstruct IntentResultContainer\nAn object that represents the output of a completed intent.\nprotocol ProvidesDialog\nAn IntentResult that provides IntentDialog\nprotocol ReturnsValue\nAn IntentResult that returns a value\nprotocol ShowsSnippetView\nAn IntentResult that provides a SwiftUI View to show the result of your AppIntent"
  },
  {
    "title": "DoubleFromIntResolver | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/doublefromintresolver",
    "html": "Topics\nResolving the type\nfunc resolve(from: Int, context: IntentParameterContext<Double>) async throws -> Double?\nConverts the specified value into the expected data type.\nOperators\nstatic func == (DoubleFromIntResolver, DoubleFromIntResolver) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias Input\ntypealias Output\nDefault Implementations\nEquatable Implementations\nRangeCheckingResolver Implementations\nResolver Implementations\nRelationships\nConforms To\nEquatable\nHashable\nRangeCheckingResolver\nResolver\nSendable\nSee Also\nFloating-point resolution\nstruct DoubleFromStringResolver\nA resolver that converts a string into a double and validates the result is within the parameter’s inclusive range.\nstruct DoubleResolver\nA resolver that validates a double is within the parameter’s inclusive range."
  },
  {
    "title": "IntentResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresult",
    "html": "Topics\nGetting the result value\nvar value: Self.Value?\n\nRequired\n\nAssociated Types\nassociatedtype Dialog = Never\n\nRequired\n\nassociatedtype OpensAppIntent : AppIntent = Never\n\nRequired\n\nassociatedtype Snippet = Never\n\nRequired\n\nassociatedtype Value : _IntentValue = Never\n\nRequired\n\nType Methods\nstatic func result() -> Self\nIndicates the AppIntent finished performing\nstatic func result<Intent>(actionButtonIntent: Intent) -> Self\nIndicates the Intent finished performing with an AppIntent to continue with\nstatic func result<Intent>(actionButtonIntent: Intent, dialog: IntentDialog) -> Self\nIndicates the Intent finished performing with an AppIntent to continue with\nstatic func result<Content>(content: () -> Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result(dialog: IntentDialog) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Content>(dialog: IntentDialog, content: () -> Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Content>(dialog: IntentDialog, view: Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<OpensAppIntent>(opensIntent: OpensAppIntent) -> Self\nIndicates the AppIntent finished performing\nstatic func result<OpensAppIntent, Content>(opensIntent: OpensAppIntent, content: () -> Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<OpensAppIntent>(opensIntent: OpensAppIntent, dialog: IntentDialog) -> Self\nIndicates the AppIntent finished performing\nstatic func result<OpensAppIntent, Content>(opensIntent: OpensAppIntent, dialog: IntentDialog, content: () -> Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<OpensAppIntent, Content>(opensIntent: OpensAppIntent, dialog: IntentDialog, view: Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<OpensAppIntent, Content>(opensIntent: OpensAppIntent, view: Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value>(value: Value) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, Intent>(value: Value, actionButtonIntent: Intent) -> Self\nIndicates the Intent finished performing with an AppIntent to continue with\nstatic func result<Value, Intent>(value: Value, actionButtonIntent: Intent, dialog: IntentDialog) -> Self\nIndicates the Intent finished performing with an AppIntent to continue with\nstatic func result<Value, Content>(value: Value, content: () -> Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value>(value: Value, dialog: IntentDialog) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, Content>(value: Value, dialog: IntentDialog, content: () -> Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, Content>(value: Value, dialog: IntentDialog, view: Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, OpensAppIntent>(value: Value, opensIntent: OpensAppIntent) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, OpensAppIntent, Content>(value: Value, opensIntent: OpensAppIntent, content: () -> Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, OpensAppIntent>(value: Value, opensIntent: OpensAppIntent, dialog: IntentDialog) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, OpensAppIntent, Content>(value: Value, opensIntent: OpensAppIntent, dialog: IntentDialog, content: () -> Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, OpensAppIntent, Content>(value: Value, opensIntent: OpensAppIntent, dialog: IntentDialog, view: Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, OpensAppIntent, Content>(value: Value, opensIntent: OpensAppIntent, view: Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Value, Content>(value: Value, view: Content) -> Self\nIndicates the AppIntent finished performing\nstatic func result<Content>(view: Content) -> Self\nIndicates the AppIntent finished performing\nRelationships\nInherits From\nSendable\nInherited By\nOpensIntent\nProvidesDialog\nReturnsValue\nShowsSnippetView\nConforming Types\nIntentResultContainer\nConforms when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nSee Also\nResults\nstruct IntentResultContainer\nAn object that represents the output of a completed intent.\nAvailable when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nprotocol ProvidesDialog\nAn IntentResult that provides IntentDialog\nprotocol ReturnsValue\nAn IntentResult that returns a value\nprotocol ShowsSnippetView\nAn IntentResult that provides a SwiftUI View to show the result of your AppIntent\nprotocol ResultsCollection\nA protocol representing a collection of returned items with support for sectioning."
  },
  {
    "title": "AppIntentsExtension | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintentsextension",
    "html": "Topics\nDefault Implementations\nAppExtension Implementations\nRelationships\nInherits From\nAppExtension"
  },
  {
    "title": "ReturnsValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/returnsvalue",
    "html": "Relationships\nInherits From\nIntentResult\nSendable\nConforming Types\nIntentResultContainer\nConforms when Value conforms to _IntentValue and OpensAppIntent conforms to AppIntent.\nSee Also\nResults\nprotocol IntentResult\nA type that contains the result of performing an action, and includes optional information to deliver back to the initiator.\nstruct IntentResultContainer\nAn object that represents the output of a completed intent.\nAvailable when Value conforms to _IntentValue and OpensAppIntent conforms to AppIntent.\nprotocol ProvidesDialog\nAn IntentResult that provides IntentDialog\nprotocol ShowsSnippetView\nAn IntentResult that provides a SwiftUI View to show the result of your AppIntent\nprotocol ResultsCollection\nA protocol representing a collection of returned items with support for sectioning."
  },
  {
    "title": "ShowsSnippetView | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/showssnippetview",
    "html": "Relationships\nInherits From\nIntentResult\nSendable\nConforming Types\nIntentResultContainer\nConforms when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nSee Also\nResults\nprotocol IntentResult\nA type that contains the result of performing an action, and includes optional information to deliver back to the initiator.\nstruct IntentResultContainer\nAn object that represents the output of a completed intent.\nAvailable when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nprotocol ProvidesDialog\nAn IntentResult that provides IntentDialog\nprotocol ReturnsValue\nAn IntentResult that returns a value\nprotocol ResultsCollection\nA protocol representing a collection of returned items with support for sectioning."
  },
  {
    "title": "ProvidesDialog | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/providesdialog",
    "html": "Relationships\nInherits From\nIntentResult\nSendable\nConforming Types\nIntentResultContainer\nConforms when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Dialog is IntentDialog.\nSee Also\nResults\nprotocol IntentResult\nA type that contains the result of performing an action, and includes optional information to deliver back to the initiator.\nstruct IntentResultContainer\nAn object that represents the output of a completed intent.\nAvailable when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Dialog is IntentDialog.\nprotocol ReturnsValue\nAn IntentResult that returns a value\nprotocol ShowsSnippetView\nAn IntentResult that provides a SwiftUI View to show the result of your AppIntent\nprotocol ResultsCollection\nA protocol representing a collection of returned items with support for sectioning."
  },
  {
    "title": "App entities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/app-entities",
    "html": "Overview\n\nApp entities provide the system with information about your app’s data, or about concepts related to your app’s data. App entities help the system resolve parameters for app intents by letting it introspect relevant types. For example, a photo app that provides app entities for its photos and albums might also provide app entities to represent “the current photo” or “this album”. These specific app entities help resolve intents more quickly and with fewer verbal interactions.\n\nDefine app entities for core types and concepts that you want to make available to system services. Add properties for any data values that help people discover entities using queries. For example, add the name of a photo album or the currency amount for a financial transaction.\n\nTopics\nEntities\nIntegrating custom data types into your intents\nProvide the system with information about the types your app uses to model its data so that your intents can use those types as parameters.\nprotocol AppEntity\nAn interface for exposing a custom type or app-specific concept to system services such as Siri and the Shortcuts app.\nprotocol TransientAppEntity\nA type that represents a transient model object which exposes its interface to App Intents via properties. Note that TransientAppEntity types are not meant to be queried.\nEntity identity\nprotocol PersistentlyIdentifiable\nDefines a string that uniquely identifies a type. This is useful for maintaining the identity of a type, even when its type name is changed.\nstruct EntityIdentifier\nA type that uniquely identifies a specific instance of an entity.\nprotocol EntityIdentifierConvertible\nAn interface for converting between an entity’s identifier and its string representation.\nEntity content\nclass EntityProperty\nA property wrapper that exposes the associated property to the system.\nprotocol AppValue\nA protocol designating conceptual types that are understood by App Intents such as AppEntity and AppEnum.\nprotocol AnyIntentValue\nprotocol AppEnum\nAn interface to express that a custom type has a predefined, static set of valid values to display.\nEntity presentation\nstruct DisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol DisplayRepresentable\nAn interface for providing a dynamic visual representation of a specific type and instances of that type.\nprotocol InstanceDisplayRepresentable\nAn interface for providing the visual representation for an instance of a specific type.\nprotocol TypeDisplayRepresentable\nAn interface for providing the visual representation of a specific type.\nstruct TypeDisplayRepresentation\nA type that describes the user interface presentation of a custom type.\nprotocol StaticDisplayRepresentable\nAn interface for providing a static visual representation of a specific type.\nprotocol CaseDisplayRepresentable\nAn interface for providing the visual representation for an iterable collection of values.\nSee Also\nData introspection\nEntity queries\nHelp the system find the entities your app defines and use them to resolve parameters."
  },
  {
    "title": "IntentResultContainer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentresultcontainer",
    "html": "Overview\n\nUse the IntentResult.result() family of functions to create instances\n\nTopics\nInstance Properties\nvar dialog: IntentDialog?\nvar opensIntent: OpensAppIntent?\nvar value: Value?\nDefault Implementations\nIntentResult Implementations\nRelationships\nConforms To\nIntentResult\nConforms when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nOpensIntent\nConforms when Value conforms to _IntentValue and OpensAppIntent conforms to AppIntent.\nProvidesDialog\nConforms when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Dialog is IntentDialog.\nReturnsValue\nConforms when Value conforms to _IntentValue and OpensAppIntent conforms to AppIntent.\nSendable\nShowsSnippetView\nConforms when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nSee Also\nResults\nprotocol IntentResult\nA type that contains the result of performing an action, and includes optional information to deliver back to the initiator.\nAvailable when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nprotocol ProvidesDialog\nAn IntentResult that provides IntentDialog\nAvailable when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Dialog is IntentDialog.\nprotocol ReturnsValue\nAn IntentResult that returns a value\nAvailable when Value conforms to _IntentValue and OpensAppIntent conforms to AppIntent.\nprotocol ShowsSnippetView\nAn IntentResult that provides a SwiftUI View to show the result of your AppIntent\nAvailable when Value conforms to _IntentValue, OpensAppIntent conforms to AppIntent, and Snippet is _SnippetViewContainer.\nprotocol ResultsCollection\nA protocol representing a collection of returned items with support for sectioning."
  },
  {
    "title": "IntentProjection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentprojection",
    "html": "Topics\nSubscripts\nsubscript<Value>(dynamicMember _: KeyPath<Intent, Value>) -> Value.UnwrappedType\nSee Also\nSupplementary content\nprotocol AppIntentsPackage\nstruct IntentDescription\nThe human-readable description and metadata for an app intent.\nstruct IntentDialog\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\nstruct IntentDeprecation\nstruct IntentSystemContext\nA type describing the system context for the current AppIntent, which carries information provided by the system that can be accessed during the perform of an AppIntent"
  },
  {
    "title": "IntentSystemContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentsystemcontext",
    "html": "Overview\n\nThis includes information such as a precise timestamp in cases where the AppIntent is being executed as a result of the user pressing the Apple Watch Ultra’s Action button.\n\nTopics\nInstance Properties\nvar preciseTimestamp: Date?\nIf a precise timestamp is available, it can be accessed here.\nSee Also\nSupplementary content\nprotocol AppIntentsPackage\nstruct IntentDescription\nThe human-readable description and metadata for an app intent.\nstruct IntentDialog\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\nstruct IntentDeprecation\nclass IntentProjection\nAn AppIntent projection that returns non-optional values for parameters listed in the @IntentParameterDependency property wrapper."
  },
  {
    "title": "IntentDialog | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdialog",
    "html": "Topics\nCreating a dialog\ninit(LocalizedStringResource)\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\ninit(stringInterpolation: String.LocalizationValue.StringInterpolation)\nCreates an instance from a string interpolation.\ninit(full: LocalizedStringResource, supporting: LocalizedStringResource)\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringInterpolation\nThe type each segment of a string literal containing interpolations should be appended to.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringInterpolation\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSendable\nSee Also\nSupplementary content\nprotocol AppIntentsPackage\nstruct IntentDescription\nThe human-readable description and metadata for an app intent.\nstruct IntentDeprecation\nclass IntentProjection\nAn AppIntent projection that returns non-optional values for parameters listed in the @IntentParameterDependency property wrapper.\nstruct IntentSystemContext\nA type describing the system context for the current AppIntent, which carries information provided by the system that can be accessed during the perform of an AppIntent"
  },
  {
    "title": "AppDependency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appdependency",
    "html": "Topics\nInitializers\nconvenience init(key: AnyHashable?, manager: AppDependencyManager)\nconvenience init(key: AnyHashable?, manager: AppDependencyManager, default: () async throws -> Value)\nconvenience init(key: AnyHashable?, manager: AppDependencyManager, default: () -> Value)\nInstance Properties\nvar projectedValue: AppDependency<Value>\nvar wrappedValue: Value\nRelationships\nConforms To\nSendable\nSee Also\nDependency management\nclass AppDependencyManager"
  },
  {
    "title": "IntentDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdescription",
    "html": "Topics\nCreating a description\ninit(LocalizedStringResource, categoryName: LocalizedStringResource?, searchKeywords: [LocalizedStringResource])\nInitializers\ninit(LocalizedStringResource, categoryName: LocalizedStringResource?, searchKeywords: [LocalizedStringResource], resultValueName: LocalizedStringResource?)\ninit(stringLiteral: String)\nCreates an instance initialized to the given string value.\nInstance Properties\nvar categoryName: LocalizedStringResource?\nThe category in which this intent will be grouped into in the Shortcuts editor.\nvar descriptionText: LocalizedStringResource\nA short, localized, human-readable string that describes the intent using sentence case and followed by a period.\nvar resultValueName: LocalizedStringResource?\nA name for the result of this intent, which will be displayed in the Shortcuts editor, such as when the output is used as a variable.\nvar searchKeywords: [LocalizedStringResource]\nA set of keywords which, when searched in the Shortcuts editor, will reveal this intent.\nType Aliases\ntypealias ExtendedGraphemeClusterLiteralType\nA type that represents an extended grapheme cluster literal.\ntypealias StringLiteralType\nA type that represents a string literal.\ntypealias UnicodeScalarLiteralType\nA type that represents a Unicode scalar literal.\nDefault Implementations\nExpressibleByExtendedGraphemeClusterLiteral Implementations\nExpressibleByUnicodeScalarLiteral Implementations\nRelationships\nConforms To\nExpressibleByExtendedGraphemeClusterLiteral\nExpressibleByStringLiteral\nExpressibleByUnicodeScalarLiteral\nSee Also\nSupplementary content\nprotocol AppIntentsPackage\nstruct IntentDialog\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\nstruct IntentDeprecation\nclass IntentProjection\nAn AppIntent projection that returns non-optional values for parameters listed in the @IntentParameterDependency property wrapper.\nstruct IntentSystemContext\nA type describing the system context for the current AppIntent, which carries information provided by the system that can be accessed during the perform of an AppIntent"
  },
  {
    "title": "IntentDeprecation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intentdeprecation",
    "html": "Topics\nInitializers\ninit(message: LocalizedStringResource)\ninit(message: LocalizedStringResource, replacedBy: ReplacementIntent.Type?)\ninit(replacedBy: ReplacementIntent.Type)\nInstance Properties\nvar message: LocalizedStringResource\nA short, localized, human-readable string that describes the deprecation of this intent using sentence case and followed by a period.\nvar replacedBy: ReplacementIntent.Type?\nOptionally, the AppIntent that replaces this one. Note: This is used by the Shortcuts app to help the user find the new AppIntent to use.\nSee Also\nSupplementary content\nprotocol AppIntentsPackage\nstruct IntentDescription\nThe human-readable description and metadata for an app intent.\nstruct IntentDialog\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\nclass IntentProjection\nAn AppIntent projection that returns non-optional values for parameters listed in the @IntentParameterDependency property wrapper.\nstruct IntentSystemContext\nA type describing the system context for the current AppIntent, which carries information provided by the system that can be accessed during the perform of an AppIntent"
  },
  {
    "title": "AppIntentsPackage | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintentspackage",
    "html": "Topics\nType Properties\nstatic var includedPackages: [AppIntentsPackage.Type]\n\nRequired Default implementation provided.\n\nSee Also\nSupplementary content\nstruct IntentDescription\nThe human-readable description and metadata for an app intent.\nstruct IntentDialog\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\nstruct IntentDeprecation\nclass IntentProjection\nAn AppIntent projection that returns non-optional values for parameters listed in the @IntentParameterDependency property wrapper.\nstruct IntentSystemContext\nA type describing the system context for the current AppIntent, which carries information provided by the system that can be accessed during the perform of an AppIntent"
  },
  {
    "title": "CustomIntentMigratedAppIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/customintentmigratedappintent",
    "html": "Topics\nSpecifying the migrated intent’s class name\nstatic var intentClassName: String\nThe name of the SiriKit Intent class used to implement this AppIntent previously\n\nRequired\n\nDefault Implementations\nPersistentlyIdentifiable Implementations\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable"
  },
  {
    "title": "WidgetConfigurationIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/widgetconfigurationintent",
    "html": "Overview\n\nThe parameters of the intent define the configuration options for your widget. The system uses the intent’s title and description for the display name and description of the widget if those values aren’t set explicitly on the AppIntentConfiguration.\n\nstruct FavoriteBook: WidgetConfigurationIntent {\n    static var title: LocalizedStringResource = \"Favorite Book\"\n    static var description = IntentDescription(\"Shows a picture of your favorite book!\")\n\n\n    @Parameter(title: \"Title\")\n    var title: String\n\n\n    @Parameter(title: \"Author\")\n    var author: String\n}\n\n\nUse parameterSummary to configure the order of the parameters in the configuration UI, as well as dynamic presentation such as using the value of one parameter to determine whether to show or hide another.\n\nenum RefreshInterval: String, AppEnum {\n    case hourly, daily, weekly\n\n\n    static var typeDisplayRepresentation: TypeDisplayRepresentation = \"Refresh Interval\"\n    static var caseDisplayRepresentations: [RefreshInterval : DisplayRepresentation] = [\n        .hourly: \"Every Hour\",\n        .daily: \"Every Day\",\n        .weekly: \"Every Week\",\n    ]\n}\n\n\nstruct FavoriteSoup: WidgetConfigurationIntent {\n    static var title: LocalizedStringResource = \"Favorite Soup\"\n    static var description = IntentDescription(\"Shows a picture of your favorite soup!\")\n\n\n    @Parameter(title: \"Soup\")\n    var name: String?\n\n\n    @Parameter(title: \"Shuffle\", default: true)\n    var shuffle: Bool\n\n\n    @Parameter(title: \"Refresh\", default: .daily)\n    var interval: RefreshInterval\n\n\n    static var parameterSummary: some ParameterSummary {\n        When(\\.$shuffle, .equalTo, true) {\n            Summary {\n                \\.$name\n                \\.$shuffle\n                \\.$interval\n            }\n        } otherwise: {\n            Summary {\n                \\.$name\n                \\.$shuffle\n            }\n        }\n    }\n}\n\n\nWhen using this protocol, you don’t need to provide an implementation for perform(). You can, however, still implement perform() to use the same implementation for both widget configuration and as an actionable intent.\n\nFor more information on how to use intents for widget configuration, see AppIntentTimelineProvider.\n\nTopics\nWidget families\nenum IntentWidgetFamily\nAssociated Types\nassociatedtype NeverResult\n\nRequired\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents."
  },
  {
    "title": "OpensIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/opensintent",
    "html": "Relationships\nInherits From\nIntentResult\nSendable\nConforming Types\nIntentResultContainer\nConforms when Value conforms to _IntentValue and OpensAppIntent conforms to AppIntent.\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "openAppWhenRun | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent/openappwhenrun-3u9y8",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nAppIntent Implementations\nstatic var openAppWhenRun: Bool\nSee Also\nConfiguring the metadata\nstatic var title: LocalizedStringResource\n\nRequired\n\nstatic var description: IntentDescription?\n\nRequired Default implementation provided.\n\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\n\nRequired Default implementation provided."
  },
  {
    "title": "ForegroundContinuableIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/foregroundcontinuableintent",
    "html": "Topics\nInstance Methods\nfunc needsToContinueInForegroundError(IntentDialog?, continuation: (() async throws -> Void)?) -> AppIntentError\nThrow needsToContinueInForegroundError when you need to stop performing the app intent and ask the user to continue execution in the foreground. You can provide an optional continuation closure that will be executed on the main thread and can be used to update your app’s state after the user decides to continue execution in the foreground.\nfunc requestToContinueInForeground<ResultValue>(IntentDialog?, continuation: (() async throws -> ResultValue)) async throws -> ResultValue\nUse requestToContinueInForeground when you need to ask the user to continue execution in the foreground. You can provide an optional continuation closure that will be executed on the main thread and can be used to update your app’s state after the user decides to continue execution in the foreground. The result of the closure will be passed back to the caller of the requestToContinueInForeground method.\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "LiveActivityIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/liveactivityintent",
    "html": "Overview\n\nThe intent needs to conform to this protocol to be allowed to start a Live Activity by the system. The Live Activity must be created, and started, manually by the intent. See the ActivityKit framework.\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "LiveActivityStartingIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/liveactivitystartingintent",
    "html": "Overview\n\nThe intent needs to conform to this protocol to be allowed to start a Live Activity by the system. The Live Activity must be created, and started, manually by the intent. See the ActivityKit framework.\n\nWarning: Please adopt LiveActivityIntent instead of this protocol. This protocol is deprecated and will be removed in a future release.\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "DeprecatedAppIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/deprecatedappintent",
    "html": "Topics\nAssociated Types\nassociatedtype ReplacementIntent : AppIntent = Never\n\nRequired\n\nType Properties\nstatic var deprecation: IntentDeprecation<Self.ReplacementIntent>\n\nRequired Default implementation provided.\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "DeleteIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/deleteintent",
    "html": "Topics\nAssociated Types\nassociatedtype Entity : AppEntity\n\nRequired\n\nInstance Properties\nvar entities: [Self.Entity]\n\nRequired\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "AppIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/appintent",
    "html": "Overview\n\nTo expose your app’s functionality to system services such as Siri or the Shortcuts app, and to support interactivity in widgets, you need to implement the AppIntent protocol. Use it to provide phrases that can trigger the functionality, describe the needed data for the functionality you make available, and implement the function that performs the functionality.\n\nThe system instantiates an app intent you create parameter-less using the init() initializer whenever a person invokes it through a system service like Siri, Shortcuts, and so on. If available, the system sets parameters based on user input or other available sources. With set parameters, the system attempts to resolve them in the order of their declaration in the AppIntent body. After it resolves all parameters, the system calls the perform() function to perform the app intent with its configured parameters. Note that the system retains the app intent and its output only for the duration of the invocation.\n\nRelated sessions from WWDC22\n\nSession 10032: Dive into App Intents.\n\nImplement the AppIntent Protocol\n\nDeclare a custom intent type by defining a structure that conforms to the AppIntent protocol:\n\nstruct OrderSoupIntent: AppIntent {\n   static var title = LocalizedStringResource(\"Order Soup\")\n   static var description = IntentDescription(\"Orders a soup from your favorite restaurant.\")\n}\n\n\nThen, declare the AppIntent’s parameters. When you implement an AppIntent type, parameters must be declared with one of the following property wrappers:\n\n@OptionalParameter, wraps an optional parameter.\n\n@Parameter, wraps a required parameter.\n\nstruct OrderSoupIntent: AppIntent {\n   @Parameter(title: \"Soup\")\n   var soup: Soup\n\n\n   @OptionalParameter(title: \"Quantity\")\n   var quantity: Int?\n}\n\n\nNext, implement the required perform()function: Validate your intent’s parameters, execute the intent, and return an IntentResult that represents the output of a completed intent; for example, a PerformResult.\n\nstruct OrderSoupIntent: AppIntent {\n   @Parameter(title: \"Soup\")\n   var soup: Soup\n\n\n   @OptionalParameter(title: \"Quantity\")\n   var quantity: Int?\n\n\n   func perform() async throws -> some IntentResult {\n       guard let quantity = quantity, quantity < 10 else {\n           throw $quantity.needsValue\n       }\n       soup.order(quantity: quantity)\n       return .result()\n   }\n}\n\nTopics\nCreating an app intent\ninit()\n\nRequired\n\nSpecifying the authentication policy\nstatic var authenticationPolicy: IntentAuthenticationPolicy\n\nRequired Default implementation provided.\n\nenum IntentAuthenticationPolicy\nAuthentication policies to apply when running an app intent.\nConfiguring the metadata\nstatic var title: LocalizedStringResource\n\nRequired\n\nstatic var description: IntentDescription?\n\nRequired Default implementation provided.\n\nstatic var openAppWhenRun: Bool\n\nRequired Default implementation provided.\n\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\nstatic var isDiscoverable: Bool\nA boolean value that determines whether system features like as Shortcuts and Spotlight can discover this app intent.\n\nRequired Default implementation provided.\n\nPerforming the action\nfunc perform() async throws -> Self.PerformResult\n\nRequired Default implementation provided.\n\nvar systemContext: IntentSystemContext\nRetrieves the IntentSystemContext during the perform of an AppIntent. IntentSystemContext carries information provided by the system that can be accessed during perform\nassociatedtype PerformResult : IntentResult\n\nRequired\n\nRequesting confirmation\nfunc requestConfirmation() async throws\nRequests user confirmation before performing the app intent.\nfunc requestConfirmation<Result>(result: Result, confirmationActionName: ConfirmationActionName, showPrompt: Bool) async throws\nRequests user confirmation before performing the app intent.\nfunc requestConfirmation<Result>(output: Result, confirmationActionName: ConfirmationActionName, showPrompt: Bool) async throws\nDeprecated\nDonating the intent to the system\nfunc donate() async throws -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate() -> IntentDonationIdentifier\nDonates the intent to the transcript.\nfunc donate(result: some IntentResult) async throws -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc donate(result: some IntentResult) -> IntentDonationIdentifier\nDonates the intent and optional result to the transcript.\nfunc callAsFunction(donate: Bool) async throws -> Self.PerformResult.Value\nfunc callAsFunction(donate: Bool) async throws\nSummarizing the parameters\nassociatedtype SummaryContent : ParameterSummary\nThe type of parameter summary representing this intent.\n\nRequired\n\nstatic var parameterSummary: Self.SummaryContent\nDefines the summary of this intent in relation to how its parameters are populated.\n\nRequired Default implementation provided.\n\nstatic var parameterSummary: some ParameterSummary\nenum ParameterSummaryBuilder\nA result builder that allows you to declaratively describe a parameter summary.\ntypealias Parameter\ntypealias Case\ntypealias DefaultCase\ntypealias Summary\ntypealias Switch\ntypealias When\nRelationships\nInherits From\nPersistentlyIdentifiable\nSendable\nInherited By\nAudioPlaybackIntent\nAudioStartingIntent\nCustomIntentMigratedAppIntent\nDeleteIntent\nDeprecatedAppIntent\nForegroundContinuableIntent\nLiveActivityIntent\nLiveActivityStartingIntent\nOpenIntent\nPauseWorkoutIntent\nPlayVideoIntent\nPredictableIntent\nProgressReportingIntent\nResumeWorkoutIntent\nSetFocusFilterIntent\nShowInAppSearchResultsIntent\nStartDiveIntent\nStartWorkoutIntent\nSystemIntent\nWidgetConfigurationIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "AudioPlaybackIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/audioplaybackintent",
    "html": "Overview\n\nAdopt this protocol to indicate to the system that your App Intent plays audio. The system can then avoid dialogue or other experiences that might interrupt that audio.\n\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "AudioStartingIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/audiostartingintent",
    "html": "Relationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "VideoCategory | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/videocategory",
    "html": "Topics\nEnumeration Cases\ncase freeform\nThe app supports searching for freeform video content like what may uploaded to social media platforms. This should not be used in cases of highly structured content like movies and episodic tv shows.\ncase movies\nThe app supports searching for structured movie content.\ncase tv\nThe app supports searching for structured tv content including shows, seasons, or episodes.\nInitializers\ninit?(rawValue: String)\nCreates a new instance with the specified raw value.\nInstance Properties\nvar rawValue: String\nThe corresponding value of the raw type.\nType Aliases\ntypealias AllCases\nA type that can represent a collection of all values of this type.\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var allCases: [VideoCategory]\nA collection of all values of this type.\nstatic var caseDisplayRepresentations: [VideoCategory : DisplayRepresentation]\nA dictionary that maps each value to the visual elements that reperesent it.\nstatic var typeDisplayRepresentation: TypeDisplayRepresentation\nA short, localized, human-readable name for the type.\nDefault Implementations\nAppEnum Implementations\nCaseDisplayRepresentable Implementations\nEquatable Implementations\nPersistentlyIdentifiable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nAppEnum\nAppValue\nCaseDisplayRepresentable\nCaseIterable\nCustomLocalizedStringResourceConvertible\nEquatable\nHashable\nPersistentlyIdentifiable\nRawRepresentable\nSendable\nStaticDisplayRepresentable\nTypeDisplayRepresentable"
  },
  {
    "title": "EntityIdentifierConvertible | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entityidentifierconvertible",
    "html": "Overview\n\nEvery entity provides a stable, unique identifier that the framework uses as a concrete reference to the entity while mediating between your app and other parts of the system. To enforce this requirement, the AppEntity protocol inherits the Identifiable protocol.\n\nWherever possible, use String, Int, or UUID for an identifier’s type. If you must use a different data type, use this protocol to extend that type and implement the required support. For example, an app that integrates with the MusicKit framework might use MusicItemID as the type for an entity’s identifier.\n\nextension MusicItemID: EntityIdentifierConvertible {\n    public var entityIdentifierString: String {\n        rawValue\n    }\n    \n    public init?(entityIdentifierString: String) {\n        self = MusicItemID(entityIdentifierString)\n    }\n}\n\n\nImportant\n\nKeep your entityIdentifierString to 512 characters or fewer. Otherwise, the framework truncates the value, and you might not be able to convert the truncated value back to its originating type.\n\nTopics\nGetting the identifier string\nvar entityIdentifierString: String\nThe AppEntity’s identifier value as a String.\n\nRequired\n\nType Methods\nstatic func entityIdentifier(for: String) -> Self?\nIdentifiers should be able to initialize via a String format.\n\nRequired\n\nSee Also\nEntity identity\nprotocol PersistentlyIdentifiable\nDefines a string that uniquely identifies a type. This is useful for maintaining the identity of a type, even when its type name is changed.\nstruct EntityIdentifier\nA type that uniquely identifies a specific instance of an entity."
  },
  {
    "title": "StringSearchScope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchscope",
    "html": "Topics\nEnumeration Cases\ncase freeformVideo\nThe app supports searching for freeform video content like what may uploaded to social media platforms. This should not be used in cases of highly structured content like movies and episodic tv shows.\ncase general\nThe app has a general search in app functionality that it would like exposed to the system. This may opt the app into system wide universal search behavior.\ncase movies\nThe app supports searching for structured movie content.\ncase tv\nThe app supports searching for structured tv content including shows, seasons, or episodes.\nInitializers\ninit?(rawValue: String)\nCreates a new instance with the specified raw value.\nInstance Properties\nvar rawValue: String\nThe corresponding value of the raw type.\nType Aliases\ntypealias AllCases\nA type that can represent a collection of all values of this type.\ntypealias RawValue\nThe raw type that can be used to represent all values of the conforming type.\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nType Properties\nstatic var allCases: [StringSearchScope]\nA collection of all values of this type.\nstatic var caseDisplayRepresentations: [StringSearchScope : DisplayRepresentation]\nA dictionary that maps each value to the visual elements that reperesent it.\nstatic var typeDisplayRepresentation: TypeDisplayRepresentation\nA short, localized, human-readable name for the type.\nDefault Implementations\nAppEnum Implementations\nCaseDisplayRepresentable Implementations\nEquatable Implementations\nPersistentlyIdentifiable Implementations\nRawRepresentable Implementations\nRelationships\nConforms To\nAppEnum\nAppValue\nCaseDisplayRepresentable\nCaseIterable\nCustomLocalizedStringResourceConvertible\nEquatable\nHashable\nPersistentlyIdentifiable\nRawRepresentable\nSendable\nStaticDisplayRepresentable\nTypeDisplayRepresentable"
  },
  {
    "title": "StringSearchCriteria | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/stringsearchcriteria",
    "html": "Topics\nOperators\nstatic func == (StringSearchCriteria, StringSearchCriteria) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nInitializers\ninit(term: String)\nInstance Properties\nvar hashValue: Int\nThe hash value.\nvar term: String\nThe full search term given by the user.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nType Aliases\ntypealias SearchScopes\ntypealias Specification\ntypealias UnwrappedType\ntypealias ValueType\nDefault Implementations\nEquatable Implementations\n_IntentValue Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSearchCriteria\nSendable"
  },
  {
    "title": "PlayVideoIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/playvideointent",
    "html": "Topics\nInstance Properties\nvar term: String\nThe search term requested by the user.\n\nRequired\n\nType Properties\nstatic var supportedCategories: [VideoCategory]\nThe list of video categories that the app supports through this intent.\n\nRequired\n\nDefault Implementations\nAppIntent Implementations\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent"
  },
  {
    "title": "ShowInAppSearchResultsIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/showinappsearchresultsintent",
    "html": "Topics\nAssociated Types\nassociatedtype Criteria : SearchCriteria\n\nRequired\n\nInstance Properties\nvar criteria: Self.Criteria\n\nRequired\n\nType Properties\nstatic var searchScopes: Self.Criteria.SearchScopes\nThe list of scopes that the app supports through this intent.\n\nRequired Default implementation provided.\n\nDefault Implementations\nAppIntent Implementations\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSystemIntent"
  },
  {
    "title": "SearchCriteria | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/searchcriteria",
    "html": "Topics\nAssociated Types\nassociatedtype SearchScopes = Void\n\nRequired\n\nRelationships\nInherits From\nEquatable\nHashable\nSendable\nConforming Types\nStringSearchCriteria"
  },
  {
    "title": "Common types | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/common-data-types",
    "html": "Overview\n\nUse these types to manage specific types of data when you create a parameter for an app intent or a property for an app entity.\n\nTopics\nContacts\nstruct IntentPerson\nInformation that identifies a person participating in an intents-based interaction.\nFiles\nstruct IntentFile\nA type that describes an on-disk file or file-based resource.\nMonetary types\nstruct IntentCurrencyAmount\nAn amount of money to transfer during a financial transaction.\nstruct IntentPaymentMethod\nInformation about a form of payment supported by your app.\nItems and collections\nstruct IntentItem\nA type describing a value returned from a dynamic options provider, plus information about how to display it to users.\nstruct IntentItemCollection\nReturn this object to provide an advanced list of options, optionally divided in sections.\nstruct IntentItemSection\nAn object used to divide dynamic options int sections. IntentItemSections are returned within a IntentItemCollection.\nstruct IntentCollectionSize"
  },
  {
    "title": "Intent discovery | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/intent-discovery",
    "html": "Overview\n\nMake your intents more discoverable to people by donating them to the system. When someone performs an action in your app, donate an intent that corresponds to that action. The system uses the information you provide to predict actions someone might take in the future. For example, if someone requests the weather from your app each morning, the system might proactively offer the corresponding app intent at the same time each day.\n\nDonate intents only when someone uses your app’s interface directly. You don’t need to donate intents associated with Siri or interactions with the Shortcuts app because the system donates them automatically. You can also delete donations when someone cancels or reverses a previously executed action, or when the action is no longer relevant.\n\nTopics\nDonation management\nstruct IntentDonationManager\nA type you use to donate intents to the system, or delete intents when they become irrelevant.\nstruct IntentDonationIdentifier\nAn opaque type that identifies a specific donation to the system.\nstruct IntentDonationMatchingPredicate\nThe match conditions that identify a set of previously donated app intents.\nIntent predictions\nprotocol PredictableIntent\nAn interface that allows the system to suggest the app intent to someone in the future using predictions you provide.\nstruct IntentPrediction\nA prediction for a specific app intent that the system might display to someone when it’s relevant.\nIntent relevancy\nstruct RelevantIntent\nA type that specifies an intent and its relevance to the user.\nclass RelevantIntentManager\nA type that saves relevant intents.\nstruct RelevantContext\nA type that specifies conditions for relevance.\nSee Also\nSystem integration\nApp Shortcuts\nIntegrate your app’s intents and entities with the Shortcuts app, Siri, Spotlight, and the Action button on supported iPhone and Apple Watch models.\nFocus\nAdjust your app’s behavior and filter incoming notifications when the current Focus changes.\nAction button on iPhone and Apple Watch\nEnable people to run your App Shortcuts with the Action button on iPhone or to start your app’s workout or dive sessions using the Action button on Apple Watch."
  },
  {
    "title": "App Shortcuts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/app-shortcuts",
    "html": "Overview\n\nStarting with iOS 15 and macOS 13, you can create a preconfigured App Shortcut that allows people to discover and run your app intent without any configuration. By creating App Shortcuts, you make your app’s functionality instantly available for use in Shortcuts, Spotlight, and Siri from the moment a person installs your app — without any setup in the Shortcuts app or an Add to Siri button. On iPhone models that support the Action button, people can associate your preconfigured App Shortcut on the Action button for quick access of your app’s functionality.\n\nNote\n\nApple may extract anonymized App Shortcuts data such as localized phrases, display representation values, and the title and description of related intents. Machine learning models use this data when training to help improve the App Shortcuts experience.\n\nKey app functionalities that people use to complete a task quickly and that you expose to the system with app intents are great candidates for App Shortcuts. For each high-value app intent, create an App Shortcut that specifies the intended action, the required parameters, the spoken phrases someone uses to run it, and the short title and the image that appear in the Shortcuts app.\n\nTo offer an App Shortcut:\n\nCreate an app intent for a key app functionality as described in Providing your app’s capabilities to system services.\n\nCreate the AppShortcut object for your app intent using the init(intent:phrases:shortTitle:systemImageName:) initializer with phrases people can use to run the app intent and with the metadata that appears in the Shortcuts app.\n\nImplement the AppShortcutsProvider protocol that provides the App Shortcuts you offer to the Shortcuts app.\n\nWith these three steps, you make your app’s functionality more discoverable and allow people to interact with your app in a lightweight way. However, the system displays a default interface for your App Shortcut. To display a custom view for each shortcut, return a SwiftUI view in your app intent’s perform() method.\n\nRelated sessions from WWDC22\n\nSession 10170: Implement App Shortcuts with App Intents and Session 10169: Design App Shortcuts.\n\nOffer App Shortcuts with preconfigured parameters\n\nWith App Shortcuts, you can also preconfigure phrases for app intents that use specific parameters. When you include parameters, people can use one phrase to start an interaction with an app without Siri having to ask for clarification. For example, a meditation app could offer an app intent to start a meditation with the phrase “Start a meditation”. Because the app offers many different meditations, Siri would require an additional clarification which meditation a person wants to start.\n\nWith an App Shortcut, you can supply preconfigured parameters ahead of time that allow a person to skip this clarification step. For example, the meditation app could provide parameterized phrases where each phrase represents a common meditation. A person could then start a meditation with one phrase like “Start a mindfulness meditation.” or “Start a short meditation.”\n\nMake your App Shortcuts even more discoverable\n\nAlthough App Shortcuts don’t require a person to do any configuration in the Shortcuts app or by using the Add to Siri button, you may want to present elements in your app to tell people about an available App Shortcut. You have two options:\n\nSiriTipView and SiriTipUIView present a view that tells a person that an App Shortcut is available.\n\nShortcutsLink allows you to display a link to your App Shortcut.\n\nShortcutsLink is especially convenient if your app displays a list of its available App Shortcuts.\n\nTopics\nApp Shortcut management\nprotocol AppShortcutsProvider\nA type alias for the type that provides an app’s preconfigured shortcuts.\nApp Shortcut definition\nstruct AppShortcut\nA type that defines a preconfigured shortcut for a specific app intent.\nstruct AppShortcutPhrase\nA spoken phrase that causes the system to run the corresponding App Shortcut.\nstruct NegativeAppShortcutPhrase\nThis is the representation of a negative phrase. Each negative phrase will be used to populate an app-level negative training set. This set will contain phrases that will completely bypass your app.\nstruct NegativeAppShortcutPhrases\nThis is a set of negative phrases, which will all be added to the app-level negative training set. All the training data specified here, will be used to completely bypass your app\nproperty list key NSAppIconActionTintColorName\nThe tint color to apply to text and symbols in the App Shortcuts platter.\nproperty list key NSAppIconComplementingColorNames\nThe names of the colors to use for the background of the App Shortcuts platter.\nenum AppShortcutsBuilder\nA result builder that allows you to declaratively describe the App Shortcuts that your app provides.\nenum ShortcutTileColor\nColors of a shortcut tile in the Shortcuts app.\nApp Shortcut options\nstruct AppShortcutOptionsCollection\nprotocol AppShortcutOptionsCollectionProtocol\nprotocol AppShortcutOptionsCollectionSpecification\nenum AppShortcutOptionsCollectionSpecificationBuilder\nApp Shortcut parameter presentation\nstruct AppShortcutParameterPresentation\nDescribes the presentation of an AppShortcut for the provided parameter.\nstruct AppShortcutParameterPresentationSummary\nThis struct represents the summary of an AppShortcutParameterPresentation, which should have the summary string. The summary should include the parameter in the interpolation, e.g. “Call (.$person)”.\nstruct AppShortcutParameterPresentationSummaryString\nstruct AppShortcutParameterPresentationTitle\nThis struct represents the title of an AppShortcutParameterPresentation, which should have both a specific and a generic title. The specific title should include the parameter in the interpolation, e.g. “Call (.$person)”, while the generic title is a simple string that doesn’t have the parameter specified, e.g. “Call Person…”.\nDeprecated\nstruct AppShortcutParameterPresentationTitleString\nDeprecated\nButtons\nclass ShortcutsUIButton\nA button that opens the current app’s page in the Shortcuts app.\nstruct ShortcutsLink\nA link that opens the current app’s page in the Shortcuts app.\nstruct ShortcutsLinkStyle\nThe styles to apply to buttons you use to open your app’s page in the Shortcuts app.\nTip views\nclass SiriTipUIView\nA view that displays the phrase someone uses to invoke an App Shortcut.\nstruct SiriTipView\nA SwiftUI view that displays the phrase someone uses to invoke an App Shortcut.\nstruct SiriTipViewStyle\nThe styles to apply to the tip views you use to display spoken phrases.\nSee Also\nSystem integration\nIntent discovery\nDonate your app’s intents to the system to help it identify trends and predict future behaviors.\nFocus\nAdjust your app’s behavior and filter incoming notifications when the current Focus changes.\nAction button on iPhone and Apple Watch\nEnable people to run your App Shortcuts with the Action button on iPhone or to start your app’s workout or dive sessions using the Action button on Apple Watch."
  },
  {
    "title": "Entity queries | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/entity-queries",
    "html": "Overview\n\nWhen the system needs to retrieve one or more specific instances of an app entity, it asks you to provide a relevant query type. The system uses queries during parameter resolution when the parameter of an intent contains an entity. The system also uses them to resolve information in a different format into one of your app’s entities. For example, it uses them to resolve natural spoken language into one of your app’s entities.\n\nThe system can sometimes determine which entities it needs and provide you with a list of corresponding identifiers. Provide an EntityQuery type to supply the entities for those identifiers. Provide additional query types to perform more advanced searches, such as a search that matches specific properties of the entity.\n\nTopics\nIdentifier-based queries\nprotocol EntityQuery\nAn interface for locating entities using their identifiers.\nprotocol EnumerableEntityQuery\nEnumerableEntityQuery is an alternate way of providing a complete list of entities, simpler and easier to implement than EntityPropertyQuery\nString-based queries\nprotocol EntityStringQuery\nAn interface that locates entities using arbitrary string input.\nProperty-matched queries\nprotocol EntityPropertyQuery\nAn interface for locating entities by matching values against one or more of their properties.\nstruct EntityQueryProperties\nA type that provides the properties to include in a property-matched query.\nclass EntityQueryProperty\nAn object that provides the supported comparators for a queryable property.\nProperty comparators\nSpecify the type of comparison to perform during a property-matched query.\nstruct EntityQuerySortingOptions\nThe potential properties you can use to sort the results of a query.\nstruct EntityQuerySortableByProperty\nDetails about a specific property you use to sort the query results.\nstruct EntityQuerySort\nThe properties to use to sort the results when the query runs.\nSee Also\nData introspection\nApp entities\nMake core types or concepts discoverable to the system by declaring them as app entities."
  },
  {
    "title": "Parameter resolution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/parameter-resolution",
    "html": "Overview\n\nParameters represent input arguments to your app intents and offer additional metadata to the system. When you define an app intent, add the @Parameter property wrapper to any properties you use as input. For example, an app intent that sends a message might include a parameter for the recipient and message string. The system collects and resolves the relevant parameter information before it performs your app intent.\n\nThe following partial example shows how to declare parameters for a custom app intent that allows someone to order soup from your app. Configure the parameter property wrapper with any additional details that help the system infer extra information about your parameter.\n\nstruct OrderSoupIntent: AppIntent {\n    @Parameter(title: \"Soup\")\n    var soup: Soup\n    \n    @Parameter(title: \"Quantity\", inclusiveRange: (1, 10))\n    var quantity: Int\n\n\n    // Other properties\n}\n\nTopics\nIntent parameters\nclass IntentParameter\nA property wrapper that indicates the associated property is an input argument of the app intent.\nclass IntentParameterDependency\nA property wrapper that represents an AppIntent dependency that can be used in an object that conforms to DynamicOptionsProvider.\nstruct IntentParameterContext\nA type that provides information about an associated parameter during value resolution.\nenum InputConnectionBehavior\nInput behaviors for connecting a parameter to the output of a previous app intent.\nParameter choices\nprotocol DynamicOptionsProvider\nAn interface for providing a dynamic list of options for a parameter of your app intent.\nprotocol AppEnum\nAn interface to express that a custom type has a predefined, static set of valid values to display.\nShortcuts support\nprotocol ParameterSummary\nAn interface for defining the visual representation of an app intent’s parameters.\nstruct IntentParameterSummary\nA type that describes the user interface configuration of an app intent’s parameters.\nstruct ParameterSummaryString\nA human-readable string that interpolates parameter key paths to provide user-configurable placeholders in the Shortcuts app.\nstruct ParameterSummaryWhenCondition\nA type that represents a conditional statement in a parameter summary.\nstruct ParameterSummarySwitchCondition\nA type that represents a switch statement in a parameter summary.\nstruct ParameterSummaryCaseCondition\nA type that represents an individual case of a switch statement in a parameter summary.\nstruct ParameterSummaryDefaultCaseCondition\nA type that represents the default case of a switch statement in a parameter summary.\nSee Also\nApp actions\nApp intents\nDefine the custom actions your app exposes to the system, and incorporate support for existing SiriKit intents.\nResolvers\nResolve the parameters of your app intents, and extend the standard resolution types to include your app’s custom types."
  },
  {
    "title": "Resolvers | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/resolvers",
    "html": "Overview\n\nSystem services like Siri and the Shortcuts app produce input that doesn’t always match what your code requires. For example, natural spoken language commands from Siri are strings, but your app intent might require an integer or floating-point value instead. Resolvers let the system translate one type to another automatically.\n\nThe system provides resolvers to convert between integer, floating-point, Boolean, string, and URL types. As needed, the system can chain multiple resolvers together to translate between types for which no single resolver exists. For example, it can translate an integer into a string and then translate the string into a Boolean value. If your app defines custom types, create your own resolvers to translate those types to more recognizable values.\n\nTopics\nInteger resolution\nstruct IntFromDoubleResolver\nA resolver that converts a double into an integer using the specified rounding rule and validates the result is within the parameter’s inclusive range.\nstruct IntFromStringResolver\nA resolver that converts a string into an integer in the specified base and validates the result is within the parameter’s inclusive range.\nstruct IntResolver\nA resolver that validates an integer is within the parameter’s inclusive range.\nFloating-point resolution\nstruct DoubleFromIntResolver\nA resolver that converts an integer into a double and validates the result is within the parameter’s inclusive range.\nstruct DoubleFromStringResolver\nA resolver that converts a string into a double and validates the result is within the parameter’s inclusive range.\nstruct DoubleResolver\nA resolver that validates a double is within the parameter’s inclusive range.\nString resolution\nstruct AttributedStringFromStringResolver\nA resolver that converts a string into an attributed string.\nstruct StringFromDoubleResolver\nA resolver that converts a double into a string.\nstruct StringFromIntResolver\nA resolver that converts one or more integers into one or more strings.\nBoolean resolution\nstruct BoolFromStringResolver\nA resolver that converts a string into a Boolean, optionally using a localized display name.\nURL resolution\nstruct URLFromStringResolver\nA resolver that converts a string into a URL.\nCustom resolution\nprotocol Resolver\nAn interface to convert a value from one type to a different type.\nRange validation\nprotocol RangeCheckingResolver\nAn interface for validating a value is within a parameter’s defined inclusive range.\nprotocol RangeComparableProperty\nSee Also\nApp actions\nApp intents\nDefine the custom actions your app exposes to the system, and incorporate support for existing SiriKit intents.\nParameter resolution\nDefine the required parameters for your app intents and specify how to resolve those parameters at runtime."
  },
  {
    "title": "ProgressReportingIntent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/progressreportingintent",
    "html": "Topics\nInstance Properties\nvar progress: Progress\nA Progress object representing the progress of the intent’s execution\nRelationships\nInherits From\nAppIntent\nPersistentlyIdentifiable\nSendable\nSee Also\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget."
  },
  {
    "title": "Integrating custom data types into your intents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/integrating-custom-types-into-your-intents",
    "html": "Overview\n\nYour app likely defines a number of custom types that model the data the app creates or consumes. For example, a music app might define types that represent artists, albums, and tracks. Because those types are unique to your app, the framework can’t interpret them until you expose them to system services such as Siri and the Shortcuts app. Entities are lightweight types that provide information to the system about your app’s data or concepts relating to that data. An entity identifies and queries the data it represents and describes how the system displays that data onscreen.\n\nCreate an entity for each one of the core types or concepts you want to use as an input parameter for your intents. For more information on creating intents and specifying their input parameters, see Providing your app’s capabilities to system services.\n\nRelated sessions from WWDC22\n\nSession 10032: Dive into App Intents.\n\nDefine an entity that represents your data\n\nTo let an intent use one of your app’s custom data types as a parameter, define a new structure in your app’s target to represent that type. Then update the structure’s definition to adopt the AppEntity protocol. Although custom types can directly conform to the protocol, prefer using distinct entity types that are lightweight and provide only the information the system requires. Distinct types let you separate your entities from the rest of your app’s model and domain code. For example, a music app that defines an Album type might define a corresponding AlbumEntity type.\n\nstruct AlbumEntity: AppEntity {\n\n\n}\n\n\nBy using separate types for your entities, you can adjust the mechanism that provides their data to be more performant. For example, if your app uses CloudKit to manage its data, set the desiredKeys property on your fetch operations to return only the data the entities need instead of fetching entire records.\n\nSpecify a unique identifier for your entity\n\nEvery entity must have a stable, unique identifier. The framework uses that identifier as a concrete reference to your entity while mediating between your app and other parts of the system. For example, when someone selects the value for an entity-based parameter in the shortcut editor, the system asks your app to resolve that parameter using the entity’s identifier. The AppEntity protocol inherits the Identifiable protocol to enforce this prerequisite.\n\nTo add a unique identifier to your entity type, implement the protocol’s id requirement and set its type to one of the three data types optimized for the framework: String, Int, or UUID.\n\nvar id: UUID\n\n\nNote\n\nWherever possible, use one of the three optimized data types for entity identifiers. If you must use a different data type, extend that type and implement the required support. For more information, see EntityIdentifierConvertible.\n\nProvide a visual representation for your entity\n\nAn entity represents a type and the data for that type. In your entity, describe how to display both elements onscreen. For example, the Shortcuts app uses this information to show type details in the Actions Library and to present entity data in the shortcut editor.\n\nAdd the typeDisplayRepresentation variable to your entity’s structure and return a human-readable, localized string that describes the entity. For example, an entity that represents a music album might return a localized version of the word album. The system displays this string whenever it needs to present your entity’s type onscreen.\n\nstatic var typeDisplayRepresentation = TypeDisplayRepresentation(\n    stringLiteral: \"Album”\n)\n\n\nThe required displayRepresentation variable describes how to display an entity’s represented data at runtime. Update your structure to include this variable and return an instance of DisplayRepresentation. Specify a localized title that lets people recognize the data. For example, an AlbumEntity type might return the name of the album.\n\nvar albumName: String\n    \nvar displayRepresentation: DisplayRepresentation {\n    DisplayRepresentation(title: \"\\(albumName)\")\n}\n\n\nCreate a visually rich display of your entity by setting the representation’s subtitle and image variables. For more information, see DisplayRepresentation.\n\nMake your entity searchable\n\nThe framework requires entity types to be searchable so the system can resolve identifiers at runtime and request a list of suggested entities to display onscreen. For example, when a person sets a parameter to a specific entity in the shortcut editor, the system retains that entity’s identifier. Later, when the intent runs, the framework asks your type to materialize the entity from its identifier. The framework then updates the relevant parameter with the materialized entity before invoking the intent’s perform() function.\n\nTo make your entity searchable, define a new structure that adopts the EntityQuery protocol. Place this structure in the app’s target alongside your entity. Add the entities(for:) function, and update the declaration so the element type of the identifiers array matches your entity’s id variable. Use the provided identifiers to materialize and return the relevant entities.\n\nstruct AlbumQuery: EntityQuery {\n    func entities(for identifiers: [UUID]) async throws -> [AlbumEntity] {\n        try await MusicCatalog.shared.albums(for: identifiers)\n            .map { AlbumEntity(id: $0.id, albumName: $0.name) }\n    }\n}\n\n\nTo offer a better user experience, provide a list of suggested entities that the system displays, at appropriate times, to let people quickly make a selection. To provide those entities, add the suggestedEntities() function to your query structure. If your data generates a small number of entities, return them all; otherwise, return a subset of those entities relevant to the current context. For example, a music app with a large catalog might return only a person’s favorite or recently played albums.\n\nfunc suggestedEntities() async throws -> [AlbumEntity] {\n    try await MusicCatalog.shared.favoriteAlbums()\n        .map { AlbumEntity(id: $0.id, albumName: $0.name) }\n}\n\n\nTo let people use arbitrary text to find specific entities, adopt the EntityStringQuery protocol instead. Queries that adopt this protocol cause the system to display a search field above the list of suggested entities. Implement the required entities(matching:) function, and use the provided string to match against your data. For example, a music app might let people search for a specific album by matching against the album name.\n\nfunc entities(matching string: String) async throws -> [AlbumEntity] {\n    try await MusicCatalog.shared.albumsWithNameMatching(string)\n        .map { AlbumEntity(id: $0.id, albumName: $0.name) }\n}\n\n\nAfter you implement your query, update the related entity’s definition to include the defaultQuery variable, and specify an instance of your query type as the value. The system uses this variable at runtime to determine which type it can query on behalf of the related entity.\n\nstatic var defaultQuery = AlbumQuery()\n\nEnumerate your data type’s static values\n\nIf a type has known fixed values at build time, such as a Swift enumeration, expose those types to the system by converting them to app enums, the static equivalent of entities. Because app enum values are constant, the compiler introspects them at build time and optimizes their use. The framework provides both an identity and a query by default, and the system can get type information at runtime without launching the app. For example, a music app might use an app enum to associate an album with an album type such as studio, live, or compilation.\n\nTo convert a common type to an app enum, update its declaration to adopt the AppEnum protocol. There’s no need to create a separate type because the existing type is inherently lightweight and doesn’t store additional data. The framework requires that app enums also conform to RawRepresentable and use String as their storage type, so modify your type to satisfy those requirements. Like with entities, specify a localized description of the type that the system can display onscreen.\n\nenum AlbumType: String, AppEnum {\n    case studio\n    case live\n    case compilation\n    \n    static var typeDisplayName: LocalizedStringResource = \"Album Type\"\n}\n\n\nImportant\n\nDon’t adopt both protocols in the same type; use AppEntity for types that provide dynamic values and AppEnum for types that provide a limited set of static values.\n\nTo provide descriptions for each of your app enum’s values, add the protocol’s required caseDisplayRepresentations variable. Return a dictionary that maps the values to their display representations.\n\nstatic var caseDisplayRepresentations: [AlbumType: DisplayRepresentation] = [\n    .studio: \"Studio\",\n    .live: \"Live\",\n    .compilation: \"Compilation\"\n]\n\n\nThe example above initializes each representation with a string literal. To help people quickly understand the values, also specify a subtitle and an image. For more information, see DisplayRepresentation.\n\nSee Also\nEssentials\nAccelerating app interactions with App Intents\nEnable people to use your app’s features quickly through Siri, Spotlight, and Shortcuts.\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language."
  },
  {
    "title": "Providing your app’s capabilities to system services | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/providing-your-app-s-capabilities-to-system-services",
    "html": "Overview\n\nTo let people leverage your app’s features outside of the app itself, system services like Siri, Spotlight, and the Shortcuts app require your help to provide that functionality. Intents are self-contained types that act as a bridge between your code and those services. Each intent encapsulates a single action that’s specific to your app. An intent can provide the system with any action that makes sense for your app’s audience, such as exporting a person’s transaction history from a budgeting app or converting between two specific units of measurement with a converter app.\n\nEvery intent provides descriptive information about itself that Siri and the Shortcuts app can display or announce. When you build an app that contains intents, the compiler introspects your source and generates data about those intents that Xcode stores in the app bundle. After someone installs your app, the system uses that data to discover the intents and make them available to the system services.\n\nBuild intents that have a narrow focus and do one thing well. People can then invoke them individually, or create automated workflows by combining your intents with actions from other apps in the shortcut editor.\n\nRelated sessions from WWDC22\n\nSession 10032: Dive into App Intents.\n\nCreate an intent that provides a single app action\n\nTo provide a specific app action to system services such as Siri and the Shortcuts app, define a new structure in your app’s target and adopt the AppIntent protocol. For example, a budgeting app might define an intent that lets people export their transaction history. Much like a view in SwiftUI, an intent’s code is the source of truth, and intents don’t require separate editors, definition files, or code generation.\n\nIn the structure, implement the protocol’s title requirement to provide the localized text the Shortcuts app displays in its Action Library and shortcut editor. To include additional context for the intent, implement the optional description requirement to provide localized text that describes the intent’s behavior. The Shortcuts app shows the description in its Action Library.\n\nstruct ExportAllTransactionsIntent: AppIntent {\n    static var title: LocalizedStringResource = \"Export all transactions\"\n    \n    static var description =\n        IntentDescription(\"Exports your transaction history as CSV data.\")\n}\n\n\nFor most intents, the AppIntent protocol is the preferred protocol to adopt when implementing your code. However, depending on your app’s specific behaviors, you might prefer your structure conform to one of the other intent protocols. For example, if your app plays or records audio and you want to offer that same functionality in an intent, adopt AudioStartingIntent instead. This protocol inherits from AppIntent and indicates the audio-related behavior to the system so that, where possible, it avoids dialogue and other potential interruptions. The framework provides a number of other specialized intent protocols. For more information, see App intents.\n\nSpecify the input your intent requires\n\nIf your intent consumes external input, add parameters to the intent to tell the system about that data and whether it’s required or optional. For example, an intent that exports a budgeting app’s transaction history might limit that export by requiring people to specify the earliest transaction date to include. By exposing parameters, you allow people to configure your intents with values unique to their requirements and enable the App Intents framework to mediate with system services to write those values at runtime.\n\nTo define a parameter in your intent, annotate a variable in your intent structure with the @Parameter property wrapper. Provide a localized, capitalized title to identify the parameter in the Shortcuts app.\n\n@Parameter(title: \"Date\")\nvar date: Date?\n\n\nHow you define your parameter variables determines whether the system treats that parameter as required or optional. If you define a variable as a non-optional type, the system knows the parameter is required and, when necessary, requests a value. Conversely, if you define a variable as an optional type, the system assumes the parameter is optional and doesn’t request a value. In this scenario, use the property wrapper’s requestValue(_:) method to pause execution and request a value if the intent can’t proceed otherwise.\n\nguard let date = date else {\n    throw $date.requestValue(\"What date would you like to use?\")\n}\n\n\nYou can use @Parameter with the following data types:\n\nPrimitives such as Bool, Int, Double, String, Duration, Date, Decimal, Measurement, and URL.\n\nCollections such as Array and Set. The collection’s elements must be of a type that’s compatible with IntentParameter.\n\nFramework specific types such as IntentPerson and IntentFile. For additional types, see Common types.\n\nEnumerable types that conform to the AppEnum protocol and have known static values at build time.\n\nCustom types that adopt the AppEntity protocol, instances of which the system can request at runtime.\n\nIf you want to restrict a parameter’s value to one of a specific set of values, specify an options provider as part of the property wrapper’s declaration. An options provider is a type you implement that conforms to the DynamicOptionsProvider protocol and provides a set of permitted values at runtime. The system presents those values as a list and prompts the person to select one when it needs to resolve that parameter. For example, the budgeting app’s intent might allow people to further limit the export of transactions to only those for a specific merchant.\n\n@Parameter(title: \"Merchant\", optionsProvider: MerchantOptionsProvider())\nvar merchant: String\n    \nprivate struct MerchantOptionsProvider: DynamicOptionsProvider {\n    func results() async throws -> [String] {\n        try await BudgetManager.shared.allMerchants\n    }\n}\n\n\nYou can configure a parameter with additional options such as enforcing an inclusive range for number types, or specifying the capitalization style and keyboard mode for string types. For more information, see IntentParameter.\n\nProvide an interactive summary for your intent\n\nA parameter summary is a visual, textual outline of your intent that the Shortcuts app displays in the shortcut editor. The summary can include placeholders that people interact with to choose the values for the intent’s parameters before they run the shortcut. Even if your intent doesn’t expose any parameters, providing a summary is an opportunity to present more information about your intent in addition to its title.\n\nTo add a parameter summary to your intent, implement the protocol’s parameterSummary requirement and use the provided result builder to declaratively build the summary. Write the content using localized natural language and, where applicable, substitute words that represent parameters with the key paths to those parameters.\n\nstatic var parameterSummary: some ParameterSummary {\n    Summary(\"Export all transactions after \\(\\.$date) for \\(\\.$merchant).\")\n}\n\n\nThe shortcut editor substitutes each key path with the corresponding parameter’s title and allows the value to be set by tapping on it. The editor uses the parameter’s type to determine which input controls to display. For example, the editor recognizes that the above merchant parameter uses an options provider for its permitted values. The editor asks the provider for those values and displays them in a list.\n\nParameter summaries can include conditional statements such as AppIntent.When and AppIntent.Switch that let the summary update itself in response to already chosen values. For more information, see Parameter resolution.\n\nPerform the action for your intent\n\nTo provide your intent’s functionality, implement the protocol’s perform() function requirement. The system invokes this function after it resolves any required parameters, meaning those parameters are safe for your code to access from the function’s body.\n\nYour implementation must complete the necessary work and return a result to the system. A result may include, among other things, a value that a shortcut can use in subsequent connected actions, dialogue to display or announce, and a SwiftUI snippet view. If it doesn’t make sense for your intent to return a concrete result, return .result() to tell the system the intent is complete. For example, an intent that exports a budgeting app’s transaction history might return CSV-formatted text as its result, which people can then use as input for a shortcut action that writes text to a file.\n\nfunc perform() async throws -> some IntentResult & ReturnsValue {\n    let transactions = try await BudgetManager.shared\n        .prepareExportOfTransactions(after: date, for: merchant)\n        \n    return .result(value: transactions)\n}\n\n\nBy default, the system launches your app in a limited mode in the background and executes the intent’s perform() function on an arbitrary queue. To override this behavior and launch the app in the foreground, set the intent’s openAppWhenRun variable to true. If your intent manipulates the app’s user interface, annotate perform() with @MainActor to make sure the function executes on the main queue.\n\nVerify the behavior of your intent in Simulator or on-device\n\nDuring development, validate that your intents behave as you expect by testing them in Simulator or on-device. If you’re adding intents to a macOS app, build and run the app. For other platforms, select the relevant simulator or connected device and then build and run. After your app launches, follow these steps:\n\nLaunch the Shortcuts app.\n\nTap or click the New Shortcut (+) button to create a shortcut.\n\nChoose Apps in the Action Library’s segmented control.\n\nTap or click your app’s icon.\n\nSelect the action to test.\n\nFor parameterized intents, use the summary to set the parameter values.\n\nTap or click the Run button.\n\nSet a breakpoint at the top of your perform() function to confirm your implementation is working. The debugger pauses execution immediately after you run the shortcut, allowing you to step through the code and inspect the intent’s parameters to verify they have the values they require.\n\nSee Also\nEssentials\nAccelerating app interactions with App Intents\nEnable people to use your app’s features quickly through Siri, Spotlight, and Shortcuts.\nIntegrating custom data types into your intents\nProvide the system with information about the types your app uses to model its data so that your intents can use those types as parameters."
  },
  {
    "title": "Accelerating app interactions with App Intents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/acceleratingappinteractionswithappintents",
    "html": "Overview\n\nThe app in this sample code project provides information on trails, allowing people to check on conditions, search for trails that allow activities such as skiing, and record which trails they visited. Expressing these features as intents allows people to use them through Siri, Spotlight search, and Shortcuts. Additionally, the project integrates workout tracking on Apple Watch, and shows how to implement Action button support on Apple Watch Ultra. The intents also appear as actions in the Shortcuts app. People can combine these actions to build entirely new features in Shortcuts because the intents output custom data types that match each other’s inputs.\n\nIdentify common actions\n\nThe sample app includes two key features that people are likely to use frequently: looking up information on a trail, and recording activity on a trail. To make it easy for people to use these features without even opening the app, the sample code creates intents around these features, for use with Siri, Spotlight search, and Shortcuts. For example, if someone has saved their favorite trails in the app and wants to get the current conditions for those trails, the app implements the OpenFavorites structure, which conforms to AppIntent. When someone runs this intent, the app opens and navigates to the Favorites view.\n\n/// Every intent needs to include metadata, such as a localized title. The title of the intent is displayed throughout the system.\nstatic var title: LocalizedStringResource = \"Open Favorite Trails\"\n\n\n/// An intent can optionally provide a localized description that the Shortcuts app displays.\nstatic var description = IntentDescription(\"Opens the app and goes to your favorite trails.\")\n\n\n/// Tell the system to bring the app to the foreground when the intent runs.\nstatic var openAppWhenRun: Bool = true\n\n\n/**\n When the system runs the intent, it calls `perform()`.\n \n Intents run on an arbitrary queue. Intents that manipulate UI need to annotate `perform()` with `@MainActor`\n so that the UI operations run on the main actor.\n */\n@MainActor\nfunc perform() async throws -> some IntentResult {\n    navigationModel.selectedCollection = trailManager.favoritesCollection\n    \n    /// Return an empty result, indicating that the intent is complete.\n    return .result()\n}\n\n\nView in Source\n\nNote\n\nDownload and open the Xcode project to enable View in Source links to route to their corresponding source files.\n\nCreate App Shortcuts\n\nPeople may ask Siri to show their Favorite trails, or they may find this action suggested to them through a Spotlight search. To support both of these options, the app implements an AppShortcut using OpenFavorites. An App Shortcut combines an intent with phrases people may use with Siri to perform the action, and additional metadata such as an icon, then uses this information in a Spotlight search. People can invoke the App Shortcut with a suggested phrase or other similiar words, because the system uses a semantic similarity index to help identify people’s requests — automatically matching phrases that are similar but not identical.\n\nAppShortcut(intent: OpenFavorites(), phrases: [\n    \"Open Favorites in \\(.applicationName)\",\n    \"Show my favorite \\(.applicationName)\"\n],\nshortTitle: \"Open Favorites\",\nsystemImageName: \"star.circle\")\n\n\nView in Source\n\nTo register the App Shortcut with the system, the app calls updateAppShortcutParameters on its AppShortcutsProvider during the init of the App structure.\n\nTo aid the system’s presentation of the App Shortcut, the sample app includes a short title and an SF Symbol name that represent the App Shortcut. Further, the sample app’s Info.plist declares NSAppIconActionTintColorName with the app’s primary color and two contrasting colors in an array for the key NSAppIconComplementingColorNames. The system uses these colors when displaying the App Shortcuts, such as in Spotlight or the Shortcuts app. The color names specified as values for these keys come from the app’s asset catalog.\n\nAfter registering an App Shortcut with the system, people can begin using the intent through Siri without any further configuration. To teach people a phrase to use the intent, the app provides a SiriTipView in the associated view.\n\nSiriTipView(intent: OpenFavorites(), isVisible: $displaySiriTip)\n\n\nView in Source\n\nThe SiriTipView takes a binding to a visibility Boolean so that the app hides the view if an individual has chosen to dismiss it.\n\nAside from intents for people to quickly view their favorite trails and track their workouts, this sample app provides extensive search capabilities through intents. The app doesn’t provide App Shortcuts for intents that people use less commonly. Provide App Shortcuts for only the most common actions in an app — usually between two and five intents, and not more than ten.\n\nDesign custom responses\n\nEven though the app doesn’t provide GetTrailInfo as an App Shortcut, people may still interact with it through Siri, such as including this intent in a shortcut they created in the Shortcuts app. For a good user experience, this intent provides its result with a visual response using a custom UI snippet, and as dialog for Siri to communicate the same information. It does so by conforming the return type of the intent’s `perform` function to both ProvidesDialog and ShowsSnippetView.\n\nfunc perform() async throws -> some IntentResult & ReturnsValue<TrailEntity> & ProvidesDialog & ShowsSnippetView {\n\n\nView in Source\n\nDesign for both visual experiences and voice-only experiences, as people may be in a context where they cannot see information in custom UI (such as when the intent runs on HomePod) or displaying the custom UI may be inappropriate (such as when the intent runs through CarPlay). This implementation provides a custom UI with shorter supporting dialog to use when the custom UI is visible, and different dialog containing additional information if the system can’t show the snippet. Use a transparent background for custom UI, because the system will display it over a translucent background material. Avoid opaque backgrounds for the best results.\n\nlet snippet = TrailInfoView(trail: trailData, includeConditions: true)\n\n\n/**\n This intent displays a custom view that includes the trail conditions as part of the view. The dialog includes the trail conditions when\n the system can only read the response, but not display it. When the system can display the response, the dialog omits the trail\n conditions.\n */\nlet dialog = IntentDialog(full: \"The latest conditions reported for \\(trail.name) indicate: \\(trail.currentConditions).\",\n                          supporting: \"Here's the latest information on trail conditions.\")\n\n\nreturn .result(value: trail, dialog: dialog, view: snippet)\n\n\nView in Source\n\nThis sample app provides custom dialog throughout its intents. SuggestTrails validates the parameters that people provide and uses custom dialog to prompt them for additional information. For example, if the provided location parameter is not specific enough, the intent prompts the individual to choose from a list of locations related to their input. The app does this by throwing needsDisambiguationError with a value for the dialog parameter.\n\nlet dialog = IntentDialog(\"Multiple locations match \\(location). Did you mean one of these locations?\")\nlet disambiguationList = suggestedMatches.sorted(using: KeyPathComparator(\\.self, comparator: .localizedStandard))\nthrow $location.needsDisambiguationError(among: disambiguationList, dialog: dialog)\n\n\nView in Source\n\nAdd parameters to an intent\n\nAn app intent can optionally require certain parameters to complete its action. For example, the GetTrailInfo intent declares a trail parameter by decorating the property with the IntentParameter property wrapper.\n\n@Parameter(title: \"Trail\", description: \"The trail to get information on.\")\nvar trail: TrailEntity\n\n\nView in Source\n\nThe system supports parameters using common Foundation types, such as String, and also those for custom data types in an app. This app makes its trail data available in an app intent through the TrailEntity type, which is a structure conforming to the AppEntity protocol.\n\nTo allow the system to query the app for TrailEntity data, the entity implements the Identifiable protocol with values that are stable and persistent. TrailEntity declares `defaultQuery`, which the system uses to perform queries to receive TrailEntity structures.\n\nstatic var defaultQuery = TrailEntityQuery()\n\n\nView in Source\n\nAn AppEntity makes its properties available to the system by decorating it with the EntityProperty property wrapper.\n\n@Property(title: \"Trail Name\")\nvar name: String\n\n\nView in Source\n\nProvide your app’s data through queries\n\nThe system queries the app for its trail data through TrailEntityQuery, a type conforming to EntityQuery. For example, if someone saves a specific value as the trail parameter for GetTrailInfo, the system locates the TrailEntity by using the defaultQuery and requesting the entity by its ID from the Identifable protocol. All types conforming to EntityQuery must implement this method.\n\nfunc entities(for identifiers: [TrailEntity.ID]) async throws -> [TrailEntity] {\n    Logger.entityQueryLogging.debug(\"[TrailEntityQuery] Query for IDs \\(identifiers)\")\n    \n    return trailManager.trails(with: identifiers)\n            .map { TrailEntity(trail: $0) }\n}\n\n\nView in Source\n\nThe app also provides a list of common trail suggestions by implementing the optional suggestedEntities function.\n\nfunc suggestedEntities() async throws -> [TrailEntity] {\n    Logger.entityQueryLogging.debug(\"[TrailEntityQuery] Request for suggested entities\")\n    \n    return trailManager.trails(with: trailManager.favoritesCollection.members)\n            .map { TrailEntity(trail: $0) }\n}\n\n\nView in Source\n\nThere are several subprotocols to EntityQuery, each of which enables different types of functionality. This sample app implements all of them for demonstrative purposes, but a real app can choose which ones meet its needs.\n\nThe app implements EntityStringQuery to help people configure GetTrailInfo. When people configure this intent in the Shortcuts app, they first see the list of trails from suggestedEntities. The Shortcuts app provides a search field, enabling people to search for results that appear in the list of suggested trails. The app provides results for the search term by implementing entities(matching:).\n\nfunc entities(matching string: String) async throws -> [TrailEntity] {\n    Logger.entityQueryLogging.debug(\"[TrailEntityQuery] String query for term \\(string)\")\n    \n    return trailManager.trails { trail in\n        trail.name.localizedCaseInsensitiveContains(string)\n    }.map { TrailEntity(trail: $0) }\n}\n\n\nView in Source\n\nEnable Find intents\n\nApps implementing either the EnumerableEntityQuery or EntityPropertyQuery protocols automatically add a Find intent in the Shortcuts app. These intents enable people to build powerful new features for themselves in Shortcuts, powered by the app’s data — without requiring the app to implement that feature itself. For example, this sample app focuses its UI on providing trail information, but people could also use its data to plan activities for a vacation. The app doesn’t need to build vacation-planning features because it implements these entity query protocols to provide an interface to the data through a Shortcut.\n\nThe sample app groups trails into collections based on geographic region, and implements the collections as a type (called TrailCollection) that conforms to AppEntity. The list of geographic regions is small, and a TrailCollection is a simple structure, with the collection name and a list of trail IDs that require little memory. To make this information available through a Find intent, the app implements FeaturedCollectionEntityQuery with conformance to EnumerableEntityQuery, which is optimized for data that has a fixed set of values and doesn’t require large amount of memory. The app implements allEntities to return all of the values, which people can filter by name in the Shortcuts app.\n\nfunc allEntities() async throws -> [TrailCollection] {\n    Logger.entityQueryLogging.debug(\"[FeaturedCollectionEntityQuery] Request for all entities\")\n    return trailManager.featuredTrailCollections\n}\n\n\nView in Source\n\nThe app also implements EntityPropertyQuery for TrailEntity. This query type is intended for large data sets that may have large numbers of entities, or entities that have higher memory consumption. Implementing this query adds a Find intent to the Shortcuts app, enabling people to run predicate searches on entity properties. For example, someone planning a vacation around seeing waterfalls that are easily accessible could configure the Find intent with criteria for trails containing “Fall” in the trail name, and a trail distance of less than 1 kilometer. An implementation of EntityPropertyQuery includes several required functions and properties. TrailEntityQuery+PropertyQuery.swift contains the complete implementation.\n\nDesigning great intents for integration with the system means both that the intents work as standalone intents with their parameters, and also that they work together with other intents the app provides, or with other apps people may have installed. People can create shortcuts that take the output of one intent the app provides and use it as input to another intent this app provides, like the following examples:\n\nSuggestTrails can take the output of the Find intent for trail collections and use it as input.\n\nThe Find intent for trails can use the output of SuggestTrails to further refine the results.\n\nThe Find intent for trails can also work alone, searching for matching trail properties from all of the trail data the app provides.\n\nSee Also\nEssentials\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nIntegrating custom data types into your intents\nProvide the system with information about the types your app uses to model its data so that your intents can use those types as parameters."
  },
  {
    "title": "Action button on iPhone and Apple Watch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/actionbutton",
    "html": "Overview\n\nOn supported iPhone models, people can choose a single App Shortcut to perform an app’s action when they press the Action button by selecting an App Shortcut in Settings > Action button. To give users quick access to your app’s functionality, create App Shortcuts for your high-value app intents using the init(intent:phrases:shortTitle:systemImageName:) or init(intent:phrases:shortTitle:systemImageName:parameterPresentation:) initializer. For additional information, see App Shortcuts.\n\nOn supported Apple Watch models, people can choose to start workout or dive session using the Action button in Settings > Action Button. To add your app to the list of available workout or dive apps, implement an App Intent that adopts the StartWorkoutIntent or StartDiveIntent protocol. For more information, see Responding to the Action button on Apple Watch Ultra.\n\nFor design guidance, see Human Interface Guidelines > App Shortcuts and Human Interface Guidelines > Action button.\n\nTopics\nResponding to the Action button\nResponding to the Action button on Apple Watch Ultra\nUse App Intents to register actions for your app.\nprotocol StartWorkoutIntent\nAn App Intent for starting a workout.\nprotocol PauseWorkoutIntent\nAn App Intent that lets someone pause your app’s current workout session.\nprotocol ResumeWorkoutIntent\nAn App Intent that lets someone resume your app’s paused workout session.\nprotocol StartDiveIntent\nAn App Intent that lets people start a dive session when they press the Action button on Apple Watch Ultra.\nstruct ConfirmationActionName\nSee Also\nSystem integration\nApp Shortcuts\nIntegrate your app’s intents and entities with the Shortcuts app, Siri, Spotlight, and the Action button on supported iPhone and Apple Watch models.\nIntent discovery\nDonate your app’s intents to the system to help it identify trends and predict future behaviors.\nFocus\nAdjust your app’s behavior and filter incoming notifications when the current Focus changes."
  },
  {
    "title": "Focus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/focus",
    "html": "Overview\n\nPeople use Focus on macOS, iOS, and iPadOS to minimize distractions. For example, someone might use a Work Focus to hide notifications from personal email or message accounts. When someone engages a Focus, the system executes your app’s custom SetFocusFilterIntent. Define a version of this intent to update your app’s configuration and filter incoming notifications.\n\nRelated sessions from WWDC22\n\nSession 10121: Meet Focus filters.\n\nTopics\nFocus filters\nprotocol SetFocusFilterIntent\nAn interface for providing an app intent that you use to adapt your app’s behavior when Focus changes.\nDefining your app’s Focus filter\nCustomize your app’s behavior to reflect the device’s current Focus.\nstruct FocusFilterAppContext\nA type that contains app-specific contextual information for a particular Focus, such as the notification filter criteria to apply.\nstruct FocusFilterSuggestionContext\nA type you use to suggest app configurations for a given Focus.\nErrors\nenum SetFocusFilterIntentError\nErrors that can occur when you try to retrieve the current Focus configuration settings.\nSee Also\nSystem integration\nApp Shortcuts\nIntegrate your app’s intents and entities with the Shortcuts app, Siri, Spotlight, and the Action button on supported iPhone and Apple Watch models.\nIntent discovery\nDonate your app’s intents to the system to help it identify trends and predict future behaviors.\nAction button on iPhone and Apple Watch\nEnable people to run your App Shortcuts with the Action button on iPhone or to start your app’s workout or dive sessions using the Action button on Apple Watch."
  },
  {
    "title": "App intents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/appintents/app-intents",
    "html": "Overview\n\nUse app intents to express your app’s capabilities to the system. An app intent includes the code you need to perform an action, and describes the data you require from the system. The system exposes your actions directly from the Shortcuts app and indirectly through natural language commands spoken to Siri.\n\nTo define an action, create a type that adopts the AppIntent protocol, or a related protocol that provides the specific behavior you need. Annotate any key properties with the @Parameter property wrapper to let the system know you need the associated information to perform the action.\n\nTopics\nActions\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nprotocol AppIntent\nAn interface for providing an app-specific capability that people invoke from system services such as Siri and the Shortcuts app.\nprotocol AudioStartingIntent\nAn interface for providing an app intent that records or plays audio when it executes.\nprotocol AudioPlaybackIntent\nAn App Intent that plays, pauses, or otherwise modifies audio playback state when it executes.\nprotocol DeleteIntent\nDelete the associated entity(s).\nprotocol DeprecatedAppIntent\nprotocol ForegroundContinuableIntent\nThe ForegroundContinuableIntent protocol represents intents which begin their work with the app in the background but may request to continue in the foreground.\nprotocol LiveActivityStartingIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol LiveActivityIntent\nThe LiveActivityStartingIntent protocol represents AppIntent types which are expected to start, pause or otherwise modify a Live Activity in their perform method.\nprotocol OpenIntent\nOpen the associated item.\nprotocol OpensIntent\nAn IntentResult that provides an AppIntent to show its result in your app\nprotocol ProgressReportingIntent\nAn intent that reports progress to the system during its execution\nprotocol SystemIntent\nDesignates intent types provided by App Intents.\nprotocol WidgetConfigurationIntent\nAn interface for configuring a WidgetKit widget.\nSiriKit intent migration\nprotocol CustomIntentMigratedAppIntent\nAn interface for replacing a custom SiriKit intent that allows existing shortcuts and donations to continue working.\nDependency management\nclass AppDependencyManager\nclass AppDependency\nA property wrapper that resolves a registered dependency at runtime.\nSupplementary content\nprotocol AppIntentsPackage\nstruct IntentDescription\nThe human-readable description and metadata for an app intent.\nstruct IntentDialog\nThe text you want the system to display, or speak, when requesting a value, asking for disambiguation, or confirming an action.\nstruct IntentDeprecation\nclass IntentProjection\nAn AppIntent projection that returns non-optional values for parameters listed in the @IntentParameterDependency property wrapper.\nstruct IntentSystemContext\nA type describing the system context for the current AppIntent, which carries information provided by the system that can be accessed during the perform of an AppIntent\nResults\nprotocol IntentResult\nA type that contains the result of performing an action, and includes optional information to deliver back to the initiator.\nstruct IntentResultContainer\nAn object that represents the output of a completed intent.\nprotocol ProvidesDialog\nAn IntentResult that provides IntentDialog\nprotocol ReturnsValue\nAn IntentResult that returns a value\nprotocol ShowsSnippetView\nAn IntentResult that provides a SwiftUI View to show the result of your AppIntent\nprotocol ResultsCollection\nA protocol representing a collection of returned items with support for sectioning.\nExtensions\nprotocol AppIntentsExtension\nAn interface for managing an extension’s configuration.\nSee Also\nApp actions\nParameter resolution\nDefine the required parameters for your app intents and specify how to resolve those parameters at runtime.\nResolvers\nResolve the parameters of your app intents, and extend the standard resolution types to include your app’s custom types."
  },
  {
    "title": "App Intents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/AppIntents",
    "html": "Overview\n\nThe App Intents framework offers a programmatic way to make your app’s content and functionality available to system services like Siri and the Shortcuts app. The programmatic approach lets you expose any of your app’s capabilities, and not just ones that fall into specific categories. You also use this programmatic approach to supply metadata, UI information, activation phrases, and other information the system needs to initiate your app’s actions.\n\nDefine the actions your app supports using one or more app intents, which encapsulate the code to execute the action and any parameters required to achieve success. You can also define portions of your app’s data model as app entities, which the system discovers at runtime using queries you provide. Integrate support for app intents and app entities directly into your existing data structures using the protocols of this framework.\n\nAdd support for App Shortcuts to your data types to give users automatic access to your app’s functionality in Spotlight, Siri, and the Shortcuts app. Additionally, offer a custom interface that accompanies your intents and entities in the Shortcuts app and customize the phrases that people speak to activate your intents and entities. Including custom interface options and phrases makes it easier for people to discover your app’s functionality. On supported iPhone models, App Shortcuts allow people easy access to your app’s functionality from the Action button. For more information, see App Shortcuts.\n\nFor design guidance, see Human Interface Guidelines > App Shortcuts and Human Interface Guidelines > Action Button.\n\nTopics\nEssentials\nSoup Chef with App Intents: Migrating custom intents\nIntegrating App Intents to provide your appʼs actions to Siri and Shortcuts.\nAccelerating app interactions with App Intents\nEnable people to use your app’s features quickly through Siri, Spotlight, and Shortcuts.\nProviding your app’s capabilities to system services\nBuild intents that let people automate your app’s features using shortcuts or perform tasks in your app using spoken natural language.\nIntegrating custom data types into your intents\nProvide the system with information about the types your app uses to model its data so that your intents can use those types as parameters.\nApp actions\nApp intents\nDefine the custom actions your app exposes to the system, and incorporate support for existing SiriKit intents.\nParameter resolution\nDefine the required parameters for your app intents and specify how to resolve those parameters at runtime.\nResolvers\nResolve the parameters of your app intents, and extend the standard resolution types to include your app’s custom types.\nData introspection\nApp entities\nMake core types or concepts discoverable to the system by declaring them as app entities.\nEntity queries\nHelp the system find the entities your app defines and use them to resolve parameters.\nSystem integration\nApp Shortcuts\nIntegrate your app’s intents and entities with the Shortcuts app, Siri, Spotlight, and the Action button on supported iPhone and Apple Watch models.\nIntent discovery\nDonate your app’s intents to the system to help it identify trends and predict future behaviors.\nFocus\nAdjust your app’s behavior and filter incoming notifications when the current Focus changes.\nAction button on iPhone and Apple Watch\nEnable people to run your App Shortcuts with the Action button on iPhone or to start your app’s workout or dive sessions using the Action button on Apple Watch.\nUtility types\nCommon types\nSpecify common types that your app supports, including currencies, files, and contacts.\nErrors\nstruct AppIntentError\nErrors that can occur when you operate on app intents.\nProtocols\nprotocol PlayVideoIntent\nThe PlayVideoIntent protocol represents intents which will perform a search for videos related to the specified search term and then begin playback of the content.\nprotocol SearchCriteria\nprotocol ShowInAppSearchResultsIntent\nThe ShowInAppSearchResultsIntent protocol represents intents which will navigate the user to search results for the specified Criteria. This intent can be implemented multiple times for different SearchCriteria conformances.\nStructures\nstruct StringSearchCriteria\nA SearchCriteria implementation representing a simple string based search request.\nstruct StringSearchCriteriaFromStringResolverSpecificification\nEnumerations\nenum StringSearchScope\nenum VideoCategory"
  }
]