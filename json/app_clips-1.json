[
  {
    "title": "init(_:userInfo:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3727386-init",
    "html": "Parameters\ncode\n\nAn error code.\n\nuserInfo\n\nA dictionary of additional information.\n\nSee Also\nProtocol Support\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func != (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nstatic func == (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "APActivationPayloadError.Code.disallowed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/code/disallowed",
    "html": "See Also\nEnumeration Values\ncase doesNotMatch\nThe provided URL doesn’t match the registered App Clip URL."
  },
  {
    "title": "APActivationPayloadError.Code.doesNotMatch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/code/doesnotmatch",
    "html": "See Also\nEnumeration Values\ncase disallowed\nThe user denied location access, or the source of the App Clip invocation wasn’t from an NFC tag or visual code."
  },
  {
    "title": "code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3727383-code",
    "html": "See Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates an App Clip activation payload error code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func != (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nstatic func == (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3580362",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.\n\nSee Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates an App Clip activation payload error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func == (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3727382",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nReturn Value\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates an App Clip activation payload error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func != (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are not equal."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3727384-hash",
    "html": "Parameters\nhasher\n\nA hasher the method uses to combine the components of the error.\n\nSee Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates an App Clip activation payload error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nstatic func != (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nstatic func == (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "userInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3727387-userinfo",
    "html": "See Also\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates an App Clip activation payload error code.\nvar code: Code\nAn integer value that represents the code.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func != (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nstatic func == (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3580364-errorcode",
    "html": "See Also\nGetting Information About the Error\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error.\nstatic var errorDomain: String\nThe domain for all errors related to the activation payload of an App Clip."
  },
  {
    "title": "APActivationPayloadError.Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/code",
    "html": "Topics\nEnumeration Values\ncase doesNotMatch\nThe provided URL doesn’t match the registered App Clip URL.\ncase disallowed\nThe user denied location access, or the source of the App Clip invocation wasn’t from an NFC tag or visual code.\nRelationships\nConforms To\nSendable\nSee Also\nError Codes\nstatic var doesNotMatch: APActivationPayloadError.Code\nThe provided URL doesn’t match the invocation URL you registered for the App Clip.\nstatic var disallowed: APActivationPayloadError.Code\nThe user denied location access, or the source of the App Clip invocation wasn’t an NFC tag or visual code."
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3580366-erroruserinfo",
    "html": "See Also\nGetting Information About the Error\nvar errorCode: Int\nThe activation payload error’s code.\nvar localizedDescription: String\nA localized description of the error.\nstatic var errorDomain: String\nThe domain for all errors related to the activation payload of an App Clip."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3580367-localizeddescription",
    "html": "See Also\nGetting Information About the Error\nvar errorCode: Int\nThe activation payload error’s code.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nstatic var errorDomain: String\nThe domain for all errors related to the activation payload of an App Clip."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3580365-errordomain",
    "html": "See Also\nGetting Information About the Error\nvar errorCode: Int\nThe activation payload error’s code.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error."
  },
  {
    "title": "disallowed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror/3585118-disallowed",
    "html": "See Also\nError Codes\nstatic var doesNotMatch: APActivationPayloadError.Code\nThe provided URL doesn’t match the invocation URL you registered for the App Clip.\nenum APActivationPayloadError.Code\nError codes that an App Clip activation payload returns."
  },
  {
    "title": "APActivationPayloadError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderror",
    "html": "Topics\nGetting Information About the Error\nvar errorCode: Int\nThe activation payload error’s code.\nvar errorUserInfo: [String : Any]\nA dictionary that contains additional information about the error.\nvar localizedDescription: String\nA localized description of the error.\nstatic var errorDomain: String\nThe domain for all errors related to the activation payload of an App Clip.\nError Codes\nstatic var doesNotMatch: APActivationPayloadError.Code\nThe provided URL doesn’t match the invocation URL you registered for the App Clip.\nstatic var disallowed: APActivationPayloadError.Code\nThe user denied location access, or the source of the App Clip invocation wasn’t an NFC tag or visual code.\nenum APActivationPayloadError.Code\nError codes that an App Clip activation payload returns.\nProtocol Support\ninit(Code, userInfo: [String : Any])\nCreates an App Clip activation payload error code.\nvar code: Code\nAn integer value that represents the code.\nvar userInfo: [String : Any]\nA dictionary of additional information.\nvar hashValue: Int\nThe hashed value of the error.\nfunc hash(into: inout Hasher)\nHashes the essential components of the error by feeding them into a hasher.\nstatic func != (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are not equal.\nstatic func == (APActivationPayloadError, APActivationPayloadError) -> Bool\nReturns a Boolean value that indicates whether two values are equal.\nSee Also\nError Information\nlet APActivationPayloadErrorDomain: String\nA string that identifies the activation payload’s error domain."
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayload/3580308-url",
    "html": "Discussion\n\nUse url to retrieve data that’s passed to an App Clip on launch, and use the data to update the user interface of the App Clip.\n\nThe value of url is the same as the NSUserActivity webpageURL property. If you don’t need to verify the user’s location when they launch your App Clip, use webpageURL instead.\n\nFor more information, see Responding to invocations."
  },
  {
    "title": "APActivationPayloadErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayloaderrordomain",
    "html": "See Also\nError Information\nstruct APActivationPayloadError\nAn error that an App Clip activation payload returns."
  },
  {
    "title": "Encoding a URL in an App Clip Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/creating_app_clip_codes/encoding_a_url_in_an_app_clip_code",
    "html": "Overview\n\nCreating an App Clip Code involves the following key tasks:\n\nChoosing invocations to support\n\nChoosing invocation URLs to use in your App Clip Code\n\nSetting up advanced App Clip experiences\n\nAlthough App Clip Codes are a great way to launch your App Clip, an App Clip Code can only contain a limited amount of information in its visual code or NFC tag. At the same time, it’s important you choose invocation URLs with additional parameters or attributes that lead to the best possible launch experience for users. This additional information could make your invocation URL too long to encode.\n\nWhen you create an App Clip Code, you need to find the best tradeoff between the limited capacity to store information in the App Clip Code and the need to encode more information. Therefore, choosing the right URLs to launch your App Clip from an App Clip Code is extremely important.\n\nReview App Clip experiences and invocation URLs\n\nUsers launch your App Clip with an invocation; for example, by tapping a link in the Messages app, by scanning a QR code, or by scanning an App Clip Code. Configuring your App Clip’s launch experience requires you to:\n\nAssociate your App Clip with your website to enable the system to verify your App Clip upon launch. For more information, see Associating your App Clip with your website.\n\nCreate a default App Clip experience and additional advanced App Clip experiences that allow you to register an invocation URL that launches your App Clip. To support invocations from App Clip Codes, you need to create at least one advanced App Clip experience. For more information, see Configuring the launch experience of your App Clip.\n\nFor example, you can create a default App Clip experience that uses https://example.com as its invocation URL, and one advanced App Clip experience. The advanced experience’s registered invocation URL might be https://appclip.example.com and take advantage of prefix matching.\n\nYou can use the advanced App Clip experience to support invocations from QR codes, NFC tags, and App Clip Codes. Those invocations use https://appclip.example.com as their URL prefix and encode additional information using URL path components or queries. For example, you can encode https://appclip.example.com/shop?p=123&p1=ab in an App Clip Code.\n\nChoose a valid invocation URL\n\nIn general, the invocation URL encoded in an App Clip Code follows the same pattern as other URLs: https://[host][/<path>][?<query>][#<fragment>]. However, the URL encoded in an App Clip Code must meet additional requirements:\n\nThe invocation URL must use the https scheme in lowercase.\n\nThe host segment is the invocation URL’s authority component and can only contain the lowercase ASCII characters a to z, ., and -.\n\nThe invocation URL may have zero or more path and query components, followed by an optional fragment. They can use the following ASCII characters: a to z, A to Z, 0 to 9, and /#?=%-._,+;:&.\n\nFollow practices that allow for efficient encoding\n\nAn App Clip Code can only contain a limited amount of information, and as a result, the tools you use to create the code compress the encoded invocation URL. The underlying encoding algorithm can encode some words efficiently, while some characters may reduce the algorithm’s efficiency. As a result, the exact length of an invocation URL you can encode in an App Clip Code varies based on the ASCII characters and words you use.\n\nWhen you create an App Clip Code, both App Store Connect and the App Clip Code Generator command-line tool inform you if your invocation URL is too long.\n\nTo ensure you can encode your invocation URL in an App Clip Code:\n\nUse the minimum number of characters you need to uniquely identify a resource. Long unique identifiers (UUIDs) lower the effectiveness of the encoding.\n\nUse a short host name with as few subdomains as possible.\n\nIf possible, remove the www subdomain from your host name.\n\nUse decimal numbers as values for query components.\n\nReplace long query string argument names and values with short strings. For example, use https://example.com/?p=0 instead of https://example.com/?status=view.\n\nOmit a trailing slash (/) character at the end of the URL. For example, use https://example.com instead of https://example.com/.\n\nUse a separate subdomain\n\nOptionally, you can use the special subdomain appclip to define URLs specific to App Clip Codes; for example, https://appclip.example.com. The algorithm that generates App Clip Codes encodes this subdomain more efficiently than others. Choosing appclip as a subdomain also allows URLs to have short path and query components by eliminating the possibility of conflicts with an unrelated functionality of your website. If you use this subdomain, it must appear as the first subdomain of the URL’s host.\n\nChoose a single-word path component\n\nIf possible, don’t use any path components at all. However, if you must use them, choose from the list below so the algorithm that creates the App Clip Code can encode the path components more efficiently. For example, you might use https://example.com/brand.\n\nAlways use the fewest possible path components.\n\nabout, access, account, add, app, archives, article, attraction, author\n\nbag, biz, book, brand, brands, browse, buy\n\ncancel, cart, cat, catalog, category, categories, channel, charts, checkin, checkout, collection, collections, company, compare, connect, contact, content, contents, cost, coupons, create\n\ndata, demo, destinations, detail, discover, download, entry, event, events, explore\n\nfaq, fetch, finance, find, food, fund\n\ngame, gift, goods, guide\n\nhealth, help, home, hotel, hotels\n\nid, index, info, item, item_id\n\njoin\n\nlifestyle, list, listen, live, local, location, locations, locator, login\n\nmanage, menu, more, music, name, news\n\nnote, open, order, overview\n\npark, part, pay, payment, payments, play, post, posts, preview, product, product_id, products, profile, promotion, purchase\n\nrate, recipe, recipes, reservation, reservations, reserve, retail, review, rewards\n\nsale, scan, schedule, search, sell, send, service, share, shop, show, showtime, site, song, special, stations, status, store, store-locator, stores, stories, story\n\ntag, tags, terms, tickets, tips, title, today, top, topic, tours, track, transaction, travel, try\n\nupdate, upload, use, user\n\nvehicles, video, view, visit\n\nwatch, wiki\n\nNote that the words in the list above don’t lead to more efficient encoding if you use them as a subdomain or query parameter.\n\nUse ordered argument names for query components\n\nIf you use no path component, or a single-word path component from the above list of special words and query components, use the special ordered argument names p, p1, p2, p3, and so on. Doing so increases the likelihood of the URL fitting in an App Clip Code. For example, instead of https://appclip.example.com/shop?a=123&b=456&c=789, use https://appclip.example.com/shop?p=123&p1=456&p2=789.\n\nHash long URLs\n\nIn some cases, you may need to pass long query strings to the App Clip upon launch that result in a URL that’s too long to encode in an App Clip Code. In this case, you can use a hashing algorithm to shorten the long query string. Upon launch, your App and App Clip can then expand the hash back to the long query string and use it to update their UI.\n\nReuse existing URLs\n\nYou may want to reuse URLs you previously created for other purposes in your App Clip Codes; for example, if you created your own tool to create short URLs for use in QR codes. If you do so, you also need to:\n\nRegister each domain that can launch your App Clip in the list of associated domains.\n\nSet up the AASA file for each domain you use.\n\nConfigure advanced App Clip experiences for both the short and long URLs.\n\nFor more information, see Configuring the launch experience of your App Clip.\n\nSee Also\nCode creation\nCreating App Clip Codes with App Store Connect\nSelect one or more advanced App Clip experiences in App Store Connect and create App Clip Codes for users to scan to launch your App Clip.\nCreating App Clip Codes with the App Clip Code Generator\nUse the App Clip Code Generator command-line tool to verify your code’s colors, get color suggestions, and create App Clip Codes."
  },
  {
    "title": "Creating App Clip Codes with the App Clip Code Generator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/creating_app_clip_codes/creating_app_clip_codes_with_the_app_clip_code_generator",
    "html": "Overview\n\nBy placing an App Clip Code at a physical location or using it in printed or digital marketing materials, you make your App Clip more discoverable. An App Clip Code always uses a design Apple provides, and users instantly recognize and scan it to launch your App Clip. Use the App Clip Code generator command-line tool to create App Clip Codes during development of your App Clip or to automate the creation of App Clip Codes.\n\nNote\n\nYou must be enrolled in the Apple Developer Program before you can download the App Clip Code Generator. For information about the Apple Developer Program, see How the Program Works.\n\nWith the App Clip Code Generator command-line tool, you can:\n\nGet color suggestions for your App Clip Code.\n\nExperiment with custom colors.\n\nVerify a custom color pair.\n\nSave your generated App Clip Codes as Scalable Vector Graphics (SVG) files.\n\nUse the generated SVG files to test your App Clip’s launch experience during development and to create App Clip Codes for use at physical locations, in digital communications, and so on. For design and printing guidance, see Human Interface Guidelines > App Clips > App Clip Codes.\n\nIf you already created an advanced App Clip experience in App Store Connect and prefer a tool with a more visual interface, you can use App Store Connect to create the App Clip Code. For more information, see Creating App Clip Codes with App Store Connect.\n\nInstall the App Clip Code Generator\n\nTo download and install the App Clip Code Generator, visit App Clips Resources and log into your Apple Developer account. After you download the App Clip Code Generator, open the downloaded disk image and run the package installer. You can find the installed tool at /Library/Developer/AppClipCodeGenerator.\n\nChoose a default color pair\n\nApp Clip Codes use three different colors: a foreground color and a background color you choose, and a third color that the command-line tool generates for you based on the other two colors. To ensure that users can reliably scan the App Clip Code, the color combination must offer enough contrast. Apple offers default color templates to help you choose a color pair.\n\nTo see the list of default color pairs, open the Terminal app and run the templates command:\n\n% AppClipCodeGenerator templates\n\n\nThis command prints an index and a hexadecimal representation of the foreground and background colors for each default color pair.\n\nIndex: 0 Foreground: FFFFFF Background: 000000\nIndex: 1 Foreground: 000000 Background: FFFFFF\nIndex: 2 Foreground: FFFFFF Background: 777777\nIndex: 3 Foreground: 777777 Background: FFFFFF\nIndex: 4 Foreground: FFFFFF Background: FF3B30\nIndex: 5 Foreground: FF3B30 Background: FFFFFF\nIndex: 6 Foreground: FFFFFF Background: EE7733\nIndex: 7 Foreground: EE7733 Background: FFFFFF\nIndex: 8 Foreground: FFFFFF Background: 33AA22\nIndex: 9 Foreground: 33AA22 Background: FFFFFF\nIndex: 10 Foreground: FFFFFF Background: 00A6A1\nIndex: 11 Foreground: 00A6A1 Background: FFFFFF\nIndex: 12 Foreground: FFFFFF Background: 007AFF\nIndex: 13 Foreground: 007AFF Background: FFFFFF\nIndex: 14 Foreground: FFFFFF Background: 5856D6\nIndex: 15 Foreground: 5856D6 Background: FFFFFF\nIndex: 16 Foreground: FFFFFF Background: CC73E1\nIndex: 17 Foreground: CC73E1 Background: FFFFFF\n\n\nTo see a preview of App Clip Codes for each default color pair as a PNG file, use the Finder or Terminal app to navigate to /Library/Developer/AppClipCodeGenerator/SampleTemplates.\n\nExperiment with custom colors\n\nIn addition to choosing a default color pair, you can choose custom foreground and background colors. To help you choose a color pair that offers high contrast, the App Clip Code Generator tool includes functionality to verify your custom color pair. It also suggests alternative colors in case the ones you initially choose don’t offer enough contrast.\n\nTo verify your custom color pair, run the suggest command in Terminal:\n\n% AppClipCodeGenerator suggest --foreground $foregroundColor --background $backgroundColor\n\n\nReplace the values for the --foreground and --background arguments with your RGB color’s hexadecimal representation; for example:\n\n% AppClipCodeGenerator suggest --foreground 65D212 --background 5B1637\n\n\nDoing so prints the color combination you entered as Foreground: 65D212 Background: 5B1637 to confirm that the chosen color pair offers enough contrast to allow for reliable scanning of the App Clip Code.\n\nIf you provide a color pair that doesn’t offer enough contrast (for example, if you run AppClipCodeGenerator suggest --foreground 123456 --background 345678), the tool prints a list of suggested color pairs.\n\nForeground: FFFFFF Background: 345678\nForeground: 44DDDD Background: 345678\nForeground: 55DDFF Background: 345678\nForeground: AABBCC Background: 345678\nForeground: BBCCBB Background: 345678\nForeground: FFBBEE Background: 345678\nForeground: 33DDFF Background: 345678\nForeground: CCBB33 Background: 345678\n\n\nNote how the tool suggests foreground colors based on the chosen background color.\n\nGenerate your App Clip Code\n\nWhen you’ve decided on the invocation URL and the color pair, use the App Clip Code Generator tool to create an App Clip Code and save it as an SVG vector graphic file. Open the Terminal app, then create an App Clip Code with the tool’s generate command, using one of the following options:\n\nTo generate a scan-only App Clip Code that uses the badge design and a default color pair, use the --index option with the index of the default color pair as its value; for example:\n\n% AppClipCodeGenerator generate --url https://appclip.example.com --index 9 --output ~/path/to/filename.svg\n\n\nTo generate an App Clip Code without the App Clip logo, use the --logo option and pass none to it; for example:\n\n% AppClipCodeGenerator generate --url https://appclip.example.com --index 9 --logo none --output ~/path/to/filename.svg\n\n\nTo generate an SVG file for an NFC-integrated App Clip Code, set the --type option to nfc; for example:\n\n% AppClipCodeGenerator generate --url https://appclip.example.com --index 9 --output ~/path/to/filename.svg --type nfc\n\n\nTo generate an App Clip Code with a custom color pair, set both the --foreground and --background options to use your custom colors; for example:\n\n% AppClipCodeGenerator generate --url https://appclip.example.com --foreground 123456 --background FFFFFF --output ~/path/to/filename.svg\n\n\nTo see all available commands and options, run AppClipCodeGenerator --help.\n\nApp Clip Codes can only encode a limited amount of information. The App Clip Code Generator displays an error message if you choose an invocation URL that exceeds the amount of encodable information or if it contains invalid characters. For more information, see Encoding a URL in an App Clip Code. For general information about choosing an App Clip’s invocation URL, see Configuring the launch experience of your App Clip.\n\nUse the SVG file to test your App Clip invocations locally, add it to your digital and print media, or create NFC-integrated App Clip Codes. Print your App Clip Codes yourself, or work with a professional printing service — for example, RR Donnelley. For printing guidance, see Preparing multiple App Clip Codes for production and Human Interface Guidelines > App Clips > Printing Guidelines.\n\nAutomate the creation of App Clip Codes\n\nIf you need to create many different App Clip Codes, consider automating their creation. The App Clip Code Generator comes with a Python script and a comma-separated values (CSV) file to use with it. The CSV file contains sample data to use to create App Clip Codes. You can find the script and the CSV file at /Library/Developer/AppClipCodeGenerator/Scripts.\n\nThe following code shows a CSV file that contains the information for four App Clip Codes:\n\nSVG File Name,URL,Background Color,Foreground Color,Type,Logo\ncamera_standalone.svg,https://appclip.example.com,FFFFFF,000000,cam,none\nnfc_standalone.svg,https://appclip.example.com,FFFFFF,000000,nfc,none\ncamera_badge.svg,https://appclip.example.com,FFFFFF,000000,cam,badge\nnfc_badge.svg,https://appclip.example.com,FFFFFF,000000,nfc,badge\n\n\nTo create a batch of App Clip Codes:\n\nNavigate to /Library/Developer/AppClipCodeGenerator/Scripts in the Finder or Terminal app, and copy its contents to a location of your choice; for example, a directory named AppClipCodes in your app’s Git repository.\n\nNavigate to the directory that contains the copied files and review its contents. Then, create a new directory where you want to save the App Clip Codes you’ll create in the next step. For example, you might create a directory named GeneratedCodes.\n\nIn the Terminal app, navigate to the directory that contains the copied files.\n\nFrom within the directory, run the Python script:\n\n% python batch_generator.py $filename.csv $directory\n\n\nReplace the placeholders with the actual file and directory names. If you used the file and directory names mentioned in the previous steps, run the following command:\n\n% python batch_generator.py sample_list.csv GeneratedCodes\n\n\nDoing so generates four App Clip Codes using the data in the CSV file and saves them in the GeneratedCodes directory.\n\nReview the generated App Clip Codes, then modify the sample_list.csv file as necessary to generate your App Clip Codes. Note that for the script to work, you can’t change the names of the CSV file’s fields.\n\nSee Also\nCode creation\nCreating App Clip Codes with App Store Connect\nSelect one or more advanced App Clip experiences in App Store Connect and create App Clip Codes for users to scan to launch your App Clip.\nEncoding a URL in an App Clip Code\nChoose an invocation URL for your App Clip Code that you can encode efficiently."
  },
  {
    "title": "Creating App Clip Codes with App Store Connect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/creating_app_clip_codes/creating_app_clip_codes_with_app_store_connect",
    "html": "Overview\n\nBy placing an App Clip Code at a physical location or using it in printed or digital marketing materials, you make your App Clip more discoverable. An App Clip Code always uses a design Apple provides, and users instantly recognize and scan it to launch your App Clip. You can generate an App Clip Code with the App Clip Code Generator command-line tool or App Store Connect. The latter is especially useful if you prefer a tool that offers a visual interface and lets you:\n\nCreate App Clip Codes for one or more existing advanced App Clip experiences.\n\nGet color suggestions.\n\nExperiment with color patterns, verify custom colors, and instantly preview the generated App Clip Code.\n\nSave your generated App Clip Codes as Scalable Vector Graphics (SVG) files.\n\nImportant\n\nTo create an App Clip Code with App Store Connect, you first need to upload a build of your app that contains the App Clip and create an advanced App Clip experience. If you haven’t already done so — for example, during development — use the App Clip Code Generator command-line tool instead.\n\nSelect one or more advanced App Clip experiences\n\nApp Store Connect offers functionality to create an App Clip Code for one or more advanced App Clip experiences. First, select your app’s latest version; then, under Advanced App Clip Experiences, click Edit Advanced Experiences. Next, click Get App Clip Codes. Select one or more advanced App Clip experiences. (Note that you can only select App Clip experiences with invocation URLs that fit in an App Clip Code.) Finally, click Get Started.\n\nFor more information, see Configuring the launch experience of your App Clip, Encoding a URL in an App Clip Code, and App Store Connect Help.\n\nCreate one or more App Clip Codes\n\nApp Store Connect guides you through the process of creating an App Clip Code for each selected experience. If you select more than one advanced App Clip experience and click Get Started, App Store Connect generates an App Clip Code for each experience with the same type, color, and design.\n\nIf you select a single advanced App Clip experience and click Get Started, you can do either of the following:\n\nCreate just one App Clip Code that encodes the experience’s registered invocation URL.\n\nCreate multiple App Clip Codes for the experience where each encodes a different invocation URL.\n\nThe second option is especially useful if you only register one advanced App Clip experience and take advantage of URL prefix matching, and you use URL parameters to update your App Clip’s UI upon launch.\n\nIf you want to create a single App Clip Code or you selected several App Clip experiences, click Next. Otherwise, to create multiple App Clip Codes for the selected experience, click Yes for that option. On your Mac, choose the URLs you want App Store Connect to use, and store them in a file that uses the comma-separated values (CSV) file format. Each of the file’s rows represents one generated App Clip Code, and each value in a row represents one URL. Upload the CSV file to App Store Connect by clicking Upload URLs and choosing the file on your Mac.\n\nThe following code snippet shows the example content of a CSV file. App Store Connect creates one App Clip Code for each row in the file.\n\nhttps://appclip.example.com/about\nhttps://appclip.example.com/buy\nhttps://appclip.example.com/buy?id=123\nhttps://appclip.example.com/buy?id=456\nhttps://appclip.example.com/buy?id=789\n\n\nNote that each URL in the CSV file must match the selected App Clip experience.\n\nNote\n\nIf adding parameters results in a URL that doesn’t fit into an App Clip Code, the website displays an error and doesn’t create a code. For more information about choosing the right URL to encode, see Encoding a URL in an App Clip Code.\n\nConfigure your App Clip Code appearance\n\nOn the next screen, choose a default color pattern or experiment with custom colors and instantly preview and verify them. App Clip Codes use three different colors: a foreground color and a background color you choose, and a third color that App Store Connect generates for you based on the other two colors.\n\nTo ensure users can reliably scan an App Clip Code, the color combination must offer enough contrast. Apple offers default color pairs, but you can experiment and choose a custom pair. If your color selection doesn’t offer enough contrast, App Store Connect suggests different foreground colors based on your custom background color.\n\nNext, select whether you want to create an NFC-integrated or scan-only App Clip Code. Then, choose the App Clip badge design with the App Clip logo or, if space is at a premium, use the design without the App Clip logo. Click Next and follow the workflow to finish creating your App Clip Code.\n\nAfter creating your App Clip Code, download the created SVG file and print it yourself, or work with a professional printing service — for example, RR Donnelley. For printing guidance, see Preparing multiple App Clip Codes for production and Human Interface Guidelines > App Clips > Printing Guidelines.\n\nSee Also\nCode creation\nCreating App Clip Codes with the App Clip Code Generator\nUse the App Clip Code Generator command-line tool to verify your code’s colors, get color suggestions, and create App Clip Codes.\nEncoding a URL in an App Clip Code\nChoose an invocation URL for your App Clip Code that you can encode efficiently."
  },
  {
    "title": "confirmAcquired(in:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayload/3580309-confirmacquired",
    "html": "Parameters\nregion\n\nThe expected physical location at the time of the App Clip invocation.\n\ncompletionHandler\n\nA closure called when the platform confirms the expected physical location at the time of the App Clip invocation.\n\nThe closure takes the following parameters:\n\ninRegion\n\nA Boolean value that indicates whether the App Clip invocation happened at the expected physical location.\n\nerror\n\nThe error object that describes why the platform couldn’t confirm the user’s physical location.\n\nThis parameter is nil if the platform was able to determine the user’s physical location at the time of the App Clip invocation.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc confirmAcquired(in region: CLRegion) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nConfirm the user’s location at the time of the App Clip invocation if the App Clip is associated with a physical location. The request to confirm the location fails with disallowed if the source of the invocation isn’t an NFC tag or visual code.\n\nFor the platform to accept the request to confirm the user’s location, you need to make modifications to the Info.plist file of the App Clip. For more information, see Enabling notifications in App Clips.\n\nNote\n\nFunctionality to confirm the user’s location is only available to App Clips. For the full app, request permission to access the user’s location and make use of the Core Location framework. For more information, see Getting the current location of a device."
  },
  {
    "title": "Offering Live Activities with your App Clip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/offering_live_activities_with_your_app_clip",
    "html": "Overview\n\nWith Live Activities, you can display live event data on the iPhone Lock Screen and in the Dynamic Island on supported devices. Your App Clip can’t typically include app extensions, but starting with iOS 16 you can include a widget extension that offers Live Activities and displays live event data without requiring people to install your full app. For example, a sports app could display App Clip Codes at a game location to offer an App Clip to attendees of the current game. When a person launches the App Clip from the App Clip Code, the App Clip could offer a Live Activity to track a game that happens at the same time but in another city. The Live Activity enables people who watch the game in person to stay informed about another team’s game that happens in parallel.\n\nImportant\n\nThe widget extension for your App Clip can only include Live Activities. Reserve widgets that appear on the Home Screen, Lock Screen, or in Today View for your full app.\n\nTo offer a Live Activity from your App Clip:\n\nOpen your project in Xcode.\n\nAdd a widget extension target to your project and make sure to only add it to the App Clip target.\n\nMake sure the widget extension only contains the Live Activity — widgets for the Home Screen, Lock Screen, or Today View aren’t available to App Clips. Remove any widget code that the Xcode template generates and only keep the Live Activity code. For example, remove the widget from the widget bundle that the template creates and only include the Live Activity in the widget bundle.\n\nAdd the App Clip Extension capability to your new widget extension. It adds the com.apple.developer.on-demand-install-capable entitlement to the widget extension target. This capability is a requirement that allows the App Clip to include the widget extension.\n\nMake sure the widget extension target uses the bundle identifier of the App Clip as a prefix to fulfill the bundle ID requirements for extensions. For example, if your App Clip has the bundle ID com.example.exampleapp.clip, the widget extension must use com.example.exampleapp.clip.$thing, where $thing is something like widgetextension or liveactivities.\n\nWhen you’ve added the widget extension to your App Clip to offer Live Activities, add code for your Live Activity as described in Displaying live data with Live Activities. For more information about Live Activities, see ActivityKit.\n\nNote\n\nIf you already bundle a widget extension with your full app, don’t add it to the App Clip target. Instead, add a second widget extension to your project and make sure to only include it in the App Clip target. As a result, you’ll have one widget extension for your full app and one widget extension for your App Clip. Then, follow the steps above to add the App Clip Extension capability and so on."
  },
  {
    "title": "Creating App Clip Codes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/creating_app_clip_codes",
    "html": "Overview\n\nAn App Clip Code is immediately recognizable to users and lets them know an App Clip is available. The App Clip Code offers a fast and secure launch experience for your App Clip that users trust.\n\nThe visual design of an App Clip Code encodes your App Clip’s invocation URL. Optionally, you can embed an NFC tag that also encodes the invocation URL. An App Clip Code with an embedded NFC tag is called an NFC-integrated App Clip Code, while a code without an NFC tag is called a scan-only App Clip Code.\n\nThe image at the center of an App Clip Code icon lets users know how to interact with the code. If they discover an NFC-integrated App Clip Code, they hold their device close to the code or scan it with the NFC Tag Reader in Control Center to launch your App Clip. They can also scan an NFC-integrated App Clip Code with the Camera app or the Code Scanner in Control Center. If they discover a scan-only App Clip Code, they scan it with the Camera or the Code Scanner in Control Center to launch your App Clip.\n\nIn addition to providing a great launch experience for your App Clip, you can also use an App Clip Code to offer a context-aware augmented reality experience. For more information, see Interacting with App Clip Codes in AR.\n\nNote\n\nScanning App Clip Codes requires a device that runs iOS 14.3 or later.\n\nCreating an App Clip Code requires the following tasks:\n\nChoosing an invocation URL and configuring an advanced App Clip experience in App Store Connect. To learn more, see Configuring the launch experience of your App Clip.\n\nChoosing the type (scan-only or NFC-integrated), colors, and design of your App Clip Code. For design guidance, see Human Interface Guidelines > App Clips > App Clip Codes.\n\nGenerating App Clip Codes with App Store Connect or with the App Clip Code Generator command-line tool. For more information, see Pick a tool to create App Clip Codes below.\n\nPrinting App Clip Codes yourself or with the help of a professional printing service — for example, RR Donnelley. For printing guidance, see Human Interface Guidelines > App Clips > Printing Guidelines and Preparing multiple App Clip Codes for production.\n\nPick a tool to create App Clip Codes\n\nApp Clip Codes always use the design Apple provides to ensure users instantly recognize them. You can create an App Clip Code by selecting an advanced App Clip experience in App Store Connect or by installing the App Clip Code Generator command-line tool. Both have similar features and it’s up to you to pick the tool that best fits your needs.\n\nConsider using App Store Connect if:\n\nYou’ve already created an advanced App Clip experience in App Store Connect.\n\nYou prefer an instantaneous preview while you experiment with colors.\n\nYou’re comfortable using a tool that offers a more visual interface compared to a command-line tool.\n\nConsider using the App Clip Code Generator command-line tool if:\n\nYou haven’t created an advanced App Clip experience in App Store Connect — for example, during development of your App Clip.\n\nYou need to create a lot of App Clip Codes and want to automate their creation with a script.\n\nYou’re comfortable using a command-line tool.\n\nFor more information, see Creating App Clip Codes with App Store Connect and Creating App Clip Codes with the App Clip Code Generator.\n\nNote\n\nYou must be enrolled in the Apple Developer Program before you can download the App Clip Code Generator. For information about the Apple Developer Program, see How the Program Works.\n\nTopics\nCode creation\nCreating App Clip Codes with App Store Connect\nSelect one or more advanced App Clip experiences in App Store Connect and create App Clip Codes for users to scan to launch your App Clip.\nCreating App Clip Codes with the App Clip Code Generator\nUse the App Clip Code Generator command-line tool to verify your code’s colors, get color suggestions, and create App Clip Codes.\nEncoding a URL in an App Clip Code\nChoose an invocation URL for your App Clip Code that you can encode efficiently.\nSee Also\nApp Clip Codes\nPreparing multiple App Clip Codes for production\nPrepare your App Clip Codes to send to a professional printing service.\nInteracting with App Clip Codes in AR\nDisplay content and provide services in an AR experience with App Clip Codes."
  },
  {
    "title": "APActivationPayload | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/apactivationpayload",
    "html": "Overview\n\nWhen users launch an App Clip, the platform passes an activation payload to the App Clip as part of an NSUserActivity object. When the App Clip receives the payload, confirm the user’s physical location at the time of the invocation.\n\nFor more information, see Responding to invocations.\n\nTopics\nPassing Data to the App Clip\nvar url: URL?\nThe URL of the link that launched the App Clip.\nConfirming the User’s Physical Location\nfunc confirmAcquired(in: CLRegion, completionHandler: (Bool, Error?) -> Void)\nChecks whether an App Clip invocation happened at an expected physical location.\nError Information\nlet APActivationPayloadErrorDomain: String\nA string that identifies the activation payload’s error domain.\nstruct APActivationPayloadError\nAn error that an App Clip activation payload returns.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nLaunch\nConfiguring the launch experience of your App Clip\nReview how people launch your App Clip, identify invocation URLs, make use of default App Clip links, and configure experiences in App Store Connect.\nAssociating your App Clip with your website\nEnable the system to verify your App Clip to support invocations in iOS 16.3 or earlier and from your website.\nSupporting invocations from your website and the Messages app\nDisplay a Smart App Banner and the App Clip card on your website that people tap to launch your App Clip, and add support for invocations from the Messages app.\nResponding to invocations\nAdd code to respond to invocations and offer a focused launch experience.\nConfirming a person’s physical location\nAdd code to quickly confirm a person’s physical location while respecting their privacy.\nLaunching another app’s App Clip from your app\nEnable people to launch another app’s App Clip from your app with App Clip links and offer a rich preview of it with the Link Presentation framework.\nproperty list key NSAppClip\nA collection of keys that an App Clip uses to get additional capabilities.\nName: App Clip"
  },
  {
    "title": "Supporting invocations from your website and the Messages app | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/supporting_invocations_from_your_website_and_the_messages_app",
    "html": "Overview\n\nWhen you create your App Clip, register a default App Clip experience. By creating a default App Clip experience, you lay the foundation for supporting invocations from a Smart App Banner on your website. This has an added benefit: If a person shares a link to your website in the Messages app and the website displays a Smart App Banner, the recipient can tap the link to instantly launch your App Clip.\n\nAdditionally, you can display the App Clip card on your website if a person’s device runs iOS 15 or later. This makes your App Clip even more discoverable and reduces the number of taps required to launch your App Clip.\n\nNote that the Smart App Banner only appears on your website if:\n\nYou associated your App Clip with the website where you want to display the banner.\n\nYou added the banner to your website’s source code.\n\nYou configured the default App Clip experience.\n\nYou published a version of your app that offers an App Clip.\n\nA person opens the website in an SFSafariViewController or in Safari without Private Browsing enabled.\n\nWith the App Clip card on your website, people don’t need to tap the Smart App Banner for the card to appear. Alternatively, they can choose to view the website with the Smart App Banner instead of launching the App Clip. Both Safari and an SFSafariViewController remember the person’s decision and won’t display the App Clip card when they visit the site again.\n\nTip\n\nDisplaying an App Clip card in Safari on devices that run iOS 15 or later increases the discoverability of your App Clip and reduces the number of taps required to launch the App Clip. However, obscuring your website’s content with the App Clip card may not be ideal. In this case, creating a dedicated page that displays the App Clip card in Safari and linking to it may be a good option to guide people to launch your App Clip.\n\nAdd code to display the Smart App Banner and the App Clip Card on your website\n\nIn most cases, the best time to add the Smart App Banner and the App Clip card to your website is while you associate your App Clip with your website. Add both by including the following HTML meta tag and replacing all placeholders with the appropriate values:\n\n<meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, app-clip-bundle-id=appClipBundleID, app-clip-display=card\">\n\n\nNote how the meta tag’s content attribute includes the app-clip-bundle-id, app-id, and app-clip-display parameters. By including the app-id parameter, you enable the Smart App Banner to open the full app on devices that run iOS 13 or earlier and on devices where Screen Time or a mobile device management (MDM) profile don’t allow App Clips. By including the app-clip-display parameter, you display the App Clip card in Safari or an SFSafariViewController on devices running iOS 15 or later.\n\nTip\n\nIf you already display a Smart App Banner on your site, add the app-clip-bundle-id=appClipBundleID attribute to the existing meta tag for the Smart App Banner, and use the bundle identifier of your App Clip for its value. To display the App Clip card on devices running iOS 15 or later, also add the app-clip-display parameter.\n\nNote that the value of a Smart App Banner’s app-argument attribute isn’t available to App Clips.\n\nSupport invocations from links people share in Messages\n\nWhen you add the meta tag to your webpage to support invocations from Safari or an SFSafariViewController, you automatically add support for invocations from links people share with others in the Messages app. When a person shares a link to the website that displays the banner or App Clip card, the recipient can tap the link to instantly launch your App Clip.\n\nSharing your App Clip in Messages requires that the recipient’s device:\n\nRuns iOS 14 or later\n\nContains the sender as a contact in the Contacts app\n\nIf a person shares the link with someone else as an SMS, the recipient must opt to load the rich link before they can tap the preview to launch the App Clip.\n\nNote\n\nWhen a person taps a link to a website that displays the Smart App Banner in the Messages app, the invocation URL of your App Clip opens in the default browser.\n\nIn addition to the above requirements, you must provide the preview image that appears in the Messages app. To provide the preview image:\n\nIf your website doesn’t already contain the property=”og:image” HTML meta tag, add <meta property=”og:image” content=”https://example.com/example.png”> to each page that displays the Smart App Banner and the App Clip card.\n\nReplace the value of the content attribute with the URL of the preview image. Typically, this is the same image you use on the App Clip card. For additional information on displaying link previews in Messages, see Best Practices for Link Previews in Messages.\n\nTo enable your App Clip or fulll app to respond to the invocation from a website that displays the Smart App Banner or the App Clip card in Safari, retrieve the website’s URL upon invocation. Then, use the URL to update the interface of your App Clip to best match the content on the website. For more information on accessing the invocation URL, see Responding to invocations.\n\nAdd the Smart App Banner and App Clip card to multiple websites\n\nIn some cases, you may want to add the App Clip card and the Smart App Banner to several websites where each site uses its own domain — for example, if your App Clip serves several individual businesses. However, the default App Clip experience offers only one set of metadata. If you want to display the Smart App Banner on multiple websites where tapping each website’s banner displays a different App Clip card for your App Clip:\n\nAdd the meta tags for the Smart App Banner and App Clip card and for the link previews in the Messages app to each website, for example, https://example.com, https://example2.com, https://example3.com, and so on.\n\nAssociate each website with your App Clip as described in Associating your App Clip with your website.\n\nConfigure the default App Clip experience for one website, likely for a more generic landing page. When people launch the App Clip from the landing page, the App Clip could then allow them to choose a business.\n\nCreate separate advanced App Clip experiences for https://example2.com, https://example3.com, and so on, as described in Configuring the launch experience of your App Clip.\n\nUse different metadata for each advanced experience you configure; for example, choose custom imagery for the App Clip card.\n\nAdd code to handle the invocation of your App Clip and to update the interface of your App Clip using the invocation URL — the URL of the website that displays the Smart App Banner or App Clip card. For more information on accessing the invocation URL, see Responding to invocations.\n\nImportant\n\nRemember to associate each domain where you display the App Clip card and the Smart App Banner with your App Clip as described in Associating your App Clip with your website.\n\nTo avoid associating your App Clip with multiple domains, consider using one domain and use URLs like https://example.com/business1 or https://example.com/business2. By using one domain, you’ll only have to associate your app and App Clip with https://example.com and configure an advanced App Clip experience for each URL.\n\nSee Also\nLaunch\nConfiguring the launch experience of your App Clip\nReview how people launch your App Clip, identify invocation URLs, make use of default App Clip links, and configure experiences in App Store Connect.\nAssociating your App Clip with your website\nEnable the system to verify your App Clip to support invocations in iOS 16.3 or earlier and from your website.\nResponding to invocations\nAdd code to respond to invocations and offer a focused launch experience.\nConfirming a person’s physical location\nAdd code to quickly confirm a person’s physical location while respecting their privacy.\nLaunching another app’s App Clip from your app\nEnable people to launch another app’s App Clip from your app with App Clip links and offer a rich preview of it with the Link Presentation framework.\nclass APActivationPayload\nInformation that’s passed to an App Clip on launch.\nproperty list key NSAppClip\nA collection of keys that an App Clip uses to get additional capabilities.\nName: App Clip"
  },
  {
    "title": "Associating your App Clip with your website | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/associating_your_app_clip_with_your_website",
    "html": "Overview\n\nAn App Clip gives people quick access to a particular workflow in your app, even when a person hasn’t installed your app. NFC readers, App Clip Codes, or QR codes define an invocation URL that specifies which App Clip, or workflow within your full app, the system needs to run. Unless the invocation URL is a default App Clip link for your default App Clip experience, the system verifies the URL before it launches the App Clip using your associated website. It does this by checking that the App Clip includes the URL in its code signature, an Associated Domains Entitlement, which cites the invocation URL’s domain. The system also verifies that the server of the domain agrees to launch the App Clip, by citing the App Clip within an Apple App Site Association (AASA) file that it hosts.\n\nTo associate your app and App Clip with your website:\n\nSpecify your invocation URL’s domain within an Associated Domains Entitlement on both your app and App Clip targets in Xcode.\n\nAdd or modify an AASA file on the domain’s server.\n\nThe system verifies that both the entitlement and the configuration in the AASA file match before it permits the invocation of the App Clip. App Store Connect also verifies the match when you create an App Clip experience; for more information, see Set up an App Clip experience.\n\nTip\n\nYou may already be familiar with the Associated Domains Entitlement if your app supports Handoff or universal links. If you’re new to using this entitlement and universal links, read Allowing apps and websites to link to your content and Supporting universal links in your app. For additional information about the Associated Domains Entitlement — including cache policies — read Supporting associated domains.\n\nAdd the Associated Domains entitlement\n\nTo associate your App Clip with your website, you must add the Associated Domains Entitlement to the app and the App Clip targets.\n\nFirst, open your project in Xcode; then, in your project settings, enable the Associated Domains capability to add the Associated Domains Entitlement.\n\nSecond, for each URL that launches your App Clip or full app, add its domain to the Associated Domains capability using the pattern: appclips:<fully qualified domain>. For example, add appclips:example.com or appclips:appclip.example.com. Make sure to only include the desired subdomain and the top-level domain. Don’t include a trailing slash (/), wildcard (*), or path and query components in the URL. For more information, see Supporting associated domains.\n\nMake changes to your server\n\nIn addition to adding the Associated Domains Entitlement to your Xcode project, you need to make changes to your server to associate your App Clip with your server and allow the system to verify the URL that tries to invoke your App Clip.\n\nFirst, create an AASA file as described in Supporting associated domains. Next, add an entry for the App Clip with the appclips key to the file.\n\nThe following code shows the content to add. Note how the value for the apps key is an array that contains the app identifier of the App Clip. In many cases, the array contains only one entry. However, it can contain entries for multiple App Clips.\n\n{\n    \"appclips\": {\n        \"apps\": [\"ABCDE12345.com.example.MyApp.Clip\"]\n    }\n...\n} \n\n\nImportant\n\nFor apps that detect App Clip Codes in AR, add an entry for the parent app identifier. For more information, see Interacting with App Clip Codes in AR.\n\nThen, add the AASA file to your website’s .well-known directory. If you previously added an AASA file to your server, add the entry for the appclips key to the existing file.\n\nNote\n\nIf you plan to use multiple invocation URLs with different domains, remember to add an AASA file to each domain’s .well-known directory. In addition, remember to add each domain to the Associated Domains Entitlement.\n\nFinally, to make sure the system can validate the association between your App Clip and the AASA file on your server, check your server’s configuration and make sure it allows AASA-Bot and CFNetwork as user agents.\n\nCheck the validation status of your App Clip\n\nApp Store Connect verifies the AASA file configuration of your App Clip after you’ve uploaded a build to App Store Connect and created an App Clip experience. To check the verification status:\n\nOpen App Store Connect in your browser and navigate to a build’s details page.\n\nClick View Status in the App Clip section to show the domain validation status. It shows the validation status for each domain that’s associated with your App Clip.\n\nFor example, you could configure the default App Clip experience to use https://example.com as its invocation URL and configure an advanced App Clip experience to use https://appclip.example.com. In this example, you’d place an AASA file in the .well-known directories for each URL’s domain, and App Store Connect would show the verification status for both domains.\n\nThe Cache Status column shows the validation status for your App Clip as the system performs the validation on people’s devices. As you develop your App Clip, you may make frequent changes to your AASA file. To check the verification status in real time, click Load Debug Status in the modal view that shows the verification status of your App Clip. If a configuration error occurs, App Store Connect shows information about the error in the Debug Status column.\n\nFor more information, see WWDC20: What’s New in App Store Connect.\n\nSee Also\nLaunch\nConfiguring the launch experience of your App Clip\nReview how people launch your App Clip, identify invocation URLs, make use of default App Clip links, and configure experiences in App Store Connect.\nSupporting invocations from your website and the Messages app\nDisplay a Smart App Banner and the App Clip card on your website that people tap to launch your App Clip, and add support for invocations from the Messages app.\nResponding to invocations\nAdd code to respond to invocations and offer a focused launch experience.\nConfirming a person’s physical location\nAdd code to quickly confirm a person’s physical location while respecting their privacy.\nLaunching another app’s App Clip from your app\nEnable people to launch another app’s App Clip from your app with App Clip links and offer a rich preview of it with the Link Presentation framework.\nclass APActivationPayload\nInformation that’s passed to an App Clip on launch.\nproperty list key NSAppClip\nA collection of keys that an App Clip uses to get additional capabilities.\nName: App Clip"
  },
  {
    "title": "Configuring the launch experience of your App Clip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/configuring_the_launch_experience_of_your_app_clip",
    "html": "Overview\n\nPeople launch your App Clip by performing an invocation — for example, by scanning an App Clip Code or tapping a Smart App Banner on a website. Upon launch, the App Clip receives an invocation URL that determines what information appears on the App Clip card. To offer the best launch experience for the person’s current context, you can also use the invocation URL on launch to update the UI of your App Clip. To configure invocation URLs and the metadata that appears on the App Clip card, create the required default App Clip experience in App Store Connect. To support all invocations — for example, from App Clip Codes — configure optional advanced App Clip experiences.\n\nImportant\n\nIn some cases, the App Clip doesn’t receive an invocation URL upon launch. Make sure to handle this use case in your code. For more information on responding to invocations where the invocation URL isn’t available, see Ensure your code handles all invocations.\n\nThe actual configuration of your App Clip experiences typically happens when you upload the first build that contains an App Clip to App Store Connect. However, it’s important you understand how App Clip experiences work before you start developing your App Clip. You need to identify invocations, invocation URLs, and plan changes to your code before or in parallel to implementing functionality provided by your App Clip. Additionally, to support advanced App Clip experiences or iOS versions older than iOS 16.4, you need to make changes to your server to associate your App Clip with your website.\n\nReview how people invoke an App Clip\n\nPeople don’t search the App Store for an App Clip. They discover it when and where they need it, and launch the App Clip by performing one of the following invocations:\n\nScanning an App Clip Code, NFC tag, or QR code at a physical location\n\nTapping a location-based suggestion from Siri Suggestions\n\nTapping a link in the Maps app\n\nTapping a Smart App Banner on a website in Safari or an app that uses SFSafariViewController\n\nTapping the action button of an App Clip card that appears in Safari or an SFSafariViewController (requires iOS 15 or later)\n\nTapping a link that someone shares in the Messages app (as a text message only)\n\nTapping an App Clip preview or link to an App Clip in an app (requires iOS 17 or later)\n\nWith each invocation, the system verifies whether the invocation URL matches the invocation URL you configure in App Store Connect. After it verifies the invocation, the system uses the invocation URL to determine which App Clip experience to use for launching your App Clip. It then uses the App Clip experience’s metadata to populate the App Clip card and passes the invocation URL to the App Clip.\n\nImportant\n\nWhen people install the corresponding app for an App Clip, the full app replaces the App Clip. Every invocation from that moment on launches the full app instead of the App Clip. As a result, the full app must handle all invocations and offer the same functionality that the App Clip provides.\n\nCompare default and advanced App Clip experiences\n\nNo matter which invocation you want to support for your App Clip, you need to create a default App Clip experience in App Store Connect. With a default App Clip experience, you can enable default App Clip links to support a subset of invocations without having to make changes to your server. For some App Clips, this minimal configuration may be enough to provide their functionality on their supported platforms. However, your app could benefit from suppporting invocations that require associating your App Clip with your website. For example, you may want to support App Clips and invocations on devices that run iOS 16.3 or earlier. Additionally, depending on the functionality your app and App Clip provide, you may need to configure advanced App Clip experiences in addition to the default App Clip experience. Think about where and when people use your app, and identify additional invocations that fit the functionality you offer in your App Clip.\n\nThe following table shows the invocations and platforms each experience supports.\n\nInvocation\n\n\t\n\nDefault App Clip experience\n\n\t\n\nAdvanced App Clip experience\n\n\n\n\nA Smart App Banner on your website\n\n\t\n\nYes, if you associate your website with the App Clip.\n\n\t\n\nYes, if you associate your website with the App Clip.\n\n\n\n\nA shared link to an App Clip in the Messages app\n\n\t\n\nYes, if you associate your website with the App Clip.\n\n\t\n\nYes, if you associate your website with the App Clip.\n\n\n\n\nQR codes\n\n\t\n\nYes, in iOS 16.4 or later if you enable default App Clip links. No in earlier iOS versions.\n\n\t\n\nYes\n\n\n\n\nNFC tags\n\n\t\n\nYes, in iOS 16.4 or later if you enable default App Clip link. No in earlier iOS versions.\n\n\t\n\nYes\n\n\n\n\nApp Clip Codes\n\n\t\n\nNo\n\n\t\n\nYes\n\n\n\n\nMaps\n\n\t\n\nNo\n\n\t\n\nYes\n\n\n\n\nSpotlight search\n\n\t\n\nYes, excluding location-based Spotlight suggestions.\n\n\t\n\nYes\n\n\n\n\nAnother app that uses Link Presentation (requires iOS 17)\n\n\t\n\nYes, if you associate your website with the App Clip or enable default App Clip links\n\n\t\n\nYes, if you associate your website with the App Clip.\n\n\n\n\nAnother app that uses Link or open(_:options:completionHandler:) (requires iOS 17)\n\n\t\n\nYes\n\n\t\n\nNo\n\nConfigure an advanced App Clip experience if:\n\nYou want your App Clip to support all possible invocations, including invocations from App Clip Codes, and invocations from NFC tags and QR codes on devices that run iOS versions earlier than iOS 16.4.\n\nYou want to display a Smart App Banner and an App Clip card on an additional website that uses a different subdomain or domain.\n\nYou need to associate your App Clip with a physical location.\n\nYou create an App Clip for multiple businesses to use.\n\nCustomize the App Clip card\n\nThe App Clip card is the first thing people see when they discover your App Clip. This makes the App Clip card’s design especially important. To explore different imagery and text, and to test their appearance on your device, use local experiences as described in Testing the launch experience of your App Clip.\n\nThe App Clip card must match a person’s context. For example, a business with multiple physical locations must display imagery that matches the person’s current location. As a result, each physical location corresponds to a different imagery and text on the App Clip card. However, it’s not possible to programmatically change the content on the App Clip card. Instead, you need to configure an advanced App Clip experience in App Store Connect for each context that needs its own App Clip card. You can choose text and imagery for each advanced App Clip experience.\n\nNote that you can also localize the text that appears on the App Clip card in App Store Connect. For more information on localization, see Localize App Store Information.\n\nNote\n\nKeep the text that appears on the App Clip card short: Use up to 30 characters for the title and up to 56 characters for the subtitle.\n\nConfigure a default App Clip experience\n\nAn App Clip always requires a corresponding full app, and you submit your App Clip binary together with your full app’s binary to App Store Connect. After you’ve uploaded your full app to App Store Connect, configure a default App Clip experience. Navigate to the page for the app version that offers an App Clip, expand the App Clip section, and provide the following metadata for the App Clip card:\n\nA header image\n\nCopy for the App Clip card’s subtitle\n\nThe call-to-action verb that appears on the Action button people tap to launch the App Clip\n\nFor your default App Clip experience, the invocation URL that’s available to the App Clip on launch is:\n\nOne of up to three default App Clip links if you enable default App Clip links\n\nThe URL of the website you associated with the App Clip and that displays the Smart App Banner and the App Clip card\n\nDefault App Clip links are URLs generated by Apple that invoke your App Clip without additional setup on your server. They follow this URL scheme: https://appclip.apple.com/id?=<bundle_id>&key=value. Instead of the <bundle_id> placeholder, your default App Clip links include the bundle ID of your app and, optionally, parameters you set, represented as &key=value. For example, a default App Clip link for a coffee shop’s app could be https://appclip.apple.com/id?=com.example.Clip&promotion=WWDC23.\n\nHowever, associating the App Clip with the shop’s website comes with benefits: The website can display a Smart App Banner or the App Clip card. As a result, the shop associates its App Clip with its website on https://example.com. To launch the App Clip, the website displays a Smart App Banner at various locations, for example:\n\nhttps://example.com/menu\n\nhttps://example.com/contact\n\nhttps://example.com/menu/breakfast\n\nhttps://example.com/menu/lunch\n\nThe website also displays the App Clip card on https://appclip.example.com/, a dedicated page that promotes the App Clip. Upon launch, the App Clip receives the website’s URL as the invocation URL and displays the matching functionality in the App Clip — for example, the coffee shop’s menu.\n\nFor additional information about associating your App Clip with your website, see Associating your App Clip with your website.\n\nConfigure advanced App Clip experiences\n\nTo support additional invocations (for example, from scanning an App Clip Code), create an advanced App Clip experience in App Store Connect.\n\nImportant\n\nIf you’re using a URL with a different domain than the default App Clip experience, make sure the system can verify the association between your App Clip and the domain. For more information, see Associating your App Clip with your website.\n\nIn App Store Connect, select your App, and then select the iOS app version for which you want to add an advanced App Clip experience. Then, click Edit Advanced Experiences and create an advanced App Clip experience. For more information, see Set up an App Clip experience in the App Store Connect Help.\n\nImportant\n\nTo set up an advanced App Clip experience that appears in Apple Maps, create a place association that connects the App Clip experience to a physical location. Apple Maps uses any location data that you provide solely for matching an App Clip experience to an existing location. If it can’t find a match, Apple Maps doesn’t use the provided location data.\n\nIn your Xcode project, add or modify code for both your App Clip and your full app to respond to the new URL you registered. For more information, see Responding to invocations.\n\nConsider the previous example for a coffee shop’s App Clip: It would use the default App Clip experience with https://example.com because that’s the domain associated with the App Clip. In addition, it would use one advanced App Clip experience with https://example.com as its invocation URL, and generate an App Clip Code for the advanced App Clip experience. In its code, the App Clip handles the invocation from an App Clip Code just like an invocation from Smart App Banners, the App Clip card on a website, and the Messages app.\n\nTake advantage of URL prefix matching\n\nIn general, try to register as few URLs as possible, and register generic URLs to take advantage of URL prefix matching. Upon invocation, the system matches the invocation URL against URLs you registered as part of your advanced App Clip experiences. The system then chooses the App Clip experience with the URL that has the most specific matching prefix. This means that you can register one URL to cover many cases.\n\nConsider the example for a coffee shop. By registering one advanced App Clip experience with https://example.com as its invocation URL, it’s possible to handle invocation URLs, for example:\n\nhttps://example.com/menu\n\nhttps://example.com/contact\n\nhttps://example.com/menu/breakfast\n\nUpon launch, the App Clip receives a URL, then extracts path components and query parameters and uses them to update its UI so that it corresponds to the URL and matches the person’s context.\n\nIf the coffee shop has multiple physical locations, its App Clip could use one advanced App Clip experience for each location with a different header image, metadata, and invocation URL — for example, https://example.com/location1, https://example.com/location2, and so on. The App Clip could then, similar to the previous example, extract path components and query parameters to update its UI for each App Clip experience.\n\nFor additional information, see WWDC20: Configure and Link Your App Clips.\n\nChoose URLs to encode in an App Clip Code\n\nAn App Clip Code is immediately recognizable to people and lets them know that an App Clip is available. The App Clip Code offers a fast and secure launch experience for your App Clip that people trust. Although App Clip Codes are a great way to launch your App Clip, an App Clip Code can only contain a limited amount of information in its visual code or NFC tag. If you plan to support invocations from App Clip Codes, see Creating App Clip Codes and Encoding a URL in an App Clip Code.\n\nUse short URLs or redirects\n\nIn some cases — for example, if you already use shortened URLs to deep link into your app — you may want to launch your App Clip from a short URL in addition to a long URL. In other cases, you may want to redirect from the short URL to a URL with a long path or many query parameters.\n\nYou may create both short and long URLs, as well as make URL redirects to launch App Clips. However, you need to set up both the short URL and the long URL to invoke your App Clip. For example, you may want to use https://some.subdomain.example.com/path/to/thing?query=1234 as the invocation URL for your App Clip and a shorter URL — for example, https://appclip.example.com?id=1 — that redirects to the long URL. For the URL forwarding to work, add both https://some.subdomain.example.com and https://appclip.example.com to your list of associated domains. Make sure to place an AASA file into the corresponding .well-known directory for each subdomain. Then, create App Clip experiences for both URLs.\n\nFor additional information, see Associating your App Clip with your website and Supporting associated domains.\n\nCreating App Clip experiences using the App Store Connect API\n\nThe App Store Connect website offers a convenient way to create and manage your default and advanced App Clip experiences. However, if you need to manage a large number of App Clip experiences, using the website may be too cumbersome. For example, say your App Clip allows people to order food at a chain restaurant with dozens, hundreds, or even thousands of locations. For each location, you likely want to display imagery on the App Clip card for that specific restaurant. As a result, you need to create an advanced App Clip experience for each location.\n\nTo help you create and manage a large number of App Clip experiences, use the App Store Connect API to automate these tasks. For more information, see App Clips and App Clip Experiences.\n\nSee Also\nLaunch\nAssociating your App Clip with your website\nEnable the system to verify your App Clip to support invocations in iOS 16.3 or earlier and from your website.\nSupporting invocations from your website and the Messages app\nDisplay a Smart App Banner and the App Clip card on your website that people tap to launch your App Clip, and add support for invocations from the Messages app.\nResponding to invocations\nAdd code to respond to invocations and offer a focused launch experience.\nConfirming a person’s physical location\nAdd code to quickly confirm a person’s physical location while respecting their privacy.\nLaunching another app’s App Clip from your app\nEnable people to launch another app’s App Clip from your app with App Clip links and offer a rich preview of it with the Link Presentation framework.\nclass APActivationPayload\nInformation that’s passed to an App Clip on launch.\nproperty list key NSAppClip\nA collection of keys that an App Clip uses to get additional capabilities.\nName: App Clip"
  },
  {
    "title": "Distributing your App Clip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/distributing_your_app_clip",
    "html": "Overview\n\nWhen you submit an App Clip for distribution to testers with TestFlight or for publishing in the App Store, you don’t submit the App Clip on its own; you export and submit the app bundle of the full app that includes the App Clip.\n\nNote\n\nYou may also choose Ad Hoc or Development distribution. Note that you need to export the App Clip and the full app separately in these cases. Enterprise distribution isn’t available to App Clips.\n\nArchive your app and upload it to App Store Connect\n\nUploading an app archive that contains the full app and the App Clip works just like for an app that doesn’t come with an App Clip. To export an App Clip for distribution to testers:\n\nIn Xcode, archive the App Clip’s corresponding app, open the Organizer window, select the archive, and click Distribute App.\n\nChoose App Store Connect as the distribution method, then upload the app.\n\nTo distribute the app that features an App Clip to testers with TestFlight or publish it on the App Store, visit App Store Connect.\n\nFor additional information, see Testing the launch experience of your App Clip and Distributing your app for beta testing and releases."
  },
  {
    "title": "Testing the launch experience of your App Clip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/testing_the_launch_experience_of_your_app_clip",
    "html": "Overview\n\nA fast launch experience is crucial to the experience your App Clip provides. As a result, you’ll spend a significant amount of time choosing invocation URLs, configuring App Clip experiences in App Store Connect, and writing code to handle the invocation URL.\n\nTo ensure your App Clip offers a smooth launch experience and that you properly configured your App Clip experiences, use the following tests and verifications:\n\nDuring development, use the _XCAppClipURL environment variable to configure an invocation URL for debugging.\n\nVerify the design of the App Clip card and the launch experience of your App Clip from invocations by creating a local experience on your test device.\n\nWhen you’re ready to share a beta version with others, create an App Clip experience for testers in TestFlight.\n\nWhen you’ve published your App Clip on the App Store, verify your App Clip configuration by using the App Clip diagnostics on iPhone.\n\nDebug your App Clip\n\nThe invocation URL plays a key role to offering a fast and instant launch experience for your App Clip because you can use it to update the user interface of your App Clip to match the user’s context. Testing this code is especially important. In Xcode, provide an invocation URL for debugging. Then, make sure your code handles your invocation URLs — including unexpected invocation URLs — and updates the user interface of your App Clip to match the user’s context.\n\nTo configure an invocation URL for debugging:\n\nIn Xcode, choose Product > Scheme > Edit Scheme and select the scheme for your App Clip.\n\nSelect the Run action.\n\nIn the Arguments tab, check whether the _XCAppClipURL environment variable is present. When you add an App Clip target to your project, Xcode adds it for you. If it’s missing, add the environment variable.\n\nSet the environment variable’s value to the invocation URL you want to test.\n\nEnable the variable by selecting the checkbox next to it.\n\nBuild and run the App Clip to access the test URL you configured from an NSUserActivity object. For more information on accessing the invocation URL, see Responding to invocations.\n\nThe following screenshot shows the sheet to configure an App Clip target’s Run action with a value for the _XCAppClipURL environment variable:\n\nWhen you debug your App Clip with Xcode, the App Clip launches right away with the value you set for the _XCAppClipURL variable. Note that the App Clip card doesn’t appear. To see the App Clip card on invocation when testing and test your entire launch experience, register a local experience on your test device.\n\nTest invocations with a local experience\n\nLeveraging the _XCAppClipURL environment variable is helpful when you debug the code that handles the invocation URL. However, you need to ensure your App Clip provides a fast and reliable launch experience from various invocations. In addition, exploring imagery, text, and a call-to-action verb for the App Clip card is especially important because the App Clip card is the user’s first interaction when they launch your App Clip.\n\nTo test invocations and explore the design of your App Clip card during development, configure a local experience on your test device. With a local experience, you can launch your App Clip by:\n\nScanning an App Clip Code, QR code, or NFC tag you’ve created to launch the local experience. For information on creating App Clip Codes for testing, see Creating App Clip Codes with the App Clip Code Generator. To create a QR code or write an NFC tag, use your favorite tool.\n\nTapping a Smart Banner you added to your website or an App Clip card that appears in Safari or an SFSafariViewController.\n\nSharing a link to the website that displays a Smart App Banner. Make sure to add the sender of the message as a contact on the test device.\n\nNote that you don’t need to configure the Associated Domains Entitlement or associate the App Clip with your website to launch a local experience from App Clip Codes, QR codes, or NFC tags. However, testing invocations from a Smart App Banner or the App Clip card in Safari comes with prerequisites; for example, you need to associate your website with your App Clip and release a version with an App Clip on the App Store. To learn more about when the Smart App Banner appears and for information on supporting invocations from your website or the Messages app, see Supporting invocations from your website and the Messages app. To verify your configured App Clip experiences for a released app and App Clip, see Verify the configuration of your released App Clip below.\n\nTip\n\nAdd the Code Scanner and the NFC Tag Reader to Control Center by opening the Settings app and selecting Control Center.\n\nTo test your launch experience with a local experience:\n\nBuild and run your App Clip on your test device to make sure it’s cached on the test device. For example, with the Fruta sample code project, follow the instructions to configure it, then run the Fruta iOS Clip scheme. To download the sample code project, visit Fruta: Building a Feature-Rich App with SwiftUI.\n\nOn your test device, open the Settings app, navigate to the iOS developer settings by choosing Developer > Local Experiences, and select Register Local Experience.\n\nEnter the invocation URL you want to test. In some cases, it may be a simple URL prefix like https://fruta.example.com. It can also be a longer invocation URL with path and query parameters.\n\nEnter the bundle ID of your App Clip.\n\nProvide a title and a subtitle. For the Fruta sample code project, you could enter Order a smoothie. as the title and It’s yummy! as the subtitle.\n\nSelect a call-to-action; for example Open.\n\nChoose a photo you want to use as the App Clip card’s header image.\n\nNote\n\nIn addition to building and running your App Clip on your test device to cache it on the device, you can also manually add the .ipa file of your App Clip to the device. First, archive the full app that corresponds with your App Clip. Then, in Xcode, export the App Clip for Ad Hoc or Development distribution. Finally, drag the exported .ipa file to a connected device that appears in the Devices and Simulators window.\n\nThe following screenshot shows the interface you use to configure a local experience on iPhone:\n\nWhen you configure a local experience on a device, the local experience takes precedence over App Clip experiences you configure in App Store Connect. However, local experiences only launch an App Clip that’s signed for Development, Ad Hoc, or TestFlight distribution. They don’t launch an App Clip or full app that’s published on the App Store. Remember to remove the local experience before testing App Clip experiences you configure in App Store Connect.\n\nCreate App Clip experiences for testers in TestFlight\n\nA reliable user experience is crucial to App Clips and requires spending time to test all user flows and supported invocations. To help make sure your App Clip works as expected, you can make your App Clip available to testers in TestFlight. First, upload an app with an App Clip to App Store Connect. Then, in App Store Connect, navigate to the uploaded build. In the App Clip section, you can configure up to three different App Clip experiences for testing.\n\nImportant\n\nUnlike local experiences, creating an App Clip experience for testers in TestFlight requires you to associate your App Clip with your website. For more information on configuring associated domains, see Associating your App Clip with your website.\n\nUsers don’t install App Clips, and App Clips don’t appear on the Home Screen. Similarly, testers don’t install the beta version of your App Clip, and it also doesn’t appear on the Home Screen either. Instead, testers launch the App Clip experiences you configure for testing through the TestFlight app on their device.\n\nFor more information on configuring experiences for testing in App Store Connect, see Testing an App Clip Experience.\n\nTesters can also configure a local experience to launch the App Clip you distribute with TestFlight. However, you must still associate your App Clip with your website so testers can launch it from the TestFlight app. In addition, testers must launch the App Clip from an App Clip experience you configure for testing in App Store Connect at least once to ensure that the App Clip is cached on the device.\n\nRemove cached advanced App Clip experiences\n\nWhen you create a new advanced App Clip experience in App Store Connect, the new experience may not work right away because iOS caches App Clip experiences. To make sure an invocation launches a new App Clip experience, open the Settings app, navigate to the Developer section, and choose Clear Experience Cache.\n\nVerify the configuration of your released App Clip\n\nWhen you’ve released your app with an App Clip on the App Store, verify the configuration of your App Clip experiences to be sure that your website displays the Smart App Banner and that the App Clip appears on users’ devices:\n\nConfigure a default and optional advanced App Clip experiences in App Store Connect and release the version of your app that contains the App Clip on the App Store.\n\nOn iPhone, open the Settings app, and navigate to the iOS developer settings by choosing Developer.\n\nChoose Diagnostics in the App Clips Testing section.\n\nEnter the URL of the website you associated with your App Clip and that you use for your App Clip experiences — for example, https://fruta.example.com.\n\nWhen you enter a URL, the system verifies your App Clip configuration and indicates whether you:\n\nRegistered an advanced App Clip experience\n\nPublished your App Clip on the App Store\n\nAssociated your App Clip with the entered URL\n\nPicked an invocation URL that fits into an App Clip Code\n\nAdded a Smart App Banner to your website\n\nIf the system found issues with your configuration, the App Clip diagnostics functionality on iPhone indicates errors and offers links to App Clip documentation to help resolve issues. Note that advanced App Clip experiences and displaying a Smart App Banner on your website are optional but recommended steps that help users discover your App Clip."
  },
  {
    "title": "Enabling notifications in App Clips | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/enabling_notifications_in_app_clips",
    "html": "Overview\n\nSome App Clips may need to schedule or receive notifications to provide value. Consider an App Clip that allows users to order food for delivery: By sending notifications, the App Clip informs the user about an upcoming delivery. If notifications are important for the functionality provided by your App Clip, enable it to schedule or receive notifications for up to 8 hours after each launch. Additionally, if you create an App Clip for multiple businesses, be sure to make changes to your notification payloads.\n\nImportant\n\nIf a user returns to a previously launched App Clip from a notification, the App Clip launches without an invocation URL. You must handle this scenario in both your App Clip and your full app. For more information on invocations, see Responding to invocations.\n\nSchedule or receive notifications temporarily\n\nTo enable your App Clip to schedule or receive notifications for up to 8 hours after each launch, first add the NSAppClip key to your App Clip’s Info.plist file and set its type to Dictionary. Then, add an entry to the dictionary with the NSAppClipRequestEphemeralUserNotification key. Set its type to Boolean and its value to true.\n\nAlternatively, open the Info.plist file in the property list editor and add the entry by selecting App Clip from the list of keys. This adds the NSAppClip key and two entries of type Boolean to its dictionary: “Requests ephemeral user notifications” and “Requests location confirmation”. Per default, the value for both entries is NO. Change the value for “Requests ephemeral user notifications” to YES.\n\nAs a result, the App Clip card that’s displayed upon invocation of the App Clip contains a note that tells the user about the App Clip’s ability to receive or schedule notifications. This permission is enabled by default, but users can disable it by tapping the note on the App Clip card.\n\nBecause users can disable notifications in the App Clip card, add code to check whether the App Clip has permission to schedule and receive notifications. The following code checks whether the user has granted permission to send notifications for a short amount of time:\n\nlet center = UNUserNotificationCenter.current()\ncenter.getNotificationSettings { (settings) in {\n    if settings.authorizationStatus == .ephemeral {\n\n\n        // The user didn’t disable notifications in the App Clip card.\n        // Add code for scheduling or receiving notifications here.\n        return\n    }\n}\n\nRequest explicit permission to send notifications\n\nIf your App Clip’s functionality spans more than a day, explicitly request the user’s permission to send notifications. For example, a car rental company’s App Clip can ask for permission to receive notifications that remind users when they need to return a rented car.\n\nHowever, carefully consider whether you should ask for this permission. Users could deny the request, overriding the App Clip’s ability to receive and schedule notifications for up to 8 hours after each launch.\n\nFor more information, see Asking permission to use notifications.\n\nMake changes to your notification payload\n\nYou may create an App Clip for multiple businesses. For example, you may be a platform provider for restaurants and create an App Clip that serves many different restaurants. If a user launches the App Clip consecutively for several different businesses within a short amount of time, multiple instances of the App Clip may exist on their device.\n\nIn this case, when it receives a notification, the system needs to route the notification to the appropriate App Clip instance. As a result, the system requires notification payloads to contain a URL as the target content identifier. The following code shows the notification payload for an App Clip that serves multiple businesses:\n\n{\n    \"aps\" : {\n        \"alert\" : {\n            \"title\" : \"Order Status\",\n            \"subtitle\" : \"Restaurant A\",\n            \"body\" : \"Your order is ready.\"\n        },\n        \"category\" : \"order_status\",\n        \"target-content-id\" : \"https://example.com/restaurants/restaurant_a/order/1234\"\n    }\n} \n\n\nThe value for the target-content-id must be a URL that matches a corresponding advanced App Clip experience. For the restaurant example, you’d register both URLs in App Store Connect:\n\nhttps://example.com/restaurants/restaurant_a\n\nhttps://example.com/restaurants/restaurant_b\n\nThe invocation URLs and target content identifiers could then be:\n\nhttps://example.com/restaurants/restaurant_a/order/1234\n\nhttps://example.com/restaurants/restaurant_b/order/5678\n\nIn general, use a target content identifier that’s as specific as possible. Similarly, if you enable your App Clip to schedule local notifications, set the target content identifier for the notification payload; for example, using targetContentIdentifier.\n\nFor more information, see Configuring the launch experience of your App Clip, Generating a remote notification, and Scheduling a notification locally from your app."
  },
  {
    "title": "Sharing data between your App Clip and your full app | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/sharing_data_between_your_app_clip_and_your_full_app",
    "html": "Overview\n\nWhen users of your App Clip install your full app, the full app replaces the App Clip and receives all invocations in its place. It’s important you provide a good user experience to users who have become familiar with the App Clip and are now starting to use the full app; for example:\n\nShow information in the app that the user entered when they used the App Clip.\n\nMake downloaded data available to the app.\n\nDon’t require users to log in to their account again.\n\nMaking App Clip data accessible to your full app is key to offering a smooth transition from App Clip to full app. Choose from the following technologies:\n\nAccess your public iCloud database in your App Clip.\n\nStore App Clip data and assets in a shared container and access them in your full app.\n\nStore sensitive App Clip data in the keychain and access it in your full app.\n\nUse Sign in with Apple to offer a seamless login experience.\n\nAccess your public iCloud database\n\nMaking sure your App Clip has access to the same data as your full app and keeping its data up to date are important things to consider when you create your App Clip. For example, an App Clip for restaurants needs to always show the latest weekly lunch menu that’s also available to users of your full app. Starting with iOS 16, your App Clip can use CloudKit to read data you store in a public iCloud database with CloudKit — including a Core Data store you mirror with a public CloudKit database. This enables your App Clip to access information that’s available to all users of your app — like the previously mentioned lunch menu for a restaurant app and App Clip.\n\nTo read your app’s public iCloud database, add the iCloud capability to your App Clip as described in Configuring iCloud services. The process is the same as for your full app. However, your App Clip can only set the CloudKit-Anonymous value for the iCloud Services Entitlement. Xcode chooses this value for you when you add the iCloud capability to your App Clip target. After you’ve added the iCloud capability to your App Clip target, specify the container your App Clip should access, and access your data just like you do in your regular app.\n\nImportant\n\nYour App Clip can’t write data to the public database. It can’t use iCloud Documents, iCloud key-value storage, or private and shared containers.\n\nFor more information on iCloud and public databases, see Build Apps Using CloudKit and Designing apps using CloudKit.\n\nMake local App Clip data available to the full app\n\nYour App Clip can make its local data accessible to your corresponding full app by storing data in a shared container. The full app can then access this local data when it replaces the App Clip, providing a positive user experience.\n\nTo store local data in a shared container:\n\nAdd the App Groups capability to the targets of both the App Clip and the full app. For more information about configuring App Groups, see Configuring App Groups.\n\nFor both targets, add the same app group to the capability; for example, group.exampleApp.appClipMigration.\n\nAdd code to your App Clip target that obtains the URL of the shared container using containerURL(forSecurityApplicationGroupIdentifier:) and store data using this URL; for example, by using write(to:atomically:encoding:).\n\nIn your full app’s code, use the same function to obtain the URL of the shared container and access its content; for example, by using init(contentsOf:encoding:).\n\nIn addition to a shared container, the App Clip can also store information in a shared UserDefaults instance that’s accessible to the full app. The following code uses the configured app group to create the shared UserDefaults instance and store a string:\n\nguard let sharedUserDefaults = UserDefaults(suiteName: \"group.exampleApp.appClipMigration\") else {\n    // Error handling\n}\nsharedUserDefaults.set(\"A sample string\", forKey: \"sharedText\")\n\n\nWhen users install the full app, it can access the shared user defaults. For example, access the string stored in the previous code using the following code snippet:\n\nguard let sharedUserDefaults = UserDefaults(suiteName: \"group.exampleApp.appClipDataMigration\") else {\n    // Error handling\n}\nguard let migratedData = sharedUserDefaults.string(forKey: \"sharedText\") else { return }\n\n\nTo preserve user privacy across apps and App Clips, an App Clip can only share its data with its corresponding app. Don’t store sensitive user information, such as passwords, in a shared app container or in user defaults. However, if your App Clip requires people to log in to an account to offer its functionality, you likely want to offer a seamless upgrade experience to the full app. In this case, you might store an API key, hashed user ID, or similarly anonymized identifier in the shared app container or in user defaults. Then, you can use the identifier when the user launches the full app to offer a more seamless upgrade experience that doesn’t require them to again log in.\n\nReview keychain usage\n\nThe keychain offers a secure way to store sensitive information. Storing and reading App Clip data in the keychain generally works the same as for your full app. However, be aware of the following behavior when using the keychain:\n\nYour App Clip can’t access data your full app stores in the keychain. For example, say your app stores login information in the keychain. A user later uninstalls the app only to later launch your App Clip from an invocation. In the App Clip, they’ll need to log in again because your App Clip can’t access the stored login information that may have remained in the keychain.\n\nOn devices that run iOS 15.3 or earlier, you can’t make information the App Clip stores in the keychain accessible to its corresponding full app. If your App Clip requires people to log in to an account to offer its functionality, don’t make the user sign in a second time in the full app. Instead, store an API key or hashed user ID in the shared app container as described above, or offer Sign in with Apple.\n\nStarting with iOS 15.4, information that the App Clip stores in the keychain is accessible to its corresponding full app. To make sure only the corresponding full app receives access to keychain items stored by the App Clip, the system uses the com.apple.developer.associated-appclip-app-identifiers and Parent Application Identifiers Entitlement entitlements. When you create an App Clip with Xcode, it adds the Parent Application Identifiers Entitlement. It automatically adds the com.apple.developer.associated-appclip-app-identifiers entitlement when you archive the app that contains the App Clip.\n\nA user may frequently install and uninstall your app and use the App Clip before reinstalling your app. If your full app and your App Clip write the same data to the keychain, make sure your code handles the following cases:\n\nThe keychain may contain multiple copies of the same data and they’re accessible to the full app, especially if you use kSecClassKey because the entries have different public key hash values.\n\nA keychain item by the App Clip might overwrite an item that a previous installation of the full app created.\n\nThese cases are especially common when a person frequently installs and uninstalls the full app and launches the App Clip in between — for example, when you develop your app and your App Clip at the same time. To avoid errors caused by duplicated or overwritten keychain data, add code that:\n\nChecks if more than one copy of an item exists in the keychain\n\nUses different values for kSecAttrLabel to distinguish between items stored by your app and your App Clip\n\nDecides which information to use if there’s a duplicate\n\nDeletes any unneeded items stored in the keychain\n\nThe following example shows how your App Clip can store a sensitive string in the keychain. Note how the code sets the kSecAttrLabel attribute to the fruta-appclip value to distinguish it from a keychain entry that the app creates.\n\n// Write sensitive information you use in your App Clip to the keychain — for example, an authentication token.\nlet addSecretsQuery: [String: Any] = [\n    kSecClass as String: kSecClassGenericPassword,\n    kSecValueData as String: \"smoothie-secret\".data(using: .utf8),\n    kSecAttrLabel as String: \"fruta-appclip\"\n]\nSecItemAdd(addSecretsQuery as CFDictionary, nil)\n\n\nWhen a user installs the full app, read the sensitive information that the App Clip stored as shown in the following example:\n\n// Read the sensitive information from the keychain that your App Clip stored.\nvar readSecretsQuery: [String: Any] = [\n    kSecClass as String: kSecClassGenericPassword,\n    kSecReturnAttributes as String: true,\n    kSecAttrLabel as String: \"fruta-appclip\",\n    kSecReturnData as String: true\n]\nvar secretsCopy: AnyObject?\nSecItemCopyMatching(readSecretsQuery as CFDictionary, &secretsCopy)\n\n\n\n\nFor more information on using the keychain to store sensitive information, see Using the keychain to manage user secrets and Keychain services.\n\nOffer Sign in with Apple\n\nApp Clips may use any technology to allow users to sign in to their account or create one. However, if your App Clip requires users to log in to an account, consider offering Sign in with Apple. In addition to helping provide a simple, secure, and privacy-preserving account creation and sign-in experience, it offers a positive experience when a user starts using the full app.\n\nIf you offer Sign in with Apple and create a shared data container, create a user experience that doesn’t require users to log in again when they start using the full app. The following code stores the ASAuthorizationAppleIDCredential in a shared UserDefaults instance:\n\nlet groupUserDefaults = UserDefaults(suiteName: \"group.com.example.appClipDataMigration\")\nguard let credential = authorization.credential as ASAuthorizationAppleIDCredential else { return }\ngroupUserDefaults?.set(credential.user, forKey: \"SavedUserID\")\n\n\nIn the app’s code, retrieve the stored Apple ID authorization credential and use it to sign in the user:\n\nlet provider = ASAuthorizationAppleIDProvider()\nlet groupUserDefaults = UserDefaults(suiteName: \"group.com.example.appClipDataMigration\")\nlet user = groupUserDefaults?.get(\"SavedUserID\")\nprovider.getCredentialState(forUserID: user) { state, error in\n    if state == .authorized {\n        readFavoriteSmoothies(user)\n    }\n}\n\nSee Also\nApp Clip to full app transition\nRecommending your app to App Clip users\nDisplay an overlay in your App Clip to recommend your app to users."
  },
  {
    "title": "Interacting with App Clip Codes in AR | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/interacting_with_app_clip_codes_in_ar",
    "html": "Overview\n\nThe sample app Seed Shop provides gardeners with previews of fully grown plants. At the nursery, Seed Shop identifies the plant from an App Clip Code on a seed packet, and displays the adult plant in 3D. With the help of AR, the buyer can see, for example, the real height of a typical Mammoth sunflower by inspecting the virtual plant at scale, relative to real objects in the camera feed.\n\nWhen a user with a device running iOS & iPad OS 14.3 or later scans the seed packet’s App Clip Code with their camera or Code Scanner, the sample project’s App Clip provides a virtual image of the plant.\n\nIf the user indicates they may buy a particular plant in the App Clip experience, Seed Shop suggests the user download the full version of the app to preview the plant in their own garden. This sample project builds the App Clip Code provided on the seed packet at the garden store, allowing the user to view an AR version of the plant before purchase.\n\nConfigure the Sample Code Project\n\nTo configure Seed Shop for code signing, first set a development team on each target. Define a unique bundle ID for the targets, and set the App Clip’s parent application identifiers entitlement.\n\nNext, set the hostname for the App Clip experience URL in the Associated Domains entitlement. The process of setting the hostname requires an explicit App ID, provided by a development team member with Admin permission. For more information on setting a development team, bundle ID, and entitlements, see Creating an App Clip with Xcode.\n\nRun the following command to generate an App Clip Code from the App Clip Code Generator:\n\nAppClipCodeGenerator generate --url https://developer.apple.com/sunfl --index 0 --output ~/Downloads/AppClipCode-sunflower.svg --logo badge\n\n\nTo add the sample’s App Clip Codes to the environment, you can display them on another device or print them out. For more on creating App Clip Codes, see Creating App Clip Codes.\n\nThe App Clip Codes in Seed Shop display on a package of seeds. Add this image of a seed packet to your physical environment by displaying it on another device or printing it out.\n\nNote\n\nYou must set the run destination to an actual device. The Simulator doesn’t support augmented reality.\n\nEnsure Device Support and Run a Session\n\nIn viewDidLoad, the sample app calls supportsAppClipCodeTracking to check if the device contains the Apple Neural Engine (ANE), which App Clip Code tracking requires.\n\nguard ARWorldTrackingConfiguration.supportsAppClipCodeTracking else {\n    displayUnsupportedDevicePrompt()\n    return\n\n\nTo search the environment for physical codes, the sample sets appClipCodeTrackingEnabled to true before running the session.\n\nnewConfiguration.appClipCodeTrackingEnabled = true\narView.session.run(newConfiguration)\n\nIdentify the App Clip Code that Launched the Experience\n\nWhen the user points the device at an App Clip Code using the camera or Code Scanner, the system launches its associated App Clip, or if present, the full app.\n\nIn the AR experience, the sample code checks the NSUserActivity invocation URL to identify the App Clip Code that invoked the app or App Clip.\n\nfunc scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n    for activity in connectionOptions.userActivities where activity.activityType == NSUserActivityTypeBrowsingWeb {\n        appClipCodeURL = activity.webpageURL\n\n\nThe source of the URL depends on how the App Clip launched:\n\nThe invocation URL is the _XCAppClipURL scheme environment variable when Xcode launches the app or App Clip. For more information, see Testing the launch experience of your App Clip.\n\nThe invocation URL is the invoking App Clip Code’s URL when the system launches the app or App Clip in the device’s camera feed or through the Code Scanner.\n\nThere may be multiple App Clip Codes visible in the camera feed that share the same url; for more information, see ARAppClipCodeAnchor.\n\nIf an app interacts with a single App Clip Code, the app can limit its interaction with App Clip Codes that encode the invocation URL. For simplicity, the sample allows the user to scan any associated App Clip Code. However, because the sample app downloads custom assets over the web per App Clip Code, the sample app begins downloading assets for the invocation URL immediately, in anticipation that ARKit will recognize the invoking App Clip Code in the camera feed.\n\nprocess(productKey: getProductKey(from: appClipCodeLaunchURL), initializePreview: false)\n\nGuide the User with Messaging\n\nThe device may pan away from the App Clip Code that launched the experience in the time it takes for the system to transition from the camera or Code Scanner to the app or App Clip. In the event ARKit doesn’t immediately find the App Clip Code in the camera feed, the sample app displays text instructing the user what to do.\n\nclass AppClipCodeCoachingOverlayView: UILabel {\n    init(parentView: UIView) {\n        super.init(frame: .zero)\n        text = \"Scan code to start\"\n\n\nLaunch the App Clip in Code Scanner\n\nDuring development, the sample project can launch the App Clip target in Xcode to test the AR experience. After the target launches once, the device scans the test App Clip Code with Code Scanner to invoke the App Clip.\n\nNote\n\nControl Center disables Code Scanner by default. Open Control Center Settings on the device and click the “+” button to enable Code Scanner.\n\nTo associate an App Clip Code to the App Clip during development, Seed Shop sets up an App Clip local experience. The sample app requires a local experience URL prefix of https://developer.apple.com, and a bundle ID of com.example.apple-samplecode.AppClipCodesExampleApp1.Clip.\n\nFor more on local experiences, see Testing the launch experience of your App Clip.\n\nSet Up an App Clip Experience in App Store Connect\n\nAt runtime, the system checks the App Clip registry in App Store Connect to ensure an App Clip associates to an App Clip Code before allowing the app access to the App Clip Code URL. For more information, see url.\n\nTo decode App Clip Code URLs, Seed Shop sets up an App Clip experience in App Store Connect, and defines the App Clip experience URL of https://developer.apple.com. The value of the App Clip experience URL maps to a server that’s unique and depends on the development team. For more information, see Set up an App Clip experience.\n\nThe app generates App Clip Codes that associate to the App Clip experience in App Store Connect by uploading a CSV file containing the App Clip Code URLs. The fully qualified domain name of each URL matches the App Clip experience URL. The URL suffix identifies the context-specific items or locations with which the App Clip interacts. The sample app identifies a seed packet for a sunflower. To create an App Clip Code for the sunflower, the sample requires a CSV file containing the URL:\n\nhttps://developer.apple.com/sunfl\n\n\nWhen testers view App Clip Codes to launch the App Clip or decode ARAppClipCodeAnchor URLs in an AR experience, the framework refers to the device’s local experience. Otherwise, the system displays the App Clip card in the device camera, and allows ARAppClipCodeAnchor URL decoding, only for App Clip experience URLs of app-review approved App Clips. For more information, see Test an App Clip Experience.\n\nImportant\n\nDuring testing in the TestFlight app, the three experience URLs in App Store Connect’s TestFlight area change the invocation URL the system passes into the App Clip, but they don’t affect ARAppClipCodeAnchor URL decoding.\n\nConfigure the Server and Targets for App Site Association\n\nApp Store Connect allows an app to define a particular App Clip experience URL if the server hosting the URL’s domain approves of it via Apple App Site Association. In addition, the framework performs an equivalent runtime check before allowing the App Clip or parent app to decode ARAppClipCodeAnchor URLs that are within the App Clip experience’s domain. This check occurs for local and App Store Connect experiences. To express approval, the server provides the App Clip’s and parent app’s fully qualified application identifiers in an Apple App Site Association (AASA) file’s appclips node.\n\n\"appclips\": {\n    \"apps\": [\n        \"A93A5CM278.com.example.apple-samplecode.AppClipCodesExampleApp1.Clip\",\n        \"A93A5CM278.com.example.apple-samplecode.AppClipCodesExampleApp1\"\n    ]\n}\n\n\nSeed Shop requires the AASA file that the Apple Developer website hosts at https://developer.apple.com/.well-known/apple-app-site-association. Navigate the URL in Safari and inspect its appclips node to see the sample app’s AASA configuration.\n\nThe sample project enables the Associated Domains capability on both targets. The key’s value is the fully qualified domain of the sample project’s App Clip experience URL.\n\n<key>com.apple.developer.associated-domains</key>\n<array>\n    <string>appclips:developer.apple.com</string>\n</array>\n\n\nFor more on configuring AASA for App Clips, see Associating your App Clip with your website.\n\nRecognize an App Clip Code and Decode the URL\n\nWhen ARKit recognizes an App Clip Code in the camera feed, it instantiates an ARAppClipCodeAnchor and passes it to the session(_:didAdd:) callback. Since the user succeeded in scanning a code, the sample app hides the instructional text.\n\nfunc session(_ session: ARSession, didAdd anchors: [ARAnchor]) {\n    for anchor in anchors {\n        if anchor is ARAppClipCodeAnchor {\n            // Hide the coaching overlay since ARKit recognized an App Clip Code.\n            appClipCodeCoachingOverlay.setCoachingViewHidden(true)\n\n\nAccess the anchor’s URL for context-specific information about the recognized App Clip Code. The URL is nil until the anchor’s urlDecodingState is ARAppClipCodeAnchor.URLDecodingState.decoded. To check for decoding state changes, the sample app monitors the session(_:didUpdate:) callback.\n\nfunc session(_ session: ARSession, didUpdate anchors: [ARAnchor]) {\n    for anchor in anchors {\n        if let appClipCodeAnchor = anchor as? ARAppClipCodeAnchor, appClipCodeAnchor.urlDecodingState != .decoding {\n            let decodedURL: URL\n            switch appClipCodeAnchor.urlDecodingState {\n            case .decoded:\n                    decodedURL = appClipCodeAnchor.url!\n                    if !decodedURLs.contains(decodedURL) {\n                        decodedURLs.append(decodedURL)\n                        process(productKey: getProductKey(from: decodedURL))\n\n\nIf Seed Shop fails to decode the URL, the sample project uses a test URL.\n\nvar testAppClipCodeURL = URL(string: \"https://developer.apple.com/sunfl\")!\n\n\nFor more on URL decoding failure, see ARAppClipCodeAnchor.URLDecodingState.failed.\n\nNote\n\nThe sample project bundles seed packaging material that displays App Clip Codes, but an app might situate App Clip Codes differently. For detailed guidance on displaying App Clip Codes in the environment, see App Clip Code Human Interface Guidelines.\n\nRetrieve a Product’s 3D Model\n\nWhen ARKit decodes an App Clip Code’s URL, the sample app parses the URL suffix to get the product name.\n\nfunc getProductKey(from url: URL) -> String { return url.lastPathComponent }\n\n\nThe app implements a custom URL mapping system using the project’s modelURLFor dictionary. Each dictionary key is an App Clip Code’s URL suffix, and the value represents the seed packet’s corresponding grown plant 3D asset.\n\nlet modelURLFor: [String: URL] = [\n    \"sunfl\": URL(string: \"https://developer.apple.com/sample-code/ar/sunflower.usdz\")!\n]\n\n\nThe sample app downloads the asset and prepares the 3D model using the mapped contentURL.\n\nextension ViewController {\n    func process(productKey: String, initializePreview: Bool = true) {\n        if let modelURL = modelURLFor[productKey] {\n            process(modelURL: modelURL, productKey: productKey)\n\n\nfunc process(modelURL: URL, productKey: String) {\n    let contentLoad = CachingWebLoader.shared.cachedWebLoad(url: modelURL)\n\nSearch for Product Packaging\n\nThe sample project’s URL mapping system includes an image of the product’s packaging material on which to place the product’s 3D model in the environment.\n\nlet imageURLFor: [String: URL] = [\n    \"sunfl\": URL(string: \"https://developer.apple.com/sample-code/ar/sunflower.jpg\")!\n]\n\n\nARKit estimates the 3D position and orientation of each ARAppClipCodeAnchor, but ARImageAnchor serves as a better platform on which to place virtual content for several reasons:\n\nSmall physical size impacts ARKit’s tracking accuracy, and App Clip Codes typically run small on product packaging or in an advertisement.\n\nARKit manages the removal of App Clip Code anchors from the session whereas the app controls whether to remove an image anchor. As a result, the image anchor is less likely to go away.\n\nImportant\n\nAn app may require another content anchoring technique, such as placing virtual content instantly after retrieving a position on a nearby horizontal or vertical plane. To ray cast on horizontal planes, see Placing Objects and Handling 3D Interaction.\n\nTo search the environment for the product’s packaging image, the sample downloads the image that the mapping URL references and then creates an ARReferenceImage.\n\nfunc process(imageURL: URL, productKey: String, initializeImageAnchor: Bool) {\n    if initializeImageAnchor {\n        let imageLoader = CachingWebLoader.shared.cachedWebLoad(url: imageURL) { [weak self] url in\n            DispatchQueue.global(qos: .userInitiated).async {\n                if\n                    let dataProvider = CGDataProvider(url: url as CFURL),\n                    let image = CGImage(\n                        jpegDataProviderSource: dataProvider,\n                        decode: nil,\n                        shouldInterpolate: false,\n                        intent: .absoluteColorimetric\n                    )\n                {\n                    let modelAnchorImage = ARReferenceImage(\n                        image,\n                        orientation: .up,\n                        // Note: the width of the sample seed packet is about 8cm.\n                        physicalWidth: 0.08\n                    )\n\n\nFor more information about image tracking, see Tracking and altering images.\n\nDisplay the 3D Asset\n\nWhen the user pans the device from the scanned App Clip Code to its downloaded packaging image, ARKit identifies the seed packet’s real-world location and displays the full-grown plant on top.\n\nWhen ARKit recognizes the packaging image, the session creates an image anchor and passes it into the session(_:didAdd:) callback. The app displays the virtual product on top of the image by calling its present(_:on) function.\n\nif let imageAnchorForModel = self?.imageAnchorFor[productKey], let self = self {\n    self.modelFor[productKey]!.present(on: imageAnchorForModel)\n\n\nAs the user views the virtual plant, the App Clip waits for the user to scan another seed packet. During this time, the App Clip can provide information about the features of the full app. For example, the Seed Shop App Clip might offer the user the ability to download the full app to preview the full-grown plant in their garden. For recommendations about showcasing an app in an App Clip, see App Clip Human Interface Guidelines.\n\nSee Also\nApp Clip Codes\nclass ARAppClipCodeAnchor\nAn anchor that tracks the position and orientation of an App Clip Code in the physical environment."
  },
  {
    "title": "Preparing multiple App Clip Codes for production | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/preparing_multiple_app_clip_codes_for_production",
    "html": "Overview\n\nAfter you create your App Clip Codes, you can print them yourself, or work with a professional printing service — for example, RR Donnelley. However, if you have a lot of App Clip Codes, printing them yourself doesn’t scale well, and you’ll have more success working with a professional printing service.\n\nBecause you can’t see which invocation URL your App Clip Code contains just by looking at it, you need to keep track of your SVG files and their corresponding URLs. Careful file management, versioning, and change tracking are key to avoiding faulty print runs.\n\nFor additional information, see Human Interface Guidelines > App Clips > Printing Guidelines.\n\nMap SVG filenames to invocation URLs\n\nIn general, it’s up to you to decide how to keep track of changes and which SVG files map to which invocation URLs. In most cases, a mapping file that uses the comma-separated values (CSV) file format is the preferred option.\n\nTo reduce the risk of human error and simplify change tracking, consider using a single mapping file to create your SVG files before sending them to a printing service.\n\nIf you’re working with RR Donnelley to produce App Clip Codes:\n\nCreate a ZIP file that contains the SVG files for your App Clip Codes and the mapping file in its root folder.\n\nThe mapping file must be a CSV file with one field named SVG File Name and another named URL, with each row representing one App Clip Code.\n\nThe ZIP file may contain up to 10,000 SVG files, and the mapping file may contain up to 10,000 corresponding entries.\n\nThe maximum length for any filename (ZIP file, SVG files, or mapping file) is 188 characters.\n\nThe following code shows the contents of a mapping file with entries for two App Clip Codes:\n\nSVG File Name, URL\nAppClipCode1.svg, https://example.com\nAppClipCode2.svg, https://appclip.example.com/\n\n\nSee Also\nApp Clip Codes\nCreating App Clip Codes\nHelp users discover your App Clip by using an NFC-integrated or scan-only App Clip Code.\nInteracting with App Clip Codes in AR\nDisplay content and provide services in an AR experience with App Clip Codes."
  },
  {
    "title": "Launching another app’s App Clip from your app | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/launching_another_app_s_app_clip_from_your_app",
    "html": "Overview\n\nStarting with iOS 17, an app can launch another app’s App Clip using the invokation URL of the App Clip. For example, if you develop several apps, your apps can launch your other apps’ App Clips to allow people to use their functionality without requiring an app installation. Or, your app could offer to launch another developer’s App Clip if your app offers workflows that involve usage of the other app. Depending on the App Clip and its invokation URL, choose from the following options to allow people to invoke an App Clip from your app:\n\nTo display a rich preview and allow people to launch default or advanced App Clip experiences, use the Link Presentation framework.\n\nTo allow people to launch a default App Clip experience that makes use of default App Clip links, use Link or open(_:options:completionHandler:).\n\nDisplay a preview of the App Clip\n\nUse the Link Presentation framework to include a rich preview of the App Clip in your app that people tap to launch the App Clip directly:\n\nTo fetch metadata using the invokation URL of the App Clip, use LPMetadataProvider.\n\nTo display the App Clip preview, use the metadata you receive in an LPLinkView.\n\nThe following example fetches the metadata and then passes it to a link view.\n\nlet provider = LPMetadataProvider()\nlet url = URL(string: \"https://appclip.example.com/\")!\nvar linkView = ... // A reference to the link view. This could also be a custom view that contains the LPLinkView.\n\n\nprovider.startFetchingMetadata(for: url) { (metadata, error) in\n    guard let metadata = metadata else {\n        // The fetch failed; handle the error.\n        return\n    }\n\n\n    DispatchQueue.main.async {\n        // Create the LPLinkView using the metadata. If you use a custom view, you could pass the metadata to the custom view and let it handle the creation or formatting of the LPLinkView.\n        linkView = LPLinkView(metadata: metadata)\n    }\n}\n\nDisplay a direct link to an App Clip\n\nIf the App Clip uses default App Clip links for its default App Clip experience, you can display a direct link that launches the App Clip. In a SwiftUI app, use Link as shown in the following example that displays a link to the Backyard Birds: Building an app with SwiftData and widgets app:\n\nvar body: some View {\n    let appClipURL = URL(\n        string: \"https://appclip.apple.com/id?p=com.example.naturelab.backyardbirds.Clip\"\n    )!\n\n\n    Link(\"Backyard Birds\", destination: appClipURL)\n}\n\n\nIf you use UIKit, use open(_:options:completionHandler:) to allow people to invoke the App Clip:\n\nfunc launchAppClip() {\n    let appClipURL = URL(\n        string: \"https://appclip.apple.com/id?p=com.example.naturelab.backyardbirds.Clip\"\n    )!\n\n\n    UIApplication.shared.open(appClipURL)\n}\n\n\nSee Also\nLaunch\nConfiguring the launch experience of your App Clip\nReview how people launch your App Clip, identify invocation URLs, make use of default App Clip links, and configure experiences in App Store Connect.\nAssociating your App Clip with your website\nEnable the system to verify your App Clip to support invocations in iOS 16.3 or earlier and from your website.\nSupporting invocations from your website and the Messages app\nDisplay a Smart App Banner and the App Clip card on your website that people tap to launch your App Clip, and add support for invocations from the Messages app.\nResponding to invocations\nAdd code to respond to invocations and offer a focused launch experience.\nConfirming a person’s physical location\nAdd code to quickly confirm a person’s physical location while respecting their privacy.\nclass APActivationPayload\nInformation that’s passed to an App Clip on launch.\nproperty list key NSAppClip\nA collection of keys that an App Clip uses to get additional capabilities.\nName: App Clip"
  },
  {
    "title": "Confirming a person’s physical location | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/confirming_a_person_s_physical_location",
    "html": "Overview\n\nIf you create an App Clip that people invoke at a physical location, you may need to confirm a person’s location before allowing them to perform a task. For a quick launch and to preserve user privacy, App Clips use a lightweight mechanism in which the system verifies that a person is at a specific, expected location. When you adopt this mechanism, and when people allow it, the App Clip card contains a note that tells people that the App Clip can verify their location. They can disable location verification by tapping the note on the App Clip card.\n\nEnable your App Clip to verify a person’s location\n\nTo enable your App Clip to verify the person’s location, modify your App Clip’s Info.plist file:\n\nOpen your App Clip’s Info.plist, add the NSAppClip key, and set its type to Dictionary.\n\nAdd an entry to the dictionary with NSAppClipRequestLocationConfirmation as the key, select Boolean as its type, and set its value to true.\n\nAlternatively, open the Info.plist file in the property list editor and add the entry by selecting App Clip from the list of keys. This adds the NSAppClip key and the following entries of type Boolean to its dictionary: “Requests ephemeral user notifications” and “Requests location confirmation.” Per default, the value for both entries is NO. Change the value for “Requests location confirmation” to YES.\n\nNote\n\nDon’t add an entry for the NSAppClipRequestLocationConfirmation key to your full app’s Info.plist — functionality to confirm a person’s location is only available to App Clips. Instead, modify your full app’s code to request permission to access the location of a device and make use of the Core Location framework. For more information, see Getting the current location of a device.\n\nAdd Code that verifies the physical location\n\nAfter you modify your App Clip’s Info.plist file, add code to provide the expected physical location information to the App Clip. To retrieve this information, encode an identifier in the URL that launches the App Clip, and use the identifier to look up the location information for a business in your database. Alternatively, encode the location information in the URL that launches the App Clip.\n\nOn launch, access the location information, use it to create a CLCircularRegion object with a radius of up to 500 meters, and pass it to the confirmAcquired(in:completionHandler:) function.\n\nThe following code verifies a person’s location when they launch the App Clip. Make sure to update your user interface for each possible result, including the case where a person denies access to location services on their device.\n\nimport UIKit\nimport AppClip\nimport CoreLocation\n\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n    \n    var window: UIWindow?\n    \n    // Call the verifyUserLocation(_:) function in all applicable lifecycle callbacks.\n\n\n    func verifyUserLocation(_ activity: NSUserActivity?) {\n        \n        // Guard against faulty data.\n        guard activity != nil else { return }\n        guard activity!.activityType == NSUserActivityTypeBrowsingWeb else { return }\n        guard let payload = activity!.appClipActivationPayload else { return }\n        guard let incomingURL = activity?.webpageURL else { return }\n\n\n        // Create a CLRegion object.\n        guard let region = location(from: incomingURL) else {\n            // Respond to parsing errors here.\n            return\n        }\n        \n        // Verify that the invocation happened at the expected location.\n        payload.confirmAcquired(in: region) { (inRegion, error) in\n            guard let confirmationError = error as? APActivationPayloadError else {\n                if inRegion {\n                    // The location of the NFC tag matches a person's location.\n                } else {\n                    // The location of the NFC tag doesn't match the records,\n                    // for example, if someone moved the NFC tag.\n                }\n                return\n            }\n            \n            if confirmationError.code == .doesNotMatch {\n                // The scanned URL isn't registered for the App Clip.\n            } else {\n                // A person denied location access, or the source of the\n                // App Clip’s invocation isn't an NFC tag or visual code.\n            }\n        }\n    }\n\n\n    func location(from url:URL) -> CLRegion? {\n        let coordinates = CLLocationCoordinate2D(latitude: 37.334722,\n                                                 longitude: 122.008889)\n        return CLCircularRegion(center: coordinates,\n                                radius: 100,\n                                identifier: \"Apple Park\")\n    }\n}\n\n\nFor more information on how you can access the App Clip’s invocation URL, see Responding to invocations.\n\nSee Also\nLaunch\nConfiguring the launch experience of your App Clip\nReview how people launch your App Clip, identify invocation URLs, make use of default App Clip links, and configure experiences in App Store Connect.\nAssociating your App Clip with your website\nEnable the system to verify your App Clip to support invocations in iOS 16.3 or earlier and from your website.\nSupporting invocations from your website and the Messages app\nDisplay a Smart App Banner and the App Clip card on your website that people tap to launch your App Clip, and add support for invocations from the Messages app.\nResponding to invocations\nAdd code to respond to invocations and offer a focused launch experience.\nLaunching another app’s App Clip from your app\nEnable people to launch another app’s App Clip from your app with App Clip links and offer a rich preview of it with the Link Presentation framework.\nclass APActivationPayload\nInformation that’s passed to an App Clip on launch.\nproperty list key NSAppClip\nA collection of keys that an App Clip uses to get additional capabilities.\nName: App Clip"
  },
  {
    "title": "Responding to invocations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/responding_to_invocations",
    "html": "Overview\n\nA great launch experience that helps the user complete a task as quickly as possible is key to your App Clip. Upon launch, your App Clip needs to be aware of the user’s context and update its UI accordingly. For example, say an App Clip provides functionality to order a drink from a local coffee shop that has multiple physical locations. Instead of making the user select a location before displaying the drink menu, the App Clip recognizes the user’s context and updates its UI accordingly. The user doesn’t have to select a location, and can complete their task — ordering coffee to go — with fewer taps.\n\nTo enable the App Clip to respond to the user’s context upon launch, the system makes the invocation URL available to the App Clip. Configuring the launch experience of your App Clip and choosing invocation URLs are key tasks when creating an App Clip. However, configuring invocation URLs in App Store Connect isn’t enough to provide a streamlined launch experience. You also need to add code to your App Clip that handles the invocation URL and updates its UI.\n\nLeveraging the invocation URL\n\nBoth the App Clip and the full app need to respond to the invocation URL and update their UI to help the user quickly complete their task at hand. Consider the example of the coffee shop with multiple physical locations. The user shouldn’t have to select the location that matches their context before they can order a drink. Instead, the App Clip can make use of the invocation URL to update its UI to display the shop’s drink menu right away. For example, use an invocation URL with additional URL parameters that help the App Clip recognize the user’s context and update its UI:\n\nAdd entries for each domain that launches the App Clip to the Associated Domains Entitlement. For the example described above, you add example.com. You typically do this when you add an App Clip target to your Xcode project.\n\nUse invocation URLs that contain additional parameters; for example, https://example.com/location1, https://example.com/location2, and so on.\n\nOn launch, respond to the URLs by persisting any unsaved data in case the user switches from one location to another. Then, update the UI to match the new location.\n\nIf you configure a generic URL, both your App Clip and your full app must always be able to handle the URL, even if you only intend to use it as a prefix for your actual invocation URLs. For example, you can register https://example.com/ as part of an advanced App Store experience. For the actual invocations — such as in your App Clip Codes — you can use URLs like https://example.com/location1 or https://example.com/location2. However, your App Clip and full app must also be able to handle https://example.com.\n\nFor additional information on associating your App Clip with your website and configuring experiences, see Associating your App Clip with your website and Configuring the launch experience of your App Clip.\n\nAccess the invocation URL\n\nTo respond to an invocation, you need to access the invocation URL so your App Clip can tailor itself to the experience. To access the URL, query the NSUserActivity object the system passes to the App Clip upon launch. If a user installs the full app, it replaces the App Clip, and the system launches it with each invocation. To offer the same functionality and provide an equivalent user experience as the App Clip, the full app also needs to handle all invocation URLs. In most cases, it makes sense to share the code that handles your URL between full app and App Clip, and also have the App Clip store state information in a shared container. This way, the full app can access any data stored by the App Clip, and, upon launch, take the user to the part of the app that best matches their context.\n\nTo access the NSUserActivity object on launch:\n\nIf you use the SwiftUI lifecycle, apply the onContinueUserActivity(_:perform:) modifier. For additional information on implementing lifecycle callbacks for your SwiftUI app, see Restoring Your App’s State with SwiftUI.\n\nIf you use a scene-based lifecycle, implement the scene(_:willConnectTo:options:) and scene(_:willContinueUserActivityWithType:) callbacks. On the first launch, the system calls the scene(_:willConnectTo:options:) callback. If the app or App Clip is suspended in memory and the user launches it, the system calls scene(_:willContinueUserActivityWithType:).\n\nIf you use the UIApplicationDelegate object to respond to lifecycle events, be sure to implement the application(_:continue:restorationHandler:) callback. Note that you don’t have access to the NSUserActivity object in application(_:didFinishLaunchingWithOptions:).\n\nOn launch, confirm that the invocation is of type NSUserActivityTypeBrowsingWeb, then access the URL that the system passes to the App Clip. The following code shows a function that extracts components from the invocation URL:\n\nfunc respondTo(_ activity: NSUserActivity?) {\n        \n    // Guard against faulty data.\n    guard let activity, activity.activityType == NSUserActivityTypeBrowsingWeb else { return }\n    let incomingURL = activity.webpageURL\n    guard let components = NSURLComponents(url: incomingURL, resolvingAgainstBaseURL: true) else { return }\n\n\n    // Update the user interface based on URL components passed to the App Clip or full app.\n}\n\n\nFor more information about responding to lifecycle events, see Managing your app’s life cycle. For general information on handling links, see Supporting universal links in your app.\n\nTo learn more about sharing data between the App Clip and the full app, see Sharing data between your App Clip and your full app.\n\nEnsure your code handles all invocations\n\nA fast, consistent user experience that fits the user’s context is key to the App Clip user experience, and it’s why designing and configuring your App Clip experiences is so important. As a result, spending time to write resilient code, handling all possible invocation URLs, and testing the code is very important. Make sure you guard against faulty data and handle the following scenarios:\n\nInvocations from the Maps app and location-based suggestions from Siri Suggestions use the URL you register for an App Clip experience as the invocation URL.\n\nInvocations from Messages app or your website use the site’s URL as the invocation URL.\n\nIf a user returns to a previously launched App Clip from the App Library or Spotlight, the App Clip uses the invocation URL that it previously used to launch the App Clip.\n\nIf a user returns to a previously launched App Clip from a notification or the App Switcher, the App Clip launches without an invocation URL. To address this case, save the state of your App Clip before the user leaves it, and restore the saved state if the invocation URL isn’t available upon launch.\n\nSee Also\nLaunch\nConfiguring the launch experience of your App Clip\nReview how people launch your App Clip, identify invocation URLs, make use of default App Clip links, and configure experiences in App Store Connect.\nAssociating your App Clip with your website\nEnable the system to verify your App Clip to support invocations in iOS 16.3 or earlier and from your website.\nSupporting invocations from your website and the Messages app\nDisplay a Smart App Banner and the App Clip card on your website that people tap to launch your App Clip, and add support for invocations from the Messages app.\nConfirming a person’s physical location\nAdd code to quickly confirm a person’s physical location while respecting their privacy.\nLaunching another app’s App Clip from your app\nEnable people to launch another app’s App Clip from your app with App Clip links and offer a rich preview of it with the Link Presentation framework.\nclass APActivationPayload\nInformation that’s passed to an App Clip on launch.\nproperty list key NSAppClip\nA collection of keys that an App Clip uses to get additional capabilities.\nName: App Clip"
  },
  {
    "title": "Choosing the right functionality for your App Clip | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/choosing_the_right_functionality_for_your_app_clip",
    "html": "Overview\n\nAn App Clip is a lightweight version of your app that offers some of its functionality when and where it’s needed. It offers a focused feature set and is designed to launch instantly, protect user privacy, and preserve resources. As a result, an App Clip comes with some limitations. Before you create your App Clip, first review technology that’s available to App Clips and identify functionality that makes a great App Clip.\n\nNote\n\nYour full app can offer multiple App Clip experiences, but you have to package them as a single App Clip target. Additionally, the full app must include the same functionality as the App Clip.\n\nTo ensure a fast launch experience, App Clips must be small:\n\nIf you make your App Clip available on devices running iOS 15 and earlier, the uncompressed App Clip binary can be up to 10 MB in size.\n\nIf you make your App Clip available on devices running iOS 16 and later, the uncompressed App Clip binary can be up to 15 MB in size.\n\nIf you make your App Clip available on devices running iOS 17 and later, the uncompressed App Clip binary can be up to 50 MB in size if it meets the following conditions:\n\nThe App Clip only supports digital invocations — for example, from your website or Spotlight search — and not from physical invocations like App Clip Codes, QR codes, or NFC tags\n\nPeople use your App Clip in situations where a reliable internet connection is likely, for example, at home\n\nYour App Clip doesn’t support iOS versions prior to iOS 17\n\nAim to keep your App Clip well below the applicable limit. For more information, see Keep your App Clip small in size.\n\nReview available frameworks and APIs\n\nApp Clips make use of SwiftUI and UIKit, and have access to the same frameworks as your full app. However, the following frameworks provide no functionality at runtime: App Intents, Assets Library, Background Tasks, CallKit, CareKit, Contacts, Contacts UI, Core Motion, EventKit, EventKit UI, File Provider, File Provider UI, HealthKit, HomeKit, Media Player, Messages, Message UI, Nearby Interaction, PhotoKit, ResearchKit, SensorKit, and Speech.\n\nFor most unavailable framworks, using them in an App Clip doesn’t result in compile-time errors, but their APIs return values that indicate unavailability, empty data, or error codes at runtime. For example, HealthKit’s isHealthDataAvailable() returns false when you call it from an App Clip.\n\nApp Clips can’t perform background activity. For example, they can’t make use of the following functionality:\n\nBackground networking with URLSession\n\nFunctionality enabled by the Background Modes capability as described in Pushing background updates to your App\n\nThe ability to maintain Bluetooth connections while the App Clip isn’t in use\n\nSome frameworks are available to App Clips but offer only limited functionality, or using them requires special consideration:\n\nAdvanced networking features and low-level networking APIs\n\nAdvanced networking features like Bonjour and low-level networking APIs like CFSocket or POSIX functions aren’t available to App Clips. Instead, use URLSession or the Network framework.\n\nApp extensions\n\nApp Clips can’t include app extensions, but they can include a widget extension to offer Live Activities. For more information, see Offering Live Activities with your App Clip.\n\nCore Telephony\n\nFunctionality provided by Core Telephony is available to your App Clip. However, it can’t provision cellular plan eSIMs or use functionality that carrier apps with suitable entitlements use. For example, an App Clip can’t use CTCellularPlanProvisioning and CTCellularPlanProvisioningRequest.\n\nCloudKit\n\nCloudKit isn’t available to App Clips in iOS 14 or 15. Starting with iOS 16, your App Clip can read your public iCloud database. However, your App Clip can’t write data to the public database or use private or shared containers. Additionally, it can’t use iCloud Documents or iCloud key-value storage. To learn more about using CloudKit in your App Clip, see the Access your public iCloud database section of Sharing data between your App Clip and your full app.\n\nFace ID\n\nYou can’t use Face ID in your App Clip because the NSFaceIDUsageDescription entitlement isn’t available to App Clips. However, you can use the Local Authentication framework to authenticate people with Touch ID.\n\nNote that an App Clip may configure Wi-Fi networks using the Hotspot Configuration Entitlement. Additionally, to connect to an authentication provider, it may initialize an ASWebAuthenticationSession using init(url:callbackURLScheme:completionHandler:) with a callbackURLScheme.\n\nPreserve user privacy\n\nApp Clips come with limitations that help to protect user privacy and prevent user tracking across apps and App Clips, for example:\n\nFunctionality provided by SKAdNetwork isn’t available.\n\nApp Clips can’t request authorization to track a person with App Tracking Transparency.\n\nBoth name and identifierForVendor return an empty string.\n\nApp Clips can’t request continuous location access. However, you can call requestWhenInUseAuthorization() to request the When In Use authorization, which resets automatically the next day at 4:00 a.m.\n\nApp Clips can’t request the Pass Type IDs Entitlement to read passes stored in the Wallet app. However, if your App Clip contains functionality to add a pass to the Wallet app, you can check if this pass is already present. For more information, see Checking Whether a Pass Is in the Library.\n\nAn App Clip can’t share data with any other app except its corresponding full app. For more information, see Sharing data between your App Clip and your full app.\n\nTo help protect user data, they can’t access:\n\nApple Music and Media\n\nData from apps like Calendar, Contacts, Files, Health, Messages, Reminders, and Photos\n\nMotion and fitness data\n\nReserve certain functionality for your full app\n\nApp Clips provide an in-the-moment experience and focus on offering the quickest possible solution to an everyday task, so some functionality works best in your full app. Reserve the following functionality for the full app:\n\nApp extensions\n\nCustomization and settings, for example, creation of a settings bundle\n\nData handoff and document opening\n\nIn-app purchases\n\nLow-level UNIX functionality, for example, BSD notifications\n\nMultiple scenes on iPad\n\nOn-demand resources\n\nPromoting other apps\n\nRegistration of custom URL schemes\n\nRequests for reviews of the full app by using StoreKit’s requestReview(in:) method\n\nSearching for paired Bluetooth devices"
  },
  {
    "title": "Creating an App Clip with Xcode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/creating_an_app_clip_with_xcode",
    "html": "Overview\n\nAn App Clip is a lightweight version of your app that offers some of its functionality when and where people need it. With Xcode, you can add an App Clip target to your app’s project, share code and assets between the App Clip and the full app, and build, run, and debug your App Clip.\n\nAdd an App Clip target\n\nApp Clips require a corresponding full app that offers at least the same functionality as the App Clip; you use the same Xcode project for your full app and your App Clip. If you’re starting a new app project, first create a new iOS project with Xcode. If you want to add an App Clip to your existing iOS app, open its Xcode project. Then, add an App Clip target to the Xcode project:\n\nAdd a new target using the App Clip template.\n\nChoose a product name, select applicable options for your App Clip, and click Finish.\n\nXcode creates all required files for the options you choose and adds a target for your App Clip with:\n\nA scheme to build and run your App Clip and its tests\n\nA new capability named On Demand Install Capable that adds the com.apple.developer.on-demand-install-capable entitlement\n\nThe Parent Application Identifiers Entitlement\n\nAn app identifier for the App Clip, using the full app’s app identifier as its prefix, followed by a string. For example, if your full app’s app identifier is $(AppIdentifierPrefix)com.example.MyApp, the app identifier for your App Clip would be $(AppIdentifierPrefix)com.example.MyApp.Clip\n\nThe _XCAppClipURL environment variable for the scheme of your App Clip that allows you to debug invocations\n\nSupport for the same devices as the full app, not including macOS\n\nAdditionally, Xcode creates a new build phase for the app target that embeds the App Clip in the app\n\nBefore you add code to the App Clip target, run the App Clip in Simulator or on a device. At this point, the App Clip shows an empty white screen because you haven’t yet added any code and assets to the App Clip target.\n\nNote\n\nWhen you archive the app that comes with an App Clip, Xcode adds the com.apple.developer.associated-appclip-app-identifiers entitlement to your app. Together with the Parent Application Identifiers Entitlement, it associates your App Clip with your app.\n\nAdd code and assets\n\nApp Clips make use of the same frameworks as full apps, and adding code or assets to an App Clip target works just like it does for any other target. Create new source files and assets, or use existing source files and assets, and add them as members to the App Clip target. To ensure the project’s maintainability, both the full app and the App Clip should share as much code as possible:\n\nIf you create a new app, build it with creating an App Clip in mind, and follow best practices that promote a modular code base. For example, create reusable components, bundle them as Swift packages, and use the packages in both the full app and the App Clip. For more information, see Organizing your code with local packages.\n\nIf you add an App Clip to an existing app, set aside time to refactor the app’s code base to be modular and share code between the App Clip and the full app to avoid duplicating code.\n\nAdd shared assets to a new asset catalog, and use the catalog in both the full app and the App Clip. For more information about asset catalogs, see Managing assets with asset catalogs.\n\nKeep your App Clip small in size\n\nYour App Clips must be small to launch instantly:\n\nIf you make your App Clip available on devices running iOS 16 and later, the uncompressed App Clip binary can be up to 15 MB in size.\n\nIf you make your App Clip available on devices running iOS 15 and earlier, the uncompressed App Clip binary can be up to 10 MB in size.\n\nIf you make your App Clip available on devices running iOS 17 and later, the uncompressed App Clip binary can be up to 50 MB in size if it meets the following conditions:\n\nThe App Clip only supports digital invocations — for example from your website or Spotlight search — and not from physical invocations like App Clip Codes, QR codes, or NFC tags.\n\nPeople use your App Clip in situations where a reliable internet connection is likely, for example, at home.\n\nYour App Clip doesn’t support iOS versions prior to iOS 17.\n\nAim to keep your App Clip well below the applicable limit. To measure the size of your App Clip, create an app-size report for your App Clip:\n\nIn Xcode, archive the app that belongs to your App Clip, open the Organizer window, select the archive, and click Distribute App.\n\nExport the App Clip as an Ad Hoc or Development build with App Thinning enabled.\n\nThe output folder for your exported App Clip contains its size report, a file named App Thinning Size Report.txt. Open the text file, note the uncompressed size of your App Clip for each variant, and then make adjustments to your project to keep the uncompressed size for each variant below the applicable size limit.\n\nFor more information on measuring your app’s size, see Reducing your app’s size.\n\nUse active compilation conditions\n\nAdding an App Clip to your app is a good opportunity to refactor your app’s code to be modular and reusable. Most functionality and frameworks available to your full app are available to your App Clip. However, you may encounter cases where you can’t use some of your app’s code in the App Clip, and creating separate modules for your app and App Clip code isn’t feasible. In these cases, take advantage of the Active Compilation Conditions build setting, where you can declare a condition to exclude code.\n\nStart by navigating to your App Clip target’s build settings and creating a new value for the Active Compilation Condition build setting (for example, APPCLIP). Then, add a check in your shared code where needed, to exclude code you don’t want to use in your App Clip.\n\nThe following code checks for the APPCLIP value you added to the Active Compilation Conditions build setting:\n\n#if !APPCLIP\n// Code you don’t want to use in your App Clip.\n#else\n// Code your App Clip may access.\n#endif\n\nReview next steps\n\nAdding an App Clip target to your app’s Xcode project and modifying the project are only the first steps in offering an App Clip. Next, plan to spend time designing the launch experience of your App Clip by:\n\nReviewing how invocations work\n\nIdentifying invocations you want to support\n\nPlanning which URLs launch your App Clip\n\nChanging your code to respond to invocations\n\nBased on the decisions you make, you’ll use App Store Connect to:\n\nConfigure the required default App Clip experience in App Store Connect.\n\nEnable default App Clip links.\n\nConfigure optional advanced App Clip experience.\n\nCreate App Clip Codes.\n\nYou may also have to associate your App Clip with your website by adding the Associated Domains Entitlement to your app and App Clip targets and making changes to your server. To learn more about the App Clip launch experience for your App Clip, see Configuring the launch experience of your App Clip and Responding to invocations. For more information about making changes to your server, see Associating your App Clip with your website.\n\nWhen it’s time to test your App Clip, use Xcode to test the launch experience locally or test it with TestFlight. For more information, see Testing the launch experience of your App Clip.\n\nSee Also\nCreation\nFruta: Building a Feature-Rich App with SwiftUI\nCreate a shared codebase to build a multiplatform app that offers widgets and an App Clip.\nParent Application Identifiers Entitlement\nA list of parent application identifiers for an App Clip with exactly one entry.\nKey: com.apple.developer.parent-application-identifiers\ncom.apple.developer.associated-appclip-app-identifiers\nA list of App Clip identifiers for an app with exactly one entry.\ncom.apple.developer.on-demand-install-capable\nA Boolean value that indicates whether a bundle represents an App Clip."
  },
  {
    "title": "Recommending your app to App Clip users | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips/recommending_your_app_to_app_clip_users",
    "html": "Overview\n\nApp Clips only remain on a device for a limited amount of time. If someone uses an App Clip regularly, they might want to get the corresponding app to use additional features and have the app on their home screen. With SKOverlay, you can recommend your full app to users and enable them to install it from within your App Clip.\n\nNote\n\nDon’t require users to install your app to complete a task. For user experience and design guidance, see Human Interface Guidelines > App Clips.\n\nIf you’re using SwiftUI, make use of the appStoreOverlay(isPresented:configuration:) modifier. For example usage, see Fruta: Building a Feature-Rich App with SwiftUI.\n\nTo display an overlay when using UIKit:\n\nCreate an SKOverlay.AppClipConfiguration object.\n\nInitialize SKOverlay with the configuration object.\n\nPresent the overlay.\n\nThe following code displays the overlay at the bottom of the visible scene:\n\nfunc displayOverlay() {\n    guard let scene = view.window?.windowScene else { return }\n\n\n    let config = SKOverlay.AppClipConfiguration(position: .bottom)\n    let overlay = SKOverlay(configuration: config)\n    overlay.present(in: scene)\n}\n\n\nTo respond to the overlay’s appearance, dismissal, or failure to load, set the delegate, and implement the methods defined in SKOverlayDelegate.\n\nSee Also\nApp Clip to full app transition\nSharing data between your App Clip and your full app\nUse CloudKit, Sign in with Apple, shared user defaults or containers, and the keychain to offer a smooth transition from your App Clip to your app."
  },
  {
    "title": "App Clips | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/app_clips",
    "html": "Overview\n\nAn App Clip is a lightweight version of your app that offers people access to some of the app’s functionality. A coffee shop app downloaded and installed from the App Store, for example, might provide people the ability to order a drink, save favorites, collect rewards, get special offers, and so on. The coffee shop App Clip only offers the functionality to order a drink.\n\nPeople find an App Clip by performing an invocation, for example, by tapping a location-based suggestion from Siri Suggestions or by scanning an App Clip Code. After a person confirms the invocation, the App Clip launches instantly, helps a person perform an everyday task as quickly as possible, and only stays on their device for as long as they need it. When a person installs the corresponding full app for your App Clip, the full app replaces the App Clip. From this moment on, confirming an invocation launches the full app instead of the App Clip, and a person gets the functionality of the App Clip within the full app. If they don’t install the full app, the system automatically removes the App Clip after a period of inactivity.\n\nAgain, consider the coffee shop’s App Clip: When a person walks past the coffee shop, the system displays a location-based suggestion from Siri Suggestions on their device. They tap the suggestion, confirm the launch of the App Clip on the system-provided App Clip card, and instantly use the App Clip to order a drink. After a person completes the order, the App Clip recommends its corresponding app to them, and they download the app. The next time they tap the location-based suggestion, they launch the full app instead of the App Clip. If they don’t install the app, tapping the suggestion and confirming the invocation continues launching the App Clip.\n\nRelated sessions from WWDC21, WWDC22, and WWDC23\n\nSession 10178: What’s new in App Clips (WWDC23)\n\nSession 10097: What’s new in App Clips (WWDC22)\n\nSession 10013: Build light and fast App Clips (WWDC21)\n\nSession 10012: What’s new in App Clips (WWDC21)\n\nOffer a great user experience\n\nApp Clips provide a polished user experience that helps users solve a real-world task as quickly as possible. Additionally, App Clips don’t appear on the Home screen, and users don’t manage them the way they manage full apps. Instead, the system removes an App Clip from a device after a period of inactivity, emphasizing the importance of a polished user experience.\n\nFor design guidance, see Human Interface Guidelines > App Clips.\n\nReview App Clip creation\n\nLimit the function of an App Clip to ensure a fast launch experience, protect user privacy, and preserve resources. Before you create an App Clip, first review the technology available to App Clips and identify which of your app’s functionalities would make a great App Clip. When you create an App Clip, plan to spend time with:\n\nMaking changes to your app’s Xcode project and your code, for example, adding an App Clip target or sharing code between your App Clip and full app\n\nPlanning the launch experience for your App Clip, identifying invocations to support, and adding code to respond to them\n\nAssociating your App Clip with your website to support additional invocations and advanced App Clip experiences (optional)\n\nCreating App Clip experiences in App Store Connect\n\nCreating App Clip Codes that offer the best experience for people to discover and launch your App Clip (optional)\n\nTopics\nEssentials\nChoosing the right functionality for your App Clip\nReview frameworks available to App Clips and identify functionality that makes a great App Clip.\nCreation\nCreating an App Clip with Xcode\nAdd an App Clip target to your Xcode project and share code between the App Clip and its corresponding full app.\nFruta: Building a Feature-Rich App with SwiftUI\nCreate a shared codebase to build a multiplatform app that offers widgets and an App Clip.\nParent Application Identifiers Entitlement\nA list of parent application identifiers for an App Clip with exactly one entry.\nKey: com.apple.developer.parent-application-identifiers\ncom.apple.developer.associated-appclip-app-identifiers\nA list of App Clip identifiers for an app with exactly one entry.\ncom.apple.developer.on-demand-install-capable\nA Boolean value that indicates whether a bundle represents an App Clip.\nLaunch\nConfiguring the launch experience of your App Clip\nReview how people launch your App Clip, identify invocation URLs, make use of default App Clip links, and configure experiences in App Store Connect.\nAssociating your App Clip with your website\nEnable the system to verify your App Clip to support invocations in iOS 16.3 or earlier and from your website.\nSupporting invocations from your website and the Messages app\nDisplay a Smart App Banner and the App Clip card on your website that people tap to launch your App Clip, and add support for invocations from the Messages app.\nResponding to invocations\nAdd code to respond to invocations and offer a focused launch experience.\nConfirming a person’s physical location\nAdd code to quickly confirm a person’s physical location while respecting their privacy.\nLaunching another app’s App Clip from your app\nEnable people to launch another app’s App Clip from your app with App Clip links and offer a rich preview of it with the Link Presentation framework.\nclass APActivationPayload\nInformation that’s passed to an App Clip on launch.\nproperty list key NSAppClip\nA collection of keys that an App Clip uses to get additional capabilities.\nName: App Clip\nApp Clip Codes\nCreating App Clip Codes\nHelp users discover your App Clip by using an NFC-integrated or scan-only App Clip Code.\nPreparing multiple App Clip Codes for production\nPrepare your App Clip Codes to send to a professional printing service.\nInteracting with App Clip Codes in AR\nDisplay content and provide services in an AR experience with App Clip Codes.\nApp Clip to full app transition\nRecommending your app to App Clip users\nDisplay an overlay in your App Clip to recommend your app to users.\nSharing data between your App Clip and your full app\nUse CloudKit, Sign in with Apple, shared user defaults or containers, and the keychain to offer a smooth transition from your App Clip to your app.\nNotifications\nEnabling notifications in App Clips\nEnable your App Clip to schedule and receive notifications for a short or extended time period.\nLive Activities\nOffering Live Activities with your App Clip\nAdd a widget extension to your App Clip target and use ActivityKit to display Live Activities on the Lock Screen and in the Dynamic Island.\nTesting\nTesting the launch experience of your App Clip\nDebug App Clip invocations, test the launch experience, and verify the configuration of your released App Clip.\nDistribution\nDistributing your App Clip\nArchive the full app for your App Clip, upload it to App Store Connect, and distribute it to testers or publish it on the App Store."
  }
]
