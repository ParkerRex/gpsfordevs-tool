[
  {
    "title": "Touch Bar",
    "url": "https://developer.apple.com/design/human-interface-guidelines/touch-bar",
    "html": "Touch Bar\nThe Touch Bar is a Retina display and input device located above the keyboard on supported MacBook Pro models.\n\nDynamic controls in the Touch Bar let people interact with content on the main screen and offer quick access to system-level and app-specific functionality based on the current context. For example, when people type text in a document, the Touch Bar could include controls for adjusting the font style and size. Or when viewing a location on a map, the Touch Bar could offer quick, one-tap access to nearby points of interest.\n\nThe following guidelines can help you provide a Touch Bar experience that people appreciate. For developer guidance, see NSTouchBar and Xcode Help.\n\nA Touch ID sensor to the right of the Touch Bar supports fingerprint authentication for logging into the computer and approving App Store and Apple Pay purchases. On devices that include the Touch Bar (2nd generation), a physical Esc (Escape) key appears to the left of the Touch Bar.\n\nBy default, the right side of the Touch Bar displays an expandable region called the Control Strip that includes controls for performing system-level tasks such as invoking Siri, adjusting the brightness of the main display, and changing the volume. You can place app-specific controls in the app region to the left of the Control Strip. In Touch Bar (1st generation), an Esc button or other system-provided button may appear to the left of the app region, depending on the context.\n\nTouch Bar (2nd generation)\n\nTouch Bar (1st generation)\n\nPeople can configure the Touch Bar to suit their needs. For example, people can remove items or hide the Control Strip completely, in which case only the controls in the app region and the system button remain. Alternatively, people can hide the app region to view an expanded Control Strip.\n\nPlay\n\nYou can support additional customization within the app region by letting people add and remove items.\n\nIn general, let people customize your app’s Touch Bar experience. Provide reasonable defaults for important and commonly used functions, but let people make adjustments to support their individual working styles.\n\nProvide alternative text labels for your Touch Bar controls. By providing alternative text for your controls in the Touch Bar, VoiceOver can audibly describe the controls, making navigation easier for people with visual disabilities (for guidance, see Accessibility). Also create labels for any customizable Touch Bar controls that you provide so VoiceOver can describe these controls on the customization screen.\n\nGestures\n\nPeople use a subset of the standard gestures to interact with the Touch Bar.\n\nTap\n\nPeople tap to activate a control, like a button, or select an item, such as an emoji, a color, or a segment in a segmented control.\n\nPlay\nTouch and hold\n\nA touch and hold gesture initiates a control’s secondary action. In Mail, for example, tapping the Flag button adds a flag to a message, but touching and holding the button reveals a modal view that lets people change the flag’s color.\n\nPlay\nHorizontal swipe or pan\n\nPeople use a horizontal swipe or pan to drag an element, like a slider thumb, or navigate through content, such as a list of dates or a group of photos in a scrubber.\n\nPlay\nMulti-Touch\n\nAlthough the Touch Bar supports Multi-Touch gestures — like a pinch — such gestures can be cumbersome for people to perform. In general, it’s best to use Multi-Touch gestures sparingly.\n\nPlay\nBest practices\n\nKeep the following guidance in mind as you design your app’s Touch Bar interfaces.\n\nMake the Touch Bar relevant to the current context on the main screen. Identify the different contexts within your app. Then, consider how you can expose varying levels of functionality based on how your app is used.\n\nUse the Touch Bar as an extension of the keyboard and trackpad, not as a display. Although the Touch Bar is a screen, its primary function is to serve as an input device — not a secondary display. People may glance at the Touch Bar to locate or use a control, but their primary focus is the main screen. Avoid displaying alerts, messages, scrolling content, static content, or anything else that distracts people from the main screen.\n\nStrive to match the look of the physical keyboard. When possible, aim to design Touch Bar controls that resemble the size and color of keys in the physical keyboard.\n\nAvoid making functionality available only in the Touch Bar. Not all devices have a Touch Bar, and people can turn off app controls in the Touch Bar if they choose. Always give people ways to perform tasks using the keyboard or trackpad.\n\nIn a full-screen context, consider displaying relevant controls in the Touch Bar. In full-screen mode, apps often hide onscreen controls and reveal them only when people call for them by, for example, moving the pointer to the top of the screen. If you support full screen, you can use the Touch Bar to give people persistent access to important controls without distracting them from the full-screen experience.\n\nPrefer controls that produce immediate results. Ideally, Touch Bar controls give people quick ways to perform actions that would otherwise require extra time spent clicking controls or choosing from menus. Minimize Touch Bar controls that present additional choices, such as popovers. For guidance, see Controls and views.\n\nBe responsive to Touch Bar interactions. Even when your app is busy doing work or updating the main screen, respond instantly when people use a Touch Bar control.\n\nWhen possible, people need to be able to start and finish a task in the Touch Bar. Avoid making people switch to the keyboard or trackpad to complete a task unless the task requires more complex interface controls than the Touch Bar provides.\n\nAvoid using the Touch Bar for tasks associated with well-known keyboard shortcuts. People don’t need Touch Bar controls for tasks such as find, select all, deselect, copy, cut, paste, undo, redo, new, save, close, print, and quit. People also don’t need redundant controls for key-based navigation, such as page up and page down.\n\nAccurately reflect the state of a control that appears in both the Touch Bar and on the main screen. For example, if a button is unavailable on the main screen, make sure it’s unavailable in the Touch Bar.\n\nWhen responding to user interactions, avoid showing the same UI in both the Touch Bar and the main screen. For example, when people click the onscreen Emoji & Symbols button in a new message window in Mail, they expect the Character Viewer to open on the main screen, not in the Touch Bar. Unless people interact with the same control in both places, avoid distracting people by displaying redundant UI.\n\nAnimation\n\nAvoid animation. The Touch Bar is an extension of the keyboard, and people don’t expect animation in their keyboard. In addition, excessive or gratuitous animation can distract people from their work.\n\nColor\n\nPrefer standard controls and system icons. The standard controls and system icons already use colors that work well in the Touch Bar. For a list of available system icons, see Interface icons.\n\nUse color tastefully and minimally. In general, make the Touch Bar similar in appearance to the physical keyboard. Monochromatic colors tend to work best. If you must use colors in your controls, do so tastefully and primarily in temporary states; avoid using colors that appear overwhelming or out of place.\n\nUse color to denote prominence. Color can draw the eye to important controls. Reserve blue for default controls and red for destructive controls.\n\nIf you use color, choose a limited palette that coordinates with your app. Subtle use of color is one way to communicate your brand.\n\nProvide wide color artwork. The Touch Bar supports a P3 color space that can produce richer, more saturated colors than sRGB. Use the Display P3 color profile at 16 bits per pixel (per channel) and export your artwork in the PNG format. For guidance, see Color management.\n\nTip\n\nOn a Mac that features a wide color display, you can use the system color picker to select and preview P3 colors, and to compare them with sRGB colors.\n\nSystem colors\n\nmacOS offers a range of standard system colors that respond automatically to system white-point changes based on factors such as ambient light and keyboard backlight level.\n\nColor\n\n\t\n\nAPI\n\n\n\n\nBlue\n\n\t\n\nsystemBlue\n\n\n\n\nBrown\n\n\t\n\nsystemBrown\n\n\n\n\nGray\n\n\t\n\nsystemGray\n\n\n\n\nGreen\n\n\t\n\nsystemGreen\n\n\n\n\nOrange\n\n\t\n\nsystemOrange\n\n\n\n\nPink\n\n\t\n\nsystemPink\n\n\n\n\nPurple\n\n\t\n\nsystemPurple\n\n\n\n\nRed\n\n\t\n\nsystemRed\n\n\n\n\nYellow\n\n\t\n\nsystemYellow\n\nDon’t replicate system colors. System color values may fluctuate from release to release and based on various environmental variables. Instead of trying to create custom colors that match the system colors, just use the system colors. For developer guidance, see NSColor.\n\nDynamic system colors\n\nmacOS defines a range of system colors that dynamically match the color scheme of standard interface controls such as buttons and labels. The following system colors are ideal for use in the Touch Bar.\n\nColor\n\n\t\n\nDescription\n\n\t\n\nAPI\n\n\n\n\nControl Color\n\n\t\n\nThe system color for the surface of a control.\n\n\t\n\ncontrolColor\n\n\n\n\nLabel Color\n\n\t\n\nThe system color for the text of a label.\n\n\t\n\nlabelColor\n\n\n\n\nSecondary Label Color\n\n\t\n\nThe system color for label text of lesser importance than text that uses labelColor.\n\n\t\n\nsecondaryLabelColor\n\n\n\n\nTertiary Label Color\n\n\t\n\nThe system color for label text of lesser importance than text that uses secondaryLabelColor.\n\n\t\n\ntertiaryLabelColor\n\n\n\n\nQuaternary Label Color\n\n\t\n\nThe system color for label text of lesser importance than text that uses tertiaryLabelColor.\n\n\t\n\nquaternaryLabelColor\n\nLayout\n\nThe width of the Touch Bar display differs depending on the device.\n\nTouch Bar (2nd generation)\n\nTouch Bar (1st generation)\n\nTouch Bar areas\n\nIn its standard configuration, the Touch Bar display consists of either two or three areas, depending on the device. The system enforces a 16 pt separation between areas.\n\nThe Touch Bar (2nd generation) display contains two areas: the app region and the Control Strip. Although the second generation Touch Bar doesn’t include a system button area, you can display a system button within your app region.\n\nThe Touch Bar (1st generation) display includes three areas: the system button area, the app region, and the Control Strip.\n\nArea\n\n\t\n\nContains\n\n\t\n\nUser configurable?\n\n\n\n\nControl Strip\n\n\t\n\nSystem-level controls for performing actions, like initiating Siri or adjusting the volume level.\n\n\t\n\nYes. People can extend the Control Strip to the full width of the Touch Bar, collapse it to the right side of the Touch Bar, reduce it in size, or hide it entirely. By default, the Control Strip appears in its collapsed state and contains four controls.\n\n\n\n\nApp region\n\n\t\n\nYour app’s controls.\n\n\t\n\nYes. People can hide this area entirely. When the Control Strip is visible, the app region has a minimum width of 685 pt.\n\n\n\n\nSystem button (available on some models)\n\n\t\n\nA contextually relevant button, like Esc, Cancel, or Done.\n\n\t\n\nNo. When present, this area’s width is 64 pt. In Touch Bar (2nd generation), you can use 8 pt spacing to display the relevant button in the app region, where it’s unavailable by default.\n\nAssume that the default Control Strip is visible. Although people can reconfigure the Control Strip, reduce its size, or hide it completely, don’t rely on the availability of this space for your design.\n\nPositioning app controls\n\nYou have several options for adding visual separation between app controls in the Touch Bar.\n\nSpacing type\n\n\t\n\nWidth between controls\n\n\n\n\nDefault\n\n\t\n\n8 pt\n\n\n\n\nSmall fixed space\n\n\t\n\n16 pt\n\n\n\n\nLarge fixed space\n\n\t\n\n32 pt\n\n\n\n\nFlexible space\n\n\t\n\nVaries to match the available space.\n\nPosition controls logically and intuitively. If your app offers a control that persists across different modalities, it can work well to put the control in the left side of the app region. For example, the Compose button in Notes always appears in the far left of the Touch Bar, regardless of whether people are navigating notes, editing a note, or browsing attachments. On the other hand, primary controls that command people’s attention — such as an alert or the suggested items in the QuickType bar — work best centered in the app region, with secondary options on the left. Consider using the order of controls in your app’s toolbar to inform the order of Touch Bar controls in the app region. When you use consistent control positions in both areas, people can rely on their familiarity with your onscreen controls to help them use your Touch Bar controls.\n\nImportant\n\nIf the order of your Touch Bar controls mirrors the order of controls in your app’s window, make sure to adjust the control order in the app region when your app uses a right-to-left layout.\n\nConstruct a flexible layout. The app region varies in width depending on the configuration of the Control Strip and the device, so consider allowing certain controls — such as sliders and scrubbers — to stretch when additional space becomes available. Strive for consistent spacing. As much as possible, make controls in the Touch Bar equidistant, except when spacing variations are necessary for clarity or to cluster related controls. Use flexible spaces and grouping to aid alignment. Flexible space between items pushes the items on the left toward the left side of the Touch Bar and the items on the right toward the right side of the Touch Bar. Grouping lets you position multiple controls at once. For example, you can center a control or group by marking it as the principal item in the Touch Bar. Avoid repositioning controls automatically. People can become frustrated and confused if a control changes position by itself. If it makes sense in your app, consider letting people customize control positioning. Avoid manually reversing controls in right-to-left locales. The system already reverses certain controls, such as segmented controls and sliders. Manually reversing controls can cause problems with Touch Bar customization features.\n\nFor developer guidance, see NSTouchBarItem.\n\nCommon layout styles\n\nTouch Bar layouts can vary significantly from app to app because of factors like configuration options, various control sizes, and the device your app is running on. When possible, use one of the following common layout styles for your controls.\n\nLayout with one principal item. The center of the Touch Bar contains a single large control, such as a candidate list. Additional controls, such as buttons and segmented controls, are on the left. In Touch Bar (2nd generation), layouts with one principal item can look like this:\n\nNote\n\nIn Touch Bar (2nd generation), a principal candidate list control typically remains centered with respect to the device, whereas other types of principal controls may appear off-center in some circumstances. For example, an item might be too large to center in the current configuration, but may become centered when people customize the Control Strip.\n\nIn Touch Bar (1st generation), layouts with one principal item can look like this:\n\nLayout with two principal items. The center of the Touch Bar contains two consistently sized controls. Additional controls are on the left.\n\nIn Touch Bar (2nd generation), a layout with two principal items can look like this:\n\nIn Touch Bar (1st generation), a layout with two principal items can look like this:\n\nLayout with three principal items. The center of the Touch Bar contains three consistently sized controls. Additional controls are on the left.\n\nIn Touch Bar (2nd generation), a layout with three principal items can look like this:\n\nIn Touch Bar (1st generation), a layout with three principal items can look like this:\n\nFluid layout. This layout includes consistently-sized controls, such as buttons.\n\nIn Touch Bar (2nd generation), a fluid layout can look like this:\n\nIn Touch Bar (1st generation), a fluid layout can look like this:\n\nTypography\n\nThe Touch Bar uses a variant of San Francisco, the system font in macOS. Standard Touch Bar controls, such as buttons and segmented controls, automatically use this variant. For guidance, see Typography; for developer guidance, see NSFont.\n\nInterface icons\n\nmacOS provides many interface icons you can use to represent common tasks and types of content in your app’s Touch Bar controls.\n\nWhen you use AppKit API to display a system-provided glyph, you automatically get an image in the format that’s appropriate for the version of macOS in which your app is running. For example, if your app runs in macOS 11 and later, you get SF Symbols; if your app runs in Catalina or earlier, AppKit continues to provide the existing template image. For developer guidance, see NSTouchBarItem.\n\nImportant\n\nBy default, the system APIs return SF Symbols configured as 13 pt, large scale, and medium weight.\n\nIn some cases, a symbol might not have the same size or alignment as the image it replaces, so it’s important to check your layout.\n\nPrefer system images because people are familiar with them. Also, system-provided glyphs automatically receive appropriate coloring, respond to system white-point changes based on factors such as ambient light and keyboard backlight level, and respond to user interactions.\n\nUse each system-defined glyph according to its meaning — not its appearance. When you choose an image for its meaning, your app can remain visually consistent with the system even if the appearance of the image changes.\n\nUse only system images that are designed for the Touch Bar. Don’t use other types of images in the Touch Bar, such as toolbar glyphs.\n\nDesign a custom symbol or image if you can’t find a system-defined one that meets your needs. Designing a custom symbol or image lets you communicate unique details that help people use your app; repurposing a system-defined image can cause confusion. For guidance, see Custom Touch Bar icons; for general design guidance, see Icons.\n\nNote\n\nSome system icons, like Go Back and Go Forward, automatically reverse direction in right-to-left locales.\n\nImage (Catalina and earlier)\n\n\t\n\nSF Symbol (macOS 11 and later)\n\n\t\n\nMeaning\n\n\n\n\ntouchBarAddDetailTemplateName\n\n\t\n\nplus.circle\n\n\t\n\nDisplays additional detail for an item.\n\n\n\n\ntouchBarAddTemplateName\n\n\t\n\nplus\n\n\t\n\nCreates a new item.\n\n\n\n\ntouchBarAlarmTemplateName\n\n\t\n\nalarm\n\n\t\n\nSets or displays an alarm.\n\n\n\n\ntouchBarAudioInputMuteTemplateName\n\n\t\n\nmic.slash\n\n\t\n\nMutes audio input or denotes that audio input is muted.\n\n\n\n\ntouchBarAudioInputTemplateName\n\n\t\n\nmic\n\n\t\n\nDenotes audio input.\n\n\n\n\ntouchBarAudioOutputMuteTemplateName\n\n\t\n\nspeaker.slash.fill\n\n\t\n\nMutes audio output or denotes that audio output is muted.\n\n\n\n\ntouchBarAudioOutputVolumeHighTemplateName\n\n\t\n\nspeaker.wave.3.fill\n\n\t\n\nSets the audio output volume to high or denotes that the audio output volume is set to high.\n\n\n\n\ntouchBarAudioOutputVolumeLowTemplateName\n\n\t\n\nspeaker.wave.1.fill\n\n\t\n\nSets the audio output volume to low or denotes that the audio output volume is set to low.\n\n\n\n\ntouchBarAudioOutputVolumeMediumTemplateName\n\n\t\n\nspeaker.wave.2.fill\n\n\t\n\nSets the audio output volume to medium or denotes that the audio output volume is set to medium.\n\n\n\n\ntouchBarAudioOutputVolumeOffTemplateName\n\n\t\n\nspeaker.fill\n\n\t\n\nTurns off audio output or denotes that audio output is turned off.\n\n\n\n\ntouchBarBookmarksTemplateName\n\n\t\n\nbook\n\n\t\n\nShows app-specific bookmarks.\n\n\n\n\ntouchBarColorPickerFillName\n\n\t\n\n–\n\n\t\n\nShows a color picker so people can select a fill color.\n\n\n\n\ntouchBarColorPickerFontName\n\n\t\n\n–\n\n\t\n\nShows a color picker so people can select a text color.\n\n\n\n\ntouchBarColorPickerStrokeName\n\n\t\n\n–\n\n\t\n\nShows a color picker so people can select a stroke color.\n\n\n\n\ntouchBarCommunicationAudioTemplateName\n\n\t\n\nphone\n\n\t\n\nInitiates or denotes audio communication.\n\n\n\n\ntouchBarCommunicationVideoTemplateName\n\n\t\n\nvideo\n\n\t\n\nInitiates or denotes video communication.\n\n\n\n\ntouchBarComposeTemplateName\n\n\t\n\nsquare.and.pencil\n\n\t\n\nOpens a new document or view in edit mode.\n\n\n\n\ntouchBarDeleteTemplateName\n\n\t\n\ntrash\n\n\t\n\nDeletes the current or selected item.\n\n\n\n\ntouchBarDownloadTemplateName\n\n\t\n\narrow.down.circle\n\n\t\n\nDownloads an item.\n\n\n\n\ntouchBarEnterFullScreenTemplateName\n\n\t\n\narrow.up.left.and.arrow.down.right\n\n\t\n\nEnters full screen mode.\n\n\n\n\ntouchBarExitFullScreenTemplateName\n\n\t\n\narrow.down.right.and.arrow.up.left\n\n\t\n\nExits full screen mode.\n\n\n\n\ntouchBarFastForwardTemplateName\n\n\t\n\nforward.fill\n\n\t\n\nFast-forwards through media playback or slides.\n\n\n\n\ntouchBarFolderCopyToTemplateName\n\n\t\n\nplus.rectangle.on.folder\n\n\t\n\nCopies an item to a destination.\n\n\n\n\ntouchBarFolderMoveToTemplateName\n\n\t\n\nfolder\n\n\t\n\nMoves an item to a new destination.\n\n\n\n\ntouchBarFolderTemplateName\n\n\t\n\nfolder\n\n\t\n\nOpens or represents a folder.\n\n\n\n\ntouchBarGetInfoTemplateName\n\n\t\n\ninfo.circle\n\n\t\n\nDisplays additional information about an item.\n\n\n\n\ntouchBarGoBackTemplateName\n\n\t\n\nchevron.backward\n\n\t\n\nReturns to the previous screen or location.\n\n\n\n\ntouchBarGoDownTemplateName\n\n\t\n\nchevron.down\n\n\t\n\nMoves to the next vertical item.\n\n\n\n\ntouchBarGoForwardTemplateName\n\n\t\n\nchevron.forward\n\n\t\n\nMoves to the next screen or location.\n\n\n\n\ntouchBarGoUpTemplateName\n\n\t\n\nchevron.up\n\n\t\n\nMoves to the previous vertical item.\n\n\n\n\ntouchBarHistoryTemplateName\n\n\t\n\nclock\n\n\t\n\nDisplays historical information, such as recent downloads.\n\n\n\n\ntouchBarIconViewTemplateName\n\n\t\n\nsquare.grid.2x2\n\n\t\n\nDisplays items in an icon view.\n\n\n\n\ntouchBarListViewTemplateName\n\n\t\n\nlist.bullet\n\n\t\n\nDisplays items in a list view.\n\n\n\n\ntouchBarMailTemplateName\n\n\t\n\nenvelope\n\n\t\n\nCreates an email message.\n\n\n\n\ntouchBarNewFolderTemplateName\n\n\t\n\nfolder.badge.plus\n\n\t\n\nCreates a new folder.\n\n\n\n\ntouchBarNewMessageTemplateName\n\n\t\n\nmessage\n\n\t\n\nCreates a new message or denotes the use of messaging.\n\n\n\n\ntouchBarOpenInBrowserTemplateName\n\n\t\n\nsafari\n\n\t\n\nOpens an item in the browser.\n\n\n\n\ntouchBarPauseTemplateName\n\n\t\n\npause.fill\n\n\t\n\nPauses media playback or slides. Always store the current location when pausing, so playback can resume later.\n\n\n\n\ntouchBarPlayPauseTemplateName\n\n\t\n\nplaypause.fill\n\n\t\n\nToggles between playing and pausing media or slides.\n\n\n\n\ntouchBarPlayTemplateName\n\n\t\n\nplay.fill\n\n\t\n\nBegins or resumes media playback or slides.\n\n\n\n\ntouchBarQuickLookTemplateName\n\n\t\n\neye\n\n\t\n\nOpens an item in Quick Look.\n\n\n\n\ntouchBarRecordStartTemplateName\n\n\t\n\ncircle.fill\n\n\t\n\nBegins recording.\n\n\n\n\ntouchBarRecordStopTemplateName\n\n\t\n\nstop.fill\n\n\t\n\nStops recording or stops media playback or slides.\n\n\n\n\ntouchBarRefreshTemplateName\n\n\t\n\narrow.clockwise\n\n\t\n\nMoves backwards through media playback or slides.\n\n\n\n\ntouchBarRewindTemplateName\n\n\t\n\nbackward.fill\n\n\t\n\nMoves backwards through media playback or slides.\n\n\n\n\ntouchBarRotateLeftTemplateName\n\n\t\n\nrotate.left\n\n\t\n\nMoves to the next vertical item.\n\n\n\n\ntouchBarRotateRightTemplateName\n\n\t\n\nrotate.right\n\n\t\n\nRotates an item to the right.\n\n\n\n\ntouchBarSearchTemplateName\n\n\t\n\nmagnifyingglass\n\n\t\n\nDisplays a search field or initiates a search.\n\n\n\n\ntouchBarShareTemplateName\n\n\t\n\nsquare.and.arrow.up\n\n\t\n\nShares content with others or to social media.\n\n\n\n\ntouchBarSidebarTemplateName\n\n\t\n\nsidebar.leading\n\n\t\n\nDisplays a sidebar in the current view.\n\n\n\n\ntouchBarSkipAhead15SecondsTemplateName\n\n\t\n\ngoforward.15\n\n\t\n\nSkips 15 seconds ahead during media playback.\n\n\n\n\ntouchBarSkipAhead30SecondsTemplateName\n\n\t\n\ngoforward.30\n\n\t\n\nSkips 30 seconds ahead during media playback.\n\n\n\n\ntouchBarSkipAheadTemplateName\n\n\t\n\nforward.end.alt.fill\n\n\t\n\nSkips to the next chapter or location during media playback.\n\n\n\n\ntouchBarSkipBack15SecondsTemplateName\n\n\t\n\ngobackward.15\n\n\t\n\nSkips 15 seconds back during media playback.\n\n\n\n\ntouchBarSkipBack30SecondsTemplateName\n\n\t\n\ngobackward.30\n\n\t\n\nSkips 30 seconds back during media playback.\n\n\n\n\ntouchBarSkipBackTemplateName\n\n\t\n\nbackward.end.alt.fill\n\n\t\n\nSkips to the previous chapter or location during media playback.\n\n\n\n\ntouchBarSkipToEndTemplateName\n\n\t\n\nforward.end.fill\n\n\t\n\nSkips to the end during media playback.\n\n\n\n\ntouchBarSkipToStartTemplateName\n\n\t\n\nbackward.end.fill\n\n\t\n\nSkips to the start during media playback.\n\n\n\n\ntouchBarSlideshowTemplateName\n\n\t\n\nplay.rectangle\n\n\t\n\nStarts a slideshow.\n\n\n\n\ntouchBarTagIconTemplateName\n\n\t\n\ntag\n\n\t\n\nApplies a tag to an item.\n\n\n\n\ntouchBarTextBoldTemplateName\n\n\t\n\nbold\n\n\t\n\nMakes text bold.\n\n\n\n\ntouchBarTextBoxTemplateName\n\n\t\n\ntextbox\n\n\t\n\nInserts a text box.\n\n\n\n\ntouchBarTextCenterAlignTemplateName\n\n\t\n\ntext.aligncenter\n\n\t\n\nCenter aligns text.\n\n\n\n\ntouchBarTextItalicTemplateName\n\n\t\n\nitalic\n\n\t\n\nItalicizes text.\n\n\n\n\ntouchBarTextJustifiedAlignTemplateName\n\n\t\n\ntext.justify\n\n\t\n\nJustifies text, aligning it to both the left and right.\n\n\n\n\ntouchBarTextLeftAlignTemplateName\n\n\t\n\ntext.alignleft\n\n\t\n\nLeft-aligns text.\n\n\n\n\ntouchBarTextListTemplateName\n\n\t\n\nlist.bullet\n\n\t\n\nInserts a list or converts text to list form.\n\n\n\n\ntouchBarTextRightAlignTemplateName\n\n\t\n\ntext.alignright\n\n\t\n\nRight-aligns text.\n\n\n\n\ntouchBarTextStrikethroughTemplateName\n\n\t\n\nstrikethrough\n\n\t\n\nApplies a strikethrough to text.\n\n\n\n\ntouchBarTextUnderlineTemplateName\n\n\t\n\nunderline\n\n\t\n\nUnderlines text.\n\n\n\n\ntouchBarUserAddTemplateName\n\n\t\n\nperson.crop.circle.badge.plus\n\n\t\n\nCreates a new user.\n\n\n\n\ntouchBarUserGroupTemplateName\n\n\t\n\nperson.2.fill\n\n\t\n\nShows or represents information about a group of users.\n\n\n\n\ntouchBarUserTemplateName\n\n\t\n\nperson.fill\n\n\t\n\nShows or represents information about a user.\n\n\n\n\ntouchBarVolumeDownTemplateName\n\n\t\n\nspeaker.wave.1.fill\n\n\t\n\nDecreases the volume.\n\n\n\n\ntouchBarVolumeUpTemplateName\n\n\t\n\nspeaker.wave.3.fill\n\n\t\n\nIncreases the volume.\n\nCustom Touch Bar icons\n\nIf your app includes tasks or modes that can’t be represented by a system-provided Touch Bar image, you can create your own. Apple Design Resources provides downloadable Photoshop and Sketch templates you can use to design properly scaled icons for the Touch Bar. For guidance, see Icons.\n\nIn general, create icons that look similar to the icons on the physical keyboard keys. Supply high-resolution images with a scale factor of @2x for all artwork that appears in the Touch Bar. To learn about image resolutions, see Resolution.\n\nDesign recognizable icons that clearly relate to your app on the main screen. If necessary, you can vary the images to match the style of the Touch Bar.\n\nAvoid icons that extend to the full height of the Touch Bar. In general, create icons that are no taller than 44 px (36 px for circular icons).\n\n\t\n\n\n\n\nIdeal icon size\n\n\t\n\n18x18 pt (36x36 px @2x)\n\n\n\n\nMaximum icon size\n\n\t\n\n22x22 pt (44x44 px @2x)\n\nKeep icons optically centered. Crop artwork to match the icon’s width, then add padding as needed to keep the icon optically centered when it’s displayed in a control.\n\nPrefer a 45-degree angle for diagonal elements. Using the same angle as in system icons like touchBarAudioInputMuteTemplateName and touchBarComposeTemplateName helps your custom icons look at home in the Touch Bar.\n\nAvoid using color to communicate on and off states. The system already changes the background appearance of standard controls that are in an off state.\n\nGive most icons a 100% opacity fill. To optimize readability, you might want to use a 70% opacity fill in combination with a 100% opacity fill. Use midtones only for improving readability and balance.\n\nFor guidance, see Color.\n\nTo match the style of the physical keyboard, give most icons a 2 px stroke. If your design requires more visual weight, consider a 3 px stroke.\n\nAs much as possible, match the corner styles of the system images. For example, use square corners for icons with a 2 px stroke, rounded corners with a 1px radius for icons with a 3 px stroke, and rounded corners with a 4 px radius for solid shapes.\n\nControls and views\n\nThe system offers a range of standard controls you can provide in the app region of the Touch Bar. For consistency, use these controls when possible.\n\nButtons\n\nButtons initiate app-specific actions, and can include an icon and a title.\n\nPrefer icons over titles. Strive to design clear icons that stand on their own without supporting text.\n\nKeep titles short. Lengthy titles can crowd the Touch Bar.\n\nCustomize a button’s bezel color if necessary. The system-provided button bezel looks similar to the physical keyboard buttons and contributes to a unified visual experience. If your app requires a custom bezel color, consider using a dark color, which tends to look good in the Touch Bar.\n\nFor guidance, see Buttons. For developer guidance, see NSButton.\n\nToggles\n\nA toggle switches between on and off states.\n\nOn\n\nOff\n\nLet the background indicate a toggle’s state. The system automatically changes the background appearance of buttons in an off state, so there’s no need to indicate the state using color, text, or a different icon.\n\nUse toggles in place of checkboxes and radio buttons. If you need a control that lets people choose between two states, use a toggle button.\n\nFor developer guidance, see the state property of NSButton.\n\nCandidate lists\n\nA candidate list offers autocompletion suggestions during text entry. People can tap a suggestion to accept and insert it into the active text field or text view on the main screen. People can also expand or collapse a candidate list. An expanded candidate list replaces other controls that reside within the expansion area.\n\nFor developer guidance, see NSCandidateListTouchBarItem.\n\nCharacter pickers\n\nA character picker opens a popover that includes a list of special characters, such as emoji. People can tap a character in the picker to insert it into the active text area on the main screen.\n\nClosed\n\nOpen\n\nFor developer guidance, see NSCandidateListTouchBarItem.\n\nColor pickers\n\nA color picker opens a popover that includes controls for selecting a color. You can configure a color picker to display an icon for a color picker, a stroke color picker, or a text color picker. Regardless of the icon, all color pickers display the same popover.\n\nClosed\n\nOpen\n\nUse icons as intended. Use the stroke color picker icon for selecting a stroke color. Use the text color picker icon for selecting a text color. For other color selection scenarios, use the color picker icon.\n\nFor developer guidance, see NSColorPickerTouchBarItem.\n\nLabels\n\nA label displays read-only text that doesn’t appear within a control.\n\nIn general, avoid labels. Although the Touch Bar can display labels, it’s generally best to avoid them because they’re not interactive. Instead, prefer designing meaningful icons for your controls. If you must include a label, keep it as short as possible.\n\nPrefer titles over labels when supplementing complex icons. If the meaning of a control’s icon isn’t clear on its own, consider including a short title within the control to provide context.\n\nFor guidance, see Labels. For developer guidance, see NSTextField.\n\nPopovers\n\nA closed popover looks like a single button in the Touch Bar.\n\nClosed\n\nOpen\n\nWhen it’s open, the popover replaces the current set of controls in the app region with a modal overlay containing a transient set of controls. In this modal overlay, people make a selection or tap a close button to return to the collapsed state and the previous set of controls.\n\nTip\n\nIn Touch Bar (2nd generation), the popover’s close button appears within the app region; in Touch Bar (1st generation), the close button replaces the system button. The second generation Touch Bar decreases the space available for popovers by 64 points and the system may display controls closer together to avoid clipping controls.\n\nCollapsed popovers open when people tap them. Optionally, popovers can also open in response to a touch and hold gesture. Popovers that support touch and hold include a trailing carat decoration.\n\nClosed\n\nOpen\n\nA popover can present the same overlay regardless of the gesture people use to expand it, or it can present a different overlay for each gesture. In a touch and hold overlay, people make a selection by sliding their holding finger to a control, and collapse the popover by lifting their finger.\n\nUse popovers sparingly. Prefer Touch Bar controls that perform an action with a single tap.\n\nAvoid nesting popovers. In general, don’t require people to navigate more than one level in the Touch Bar.\n\nReserve touch and hold for simple popovers. Use touch and hold primarily to display an overlay that includes a simple set of options — such as a single segmented control — from which people can make a selection.\n\nIndicate choice selection in a collapsed popover. When an expanded popover includes a list of options, show the currently selected option in the collapsed state.\n\nProvide an obvious exit path. Make sure people always know how to collapse a popover and return to the previous set of controls.\n\nFor developer guidance, see NSPopoverTouchBarItem.\n\nScrubbers\n\nA scrubber lets people swipe left and right to navigate through content like a list of dates or a group of photos. Scrubbers can be fixed or free, and are highly customizable — but need to retain an appearance that doesn’t feel out of place in the Touch Bar.\n\nFor developer guidance, see NSScrubber.\n\nFixed scrubbers\n\nA fixed scrubber allows for fluid, continuous interaction with a set of arranged content, such as open Safari tabs. As people swipe across the scrubber, items beneath their finger become highlighted. Depending on the scrubber’s configuration, people make a selection by moving a finger to the item, or by lifting their finger from the scrubber. If the amount of content exceeds the size of a fixed scrubber, the scrubber automatically scrolls to reveal additional items as the finger nears the edge of the control. In a fixed scrubber, people use a finger to move the selection, rather than the content.\n\nFree scrubbers\n\nA free scrubber presents content in a scrollable list — such as a list of Calendar dates — that people swipe to scroll. Depending on the scrubber’s configuration, people select an item by moving it to a specific location, like the center of the scrubber, or by tapping the item while the scrubber is stationary.\n\nUse predictable and logically ordered values. When the scrollable list in a free scrubber is stationary, some values may be hidden. If the list displays items in a logical order that follows an obvious progression, people can predict the hidden values and move through the list quickly. When viewing a list of country or region names, for example, people are generally better at predicting hidden values in an alphabetized list than in a list ordered by population size.\n\nKeep lists of values as short as possible. People can find it tedious to navigate long lists in the Touch Bar. If you have a large list of values, consider presenting it on the main screen instead of the Touch Bar, so people can use the keyboard or trackpad for navigation.\n\nSegmented controls\n\nA segmented control is a linear set of two or more segments, each of which functions as a button — usually configured as a toggle. Within the control, all segments are equal in width. Like buttons, segments can contain text and icons.\n\nLimit the number of segments to improve usability. Wider segments are easier for people to tap.\n\nPrefer icons over titles. Strive to design clear icons that stand on their own without requiring supporting text.\n\nTry to keep segment content size consistent. Because segments match in width, it’s visually coherent if the content in the segments is also equal in length.\n\nKeep titles short. Lengthy titles can crowd the Touch Bar.\n\nPrefer darker colors for bezel color changes. The appearance of the system-provided bezel resembles physical keyboard buttons. If your app requires a custom bezel color, dark colors are recommended.\n\nFor developer guidance, see NSSegmentedControl.\n\nSharing service pickers\n\nPeople use sharing service pickers to share text, images, and other content with apps, social media accounts, and other services. When people tap a sharing service picker, it displays a popover that contains sharing buttons.\n\nClosed\n\nOpen\n\nPresent a sharing service picker only when there’s content to share. If people haven’t selected text, images, or other sharable content, the sharing service picker needs to be unavailable.\n\nFor developer guidance, see NSSharingServicePicker.\n\nSliders\n\nA slider is a horizontal track with a control called a thumb, which people can slide to move between a minimum and maximum value, such as screen brightness level, or position during media playback. As a slider’s value changes, the portion of track between the minimum value and the thumb fills with color.\n\nCustomize a slider’s appearance to match your app and add value. Consider coordinating a slider’s track color with your app’s color scheme.\n\nConsider using a stepper instead of a slider when space is tight. If a slider’s values cover a limited range and it’s possible to move through them in discrete steps, it might make sense to use a stepper. For guidance, see Steppers.\n\nProvide left and right icons that illustrate the meaning of the minimum and maximum values. A slider that adjusts image size, for example, could show a small image icon on the left and a large image icon on the right.\n\nFor developer guidance, see NSSlider.\n\nSteppers\n\nSteppers provide a set of continuous — usually numeric — values from which people can choose. A stepper displays the current value centered between a decrementing control and an incrementing control. People tap the controls or swipe the current value left or right to change the value by an amount you specify.\n\nDisplay the item’s current value in the center view. By default, a stepper uses text to display the current value. You can use a formatter to style the text — for example, in a stepper that lets people choose dates, you might make today’s date red. In some cases, it might make sense to use images instead of text, but it can be tricky to create images that convey a logical progression from which people can predict the values that precede and follow the current value. For example, a stepper that controls the line weight of a marking tool could use a set of images that vary in thickness to help people understand the effect of incrementing and decrementing the value.\n\nAvoid using a stepper when people are likely to make large adjustments to an item’s value. Because a stepper changes an item’s value by one discrete step per swipe or tap, people would have to swipe or tap a lot to make a large value change.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nFeedback\n\nDeveloper documentation\n\nNSTouchBar — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nUpdated Dark Mode artwork."
  },
  {
    "title": "Notifications",
    "url": "https://developer.apple.com/design/human-interface-guidelines/notifications",
    "html": "Notifications\nA notification gives people timely, high-value information they can understand at a glance.\n\nBefore you can send any notifications to people, you have to get their consent (for developer guidance, see Asking permission to use notifications). After agreeing, people generally use settings to specify the styles of notification they want to receive, and to specify delivery times for notifications that have different levels of urgency. To learn more about the ways people can customize the notification experience, see Managing notifications.\n\nAnatomy\n\nDepending on the platform, a notification can use various styles, such as:\n\nA banner or view on a Lock Screen, Home Screen, Home View, or desktop\n\nA badge on an app icon\n\nAn item in Notification Center\n\nIn addition, a notification related to direct communication — like a phone call or message — can provide an interface that’s distinct from noncommunication notifications, featuring prominent contact images (or avatars) and group names instead of the app icon.\n\nBest practices\n\nProvide concise, informative notifications. People turn on notifications to get quick updates, so you want to provide valuable information succinctly.\n\nAvoid sending multiple notifications for the same thing, even if someone hasn’t responded. People attend to notifications at their convenience. If you send multiple notifications for the same thing, you fill up Notification Center, and people may turn off all notifications from your app.\n\nAvoid sending a notification that tells people to perform specific tasks within your app. If it makes sense to offer simple tasks that people can perform without opening your app, you can provide notification actions. Otherwise, avoid telling people what to do because it’s hard for people to remember such instructions after they dismiss the notification.\n\nUse an alert — not a notification — to display an error message. People are familiar with both alerts and notifications, so you don’t want to cause confusion by using the wrong component. For guidance, see Alerts.\n\nHandle notifications gracefully when your app is in the foreground. Your app’s notifications don’t appear when your app is in the front, but your app still receives the information. In this scenario, present the information in a way that’s discoverable but not distracting or invasive, such as incrementing a badge or subtly inserting new data into the current view. For example, when a new message arrives in a mailbox that people are currently viewing, Mail simply adds it to the list of unread messages because sending a notification about it would be unnecessary and distracting.\n\nAvoid including sensitive, personal, or confidential information in a notification. You can’t predict what people will be doing when they receive a notification, so it’s essential to avoid including private information that could be visible to others.\n\nContent\n\nWhen a notification includes a title, the system displays it at the top where it’s most visible. In a notification related to direct communication, the system automatically displays the sender’s name in the title area; in a noncommunication notification, the system displays your app name if you don’t provide a title.\n\nCreate a short title if it provides context for the notification content. Prefer brief titles that people can read at a glance, especially on Apple Watch, where space is limited. When possible, take advantage of the prominent notification title area to provide useful information, like a headline, event name, or email subject. If you can only provide a generic title for a noncommunication notification — like New Document — it can be better to let the system display your app name instead. Use title-style capitalization and no ending punctuation.\n\nWrite succinct, easy-to-read notification content. Use complete sentences, sentence case, and proper punctuation, and don’t truncate your message — the system does this automatically when necessary.\n\nProvide generically descriptive text to display when notification previews aren’t available. In Settings, people can choose to hide notification previews for all apps. In this situation, the system shows only your app icon and the default title Notification. To give people sufficient context to know whether they want to view the full notification, write body text that succinctly describes the notification content without revealing too many details, like “Friend request,” “New comment,” “Reminder,” or “Shipment” (for developer guidance, see hiddenPreviewsBodyPlaceholder). Use sentence-style capitalization for this text.\n\nAvoid including your app name or icon. The system automatically displays a large version of your app icon at the leading edge of each notification; in a communication notification, the system displays the sender’s contact image badged with a small version of your icon.\n\nConsider providing a sound to supplement your notifications. Sound can be a great way to distinguish your app’s notifications and get someone’s attention when they’re not looking at the device. You can create a custom sound that coordinates with the style of your app or use a system-provided alert sound. If you use a custom sound, make sure it’s short, distinctive, and professionally produced. A notification sound can enhance the user experience, but don’t rely on it to communicate important information, because people may not hear it. Although people might also want a vibration to accompany alert sounds, you can’t provide such a vibration programmatically. For developer guidance, see UNNotificationSound.\n\nNotification actions\n\nA notification can present a customizable detail view that contains up to four buttons people use to perform actions without opening your app. For example, a Calendar event notification provides a Snooze button that postpones the event’s alarm for a few minutes. For developer guidance, see Handling notifications and notification-related actions.\n\nProvide beneficial actions that make sense in the context of your notification. Prefer actions that let people perform common, time-saving tasks that eliminate the need to open your app. For each button, use a short, title-case term or phrase that clearly describes the result of the action. Don’t include your app name or any extraneous information in the button label, keep the text brief to avoid truncation, and take localization into account as you write it.\n\nAvoid providing an action that merely opens your app. When people tap a notification or its preview, they expect your app to display related content, so presenting an action button that does the same thing clutters the detail view and can be confusing.\n\nPrefer nondestructive actions. If you must provide a destructive action, make sure people have enough context to avoid unintended consequences. The system gives a distinct appearance to the actions you identify as destructive.\n\nProvide a simple, recognizable interface icon for each notification action. An interface icon reinforces an action’s meaning, helping people instantly understand what it does. The system displays your interface icon on the trailing side of the action title. When you use SF Symbols, you can choose an existing symbol that represents your command or edit a related symbol to create a custom icon.\n\nBadging\n\nA badge is a small, filled oval containing a number that can appear on an app icon to indicate the number of unread notifications that are available. After people address unread notifications, the badge disappears from the app icon, reappearing when new notifications arrive. People can choose whether to allow an app to display badges in their notification settings.\n\nUse a badge only to show people how many unread notifications they have. Don’t use a badge to convey numeric information that isn’t related to notifications, such as weather-related data, dates and times, stock prices, or game scores.\n\nMake sure badging isn’t the only method you use to communicate essential information. People can turn off badging for your app, so if you rely on it to show people when there’s important information, people can miss the message. Always make sure that you make important information easy for people to find as soon as they open your app.\n\nKeep badges up to date. Update your app’s badge as soon as people open the corresponding notifications. You don’t want people to think there are new notifications available, only to find that they’ve already viewed them all. Note that reducing a badge’s count to zero removes all related notifications from Notification Center.\n\nAvoid creating a custom image or component that mimics the appearance or behavior of a badge. People can turn off notification badges if they choose, and will become frustrated if they have done so and then see what appears to be a badge.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or visionOS.\n\nwatchOS\n\nOn Apple Watch, notifications occur in two stages: short look and long look. People can also view notifications in Notification Center. On supported devices, people can double-tap to respond to notifications.\n\nYou can help people have a great notification experience by designing app-specific assets and actions that are relevant on Apple Watch. If your watchOS app has an iPhone companion that supports notifications, watchOS can automatically provide default short-look and long-look interfaces if necessary.\n\nShort looks\n\nA short look appears when the wearer’s wrist is raised and disappears when it’s lowered.\n\nAvoid using a short look as the only way to communicate important information. A short look appears only briefly, giving people just enough time to see what the notification is about and which app sent it. If your notification information is critical, make sure you deliver it in other ways, too.\n\nKeep privacy in mind. Short looks are intended to be discreet, so it’s important to provide only basic information. Avoid including potentially sensitive information in the notification’s title.\n\nLong looks\n\nLong looks provide more detail about a notification. If necessary, people can swipe vertically or use the Digital Crown to scroll a long look. After viewing a long look, people can dismiss it by tapping it or simply by lowering their wrist.\n\nA custom long-look interface can be static or dynamic. The static interface lets you display a notification’s message along with additional static text and images. The dynamic interface gives you access to the notification’s full content and offers more options for configuring the appearance of the interface.\n\nYou can customize the content area for both static and dynamic long looks, but you can’t change the overall structure of the interface. The system-defined structure includes a sash at the top of the interface and a Dismiss button at the bottom, below all custom buttons.\n\nConsider using a rich, custom long-look notification to let people get the information they need without launching your app. You can use SwiftUI Animations to create engaging, interruptible animations; alternatively, you can use SpriteKit or SceneKit.\n\nAt the minimum, provide a static interface; prefer providing a dynamic interface too. The system defaults to the static interface when the dynamic interface is unavailable, such as when there is no network or the iPhone companion app is unreachable. Be sure to create the resources for your static interface in advance and package them with your app.\n\nChoose a background appearance for the sash. The system-provided sash, at the top of the long-look interface, displays your app icon and name. You can customize the sash’s color or give it a blurred appearance. If you display a photo at the top of the content area, you’ll probably want to use the blurred sash, which has a light, translucent appearance that gives the illusion of overlapping the image.\n\nChoose a background color for the content area. By default, the long look’s background is transparent. If you want to match the background color of other system notifications, use white with 18% opacity; otherwise, you can use a custom color, such as a color within your brand’s palette.\n\nProvide up to four custom actions below the content area. For each long look, the system uses the notification’s type to determine which of your custom actions to display as buttons in the notification UI. In addition, the system always displays a Dismiss button at the bottom of the long-look interface, below all custom buttons. If your watchOS app has an iPhone companion that supports notifications, the system shares the actionable notification types already registered by your iPhone app and uses them to configure your custom action buttons.\n\nDouble tap\n\nPeople can double-tap to respond to notifications on supported devices. When a person responds to a notification with a double tap, the system selects the first nondestructive action as the response.\n\nKeep double tap in mind when choosing the order of custom actions you present as responses to a notification. Because a double tap runs the first nondestructive action, consider placing the action that people use most frequently at the top of the list. For example, a parking app that provides custom actions for extending the time on a paid parking spot could offer options to extend the time by 5 minutes, 15 minutes, or an hour, with the most common choice listed first.\n\nResources\nRelated\n\nManaging notifications\n\nAlerts\n\nDeveloper documentation\n\nAsking permission to use notifications — User Notifications\n\nUser Notifications UI\n\nUser Notifications\n\nVideos\nSend communication and Time Sensitive notifications\nThe Push Notifications primer\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nUpdated watchOS platform considerations with guidance for presenting notification responses to double tap."
  },
  {
    "title": "Rating indicators",
    "url": "https://developer.apple.com/design/human-interface-guidelines/rating-indicators",
    "html": "Rating indicators\nA rating indicator uses a series of horizontally arranged graphical symbols — by default, stars — to communicate a ranking level.\n\nA rating indicator doesn’t display partial symbols; it rounds the value to display complete symbols only. Within a rating indicator, symbols are always the same distance apart and don’t expand or shrink to fit the component’s width.\n\nBest practices\n\nMake it easy to change rankings. When presenting a list of ranked items, let people adjust the rank of individual items inline without navigating to a separate editing screen.\n\nIf you replace the star with a custom symbol, make sure that its purpose is clear. The star is a very recognizable ranking symbol, and people may not associate other symbols with a rating scale.\n\nPlatform considerations\n\nNo additional considerations for macOS. Not supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nRatings and reviews\n\nDeveloper documentation\n\nNSLevelIndicator.Style.rating — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 23, 2022\n\n\t\n\nNew page."
  },
  {
    "title": "Activity rings",
    "url": "https://developer.apple.com/design/human-interface-guidelines/activity-rings",
    "html": "Activity rings\nActivity rings show an individual’s daily progress toward Move, Exercise, and Stand goals.\n\nIn watchOS, the Activity ring element always contains three rings, whose colors and meanings match those the Activity app provides. In iOS, the Activity ring element contains either a single Move ring representing an approximation of activity, or all three rings if an Apple Watch is paired.\n\nBest practices\n\nDisplay Activity rings when they’re relevant to the purpose of your app. Activity rings are an important component of the Apple Watch experience. If your app is related to health or fitness, and especially if it contributes information to HealthKit, people generally expect to find Activity rings in your interface. For example, if you structure a workout or health session around the completion of Activity rings, consider displaying the element on a workout metrics screen so that people can track their progress during their session. Similarly, if you provide a summary screen that appears at the conclusion of a workout, you could display Activity rings to help people check on their progress toward their daily goals.\n\nUse Activity rings only to show Move, Exercise, and Stand information. Activity rings are designed to consistently represent progress in these specific areas. Don’t attempt to replicate or modify Activity rings for other purposes. Never use Activity rings to display other types of data. Never show Move, Exercise, and Stand progress in another ring-like element.\n\nUse Activity rings to show progress for a single person. Never use Activity rings to represent data for more than one person, and make sure it’s obvious whose progress you’re showing by using a label, a photo, or an avatar.\n\nMaintain Activity ring colors. For a consistent experience, keep the visual appearance of Activity rings the same regardless of the context in which they appear. Never change the look of the rings by using filters, changing colors, or modifying opacity. Instead, design the surrounding interface to blend with the rings. For example, enclose the rings and background within a circle. Always scale the rings appropriately so they don’t seem disconnected or out of place.\n\nAlways display Activity rings on a black background. The background is a key component of Activity ring presentation. Don’t display the rings on anything other than a black background.\n\nMaintain Activity ring margins. An Activity ring element must include a minimum outer margin of no less than the distance between rings. Never allow other elements to crop, obstruct, or encroach upon this margin or the rings themselves. To display an Activity ring element within a circle, adjust the corner radius of the enclosing view rather than applying a circular mask.\n\nDifferentiate other ring-like elements from Activity rings. Mixing different ring styles can lead to a visually confusing interface. If you must include other rings, use padding, lines, or labels to separate them from Activity rings. Color and scale can also help provide visual separation.\n\nDon’t send notifications that repeat the same information the Activity app sends. The system already delivers Move, Exercise, and Stand progress updates, so it’s confusing for people to receive redundant information from your app. Also, don’t show an Activity ring element in your app’s notifications. It’s fine to reference Activity progress in a notification, but do so in a way that’s unique to your app and doesn’t replicate the same information the system provides.\n\nDon’t use Activity rings for decoration. Activity rings provide information to people; they don’t just embellish your app’s design. Never display Activity rings in labels or background graphics.\n\nDon’t use Activity rings for branding. Use Activity rings strictly to display Activity progress in your app. Never use Activity rings in your app’s icon or marketing materials.\n\nPlatform considerations\n\nNo additional considerations for iPadOS or watchOS. Not supported in macOS, tvOS, or visionOS.\n\niOS\n\nActivity rings are available in iOS with HKActivityRingView. The appearance of the Activity ring element changes automatically depending on whether an Apple Watch is paired:\n\nWith an Apple Watch paired, iOS shows all three Activity rings.\n\nWithout an Apple Watch paired, iOS shows the Move ring only, which represents an approximation of a person’s activity based on their steps and workout information from other apps.\n\nApple Watch paired\n\nNo Apple Watch paired\n\nBecause iOS shows Activity rings whether or not an Apple Watch is paired, activity history can include a combination of both styles. For example, Activity rings in Fitness have three rings when a person exercises with their Apple Watch paired, and only the Move ring when they exercise without their Apple Watch.\n\nResources\nRelated\n\nWorkouts\n\nDeveloper documentation\n\nHKActivityRingView — HealthKit\n\nVideos\nBuild a workout app for Apple Watch\nBuild custom workouts with WorkoutKit\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded artwork representing Activity rings in iOS."
  },
  {
    "title": "Pointing devices",
    "url": "https://developer.apple.com/design/human-interface-guidelines/pointing-devices",
    "html": "Pointing devices\nPeople can use a pointing device like a trackpad or mouse to navigate the interface and initiate actions.\n\nPeople appreciate the precision and flexibility that pointing devices offer. On a Mac, people typically expect to combine a pointing device with a keyboard as they navigate apps and the system. On iPad and Apple Vision Pro, a pointing device gives people an additional way to interact with apps and content, without replacing touch, eyes, or gestures.\n\nBest practices\n\nBe consistent when responding to mouse and trackpad gestures. People expect most gestures to work the same throughout the system, regardless of the app or game they’re using. On a Mac, for example, people rely on the “Swipe between pages” gesture to behave the same way whether they’re browsing individual document pages, webpages, or images.\n\nAvoid redefining systemwide trackpad gestures. Even in a game that uses app-specific gestures in a custom way, people expect systemwide gestures to be available; for example, people expect to make familiar gestures to reveal the Dock or Mission Control in macOS. Remember that Mac users can customize the gestures for performing systemwide actions.\n\nProvide a consistent experience in your app, whether people are using gestures, eyes, a pointing device, or a keyboard. People expect to move fluidly between multiple types of input, and they don’t want to learn different interactions for each mode or for each app they use.\n\nLet people use the pointer to reveal and hide controls that automatically minimize or fade out. In iPadOS, for example, people can reveal the minimized Safari toolbar by holding the pointer over it (the toolbar minimizes again when the pointer moves away). People can also move the pointer to reveal or hide playback controls while they watch a full-screen video.\n\nProvide a consistent experience when people press and hold a modifier key while interacting with objects in your app. For example, if people can duplicate an object by pressing and holding the Option key while they drag that object, ensure the result is the same whether they drag using touch or the pointer.\n\nPlatform considerations\n\nNo additional considerations for iOS. Not supported in tvOS or watchOS.\n\niPadOS\n\niPadOS builds on the traditional pointer experience, automatically adapting the pointer to the current context and providing rich visual feedback at a level of precision that enhances productivity and simplifies common tasks on a touchscreen device. The iPadOS pointing system gives people an additional way to interact with apps and content — it doesn’t replace touch.\n\nAllow multiple selection in custom views when necessary. In iPadOS 15 and later, people can click and drag the pointer over multiple items to select them. As people use the pointer in this way, it expands into a visible rectangle that selects the items it encompasses. Standard nonlist collection views support this interaction by default; if you want to support multiple selection in custom views, you need to implement it yourself. For developer guidance, see UIBandSelectionInteraction.\n\nDistinguish between pointer and finger input only if it provides value. For example, a scrubber can give people an additional way to target a location in a video when they’re using the pointer. In this scenario, people can drag the playhead using either the pointer or touch, but they can use the pointer to click a precise seek destination.\n\nPointer shape and content effects\n\niPadOS integrates the appearance and behavior of both the pointer and the element it moves over, bringing focus to the item the pointer is targeting. You can support the system-provided pointer effects or modify them to suit your experience.\n\nBy default, the pointer’s shape is a circle, but it can display a system-defined or custom shape when people move it over specific elements or regions. For example, the pointer automatically uses the familiar I-beam shape when people move it over a text-entry area.\n\nPlay\n\nWith a content effect, the UI element or region beneath the pointer can also change its appearance when people hold the pointer over it. Depending on the type of content effect, the pointer can retain its current shape or transform into a shape that integrates with the element’s new appearance.\n\niPadOS defines three content effects that bring focus to different types of interactive elements in your app: highlight, lift, and hover.\n\nThe highlight effect transforms the pointer into a translucent, rounded rectangle that acts as a background for a control and includes a gentle parallax. The subtle highlighting and movement bring focus to the control without distracting people from their task. By default, iPadOS applies the highlight effect to bar buttons, tab bars, segmented controls, and edit menus.\n\nPlay\n\nThe lift effect combines a subtle parallax with the appearance of elevation to make an element seem like it’s floating above the screen. As the pointer fades out beneath the element, iPadOS creates the illusion of lift by scaling the element up while adding a shadow below it and a soft specular highlight on top of it. By default, iPadOS applies the lift effect to app icons and to buttons in Control Center.\n\nPlay\n\nHover is a generic effect that lets you apply custom scale, tint, or shadow values to an element as the pointer moves over it. The hover effect combines your custom values to bring focus to an item, but it doesn’t transform the default pointer shape.\n\nPlay\nPointer accessories\n\nPointer accessories are visual indicators that help people understand how they can use the pointer to interact with the current UI element. For example, a pointer approaching a resizable element might display small arrows to indicate that the element allows resizing along a certain axis.\n\nUnlike pointer shapes and content effects, accessories are secondary items that can combine with any pointer to communicate additional information. For developer guidance, see UIPointerAccessory.\n\nUse clear, simple images to create custom accessories. A pointer accessory is small, so it’s essential to create an image that communicates the pointer interaction without using too many details.\n\nConsider using the accessory transition to signal a change in an element’s state or behavior. In addition to animating the appearance and disappearance of pointer accessories, the system also animates the transitions among accessory shapes and positions that can accompany content effects. For example, you could communicate that an add action has become unavailable by transitioning the pointer accessory from the plus symbol to the circle.slash symbol.\n\nPointer magnetism\n\niPadOS helps people use the pointer to target an element by making the element appear to attract the pointer. People can experience this magnetic effect when they move the pointer close to an element and when they flick the pointer toward an element.\n\nWhen people move the pointer close to an element, the system starts transforming the pointer’s shape as soon as it reaches the element’s hit region. Because an element’s hit region typically extends beyond its visible boundaries, the pointer begins to transform before it appears to touch the element itself, creating the illusion that the element is pulling the pointer toward it.\n\nPlay\n\nWhen people flick the pointer toward an element, iPadOS examines the pointer’s trajectory to discover the element that’s the most likely target. When there’s an element in the pointer’s path, the system uses magnetism to pull the pointer toward the element’s center.\n\nBy default, iPadOS applies magnetism to elements that use the lift effect (like app icons) and the highlight effect (like bar buttons), but not to elements that use hover. Because an element that supports hover doesn’t transform the default pointer shape, adding magnetism could be jarring and might make people feel that they’ve lost control of the pointer.\n\nThe system also applies magnetism to text-entry areas, where it can help people avoid skipping to another line if they make unintended vertical movements while they’re selecting text.\n\nStandard pointers and effects\n\nWhen possible, support the system-provided content effects. People quickly become accustomed to the content effects they see throughout the system and generally expect their experience to apply to every app they use. To provide a consistent user experience, align your interactions with the design intent of each effect. Specifically:\n\nUse highlight for a small element that has a transparent background.\n\nUse lift for a small element that has an opaque background.\n\nUse hover for large elements and customize the scale, tint, and shadow attributes as needed (for guidance, see Customizing pointers).\n\nPrefer the system-provided pointer appearances for standard buttons and text-entry areas. You can help people feel more comfortable with your app when the pointer behaves in ways they expect.\n\nAdd padding around interactive elements to create comfortable hit regions. You might need to experiment to determine the right size for an element’s hit region. If the hit region is too small, it can make people feel that they have to be extra precise when interacting with the element. On the other hand, when an element’s hit region is too large, people can feel that it takes a lot of effort to pull the pointer away from the element. In general, it works well to add about 12 points of padding around elements that include a bezel; for elements without a bezel, it works well to add about 24 points of padding around the element’s visible edges.\n\nCreate contiguous hit regions for custom bar buttons. If there’s space between the hit regions of adjacent buttons in a bar, people may experience a distracting motion when the pointer reverts briefly to its default shape as it moves between buttons.\n\nSpecify the corner radius of a nonstandard element that receives the lift effect. With the system-provided lift effect, the pointer transforms to match the element’s shape as it fades out. By default, the pointer uses the system-defined corner radius to transform into a rounded rectangle. If your element is a different shape — if it’s a circle, for example — you need to provide the radius so the pointer can animate seamlessly into the shape of the element. For developer guidance, see UIPointerShape.roundedRect(_:radius:).\n\nCustomizing pointers\n\nPrefer system-provided pointer effects for custom elements that behave like standard elements. When a custom element behaves like a standard one, people generally expect to interact with it using familiar pointer interactions. For example, if buttons in a custom navigation bar don’t use the standard highlight effect, people might think they’re broken.\n\nUse pointer effects in consistent ways throughout your app. For example, if your app helps people draw, provide a similar pointer experience for every drawing area in your app so that people can apply the knowledge they gain in one area to the others.\n\nAvoid creating gratuitous pointer and content effects. People notice when the appearance of the pointer or the UI element beneath it changes, and they expect the changes to be useful. Creating a purely decorative pointer effect can distract and even irritate people without providing any practical value.\n\nKeep custom pointer shapes simple. Ideally, the pointer’s shape signals the action people can take in the current context without drawing too much attention to itself. If people don’t instantly understand your custom pointer shape, they’re likely to waste time trying to discover what the shape means.\n\nConsider enhancing the pointer experience by displaying custom annotations that provide useful information. For example, you could display X and Y values when people hold the pointer over a graphing area in your app. Keynote uses annotations to display the current width and height of a resizable image.\n\nAvoid displaying instructional text with a pointer. A pointer that displays instructional text can make an app seem complicated and difficult to use. Instead of providing instructions, prioritize clarity and simplicity in your interface, so that people can quickly grasp how to use your app whether they’re using the pointer or touching the screen.\n\nConsider the interplay of shadow, scale, and element spacing when defining custom hover effects. In general, reserve scaling for elements that can increase in size without crowding nearby elements. For example, scaling doesn’t work well for a table row because a row can’t expand without overlapping adjacent rows. For an element that has little space around it, consider using a hover effect that includes tint, but not scale and shadow. Note that it doesn’t work well to use shadow without including scale, because an unscaled element doesn’t appear to get closer to the viewer even when its shadow implies that it’s elevated above the screen.\n\nmacOS\n\nmacOS supports a wide range of standard mouse and trackpad interactions that people can customize. For example, when a click or gesture isn’t a primary way to interact with content, people can often turn it on or off based on their current workflow. People can also choose specific regions of a mouse or trackpad to invoke secondary clicks, and select specific finger combinations and movements for certain gestures.\n\nClick or gesture\n\n\t\n\nExpected behavior\n\n\t\n\nMouse\n\n\t\n\nTrackpad\n\n\n\n\nPrimary click\n\n\t\n\nSelect or activate an item, such as a file or button.\n\n\t\n\n●\n\n\t\n\n●\n\n\n\n\nSecondary click\n\n\t\n\nReveal contextual menus.\n\n\t\n\n●\n\n\t\n\n●\n\n\n\n\nScrolling\n\n\t\n\nMove content up, down, left, or right within a view.\n\n\t\n\n●\n\n\t\n\n●\n\n\n\n\nSmart zoom\n\n\t\n\nZoom in or out on content, such as a web page or PDF.\n\n\t\n\n●\n\n\t\n\n●\n\n\n\n\nSwipe between pages\n\n\t\n\nNavigate forward or backward between individually displayed pages.\n\n\t\n\n●\n\n\t\n\n●\n\n\n\n\nSwipe between full-screen apps\n\n\t\n\nNavigate forward or backward between full-screen apps and spaces.\n\n\t\n\n●\n\n\t\n\n●\n\n\n\n\nMission Control (double-tap the mouse with two fingers or swipe up on the trackpad with three or four fingers)\n\n\t\n\nActivate Mission Control.\n\n\t\n\n●\n\n\t\n\n●\n\n\n\n\nLookup and data detectors (force click with one finger or tap with three fingers)\n\n\t\n\nDisplay a lookup window above selected content.\n\n\t\n\n\t\n\n●\n\n\n\n\nTap to click\n\n\t\n\nPerform the primary click action using a tap rather than a click.\n\n\t\n\n\t\n\n●\n\n\n\n\nForce click\n\n\t\n\nClick then press firmly to display a Quick Look window or lookup window above selected content. Apply a variable amount of pressure to affect pressure-sensitive controls, such as variable speed media controls.\n\n\t\n\n\t\n\n●\n\n\n\n\nZoom in or out (pinch with two fingers)\n\n\t\n\nZoom in or out.\n\n\t\n\n\t\n\n●\n\n\n\n\nRotate (move two fingers in a circular motion)\n\n\t\n\nRotate content, such as an image.\n\n\t\n\n\t\n\n●\n\n\n\n\nNotification Center (swipe from the edge of the trackpad)\n\n\t\n\nDisplay Notification Center.\n\n\t\n\n\t\n\n●\n\n\n\n\nApp Exposé (swipe down with three or four fingers)\n\n\t\n\nDisplay the current app’s windows in Exposé.\n\n\t\n\n\t\n\n●\n\n\n\n\nLaunchpad (pinch with thumb and three fingers)\n\n\t\n\nDisplay the Launchpad.\n\n\t\n\n\t\n\n●\n\n\n\n\nShow Desktop (spread with thumb and three fingers)\n\n\t\n\nSlide all windows out of the way to reveal the desktop.\n\n\t\n\n\t\n\n●\n\nPointers\n\nmacOS offers a variety of standard pointer styles, which your app can use to communicate the interactive state of an interface element or the result of a drag operation.\n\nPointer\n\n\t\n\nName\n\n\t\n\nMeaning\n\n\t\n\nAppKit API\n\n\n\n\n\t\n\nArrow\n\n\t\n\nStandard pointer for selecting and interacting with content and interface elements.\n\n\t\n\narrow\n\n\n\n\n\t\n\nClosed hand\n\n\t\n\nDragging to reposition the display of content within a view—for example, dragging a map around in Maps.\n\n\t\n\nclosedHand\n\n\n\n\n\t\n\nContextual menu\n\n\t\n\nA contextual menu is available for the content below the pointer. This pointer is generally shown only when the Control key is pressed.\n\n\t\n\ncontextualMenu\n\n\n\n\n\t\n\nCrosshair\n\n\t\n\nPrecise rectangular selection is possible, such as when viewing an image in Preview.\n\n\t\n\ncrosshair\n\n\n\n\n\t\n\nDisappearing item\n\n\t\n\nA dragged item will disappear when dropped. If the item references an original item, the original is unaffected. For example, when dragging a mailbox out of the favorites bar in Mail, the original mailbox isn’t removed.\n\n\t\n\ndisappearingItem\n\n\n\n\n\t\n\nDrag copy\n\n\t\n\nDuplicates a dragged—not moved—item when dropped into the destination. Appears when pressing the Option key during a drag operation.\n\n\t\n\ndragCopy\n\n\n\n\n\t\n\nDrag link\n\n\t\n\nDuring a drag and drop operation, creates an alias of the selected file when dropped. The alias points to the original file, which remains unmoved. Appears when pressing the Option and Command keys during a drag operation.\n\n\t\n\ndragLink\n\n\n\n\n\t\n\nHorizontal I beam\n\n\t\n\nSelection and insertion of text is possible in a horizontal layout, such as a TextEdit or Pages document.\n\n\t\n\niBeam\n\n\n\n\n\t\n\nOpen hand\n\n\t\n\nDragging to reposition content within a view is possible.\n\n\t\n\nopenHand\n\n\n\n\n\t\n\nOperation not allowed\n\n\t\n\nA dragged item can’t be dropped in the current location.\n\n\t\n\noperationNotAllowed\n\n\n\n\n\t\n\nPointing hand\n\n\t\n\nThe content beneath the pointer is a URL link to a webpage, document, or other item.\n\n\t\n\npointingHand\n\n\n\n\n\t\n\nResize down\n\n\t\n\nResize or move a window, view, or element downward.\n\n\t\n\nresizeDown\n\n\n\n\n\t\n\nResize left\n\n\t\n\nResize or move a window, view, or element to the left.\n\n\t\n\nresizeLeft\n\n\n\n\n\t\n\nResize left/right\n\n\t\n\nResize or move a window, view, or element to the left or right.\n\n\t\n\nresizeLeftRight\n\n\n\n\n\t\n\nResize right\n\n\t\n\nResize or move a window, view, or element to the right.\n\n\t\n\nresizeRight\n\n\n\n\n\t\n\nResize up\n\n\t\n\nResize or move a window, view, or element upward.\n\n\t\n\nresizeUp\n\n\n\n\n\t\n\nResize up/down\n\n\t\n\nResize or move a window, view, or element upward or downward.\n\n\t\n\nresizeUpDown\n\n\n\n\n\t\n\nVertical I beam\n\n\t\n\nSelection and insertion of text is possible in a vertical layout.\n\n\t\n\niBeamCursorForVerticalLayout\n\nvisionOS\n\nIn visionOS, people can attach an external pointing device or keyboard, and use both devices while they continue to use their eyes and hands. If people look at an element and then move the pointer, the system brings focus to the element under the pointer. Your app doesn’t have to do anything to support this behavior.\n\nWhen a pointing device is attached, the area people are looking at determines the pointer’s context. For example, when people shift their eyes from one window to another, the pointer’s context seamlessly transitions to the new window.\n\nPlay\n\nWhen people use an attached pointing device that supports gestures, like a trackpad or mouse, the pointer hides while people are gesturing, minimizing visual distraction. In this scenario, the pointer remains hidden until people move it, when it reappears in the location they’re looking at.\n\nResources\nRelated\n\nEntering data\n\nKeyboards\n\nDeveloper documentation\n\nInput events — SwiftUI\n\nPointer interactions — UIKit\n\nMouse, Keyboard, and Trackpad — AppKit\n\nVideos\nDesign for the iPadOS pointer\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Focus and selection",
    "url": "https://developer.apple.com/design/human-interface-guidelines/focus-and-selection",
    "html": "Focus and selection\nFocus helps people visually confirm the object that their interaction targets.\n\nFocus supports simplified, component-based navigation. Using inputs like a remote, game controller, or keyboard, people bring focus to the components they want to interact with.\n\nIn many cases, focusing an item also selects it. The exception is when automatic selection might cause a distracting context shift, like opening a new view. In tvOS, for example, people use the remote to move focus from item to item as they seek the one they want, but because selecting a focused item opens or activates it, selection requires a separate gesture.\n\nDifferent platforms communicate focus in different ways. For example, iPadOS and macOS show focus by drawing a ring around an item or highlighting it; tvOS generally uses the parallax effect to give the focused item an appearance of depth and liveliness. The combination of focus effects and interactions is sometimes called a focus system or focus model.\n\nBest practices\n\nRely on system-provided focus effects. System-defined focus effects are precisely tuned to complement interactions with Apple devices, providing experiences that feel responsive, fluid, and lifelike. Incorporating system-provided focus behaviors gives your app consistency and predictability, helping people understand it quickly. Consider creating custom focus effects only if it’s absolutely necessary.\n\nAvoid changing focus without people’s interaction. People rely on the focus system to help them know where they are in your app. If you change focus without their interaction, people have to spend time finding the newly focused item, delaying their current task. The exception is when people are moving focus using an input device that lets them make discrete, directional movements — like a keyboard, remote, or game controller — and a previously focused item disappears. In this scenario, there are only a small number of items within one discrete step of the previously focused item, so moving focus to one of these remaining items ensures that the focus indicator is in a location people can easily find. When people aren’t moving focus by using such an input device, you can’t predict the item they’ll target next, so it’s generally best to simply hide the focus indicator when the focused object disappears.\n\nBe consistent with the platform as you help people bring focus to items in your app. For example, in iPadOS and macOS, a full keyboard access mode helps people use the keyboard to reach every control, so you only need to support focus for content elements like list items, text fields, and search fields, and not for controls like buttons, sliders, and toggles. In contrast, tvOS users rely on using directional gestures on a remote or game controller (or pressing the arrow keys on an attached keyboard) to reach every onscreen element, so you need to make sure that people can bring focus to every element in your app.\n\nIndicate focus using visual appearances that are consistent with the platform. For example, consider a window that contains a list of items. In iPadOS and macOS, the system draws focused list items using white text and a background highlight that matches the app’s accent color, drawing unfocused items using the standard text color and a gray background highlight (for developer guidance, see UICollectionView and NSTableView).\n\nIn general, use a focus ring for a text or search field, but use a highlight in a list or collection. Although you can use a focus ring to draw attention to an item that fills a cell, like a photo, it’s usually easier for people to view lists and collections when an entire row is highlighted.\n\nPlatform considerations\n\nNot supported in iOS or watchOS.\n\niPadOS\n\niPadOS 15 and later defines a focus system that supports keyboard interactions for navigating text fields, text views, and sidebars, in addition to various types of collection views and other custom views in your app.\n\nThe iPadOS and tvOS focus systems are similar. People perform actions by moving a focus indicator to an item and then selecting it (for guidance, see tvOS). Although the underlying system is the same, the user experiences are a little different. tvOS uses directional focus, which means people can use the same interaction — that is, swiping the Siri Remote or using only the arrow keys on a connected keyboard — to navigate to every onscreen component. In contrast, iPadOS defines focus groups, which represent specific areas within an app, like a sidebar, grid, or list. Using focus groups, iPadOS can support two different keyboard interactions.\n\nPressing the Tab key moves focus among focus groups, letting people navigate to sidebars, grids, and other app areas.\n\nPressing an arrow key supports a directional focus interaction that’s similar to tvOS, but limited to navigation among items in the same focus group. For example, people can use an arrow key to move through the items in a list or a sidebar.\n\nOnscreen components can indicate focus by using the halo effect or the highlighted appearance.\n\nThe halo focus effect — also known as the focus ring — displays a customizable outline around the component. You can apply the halo effect to custom views and to fully opaque content within a collection or list cell, such as an image.\n\nCustomize the halo focus effect when necessary. By default, the system uses an item’s shape to infer the shape of its halo. If the system-provided halo doesn’t give you the appearance you want, you can refine it to match contours like rounded corners or shapes defined by Bézier paths. You can also adjust a halo’s position if another component occludes or clips it. For example, you might need to ensure that a badge appears above the halo or that a parent view doesn’t clip it. For developer guidance, see UIFocusHaloEffect.\n\nThe highlighted appearance — in which the component’s background uses the app’s accent color — also indicates focus, but it’s not a focus effect. The highlight appearance occurs automatically when people select a collection view cell on which you’ve set background and content configurations (for developer guidance, see UICollectionViewCell).\n\nEnsure that focus moves through your custom views in ways that make sense. As people continue pressing the Tab key, focus moves through focus groups in reading order: leading to trailing, and top to bottom. Although focus moves through system-provided views in ways that people expect, you might need to adjust the order in which the focus system visits your custom views. For example, if you want focus to move down through a vertical stack of custom views before it moves in the trailing direction to the next view, you need to identify the stack container as a single focus group. For developer guidance, see focusGroupIdentifier.\n\nAdjust the priority of an item to reflect its importance within a focus group. When a group receives focus, its primary item automatically receives focus too, making it easy for people to select the item they’re most likely to want. You can make an item primary by increasing its priority. For developer guidance, see UIFocusGroupPriority.\n\ntvOS\n\nIn a full-screen experience, let people use gestures to interact with the content, not to move focus. When an item displays in full screen, it doesn’t show focus, so people naturally assume that their gestures will affect the object, and not its focus state.\n\nAvoid displaying a pointer. People expect to navigate a fixed number of items by changing focus, not by trying to drag a tiny pointer around a huge screen. While free-form movement might make sense during gameplay, such as when looking for a hidden object or flying a plane, use the focus model when people navigate menus and other interface elements. If your app requires a pointer, make sure it’s highly visible and feels integrated with your experience.\n\nDesign your interface to accommodate components in various focus states. In tvOS, focusable items can have up to five different states, each of which is visually distinct. Because focusing an item often increases its scale, you need to supply assets for the larger, focused size to ensure they always look sharp, and you need to make sure the larger item doesn’t crowd the surrounding interface.\n\nState\n\n\t\n\nDescription\n\n\n\n\n\t\n\nThe viewer hasn’t brought focus to the item. Unfocused items appear less prominent than focused items.\n\n\n\n\n\t\n\nThe viewer brings focus to the item. A focused item visually stands out from the other onscreen content through elevation to the foreground, illumination, and animation.\n\n\n\n\n\t\n\nThe viewer chooses the focused item. A focused item provides instant visual feedback when people choose it. For example, a button might briefly invert its colors and animate before it transitions to its selected appearance.\n\n\n\n\n\t\n\nThe viewer has chosen or activated the item in some way. For example, a heart-shaped button that people can use to favorite a photo might appear filled in the selected state and empty in the deselected state.\n\n\n\n\n\t\n\nThe viewer can’t bring focus to the item or choose it. An unavailable item appears inactive.\n\nFor developer guidance, see Adding user-focusable elements to a tvOS app.\n\nvisionOS\n\nvisionOS supports the same focus system as in iPadOS and tvOS, letting people use a connected input device like a keyboard or game controller to interact with apps and the system.\n\nNote\n\nWhen people look at a virtual object to identify it as the object they want to interact with, the system uses the hover effect, not a focus effect, to provide visual feedback (for guidance, see Eyes). The hover effect isn’t related to the focus system.\n\nResources\nRelated\n\nEyes\n\nKeyboards\n\nDeveloper documentation\n\nFocus Attributes — TVML\n\nFocus-based navigation — UIKit\n\nAbout focus interactions for Apple TV — UIKit\n\nVideos\nDesign for spatial input\nDesign for spatial user interfaces\nDesign for the iPadOS pointer\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nClarified the difference between focus effects and the visionOS hover effect.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Undo and redo",
    "url": "https://developer.apple.com/design/human-interface-guidelines/undo-and-redo",
    "html": "Undo and redo\nUndo and redo gives people easy ways to reverse many types of actions, which can also help people explore and experiment safely as they learn a new interface or task.\n\nPeople expect undo and redo to let them reverse their recent actions, so they’re likely to try undoing — often multiple times — until something changes. In a situation like this, people might not remember which of their previous actions an undo is targeting, which can lead to unintended changes and frustration. To help people remain in control, it’s essential to help people predict the outcome of undoing and redoing and to highlight the results.\n\nBest practices\n\nHelp people predict the results of undo and redo as much as possible. On iPhone, for example, you can describe the result in the alert that displays when people shake the device, giving them the option of performing the undo or canceling it. If you provide undo and redo menu items, you can modify the menu item labels to identify the result. For example, a document-based app might use menu item labels like Undo Typing or Redo Bold.\n\nShow the results of an undo or redo. Sometimes, the most recent action that people want to undo affects content or an area that’s no longer visible. In cases like this, it’s crucial to highlight the result of each undo and redo to keep people from thinking that the action had no effect, which can lead them to perform it repeatedly. For example, if people undo after deleting a paragraph in a document area that’s no longer onscreen, you might scroll the document to show the restored paragraph.\n\nLet people undo multiple times. Avoid placing unnecessary limits on the number of times people can undo or redo. People generally expect to undo every action they’ve performed since taking a logical step like opening a document or saving their work.\n\nConsider giving people the option to revert multiple changes at once. In some scenarios, people might appreciate the ability to undo a batch of discrete but related actions — like incremental adjustments to a single property or attribute — so they don’t have to undo each individual adjustment. In other cases, it can make sense to give people a convenient way to undo all the changes they made since opening a document or saving their work.\n\nProvide undo and redo buttons only when necessary. People generally expect to initiate undo and redo in system-supported ways, such as choosing the items in a macOS app’s Edit menu, using keyboard shortcuts on a Mac or iPad, or shaking their iPhone. If it’s important to provide dedicated undo and redo buttons in your app, use the standard system-provided symbols and put the buttons in a familiar location, like a navigation bar or toolbar.\n\nPlatform considerations\n\nNo additional considerations for visionOS. Not supported in tvOS or watchOS.\n\niOS, iPadOS\n\nAvoid redefining standard gestures for undo and redo. For example, people can use a three-finger swipe to initiate an undo or redo, or shake their iPhone. As with all standard gestures, redefining them in your interface runs the risk of confusing people and making your experience unpredictable.\n\nBriefly and precisely describe the operation to be undone or redone. The undo and redo alert title automatically includes a prefix of “Undo ” or “Redo ” (including the trailing space). You need to provide an additional word or two that describes what’s being undone or redone, to appear after this prefix. For example, you might create alert titles such as “Undo Name” or “Redo Address Change.”\n\nmacOS\n\nPlace undo and redo commands in the Edit menu and support the standard keyboard shortcuts. Mac users expect to find undo and redo at the top of the Edit menu; they also expect to use Command–Z and Shift–Command–Z to perform undo and redo, respectively.\n\nResources\nRelated\n\nFeedback\n\nPointing devices\n\nKeyboard shortcuts\n\nEdit menu\n\nDeveloper documentation\n\nUndoManager — Foundation\n\nVideos\nEssential Design Principles"
  },
  {
    "title": "Page controls",
    "url": "https://developer.apple.com/design/human-interface-guidelines/page-controls",
    "html": "Page controls\nA page control displays a row of indicator images, each of which represents a page in a flat list.\n\nThe scrolling row of indicators helps people navigate the list to find the page they want. Page controls can handle an arbitrary number of pages, making them particularly useful in situations where people can create custom lists.\n\nPage controls appear as a series of small indicator dots by default, representing the available pages. A solid dot denotes the current page. Visually, these dots are always equidistant, and are clipped if there are too many to fit in the window.\n\nBest practices\n\nUse page controls to represent movement between an ordered list of pages. Page controls don’t represent hierarchical or nonsequential page relationships. For more complex navigation, consider using a sidebar or split view instead.\n\nCenter a page control at the bottom of the view or window. To ensure people always know where to find a page control, center it horizontally and position it near the bottom of the view.\n\nAlthough page controls can handle any number of pages, don’t display too many. More than about 10 dots are hard to count at a glance. If your app needs to display more than 10 pages as peers, consider using a different arrangement‚ such as a grid, that lets people navigate the content in any order.\n\nCustomizing indicators\n\nBy default, a page control uses the system-provided dot image for all indicators, but it can also display a unique image to help people identify a specific page. For example, Weather uses the location.fill symbol to distinguish the current location’s page.\n\nIf it enhances your app or game, you can provide a custom image to use as the default image for all indicators and you can also supply a different image for a specific page. For developer guidance, see preferredIndicatorImage and setIndicatorImage(_:forPage:).\n\nMake sure custom indicator images are simple and clear. Avoid complex shapes, and don’t include negative space, text, or inner lines, because these details can make an icon muddy and indecipherable at very small sizes. Consider using simple SF Symbols as indicators or design your own icons. For guidance, see Icons.\n\nCustomize the default indicator image only when it enhances the page control’s overall meaning. For example, if every page you list contains bookmarks, you might use the bookmark.fill symbol as the default indicator image.\n\nAvoid using more than two different indicator images in a page control. If your list contains one page with special meaning — like the current-location page in Weather — you can make the page easy to find by giving it a unique indicator image. In contrast, a page control that uses several unique images to mark several important pages is hard to use because people must memorize the meaning of each image. A page control that displays more than two types of indicator images tends to look messy and haphazard, even when each image is clear.\n\nUsing only two different indicators looks well-organized and provides a consistent experience.\n\nUsing several different indicators can make a page control look busy and difficult to use.\n\nAvoid coloring indicator images. Custom colors can reduce the contrast that differentiates the current-page indicator and makes the page control visible on the screen. To ensure that your page control is easy to use and looks good in different contexts, let the system automatically color the indicators.\n\nPlatform considerations\n\nNot supported in macOS.\n\niOS, iPadOS\n\nA page control can adjust the appearance of indicators to provide more information about the list. For example, the control highlights the indicator of the current page so people can estimate the page’s relative position in the list. When there are more indicators than fit in the space, the control can shrink indicators at both sides to suggest that more pages are available.\n\nPeople interact with page controls by tapping or scrubbing (to scrub, people touch the control and drag left or right). Tapping on the leading or trailing side of the current-page indicator reveals the next or previous page; in iPadOS, people can also use the pointer to target a specific indicator. Scrubbing opens pages in sequence, and scrubbing past the leading or trailing edge of the control helps people quickly reach the first or last page.\n\nDeveloper note\n\nIn the API, tapping is a discrete interaction, whereas scrubbing is a continuous interaction; for developer guidance, see UIPageControl.InteractionState.\n\nAvoid animating page transitions during scrubbing. People can scrub very quickly, and using the scrolling animation for every transition can make your app lag and cause distracting visual flashes. Use the animated scrolling transition only for tapping.\n\nA page control can include a translucent, rounded-rectangle background appearance that provides visual contrast for the indicators. You can choose one of the following background styles:\n\nAutomatic — Displays the background only when people interact with the control. Use this style when the page control isn’t the primary navigational element in the UI.\n\nProminent — Always displays the background. Use this style only when the control is the primary navigational control in the screen.\n\nMinimal — Never displays the background. Use this style when you just want to show the position of the current page in the list and you don’t need to provide visual feedback during scrubbing.\n\nFor developer guidance, see backgroundStyle.\n\nAvoid supporting the scrubber when you use the minimal background style. The minimal style doesn’t provide visual feedback during scrubbing. If you want to let people scrub a list of pages in your app, use the automatic or prominent background styles.\n\ntvOS\n\nUse page controls on collections of full-screen pages. A page control is designed to operate in a full-screen environment where multiple content-rich pages are peers in the page hierarchy. Inclusion of additional controls makes it difficult to maintain focus while moving between pages.\n\nvisionOS\n\nIn visionOS, page controls represent available pages and indicate the current page, but people don’t interact with them.\n\nwatchOS\n\nIn watchOS, page controls can be displayed at the bottom of the screen for horizontal pagination, or next to the Digital Crown when presenting a vertical tab view. When using vertical tab views, the page indicator shows people where they are in the navigation, both within the current page and within the set of pages. The page control transitions between scrolling through a page’s content and scrolling to other pages.\n\nUse vertical pagination to separate multiple views into distinct, purposeful pages. Give each page a clear purpose, and let people scroll through the pages using the Digital Crown. In watchOS, this design is more effective than horizontal pagination or many levels of hierarchical navigation.\n\nConsider limiting the content of an individual page to a single screen height. Embracing this constraint encourages each page to serve a clear and distinct purpose and results in a more glanceable design. Use variable-height pages judiciously and, if possible, only place them after fixed-height pages in your app design.\n\nResources\nRelated\n\nScroll views\n\nDeveloper documentation\n\nPageTabViewStyle — SwiftUI\n\nUIPageControl — UIKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using page controls in watchOS."
  },
  {
    "title": "Menus",
    "url": "https://developer.apple.com/design/human-interface-guidelines/menus",
    "html": "Menus\nA menu reveals its options when people interact with it, making it a space-efficient way to present commands in your app or game.\n\nMenus are ubiquitous throughout the interface, so most people already know how to use them. When you use menus consistently in your app or game, it can help make your experience feel familiar and easy to learn.\n\nThe system provides several types of menus that support different use cases, such as:\n\nA button — like a pop-up button or pull-down button — that reveals a menu of options directly relating to its action\n\nA hidden context menu that people can reveal to access a small number of frequently used actions relevant to their current view or task\n\nA macOS app’s menu bar menus that contain all the commands people can perform in the app\n\nRegardless of type, all menus list one or more menu items, each of which represents a command, option, or state that affects the current selection or context. When people choose a menu item, the action occurs and the menu typically closes.\n\nLabels\n\nEach menu item displays text to describe its action and may include a symbol or interface icon to clarify meaning. In addition to text and symbols, a menu item can also display the characters people type to perform the associated keyboard shortcut, if there is one. Unlike most other types of menus, a context menu doesn’t display keyboard shortcuts because it already provides a quick way to get task-specific actions.\n\nNote\n\nDepending on menu layout, an iOS, iPadOS, or visionOS app can display a few unlabeled menu items that use only symbols or icons to identify them. For guidance, see visionOS and iOS, iPadOS.\n\nTo help people understand what a menu item does, write a label that clearly and succinctly describes it. Depending on the item you’re describing, consider the following guidance:\n\nTo label a menu item that initiates an action, use a verb or verb phrase that describes the action, such as Copy, Share App, or Close.\n\nWhen describing the status of a menu item that toggles between attributes or states, indicate its current state. For example, you might use a pair of labels for a menu item that shows or hides something, like Show Completed and Hide Completed, or you might display a checkmark next to the label to show that the state or attribute is in effect, such as Organize by Conversation.\n\nFor consistent labels, adopt a condensed style that doesn’t include articles, and use title-style capitalization. In English, the articles a, an, and the always lengthen labels, but rarely enhance understanding. For example, when people want to open a message in Mail, they understand that the Open Message menu item refers to the currently selected message, so adding an article to the label — such as Open the Message — doesn’t help clarify the item’s action.\n\nAppend an ellipsis to a menu item’s label when people need to provide additional information before the action can complete. The ellipsis character (…) signals that another view will open in which people can input information or make choices.\n\nShow people when a menu item is unavailable. An unavailable menu item often appears dimmed and doesn’t respond to interactions. If all of a menu’s items are unavailable, ensure that the menu itself remains available so people can open it and learn about the commands it contains.\n\nToggled items\n\nWhen you need to help people switch an item or attribute between two states, you can support toggling in one of the following three ways:\n\nA single menu item that displays a label that can change depending on the current state, such as Show Ruler and Hide Ruler. The parent menu never lists more than one label at a time.\n\nA single menu item that has a checkmark next to it when it’s turned on; for example, a text attribute like Bold. The parent menu always lists the item, displaying or removing the checkmark according to the current state.\n\nA pair of menu items, each of which has a label that describes one of two opposing actions or states; for example, Grid On and Grid Off. The parent menu always lists both menu items, but only the menu item that’s currently in effect displays a checkmark or appears selected (usually dimmed).\n\nConsider using changeable titles to shorten a long list of items that show and hide features. For example, the View menu in Mail uses changeable titles to Show or Hide the Tab Bar, Mailbox List, Toolbar, or Favorites Bar.\n\nUse a changeable label when there isn’t enough room to list a pair of menu items. When necessary to make sure both titles are unambiguous, consider using two verbs that clearly express opposite actions, like Turn Grid On and Turn Grid Off.\n\nConsider using a checkmark when a toggled item represents an attribute that’s currently in effect. It’s easy for people to scan for checkmarks in a list of attributes to find the ones that are in effect. For example, in the standard Format > Font menu, checkmarks can make it easy for people notice the styles that apply to selected text.\n\nConsider offering a menu item that makes it easy to remove multiple toggled attributes. For example, if you let people apply several styles to selected text, it can work well to provide a menu item — such as Plain — that removes all applied formatting attributes at one time.\n\nConsider displaying a pair of menu items instead of one toggled menu item if it adds clarity. Sometimes, it helps people to view both actions or states at the same time. The Mailbox menu in Mail, for example, includes both the Take All Accounts Online and Take All Accounts Offline items, so when someone’s accounts are online, only the Take All Accounts Offline menu item appears available.\n\nOrganization\n\nTo help people find the item they’re looking for, you can organize menu items according to frequency of use, object importance, functional categories, or another prioritization scheme that fits the way people use your app.\n\nSometimes, it makes sense to group logically related items within a menu, such as the editing commands Copy, Cut, and Paste. To help people visually distinguish groups, you use a separator. Depending on the platform and type of menu, a separator appears between groups as a horizontal line or a short gap in the menu’s background appearance.\n\nList menu items according to your prioritization scheme. People tend to start scanning a menu from the top, so listing high-priority items and groups first often means that people can find what they want without scanning the entire menu.\n\nAvoid letting your prioritization scheme separate a group of commands that are logically related, even if the commands don’t all have the same priority. For example, people generally use Paste and Match Style much less often than they use Paste, but they expect to find both commands in the same group that contains other related editing actions like Copy and Cut.\n\nBe mindful of menu length. People need more time and attention to read a long menu, which means they may miss the command they want. If a menu is long, you might need to break it into separate menus. In some cases, you can use a submenu to shorten the list. The exception is a menu that contains user-defined or dynamically generated content, such as the History and Bookmarks menus in Safari. In this situation, people expect the menu to accommodate the items they add to it, so a long menu is fine, and scrolling is acceptable.\n\nSubmenus\n\nSometimes, a menu item can reveal a set of closely related items in a subordinate list called a submenu. In this case, a menu item indicates the presence of a submenu by displaying a symbol — like a chevron — after its label.\n\nUse submenus sparingly. Each submenu adds complexity to the interface and hides the items it contains. You might consider creating a submenu when a term appears in more than two menu items in the same group. For example, instead of offering separate menu items for Sort by Date, Sort by Subject, and Sort by Unread, the View menu in Mail includes a Sort By submenu that contains items like Date, Subject, and Unread. In a case like this, it generally works well to use the repeated term in the submenu label to help people predict what it contains.\n\nLimit the depth and length of submenus. It can be difficult for people to reveal multiple levels of hierarchical submenus, so it’s generally best to restrict them to a single level. Also, if a submenu contains more than about five items, consider creating a new menu.\n\nMake sure a submenu remains available even when its nested menu items are unavailable. A submenu item — like all menu items — needs to let people open it and learn about the commands it contains.\n\nPrefer using a submenu to indenting menu items. Using indentation is inconsistent with the system and doesn’t clearly express the relationships between the menu items.\n\nPlatform considerations\n\nNo additional considerations for macOS, tvOS, or watchOS.\n\niOS, iPadOS\n\nBeginning in iOS 16 and iPadOS 16, a menu can display items in one of the following three layouts.\n\nSmall. A row of four items appears at the top of the menu, above a list that contains the remaining items. For each item in the top row, the menu displays a symbol or icon, but no label.\n\nMedium. A row of three items appears at the top of the menu, above a list that contains the remaining items. For each item in the top row, the menu displays a symbol or icon above a short label.\n\nLarge (the default). The menu displays all items in a list.\n\nFor developer guidance, see preferredElementSize.\n\nChoose a small or medium menu layout when it can help streamline people’s choices. Consider using the medium layout if your app has three important actions that people often want to perform. For example, Notes uses the medium layout to give people a quick way to perform the Scan, Lock, and Pin actions. Use the small layout only for closely related actions that typically appear as a group, such as Bold, Italic, Underline, and Strikethrough. For each action, use a recognizable symbol that helps people identify the action without a label.\n\nvisionOS\n\nIn visionOS, a menu can display items using the small or large layout styles that iOS and iPadOS define (for guidance, see iOS, iPadOS). As in macOS, an open menu in a visionOS window can appear outside of the window’s boundaries.\n\nWhen possible, prefer displaying a menu near the content it controls. Because people need to look at a menu item before tapping it, they might miss the item’s effect if the content it controls is too far away.\n\nResources\nRelated\n\nPop-up buttons\n\nPull-down buttons\n\nContext menus\n\nThe menu bar\n\nDeveloper documentation\n\nMenu — SwiftUI\n\nMenus and shortcuts — UIKit\n\nMenus — AppKit\n\nVideos\nDesign with iOS pickers, menus and actions\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded guidelines for using the small, medium, and large menu layouts in iPadOS."
  },
  {
    "title": "Toolbars",
    "url": "https://developer.apple.com/design/human-interface-guidelines/toolbars",
    "html": "Toolbars\nA toolbar provides convenient access to frequently used commands and controls that perform actions relevant to the current view.\n\nDepending on the platform, a toolbar can look and behave differently.\n\nIn visionOS, a toolbar appears along the bottom edge of an app’s main window.\n\nIn iOS, a toolbar appears at the bottom of a screen. iOS toolbars aren’t customizable, and they don’t support grouping.\n\nIn iPadOS and macOS, a toolbar appears at the top of a screen or window. Both platforms support customizable toolbars and grouped toolbar items. In macOS, people can hide an app’s toolbar.\n\nIn watchOS, the toolbar itself isn’t visible, but you can place toolbar buttons in the top corners and along the bottom of the screen. The system automatically moves the time and title to accommodate buttons in the top corners. You can also place a button in a scrolling view. By default, a scrolling toolbar button remains hidden until people reveal it by scrolling up.\n\nFor developer guidance, see Toolbars\n\nBest practices\n\nProvide toolbar items that support the main tasks people perform. In general, prioritize the commands that people are mostly likely to want. These commands are often the ones people use most frequently, but in some apps it might make sense to prioritize commands that map to the highest level or most important objects people work with. In a macOS app, consider ordering the items in the toolbar according to your prioritization scheme.\n\nAvoid displaying too many toolbar items. People need to be able to distinguish and activate each item, so you don’t want to overcrowd the toolbar.\n\nConsider grouping toolbar items where supported. In iPadOS, macOS, and visionOS, you can define logical groups of items to help people find commands that are related to certain subtasks or functional areas in your app. For example, Keynote includes several groups that are based on functionality, including one for presentation-level commands, one for playback commands, and one for object insertion. In iPadOS, you can also use grouping to keep items together in the Overflow menu (to learn more, see iPadOS).\n\nMake sure the meaning of each toolbar item is clear. Don’t make people guess or experiment to figure out what an item does. In all platforms except macOS, provide either a simple, recognizable symbol (or interface icon), or a short, descriptive label for each item. In a macOS app, you provide a symbol and a label so that people can view both in the toolbar if they choose. As you write labels, prefer verbs and verb phrases like View, Insert, and Share. Use title-style capitalization and no ending punctuation.\n\nPrefer system-provided symbols or interface icons. System-provided symbols are familiar, automatically receive appropriate coloring, and respond consistently to user interactions and vibrancy.\n\nPrefer a consistent appearance for all toolbar items. Toolbars look best and are easiest to understand when all items use a similar visual style.\n\nIf a toolbar item toggles between two states, make sure the item clearly communicates the current state. You might consider changing the item’s color and label to clarify its current state. In the macOS Mail toolbar, for example, the online-offline toggle button displays a filled icon and a Go Offline label when accounts are online; when accounts are offline, the item displays an unfilled icon and a Go Online label.\n\nIn iPadOS and macOS apps, consider letting people customize the toolbar. Toolbar customization is especially useful in apps that provide a lot of items — or that include advanced functionality that not everyone needs — and in apps that people tend to use for long periods of time. For example, it often works well to make a range of editing actions available for toolbar customization, because people often use different types of editing commands based on their work style and their current project.\n\nBe prepared for translucency in the toolbar when content flows beneath it. A toolbar automatically adopts translucency when placed above a scroll view or when the window is configured as a full-size content view. In visionOS, content that can scroll behind a toolbar uses a variable blur to ensure it remains legible and passthrough remains visible. In iOS, a toolbar is translucent by default, using a background material only when content appears behind it and removing the material when the view scrolls to the bottom. For guidance, see Materials.\n\nWhen no content appears behind the toolbar, the background material doesn’t appear.\n\nWhen content appears behind the toolbar, the background material changes to distinguish it from the content.\n\nPlatform considerations\n\nNo additional considerations for tvOS.\n\niOS\n\nAlthough toolbars and tab bars both appear at the bottom of a screen, each has a different purpose.\n\nA toolbar contains buttons for performing actions related to the screen, such as creating an item, filtering items, or marking up content.\n\nA tab bar lets people navigate among different areas of an app, such as the Alarm, Stopwatch, and Timer tabs in the Clock app.\n\nToolbars and tab bars don’t appear together in the same view.\n\nAvoid using a segmented control in a toolbar. Segmented controls let people switch contexts, whereas a toolbar’s actions are specific to the current screen.\n\nIn a toolbar that contains three or fewer buttons, consider using concise text labels instead of symbols to add clarity. For example, Calendar uses the labels Today, Calendars, and Inbox. To ensure that the labels don’t run together, you can insert fixed spaces between the buttons. For developer guidance, see UIBarButtonItem.SystemItem.fixedSpace.\n\nIn a toolbar that has more than three buttons, consider using symbols to conserve space. SF Symbols provides a wide range of customizable symbols you can use to represent actions in your app. If you need to create a custom interface icon for a toolbar button, use the following sizes, adjusting as needed for balance. For guidance, see Icons.\n\nTarget size\n\n\t\n\nMaximum size\n\n\n\n\n24x24 px @1x (48x48 px @2x, 72x72 px @3x)\n\n\t\n\n28x28 px @1x (56x56 px @2x, 84x84 px @3x)\n\niPadOS\n\nIn iPadOS, a toolbar offers commonly used actions that affect the current task, along with document-specific functionality, a Back button, and important actions that people might want to take at any time. In contrast, a navigation bar doesn’t typically include document-specific functionality; instead, it supports app navigation, offers actions that help people manage their content, and can include a search field.\n\nDeveloper note\n\nIn iPadOS, you use UINavigationBar to create a toolbar.\n\nIn iPadOS 16 and later, different areas of the toolbar can display different types of items.\n\nLeading end. Elements that let people return to the previous document and show or hide a sidebar appear at the far leading end, followed by the document title. Next to the title the toolbar can include a document menu that contains standard and app-specific commands that affect the document as a whole, such as Duplicate, Rename, Move, and Export. To ensure that these items are always available regardless of window size, items in the toolbar’s leading end aren’t customizable.\n\nCenter area. Frequently used items appear in the center area, where people can add, remove, and rearrange them. Items in the center section automatically collapse into the system-managed Overflow menu when the window shrinks enough in size.\n\nTrailing end. The trailing end of a toolbar contains important items that need to remain available, buttons that open nearby inspectors, an optional search field, and the Overflow menu that reveals hidden items and supports toolbar customization. Items in the trailing end remain visible at all window sizes.\n\nPlace a toolbar at the top edge of the screen. iPad has a large display that provides enough room for the functionality people appreciate, while preserving access to the most important commands even at small window sizes. If you’re transitioning an iPhone app to run on iPad, be sure to move toolbar buttons at the bottom of your iOS screen to the top of your iPadOS screen.\n\nUse the Document menu to offer commands that affect a document as a whole. For example, you might include commands like Duplicate, Rename, Move, and Print. Avoid listing editing commands in the Document menu — instead, consider elevating these actions to the center area of the toolbar. Also avoid offering commands that open the document in other apps, because the Share menu already lets people perform actions like using Messages to send the document to someone else, opening it in another app, or adding it to a reading list.\n\nPrefer the center area for task-specific commands that people are most likely to use while they’re actively engaged with the content. The center area is always available when the window is at full size, making it a convenient location for editing commands and other actions that affect the window’s content. Also, you can let people customize the items in the center area to support their personal work style. When people make your window smaller, items in the center section of the toolbar automatically transition into the toolbar-managed Overflow menu when there’s no longer enough room to display them.\n\nPrefer the trailing end of the toolbar for important items that need to be visible at all window sizes. For example, Pages offers the Share menu in this area because people often want to perform an action on the document as a whole without expanding it. The trailing end of the toolbar is also an intuitive place to put inspector buttons that reveal panels located on the trailing side of the window.\n\nmacOS\n\nIn a macOS app, the toolbar resides in the frame at the top of a window, either below or integrated with the title bar. Note that window titles can display inline with controls, and toolbar items don’t include a bezel.\n\nWhen horizontal space is limited, the toolbar can display the Search button in place of the search bar. When people click the Search button, the bar expands; when they click elsewhere in the window, the search bar collapses and the toolbar displays the button again.\n\nIn a settings window, the toolbar can use SF Symbols to harmonize with the appearance of the main window, but the title position remains above the toolbar buttons. When needed for clarity, individual toolbar buttons can include color. To indicate the active pane, the window applies a system-provided selection appearance to the selected toolbar button.\n\nMake every toolbar item available as a command in the menu bar. Because people can customize the toolbar or hide it, it can’t be the only place that presents a command. In contrast, it doesn’t make sense to provide a toolbar item for every menu item because not all menu commands are important enough or used often enough to warrant space in the toolbar.\n\nDeveloper note\n\nToolbar items automatically use the large control size. The exception is an integrated toolbar-title bar area — such as the one in a Safari window — which continues to use the regular control size. You can use constraints if you need to specify minimum or maximum sizes for a toolbar control.\n\nUse recommended sizes if you need to create a custom image for a toolbar item. To create a custom interface icon, use a maximum size of 19x19 px (38x38 px @2x). To create a full-color freestanding toolbar icon, use the PNG format and provide @1x version that measures 32x32 px and a @2x version that measures 64x64 px. If you use a recognizable full-color icon from elsewhere, don’t change its appearance or perspective.\n\nIn general, avoid giving a toolbar item a persistent selected appearance. The system adds a rounded-rectangle background to an item only when people move the pointer over it or choose it, removing the appearance when the item performs its action or the pointer moves away. There are two exceptions to this behavior. One is a segmented control that shows a persistent selected appearance within the context of the control — such as the view controls in a Finder window toolbar — and the second is in a settings window that uses toolbar items as pane switchers.\n\nConsider letting people hide the toolbar, in addition to automatically hiding it in full-screen mode. Sometimes people appreciate being able to hide the toolbar to minimize distractions or reveal more content. If you support this action, provide commands for hiding and revealing the toolbar in the View menu. In full-screen mode, it can work well to hide the toolbar if people don’t need it to accomplish the current task. For example, Preview hides the toolbar in a full-screen window because people are more likely to view content than to annotate it. If you hide the toolbar in a full-screen window, reveal it (along with the menu bar) when the pointer moves to the top of the screen.\n\nConsider letting people click nondestructive toolbar items when a window is inactive. Usually, clicking the toolbar of an inactive window brings the window to the front. In some cases, it may be useful to let people invoke a toolbar item without bringing the window to the front so they can continue working on a task in a different window. The toolbar of the standard Fonts panel behaves this way.\n\nConsider adding spring-loading support to toolbar items. On pressure-sensitive systems, such as systems with the Magic Trackpad, spring loading lets people activate a button or segmented control segment by dragging items over it and force clicking — that is, pressing harder — without dropping the items. People can then continue dragging the items, possibly to perform additional actions. In Calendar, for example, people can drag an event over the day, week, month, or year segments in the toolbar. Force clicking a segment switches the calendar view without releasing the event, so people can drop the event at the desired location in the new calendar view.\n\nvisionOS\n\nIn visionOS, the system-provided toolbar appears along the bottom edge of a window, above the window-management controls, and in a parallel plane that’s slightly in front of the window along the z-axis.\n\nAs with other platforms except macOS, you supply either a symbol or a text label for each item in a toolbar. When people look at a toolbar item that contains a symbol, visionOS reveals the text label, providing additional information.\n\nPrefer using a system-provided toolbar. The standard toolbar has a consistent and familiar appearance and is optimized to work well with eye and hand input. In addition, the system automatically places a standard toolbar in the correct position in relation to its window.\n\nAvoid creating a vertical toolbar. In visionOS, tab bars are vertical, so presenting a vertical toolbar could confuse people.\n\nAs much as possible, keep toolbar controls consistent when people resize the window. Unlike macOS, visionOS doesn’t include a menu bar where each app lists all its actions, so it’s important for the toolbar to provide reliable access to essential controls regardless of a window’s size.\n\nIf your app can enter a modal state, consider offering contextually relevant toolbar controls. For example, a photo-editing app might enter a modal state to help people perform a multistep editing task. In this scenario, the controls in the modal editing view are different from the controls in the main window. Be sure to reinstate the window’s standard toolbar controls when the app exits the modal state.\n\nIf necessary, consider including a pull-down menu in a toolbar. A pull-down menu lets you offer additional actions related to a toolbar item, but can be difficult for people to discover and may clutter your interface. Because a toolbar is located at the bottom edge of a window in visionOS, a pull-down menu might obscure the standard window controls that appear below the bottom edge. For guidance, see Pull-down buttons.\n\nwatchOS\n\nA toolbar button lets you offer important app functionality in a view that displays related content. Located at the top of a scrolling view, a toolbar button can stay hidden behind the navigation bar until people reveal it by scrolling up. For developer guidance, see primaryAction.\n\nPlace a toolbar button only in a scrolling view. People frequently scroll to the top of a scrolling view, so discovering a toolbar button is almost automatic. Placing a toolbar button in a nonscrolling view makes it permanently visible, eliminating the advantage of hiding it when it’s not needed.\n\nUse a toolbar button for an important action that isn’t a primary app function. A toolbar button gives you the flexibility to offer important functionality in a view whose primary purpose is related to that functionality, but may not be the same. For example, Mail provides the essential New Message action in a toolbar button at the top of the Inbox view. The primary purpose of the Inbox is to display a scrollable list of email messages, so it makes sense to offer the closely related compose action in a toolbar button at the top of the view.\n\nPrefer a single, full-width toolbar button. Displaying multiple toolbar buttons — whether stacked or side by side — can complicate the view and require people to make sure they’ve discovered the full set of actions before making a choice. If you’re considering more than one toolbar button, also consider whether your app needs a separate view to offer these essential actions.\n\nA toolbar button lets you offer important app functionality in a view that displays related content. You can place toolbar buttons in the top corners or along the bottom of the screen. If you place these buttons above scrolling content, the buttons always remain visible, as the content scrolls under them.\n\nTop toolbar buttons.\n\nBottom toolbar buttons.\n\nFor developer guidance, see topBarLeading, topBarTrailing, or bottomBar.\n\nYou can also place a button in the scrolling view. By default, a scrolling toolbar button remains hidden until people reveal it by scrolling up. People frequently scroll to the top of a scrolling view, so discovering a toolbar button is automatic.\n\nToolbar button hidden.\n\nToolbar button shown.\n\nFor developer guidance, see primaryAction.\n\nUse a scrolling toolbar button for an important action that isn’t a primary app function. A toolbar button gives you the flexibility to offer important functionality in a view whose primary purpose is related to that functionality, but may not be the same. For example, Mail provides the essential New Message action in a toolbar button at the top of the Inbox view. The primary purpose of the Inbox is to display a scrollable list of email messages, so it makes sense to offer the closely related compose action in a toolbar button at the top of the view.\n\nResources\nRelated\n\nNavigation bars\n\nTab bars\n\nLayout\n\nDeveloper documentation\n\nToolbars — SwiftUI\n\nUIToolbar — UIKit\n\nNSToolbar — AppKit\n\nVideos\nDesign for spatial user interfaces\nWhat’s new in iPad app design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using toolbars in watchOS."
  },
  {
    "title": "Live Activities",
    "url": "https://developer.apple.com/design/human-interface-guidelines/live-activities",
    "html": "Live Activities\nA Live Activity displays up-to-date information from your app, allowing people to view the progress of an activity, event, or task at a glance.\n\nStarting with iOS 16 and iPadOS 17, Live Activities provide frequent information updates that appear in glanceable locations such as the Lock Screen, on iPhone in StandBy, and in the Dynamic Island. For apps with frequent content and status updates that go beyond the existing push notification system, Live Activities can be a more flexible way to keep people updated about live events, activities, or tasks over a couple of hours. In addition to frequently updating displayed data, they offer a way for people to interact with the information.\n\nFor example, the Live Activity of a food delivery app might display the time remaining until your order arrives; a sports app could provide live in-game information for their Live Activity; and a workout app could show real time fitness metrics and offer interactive controls to pause or cancel the workout.\n\nIn addition to appearing at the top of the notification list on the Lock Screen, Live Activities appear in the following locations:\n\nOn devices that support the Dynamic Island, the system displays Live Activities in a persistent location around the TrueDepth camera.\n\nOn devices that don’t support the Dynamic Island, the system can display a Live Activity update in a banner that appears briefly at the top of the screen.\n\nOn iPhone in StandBy, a Live Activity fills the entire screen to offer glanceable information at a distance, or it takes up minimal space at the top of the screen to leave space for widgets.\n\nBest practices\n\nOffer a Live Activity for tasks and live events that have a defined beginning and end. People use Live Activities to track activities or ongoing tasks of short and medium duration. Don’t offer a Live Activity for a task that exceeds eight hours, and always end a Live Activity immediately after the task completes or the event ends.\n\nConsider each Live Activity presentation. Your Live Activity must support all locations, devices, and their corresponding appearances. Because Live Activities are a system-wide feature, carefully consider the amount of information your Live Activity displays and create a layout that best supports each of the places in the system where it appears.\n\nPrioritize important information to make it easy to understand at a quick glance. Your Live Activity doesn’t need to display everything. Think about what information people find most useful and prioritize the size and scale of it relative to other content you display. When a person wants to access more information, they can a tap the Live Activity to view your app where you can display more information if necessary.\n\nDon’t use a Live Activity to display ads or promotions. Live Activities help people stay informed about ongoing events and tasks, so it’s important to display only information that’s related to those events and tasks.\n\nAvoid displaying sensitive information in a Live Activity. A Live Activity is visually prominent and could be viewed by casual observers. If people might consider the information in your Live Activity to be sensitive or private, display an innocuous summary and let people tap the Live Activity to access the sensitive information in your app.\n\nDon’t add elements to your app that draw attention to the Dynamic Island. Your Live Activity appears in the Dynamic Island while your app isn’t in use, and other items can appear in the Dynamic Island when your app is open.\n\nStarting, updating, and ending a Live Activity\n\nStart a Live Activity when people expect it. In Settings, people can turn off Live Activities for your app. To make it less likely for someone to turn them off, avoid surprising people by starting a Live Activity they don’t expect. If necessary, give people control over beginning and ending Live Activities with buttons. However, it can make sense to automatically initiate a Live Activity if a person starts a task or event. For example, ordering food for delivery or making a rideshare request could automatically start a Live Activity. Similarly, a sports app could offer a Live Activity that starts automatically for every match of a person’s favorite team. On devices that run iOS 17.2 and iPad OS 17.2 and later, the Live Activity can start with a remote push notification while the app is in the background. If you automatically start a Live Activity, display a button or toggle that represents this behavior and allows people to adjust it to their preferences.\n\nOffer App Shortcuts that start your Live Activities. App Shortcuts allow you to expose app functionality to the system so people can access it in various contexts. For example, an App Shortcut that starts your Live Activity allows people to track events using the Action button on iPhone. For more information on App Shortcuts, see App Shortcuts.\n\nUpdate a Live Activity only when new content is available. If the underlying content or status doesn’t change, show the same content or status until it changes.\n\nAlert people about Live Activity updates only if it’s essential to get their attention. Live Activity alerts light up the screen and by default play the notification sound for explicit updates the user shouldn’t miss. They also show the expanded presentation in the Dynamic Island or the Lock Screen presentation as a banner on devices that don’t support the Dynamic Island. Avoid alerting people too often or alerting them to updates that aren’t crucial because a person might deactivate Live Activities for your app in Settings. Additionally, don’t use push notifications alongside your Live Activity to alert people about Live Activity updates.\n\nIf you offer tracking of multiple events, consider cycling through events instead of starting a new Live Activity for each event. Cycling through events makes it easier for people to keep track of multiple events. For example, a sports app could offer to track all soccer matches that happen in one evening. Instead of starting many Live Activities, the app could update a single Live Activity with key events across all matches like goals, substitutions, fouls, and the start and end of each half in a single dynamic layout.\n\nConsider removing the Live Activity from the Lock Screen shortly after the conclusion of your Live Activity. In the Dynamic Island, the system immediately removes a Live Activity when it ends. On the Lock Screen, the system shows a Live Activity for up to four hours after it ends. Depending on the duration of your Live Activity, showing a summary in your Lock Screen presentation may only be relevant for a brief time after it ends. For example, a rideshare app could end the Live Activity when a ride completes and configure it to remain on the Lock Screen for 30 minutes — long enough for people to view the ride summary and leave a tip for the driver. Consider choosing a custom removal time that’s proportional to the duration of your Live Activity. In most cases, 15 to 30 minutes is adequate.\n\nDesign\n\nCreate a Live Activity that matches your app’s visual aesthetic and personality in both dark and light appearances. Applying your app’s personality and visual aesthetic makes it easier for people to recognize your Live Activity. Aim to create a visual connection to your app with your Live Activity design. For example, consider using your app icon for inspiration.\n\nIf you use a logo mark as part of your brand in a Live Activity, display it without a container. Don’t use the entire app icon.\n\nUse a bold color for your Live Activity background. If your app has a recognizable key color people associate with it, use the key color for the background of your Live Activity. This color creates a strong foundation for your design that can make it more recognizable and distinguish it from other Live Activities and notifications.\n\nCreating Live Activity layouts\n\nDon’t replicate notification layouts. Create a unique layout that’s specific to the information that appears in the Live Activity.\n\nMake your layout as compact as possible. Adjust the size and placement of elements in your Live Activity so they fit together. Create as compact of a layout as possible that only uses as much space as you need to clearly display its content.\n\nDynamically change the height of your Live Activity. When there is less information to show, reduce the height of the Live Activity to only use the space needed for the content. When more information becomes available, increase the height to display additional content. For example, a rideshare app might display a more compact Live Activity without additional details while it locates a driver. The app’s height extends as more information is available to display the estimated pickup time, driver details, and so on. Similarly, a sports app could use a more compact layout during half time of a soccer match when the teams rest. When the second half of the match starts, the Live Activity could expand to display key moments like fouls, goals, and so on.\n\nAdapt to different screen sizes and Live Activity presentations. A Live Activity scales to adapt to screen sizes of different devices. Ensure it looks great on every device by supplying content at appropriate sizes. As you create layouts and assets for various devices and scale factors, use the values listed in Specifications as guidance, but note that the actual size on screen may vary or change.\n\nWhen separating a block of content, place it in an inset shape or use a thick line. Don’t draw content all the way to the edge of the Dynamic Island.\n\nUse consistent margins and concentric placement for your elements. Use even, matching margins between rounded shapes and the edges of the Live Activity to ensure a harmonious fit. For example, when placing a rounded rectangle near the corner of your Live Activity, make sure to match the element’s corner radius to the outer corner radius of the Live Activity by subtracting the margin. Use a SwiftUI container to apply the correct corner radius. For developer guidance, see ContainerRelativeShape.\n\nAvoid placing text and nonrounded shapes too close to the margins. Don’t place content in a way that intrudes into the rounded shape of the Live Activity. Try to keep content compact and snug within a margin that is concentric to the outer edge of the Live Activity.\n\nTo help place nonrounded content correctly, you can blur elements and aim to make the border of the resulting rounded, blurred shapes as concentric as possible with even margins to make them fit best with the outer perimeter.\n\nAdding transitions and animating content updates\n\nIn addition to extending and contracting transitions, Live Activities use system and custom animations with a maximum duration of two seconds. Note that the system doesn’t perform animations on Always-On displays with reduced luminance.\n\nUse animations to reinforce the information you’re communicating and to bring attention to updates. In addition to moving the position of elements in your layout, you can animate elements in and out with the default content replace transition, or create custom transitions using scale, opacity, and movement. For example, a sports app could use a numeric content transition to increase or decrease important numbers for a match or gently fade a timer in and out when it reaches zero.\n\nAnimate layout changes. For some content updates — for example, when more information becomes available, or when the Live Activity expands to the full screen in StandBy — it can make sense to update the layout of your Live Activity. When your Live Activity transitions to a new layout, animate existing elements to their new positions rather than removing them and animating them back in. This kind of update preserves as much of the existing layout as possible during the transition.\n\nTry to avoid overlapping elements. Sometimes, it’s best to animate out certain elements and then re-animate them in at a new position to avoid colliding with other parts of your transition. For example, when animating items in lists, only animate the element that moves to a new position and use a fade-in-and-out transitions for the other list items.\n\nNote\n\nFor developer guidance, see Displaying live data with Live Activities.\n\nOffering interactivity\n\nMake sure tapping the Live Activity opens your app at the right location. Take people directly to details and actions related to the Live Activity — don’t require them to navigate to the relevant screen. For developer guidance on SwiftUI views that can deep link to specific screens in your app, see Link and widgetURL(_:).\n\nOffer quick controls. Starting with iOS 17 and iPadOS 17, the expanded presentation in the Dynamic Island and the Lock Screen presentation can include buttons or toggles to offer people a way to perform tasks directly from the Live Activity. However, these elements can take up space that might otherwise display useful information. As a result, it’s important that you only include them if they are offering essential functionality that’s directly related to your Live Activity. For example, the Live Activity of the Timer app allows people to pause and cancel a timer. Similarly, a fitness app could allow people to pause and resume an ongoing workout.\n\nLet people respond to event or progress updates. Offer buttons or toggles to allow people to respond to updated data. For example, a rideshare app could show a button in its Live Activity that people tap to get in touch with the driver while they are waiting for their ride to arrive.\n\nThe Lock Screen\n\nOn the Lock Screen, the system uses the Lock Screen presentation to display a banner at the bottom of the screen. In this presentation, use a layout similar to the expanded presentation.\n\nOn devices that don’t support the Dynamic Island, the system uses the Lock Screen presentation of your Live Activity as a banner that briefly overlays the Home Screen or another app. This overlay only happens when you alert people about an update to your Live Activity with an alert configuration.\n\nCarefully consider using a custom background color and opacity on the Lock Screen. If you set a background color or image for Live Activities that appear on the Lock Screen, test colors to be sure they offer enough contrast — especially tint colors on devices in Always-On with reduced luminance. Note that you can’t choose a custom background color for Live Activity presentations that appear in the Dynamic Island.\n\nChoose colors that work well on a personalized Lock Screen. People customize their Lock Screen with wallpapers, custom tint colors, and widgets. To make a Live Activity fit a custom Lock Screen aesthetic while remaining legible, apply custom tint colors and opacity sparingly.\n\nMake sure your design, assets, and colors look great and offer enough contrast in Dark Mode and on an Always-On display. By default, a Live Activity on the Lock Screen uses a light background color in Light Mode and a dark background color in Dark Mode. If you apply a custom background color to your Lock Screen presentation, use a color that works well in both modes or use a different color for each mode. Additionally, verify your Live Activity design on an Always-On display with reduced luminance because the system adapts colors as needed in this appearance. For guidance, see Dark Mode and Always On; for developer guidance, see About asset catalogs.\n\nVerify the generated color of the dismiss button on the Lock Screen. The system automatically generates a matching dismiss button based on the background and foreground colors of your Live Activity. Be sure to check that the generated colors match your Live Activity design and adjust them if needed using activitySystemActionForegroundColor(_:)\n\nUse standard margins to align with notifications. The standard layout margins are 14 points for Live Activities on the Lock Screen. In some cases, such as for the placement of graphics or buttons, you might need to use tighter margins, but avoid crowding the edges and creating a cluttered appearance. For developer guidance, see padding(_:_:).\n\nStandBy\n\nWhen a person taps the minimal presentation on iPhone in StandBy, the system scales the Lock Screen appearance by 2x to fill the entire screen. If you use a custom background color for your Live Activity, the system automatically extends it to the whole screen to create a seamless, full-screen design.\n\nUpdate your layout to take advantage of the larger presentation. Display additional information and make sure assets look great in the scaled-up presentation.\n\nConsider removing a custom background color in StandBy. Without a custom background color, your Live Activity seamlessly blends with the device bezel and achieves a softer look that integrates with a person’s surroundings. Additionally, when you use the default background color, the system also scales your Live Activity slightly larger because it no longer needs to account for the margins around the TrueDepth camera.\n\nUse standard margins and avoid extending graphic elements to the edge of the screen. Without standard margins, content gets cut off as the Live Activity extends, making it feel broken. To visually separate regions of your layout, use a line or a container shape instead.\n\nVerify your design in Night Mode. In Night Mode, the system automatically applies a visual treatment to your Live Activity to give it a red tint. Be sure to check that your Live Activity design uses colors that provide enough contrast in Night Mode.\n\nThe Dynamic Island\n\nThe Dynamic Island serves as a unified home for alerts and indicators of ongoing activity. Design your layouts to feel at home within the shape and background color of the Dynamic Island, while preserving your Live Activity’s identity through use of color, iconography, and animation.\n\nUse color to express the character and identity of your app. Live Activities in the Dynamic Island use a black opaque background. Consider using bold colors for text and objects to convey the personality and brand of your app. Bold colors make your Live Activity recognizable at a glance, and make it feel like a small, glanceable part of your app that stands out from other Live Activities. Additionally, bold colors can help reinforce the relationship between shapes, text, and icons in the Live Activity itself.\n\nTint your Live Activity’s key line color so that it matches your content. When the background is dark — for example, in Dark Mode — a key line appears around the Dynamic Island to distinguish it from other content. Choose a color for this key line that’s consistent with the color of other elements in your Live Activity.\n\nEnsure text is easy to read. Use large, heavier–weight text — a medium weight or higher. Avoid small text that’s hard to read.\n\nUse even margins that leave enough space between your content and the edge of the Dynamic Island. Apply an even margin to elements all the way around the edge of the Dynamic Island, including the corners. This kind of margin prevents elements from poking into the rounded edges and creating visual tension.\n\nAnimate Live Activity updates to change the shape of the Dynamic Island dynamically. Not only do animations bring a person’s attention to updated information, they underline the active nature of your Live Activity in the Dynamic Island.\n\nCompact presentation\n\nIn the Dynamic Island, the system uses the compact presentation when only one Live Activity is active. The compact presentation consists of two separate elements: one that displays on the leading side of the TrueDepth camera, and one that displays on the trailing side. Even though the compact presentation offers limited space, it displays up-to-date information about your app’s Live Activity.\n\nCommunicate the most important information of your Live Activity. Use the compact presentation to show dynamic information. Display live, up-to-date information that’s key to the Live Activity.\n\nEnsure unified information and design of the compact presentations in the Dynamic Island. The TrueDepth camera separates the compact leading and compact trailing presentations of a Live Activity, but make sure the contents of both read as a single piece of information. Using consistent color or typography can help create a connection between leading and trailing presentations.\n\nKeep information as narrow as possible and ensure content is snug against the TrueDepth camera. Try not to obscure key information in the status bar, and maintain a balanced layout with similarly sized views in leading and trailing presentations. Don’t place padding between content and the TrueDepth camera. For example, use shortened units or less precise data to avoid creating an appearance that’s too wide or unbalanced.\n\nLink to the relevant scene in your app. People tap a compact Live Activity to open the app and get more details about the event or task. They don’t need to view a generic scene in your app. Make sure to open the same scene in your app when people tap the leading or trailing presentation.\n\nMinimal presentation\n\nWhen multiple Live Activities are active, the system uses the minimal presentation to display two of them in the Dynamic Island. One Live Activity appears attached to the Dynamic Island while the other appears detached. Depending on its content size, the detached minimal Live Activity appears circular or oval. As with a compact Live Activity, people tap a minimal Live Activity to open the app to get more details about the event or task or touch and hold it to use essential controls and view additional content in the expanded presentation.\n\nEnsure that your Live Activity is recognizable in the minimal presentation. If possible, display updated information instead of only presenting a logo, but ensure that people are able to quickly recognize your app. For example, the compact presentation for a Live Activity of the Timer app displays the remaining time instead of using a static icon.\n\nExpanded presentation\n\nWhen people touch and hold a Live Activity in a compact or minimal presentation, the system displays the content in the expanded presentation.\n\nMaintain the relative placement of elements to create a coherent layout between compact and expanded presentations. The expanded presentation is an enlarged version of the compact presentation. Ensure that information and layouts expand predictably when the Live Activity transitions from compact to expanded presentation.\n\nUse a shorter or a tall height for the expanded presentation. If your content requires a small amount of vertical screen space, choose a height for the expanded presentation that clearly retains a capsule shape with continuous curves at the leading and trailing sides. If your expanded presentation requires more vertical screen space, use a height that’s rectangular with rounded edges. Avoid an in-between height that’s harder to visually resolve and less aesthetically pleasing.\n\nWrap content tightly around the TrueDepth camera. Try to avoid leaving space on the leading and trailing sides and below the TrueDepth camera. Arranging content close to the TrueDepth camera uses space more efficiently, and helps diminish the visual presence of the TrueDepth camera.\n\nPlatform considerations\n\nNot supported in macOS, tvOS, visionOS, or watchOS.\n\nSpecifications\n\nAs you design your Live Activities, use the following values for guidance.\n\niOS Live Activity dimensions\n\nAll values listed in the tables below are in points.\n\nScreen dimensions (portrait)\n\n\t\n\nCompact leading\n\n\t\n\nCompact trailing\n\n\t\n\nMinimal (width given as a range)\n\n\t\n\nExpanded (height given as a range)\n\n\t\n\nLock Screen (height given as a range)\n\n\n\n\n430x932\n\n\t\n\n62.33x36.67\n\n\t\n\n62.33x36.67\n\n\t\n\n36.67–45x36.67\n\n\t\n\n408x84–160\n\n\t\n\n408x84–160\n\n\n\n\n393x852\n\n\t\n\n52.33x36.67\n\n\t\n\n52.33x36.67\n\n\t\n\n36.67–45x36.67\n\n\t\n\n371x84–160\n\n\t\n\n371x84–160\n\nThe Dynamic Island uses a corner radius of 44 points, and its rounded corner shape matches the TrueDepth camera.\n\nPresentation type\n\n\t\n\nDevice\n\n\t\n\nDynamic Island width (points)\n\n\n\n\nCompact or minimal\n\n\t\n\niPhone 15 Pro Max\n\n\t\n\n250\n\n\n\n\n\t\n\niPhone 15 Pro\n\n\t\n\n230\n\n\n\n\n\t\n\niPhone 14 Pro Max\n\n\t\n\n250\n\n\n\n\n\t\n\niPhone 14 Pro\n\n\t\n\n230\n\n\n\n\n\t\n\niPhone 15 Plus\n\n\t\n\n250\n\n\n\n\n\t\n\niPhone 15\n\n\t\n\n230\n\n\n\n\nExpanded\n\n\t\n\niPhone 15 Pro Max\n\n\t\n\n408\n\n\n\n\n\t\n\niPhone 15 Pro\n\n\t\n\n371\n\n\n\n\n\t\n\niPhone 14 Pro Max\n\n\t\n\n408\n\n\n\n\n\t\n\niPhone 14 Pro\n\n\t\n\n371\n\n\n\n\n\t\n\niPhone 15 Plus\n\n\t\n\n408\n\n\n\n\n\t\n\niPhone 15\n\n\t\n\n371\n\niPadOS Live Activity dimensions\n\nAll values listed in the table below are in points.\n\nScreen dimensions (portrait)\n\n\t\n\nLock Screen (height given as a range)\n\n\n\n\n1366x1024\n\n\t\n\n500x84–160\n\n\n\n\n1194x834\n\n\t\n\n425x84–160\n\n\n\n\n1012x834\n\n\t\n\n425x84–160\n\n\n\n\n1080x810\n\n\t\n\n425x84–160\n\n\n\n\n1024x768\n\n\t\n\n425x84–160\n\nResources\nDeveloper documentation\n\nActivityKit\n\nSwiftUI\n\nWidgetKit\n\nDeveloping a WidgetKit strategy\n\nVideos\nDesign dynamic Live Activities\nMeet ActivityKit\nUpdate Live Activities with push notifications\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nExpanded and updated guidance and added new artwork.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance to include features of iOS 17 and iPadOS 17.\n\n\n\n\nNovember 3, 2022\n\n\t\n\nUpdated artwork and specifications.\n\n\n\n\nSeptember 23, 2022\n\n\t\n\nNew page."
  },
  {
    "title": "Complications",
    "url": "https://developer.apple.com/design/human-interface-guidelines/complications",
    "html": "Complications\nA complication displays timely, relevant information on the watch face, where people can view it each time they raise their wrist.\n\nPeople often prefer apps that provide multiple, powerful complications, because it gives them quick ways to view the data they care about, even when they don’t open the app.\n\nMost watch faces can display at least one complication; some can display four or more.\n\nStarting in watchOS 9, the system organizes complications (also known as accessories) into several families — like circular and inline — and defines some recommended layouts you can use to display your complication data. A watch face can specify the family it supports in each complication slot. Complications that work in earlier versions of watchOS can use the legacy templates, which define nongraphic complication styles that don’t take on a wearer’s selected color.\n\nDeveloper note\n\nPrefer using WidgetKit to develop complications for watchOS 9 and later. For guidance, see Migrating ClockKit complications to WidgetKit. To support earlier versions of watchOS, continue to implement the ClockKit complication data source protocol (see CLKComplicationDataSource).\n\nBest practices\n\nIdentify essential, dynamic content that people want to view at a glance. Although people can use a complication to quickly launch an app, the complication behavior they appreciate more is the display of relevant information that always feels up to date. A static complication that doesn’t display meaningful data may be less likely to remain in a prominent position on the watch face.\n\nSupport all complication families when possible. Supporting more families means that your complications are available on more watch faces. If you can’t display useful information for a particular complication family, provide an image that represents your app — like your app icon — that still lets people launch your app from the watch face.\n\nConsider creating multiple complications for each family. Supporting multiple complications helps you take advantage of shareable watch faces and lets people configure a watch face that’s centered on an app they love. For example, an app that helps people train for triathlons could offer three circular complications — one for each segment of the race — each of which deep-links to the segment-specific area in the app. This app could also offer a shareable watch face that’s preconfigured to include its swimming, biking, and running complications and to use its custom images and colors. When people choose this watch face, they don’t have to do any configuration before they can start using it. For guidance, see Watch faces.\n\nDefine a different deep link for each complication you support. It works well when each complication opens your app to the most relevant area. If all the complications you support open the same area in your app, they can seem less useful.\n\nKeep privacy in mind. With the Always-On Retina display, information on the watch face might be visible to people other than the wearer. Make sure you help people prevent potentially sensitive information from being visible to others. For guidance, see Always On.\n\nCarefully consider when to update data. You provide a complication’s data in the form of a timeline where each entry has a value that specifies the time at which to display your data on the watch face. Different data sets might require different time values. For example, a meeting app might display information about an upcoming meeting an hour before the meeting starts, but a weather app might display forecast information at the time those conditions are expected to occur. You can update the timeline a limited number of times each day, and the system stores a limited number of timeline entries for each app, so you need to choose times that enhance the usefulness of your data. For developer guidance, see Migrating ClockKit complications to WidgetKit.\n\nVisual design\n\nChoose a ring or gauge style based on the data you need to display. Many families support a ring or gauge layout that provides consistent ways to represent numerical values that can change over time. For example:\n\nThe closed style can convey a value that’s a percentage of a whole, such as for a battery gauge.\n\nThe open style works well when the minimum and maximum values are arbitrary — or don’t represent a percentage of the whole — like for a speed indicator.\n\nSimilar to the open style, the segmented style also displays values within an app-defined range, and can convey rapid value changes, such as in the Noise complication.\n\nMake sure images look good in tinted mode. In tinted mode, the system applies a solid color to a complication’s text, gauges, and images, and desaturates full-color images unless you provide tinted versions of them. For developer guidance, see WidgetRenderingMode. (If you’re using legacy templates, tinted mode applies only to graphic complications.) To help your complications perform well in tinted mode:\n\nAvoid using color as the only way to communicate important information. You want people to get the same information in tinted mode as they do in nontinted mode.\n\nWhen necessary, provide an alternative tinted-mode version of a full-color image. If your full-color image doesn’t look good when it’s desaturated, you can supply a different version of the image for the system to use in tinted mode.\n\nRecognize that people might prefer to use tinted mode for complications, instead of viewing them in full color. When people choose tinted mode, the system automatically desaturates your complication, converting it to grayscale and tinting its images, gauges, and text using a single color that’s based on the wearer’s selected color.\n\nWhen creating complication content, generally use line widths of two points or greater. Thinner lines can be difficult to see at a glance, especially when the wearer is in motion. Use line weights that suit the size and complexity of the image.\n\nProvide a set of static placeholder images for each complication you support. The system uses placeholder images when there’s no other content to display for your complication’s data. For example, when people first install your app, the system can display a static placeholder while it checks to see if your app can generate a localized placeholder to use instead. Placeholder images can also appear in the carousel from which people select complications. Note that complication image sizes vary per layout (and per legacy template) and the size of a placeholder image may not match the size of the actual image you supply for that complication. For developer guidance, see placeholder(in:).\n\nCircular\n\nCircular layouts can include text, gauges, and full-color images in circular areas on the Infograph and Infograph Modular watch faces. The circular family also defines extra-large layouts for displaying content on the X-Large watch face.\n\nClosed gauge image\n\nClosed gauge text\n\nOpen gauge image\n\nOpen gauge text\n\nOpen gauge range\n\nImage\n\nStack image\n\nStack text\n\nYou can also add text to accompany a regular-size circular image, using a design that curves the text along the bezel of some watch faces, like Infograph. The text can fill nearly 180 degrees of the bezel before truncating.\n\nClosed gauge image\n\nAs you design images for a regular-size circular complication, use the following values for guidance.\n\nImage\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nImage\n\n\t\n\n42x42 pt (84x84 px @2x)\n\n\t\n\n44.5x44.5 pt (89x89 px @2x)\n\n\t\n\n47x47 pt (94x94 px @2x)\n\n\t\n\n50x50 pt (100x100 px @2x)\n\n\n\n\nClosed gauge\n\n\t\n\n27x27 pt (54x54 px @2x)\n\n\t\n\n28.5x28.5 pt (57x57 px @2x)\n\n\t\n\n31x31 pt (62x62 px @2x)\n\n\t\n\n32x32 pt (64x64 px @2x)\n\n\n\n\nOpen gauge\n\n\t\n\n11x11 pt (22x22 px @2x)\n\n\t\n\n11.5x11.5 pt (23x23 px @2x)\n\n\t\n\n12x12 pt (24x24 px @2x)\n\n\t\n\n13x13 pt (26x26 px @2x)\n\n\n\n\nStack (not text)\n\n\t\n\n28x14 pt (56x28 px @2x)\n\n\t\n\n29.5x15 pt (59X30 px @2x)\n\n\t\n\n31x16 pt (62x32px @ 2x)\n\n\t\n\n33.5x16.5 pt (67x33 px @2x)\n\nNote\n\nThe system applies a circular mask to each image.\n\nA SwiftUI view that implements a regular-size circular complication uses the following default text values:\n\nStyle: Rounded\n\nWeight: Medium\n\nText size: 12 pt (40mm), 12.5 pt (41mm), 13 pt (44mm), 14.5 pt (45mm/49mm)\n\nIf you want to design an oversized treatment of important information that can appear on the X-Large watch face — for example, the Contacts complication, which features a contact photo — use the extra-large versions of the circular family’s layouts. The following layouts let you display full-color images, text, and gauges in a large circular region that fills most of the X-Large watch face. Some of the text fields can support multicolor text.\n\nClosed gauge image\n\nClosed gauge text\n\nOpen gauge image\n\nOpen gauge text\n\nOpen gauge range\n\nImage\n\nStack image\n\nStack text\n\nUse the following values for guidance as you create images for an extra-large circular complication.\n\nImage\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nImage\n\n\t\n\n120x120 pt (240x240 px @2x)\n\n\t\n\n127x127 pt (254x254 px @2x)\n\n\t\n\n132x132 pt (264x264 px @2x)\n\n\t\n\n143x143 pt (286x286 px @2x)\n\n\n\n\nOpen gauge\n\n\t\n\n31x31 pt (62x62 px @2x)\n\n\t\n\n33x33 pt (66x66 px @2x)\n\n\t\n\n33x33 pt (66x66 px @2x)\n\n\t\n\n37x37 pt (74x74 px @2x)\n\n\n\n\nClosed gauge\n\n\t\n\n77x77 pt (154x154 px @2x)\n\n\t\n\n81.5x81.5 (163x163 px @2x)\n\n\t\n\n87x87 pt (174x174 px @2x)\n\n\t\n\n91.5x91.5 (183x183 px @2x)\n\n\n\n\nStack\n\n\t\n\n80x40 pt (160x80 px @2x)\n\n\t\n\n85x42 (170x84 px @2x)\n\n\t\n\n87x44 pt (174x88 px @2x)\n\n\t\n\n95x48 pt (190x96 px @2x )\n\nNote\n\nThe system applies a circular mask to the circular, open-gauge, and closed-gauge images.\n\nUse the following values to create no-content placeholder images for your circular-family complications.\n\nLayout\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nCircular\n\n\t\n\n–\n\n\t\n\n42x42 pt (84x84 px @2x)\n\n\t\n\n44.5x44.5 pt (89x89 px @2x)\n\n\t\n\n47x47 pt (94x94 px @2x)\n\n\t\n\n50x50 pt (100x100 px @2x)\n\n\n\n\nBezel\n\n\t\n\n–\n\n\t\n\n42x42 pt (84x84 px @2x)\n\n\t\n\n44.5x44.5 pt (89x89 px @2x)\n\n\t\n\n47x47 pt (94x94 px @2x)\n\n\t\n\n50x50 pt (100x100 px @2x)\n\n\n\n\nExtra Large\n\n\t\n\n–\n\n\t\n\n120x120 pt (240x240 px @2x)\n\n\t\n\n127x127 pt (254x254 px @2x)\n\n\t\n\n132x132 pt (264x264 px @2x)\n\n\t\n\n143x143 pt (286x286 px @2x)\n\nA SwiftUI view that implements an extra-large circular layout uses the following default text values:\n\nStyle: Rounded\n\nWeight: Medium\n\nText size: 34.5 pt (40mm), 36.5 pt (41mm), 36.5 pt (44mm), 41 pt (45mm/49mm)\n\nCorner\n\nCorner layouts let you display full-color images, text, and gauges in the corners of the watch face, like Infograph. Some of the templates also support multicolor text.\n\nCircular image\n\nGauge image\n\nGauge text\n\nStack text\n\nText image\n\nAs you design images for a corner complication, use the following values for guidance.\n\nImage\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nCircular\n\n\t\n\n32x32 pt (64x64 px @2x)\n\n\t\n\n34x34 pt (68x68 px @2x)\n\n\t\n\n36x36 pt (72x72 px @2x)\n\n\t\n\n38x38 pt (76x76 px @2x )\n\n\n\n\nGauge\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21x21 pt (42x42 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n24x24 pt (48x48 px @2x)\n\n\n\n\nText\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21x21 pt (42x42 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n24x24 pt (48x48 px @2x)\n\nNote\n\nThe system applies a circular mask to each image.\n\nUse the following values to create no-content placeholder images for your corner-family complications.\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\n–\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21x21 pt (42x42 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n24x24 pt (48x48 px @2x)\n\nA SwiftUI view that implements a corner layout uses the following default text values:\n\nStyle: Rounded\n\nWeight: Semibold\n\nText size: 10 pt (40mm), 10.5 pt (41mm), 11 pt (44mm), 12 pt (45mm/49mm)\n\nInline\n\nInline layouts include utilitarian small and large layouts.\n\nUtilitarian small layouts are intended to occupy a rectangular area in the corner of a watch face, such as the Chronograph and Simple watch faces. The content can include an image, interface icon, or a circular graph.\n\nFlat\n\nRing image\n\nRing text\n\nSquare\n\nAs you design images for a utilitarian small layout, use the following values for guidance.\n\nContent\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nFlat\n\n\t\n\n9-21x9 pt (18-42x18 px @2x)\n\n\t\n\n10-22x10 pt (20-44x20 px @2x)\n\n\t\n\n10.5-23.5x21 pt (21-47x21 @2x)\n\n\t\n\nN/A\n\n\t\n\n12-26x12 pt (24-52x24 px @2x)\n\n\n\n\nRing\n\n\t\n\n14x14 pt (28x28 px @2x)\n\n\t\n\n14x14 pt (28x28 px @2x)\n\n\t\n\n15x15 pt (30x30 px @2x)\n\n\t\n\n16x16 pt (32x32 px @2x)\n\n\t\n\n16.5x16.5 pt (33x33 px @2x)\n\n\n\n\nSquare\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n23.5x23.5 pt (47x47 px @2x)\n\n\t\n\n25x25 pt (50x50 px @2x)\n\n\t\n\n26x26 pt (52x52 px @2x)\n\nThe utilitarian large layout is primarily text-based, but also supports an interface icon placed on the leading side of the text. This layout spans the bottom of a watch face, like the Utility or Motion watch faces.\n\nLarge flat\n\nAs you design images for a utilitarian large layout, use the following values for guidance.\n\nContent\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nFlat\n\n\t\n\n9-21x9 pt (18-42x18 px @2x)\n\n\t\n\n10-22x10 pt (20-44x20 px @2x)\n\n\t\n\n10.5-23.5x10.5 pt (21-47x21 px @2x)\n\n\t\n\nN/A\n\n\t\n\n12-26x12 pt (24-52x24 px @2x)\n\nRectangular\n\nRectangular layouts can display full-color images, text, a gauge, and an optional title in a large rectangular region. Some of the text fields can support multicolor text.\n\nThe large rectangular region works well for showing details about a value or process that changes over time, because it provides room for information-rich charts, graphs, and diagrams. For example, the Heart Rate complication displays a graph of heart-rate values within a 24-hour period. The graph uses high-contrast white and red for the primary content and a lower-contrast gray for the graph lines and labels, making the data easy to understand at a glance.\n\nStarting with watchOS 10, if you have created a rectangular layout for your watchOS app, the system may display it in the Smart Stack. You can optimize this presentation in a few ways:\n\nBy supplying background color or content that communicates information or aids in recognition\n\nBy using intents to specify relevancy, and help ensure that your widget is displayed in the Smart Stack at times that are most appropriate and useful to people\n\nBy creating a custom layout of your information that is optimized for the Smart Stack\n\nFor developer guidance, see WidgetFamily.accessoryRectangular. See Widgets for additional guidance on designing widgets for the Smart Stack.\n\nStandard body\n\nText gauge\n\nLarge image\n\nUse the following values for guidance as you create images for a rectangular layout.\n\nContent\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nLarge image with title *\n\n\t\n\n150x47 pt (300x94 px @2x)\n\n\t\n\n159x50 pt (318x100 px @2x)\n\n\t\n\n171x54 pt (342x108 px @2x)\n\n\t\n\n178.5x56 pt (357x112 px @2x)\n\n\n\n\nLarge image without title *\n\n\t\n\n162x69 pt (324x138 px @2x)\n\n\t\n\n171.5x73 pt (343x146 px @2x)\n\n\t\n\n184x78 pt (368x156 px @2x)\n\n\t\n\n193x82 pt (386x164 px @2x)\n\n\n\n\nStandard body\n\n\t\n\n12x12 pt (24x24 px @2x)\n\n\t\n\n12.5x12.5 pt (25x25 px @2x)\n\n\t\n\n13.5x13.5 pt (27x27 px @2x)\n\n\t\n\n14.5x14.5 pt (29x29 px @2x)\n\n\n\n\nText gauge\n\n\t\n\n12x12 pt (24x24 px @2x)\n\n\t\n\n12.5x12.5 pt (25x25 px @2x)\n\n\t\n\n13.5x13.5 pt (27x27 px @2x)\n\n\t\n\n14.5x14.5 pt (29x29 px @2x)\n\nNote\n\nBoth large-image layouts automatically include a four-point corner radius.\n\nA SwiftUI view that implements a rectangular layout uses the following default text values:\n\nStyle: Rounded\n\nWeight: Medium\n\nText size: 16.5 pt (40mm), 17.5 pt (41mm), 18 pt (44mm), 19.5 pt (45mm/49mm)\n\nLegacy templates\nCircular small\n\nCircular small templates display a small image or a few characters of text. They appear in the corner of the watch face (for example, in the Color watch face).\n\nRing image\n\nRing text\n\nSimple image\n\nSimple text\n\nStack image\n\nStack text\n\nAs you design images for a circular small complication, use the following values for guidance.\n\nImage\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nRing\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n23.5x23.5 pt (47x47 px @2x)\n\n\t\n\n24x24 pt (48x48 px @2x)\n\n\t\n\n26x26 pt (52x52 px @2x)\n\n\n\n\nSimple\n\n\t\n\n16x16 pt (32x32 px @2x)\n\n\t\n\n18x18 pt (36x36 px @2x)\n\n\t\n\n19x19 pt (38x38 px @2x)\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21.5x21.5 pt (43x43 px @2x)\n\n\n\n\nStack\n\n\t\n\n16x7 pt (32x14 px @2x)\n\n\t\n\n17x8 pt (34x16 px @2x)\n\n\t\n\n18x8.5 pt (36x17 px @2x)\n\n\t\n\n19x9 pt (38x18 px @2x)\n\n\t\n\n19x9.5 pt (38x19 px @2x)\n\n\n\n\nPlaceholder\n\n\t\n\n16x16 pt (32x32 px @2x)\n\n\t\n\n18x18x pt (36x36 px @2x)\n\n\t\n\n19x19 pt (38x38 px @2x)\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21.5x21.5 pt (43x43 px @2x)\n\nNote\n\nIn each stack measurement, the width value represents the maximum size.\n\nModular small\n\nModular small templates display two stacked rows consisting of an icon and content, a circular graph, or a single larger item (for example, the bottom row of complications on the Modular watch face).\n\nColumns text\n\nRing image\n\nRing text\n\nSimple image\n\nSimple text\n\nStack image\n\nStack text\n\nAs you design icons and images for a modular small complication, use the following values for guidance.\n\nImage\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nRing\n\n\t\n\n18x18 pt (36x36 px @2x)\n\n\t\n\n19x19 pt (38x38 px @2x)\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21x21 pt (42x42 px @2x)\n\n\t\n\n22.5x22.5 pt (45x45 px @2x)\n\n\n\n\nSimple\n\n\t\n\n26x26 pt (52x52 px @2x)\n\n\t\n\n29x29 pt (58x58 px @2x)\n\n\t\n\n30.5x30.5 pt (61x61 px @2x)\n\n\t\n\n32x32 pt (64x64 px @2x)\n\n\t\n\n34.5x34.5 pt (69x69 px @2x)\n\n\n\n\nStack\n\n\t\n\n26x14 pt (52x28 px @2x)\n\n\t\n\n29x15 pt (58x30 px @2x)\n\n\t\n\n30.5x16 pt (61x32 px @2x)\n\n\t\n\n32x17 pt (64x34 px @2x)\n\n\t\n\n34.5x18 pt (69x36 px @2x)\n\n\n\n\nPlaceholder\n\n\t\n\n26x26 pt (52x52 px @2x)\n\n\t\n\n29x29 pt (58x58 px @2x)\n\n\t\n\n30.5x30.5 pt (61x61 px @2x)\n\n\t\n\n32x32 pt (64x64 px @2x)\n\n\t\n\n34.5x34.5 pt (69x69 px @2x)\n\nNote\n\nIn each stack measurement, the width value represents the maximum size.\n\nModular large\n\nModular large templates offer a large canvas for displaying up to three rows of content (for example, in the center of the Modular watch face).\n\nColumns\n\nStandard body\n\nTable\n\nTall body\n\nAs you design icons and images for a modular large complication, use the following values for guidance.\n\nContent\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nColumns\n\n\t\n\n11-32x11 pt (22-64x22 px @2x)\n\n\t\n\n12-37x12 pt (24-74x24 px @2x)\n\n\t\n\n12.5-39x12.5 pt (25-78x25 px @2x)\n\n\t\n\n14-42x14 pt (28-84x28 px @2x)\n\n\t\n\n14.5-44x14.5 pt (29-88x29 px @2x)\n\n\n\n\nStandard body\n\n\t\n\n11-32x11 pt (22-64x22 px @2x)\n\n\t\n\n12-37x12 pt (24-74x24 px @2x)\n\n\t\n\n12.5-39x12.5 pt (25-78x25 px @2x)\n\n\t\n\n14-42x14 pt (28-84x28 px @2x)\n\n\t\n\n14.5-44x14.5 pt (29-88x29 px @2x)\n\n\n\n\nTable\n\n\t\n\n11-32x11 pt (22-64x22 px @2x)\n\n\t\n\n12-37x12 pt (24-74x24 px @2x)\n\n\t\n\n12.5-39x12.5 pt (25-78x25 px @2x)\n\n\t\n\n14-42x14 pt (28-84x28 px @2x)\n\n\t\n\n14.5-44x14.5 pt (29-88x29 px @2x)\n\nExtra large\n\nExtra large templates display larger text and images (for example, on the X-Large watch faces).\n\nRing image\n\nRing text\n\nSimple image\n\nSimple text\n\nStack image\n\nStack text\n\nAs you design icons and images for an extra large complication, use the following values for guidance.\n\nImage\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nRing\n\n\t\n\n63x63 pt (126x126 px @2x)\n\n\t\n\n66.5x66.5 pt (133x133 px @2x)\n\n\t\n\n70.5x70.5 pt (141x141 px @2x)\n\n\t\n\n73x73 pt (146x146 px @2x)\n\n\t\n\n79x79 pt (158x158 px @2x)\n\n\n\n\nSimple\n\n\t\n\n91x91 pt (182x182 px @2x)\n\n\t\n\n101.5x101.5 pt (203x203 px @2x)\n\n\t\n\n107.5x107.5 pt (215x215 px @2x)\n\n\t\n\n112x112 pt (224x224 px @2x)\n\n\t\n\n121x121 pt (242x242 px @2x )\n\n\n\n\nStack\n\n\t\n\n78x42 pt (156x84 px @2x)\n\n\t\n\n87x45 pt (174x90 px @2x)\n\n\t\n\n92x47.5 pt (184x95 px @2x)\n\n\t\n\n96x51 pt (192x102 px @2x)\n\n\t\n\n103.5x53.5 pt (207x107 px @2x)\n\n\n\n\nPlaceholder\n\n\t\n\n91x91 pt (182x182 px @2x)\n\n\t\n\n101.5x101.5 pt (203x203 px @2x)\n\n\t\n\n107.5x107.5 pt (215x215 px @2x)\n\n\t\n\n112x112 pt (224x224 px @2x)\n\n\t\n\n121x121 pt (242x242 px @2x)\n\nNote\n\nIn each stack measurement, the width value represents the maximum size.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, tvOS, or visionOS.\n\nResources\nRelated\n\nWatch faces\n\nDeveloper documentation\n\nWidgetKit\n\nVideos\nDesign widgets for the Smart Stack on Apple Watch\nGo further with Complications in WidgetKit\nComplications and widgets: Reloaded\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nReplaced links to deprecated ClockKit documentation with links to WidgetKit documentation.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for rectangular complications to support them as widgets in the Smart Stack.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded specifications for Apple Watch Ultra."
  },
  {
    "title": "Status",
    "url": "https://developer.apple.com/design/human-interface-guidelines/status",
    "html": "Status\nActivity rings\nGauges\nProgress indicators\nRating indicators"
  },
  {
    "title": "Segmented controls",
    "url": "https://developer.apple.com/design/human-interface-guidelines/segmented-controls",
    "html": "Segmented controls\nA segmented control is a linear set of two or more segments, each of which functions as a button.\n\nWithin a segmented control, all segments are usually equal in width. Like buttons, segments can contain text or images. Segments can also have text labels beneath them (or beneath the control as a whole).\n\nBest practices\n\nA segmented control can offer a single choice or multiple choices. For example, in Keynote people can select only one segment in the alignment options control to align selected text. In contrast, people can choose multiple segments in the font attributes control to combine styles like bold, italics, and underline. The toolbar of a Keynote window also uses a segmented control to let people show and hide various editing panes within the main window area.\n\nSingle choice\n\nMultiple choices\n\nUse a segmented control to provide closely related choices that affect an object, state, or view. For example, a segmented control can help people switch between views in a toolbar. Avoid using a segmented control to offer actions, such as adding, removing, or editing content.\n\nAvoid crowding the control with too many segments. Too many segments can be hard to parse and time-consuming to navigate. Aim for no more than about five to seven segments in a wide interface and no more than about five segments on iPhone.\n\nIn general, keep segment size consistent. When all segments have equal width, a segmented control feels balanced. To the extent possible, it’s best to keep icon and title widths consistent too.\n\nContent\n\nPrefer using either text or images — not a mix of both — in a single segmented control. Although individual segments can contain text labels or images, mixing the two in a single control can lead to a disconnected and confusing interface.\n\nAs much as possible, use content with a similar size in each segment. Because all segments typically have equal width, it doesn’t look good if content fills some segments but not others.\n\nUse nouns or noun phrases for segment labels. Write text that describes each segment and uses title-style capitalization. A segmented control that displays text labels doesn’t need introductory text.\n\nPlatform considerations\n\nNot supported in watchOS.\n\niOS, iPadOS\n\nUse a segmented control in a bar only as recommended. Specifically, if you use a segmented control in a navigation bar, avoid including any other controls or a title. Avoid using a segmented control in a toolbar, because toolbar items act on the current screen — they don’t let people switch contexts.\n\nmacOS\n\nConsider using introductory text to clarify the purpose of a segmented control. When the control uses symbols or interface icons, you could also add a label below each segment to clarify its meaning. If your app includes tooltips, provide one for each segment in a segmented control.\n\nUse a tab view in the main window area — instead of a segmented control — for view switching. A tab view supports efficient view switching and is similar in appearance to a box combined with a segmented control. Consider using a segmented control to help people switch views in a toolbar or inspector pane.\n\nSize custom interface icons appropriately based on the size of the control. Use the following values for guidance.\n\nRegular\n\nSmall\n\nMini\n\nControl size\n\n\t\n\nIcon size\n\n\n\n\nRegular\n\n\t\n\n17x17 px @1x (34x34 px @2x)\n\n\n\n\nSmall\n\n\t\n\n14x13 px @1x (28x26 px @2x)\n\n\n\n\nMini\n\n\t\n\n12x11 px @1x (24x22 px @2x)\n\nConsider supporting spring loading. On a Mac equipped with a Magic Trackpad, spring loading lets people activate a segment by dragging selected items over it and force clicking without dropping the selected items. People can also continue dragging the items after a segment activates.\n\ntvOS\n\nConsider using a split view instead of a segmented control on screens that perform content filtering. People generally find it easy to navigate back and forth between content and filtering options using a split view. Depending on its placement, a segmented control may not be as easy to access.\n\nAvoid putting other focusable elements close to segmented controls. Segments become selected when focus moves to them, not when people click them. Carefully consider where you position a segmented control relative to other interface elements. If other focusable elements are too close, people might accidentally focus on them when attempting to switch between segments.\n\nvisionOS\n\nWhen people look at a segmented control that uses icons, the system displays a tooltip that contains the descriptive text you supply.\n\nResources\nRelated\n\nSplit views\n\nDeveloper documentation\n\nsegmented — SwiftUI\n\nUISegmentedControl — UIKit\n\nNSSegmentedControl — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Toolbars",
    "url": "https://developer.apple.com/design/human-interface-guidelines/toolbars",
    "html": "Toolbars\nA toolbar provides convenient access to frequently used commands and controls that perform actions relevant to the current view.\n\nDepending on the platform, a toolbar can look and behave differently.\n\nIn visionOS, a toolbar appears along the bottom edge of an app’s main window.\n\nIn iOS, a toolbar appears at the bottom of a screen. iOS toolbars aren’t customizable, and they don’t support grouping.\n\nIn iPadOS and macOS, a toolbar appears at the top of a screen or window. Both platforms support customizable toolbars and grouped toolbar items. In macOS, people can hide an app’s toolbar.\n\nIn watchOS, the toolbar itself isn’t visible, but you can place toolbar buttons in the top corners and along the bottom of the screen. The system automatically moves the time and title to accommodate buttons in the top corners. You can also place a button in a scrolling view. By default, a scrolling toolbar button remains hidden until people reveal it by scrolling up.\n\nFor developer guidance, see Toolbars\n\nBest practices\n\nProvide toolbar items that support the main tasks people perform. In general, prioritize the commands that people are mostly likely to want. These commands are often the ones people use most frequently, but in some apps it might make sense to prioritize commands that map to the highest level or most important objects people work with. In a macOS app, consider ordering the items in the toolbar according to your prioritization scheme.\n\nAvoid displaying too many toolbar items. People need to be able to distinguish and activate each item, so you don’t want to overcrowd the toolbar.\n\nConsider grouping toolbar items where supported. In iPadOS, macOS, and visionOS, you can define logical groups of items to help people find commands that are related to certain subtasks or functional areas in your app. For example, Keynote includes several groups that are based on functionality, including one for presentation-level commands, one for playback commands, and one for object insertion. In iPadOS, you can also use grouping to keep items together in the Overflow menu (to learn more, see iPadOS).\n\nMake sure the meaning of each toolbar item is clear. Don’t make people guess or experiment to figure out what an item does. In all platforms except macOS, provide either a simple, recognizable symbol (or interface icon), or a short, descriptive label for each item. In a macOS app, you provide a symbol and a label so that people can view both in the toolbar if they choose. As you write labels, prefer verbs and verb phrases like View, Insert, and Share. Use title-style capitalization and no ending punctuation.\n\nPrefer system-provided symbols or interface icons. System-provided symbols are familiar, automatically receive appropriate coloring, and respond consistently to user interactions and vibrancy.\n\nPrefer a consistent appearance for all toolbar items. Toolbars look best and are easiest to understand when all items use a similar visual style.\n\nIf a toolbar item toggles between two states, make sure the item clearly communicates the current state. You might consider changing the item’s color and label to clarify its current state. In the macOS Mail toolbar, for example, the online-offline toggle button displays a filled icon and a Go Offline label when accounts are online; when accounts are offline, the item displays an unfilled icon and a Go Online label.\n\nIn iPadOS and macOS apps, consider letting people customize the toolbar. Toolbar customization is especially useful in apps that provide a lot of items — or that include advanced functionality that not everyone needs — and in apps that people tend to use for long periods of time. For example, it often works well to make a range of editing actions available for toolbar customization, because people often use different types of editing commands based on their work style and their current project.\n\nBe prepared for translucency in the toolbar when content flows beneath it. A toolbar automatically adopts translucency when placed above a scroll view or when the window is configured as a full-size content view. In visionOS, content that can scroll behind a toolbar uses a variable blur to ensure it remains legible and passthrough remains visible. In iOS, a toolbar is translucent by default, using a background material only when content appears behind it and removing the material when the view scrolls to the bottom. For guidance, see Materials.\n\nWhen no content appears behind the toolbar, the background material doesn’t appear.\n\nWhen content appears behind the toolbar, the background material changes to distinguish it from the content.\n\nPlatform considerations\n\nNo additional considerations for tvOS.\n\niOS\n\nAlthough toolbars and tab bars both appear at the bottom of a screen, each has a different purpose.\n\nA toolbar contains buttons for performing actions related to the screen, such as creating an item, filtering items, or marking up content.\n\nA tab bar lets people navigate among different areas of an app, such as the Alarm, Stopwatch, and Timer tabs in the Clock app.\n\nToolbars and tab bars don’t appear together in the same view.\n\nAvoid using a segmented control in a toolbar. Segmented controls let people switch contexts, whereas a toolbar’s actions are specific to the current screen.\n\nIn a toolbar that contains three or fewer buttons, consider using concise text labels instead of symbols to add clarity. For example, Calendar uses the labels Today, Calendars, and Inbox. To ensure that the labels don’t run together, you can insert fixed spaces between the buttons. For developer guidance, see UIBarButtonItem.SystemItem.fixedSpace.\n\nIn a toolbar that has more than three buttons, consider using symbols to conserve space. SF Symbols provides a wide range of customizable symbols you can use to represent actions in your app. If you need to create a custom interface icon for a toolbar button, use the following sizes, adjusting as needed for balance. For guidance, see Icons.\n\nTarget size\n\n\t\n\nMaximum size\n\n\n\n\n24x24 px @1x (48x48 px @2x, 72x72 px @3x)\n\n\t\n\n28x28 px @1x (56x56 px @2x, 84x84 px @3x)\n\niPadOS\n\nIn iPadOS, a toolbar offers commonly used actions that affect the current task, along with document-specific functionality, a Back button, and important actions that people might want to take at any time. In contrast, a navigation bar doesn’t typically include document-specific functionality; instead, it supports app navigation, offers actions that help people manage their content, and can include a search field.\n\nDeveloper note\n\nIn iPadOS, you use UINavigationBar to create a toolbar.\n\nIn iPadOS 16 and later, different areas of the toolbar can display different types of items.\n\nLeading end. Elements that let people return to the previous document and show or hide a sidebar appear at the far leading end, followed by the document title. Next to the title the toolbar can include a document menu that contains standard and app-specific commands that affect the document as a whole, such as Duplicate, Rename, Move, and Export. To ensure that these items are always available regardless of window size, items in the toolbar’s leading end aren’t customizable.\n\nCenter area. Frequently used items appear in the center area, where people can add, remove, and rearrange them. Items in the center section automatically collapse into the system-managed Overflow menu when the window shrinks enough in size.\n\nTrailing end. The trailing end of a toolbar contains important items that need to remain available, buttons that open nearby inspectors, an optional search field, and the Overflow menu that reveals hidden items and supports toolbar customization. Items in the trailing end remain visible at all window sizes.\n\nPlace a toolbar at the top edge of the screen. iPad has a large display that provides enough room for the functionality people appreciate, while preserving access to the most important commands even at small window sizes. If you’re transitioning an iPhone app to run on iPad, be sure to move toolbar buttons at the bottom of your iOS screen to the top of your iPadOS screen.\n\nUse the Document menu to offer commands that affect a document as a whole. For example, you might include commands like Duplicate, Rename, Move, and Print. Avoid listing editing commands in the Document menu — instead, consider elevating these actions to the center area of the toolbar. Also avoid offering commands that open the document in other apps, because the Share menu already lets people perform actions like using Messages to send the document to someone else, opening it in another app, or adding it to a reading list.\n\nPrefer the center area for task-specific commands that people are most likely to use while they’re actively engaged with the content. The center area is always available when the window is at full size, making it a convenient location for editing commands and other actions that affect the window’s content. Also, you can let people customize the items in the center area to support their personal work style. When people make your window smaller, items in the center section of the toolbar automatically transition into the toolbar-managed Overflow menu when there’s no longer enough room to display them.\n\nPrefer the trailing end of the toolbar for important items that need to be visible at all window sizes. For example, Pages offers the Share menu in this area because people often want to perform an action on the document as a whole without expanding it. The trailing end of the toolbar is also an intuitive place to put inspector buttons that reveal panels located on the trailing side of the window.\n\nmacOS\n\nIn a macOS app, the toolbar resides in the frame at the top of a window, either below or integrated with the title bar. Note that window titles can display inline with controls, and toolbar items don’t include a bezel.\n\nWhen horizontal space is limited, the toolbar can display the Search button in place of the search bar. When people click the Search button, the bar expands; when they click elsewhere in the window, the search bar collapses and the toolbar displays the button again.\n\nIn a settings window, the toolbar can use SF Symbols to harmonize with the appearance of the main window, but the title position remains above the toolbar buttons. When needed for clarity, individual toolbar buttons can include color. To indicate the active pane, the window applies a system-provided selection appearance to the selected toolbar button.\n\nMake every toolbar item available as a command in the menu bar. Because people can customize the toolbar or hide it, it can’t be the only place that presents a command. In contrast, it doesn’t make sense to provide a toolbar item for every menu item because not all menu commands are important enough or used often enough to warrant space in the toolbar.\n\nDeveloper note\n\nToolbar items automatically use the large control size. The exception is an integrated toolbar-title bar area — such as the one in a Safari window — which continues to use the regular control size. You can use constraints if you need to specify minimum or maximum sizes for a toolbar control.\n\nUse recommended sizes if you need to create a custom image for a toolbar item. To create a custom interface icon, use a maximum size of 19x19 px (38x38 px @2x). To create a full-color freestanding toolbar icon, use the PNG format and provide @1x version that measures 32x32 px and a @2x version that measures 64x64 px. If you use a recognizable full-color icon from elsewhere, don’t change its appearance or perspective.\n\nIn general, avoid giving a toolbar item a persistent selected appearance. The system adds a rounded-rectangle background to an item only when people move the pointer over it or choose it, removing the appearance when the item performs its action or the pointer moves away. There are two exceptions to this behavior. One is a segmented control that shows a persistent selected appearance within the context of the control — such as the view controls in a Finder window toolbar — and the second is in a settings window that uses toolbar items as pane switchers.\n\nConsider letting people hide the toolbar, in addition to automatically hiding it in full-screen mode. Sometimes people appreciate being able to hide the toolbar to minimize distractions or reveal more content. If you support this action, provide commands for hiding and revealing the toolbar in the View menu. In full-screen mode, it can work well to hide the toolbar if people don’t need it to accomplish the current task. For example, Preview hides the toolbar in a full-screen window because people are more likely to view content than to annotate it. If you hide the toolbar in a full-screen window, reveal it (along with the menu bar) when the pointer moves to the top of the screen.\n\nConsider letting people click nondestructive toolbar items when a window is inactive. Usually, clicking the toolbar of an inactive window brings the window to the front. In some cases, it may be useful to let people invoke a toolbar item without bringing the window to the front so they can continue working on a task in a different window. The toolbar of the standard Fonts panel behaves this way.\n\nConsider adding spring-loading support to toolbar items. On pressure-sensitive systems, such as systems with the Magic Trackpad, spring loading lets people activate a button or segmented control segment by dragging items over it and force clicking — that is, pressing harder — without dropping the items. People can then continue dragging the items, possibly to perform additional actions. In Calendar, for example, people can drag an event over the day, week, month, or year segments in the toolbar. Force clicking a segment switches the calendar view without releasing the event, so people can drop the event at the desired location in the new calendar view.\n\nvisionOS\n\nIn visionOS, the system-provided toolbar appears along the bottom edge of a window, above the window-management controls, and in a parallel plane that’s slightly in front of the window along the z-axis.\n\nAs with other platforms except macOS, you supply either a symbol or a text label for each item in a toolbar. When people look at a toolbar item that contains a symbol, visionOS reveals the text label, providing additional information.\n\nPrefer using a system-provided toolbar. The standard toolbar has a consistent and familiar appearance and is optimized to work well with eye and hand input. In addition, the system automatically places a standard toolbar in the correct position in relation to its window.\n\nAvoid creating a vertical toolbar. In visionOS, tab bars are vertical, so presenting a vertical toolbar could confuse people.\n\nAs much as possible, keep toolbar controls consistent when people resize the window. Unlike macOS, visionOS doesn’t include a menu bar where each app lists all its actions, so it’s important for the toolbar to provide reliable access to essential controls regardless of a window’s size.\n\nIf your app can enter a modal state, consider offering contextually relevant toolbar controls. For example, a photo-editing app might enter a modal state to help people perform a multistep editing task. In this scenario, the controls in the modal editing view are different from the controls in the main window. Be sure to reinstate the window’s standard toolbar controls when the app exits the modal state.\n\nIf necessary, consider including a pull-down menu in a toolbar. A pull-down menu lets you offer additional actions related to a toolbar item, but can be difficult for people to discover and may clutter your interface. Because a toolbar is located at the bottom edge of a window in visionOS, a pull-down menu might obscure the standard window controls that appear below the bottom edge. For guidance, see Pull-down buttons.\n\nwatchOS\n\nA toolbar button lets you offer important app functionality in a view that displays related content. Located at the top of a scrolling view, a toolbar button can stay hidden behind the navigation bar until people reveal it by scrolling up. For developer guidance, see primaryAction.\n\nPlace a toolbar button only in a scrolling view. People frequently scroll to the top of a scrolling view, so discovering a toolbar button is almost automatic. Placing a toolbar button in a nonscrolling view makes it permanently visible, eliminating the advantage of hiding it when it’s not needed.\n\nUse a toolbar button for an important action that isn’t a primary app function. A toolbar button gives you the flexibility to offer important functionality in a view whose primary purpose is related to that functionality, but may not be the same. For example, Mail provides the essential New Message action in a toolbar button at the top of the Inbox view. The primary purpose of the Inbox is to display a scrollable list of email messages, so it makes sense to offer the closely related compose action in a toolbar button at the top of the view.\n\nPrefer a single, full-width toolbar button. Displaying multiple toolbar buttons — whether stacked or side by side — can complicate the view and require people to make sure they’ve discovered the full set of actions before making a choice. If you’re considering more than one toolbar button, also consider whether your app needs a separate view to offer these essential actions.\n\nA toolbar button lets you offer important app functionality in a view that displays related content. You can place toolbar buttons in the top corners or along the bottom of the screen. If you place these buttons above scrolling content, the buttons always remain visible, as the content scrolls under them.\n\nTop toolbar buttons.\n\nBottom toolbar buttons.\n\nFor developer guidance, see topBarLeading, topBarTrailing, or bottomBar.\n\nYou can also place a button in the scrolling view. By default, a scrolling toolbar button remains hidden until people reveal it by scrolling up. People frequently scroll to the top of a scrolling view, so discovering a toolbar button is automatic.\n\nToolbar button hidden.\n\nToolbar button shown.\n\nFor developer guidance, see primaryAction.\n\nUse a scrolling toolbar button for an important action that isn’t a primary app function. A toolbar button gives you the flexibility to offer important functionality in a view whose primary purpose is related to that functionality, but may not be the same. For example, Mail provides the essential New Message action in a toolbar button at the top of the Inbox view. The primary purpose of the Inbox is to display a scrollable list of email messages, so it makes sense to offer the closely related compose action in a toolbar button at the top of the view.\n\nResources\nRelated\n\nNavigation bars\n\nTab bars\n\nLayout\n\nDeveloper documentation\n\nToolbars — SwiftUI\n\nUIToolbar — UIKit\n\nNSToolbar — AppKit\n\nVideos\nDesign for spatial user interfaces\nWhat’s new in iPad app design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using toolbars in watchOS."
  },
  {
    "title": "Steppers",
    "url": "https://developer.apple.com/design/human-interface-guidelines/steppers",
    "html": "Steppers\nA stepper is a two-segment control that people use to increase or decrease an incremental value.\n\nA stepper sits next to a field that displays its current value, because the stepper itself doesn’t display a value.\n\nBest practices\n\nMake the value that a stepper affects obvious. A stepper itself doesn’t display any values, so make sure people know which value they’re changing when they use a stepper.\n\nConsider pairing a stepper with a text field when large value changes are likely. Steppers work well by themselves for making small changes that require a few taps or clicks. By contrast, people appreciate the option to use a field to enter specific values, especially when the values they use can vary widely. On a printing screen, for example, it can help to have both a stepper and a text field to set the number of copies.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or visionOS. Not supported in watchOS or tvOS.\n\nmacOS\n\nFor large value ranges, consider supporting Shift-click to change the value quickly. If your app benefits from larger changes in a stepper’s value, it can be useful to let people Shift-click the stepper to change the value by more than the default increment (by 10 times the default, for example).\n\nResources\nRelated\n\nPickers\n\nText fields\n\nDeveloper documentation\n\nUIStepper — UIKit\n\nNSStepper — AppKit"
  },
  {
    "title": "Sliders",
    "url": "https://developer.apple.com/design/human-interface-guidelines/sliders",
    "html": "Sliders\nA slider is a horizontal track with a control, called a thumb, that people can adjust between a minimum and maximum value.\n\nAs a slider’s value changes, the portion of track between the minimum value and the thumb fills with color. A slider can optionally display left and right icons that illustrate the meaning of the minimum and maximum values.\n\nBest practices\n\nCustomize a slider’s appearance if it adds value. You can adjust a slider’s appearance — including track color, thumb image and tint color, and left and right icons — to blend with your app’s design and communicate intent. A slider that adjusts image size, for example, could show a small image icon on the left and a large image icon on the right.\n\nUse familiar slider directions. People expect the minimum and maximum sides of sliders to be consistent in all apps, with minimum values on the leading side and maximum values on the trailing side (for horizontal sliders) and minimum values at the bottom and maximum values at the top (for vertical sliders). For example, people expect to be able to move a horizontal slider that represents a percentage from 0 percent on the leading side to 100 percent on the trailing side.\n\nConsider supplementing a slider with a corresponding text field and stepper. Especially when a slider represents a wide range of values, people may appreciate seeing the exact slider value and having the ability to enter a specific value in a text field. Adding a stepper provides a convenient way for people to increment in whole values. For related guidance, see Text fields and Steppers.\n\nPlatform considerations\n\nNot supported in tvOS.\n\niOS, iPadOS\n\nDon’t use a slider to adjust audio volume. If you need to provide volume control in your app, use a volume view, which is customizable and includes a volume-level slider and a control for changing the active audio output device. For guidance, see Playing audio.\n\nmacOS\n\nSliders in macOS can also include tick marks, making it easier for people to pinpoint a specific value within the range.\n\nIn a linear slider without tick marks, the thumb is round, and the portion of track between the minimum value and the thumb is filled with color. In a linear slider with tick marks, the thumb is directional — pointing toward the tick marks — and the track isn’t tinted. A linear slider often includes supplementary icons that illustrate the meaning of the minimum and maximum values.\n\nIn a circular slider, the thumb appears as a small circle. Tick marks, when present, appear as evenly spaced dots around the circumference of the slider.\n\nLinear slider without tick marks\n\nLinear slider with tick marks\n\nCircular slider\n\nConsider giving live feedback as the value of a slider changes. Live feedback shows people results in real time. For example, your Dock icons are dynamically scaled when adjusting the Size slider in Dock settings.\n\nChoose a slider style that matches peoples’ expectations. A horizontal slider is ideal when moving between a fixed starting and ending point. For example, a graphics app might offer a horizontal slider for setting the opacity level of an object between 0 and 100 percent. Use circular sliders when values repeat or continue indefinitely. For example, a graphics app might use a circular slider to adjust the rotation of an object between 0 and 360 degrees. An animation app might use a circular slider to adjust how many times an object spins when animated — four complete rotations equals four spins, or 1440 degrees of rotation.\n\nConsider using a label to introduce a slider. Labels generally use sentence-style capitalization and end with a colon. For guidance, see Labels.\n\nUse tick marks to increase clarity and accuracy. Tick marks help people understand the scale of measurements and make it easier to locate specific values.\n\nConsider adding labels to tick marks for even greater clarity. Labels can be numbers or words, depending on the slider’s values. It’s unnecessary to label every tick mark unless doing so is needed to reduce confusion. In many cases, labeling only the minimum and maximum values is sufficient. When the values of the slider are nonlinear, like in the Energy Saver settings pane, periodic labels provide context. It’s also a good idea to provide a tooltip that displays the value of the thumb when people hold their pointer over it.\n\nvisionOS\n\nPrefer horizontal sliders. It’s generally easier for people to gesture from side to side than up and down.\n\nwatchOS\n\nA slider is a horizontal track — appearing as a set of discrete steps or as a continuous bar — that represents a finite range of values. People can tap buttons on the sides of the slider to increase or decrease its value by a predefined amount.\n\nIf necessary, create custom glyphs to communicate what the slider does. The system displays plus and minus signs by default.\n\nResources\nRelated\n\nSteppers\n\nPickers\n\nDeveloper documentation\n\nSlider — SwiftUI\n\nUISlider — UIKit\n\nNSSlider — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Boxes",
    "url": "https://developer.apple.com/design/human-interface-guidelines/boxes",
    "html": "Boxes\nA box creates a visually distinct group of logically related information and components.\n\nBy default, a box uses a visible border or background color to separate its contents from the rest of the interface. A box can also include a title.\n\nBest practices\n\nPrefer keeping a box relatively small in comparison with its containing view. As a box’s size gets close to the size of the containing window or screen, it becomes less effective at communicating the separation of grouped content, and it can crowd other content.\n\nConsider using padding and alignment to communicate additional grouping within a box. A box’s border is a distinct visual element — adding nested boxes to define subgroups can make your interface feel busy and constrained.\n\nContent\n\nProvide a succinct introductory title if it helps clarify the box’s contents. The appearance of a box helps people understand that its contents are related, but it might make sense to provide more detail about the relationship. Also, a title can help VoiceOver users predict the content they encounter within the box.\n\nIf you need a title, write a brief phrase that describes the contents. Use sentence-style capitalization. Avoid ending punctuation unless you use a box in a settings pane, where you append a colon to the title.\n\nPlatform considerations\n\nNo additional considerations for visionOS. Not supported in tvOS or watchOS.\n\niOS, iPadOS\n\nBy default, iOS and iPadOS use the secondary and tertiary background colors in boxes.\n\nmacOS\n\nBy default, macOS displays a box’s title above it.\n\nResources\nRelated\n\nLayout\n\nDeveloper documentation\n\nGroupBox — SwiftUI\n\nNSBox — AppKit"
  },
  {
    "title": "Sign in with Apple",
    "url": "https://developer.apple.com/design/human-interface-guidelines/sign-in-with-apple",
    "html": "Sign in with Apple\nSign in with Apple provides a fast, private way to sign into apps and websites, giving people a consistent experience they can trust and the convenience of not having to remember multiple accounts and passwords.\n\nSupporting Sign in with Apple lets people use the Apple ID they already have to sign in or sign up, and skip filling out forms, verifying email addresses, and choosing passwords. In cases where you choose to ask for a name and email address, people have the option to share a unique, random email address that automatically relays messages to their personal email address. For developer guidance, see Authentication Services.\n\nYou can offer Sign in with Apple in every version of your app or website across all platforms — including non-Apple platforms.\n\nSign in with Apple makes it easy for people to authenticate with Face ID, Touch ID, or Optic ID and has two-factor authentication built in for an added layer of security. Apple doesn’t use Sign in with Apple to profile people or their activity in apps.\n\nOffering Sign in with Apple\n\nFollow these guidelines to offer Sign in with Apple when it’s most convenient for people.\n\nAsk people to sign in only in exchange for value. People need to understand why you’re asking them to sign in, so it can work well to display a brief, approachable description of sign-in benefits. For example, you might want to tell people that signing in lets them personalize the app experience, access additional features, or synchronize data.\n\nDelay sign-in as long as possible. People often abandon apps when they’re forced to sign in before doing anything useful. Give them a chance to familiarize themselves with your app before making a commitment. For example, a live-streaming app could let people explore available content before signing in to stream something.\n\nIf you require an account, ask people to set it up before offering any sign-in options. Start by explaining the reasons for requiring an account. Then, after people complete account setup, let them choose a convenient way to sign in to their new account by offering Sign in with Apple and any other sign-in methods you support.\n\nConsider letting people link an existing account to Sign in with Apple. When you support this type of linking, people can get the convenience of using Sign in with Apple while maintaining access to the information in an account they’ve already set up. You can offer account linking before or after people sign in to their existing account. For example:\n\nIf people share an email address through Sign in with Apple and it matches the address in an existing account, you can suggest that they link Sign in with Apple to that account.\n\nIf people used an existing user name and password to sign in, you can display an account-linking suggestion in their account’s settings view or another logical place.\n\nIn a commerce app, wait until after people make a purchase before asking them to create an account. If you support a guest checkout system, give people a quick way to create an account after the transaction completes. For example, if you support Apple Pay, let people create an account on the order confirmation page. In cases where people have already provided their name and email address during the Apple Pay transaction, you don’t need to ask for this information.\n\nAs soon as Sign in with Apple completes, welcome people to their new account. Help people use their new account right away; don’t delay the experience by asking for information that isn’t required.\n\nIndicate when people are currently signed in. You can help people confirm their sign-in method by displaying a phrase like “Using Sign in with Apple” in places like a settings or account interface.\n\nCollecting data\n\nPeople appreciate Sign in with Apple for its privacy and convenience. Although some apps or websites may require additional information — such as a date of birth or a region of residence — it’s essential to minimize your requests for data as people set up an account. Build on the trust that people have in Sign in with Apple by describing why you need additional data and clearly displaying the data you receive.\n\nClarify whether the additional data you request is required or just recommended. If the data is legally or contractually required — such as an agreement to terms of service, country or region of residence, birth date, or information required by a region’s real-identity laws — make sure people understand that they must supply the additional information to complete the setup of their account. If additional data isn’t required but can improve the user experience, make sure people know the request is optional and help them understand the benefits of providing the information.\n\nDon’t ask people to supply a password. A key benefit of Sign in with Apple is that people don’t have to create and memorize additional passwords. Unless people have stopped using Sign in with Apple with your app or website, don’t ask for a password.\n\nAvoid asking for a personal email address when people supply a private relay address. Using Sign in with Apple, people can choose to share a private relay address that automatically forwards messages to their verified personal email account. It’s essential to respect this choice and avoid overriding it by asking for a personal email address. If you present customer service, retail, or other experiences that request identification via email address, you can:\n\nMake sure that people can view their private relay address in your app or website\n\nDirect people to Settings > Apple ID > Password & Security > Apps using Apple ID to retrieve their private relay address\n\nUse other identifying values, like an order number or phone number collected as part of a purchase\n\nGive people a chance to engage with your app before asking for optional data. As people use your app, you can help them discover places where they can benefit from sharing more information with you. For example, you might suggest that they provide a contact phone number if they want real-time text updates, or social network information if they want to play games with friends. If people choose not to provide optional information, don’t prevent them from accessing their account or using all the features of your app.\n\nBe transparent about the data you collect. People value knowing how you use the data that they share with you. One way you can be transparent is to welcome people by using the name or email address they shared. Doing this helps establish how you use this information and, for a relay address, shows people where to find it in the future. If you don’t display all the data that people provide, they are likely to wonder why you asked for it.\n\nDisplaying buttons\n\nApple provides several Sign in with Apple buttons you can use to let people set up an account and sign in. If necessary, you can create a custom button to offer Sign in with Apple; for guidelines, see Creating a custom Sign in with Apple button.\n\nProminently display a Sign in with Apple button. Make a Sign in with Apple button no smaller than other sign-in buttons, and avoid making people scroll to see the button.\n\nUsing the system-provided buttons\n\nWhen you use the system-provided APIs to create a Sign in with Apple button, you get the following advantages.\n\nA button that’s guaranteed to use an Apple-approved appearance\n\nAssurance that the button’s contents maintain ideal proportions as you change its style\n\nAutomatic translation of the button’s title into the language specified by the device\n\nSupport for configuring the button’s corner radius to match the style of your UI (iOS, macOS, and web)\n\nA system-provided alternative text label that lets VoiceOver describe the button\n\nFor developer guidance, see ASAuthorizationAppleIDButton (iOS, macOS, and tvOS), WKInterfaceAuthorizationAppleIDButton (watchOS), and Displaying Sign in with Apple buttons on the web. You can also visit Sign in with Apple button to view and adjust live previews of web-based buttons and get the code.\n\nThe system provides several variants of the button title. Depending on the platform on which your content runs, choose the variant that fits the terminology of your sign-in experience and use it consistently throughout your interfaces.\n\nThe following button titles are available for iOS, macOS, tvOS, and the web:\n\nFor watchOS, the system provides one title:  Sign in.\n\nDepending on the platform, the system provides up to three options for the appearance of the Sign in with Apple button: white, white with an outline, and black. Choose the appearance that works best with the background on which the button displays.\n\nWhite\n\nThe white style is available on all platforms and the web. Use this style on dark backgrounds that provide sufficient contrast.\n\nWhite with outline\n\nThe white outlined style is available in iOS, macOS, and the web. Use this style on white or light-color backgrounds that don’t provide sufficient contrast with the white button fill. Avoid using this style on a dark or saturated background, because the black outline can add visual clutter; instead, use the white style to contrast with a dark background.\n\nBlack\n\nThe black style is available on all platforms and the web. Use this style on white or light-color backgrounds that provide sufficient contrast; don’t use it on black or dark backgrounds.\n\nUnlike the black Sign in with Apple button for other platforms, the watchOS button uses a fill color that’s not fully black. To contrast with the pure black background of Apple Watch, the watchOS button uses the system-defined dark gray appearance.\n\nButton size and corner radius\n\nAdjust the corner radius to match the appearance of other buttons in your app. By default, the Sign in with Apple button has rounded corners. In iOS, macOS, and the web, you can change the corner radius to produce a button with square corners or a capsule-shape button. For developer guidance, see cornerRadius (iOS and macOS) and Displaying Sign in with Apple buttons on the web.\n\nMinimum corner radius\n\nDefault corner radius\n\nMaximum corner radius\n\nMaintain the minimum button size and margin around the button in iOS, macOS, and the web. Be mindful that the button title may vary in length depending on the locale. Use the following values for guidance.\n\nMinimum width\n\n\t\n\nMinimum height\n\n\t\n\nMinimum margin\n\n\n\n\n140pt (140px @1x, 280px @2x)\n\n\t\n\n30pt (30px @1x, 60px @2x)\n\n\t\n\n1/10 of the button’s height\n\nCreating a custom Sign in with Apple button\n\nIf your interface requires it, you can create a custom Sign in with Apple button for iOS, macOS, or the web. For example, you may want to align logos across multiple sign-in buttons, use buttons that display only a logo, or adjust the button’s font, bezel, or background appearance to coordinate with your UI.\n\nAlways make sure that people can instantly identify your custom button as a Sign in with Apple button. If your custom button differs too much from the standard one, people may not feel comfortable using it to set up an account or sign in. App Review evaluates all custom Sign in with Apple buttons.\n\nApple Design Resources provides downloadable Apple logo artwork you can use to create custom Sign in with Apple buttons that display either a logo only or a logo and text. The logo files are available in PNG, SVG, and PDF formats, and the artwork for both types of buttons includes both black and white versions. Here are examples of the black and white logo-only art files, each with a background added for visibility.\n\nAll downloadable logo files include padding that simplifies positioning the logo in a button. Logo-only logo files include horizontal and vertical padding that ensures the correct proportion of the logo relative to the button. In addition to padding that keeps the logo and button correctly proportioned, logo files for buttons with text also include horizontal padding that provides a minimum margin between the logo and the button’s leading edge and title.\n\nUse only the logo artwork downloaded from Apple Design Resources; never create a custom Apple logo. As you create a custom Sign in with Apple button, follow these guidelines for using the downloadable logo file:\n\nUse the logo file to position the Apple logo in a button; never use the Apple logo as a button.\n\nMatch the height of the logo file to the height of the button.\n\nDon’t crop the logo file.\n\nDon’t add vertical padding.\n\nTo make sure that your custom button is visually consistent with the system-provided Sign in with Apple button, don’t change the following attributes.\n\nTitles. Use only Sign in with Apple, Sign up with Apple, or Continue with Apple.\n\nGeneral shape. Buttons that combine the logo with text are always rectangular; logo-only buttons can be circular or rectangular.\n\nLogo and title colors. Within a button, both items must be either black or white; don’t use custom colors.\n\nTo coordinate with your app design, you can change:\n\nTitle font. You can also adjust the font’s weight and size.\n\nTitle case. You can capitalize every letter in the title.\n\nBackground appearance. The overall color needs to remain black or white. If necessary, you can include a subtle texture or gradient to help the button harmonize with your interface.\n\nButton corner radius. You can use a corner radius value that matches the other buttons in your UI.\n\nButton bezel and shadow. For example, you can use a stroke to emphasize the button bezel or add a drop shadow.\n\nCustom buttons with a logo and text\n\nChoose the format of the logo file based on the height of your button. Because SVG and PDF are vector-based formats, you can use these files in buttons of any height. Use the PNG files only in buttons that are 44 points tall, which is the default (and recommended) button height in iOS. Logos are available in small, medium, and large sizes, so you can match logo sizes in all the sign-up buttons you display.\n\nPrefer the system font for the title — that is, Sign in with Apple, Sign up with Apple, or Continue with Apple. Regardless of the font you choose, the title and button height of your custom button need to use the same proportions that the system uses. Using the system font for example, the title’s font size would be 43% of the button’s height — in other words, the button’s height would be 233% of the title’s font size, rounded to the nearest integer. Here are two examples that show these proportions using different sizes of the system font.\n\nIn general, preserve the capitalization style of the title. By default, all variants of the button title capitalize the first word — that is, Sign or Continue — and Apple; all other letters are lowercase. Avoid changing this style unless your interface uses only uppercase.\n\nKeep the title and logo vertically aligned within the button. To do this, vertically align the title to the middle of the button, then add the logo image, making sure its height matches the height of the button. Because the logo image includes top and bottom padding, vertically aligning the title in the button ensures that the title, the logo, and the button stay properly aligned.\n\nInset the logo if necessary. If you need to horizontally align the Apple logo with other authentication logos, you can adjust the space between the logo and the button’s leading edge.\n\nMaintain a minimum margin between the title and the right edge of the button. Ensure the margin measures at least 8% of the button’s width.\n\nMaintain the minimum button size and margin around the button. Be mindful that the button title may vary in length depending on the locale. Use the following values for guidance.\n\nMinimum width\n\n\t\n\nMinimum height\n\n\t\n\nMinimum margin\n\n\n\n\n140 pt (140 px @1x, 280 px @2x)\n\n\t\n\n30 pt (30 px @1x, 60 px @2x)\n\n\t\n\n1/10 of the button’s height\n\nCustom logo-only buttons\n\nChoose the format of the logo file based on the size of your button. The downloadable artwork for logo-only buttons is available in SVG, PDF, and PNG formats. Use the vector-based SVG and PDF formats for buttons of any size; use the PNG format only in buttons that measure 44x44 pt.\n\nDon’t add horizontal padding to a logo-only image. A logo-only Sign in with Apple button always has a 1:1 aspect ratio, and the artwork already includes the correct padding on all sides.\n\nUse a mask to change the default square shape of the logo-only image. For example, you might want to use a circular or rounded rectangular shape to present all logo-only sign-in buttons. Never crop the Apple-provided artwork to decrease its built-in padding or use the logo by itself, and avoid including additional padding.\n\nRounded rectangle mask\n\nNo mask\n\nCircular mask\n\nMaintain a minimum margin around the button. Ensure the margin measures at least 1/10 of the button’s height.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nSign in with Apple button\n\nDeveloper documentation\n\nAuthentication Services\n\nDisplaying Sign in with Apple buttons on the web — Sign in with Apple\n\nVideos\nMove beyond passwords\nSimplify sign in for your tvOS apps\nIntroducing Sign In with Apple\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nRefined guidance on supporting existing accounts, helping people set up a new account, and indicating the current sign-in status. Consolidated guidance into one page."
  },
  {
    "title": "Playing audio",
    "url": "https://developer.apple.com/design/human-interface-guidelines/playing-audio",
    "html": "Playing audio\nPeople expect rich audio experiences that automatically adjust when the context changes on the device.\n\nDevices can play audio in a variety of ways, such as through internal or external speakers, headphones, and wirelessly through devices that use Bluetooth or AirPlay. To manipulate sound on their devices people use several types of controls, including volume buttons, the Ring/Silent switch on iPhone, headphone controls, the Control Center volume slider, and sound controls in third-party accessories. Whether sound is a primary part of your experience or an embellishment, you need to make sure it behaves as people expect as they make changes to volume and output.\n\nSilence. People switch a device to silent when they want to avoid being interrupted by unexpected sounds like ringtones and incoming message tones. In this scenario, they also want to silence nonessential sounds, such as keyboard clicks, sound effects, game soundtracks, and other audible feedback. When a device is in silent mode, it plays only the audio that people explicitly initiate, like media playback, alarms, and audio/video messaging.\n\nVolume. People expect their volume settings to affect all sound in the system — including music and in-app sound effects — regardless of the method they use to adjust the volume. An exception is the ringer volume on iPhone, which people can adjust separately in Settings.\n\nHeadphones. People use headphones to keep their listening private and in some cases to free their hands. When connecting headphones, people expect sound to reroute automatically without interruption; when disconnecting headphones, they expect playback to pause immediately.\n\nBest practices\n\nAdjust levels automatically when necessary — don’t adjust the overall volume. Your app can adjust relative, independent volume levels to achieve a great mix of audio, but the system volume always governs the final output.\n\nPermit rerouting of audio when possible. People often want to select a different audio output device. For example, they may want to listen to music through their living room stereo, car radio, or Apple TV. Support this capability unless there’s a compelling reason not to.\n\nUse the system-provided volume view to let people make audio adjustments. The volume view includes a volume-level slider and a control for rerouting audio output. You can customize the appearance of the slider. For developer guidance, see MPVolumeView.\n\nChoose an audio category that fits the way your app or game uses sound. Depending on the audio category you choose, your app’s sounds can mix with other audio, play while your app is in the background, or stop when people set the Ring/Silent switch to silent. As much as possible, pick a category that helps your app meet people’s expectations. For example, don’t make people stop listening to music from another app if you don’t need to. For developer guidance, see AVAudioSession.Category.\n\nCategory\n\n\t\n\nMeaning\n\n\t\n\nBehavior\n\n\n\n\nSolo ambient\n\n\t\n\nSound isn’t essential, but it silences other audio. For example, a game with a soundtrack.\n\n\t\n\nResponds to the silence switch. Doesn’t mix with other sounds. Doesn’t play in the background.\n\n\n\n\nAmbient\n\n\t\n\nSound isn’t essential, and it doesn’t silence other audio. For example, a game that lets people play music from another app during gameplay in place of the game’s soundtrack.\n\n\t\n\nResponds to the silence switch. Mixes with other sounds. Doesn’t play in the background.\n\n\n\n\nPlayback\n\n\t\n\nSound is essential and might mix with other audio. For example, an audiobook or educational app that teaches a foreign language, which people might want to listen to after leaving the app.\n\n\t\n\nDoesn’t respond to the silence switch. May or may not mix with other sounds. Can play in the background.\n\n\n\n\nRecord\n\n\t\n\nSound is recorded. For example, a note-taking app that offers an audio recording mode. An app of this nature might switch its category to playback if it lets people play the recorded notes.\n\n\t\n\nDoesn’t respond to the silence switch. Doesn’t mix with other sounds. Can record in the background.\n\n\n\n\nPlay and record\n\n\t\n\nSound is recorded and played, potentially simultaneously. For example, an audio messaging or video calling app.\n\n\t\n\nDoesn’t respond to the silence switch. May or may not mix with other sounds. Can record and play in the background.\n\nRespond to audio controls only when it makes sense. People can control audio playback from outside your app’s interface — such as in Control Center or with controls on their headphones — regardless of whether your app is in the foreground or background. If your app is actively playing audio, in a clear audio-related context, or connected to a device that uses Bluetooth or AirPlay, it’s fine to respond to audio controls. Otherwise, when people activate a control, avoid halting audio currently playing from another app.\n\nAvoid repurposing audio controls. People expect audio controls to behave consistently in all apps, so it’s essential to avoid redefining the meaning of an audio control in your app. If your app doesn’t support certain controls, don’t respond to them.\n\nConsider creating custom audio player controls only if you need to offer commands that the system doesn’t support. For example, you might want to define custom increments for skipping forward or backward, or present content that’s related to the playing audio, such as a sports score.\n\nLet other apps know when your app finishes playing temporary audio. If your app can temporarily interrupt the audio of other apps, be sure to flag your audio session in a way that lets other apps know when they can resume. For developer guidance, see notifyOthersOnDeactivation.\n\nHandling interruptions\n\nAlthough most apps and games rely on the system’s default interruption behavior, you can customize this behavior to better accommodate your needs.\n\nDetermine how to respond to audio-session interruptions. For example, if your app supports recording or other audio-related tasks that people don’t want interrupted, you can tell the system to avoid interrupting the currently playing audio for an incoming call unless people choose to accept it. Another example is a VoIP app, which must end a call when people close the Smart Folio of their iPad while they’re using the built-in microphone. Closing the Smart Folio automatically mutes the iPad microphone and by default interrupts the audio session associated with it. If a VoIP app restarts the audio session when people reopen their Smart Folio, it risks invading people’s privacy by unmuting the microphone without their knowledge. You can inspect an audio-session interruption to help determine the right way to respond; for developer guidance, see doc://com.apple.documentation/documentation/avfaudio/avaudiosession/responding_to_audio_session_interruptions.\n\nWhen an interruption ends, determine whether to resume audio playback automatically. Sometimes, audio from a different app can interrupt the audio your app is playing. An interruption can be resumable, like an incoming phone call, or nonresumable, like when people start a new music playlist. Use the interruption type and your app’s type to decide whether to resume playback automatically. For example, a media playback app that’s actively playing audio when an interruption occurs can check to be sure the type is resumable before continuing playback when the interruption ends. On the other hand, a game doesn’t need to check the interruption type before automatically resuming playback, because a game plays audio without an explicit user choice. For developer guidance, see shouldResume.\n\nPlatform considerations\niOS, iPadOS\n\nUse the system’s sound services to play short sounds and vibrations. For developer guidance, see Audio Services.\n\nmacOS\n\nIn macOS, notification sounds mix with other audio by default.\n\ntvOS\n\nIn tvOS, the system plays audio only when people initiate it, through interactions within apps and games or when performing device calibrations. For example, tvOS doesn’t play sounds to accompany components like alerts or notifications.\n\nvisionOS\n\nSubtle, expressive sounds are everywhere in visionOS, enhancing experiences and providing essential feedback when people look at a virtual object and use gestures to interact with it. The system combines audio algorithms with information about a person’s physical surroundings to produce Spatial Audio, which is sound that people can perceive as coming from specific locations in space, not just from speakers.\n\nImportant\n\nIn visionOS, as in every platform, avoid communicating important information using only sound. Always provide additional ways to help people understand your app. For guidance, see Accessibility.\n\nIn visionOS, audio playback from the Now Playing app pauses automatically when people close the app’s window, and audio from an app that isn’t the Now Playing app can duck when people look away from it to different app.\n\nPrefer playing sound. People generally choose to keep sounds audible while they’re wearing the device, so an app that doesn’t play sound — especially in an immersive moment — can feel lifeless and may even seem broken. Throughout the design process, look for opportunities to create meaningful sounds that aid navigation and help people understand the spatial qualities of your app.\n\nDesign custom sounds for custom UI elements. In general, a system-provided element plays sound to help people locate it and receive feedback when they interact with it. To help people interact with your custom elements, design sounds that provide feedback and enhance the spatial experience of your app.\n\nUse Spatial Audio to create an intuitive, engaging experience. Because people can perceive Spatial Audio as coming from anywhere around them, it works especially well in a fully immersive context as a way to help an experience feel lifelike. Ambient audio provides pervasive sounds that can help anchor people in a virtual world and an audio source can sound like it comes from a specific object. As you build the soundscape for your app, consider using both types of audio.\n\nConsider defining a range of places from which your app sounds can originate. Spatial Audio helps people locate the object that’s making sound, whether it’s stationary or moving in space. For example, when people move an app window that’s playing audio, the sound continues to come directly from the window, wherever people move it.\n\nConsider varying sounds that people could perceive as repetitive over time. For example, the system subtly varies the pitch and volume of the virtual keyboard’s sounds, suggesting the different sounds a physical keyboard can make as people naturally vary the speed and forcefulness of their typing. An efficient way to achieve a pleasing variation in sound is to randomize a sound file’s pitch and volume during playback, instead of creating different files.\n\nDecide whether you need to play sound that’s fixed to the wearer or tracked by the wearer. People perceive fixed sound as if it’s pointed at them, regardless of the direction they look or the virtual objects they move. In contrast, people tend to perceive tracked sound as coming from a particular object, so moving the object closer or farther away changes what they hear. In general, you want to use tracked sound to enhance the realism of your experience, but there could be cases where fixed sound is a good choice. For example, Mindfulness uses fixed sound to envelop the wearer in an engaging, peaceful setting.\n\nwatchOS\n\nIn watchOS, the system manages audio playback. An app can play short audio clips while it’s active and running in the foreground, or it can play longer audio that continues even when people lower their wrist or switch to another app. For developer guidance, see Playing Background Audio.\n\nUse the recommended encoding values for media assets. Specifically, use the 64 kbps HE-AAC (High-Efficiency Advanced Audio Coding) format to produce good-quality audio with lower data requirements.\n\nConsider presenting a Now Playing view so people can control current or recently played audio without leaving your app. The system-provided Now Playing view also displays information about the current audio source — which might be another app on a person’s Apple Watch or iPhone — and automatically selects the current or most recently used source. For developer guidance, see Adding a Now Playing View.\n\nResources\nRelated\n\nPlaying video\n\nFeedback\n\nDeveloper documentation\n\nConfiguring your app for media playback — AVFoundation\n\nAVAudioSession — AVFAudio\n\nVideos\nExplore immersive sound design\nPrinciples of spatial design\nImmerse your app in Spatial Audio\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Patterns",
    "url": "https://developer.apple.com/design/human-interface-guidelines/patterns",
    "html": "Patterns\nGet design guidance for supporting common user actions, tasks, and experiences.\nCharting data\nCollaboration and sharing\nDrag and drop\nEntering data\nFeedback\nFile management\nGoing full screen\nLaunching\nLive-viewing apps\nLoading\nManaging accounts\nManaging notifications\nModality\nMultitasking\nOffering help\nOnboarding\nPlaying audio\nPlaying haptics\nPlaying video\nPrinting\nRatings and reviews\nSearching\nSettings\nUndo and redo\nWorkouts"
  },
  {
    "title": "Typography",
    "url": "https://developer.apple.com/design/human-interface-guidelines/typography",
    "html": "Typography\nIn addition to ensuring legible text, your typographic choices can help you clarify an information hierarchy, communicate important content, and express your brand.\n\nBest practices\n\nStrive to maintain a minimum font size that most people can read easily. Differences in device displays, including pixel density and brightness, can influence the appropriate minimum font size. Other factors, such as the reader’s proximity to the text, their visual acuity and whether they’re in motion, and ambient lighting, can all impact legibility. When you support Dynamic Type — a feature that lets people choose the size of visible text in iOS, iPadOS, tvOS, visionOS, and watchOS — your app or game can respond appropriately when people adjust text to a size that works for them. For developer guidance, see Text input and output; for available sizes, see Specifications.\n\nAdjust font weight, size, and color as needed to emphasize important information and help people visualize hierarchy. Be sure to maintain the relative hierarchy and visual distinction of text elements when people adjust text sizes.\n\nMinimize the number of typefaces you use in your interface. Mixing too many different typefaces can obscure your information hierarchy and hinder readability.\n\nTest legibility in different contexts. For example, in addition to adjusting text size, people may read your content outside in bright sunlight, glance at it while they’re in motion, or view it from a distance. If testing shows that some of your text is difficult to read, consider modifying the text or background colors to increase contrast, using a larger type size, or using typefaces designed for optimized legibility, like the system fonts.\n\nIn general, avoid light font weights to help maintain readability. For example, if you’re using system-provided fonts, prefer Medium, Semibold, or Bold font weights, and avoid Ultralight, Thin, and Light font weights, which can be difficult to see, especially when text is small. In general, use Regular sparingly.\n\nPrioritize important content when responding to text-size changes. Not all content is equally important. When someone chooses a larger text size, they typically want to make the content they care about easier to read; they don’t always want to increase the size of every word on the screen. For example, when people choose a large accessibility text size, Mail displays the subject and body of the message in the large size, but leaves less important text — such as the date and the sender — in a smaller size.\n\nUsing system fonts\n\nApple provides two typeface families that support an extensive range of weights, sizes, styles, and languages.\n\nSan Francisco (SF) is a sans serif typeface family that includes the SF Pro, SF Compact, SF Arabic, and SF Mono variants.\n\nThe system also offers the SF Pro Rounded, SF Arabic Rounded, and SF Compact Rounded variants you can use to coordinate text with the appearance of soft or rounded UI elements, or to provide an alternative typographic voice.\n\nNew York (NY) is a serif typeface family designed to work well by itself and alongside the SF fonts.\n\nYou can download the San Francisco and New York fonts here.\n\nThe system provides the SF and NY fonts in the variable font format, which combines different font styles together in one file, and supports interpolation between styles to create intermediate ones.\n\nNote\n\nVariable fonts support optical sizing, which refers to the adjustment of different typographic designs to fit different sizes. On all platforms, the system fonts support dynamic optical sizes, which merge discrete optical sizes (like Text and Display) and weights into a single, continuous design, letting the system interpolate each glyph or letterform to produce a structure that’s precisely adapted to the point size. With dynamic optical sizes, you don’t need to use discrete optical sizes unless you’re working with a design tool that doesn’t support all the features of the variable font format.\n\nTo help you define visual hierarchies and create clear and legible designs in many different sizes and contexts, the system fonts are available in a variety of weights, ranging from Ultralight to Black, and — in the case of SF — several widths, including Condensed and Expanded. Because SF Symbols use equivalent weights, you can achieve precise weight matching between symbols and adjacent text, regardless of the size or style you choose.\n\nNote\n\nSF Symbols provides a comprehensive library of symbols that integrate seamlessly with the San Francisco system font, automatically aligning with text in all weights and sizes. Consider using symbols when you need to convey a concept or depict an object, especially within text.\n\nThe system defines a set of typographic attributes — called text styles — that work with both typeface families. A text style specifies a combination of font weight, point size, and leading values for each text size. For example, the body text style uses values that support a comfortable reading experience over multiple lines of text, while the headline style assigns a font size and weight that help distinguish a heading from surrounding content. Taken together, the text styles form a typographic hierarchy you can use to express the different levels of importance in your content. Text styles also allow text to scale proportionately when people change the system’s text size or make accessibility adjustments, like turning on Larger Text in Accessibility settings.\n\nConsider using the built-in text styles. The system-defined text styles give you a convenient and consistent way to convey your information hierarchy through font size and weight. Using text styles with the system fonts also supports Dynamic Type and the larger accessibility type sizes (where available), which let people choose the text size that works for them.\n\nModify the built-in text styles if necessary. System APIs define font adjustments — called symbolic traits — that let you modify some aspects of a text style. For example, the bold trait adds weight to text, letting you create another level of hierarchy. You can also use symbolic traits to adjust leading if you need to improve readability or conserve space. For example, when you display text in wide columns or long passages, more space between lines (loose leading) can make it easier for people to keep their place while moving from one line to the next. Conversely, if you need to display multiple lines of text in an area where height is constrained — for example, in a list row — decreasing the space between lines (tight leading) can help the text fit well. If you need to display three or more lines of text, avoid tight leading even in areas where height is limited. For developer guidance, see leading(_:).\n\nAdjust tracking as needed in interface mockups. In a running app, the system font dynamically adjusts tracking at every point size. To produce an accurate interface mockup of an interface that uses the variable system fonts, you don’t have to choose a discrete optical size at certain point sizes, but you might need to adjust the tracking. For guidance, see Specifications.\n\nDeveloper note\n\nYou can use the constants defined in Font.Design to access all system fonts — don’t embed system fonts in your app or game. For example, use Font.Design.default to get the system font on all platforms; use Font.Design.serif to get the New York font.\n\nUsing custom fonts\n\nMake sure custom fonts are legible. Unless your app has a compelling need for a custom font — such as for branding purposes or to create an immersive gaming experience — prefer the system fonts. If you do use a custom font, make sure people can read it easily at various viewing distances and under a variety of conditions.\n\nImplement accessibility features for custom fonts. System fonts automatically support Dynamic Type (where available) and respond when people turn on accessibility features, such as Bold Text. If you use a custom font, make sure it implements the same behaviors. For developer guidance, see Applying custom fonts to text.\n\nPlatform considerations\niOS, iPadOS\n\nSF Pro is the system font in iOS and iPadOS. iOS and iPadOS apps can also use NY.\n\nmacOS\n\nSF Pro is the system font in macOS. NY is available for Mac apps built with Mac Catalyst. macOS doesn’t support Dynamic Type.\n\nWhen necessary, use dynamic system font variants to match the text in standard controls. Dynamic system font variants give your text the same look and feel of the text that appears in system-provided controls. Use the variants listed below to achieve a look that’s consistent with other apps on the platform.\n\nDynamic font variant\n\n\t\n\nAPI\n\n\n\n\nControl content\n\n\t\n\ncontrolContentFont(ofSize:)\n\n\n\n\nLabel\n\n\t\n\nlabelFont(ofSize:)\n\n\n\n\nMenu\n\n\t\n\nmenuFont(ofSize:)\n\n\n\n\nMenu bar\n\n\t\n\nmenuBarFont(ofSize:)\n\n\n\n\nMessage\n\n\t\n\nmessageFont(ofSize:)\n\n\n\n\nPalette\n\n\t\n\npaletteFont(ofSize:)\n\n\n\n\nTitle\n\n\t\n\ntitleBarFont(ofSize:)\n\n\n\n\nTool tips\n\n\t\n\ntoolTipsFont(ofSize:)\n\n\n\n\nDocument text (user)\n\n\t\n\nuserFont(ofSize:)\n\n\n\n\nMonospaced document text (user fixed pitch)\n\n\t\n\nuserFixedPitchFont(ofSize:)\n\n\n\n\nBold system font\n\n\t\n\nboldSystemFont(ofSize:)\n\n\n\n\nSystem font\n\n\t\n\nsystemFont(ofSize:)\n\ntvOS\n\nSF Pro is the system font in tvOS, and apps can also use NY.\n\nvisionOS\n\nSF Pro is the system font in visionOS. If you use NY, you need to specify the type styles you want.\n\nvisionOS uses bolder versions of the Dynamic Type body and title styles and it introduces Extra Large Title 1 and Extra Large Title 2 for wide, editorial-style layouts. For guidance using vibrancy to indicate hierarchy in text and symbols, see Materials > visionOS.\n\nIn general, prefer 2D text. The more visual depth characters have, the more difficult they can be to read. Although a small amount of 3D text can provide a fun visual element that draws people’s attention, if you’re going to display content that people need to read and understand, prefer using text that has little or no visual depth.\n\nMake sure text looks good and remains legible when people scale it. Use a text style that makes the text look good at full scale, then test it for legibility at different scales.\n\nMaximize the contrast between text and the background of its container. By default, the system displays text in white, because this color tends to provide a strong contrast with the default system background material, making text easier to read. If you want to use a different text color, be sure to test it in a variety of contexts.\n\nIf you need to display text that’s not on a background, consider making it bold to improve legibility. In this situation, you generally want to avoid adding shadows to increase text contrast. The current space might not include a visual surface on which to cast an accurate shadow, and you can’t predict the size and density of shadow that would work well with a person’s current Environment.\n\nKeep text facing people as much as possible. If you display text that’s associated with a point in space, such as text that labels a 3D object, you generally want the text to face the wearer regardless of how they or the object move. For example, if you display a label that’s parallel to a visible line, you probably want the text to rotate around that line. If you display a label for a 3D object, you might want to make the label look like it’s printed on the object or parallel to its surface.\n\nwatchOS\n\nSF Compact is the system font in watchOS, and apps can also use NY. In complications, watchOS uses SF Compact Rounded.\n\nSpecifications\niOS, iPadOS Dynamic Type sizes\nxSmall\nSmall\nMedium\nLarge (Default)\nxLarge\nxxLarge\nxxxLarge\nxSmall\n\nStyle\n\n\t\n\nWeight\n\n\t\n\nSize (points)\n\n\t\n\nLeading (points)\n\n\n\n\nLarge Title\n\n\t\n\nRegular\n\n\t\n\n31\n\n\t\n\n38\n\n\n\n\nTitle 1\n\n\t\n\nRegular\n\n\t\n\n25\n\n\t\n\n31\n\n\n\n\nTitle 2\n\n\t\n\nRegular\n\n\t\n\n19\n\n\t\n\n24\n\n\n\n\nTitle 3\n\n\t\n\nRegular\n\n\t\n\n17\n\n\t\n\n22\n\n\n\n\nHeadline\n\n\t\n\nSemibold\n\n\t\n\n14\n\n\t\n\n19\n\n\n\n\nBody\n\n\t\n\nRegular\n\n\t\n\n14\n\n\t\n\n19\n\n\n\n\nCallout\n\n\t\n\nRegular\n\n\t\n\n13\n\n\t\n\n18\n\n\n\n\nSubhead\n\n\t\n\nRegular\n\n\t\n\n12\n\n\t\n\n16\n\n\n\n\nFootnote\n\n\t\n\nRegular\n\n\t\n\n12\n\n\t\n\n16\n\n\n\n\nCaption 1\n\n\t\n\nRegular\n\n\t\n\n11\n\n\t\n\n13\n\n\n\n\nCaption 2\n\n\t\n\nRegular\n\n\t\n\n11\n\n\t\n\n13\n\nPoint size based on image resolution of 144 ppi for @2x and 216 ppi for @3x designs.\n\niOS, iPadOS larger accessibility type sizes\nAX1\nAX2\nAX3\nAX4\nAX5\nAX1\n\nStyle\n\n\t\n\nWeight\n\n\t\n\nSize (points)\n\n\t\n\nLeading (points)\n\n\n\n\nLarge Title\n\n\t\n\nRegular\n\n\t\n\n44\n\n\t\n\n52\n\n\n\n\nTitle 1\n\n\t\n\nRegular\n\n\t\n\n38\n\n\t\n\n46\n\n\n\n\nTitle 2\n\n\t\n\nRegular\n\n\t\n\n34\n\n\t\n\n41\n\n\n\n\nTitle 3\n\n\t\n\nRegular\n\n\t\n\n31\n\n\t\n\n38\n\n\n\n\nHeadline\n\n\t\n\nSemibold\n\n\t\n\n28\n\n\t\n\n34\n\n\n\n\nBody\n\n\t\n\nRegular\n\n\t\n\n28\n\n\t\n\n34\n\n\n\n\nCallout\n\n\t\n\nRegular\n\n\t\n\n26\n\n\t\n\n32\n\n\n\n\nSubhead\n\n\t\n\nRegular\n\n\t\n\n25\n\n\t\n\n31\n\n\n\n\nFootnote\n\n\t\n\nRegular\n\n\t\n\n23\n\n\t\n\n29\n\n\n\n\nCaption 1\n\n\t\n\nRegular\n\n\t\n\n22\n\n\t\n\n28\n\n\n\n\nCaption 2\n\n\t\n\nRegular\n\n\t\n\n20\n\n\t\n\n25\n\nPoint size based on image resolution of 144 ppi for @2x and 216 ppi for @3x designs.\n\niOS, iPadOS, visionOS tracking values\nSF Pro\nSF Pro Rounded\nNew York\nSF Pro\n\nSize (points)\n\n\t\n\nTracking (1/1000em)\n\n\t\n\nTracking (points)\n\n\n\n\n6\n\n\t\n\n+41\n\n\t\n\n+0.24\n\n\n\n\n7\n\n\t\n\n+34\n\n\t\n\n+0.23\n\n\n\n\n8\n\n\t\n\n+26\n\n\t\n\n+0.21\n\n\n\n\n9\n\n\t\n\n+19\n\n\t\n\n+0.17\n\n\n\n\n10\n\n\t\n\n+12\n\n\t\n\n+0.12\n\n\n\n\n11\n\n\t\n\n+6\n\n\t\n\n+0.06\n\n\n\n\n12\n\n\t\n\n0\n\n\t\n\n0.0\n\n\n\n\n13\n\n\t\n\n-6\n\n\t\n\n-0.08\n\n\n\n\n14\n\n\t\n\n-11\n\n\t\n\n-0.15\n\n\n\n\n15\n\n\t\n\n-16\n\n\t\n\n-0.23\n\n\n\n\n16\n\n\t\n\n-20\n\n\t\n\n-0.31\n\n\n\n\n17\n\n\t\n\n-26\n\n\t\n\n-0.43\n\n\n\n\n18\n\n\t\n\n-25\n\n\t\n\n-0.44\n\n\n\n\n19\n\n\t\n\n-24\n\n\t\n\n-0.45\n\n\n\n\n20\n\n\t\n\n-23\n\n\t\n\n-0.45\n\n\n\n\n21\n\n\t\n\n-18\n\n\t\n\n-0.36\n\n\n\n\n22\n\n\t\n\n-12\n\n\t\n\n-0.26\n\n\n\n\n23\n\n\t\n\n-4\n\n\t\n\n-0.10\n\n\n\n\n24\n\n\t\n\n+3\n\n\t\n\n+0.07\n\n\n\n\n25\n\n\t\n\n+6\n\n\t\n\n+0.15\n\n\n\n\n26\n\n\t\n\n+8\n\n\t\n\n+0.22\n\n\n\n\n27\n\n\t\n\n+11\n\n\t\n\n+0.29\n\n\n\n\n28\n\n\t\n\n+14\n\n\t\n\n+0.38\n\n\n\n\n29\n\n\t\n\n+14\n\n\t\n\n+0.40\n\n\n\n\n30\n\n\t\n\n+14\n\n\t\n\n+0.40\n\n\n\n\n31\n\n\t\n\n+13\n\n\t\n\n+0.39\n\n\n\n\n32\n\n\t\n\n+13\n\n\t\n\n+0.41\n\n\n\n\n33\n\n\t\n\n+12\n\n\t\n\n+0.40\n\n\n\n\n34\n\n\t\n\n+12\n\n\t\n\n+0.40\n\n\n\n\n35\n\n\t\n\n+11\n\n\t\n\n+0.38\n\n\n\n\n36\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n37\n\n\t\n\n+10\n\n\t\n\n+0.36\n\n\n\n\n38\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n39\n\n\t\n\n+10\n\n\t\n\n+0.38\n\n\n\n\n40\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n41\n\n\t\n\n+9\n\n\t\n\n+0.36\n\n\n\n\n42\n\n\t\n\n+9\n\n\t\n\n+0.37\n\n\n\n\n43\n\n\t\n\n+9\n\n\t\n\n+0.38\n\n\n\n\n44\n\n\t\n\n+8\n\n\t\n\n+0.37\n\n\n\n\n45\n\n\t\n\n+8\n\n\t\n\n+0.35\n\n\n\n\n46\n\n\t\n\n+8\n\n\t\n\n+0.36\n\n\n\n\n47\n\n\t\n\n+8\n\n\t\n\n+0.37\n\n\n\n\n48\n\n\t\n\n+8\n\n\t\n\n+0.35\n\n\n\n\n49\n\n\t\n\n+7\n\n\t\n\n+0.33\n\n\n\n\n50\n\n\t\n\n+7\n\n\t\n\n+0.34\n\n\n\n\n51\n\n\t\n\n+7\n\n\t\n\n+0.35\n\n\n\n\n52\n\n\t\n\n+6\n\n\t\n\n+0.33\n\n\n\n\n53\n\n\t\n\n+6\n\n\t\n\n+0.31\n\n\n\n\n54\n\n\t\n\n+6\n\n\t\n\n+0.32\n\n\n\n\n56\n\n\t\n\n+6\n\n\t\n\n+0.30\n\n\n\n\n58\n\n\t\n\n+5\n\n\t\n\n+0.28\n\n\n\n\n60\n\n\t\n\n+4\n\n\t\n\n+0.26\n\n\n\n\n62\n\n\t\n\n+4\n\n\t\n\n+0.24\n\n\n\n\n64\n\n\t\n\n+4\n\n\t\n\n+0.22\n\n\n\n\n66\n\n\t\n\n+3\n\n\t\n\n+0.19\n\n\n\n\n68\n\n\t\n\n+2\n\n\t\n\n+0.17\n\n\n\n\n70\n\n\t\n\n+2\n\n\t\n\n+0.14\n\n\n\n\n72\n\n\t\n\n+2\n\n\t\n\n+0.14\n\n\n\n\n76\n\n\t\n\n+1\n\n\t\n\n+0.07\n\n\n\n\n80\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n84\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n88\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n92\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n96\n\n\t\n\n0\n\n\t\n\n0\n\nNot all apps express tracking values as 1/1000em. Point size based on image resolution of 144 ppi for @2x and 216 ppi for @3x designs.\n\nmacOS built-in text styles\n\nText style\n\n\t\n\nWeight\n\n\t\n\nSize (points)\n\n\t\n\nLine height (points)\n\n\t\n\nEmphasized weight\n\n\n\n\nLarge Title\n\n\t\n\nRegular\n\n\t\n\n26\n\n\t\n\n32\n\n\t\n\nBold\n\n\n\n\nTitle 1\n\n\t\n\nRegular\n\n\t\n\n22\n\n\t\n\n26\n\n\t\n\nBold\n\n\n\n\nTitle 2\n\n\t\n\nRegular\n\n\t\n\n17\n\n\t\n\n22\n\n\t\n\nBold\n\n\n\n\nTitle 3\n\n\t\n\nRegular\n\n\t\n\n15\n\n\t\n\n20\n\n\t\n\nSemibold\n\n\n\n\nHeadline\n\n\t\n\nBold\n\n\t\n\n13\n\n\t\n\n16\n\n\t\n\nHeavy\n\n\n\n\nBody\n\n\t\n\nRegular\n\n\t\n\n13\n\n\t\n\n16\n\n\t\n\nSemibold\n\n\n\n\nCallout\n\n\t\n\nRegular\n\n\t\n\n12\n\n\t\n\n15\n\n\t\n\nSemibold\n\n\n\n\nSubheadline\n\n\t\n\nRegular\n\n\t\n\n11\n\n\t\n\n14\n\n\t\n\nSemibold\n\n\n\n\nFootnote\n\n\t\n\nRegular\n\n\t\n\n10\n\n\t\n\n13\n\n\t\n\nSemibold\n\n\n\n\nCaption 1\n\n\t\n\nRegular\n\n\t\n\n10\n\n\t\n\n13\n\n\t\n\nMedium\n\n\n\n\nCaption 2\n\n\t\n\nMedium\n\n\t\n\n10\n\n\t\n\n13\n\n\t\n\nSemibold\n\nPoint size based on image resolution of 144 ppi for @2x designs.\n\nmacOS tracking values\n\nSize (points)\n\n\t\n\nTracking (1/1000em)\n\n\t\n\nTracking (points)\n\n\n\n\n6\n\n\t\n\n+41\n\n\t\n\n+0.24\n\n\n\n\n7\n\n\t\n\n+34\n\n\t\n\n+0.23\n\n\n\n\n8\n\n\t\n\n+26\n\n\t\n\n+0.21\n\n\n\n\n9\n\n\t\n\n+19\n\n\t\n\n+0.17\n\n\n\n\n10\n\n\t\n\n+12\n\n\t\n\n+0.12\n\n\n\n\n11\n\n\t\n\n+6\n\n\t\n\n+0.06\n\n\n\n\n12\n\n\t\n\n0\n\n\t\n\n0.0\n\n\n\n\n13\n\n\t\n\n-6\n\n\t\n\n-0.08\n\n\n\n\n14\n\n\t\n\n-11\n\n\t\n\n-0.15\n\n\n\n\n15\n\n\t\n\n-16\n\n\t\n\n-0.23\n\n\n\n\n16\n\n\t\n\n-20\n\n\t\n\n-0.31\n\n\n\n\n17\n\n\t\n\n-26\n\n\t\n\n-0.43\n\n\n\n\n18\n\n\t\n\n-25\n\n\t\n\n-0.44\n\n\n\n\n19\n\n\t\n\n-24\n\n\t\n\n-0.45\n\n\n\n\n20\n\n\t\n\n-23\n\n\t\n\n-0.45\n\n\n\n\n21\n\n\t\n\n-18\n\n\t\n\n-0.36\n\n\n\n\n22\n\n\t\n\n-12\n\n\t\n\n-0.26\n\n\n\n\n23\n\n\t\n\n-4\n\n\t\n\n-0.10\n\n\n\n\n24\n\n\t\n\n+3\n\n\t\n\n+0.07\n\n\n\n\n25\n\n\t\n\n+6\n\n\t\n\n+0.15\n\n\n\n\n26\n\n\t\n\n+8\n\n\t\n\n+0.22\n\n\n\n\n27\n\n\t\n\n+11\n\n\t\n\n+0.29\n\n\n\n\n28\n\n\t\n\n+14\n\n\t\n\n+0.38\n\n\n\n\n29\n\n\t\n\n+14\n\n\t\n\n+0.40\n\n\n\n\n30\n\n\t\n\n+14\n\n\t\n\n+0.40\n\n\n\n\n31\n\n\t\n\n+13\n\n\t\n\n+0.39\n\n\n\n\n32\n\n\t\n\n+13\n\n\t\n\n+0.41\n\n\n\n\n33\n\n\t\n\n+12\n\n\t\n\n+0.40\n\n\n\n\n34\n\n\t\n\n+12\n\n\t\n\n+0.40\n\n\n\n\n35\n\n\t\n\n+11\n\n\t\n\n+0.38\n\n\n\n\n36\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n37\n\n\t\n\n+10\n\n\t\n\n+0.36\n\n\n\n\n38\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n39\n\n\t\n\n+10\n\n\t\n\n+0.38\n\n\n\n\n40\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n41\n\n\t\n\n+9\n\n\t\n\n+0.36\n\n\n\n\n42\n\n\t\n\n+9\n\n\t\n\n+0.37\n\n\n\n\n43\n\n\t\n\n+9\n\n\t\n\n+0.38\n\n\n\n\n44\n\n\t\n\n+8\n\n\t\n\n+0.37\n\n\n\n\n45\n\n\t\n\n+8\n\n\t\n\n+0.35\n\n\n\n\n46\n\n\t\n\n+8\n\n\t\n\n+0.36\n\n\n\n\n47\n\n\t\n\n+8\n\n\t\n\n+0.37\n\n\n\n\n48\n\n\t\n\n+8\n\n\t\n\n+0.35\n\n\n\n\n49\n\n\t\n\n+7\n\n\t\n\n+0.33\n\n\n\n\n50\n\n\t\n\n+7\n\n\t\n\n+0.34\n\n\n\n\n51\n\n\t\n\n+7\n\n\t\n\n+0.35\n\n\n\n\n52\n\n\t\n\n+6\n\n\t\n\n+0.31\n\n\n\n\n53\n\n\t\n\n+6\n\n\t\n\n+0.33\n\n\n\n\n54\n\n\t\n\n+6\n\n\t\n\n+0.32\n\n\n\n\n56\n\n\t\n\n+6\n\n\t\n\n+0.30\n\n\n\n\n58\n\n\t\n\n+5\n\n\t\n\n+0.28\n\n\n\n\n60\n\n\t\n\n+4\n\n\t\n\n+0.26\n\n\n\n\n62\n\n\t\n\n+4\n\n\t\n\n+0.24\n\n\n\n\n64\n\n\t\n\n+4\n\n\t\n\n+0.22\n\n\n\n\n66\n\n\t\n\n+3\n\n\t\n\n+0.19\n\n\n\n\n68\n\n\t\n\n+2\n\n\t\n\n+0.17\n\n\n\n\n70\n\n\t\n\n+2\n\n\t\n\n+0.14\n\n\n\n\n72\n\n\t\n\n+2\n\n\t\n\n+0.14\n\n\n\n\n76\n\n\t\n\n+1\n\n\t\n\n+0.07\n\n\n\n\n80\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n84\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n88\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n92\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n96\n\n\t\n\n0\n\n\t\n\n0\n\nNot all apps express tracking values as 1/1000em. Point size based on image resolution of 144 ppi for @2x and 216 ppi for @3x designs.\n\ntvOS built-in text styles\n\nText style\n\n\t\n\nWeight\n\n\t\n\nSize (points)\n\n\t\n\nLeading (points)\n\n\t\n\nEmphasized weight\n\n\n\n\nTitle 1\n\n\t\n\nMedium\n\n\t\n\n76\n\n\t\n\n96\n\n\t\n\nBold\n\n\n\n\nTitle 2\n\n\t\n\nMedium\n\n\t\n\n57\n\n\t\n\n66\n\n\t\n\nBold\n\n\n\n\nTitle 3\n\n\t\n\nMedium\n\n\t\n\n48\n\n\t\n\n56\n\n\t\n\nBold\n\n\n\n\nHeadline\n\n\t\n\nMedium\n\n\t\n\n38\n\n\t\n\n46\n\n\t\n\nBold\n\n\n\n\nSubtitle 1\n\n\t\n\nRegular\n\n\t\n\n38\n\n\t\n\n46\n\n\t\n\nMedium\n\n\n\n\nCallout\n\n\t\n\nMedium\n\n\t\n\n31\n\n\t\n\n38\n\n\t\n\nBold\n\n\n\n\nBody\n\n\t\n\nMedium\n\n\t\n\n29\n\n\t\n\n36\n\n\t\n\nBold\n\n\n\n\nCaption 1\n\n\t\n\nRegular\n\n\t\n\n25\n\n\t\n\n32\n\n\t\n\nMedium\n\n\n\n\nCaption 2\n\n\t\n\nMedium\n\n\t\n\n23\n\n\t\n\n30\n\n\t\n\nBold\n\nPoint size based on image resolution of 72 ppi for @1x and 144 ppi for @2x designs.\n\ntvOS tracking values\n\nSize (points)\n\n\t\n\nTracking (1/1000em)\n\n\t\n\nTracking (points)\n\n\n\n\n6\n\n\t\n\n+41\n\n\t\n\n+0.24\n\n\n\n\n7\n\n\t\n\n+34\n\n\t\n\n+0.23\n\n\n\n\n8\n\n\t\n\n+26\n\n\t\n\n+0.21\n\n\n\n\n9\n\n\t\n\n+19\n\n\t\n\n+0.17\n\n\n\n\n10\n\n\t\n\n+12\n\n\t\n\n+0.12\n\n\n\n\n11\n\n\t\n\n+6\n\n\t\n\n+0.06\n\n\n\n\n12\n\n\t\n\n0\n\n\t\n\n0.0\n\n\n\n\n13\n\n\t\n\n-6\n\n\t\n\n-0.08\n\n\n\n\n14\n\n\t\n\n-11\n\n\t\n\n-0.15\n\n\n\n\n15\n\n\t\n\n-16\n\n\t\n\n-0.23\n\n\n\n\n16\n\n\t\n\n-20\n\n\t\n\n-0.31\n\n\n\n\n17\n\n\t\n\n-26\n\n\t\n\n-0.43\n\n\n\n\n18\n\n\t\n\n-25\n\n\t\n\n-0.44\n\n\n\n\n19\n\n\t\n\n-24\n\n\t\n\n-0.45\n\n\n\n\n20\n\n\t\n\n-23\n\n\t\n\n-0.45\n\n\n\n\n21\n\n\t\n\n-18\n\n\t\n\n-0.36\n\n\n\n\n22\n\n\t\n\n-12\n\n\t\n\n-0.26\n\n\n\n\n23\n\n\t\n\n-4\n\n\t\n\n-0.10\n\n\n\n\n24\n\n\t\n\n+3\n\n\t\n\n+0.07\n\n\n\n\n25\n\n\t\n\n+6\n\n\t\n\n+0.15\n\n\n\n\n26\n\n\t\n\n+8\n\n\t\n\n+0.22\n\n\n\n\n27\n\n\t\n\n+11\n\n\t\n\n+0.29\n\n\n\n\n28\n\n\t\n\n+14\n\n\t\n\n+0.38\n\n\n\n\n29\n\n\t\n\n+14\n\n\t\n\n+0.40\n\n\n\n\n30\n\n\t\n\n+14\n\n\t\n\n+0.40\n\n\n\n\n31\n\n\t\n\n+13\n\n\t\n\n+0.39\n\n\n\n\n32\n\n\t\n\n+13\n\n\t\n\n+0.41\n\n\n\n\n33\n\n\t\n\n+12\n\n\t\n\n+0.40\n\n\n\n\n34\n\n\t\n\n+12\n\n\t\n\n+0.40\n\n\n\n\n35\n\n\t\n\n+11\n\n\t\n\n+0.38\n\n\n\n\n36\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n37\n\n\t\n\n+10\n\n\t\n\n+0.36\n\n\n\n\n38\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n39\n\n\t\n\n+10\n\n\t\n\n+0.38\n\n\n\n\n40\n\n\t\n\n+10\n\n\t\n\n+0.37\n\n\n\n\n41\n\n\t\n\n+9\n\n\t\n\n+0.36\n\n\n\n\n42\n\n\t\n\n+9\n\n\t\n\n+0.37\n\n\n\n\n43\n\n\t\n\n+9\n\n\t\n\n+0.38\n\n\n\n\n44\n\n\t\n\n+8\n\n\t\n\n+0.37\n\n\n\n\n45\n\n\t\n\n+8\n\n\t\n\n+0.35\n\n\n\n\n46\n\n\t\n\n+8\n\n\t\n\n+0.36\n\n\n\n\n47\n\n\t\n\n+8\n\n\t\n\n+0.37\n\n\n\n\n48\n\n\t\n\n+8\n\n\t\n\n+0.35\n\n\n\n\n49\n\n\t\n\n+7\n\n\t\n\n+0.33\n\n\n\n\n50\n\n\t\n\n+7\n\n\t\n\n+0.34\n\n\n\n\n51\n\n\t\n\n+7\n\n\t\n\n+0.35\n\n\n\n\n52\n\n\t\n\n+6\n\n\t\n\n+0.31\n\n\n\n\n53\n\n\t\n\n+6\n\n\t\n\n+0.33\n\n\n\n\n54\n\n\t\n\n+6\n\n\t\n\n+0.32\n\n\n\n\n56\n\n\t\n\n+6\n\n\t\n\n+0.30\n\n\n\n\n58\n\n\t\n\n+5\n\n\t\n\n+0.28\n\n\n\n\n60\n\n\t\n\n+4\n\n\t\n\n+0.26\n\n\n\n\n62\n\n\t\n\n+4\n\n\t\n\n+0.24\n\n\n\n\n64\n\n\t\n\n+4\n\n\t\n\n+0.22\n\n\n\n\n66\n\n\t\n\n+3\n\n\t\n\n+0.19\n\n\n\n\n68\n\n\t\n\n+2\n\n\t\n\n+0.17\n\n\n\n\n70\n\n\t\n\n+2\n\n\t\n\n+0.14\n\n\n\n\n72\n\n\t\n\n+2\n\n\t\n\n+0.14\n\n\n\n\n76\n\n\t\n\n+1\n\n\t\n\n+0.07\n\n\n\n\n80\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n84\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n88\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n92\n\n\t\n\n0\n\n\t\n\n0\n\n\n\n\n96\n\n\t\n\n0\n\n\t\n\n0\n\nNot all apps express tracking values as 1/1000em. Point size based on image resolution of 144 ppi for @2x and 216 ppi for @3x designs.\n\nwatchOS Dynamic Type sizes\nxSmall\nSmall\nLarge\nxLarge\nxxLarge\nxxxLarge\nxSmall\n\nStyle\n\n\t\n\nWeight\n\n\t\n\nSize (points)\n\n\t\n\nLeading (points)\n\n\n\n\nLarge Title\n\n\t\n\nRegular\n\n\t\n\n30\n\n\t\n\n32.5\n\n\n\n\nTitle 1\n\n\t\n\nRegular\n\n\t\n\n28\n\n\t\n\n30.5\n\n\n\n\nTitle 2\n\n\t\n\nRegular\n\n\t\n\n24\n\n\t\n\n26.5\n\n\n\n\nTitle 3\n\n\t\n\nRegular\n\n\t\n\n17\n\n\t\n\n19.5\n\n\n\n\nHeadline\n\n\t\n\nSemibold\n\n\t\n\n14\n\n\t\n\n16.5\n\n\n\n\nBody\n\n\t\n\nRegular\n\n\t\n\n14\n\n\t\n\n16.5\n\n\n\n\nCaption 1\n\n\t\n\nRegular\n\n\t\n\n13\n\n\t\n\n15.5\n\n\n\n\nCaption 2\n\n\t\n\nRegular\n\n\t\n\n12\n\n\t\n\n14.5\n\n\n\n\nFootnote 1\n\n\t\n\nRegular\n\n\t\n\n11\n\n\t\n\n13.5\n\n\n\n\nFootnote 2\n\n\t\n\nRegular\n\n\t\n\n10\n\n\t\n\n12.5\n\nwatchOS larger accessibility type sizes\nAX1\nAX2\nAX3\nAX1\n\nStyle\n\n\t\n\nWeight\n\n\t\n\nSize (points)\n\n\t\n\nLeading (points)\n\n\n\n\nLarge Title\n\n\t\n\nRegular\n\n\t\n\n44\n\n\t\n\n46.5\n\n\n\n\nTitle 1\n\n\t\n\nRegular\n\n\t\n\n42\n\n\t\n\n44.5\n\n\n\n\nTitle 2\n\n\t\n\nRegular\n\n\t\n\n34\n\n\t\n\n41\n\n\n\n\nTitle 3\n\n\t\n\nRegular\n\n\t\n\n24\n\n\t\n\n26.5\n\n\n\n\nHeadline\n\n\t\n\nSemibold\n\n\t\n\n21\n\n\t\n\n23.5\n\n\n\n\nBody\n\n\t\n\nRegular\n\n\t\n\n21\n\n\t\n\n23.5\n\n\n\n\nCaption 1\n\n\t\n\nRegular\n\n\t\n\n18\n\n\t\n\n20.5\n\n\n\n\nCaption 2\n\n\t\n\nRegular\n\n\t\n\n17\n\n\t\n\n19.5\n\n\n\n\nFootnote 1\n\n\t\n\nRegular\n\n\t\n\n16\n\n\t\n\n18.5\n\n\n\n\nFootnote 2\n\n\t\n\nRegular\n\n\t\n\n15\n\n\t\n\n17.5\n\nwatchOS tracking values\nSF Compact\nSF Compact Rounded\nSF Compact\n\nSize (points)\n\n\t\n\nTracking (1/1000em)\n\n\t\n\nTracking (points)\n\n\n\n\n6\n\n\t\n\n+50\n\n\t\n\n+0.29\n\n\n\n\n7\n\n\t\n\n+30\n\n\t\n\n+0.21\n\n\n\n\n8\n\n\t\n\n+30\n\n\t\n\n+0.23\n\n\n\n\n9\n\n\t\n\n+30\n\n\t\n\n+0.26\n\n\n\n\n10\n\n\t\n\n+30\n\n\t\n\n+0.29\n\n\n\n\n11\n\n\t\n\n+24\n\n\t\n\n+0.26\n\n\n\n\n12\n\n\t\n\n+20\n\n\t\n\n+0.23\n\n\n\n\n13\n\n\t\n\n+16\n\n\t\n\n+0.20\n\n\n\n\n14\n\n\t\n\n+14\n\n\t\n\n+0.19\n\n\n\n\n15\n\n\t\n\n+4\n\n\t\n\n+0.06\n\n\n\n\n16\n\n\t\n\n0\n\n\t\n\n0.00\n\n\n\n\n17\n\n\t\n\n-4\n\n\t\n\n-0.07\n\n\n\n\n18\n\n\t\n\n-8\n\n\t\n\n-0.14\n\n\n\n\n19\n\n\t\n\n-12\n\n\t\n\n-0.22\n\n\n\n\n20\n\n\t\n\n0\n\n\t\n\n0.00\n\n\n\n\n21\n\n\t\n\n-2\n\n\t\n\n-0.04\n\n\n\n\n22\n\n\t\n\n-4\n\n\t\n\n-0.09\n\n\n\n\n23\n\n\t\n\n-6\n\n\t\n\n-0.13\n\n\n\n\n24\n\n\t\n\n-8\n\n\t\n\n-0.19\n\n\n\n\n25\n\n\t\n\n-10\n\n\t\n\n-0.24\n\n\n\n\n26\n\n\t\n\n-11\n\n\t\n\n-0.28\n\n\n\n\n27\n\n\t\n\n-12\n\n\t\n\n-0.30\n\n\n\n\n28\n\n\t\n\n-12\n\n\t\n\n-0.34\n\n\n\n\n29\n\n\t\n\n-14\n\n\t\n\n-0.38\n\n\n\n\n30\n\n\t\n\n-14\n\n\t\n\n-0.42\n\n\n\n\n31\n\n\t\n\n-15\n\n\t\n\n-0.45\n\n\n\n\n32\n\n\t\n\n-16\n\n\t\n\n-0.50\n\n\n\n\n33\n\n\t\n\n-17\n\n\t\n\n-0.55\n\n\n\n\n34\n\n\t\n\n-18\n\n\t\n\n-0.60\n\n\n\n\n35\n\n\t\n\n-18\n\n\t\n\n-0.63\n\n\n\n\n36\n\n\t\n\n-20\n\n\t\n\n-0.69\n\n\n\n\n37\n\n\t\n\n-20\n\n\t\n\n-0.72\n\n\n\n\n38\n\n\t\n\n-20\n\n\t\n\n-0.74\n\n\n\n\n39\n\n\t\n\n-20\n\n\t\n\n-0.76\n\n\n\n\n40\n\n\t\n\n-20\n\n\t\n\n-0.78\n\n\n\n\n41\n\n\t\n\n-20\n\n\t\n\n-0.80\n\n\n\n\n42\n\n\t\n\n-20\n\n\t\n\n-0.82\n\n\n\n\n43\n\n\t\n\n-20\n\n\t\n\n-0.84\n\n\n\n\n44\n\n\t\n\n-20\n\n\t\n\n-0.86\n\n\n\n\n45\n\n\t\n\n-20\n\n\t\n\n-0.88\n\n\n\n\n46\n\n\t\n\n-20\n\n\t\n\n-0.92\n\n\n\n\n47\n\n\t\n\n-20\n\n\t\n\n-0.94\n\n\n\n\n48\n\n\t\n\n-20\n\n\t\n\n-0.96\n\n\n\n\n49\n\n\t\n\n-21\n\n\t\n\n-1.00\n\n\n\n\n50\n\n\t\n\n-21\n\n\t\n\n-1.03\n\n\n\n\n51\n\n\t\n\n-21\n\n\t\n\n-1.05\n\n\n\n\n52\n\n\t\n\n-21\n\n\t\n\n-1.07\n\n\n\n\n53\n\n\t\n\n-22\n\n\t\n\n-1.11\n\n\n\n\n54\n\n\t\n\n-22\n\n\t\n\n-1.13\n\n\n\n\n56\n\n\t\n\n-22\n\n\t\n\n-1.20\n\n\n\n\n58\n\n\t\n\n-22\n\n\t\n\n-1.25\n\n\n\n\n60\n\n\t\n\n-22\n\n\t\n\n-1.32\n\n\n\n\n62\n\n\t\n\n-22\n\n\t\n\n-1.36\n\n\n\n\n64\n\n\t\n\n-23\n\n\t\n\n-1.44\n\n\n\n\n66\n\n\t\n\n-24\n\n\t\n\n-1.51\n\n\n\n\n68\n\n\t\n\n-24\n\n\t\n\n-1.56\n\n\n\n\n70\n\n\t\n\n-24\n\n\t\n\n-1.64\n\n\n\n\n72\n\n\t\n\n-24\n\n\t\n\n-1.69\n\n\n\n\n76\n\n\t\n\n-25\n\n\t\n\n-1.86\n\n\n\n\n80\n\n\t\n\n-26\n\n\t\n\n-1.99\n\n\n\n\n84\n\n\t\n\n-26\n\n\t\n\n-2.13\n\n\n\n\n88\n\n\t\n\n-26\n\n\t\n\n-2.28\n\n\n\n\n92\n\n\t\n\n-28\n\n\t\n\n-2.47\n\n\n\n\n96\n\n\t\n\n-28\n\n\t\n\n-2.62\n\nNot all apps express tracking values as 1/1000em. Point size based on image resolution of 144 ppi for @2x designs.\n\nResources\nRelated\n\nFonts\n\nSF Symbols\n\nDeveloper documentation\n\nFont — SwiftUI\n\nUIFont — UIKit\n\nNSFont — AppKit\n\nVideos\nMeet the expanded San Francisco font family\nMeet TextKit 2\nThe details of UI typography\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nAdded artwork illustrating system font weights, and clarified tvOS specification table descriptions.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "ID Verifier",
    "url": "https://developer.apple.com/design/human-interface-guidelines/id-verifier",
    "html": "ID Verifier\nID Verifier lets your iPhone app read mobile IDs in person without requiring external hardware.\n\nBeginning in iOS 17, you can integrate ID Verifier into your app, letting iPhone read ISO18013-5 compliant mobile IDs and helping you support in-person ID verification. For example, personnel at a concert venue can use your app on iPhone to verify customers’ ages.\n\nUsing ID Verifier has advantages for both customers and organizations.\n\nCustomers only present the minimum data needed to prove their age or identity, without handing over their ID card or showing their device.\n\nApple provides the key components of the certificate issuance, management, and validation process, simplifying app development and enabling a consistent and trusted ID verification experience.\n\nDepending on the needs of your app, you can use ID Verifier to make the following types of requests:\n\nDisplay Only request. Use a Display Only request to display data — such as a person’s name or age alongside their photo portrait — within system-provided UI on the requester’s iPhone, so the requester can visually confirm the person’s identity. When you make a Display Only request, the customer’s data remains within the system-provided UI and isn’t transmitted to your app. For developer guidance, see MobileDriversLicenseDisplayRequest.\n\nData Transfer request. Use a Data Transfer request only when you have a legal verification requirement and you need to store or process information like a person’s address or date of birth. You must request an additional entitlement to make a Data Transfer request. For developer guidance, see MobileDriversLicenseDataRequest and MobileDriversLicenseRawDataRequest.\n\nBest practices\n\nAsk only for the data you need. People may lose trust in the experience if you ask for more data than you need to complete the current verification. For example, if you need to ensure that a customer is at least a minimum age, use a request that specifies an age threshold; avoid requesting the customer’s current age or birth date. For developer guidance, see ageAtLeast(_:).\n\nIf your app qualifies for Apple Business Register, register for ID Verifier to ensure that people can view essential information about your organization when you make a request. Registering for ID Verifier with Apple Business Register lets you provide your official organization name and logo for the system to display on customers’ devices as part of the ID verification UI. To learn if your app qualifies and how to register, see Apple Business Register.\n\nProvide a button that initiates the verification process. Use a label like Verify Age in a button that performs a simple age check or Verify Identity for a more detailed identity data request. Avoid including a symbol that specifies a particular type of communication, like NFC or QR codes. Never include the Apple logo in any button label.\n\nButton type\n\n\t\n\nExample usage\n\n\n\n\n\t\n\nAn app that checks whether people are old enough to attend an event or access a venue, like a concert hall.\n\n\n\n\n\t\n\nAn app that verifies whether specific identity information matches expected values, such as name and birth date when picking up a rental car.\n\nIn a Display Only request, help the person using your app provide feedback on the visual confirmation they perform. For example, when the reader displays the customer’s portrait, you might provide buttons labeled Matches Person and Doesn’t Match Person so your app can receive an approved or rejected value as part of the response.\n\nPlatform considerations\n\nNo additional considerations for iOS. Not supported in iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nApple Business Register\n\nIDs in Wallet\n\nIdentity verification\n\nDeveloper documentation\n\nAdopting the Verifier API in your iPhone app — ProximityReader\n\nVideos\nWhat’s new in Wallet and Apple Pay\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nNew page."
  },
  {
    "title": "Pull-down buttons",
    "url": "https://developer.apple.com/design/human-interface-guidelines/pull-down-buttons",
    "html": "Pull-down buttons\nA pull-down button displays a menu of items or actions that directly relate to the button’s purpose.\n\nAfter people choose an item in a pull-down button’s menu, the menu closes, and the app performs the chosen action.\n\nBest practices\n\nUse a pull-down button to present commands or items that are directly related to the button’s action. The menu lets you help people clarify the button’s target or customize its behavior without requiring additional buttons in your interface. For example:\n\nAn Add button could present a menu that lets people specify the item they want to add.\n\nA Sort button could use a menu to let people select an attribute on which to sort.\n\nA Back button could let people choose a specific location to revisit instead of opening the previous one.\n\nIf you need to provide a list of mutually exclusive choices that aren’t commands, use a pop-up button instead.\n\nAvoid putting all of a view’s actions in one pull-down button. A view’s primary actions need to be easily discoverable, so you don’t want to hide them in a pull-down button that people have to open before they can do anything.\n\nBalance menu length with ease of use. Because people have to interact with a pull-down button before they can view its menu, listing a minimum of three items can help the interaction feel worthwhile. If you need to list only one or two items, consider using alternative components to present them, such as buttons to perform actions and toggles or switches to present selections. In contrast, listing too many items in a pull-down button’s menu can slow people down because it takes longer to find a specific item.\n\nDisplay a succinct menu title only if it adds meaning. In general, a pull-down button’s content — combined with descriptive menu items — provides all the context people need, making a menu title unnecessary.\n\nLet people know when a pull-down button’s menu item is destructive, and ask them to confirm their intent. Menus use red text to highlight actions that you identify as potentially destructive. When people choose a destructive action, the system displays an action sheet (iOS) or popover (iPadOS) in which they can confirm their choice or cancel the action. Because an action sheet appears in a different location from the menu and requires deliberate dismissal, it can help people avoid losing data by mistake.\n\nInclude an interface icon with a menu item when it provides value. If you need to clarify an item’s meaning, you can display an icon or image after its label. Using SF Symbols for this purpose can help you provide a familiar experience while ensuring that the symbol remains aligned with the text at every scale.\n\nPlatform considerations\n\nNo additional considerations for macOS or visionOS. Not supported in tvOS or watchOS.\n\niOS, iPadOS\n\nNote\n\nYou can also let people reveal a pull-down menu by performing a specific gesture on a button. For example, in iOS 14 and later, Safari responds to a touch and hold gesture on the Tabs button by displaying a menu of tab-related actions, like New Tab and Close All Tabs.\n\nConsider using a More pull-down button to present items that don’t need prominent positions in the main interface. A More button can help you offer a range of items where space is constrained, but it can also hinder discoverability. Although people generally understand that a More button offers additional functionality related to the current context, the ellipsis icon doesn’t necessarily help them predict its contents. To design an effective More button, weigh the convenience of its size against its impact on discoverability to find a balance that works in your app. Create a More button by using the ellipsis.circle symbol.\n\nResources\nRelated\n\nPop-up buttons\n\nButtons\n\nMenus\n\nDeveloper documentation\n\nMenuPickerStyle — SwiftUI\n\nshowsMenuAsPrimaryAction — UIKit\n\npullsDown — AppKit\n\nVideos\nMeet the UIKit button system\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nRefined guidance on designing a useful menu length."
  },
  {
    "title": "Gauges",
    "url": "https://developer.apple.com/design/human-interface-guidelines/gauges",
    "html": "Gauges\nA gauge displays a specific numerical value within a range of values.\n\nIn addition to indicating the current value in a range, a gauge can provide more context about the range itself. For example, a temperature gauge can use text to identify the highest and lowest temperatures in the range and display a spectrum of colors that visually reinforce the changing values.\n\nAnatomy\n\nA gauge uses a circular or linear path to represent a range of values, mapping the current value to a specific point on the path. A standard gauge displays an indicator that shows the current value’s location; a gauge that uses the capacity style displays a fill that stops at the value’s location on the path.\n\nCircular and linear gauges in both standard and capacity styles are also available in a variant that’s visually similar to watchOS complications. This variant — called accessory — works well in iOS Lock Screen widgets and anywhere you want to echo the appearance of complications.\n\nNote\n\nIn addition to gauges, macOS also supports level indicators, some of which have visual styles that are similar to gauges. For guidance, see macOS.\n\nBest practices\n\nWrite succinct labels that describe the current value and both endpoints of the range. Although not every gauge style displays all labels, VoiceOver reads the visible labels to help people understand the gauge without seeing the screen.\n\nConsider filling the path with a gradient to help communicate the purpose of the gauge. For example, a temperature gauge might use colors that range from red to blue to represent temperatures that range from hot to cold.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, visionOS, or watchOS. Not supported in tvOS.\n\nmacOS\n\nIn addition to supporting gauges, macOS also defines a level indicator that displays a specific numerical value within a range. You can configure a level indicator to convey capacity, rating, or — rarely — relevance.\n\nThe capacity style can depict discrete or continuous values.\n\nContinuous. A horizontal translucent track that fills with a solid bar to indicate the current value.\n\nDiscrete. A horizontal row of separate, equally sized, rectangular segments. The number of segments matches the total capacity, and the segments fill completely — never partially — with color to indicate the current value.\n\nConsider using the continuous style for large ranges. A large value range can make the segments of a discrete capacity indicator too small to be useful.\n\nConsider changing the fill color to inform people about significant parts of the range. By default, the fill color for both capacity indicator styles is green. If it makes sense in your app, you can change the fill color when the current value reaches certain levels, such as very low, very high, or just past the middle. You can change the fill color of the entire indicator or you can use the tiered state to show a sequence of several colors in one indicator, as shown below.\n\nTiered level appearance\n\nFor guidance using the rating style to help people rank something, see Rating indicators.\n\nAlthough rarely used, the relevance style can communicate relevancy using a shaded horizontal bar. For example, a relevance indicator might appear in a list of search results, helping people visualize the relevancy of the results when sorting or comparing multiple items.\n\nResources\nRelated\n\nRatings and reviews\n\nDeveloper documentation\n\nGauge — SwiftUI\n\nNSLevelIndicator — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 23, 2022\n\n\t\n\nNew page."
  },
  {
    "title": "Eyes",
    "url": "https://developer.apple.com/design/human-interface-guidelines/eyes",
    "html": "Eyes\nIn visionOS, people look at a virtual object to identify it as a target they can interact with.\n\nWhen people look at an interactive object, visionOS highlights it, providing visual feedback that helps them confirm the object is one they want. The visual feedback, or hover effect, shows people that they can use an indirect gesture like tap to interact with the object. For example, people can return to the previous webpage in Safari by looking at the Back button and then tapping. Similarly, people can look at an individual photo in their Photos library and tap to open it.\n\nIn rare cases, the system can automatically display an expanded view of a component after people look at it. For example, when people look at a tab bar, the entire bar resizes to reveal text labels next to each tab. In this scenario, an individual tab also highlights before the tab bar expansion to let people select it before revealing the labels. A system-provided button can also reveal a tooltip when people look at it.\n\nImportant\n\nTo help preserve people’s privacy, visionOS doesn’t provide direct information about where people are looking before they tap. When you use system-provided components, visionOS automatically tells you when people tap the component. For developer guidance, see Adopting best practices for privacy and user preferences.\n\nvisionOS also supports focus effects that help people navigate apps and the system using a connected input device like a keyboard or game controller. Focus effects are unrelated to the hover effect; to learn more, see Focus and selection.\n\nBest practices\n\nAlways give people multiple ways to interact with your app. Design your app to support the accessibility features people use to personalize the ways they interact with their devices. For guidance, see Accessibility.\n\nDesign for visual comfort. Help people accomplish their primary task by making sure that the objects they need to use are within their field of view. When your app is running in the Shared Space, the system automatically places windows and volumes in convenient locations; if your app is running in a Full Space, you may need to request access to information about a person’s head pose to help you place app content appropriately. You can also improve the visual comfort of your experience when you avoid requiring people to make multiple quick eye adjustments, either over a large area or through multiple levels of depth. For guidance, see Depth.\n\nPlace content at a comfortable viewing distance. For example, to help people remain comfortable while they read or engage with content over time, aim to place it at least one meter away. In general, you don’t want to place content very close to people unless they’ll view or interact with it for only a little while.\n\nMake it easy for people to look at an item by providing enough space around it. Because eyes naturally tend to make small, quick adjustments in direction even while people are looking at one place, crowding UI objects together can make it difficult for people to look at one of them without jumping to another. You can help ensure that there’s enough space between interactive items by using a margin of at least 16 points around the bounds of each item or by placing items so that their centers are always at least 60 points apart. For additional layout guidance, see Layout and Spatial layout.\n\nConsider using subtle visual cues to encourage people to look at the item they’re most likely to want. For example, it often works well to place the item near the center of the field of view or use techniques like gentle motion, increased contrast, or variations in color or scale to draw people’s attention. In general, prefer cues that are noticeable without being flashy or harsh.\n\nMinimize visual distractions. When there’s a lot of visual noise, it can be difficult for people to find the object they’re looking for. Visual movement can be even more distracting: When people sense movement — especially in their peripheral vision — they tend to respond automatically by looking at it, making it hard to keep looking at the object they’re interested in. For example, revealing content near a button people are looking at can cause them to involuntarily look at the new content instead of the button.\n\nAvoid using a repeating pattern or texture that fills the field of view. In some cases, people’s eyes can lock onto different elements in a pattern or texture, making the elements appear to have different depths. To avoid this effect, consider using the pattern in a smaller area.\n\nPrefer using standard UI components. System-provided components respond consistently when people look at them. If your custom components use different visual cues to provide visual feedback, it can be difficult for people to learn and remember how these components work in your app.\n\nIn general, give an interactive item a rounded shape. People’s eyes tend to be drawn toward the corners in a shape, making it difficult to keep looking at the shape’s center. The more rounded an item’s shape, the easier it is for people to use their eyes to target it.\n\nIf you create an interactive component that consists of more than one element, be sure to provide an overall containing shape that visionOS can highlight. For example, if an image and a label below it combine to act as one interactive component, you need to define a custom region that encompasses both elements, allowing visionOS to highlight the entire region when people look at either element.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, tvOS, or watchOS.\n\nResources\nRelated\n\nImmersive experiences\n\nGestures\n\nSpatial layout\n\nDeveloper documentation\n\nAdopting best practices for privacy and user preferences — visionOS\n\nVideos\nDesign for spatial input\nDesign considerations for vision and motion\nPrinciples of spatial design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nClarified the difference between focus effects and the visionOS hover effect.\n\n\n\n\nJune 21, 2023\n\n\t\n\nNew page."
  },
  {
    "title": "Top Shelf",
    "url": "https://developer.apple.com/design/human-interface-guidelines/top-shelf",
    "html": "Top Shelf\nThe Apple TV Home Screen provides an area called Top Shelf, which showcases your content in a rich, engaging way while also giving people access to their favorite apps in the Dock.\n\nWhen you support full-screen Top Shelf, people can swipe through multiple full-screen content views, play trailers and previews, and get more information about your content.\n\nTop Shelf is a unique opportunity to highlight new, featured, or recommended content and let people jump directly to your app or game to view it. For example, when people select Apple TV in the Dock, full-screen previews immediately begin playing and soon the Dock slides away. As people watch previews for the first show, they can swipe through previews of all other featured shows, stopping to select Play or More Info for a preview that interests them.\n\nThe system defines several layout templates that you can use to give people a compelling Top Shelf experience when they select your app in the Dock. To help you position content, you can download these templates from Apple Design Resources.\n\nBest practices\n\nHelp people jump right into your content. Top Shelf provides a path to the content people care about most. Two of the system-provided layout templates — carousel actions and carousel details — each include two buttons by default: A primary button intended to begin playback and a More Info button intended to open your app to a view that displays details about the content.\n\nFeature new content. For example, showcase new releases or episodes, highlight upcoming movies and shows, and avoid promoting content that people have already purchased, rented, or watched.\n\nPersonalize people’s favorite content. People typically put the apps they use most often into Top Shelf. You can personalize their experience by showing targeted recommendations in the Top Shelf content you supply, letting people resume media playback or jump back into active gameplay.\n\nAvoid showing advertisements or prices. People put your app into Top Shelf because you’ve already sold them on it, so they may not appreciate seeing lots of ads from your app. Showing purchasable content in the Top Shelf is fine, but prefer putting the focus on new and exciting content, and consider displaying prices only when people show interest.\n\nShowcase compelling dynamic content that can help draw people in and encourage them to view more. If necessary, you can supply static images, but people typically prefer a captivating, dynamic Top Shelf experience that features the newest or highest rated content. To provide this experience, prefer creating layered images to display in Top Shelf.\n\nIf you don’t provide the recommended full-screen content, supply at least one static image as a fallback. The system displays a static image when your app is in the Dock and in focus and full-screen content is unavailable. tvOS flips and blurs the image, ensuring that it fits into a width of 1920 pixels at the 16:9 aspect ratio. Use the following values for guidance.\n\nImage size\n\n\n\n\n2320x720 pt (2320x720 px @1x, 4640x1440 px @2x)\n\nAvoid implying interactivity in a static image. A static Top Shelf image isn’t focusable, and you don’t want to make people think it’s interactive.\n\nDynamic layouts\n\nDynamic Top Shelf images can appear in several ways:\n\nA carousel of full-screen video and images that includes two buttons and optional details\n\nA row of focusable content\n\nA set of scrolling banners\n\nCarousel actions\n\nThe carousel actions layout style focuses on full-screen video and images and includes a few unobtrusive controls that help people see more. This layout style works especially well to showcase content that people already know something about. For example, it’s great for displaying user-generated content, like photos, or new content from a franchise or show that people are likely to enjoy.\n\nProvide a title. Include a succinct title, like the title of the show or movie or the title of a photo album. If necessary, you can also provide a brief subtitle. For example, a subtitle for a photo album could be a range of dates; a subtitle for an episode could be the name of the show.\n\nCarousel details\n\nThis layout style extends the carousel actions layout style, giving you the opportunity to include some information about the content. For example, you might provide information like a plot summary, cast list, and other metadata that helps people decide whether to choose the content.\n\nProvide a title that identifies the currently playing content. The content title appears near the top of the screen so it’s easy for people to read it at a glance. Above the title, you can also provide a succinct phrase or app attribution, like “Featured on My App.”\n\nSectioned content row\n\nThis layout style shows a single labeled row of sectioned content, which can work well to highlight recently viewed content, new content, or favorites. Row content is focusable, which lets people scroll quickly through it. A label appears when an individual piece of content comes into focus, and small movements on the remote’s Touch surface bring the focused image to life. You can also configure a sectioned content row to show multiple labels.\n\nProvide enough content to constitute a complete row. At a minimum, load enough images in a sectioned content row to span the full width of the screen. In addition, include at least one label for greater platform consistency and to provide additional context.\n\nYou can use the following image sizes in a sectioned content row.\n\nPoster (2:3)\n\nAspect\n\n\t\n\nImage size\n\n\n\n\nActual size\n\n\t\n\n404x608 pt (404x608 px @1x, 808x1216 px @2x)\n\n\n\n\nFocused/Safe zone size\n\n\t\n\n380x570 pt (380x570 px @1x, 760x1140 px @2x)\n\n\n\n\nUnfocused size\n\n\t\n\n333x570 pt (333x570 px @1x, 666x1140 px @2x)\n\nSquare (1:1)\n\nAspect\n\n\t\n\nImage size\n\n\n\n\nActual size\n\n\t\n\n608x608 pt (608x608 px @1x, 1216x1216 px @2x)\n\n\n\n\nFocused/Safe zone size\n\n\t\n\n570x570 pt (570x570 px @1x, 1140x1140 px @2x)\n\n\n\n\nUnfocused size\n\n\t\n\n500x500 pt (500x500 px @1x, 1000x1000 px @2x)\n\n16:9\n\nAspect\n\n\t\n\nImage size\n\n\n\n\nActual size\n\n\t\n\n908x512 pt (908x512 px @1x, 1816x1024 px @2x)\n\n\n\n\nFocused/Safe zone size\n\n\t\n\n852x479 pt (852x479 px @1x, 1704x958 px @2x)\n\n\n\n\nUnfocused size\n\n\t\n\n782x440 pt (782x440 px @1x, 1564x880 px @2x)\n\nBe aware of additional scaling when combining image sizes. If your Top Shelf design includes a mixture of image sizes, keep in mind that images will automatically scale up to match the height of the tallest image if necessary. For example, a 16:9 image scales to 500 pixels high if included in a row with a poster or square image.\n\nScrolling inset banner\n\nThis layout shows a series of large images, each of which spans almost the entire width of the screen. Apple TV automatically scrolls through these banners on a preset timer until people bring one into focus. The sequence circles back to the beginning after the final image is reached.\n\nWhen a banner is in focus, a small, circular gesture on the remote’s Touch surface enacts the system focus effect, animating the item, applying lighting effects, and, if the banner contains layered images, producing a 3D effect. Swiping on the Touch surface pans to the next or previous banner in the sequence. Use this style to showcase rich, captivating content, such as a popular new movie.\n\nProvide three to eight images. A minimum of three images is recommended for a scrolling banner to feel effective. More than eight images can make it hard to navigate to a specific image.\n\nIf you need text, add it to your image. This layout style doesn’t show labels under content, so all text must be part of the image itself. In layered images, consider elevating text by placing it on a dedicated layer above the others. Add the text to the accessibility label of the image too, so VoiceOver can read it.\n\nUse the following size for a scrolling inset banner image:\n\nAspect\n\n\t\n\nImage size\n\n\n\n\nActual size\n\n\t\n\n1940x692 pt (1940x692 px @1x, 3880x1384 px @2x)\n\n\n\n\nFocused/Safe zone size\n\n\t\n\n1740x620 pt (1740x620 px @1x, 3480x1240 px @2x)\n\n\n\n\nUnfocused size\n\n\t\n\n1740x560 pt (1740x560 px @1x, 3480x1120 px @2x)\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, visionOS, or watchOS.\n\nResources\nRelated\n\nApple Design Resources\n\nVideos\nMastering the Living Room With tvOS"
  },
  {
    "title": "Context menus",
    "url": "https://developer.apple.com/design/human-interface-guidelines/context-menus",
    "html": "Context menus\nA context menu provides access to functionality that’s directly related to an item, without cluttering the interface.\n\nAlthough a context menu provides convenient access to frequently used items, it’s hidden by default, so people might not know it’s there. To reveal a context menu, people generally choose a view or select some content and then perform an action, using the input modes their current configuration supports. For example:\n\nThe system-defined touch or pinch and hold gesture in visionOS, iOS, and iPadOS\n\nPressing the Control key while clicking a pointing device in macOS and iPadOS\n\nUsing a secondary click on a Magic Trackpad in macOS or iPadOS\n\nBest practices\n\nPrioritize relevancy when choosing items to include in a context menu. A context menu isn’t for providing advanced or rarely used items; instead, it helps people quickly access the commands they’re most likely to need in their current context. For example, the context menu for a Mail message in the Inbox includes commands for replying and moving the message, but not commands for editing message content, managing mailboxes, or filtering messages.\n\nAim for a small number of menu items. A context menu that’s too long can be difficult to scan and scroll.\n\nSupport context menus consistently throughout your app. If you provide context menus for items in some places but not in others, people won’t know where they can use the feature and may think there’s a problem.\n\nAlways make context menu items available in the main interface, too. For example, in Mail in iOS and iPadOS, the context menu items that are available for a message in the Inbox are also available in the toolbar of the message view. In macOS, an app’s menu bar menus list all the app’s commands, including those in various context menus.\n\nIf you need to use submenus to manage a menu’s complexity, keep them to one level. A submenu is a menu item that reveals a secondary menu of logically related commands. Although submenus can shorten a context menu and clarify its commands, more than one level of submenu complicates the experience and can be difficult for people to navigate. If you need to include a submenu, give it an intuitive title that helps people predict its contents without opening it. For guidance, see Submenus.\n\nHide unavailable menu items, don’t dim them. Unlike a regular menu, which helps people discover actions they can perform even when the action isn’t available, a context menu displays only the actions that are relevant to the currently selected view or content. In macOS, the exceptions are the Cut, Copy, and Paste menu items, which may appear unavailable if they don’t apply to the current context.\n\nAim to place the most frequently used menu items where people are likely to encounter them first. When a context menu opens, people often read it starting from the part that’s closest to where their finger or pointer revealed it. Depending on the location of the selected content, a context menu might open above or below it, so you might also need to reverse the order of items to match the position of the menu.\n\nShow keyboard shortcuts in your app’s main menus, not in context menus. Context menus already provide a shortcut to task-specific commands, so it’s redundant to display keyboard shortcuts too.\n\nFollow best practices for using separators. As with other types of menus, you can use separators to group items in a context menu and help people scan the menu more quickly. In general, you don’t want more than about three groups in a context menu. For guidance, see Menus.\n\nIn iOS, iPadOS, and visionOS, warn people about context menu items that can destroy data. If you need to include potentially destructive items in your context menu — such as Delete or Remove — list them at the end of the menu and identify them as destructive (for developer guidance, see destructive). The system can display a destructive menu item using a red text color.\n\nContent\n\nA context menu seldom displays a title. In contrast, each item in a context menu needs to display a short label that clearly describes what it does. For guidance, see Menus > Labels.\n\nIn iOS, iPadOS, and visionOS, include a symbol or interface icon with each command in a context menu. A symbol or icon reinforces the meaning of a command, helping people instantly understand its function. In cases where there are multiple commands that need to use the same symbol, consider omitting all symbols for these commands to avoid repeating the symbol too often. A macOS context menu generally doesn’t include symbols.\n\nPlatform considerations\n\nNo additional considerations for tvOS. Not supported in watchOS.\n\niOS, iPadOS\n\nInclude a title in a context menu only if doing so clarifies the menu’s effect. For example, when people select multiple Mail messages and tap the Mark toolbar button, the resulting context menu displays a title that states the number of selected messages, reminding people that the command they choose affects all the messages they selected.\n\nProvide either a context menu or an edit menu for an item, but not both. If you provide both features for the same item, it can be confusing to people — and difficult for the system to detect their intent. See Edit menus.\n\nIn iPadOS, consider using a context menu to let people create a new object in your app. iPadOS lets you reveal a context menu when people perform a long press on the touchscreen or use a secondary click with an attached trackpad or keyboard. For example, Files lets people create a new folder by revealing a context menu in an area between existing files and folders.\n\nIn iOS and iPadOS, a context menu can display a preview of the current content near the list of commands. People can choose a command in the menu or — in some cases — they can tap the preview to open it or drag it to another area.\n\nPrefer a graphical preview that clarifies the target of a context menu’s commands. For example, when people reveal a context menu on a list item in Notes or Mail, the preview shows a condensed version of the actual content to help people confirm that they’re working with the item they intend.\n\nEnsure that your preview looks good as it animates. As people reveal a context menu on an onscreen object, the system animates the preview image as it emerges from the content, dimming the screen behind the preview and the menu. It’s important to adjust the preview’s clipping path to match the shape of the preview image so that its contours, such as the rounded corners, don’t appear to change during animation. For developer guidance, see UIContextMenuInteractionDelegate.\n\nmacOS\n\nOn a Mac, a context menu is sometimes called a contextual menu.\n\nvisionOS\n\nConsider using a context menu instead of a panel or inspector window to present frequently used functionality. Minimizing the number of separate views or windows your app opens can help people keep their space uncluttered.\n\nIn general, avoid letting a context menu’s height exceed the height of the window. In visionOS, a window includes system-provided components above and below its top and bottom edges, such as window-management controls and the Share menu, so a context menu that’s too tall could obscure them. As you consider the number of items to include, be guided by the ways people are likely to use your app. For example, people who use an app to accomplish in-depth, specialist tasks often expect to spend time learning a large number of sophisticated commands and might appreciate contextual access to them. On the other hand, people who use an app to perform a few simple actions may appreciate short contextual menus that are quick to scan and use.\n\nwatchOS\n\nIn versions of watchOS before watchOS 7, people could press firmly on the display to open a hidden menu of actions relevant to the current screen. In watchOS 7 and later, watchOS apps elevate important items out of such menus and into the relevant screen or a settings screen.\n\nResources\nRelated\n\nMenus\n\nEdit menus\n\nPop-up buttons\n\nPull-down buttons\n\nDeveloper documentation\n\ncontextMenu(menuItems:) — SwiftUI\n\nUIContextMenuInteraction — UIKit\n\npopUpContextMenu(_:with:for:) — AppKit\n\nVideos\nWhat’s new in iPad app design\nDesign with iOS pickers, menus and actions\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded guidance on hiding unavailable menu items.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nRefined guidance on including a submenu and added a guideline on using a context menu to support object creation in an iPadOS app."
  },
  {
    "title": "Edit menus",
    "url": "https://developer.apple.com/design/human-interface-guidelines/edit-menus",
    "html": "Edit menus\nAn edit menu lets people make changes to selected content in the current view, in addition to offering related commands like Copy, Select, Translate, and Look Up.\n\nIn addition to text, an edit menu’s commands can apply to many types of selectable content, such as images, files, and objects like contact cards, charts, or map locations. In visionOS, and beginning in iOS 16 and iPadOS 16, the system automatically detects the data type of a selected item, which can result in the addition of a related action to the edit menu. For example, selecting an address can add an item like Get directions to the edit menu.\n\nEdit menus can look and behave slightly differently in different platforms.\n\nIn visionOS, people use the standard pinch and hold gesture to open the edit menu as a horizontal bar, or they can open it in a context menu.\n\nIn iOS, the edit menu displays commands in a compact, horizontal list that appears when people touch and hold or double-tap to select content in a view.\n\nIn iPadOS, the edit menu looks different depending on how people reveal it. When people use touch interactions to reveal the menu, it uses the compact, horizontal appearance. In contrast, when people use a keyboard or pointing device to reveal it, the edit menu uses a vertical layout in which three or four important commands can display in a row at the top.\n\nIn macOS, people can access editing commands in a context menu they can reveal while in an editing task, as well as through the app’s Edit menu in the menu bar.\n\nEditing content is rare in tvOS and watchOS experiences, so the system doesn’t provide an edit menu in these platforms.\n\nBest practices\n\nPrefer the system-provided edit menu. People are familiar with the contents and behavior of the system-provided component, so creating a custom menu that presents the same commands is redundant and likely to be confusing. For a list of standard edit menu commands, see UIResponderStandardEditActions.\n\nLet people reveal an edit menu using the system-defined interactions they already know. For example, people expect to touch and hold on a touchscreen, pinch and hold in visionOS, or use a secondary click with an attached trackpad or keyboard. Although the interactions to reveal an edit menu can differ based on platform, people don’t appreciate having to learn a custom interaction to perform a standard task.\n\nOffer commands that are relevant in the current context, removing or dimming commands that don’t apply. For example, if nothing is selected, avoid showing options that require a selection, such as Copy or Cut. Similarly, avoid showing a Paste option when there’s nothing to paste.\n\nList custom commands near relevant system-provided ones. For example, if you offer custom formatting commands, you can help maintain the ordering people expect by listing them after the system-provided commands in the format section. Avoid overwhelming people with too many custom commands.\n\nWhen it makes sense, let people select and copy noneditable text. People appreciate being able to paste static content — such as an image caption or social media status — into a message, note, or web search. In general, let people copy content text, but not control labels.\n\nSupport undo and redo when possible. Like all menus, an edit menu doesn’t require confirmation before performing its actions, so people can easily use undo and redo to recover a previous state. For guidance, see Undo and redo.\n\nIn general, avoid implementing other controls that perform the same functions as edit menu items. People typically expect to choose familiar edit commands in an edit menu, or use standard keyboard shortcuts. Offering redundant controls can crowd your interface, giving you less space for presenting actions that people might not already know about.\n\nDifferentiate different types of deletion commands when necessary. For example, a Delete menu item behaves the same as pressing a Delete key, but a Cut menu item copies the selected content to the system pasteboard before deleting it.\n\nContent\n\nCreate short labels for custom commands. Use verbs or short verb phrases that succinctly describe the action your command performs. For guidance, see Labels.\n\nPlatform considerations\n\nNo additional considerations for visionOS. Not supported in tvOS or watchOS.\n\niOS, iPadOS\n\nEnsure your edit menu works well in both styles. The system displays the compact, horizontal style when people use Multi-Touch gestures to reveal the edit menu, and the vertical style when people use a keyboard or pointing device to reveal it. For guidance using the vertical menu layout, see Menus > iOS, iPadOS.\n\nAdjust an edit menu’s placement, if necessary. Depending on available space, the default menu position is above or below the insertion point or selection. The system also displays a visual indicator that points to the targeted content. Although you can’t change the shape of the menu or its pointer, you can change the menu’s position. For example, you might need to move the menu to prevent it from covering important content or parts of your interface.\n\nmacOS\n\nTo learn about the order of items in a macOS app’s Edit menu, see Edit menu.\n\nResources\nRelated\n\nMenus\n\nContext menus\n\nThe menu bar\n\nUndo and redo\n\nDeveloper documentation\n\nUIEditMenuInteraction — UIKit\n\nNSMenu — AppKit\n\nVideos\nWhat’s new in iPad app design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded guidance on supporting both edit-menu styles in iPadOS."
  },
  {
    "title": "Tab views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/tab-views",
    "html": "Tab views\nA tab view presents multiple mutually exclusive panes of content in the same area, which people can switch between using a tabbed control.\n\nBest practices\n\nUse a tab view to present closely related areas of content. The appearance of a tab view provides a strong visual indication of enclosure. People expect each tab to display content that is in some way similar or related to the content in the other tabs.\n\nMake sure the controls within a pane affect content only in the same pane. Panes are mutually exclusive, so ensure they’re fully self-contained.\n\nProvide a label for each tab that describes the contents of its pane. A good label helps people predict the contents of a pane before clicking or tapping its tab. In general, use nouns or short noun phrases for tab labels. A verb or short verb phrase may make sense in some contexts. Use title-style capitalization for tab labels.\n\nAvoid using a pop-up button to switch between tabs. A tabbed control is efficient because it requires a single click or tap to make a selection, whereas a pop-up button requires two. A tabbed control also presents all choices onscreen at the same time, whereas people must click a pop-up button to see its choices. Note that a pop-up button can be a reasonable alternative in cases where there are too many panes of content to reasonably display with tabs.\n\nAvoid providing more than six tabs in a tab view. Having more than six tabs can be overwhelming and create layout issues. If you need to present six or more tabs, consider another way to implement the interface. For example, you could instead present each tab as a view option in a pop-up button menu.\n\nFor developer guidance, see NSTabView.\n\nAnatomy\n\nYou can position the tabbed control on any side of the content area: top, bottom, left, or right. You can also hide the controls, which is appropriate when you switch the panes programmatically.\n\nTop tabs\n\nBottom tabs\n\nWhen you hide the tabbed control, the content area can be borderless, bezeled, or bordered with a line. A borderless view can be solid or transparent.\n\nIn general, inset a tab view by leaving a margin of window-body area on all sides of a tab view. This layout looks clean and leaves room for additional controls that aren’t directly related to the contents of the tab view. For example, the lock button in Date & Time settings is outside of the tab view because it applies to all tabs. You can extend a tab view to meet the window edges, but this layout is unusual.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, or visionOS.\n\niOS, iPadOS\n\nFor similar functionality, consider using a segmented control instead.\n\nwatchOS\n\nwatchOS displays tab views using page controls. For developer guidance, see TabView and verticalPage.\n\nResources\nRelated\n\nTab bars\n\nSegmented controls\n\nDeveloper documentation\n\nTabView — SwiftUI\n\nNSTabView — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nAdded guidance for using tab views in watchOS."
  },
  {
    "title": "Remotes",
    "url": "https://developer.apple.com/design/human-interface-guidelines/remotes",
    "html": "Remotes\nThe Siri Remote is the primary input method for Apple TV, helping people feel connected to onscreen content from across the room.\n\nIn addition to several specific buttons, the Siri Remote combines a clickpad and touch surface to support familiar gestures like swipe and press that people use to navigate tvOS apps, browse channels and content, play and pause media, and make selections.\n\nBest practices\n\nPrefer using standard gestures to perform standard actions. Unless people are actively playing a game, they expect the remote to behave in standard ways in every app they use. Redefining or repurposing standard remote behaviors can cause confusion and add complexity to your experience. For guidance, see Gestures.\n\nBe consistent with the tvOS focus experience. The focus experience forges a strong connection between people and the content they’re viewing. Reinforce this link in your app by ensuring that you combine gestures with the focus experience in ways that are familiar to people, such as always moving focus in the same direction as the gesture.\n\nProvide clear feedback that shows people what happens when they make gestures in your app. For example, lightly resting a thumb on the remote shows people where to swipe down so that they can reveal an info area.\n\nDefine new gestures only when it makes sense in your app. Within gameplay, for example, custom gestures can be a fun part of the experience. In most other situations, people expect to use standard gestures and may not appreciate having to discover or remember new ones.\n\nDifferentiate between press and tap, and avoid responding to an inadvertent tap. Pressing is an intentional action, and it works well for choosing a button, confirming a selection, and initiating an action during gameplay. Tap gestures are fine for navigation or showing additional information, but keep in mind that people might cause an inadvertent tap when they rest a thumb on the remote, pick it up, move it around, or hand it to someone else, so it often works well to avoid responding to taps during live video playback.\n\nConsider using the position of a tap to aid with navigation or gameplay. The remote can differentiate between up, down, left, and right tap gestures on the touch surface. Respond to positional taps only if it makes sense in the context of your app and if such behavior is intuitive and discoverable.\n\nIn almost all cases, open the parent of the current screen when people press the Back button. At the top level of an app or game, the parent is the Apple TV Home Screen; within an app, the parent is defined by the app hierarchy, and isn’t necessarily the previous screen. The exception to this standard behavior is when people are actively playing a game, where it can be easy to accidentally press the Back button repeatedly. To avoid disrupting gameplay in this scenario, respond to the Back button by opening an in-game pause menu that lets people use a different interaction to navigate back to the game’s main menu. When the in-game pause menu is open, respond to a Back-button press by closing the menu and resuming the game. Note that people press and hold the Back button to go to the Home Screen from any location. For guidance, see Buttons.\n\nRespond correctly to the Play/Pause button during media playback. When playing music or video, people expect pressing the Play/Pause button to play, pause, or resume playback.\n\nGestures\n\nThe clickpad’s touch surface detects swipes and presses.\n\nSwipe. Swiping lets people scroll effortlessly through large numbers of items with movement that starts fast and then slows down, based on the strength of the swipe. When people swipe up or down on the edge of the remote, they can speed through items very quickly.\n\nPress. People press to activate a control or select an item. Also, people press before swiping to activate scrubbing mode.\n\nButtons\n\nEnsure that your app or game responds to specific presses in the following ways.\n\nButton or area\n\n\t\n\nExpected behavior in an app\n\n\t\n\nExpected behavior in a game\n\n\n\n\nTouch surface (swipe)\n\n\t\n\nNavigates. Changes focus.\n\n\t\n\nPerforms directional pad behavior.\n\n\n\n\nTouch surface (press)\n\n\t\n\nActivates a control or an item. Navigates deeper.\n\n\t\n\nPerforms primary button behavior.\n\n\n\n\nBack\n\n\t\n\nReturns to previous screen. Exits to Apple TV Home Screen.\n\n\t\n\nPauses/resumes gameplay. Returns to previous screen, exits to main game menu, or exits to Apple TV Home Screen.\n\n\n\n\nPlay/Pause\n\n\t\n\nActivates media playback. Pauses/resumes media playback.\n\n\t\n\nPerforms secondary button behavior. Skips intro video.\n\nCompatible remotes\n\nSome remotes that are compatible with Apple TV include buttons for browsing live TV or other channel-based content. For example, a remote might include a button people can use to open an electronic program guide (EPG) and other buttons they can use to browse the guide or change channels. For developer guidance, see Providing Channel Navigation; for design guidance, see EPG experience.\n\nIf your live-viewing app provides an EPG, respond to a remote’s EPG-browsing buttons in ways people expect. When people press a “guide” or “browse” button, they expect your EPG to open. While they’re viewing your EPG, people expect to navigate through it by pressing a “page up” or “page down” button. Avoid responding to these buttons in other ways while people are browsing the EPG. On the Siri Remote and compatible remotes, people can also tap on the upper or lower area of the Touch surface to browse the EPG. If your app doesn’t support an EPG experience, the system routes these button presses to the default guide app on the viewer’s device.\n\nWhile your content plays, respond to a compatible remote’s “page up” or “page down” button by changing the channel. People expect these buttons to behave differently when they switch between viewing content and browsing an EPG.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, visionOS, or watchOS.\n\nResources\nRelated\n\nUse your Siri Remote or Apple TV Remote with Apple TV"
  },
  {
    "title": "Workouts",
    "url": "https://developer.apple.com/design/human-interface-guidelines/workouts",
    "html": "Workouts\nA great workout or fitness experience encourages people to engage with their current activity and helps them track their progress on their devices.\n\nPeople can wear their Apple Watch during many types of workouts, and they might carry their iPhone or iPad during fitness activities like walking, wheelchair pushing, and running. In contrast, people tend to use their larger or more stationary devices like iPad Pro, Mac, and Apple TV to participate in live or recorded workout sessions by themselves or with others.\n\nYou can create a workout experience for Apple Watch, iPhone, or iPad that helps people reach their goals by leveraging activity data from the device and using familiar components to display fitness metrics.\n\nBest practices\n\nIn a watchOS fitness app, use workout sessions to provide useful data and relevant controls. During a fitness app’s active workout sessions, watchOS continues to display the app as time passes between wrist raises, so it’s important to provide the workout data people are most likely to care about. For example, you might show elapsed or remaining time, calories burned, or distance traveled, and offer relevant controls like lap or interval markers.\n\nAvoid distracting people from a workout with information that’s not relevant. For example, people don’t need to review the list of workouts you offer or access other parts of your app while they’re working out. Here is an arrangement that many watchOS workout apps use, including Workout:\n\nLarge buttons that control the in-progress session — such as Pause, Resume, and End — appear on the leftmost screen.\n\nMetrics and other data appear on a dedicated screen that people can read at a glance.\n\nIf supported, media playback controls appear on the rightmost screen.\n\nUse a distinct visual appearance to indicate an active workout. During a workout, people appreciate being able to recognize an active session at a glance. The metrics page can be a good way to show that a session is active because the values update in real time. In addition to displaying updating values, you can further distinguish the metrics screen by using a unique layout.\n\nProvide workout controls that are easy to find and tap. In addition to making it easy for people to pause, resume, and stop a workout, be sure to provide clear feedback that indicates when a session starts or stops.\n\nHelp people understand the health information your app records if sensor data is unavailable during a workout. For example, water may prevent a heart-rate measurement, but your app can still record data like the distance people swam and the number of calories they burned. If your app supports the Swimming or Other workout types, explain the situation using language that’s similar to the language used in the system-provided Workout app, as shown below:\n\n\t\n\nExample text from the Workout app\n\n\n\n\n\t\n\nGPS is not used during a Pool Swim, and water may prevent a heart-rate measurement, but Apple Watch will still track your calories, laps, and distance using the built-in accelerometer.\n\n\n\n\n\t\n\nIn this type of workout, you earn the calorie equivalent of a brisk walk anytime sensor readings are unavailable.\n\n\n\n\n\t\n\nGPS will only provide distance when you do a freestyle stroke. Water might prevent a heart-rate measurement, but calories will still be tracked using the built-in accelerometer.\n\nProvide a summary at the end of a session. A summary screen confirms that a workout is finished and displays the recorded information. Consider enhancing the summary by including Activity rings, so that people can easily check their current progress.\n\nDiscard extremely brief workout sessions. If a session ends a few seconds after it starts, either discard the data automatically or ask people if they want to record the data as a workout.\n\nMake sure text is legible for when people are in motion. When a session requires movement, use large font sizes, high-contrast colors, and arrange text so that the most important information is easy to read.\n\nUse Activity rings correctly. The Activity rings view is an Apple-designed element featuring one or more rings whose colors and meanings match those in the Activity app. Use them only for their documented purpose.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or watchOS. Not supported in macOS, tvOS, or visionOS.\n\nResources\nRelated\n\nActivity rings\n\nDeveloper documentation\n\nWorkouts and activity rings — HealthKit\n\nVideos\nBuild a workout app for Apple Watch\nBuild custom workouts with WorkoutKit"
  },
  {
    "title": "Ratings and reviews",
    "url": "https://developer.apple.com/design/human-interface-guidelines/ratings-and-reviews",
    "html": "Ratings and reviews\nPeople often view the ratings and reviews for an app or game before they download it.\n\nDelivering a great overall experience is the best way to encourage positive ratings and reviews, but it’s also crucial to choose the right time to ask people for feedback. Although every app is different, some possible ways to do this involve looking at how many times or how frequently people launch your app, the number of features someone explores, or the number of tasks they complete.\n\nPeople can always rate your app within the App Store.\n\nBest practices\n\nAsk for a rating only after people have demonstrated engagement with your app or game. For example, you might prompt people when they complete a game level or a significant task. Avoid asking for a rating on first launch or during onboarding, because people haven’t had enough time to gain a clear understanding of your app’s value or form an opinion. People may even be more likely to leave negative feedback if they feel an app is asking for a rating before they get a chance to use it.\n\nAvoid interrupting people while they’re performing a task or playing a game. Asking for feedback can disrupt the user experience and feel like a burden. Look for natural breaks or stopping points in your app or game where a rating request is less likely to be bothersome.\n\nAvoid pestering people. Repeated rating requests can be irritating, and may even negatively influence people’s opinion of your app. Consider allowing at least a week or two between requests, prompting again after people demonstrate additional engagement with your experience.\n\nPrefer the system-provided prompt. iOS, iPadOS, and macOS offer a consistent, nonintrusive way for apps and games to request ratings and reviews. When you identify places in your experience where it makes sense to ask for feedback, the system checks for previous feedback and — if there isn’t any — displays an in-app prompt that asks for a rating and an optional written review. People can supply feedback or dismiss the prompt with a single tap or click; they can also opt out of receiving these prompts for all apps they have installed. The system automatically limits the display of the prompt to three occurrences per app within a 365-day period. For developer guidance, see SKStoreReviewController.\n\nWeigh the benefits of resetting your summary rating against the potential disadvantage of showing fewer ratings. When you release a new version of your app or game, you can reset the summary of individual ratings you received since the last reset. Although resetting means that the ratings reflect the current version, it also tends to result in having fewer ratings overall, which can discourage some people from downloading your app. For developer guidance, see Reset app summary rating.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nRatings, reviews, and responses\n\nDeveloper documentation\n\nSKStoreReviewController — StoreKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nAdded artwork."
  },
  {
    "title": "Playing video",
    "url": "https://developer.apple.com/design/human-interface-guidelines/playing-video",
    "html": "Playing video\nPeople expect to enjoy rich video experiences on their devices, regardless of the app or game they’re using.\n\nThe system provides video players designed for you to use to embed playback experiences within your app or game in iOS, iPadOS, macOS, tvOS, and visionOS. You can also offer your content through the TV app in these platforms, which gives people a convenient and consistent viewing experience.\n\nThe system-provided video players support different aspect-ratio playback modes and in most platforms, Picture in Picture (PiP) viewing mode. Although people can switch modes during playback, by default, the system selects one of the following playback modes based on a video’s aspect ratio:\n\nIn full-screen — or aspect-fill — mode, the video scales to fill the display, and some edge cropping may occur. This mode is the default for wide video (2:1 through 2.40:1). For developer guidance, see resizeAspectFill.\n\nIn fit-to-screen — or aspect — mode, the entire video is visible onscreen, and letterboxing or pillarboxing occurs as needed. This mode is the default for standard video (4:3, 16:9, and anything up to 2:1) and ultrawide video (anything above 2.40:1). For developer guidance, see resizeAspect.\n\nIn visionOS and tvOS, the built-in video player also provides transport controls, which let people perform playback tasks, like turning on subtitles or changing the audio language, and actions, like adding a show to a library or favoriting a clip. Below the transport controls, the video player displays content tabs, like Info, Episodes, or Chapters, that can provide supporting information and help streamline navigation. In visionOS, the transport controls appear as an ornament.\n\nBest practices\n\nUse the system video player to give people a familiar and convenient experience. The built-in video player provides an exceptional video playback experience that offers consistent interactions and behaviors that let people concentrate on enjoying immersive content. If your app truly requires a custom video player, reference the behavior and interface of the system video player to help you provide an experience that people can instantly understand. A custom experience that diverges slightly from the system-provided experience can cause frustration because people don’t know which of their habitual interactions they can continue to use.\n\nAlways display video content at its original aspect ratio. When video content uses embedded letterbox or pillarbox padding to conform to a specific aspect ratio, the system may be unable to correctly scale the video based on the current playback mode. Padding embedded within the video frame can cause videos to appear smaller in both full-screen and fit-to-screen modes. It also prevents videos from displaying correctly in edge-to-edge, non-full-screen contexts, like Picture in Picture mode on iPad.\n\nHere are some examples that show how padding can affect video display on iPhone Xs.\n\nResult of padding a 4:3 video\nResult of padding a 21:9 video\n\n4:3 video in full-screen viewing mode\n\n4:3 video with embedded padding, in full-screen viewing mode\n\nProvide additional information when it adds value. In iOS, iPadOS, tvOS, and visionOS, you can customize a video’s additional information by providing an image, title, description, and other useful information. In general, restrict this content so that it doesn’t obscure media playback. For developer guidance, see externalMetadata.\n\nSupport the interactions people expect, regardless of the input device they’re using to control playback. For example, people expect to press Space on a connected keyboard to play or pause media playback on Apple Vision Pro, Mac, iPhone, iPad, and Apple TV. Similarly, people expect to move through their media on Apple TV by making familiar, intuitive gestures with the Siri Remote. For guidance, see Keyboards and Remotes.\n\nIf people need to access playback options or content-specific information in your tvOS app, consider adding a transport control or a custom content tab. People typically open a transport control or content tab while they’re watching a video, so it’s essential to provide only the most useful actions and information. Help people return quickly to the viewing experience by making sure your actions don’t take more than a step or two and your content is succinct. Use a transport control to support a playback-related action like favoriting a video; use custom content tabs to display supplementary information or recommendations.\n\nAvoid allowing audio from different sources to mix as viewers switch between modes. Mixed audio is an unpleasant and frustrating user experience. In general, audio mixes when at least one of the audio sources fails to handle secondary audio correctly. Here is a typical scenario: While watching a full-screen video, the viewer moves it into the PiP window, where the system automatically mutes the video. In the full-screen window, the viewer starts a game that plays background music, then switches to the PiP window and unmutes the video. If the game doesn’t handle secondary audio appropriately, its audio mixes with the audio from the unmuted video. For developer guidance, see silenceSecondaryAudioHintNotification.\n\nIntegrating with the TV app\n\nThe TV app provides global access to favorite, recently played, and recommended video content from across the system. When people initiate content playback within your app, the TV app automatically opens your app and transitions to it. Follow these guidelines to help the TV app experience feel like an integrated part of your app.\n\nEnsure a smooth transition to your app. The TV app fades to black when transitioning to your app and doesn’t show your app’s launch screen. Maintain visual continuity with this transition by immediately presenting your own black screen before starting to play or resume content.\n\nShow the expected content immediately. People expect the content they choose to begin playing as soon as the transition to your app completes, especially when resuming playback. Jump right from your app’s black screen into content, and avoid displaying splash screens, detail screens, intro animations, or any other barriers that make it take longer to reach content. In rare situations where you must display an interstitial element before the selected media plays, people can choose Select to step through the element, or choose Play if they want to skip the interstitial content and start playback.\n\nAvoid asking people if they want to resume playback. If playback can be resumed, do so automatically without prompting for confirmation.\n\nPlay or pause playback when people press Space on a connected Bluetooth keyboard. Pressing Space to control media playback is an interaction people expect, regardless of the keyboard they’re using.\n\nMake sure content plays for the correct viewer. If your app supports multiple user profiles, the TV app can specify a profile when issuing a playback request. Make your app automatically switch to this profile before starting playback. If a playback request doesn’t specify a profile, ask the viewer to choose one before playback begins so this information is available in the future.\n\nUse the previous end time when resuming playback of a long video clip. Resuming playback at the previous stopping point lets people quickly continue where they left off.\n\nLoading content\n\nAvoid displaying loading screens when possible. A loading screen is unnecessary if your content loads quickly, but if loading takes more than two seconds, consider showing a black loading screen with a centered activity spinner and no surrounding content.\n\nStart playback immediately. If you must display a loading screen, display it only until enough content loads for playback to begin. Continue loading remaining content in the background.\n\nMinimize loading screen content. If you include branding or images on your loading screen, do so minimally while maintaining the black background that helps provide a seamless transition to playback.\n\nExiting playback\n\nAfter exiting playback, people remain in your app rather than returning to the TV app, so it’s a good idea to help them avoid becoming disoriented.\n\nShow a contextually relevant screen. When exiting playback, display a detail view for the content the viewer was just watching and include an option to resume playback. If a detail view isn’t available, show either a menu that lists this content or your app’s main menu.\n\nBe prepared for an immediate exit. Prepare an exit view as soon as possible after receiving a playback notification so you’re ready to display the view if people exit immediately after playback begins.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or macOS.\n\ntvOS\n\nDefer to content when displaying logos or noninteractive overlays above video. A small, unobtrusive logo or countdown timer may be appropriate for your video, but avoid large, distracting overlays that don’t enhance the viewing experience. Also, be aware that some devices are prone to image retention, so it’s generally better to keep overlays short and to prefer translucent graphics in Standard Dynamic Range (SDR) to bright, opaque content.\n\nShow interactive overlays gracefully. Some videos display interactive overlays, such as quizzes, surveys, and progress check-ins. For the best user experience, implement a minimum delay of 0.5 seconds to pause playing media, and display an interactive overlay. Give people a clear way to dismiss the overlay and resume media playback after they finish interacting.\n\nvisionOS\n\nHelp people stay comfortable when playing video in your app. Often, an app doesn’t control the content in the videos it plays, but you can help people stay comfortable by:\n\nLetting them choose when to start playing a video\n\nUsing a small window for playback, letting people resize it if they want\n\nMaking sure people can see their surroundings during playback\n\nIn a fully immersive experience, avoid letting virtual content obscure playback or transport controls. In a fully immersive context, the system automatically places the video player at a predictable location that provides an optimal viewing experience. Use this location to help make sure that no virtual content occludes the default playback or transport controls in the ornament near the bottom of the player.\n\nAvoid automatically starting a fully immersive video playback experience. People need control over their experience and they’re unlikely to appreciate being launched into a fully immersive video without warning.\n\nCreate a thumbnail track if you want to support scrubbing. The system displays thumbnails as people scrub to different times in the video, helping them choose the section they want. To improve performance, supply a set of thumbnails that each measure 160 px in width. For developer guidance, see HTTP Live Streaming (HLS) Authoring Specification for Apple Devices > Trick Play.\n\nAvoid expanding an inline video player to fill a window. When you display the system-provided player view in a window, playback controls appear in the same plane as the player view and not in an ornament that floats above the window. Inline video needs to be 2D and you want to make sure that window content remains visible around the player so people don’t expect a more immersive playback experience. For developer guidance, see AVPlayerViewController.\n\nUse a RealityKit video player if you need to play video in a view like a splash screen or a transitional view. In situations like these, people generally expect the video to lead into the next experience, so they don’t need playback controls or system-provided integration, like dimming and view anchoring. The RealityKit video player automatically uses the correct aspect ratio for both 2D and 3D video and supports closed captions. RealityKit can also help you play video as a special effect on the surface of a custom view or object. For developer guidance, see RealityKit.\n\nwatchOS\n\nIn watchOS, the system manages video playback. Apps can play short video clips while the app is active and running in the foreground. You can use a movie element to embed clips in your interface and play video inline, or you can play a clip in a separate interface. For developer guidance, see VideoPlayer.\n\nKeep video clips short. Prefer shorter clips of no longer than 30 seconds. Long clips consume more disk space and require people to keep their wrists raised for longer periods of time, which can cause fatigue.\n\nUse the recommended sizes and encoding values for media assets. In particular, avoid scaling video clips, which affects performance and results in a suboptimal appearance. The following table lists the recommended encoding and resolution values for video assets. The audio encoding values apply to both movies and audio-only assets.\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nVideo codec\n\n\t\n\nH.264 High Profile\n\n\n\n\nVideo bit rate\n\n\t\n\n160 kbps at up to 30 fps\n\n\n\n\nResolution (full screen)\n\n\t\n\n208x260 px (portrait orientation)\n\n\n\n\nResolution (16:9)\n\n\t\n\n320x180 px (landscape orientation)\n\n\n\n\nAudio\n\n\t\n\n64 kbps HE-AAC\n\nAvoid creating a poster image that looks like a system control. You want people to understand that they can tap a movie element for playback; you don’t want to confuse people by making movie elements look like something else.\n\nConsider creating a poster image that represents a video clip’s contents. When people tap a poster image, the system replaces the image with the video and begins inline playback. A relevant poster image can help people make an informed decision about whether to view the video. In general, avoid creating a poster image that has nothing to do with the content or that people might mistake for a control.\n\nResources\nRelated\n\nPlaying audio\n\nFeedback\n\nDeveloper documentation\n\nConfiguring your app for media playback — AVFoundation\n\nAVKit\n\nHTTP Live Streaming\n\nRealityKit\n\nAdopting the system player interface in visionOS — AVKit\n\nVideos\nPrinciples of spatial design\nCreate a great video playback experience\nDeliver a great playback experience on tvOS\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nCorrected the recommended width for a thumbnail in visionOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Offering help",
    "url": "https://developer.apple.com/design/human-interface-guidelines/offering-help",
    "html": "Offering help\nAlthough the most effective experiences are approachable and intuitive, you can provide contextual help when necessary.\n\nBest practices\n\nLet your app’s tasks inform the types of help people might need. For example, you might help people perform simple, one- or two-step tasks by displaying an inline view that succinctly describes the task. In contrast, if your app or game supports complex or multistep tasks you might want to provide a tutorial that teaches people how to accomplish larger goals. In general, directly relate the help you provide to the precise action or task people are doing right now and make it easy for people to dismiss or avoid the help if they don’t need it.\n\nUse relevant and consistent language and images in your help content. Always make sure guidance is appropriate for the current context. For example, if someone’s using the Siri Remote with your tvOS experience, don’t show tips or images that feature a game controller. Also be sure the terms and descriptions you use are consistent with the platform. For example, don’t write copy that tells people to click a button on an iPhone or tap a menu item on a Mac.\n\nMake sure all help content is inclusive. For guidance, see Inclusion.\n\nAvoid bloating your help content by explaining how standard components or patterns work. Instead, describe the specific action or task that a standard element performs in your app or game. If your experience introduces a unique control or expects people to use an input device in a nonstandard way — such as holding the Siri Remote rotated 90 degrees — orient people quickly, preferring animation or graphics to educate instead of a lengthy description.\n\nCreating tips\n\nA tip is a small, transient view that briefly describes how to use a feature in your app. Tips are a great way to teach people about new or less obvious features in your app, or help them discover faster ways to accomplish a task. For developer guidance, see TipKit.\n\nUse the most appropriate tip type for your app’s user interface. Display an inline tip to avoid covering important information.\n\nDisplay a popover tip when you don’t want to interrupt your content flow. If you use a popover, consider excluding images because the tip already points to the highlighted feature.\n\nUse tips for simple features. Tips work best on features that are easy to describe and that people can complete with a few simple steps. If a feature requires more than three actions, it’s probably too complicated for a tip.\n\nMake tips short, actionable, and engaging. A tip’s goal is to encourage people to try new features. Use direct, action-oriented language to describe what the feature does and explain how to use it. Keep your tips to one or two sentences and avoid including content that’s promotional or related to a different feature or user flow. Promotional content is anything that advertises, sells, or isn’t aligned with the current context of what the person is doing.\n\nDefine rules to help ensure your tips reach the intended audience. Not everyone benefits from every tip. For example, people who’ve already used a feature won’t appreciate viewing a tip that describes it. Use parameter-based or event-based eligibility rules to control when a tip appears, and only display a tip if someone might benefit from its use. When your app has more than one tip, set the display frequency so tips display at a reasonable cadence — for example, once every 24 hours.\n\nIf there’s an image that people associate with the feature, consider including it in the tip. For example, a tip with a star can help people understand that the tip is related to favorites. Note that you may not need to include an image if the tip already points to the highlighted feature.\n\nUse buttons to direct people to information or options. If your feature has settings people can customize, or you want to redirect people to an area where they can learn more about a feature, consider adding a button. Buttons can take people directly to the settings where they make adjustments. Or if there’s more information people might find useful, add a button to take them to additional resources, such as a setup flow.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, tvOS, or watchOS.\n\nmacOS, visionOS\n\nA tooltip (called a help tag in user documentation) displays a small, transient view that briefly describes how to use a component in the interface. In apps that run on a Mac — including iPhone and iPad apps — tooltips can appear when a person holds the pointer over an element; in visionOS apps, a tooltip can appear when a person looks at an element or holds the pointer over it. For developer guidance, see help(_:).\n\nDescribe only the control that people indicate interest in. When people want to know how to use a specific control, they don’t want to learn how to use nearby controls or how to perform a larger task.\n\nExplain the action or task the control initiates. It often works well to begin the description with a verb — for example, “Restore default settings” or “Add or remove a language from the list.”\n\nIn general, avoid repeating a control’s name in its tooltip. Repeating the name takes up space in the tooltip and rarely adds value to the description.\n\nBe brief. As much as possible, limit tooltip content to a maximum of 60 to 75 characters (note that localization often changes the length of text). To make a description brief and direct, consider using a sentence fragment and omitting articles. If you need a lot of text to describe a control, consider simplifying your interface design.\n\nUse sentence case. Sentence case tends to appear more casual and approachable. If you write complete sentences, omit ending punctuation unless it’s required to be consistent with your app’s style.\n\nConsider offering context-sensitive tooltips. For example, you could provide different text for a control’s different states.\n\nResources\nRelated\n\nOnboarding\n\nFeedback\n\nWriting\n\nHelp menu\n\nDeveloper documentation\n\nTipKit\n\nNSHelpManager — AppKit\n\nVideos\nMake features discoverable with TipKit\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nIncluded visionOS in guidance for creating tooltips.\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nAdded guidance for creating tips."
  },
  {
    "title": "Managing notifications",
    "url": "https://developer.apple.com/design/human-interface-guidelines/managing-notifications",
    "html": "Managing notifications\nNotifications can give people timely and important information, whether the device is locked or in use.\n\nYou need to get permission before sending any notification. The system lets people change this decision in settings, where they can also silence all notifications (except for government alerts in some locales).\n\nIntegrating with Focus\n\nPeople appreciate receiving a notification for something they care about, but they don’t always appreciate being interrupted. To help people manage the experience, the system lets them specify delivery times and set up a Focus.\n\nA Focus helps people filter notifications during a time period they reserve for an activity like sleeping, working, reading, or driving.\n\nDelivery scheduling lets people choose whether to receive notification alerts immediately or in a summary that’s delivered at times they choose.\n\nPeople identify the contacts and apps that can break through a Focus to deliver notification alerts. In a Work Focus, for example, people might want to receive alerts from work colleagues, family members, and work-related apps as soon as notifications arrive. People might also want to receive all Time Sensitive notification alerts during a Focus. A Time Sensitive notification contains essential information people appreciate getting right away.\n\nImportant\n\nEven though a Focus might delay the delivery of a notification alert, the notification itself is available as soon as it arrives.\n\nTo support these behavior customizations, you first identify the types of notifications your app or game can send. If you support direct communications — like phone calls and messages — you use communication notifications; for all other types of tasks, you use noncommunication notifications. To support communication notifications, you adopt SiriKit intents, which means people can use Siri to customize notification behaviors; for developer guidance, see INSendMessageIntent and UNNotificationContentProviding.\n\nYou need to specify a system-defined interruption level for each noncommunication notification you send. The system uses the interruption level to help determine when to deliver the alert; when a communication notification arrives, the system uses the sender to determine when to deliver the alert.\n\nThe system defines four interruption levels for noncommunication notifications:\n\nPassive. Information people can view at their leisure, like a restaurant recommendation.\n\nActive (the default). Information people might appreciate knowing about when it arrives, like a score update on their favorite sports team.\n\nTime Sensitive. Information that directly impacts the person and requires their immediate attention, like an account security issue or a package delivery.\n\nCritical. Urgent information about health and safety that directly impacts the person and demands their immediate attention. Critical notifications are extremely rare and typically come from governmental and public agencies or apps that help people manage their health or home.\n\nNotification alerts in each system-defined interruption level can behave in the following ways:\n\nInterruption level\n\n\t\n\nOverrides scheduled delivery\n\n\t\n\nBreaks through Focus\n\n\t\n\nOverrides Ring/Silent switch on iPhone and iPad\n\n\n\n\nPassive\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nNo\n\n\n\n\nActive\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nNo\n\n\n\n\nTime Sensitive\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nNo\n\n\n\n\nCritical\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\nNote\n\nBecause a Critical notification can override the Ring/Silent switch and break through scheduled delivery and Focus, you must get an entitlement to send one.\n\nBest practices\n\nBuild trust by accurately representing the urgency of each notification. People have several ways to adjust how they receive your notifications — including turning off all notifications — so it’s essential to be as realistic as possible when assigning an interruption level. You don’t want people to feel that a notification uses a high level of urgency to interrupt them with low-priority information.\n\nUse the Time Sensitive interruption level only for notifications that are relevant in the moment. To help people understand the benefits of letting Time Sensitive notifications break through a Focus or scheduled delivery, make sure the notification is about an event that’s happening now or will happen within an hour. The first time a Time Sensitive notification arrives from your app, the system describes how such a notification works and gives people a way to turn it off if they don’t agree that the information requires their immediate attention. Going forward, the system periodically gives people additional opportunities to evaluate how your Time Sensitive notification is working for them. For developer guidance, see UNNotificationInterruptionLevel.\n\nSending marketing notifications\n\nDon’t use notifications to send marketing or promotional content unless people explicitly agree to receive such information. When people want to learn about new features, content, or events related to your app or game, they can grant their permission to receive marketing notifications. For example, people who use a subscription app might appreciate getting an offer to become a subscriber, and game players might want to receive a special offer related to a live game event.\n\nNever use the Time Sensitive interruption level to send a marketing notification. People may have agreed to receive marketing notifications from your app, but such a notification must never break through a Focus or scheduled delivery setting.\n\nGet people’s permission if you want to send them promotional or marketing notifications. Before you send these notifications to people, you must receive their explicit permission to do so. Create an alert, modal view, or other interface that describes the types of information you want to send and gives people a clear way to opt in or out.\n\nMake sure people can manage their notification settings within your app. In addition to requesting permission to send informational or marketing notifications, you must also provide an in-app settings screen that lets people change their choice. For guidance, see Settings.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or visionOS.\n\nwatchOS\n\nBy default, the notification settings people use for apps on their iPhone apply to the same apps on their Apple Watch. People can manage these settings in the Apple Watch app on iPhone, or they can access per-notification options — such as Mute 1 Hour or Turn off Time Sensitive — by swiping left when a notification arrives on their Apple Watch.\n\nResources\nRelated\n\nPrivacy\n\nDeveloper documentation\n\nUser Notifications\n\nVideos\nSend communication and Time Sensitive notifications\nThe Push Notifications primer"
  },
  {
    "title": "Printing",
    "url": "https://developer.apple.com/design/human-interface-guidelines/printing",
    "html": "Printing\nAn iOS, iPadOS, macOS, or visionOS app can integrate system-provided print functionality when it makes sense, presenting custom printer- and document-specific options if necessary.\n\nBest practices\n\nMake printing discoverable. Help people find your print action by placing it in standard system locations. For example, include a Print item in your macOS app’s File menu; in your iOS or iPadOS app, add a toolbar or navigation bar button that opens an action sheet. If your macOS app has a toolbar, you might want to put a Print button there, too, but consider making it an optional button that people can add when they customize the toolbar.\n\nPresent a printing option only when it’s possible. If there’s nothing onscreen to print, or no printers are available, dim the Print item in a macOS app’s File menu and remove the Print action from the Action sheet in an iOS or iPadOS app. If you implement a custom print button, dim or hide it when printing isn’t possible.\n\nPresent relevant printing options. If it makes sense to offer options like selecting a page range, requesting multiple copies, or printing on both sides — and the printer supports the options — use the system-provided view to present them.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or visionOS. Not supported in tvOS or watchOS.\n\nmacOS\n\nIf your macOS app offers app-specific print options that the system doesn’t offer, consider creating a custom category for the print panel. By default, the print panel offers several categories of settings, such as Layout, Paper Handling, and Media & Quality. Give your custom category a unique name, such as your app name, and include options that help people have a great print experience in your app. For example, Keynote offers presentation-specific options, like the ability to print presenter notes, slide backgrounds, and skipped slides.\n\nIf your app supports document-specific page settings, consider presenting a page setup dialog. A page setup dialog includes rarely changed settings for page size, orientation, and scaling that apply to printing a particular document. If this makes sense in your app, avoid implementing features the system already provides. For example, you don’t need to include options like changing the page orientation or printing in reverse order because the system implements these options.\n\nMake sure interdependencies between options are clear. For example, if double-sided printing is available, an option to print on transparencies becomes unavailable.\n\nSeparate advanced features from frequently used features. Consider using a disclosure control to hide advanced options until they’re needed. Label advanced options as Advanced Options.\n\nConsider letting people preview the effect of a setting. For example, you could update a thumbnail image to show the effect of changing a tone control.\n\nConsider storing modified settings with the document. At minimum, it makes sense to store print settings until the document is closed in case people want to print it again.\n\nResources\nRelated\n\nFile management\n\nFile menu\n\nDeveloper documentation\n\nUIPrintInteractionController — UIKit\n\nNSDocument — AppKit"
  },
  {
    "title": "Managing accounts",
    "url": "https://developer.apple.com/design/human-interface-guidelines/managing-accounts",
    "html": "Managing accounts\nWhen it doesn’t create an unnecessary barrier to your experience, an account can be a convenient way for people to access their content and track personal details.\n\nAsk people to create an account only if your core functionality requires it; otherwise, let people enjoy your app or game without one. If you require an account, consider using Sign in with Apple to give people a consistent sign-in experience they can trust and the convenience of not having to remember multiple accounts and authentication methods.\n\nBest practices\n\nExplain the benefits of creating an account and how to sign up. If your app or game requires an account, write a brief, friendly description of the reasons for the requirement and its benefits. Display this message in your sign-in view.\n\nDelay sign-in for as long as possible. People often abandon apps when they’re forced to sign in before they can do anything useful. To help avoid this situation, give people a chance to get a sense of what your app or game does before asking them to make a commitment to it. For example, a shopping app might let people browse as much as they want, requiring sign-in only when they’re ready to make a purchase.\n\nIf you don’t use Sign in with Apple in your iOS, iPadOS, macOS, or visionOS app, prefer using a passkey. Passkeys simplify account creation and authentication, eliminating the need for people to create or enter passwords. When an app supports passkeys, people simply provide their user name when creating a new account or signing in to an existing one. For developer guidance, see Supporting passkeys. If you need to continue using passwords for authentication, augment security by requiring two-factor authentication (for developer guidance, see Securing Logins with iCloud Keychain Verification Codes).\n\nAlways identify the authentication method you offer. For example, if you display a button for signing in to your app with Face ID, title it using a phrase like “Sign In with Face ID” instead of a generic phrase like “Sign In.”\n\nRefer only to authentication methods that are available in the current context. For example, don’t reference Face ID on a device that doesn’t offer it. Check the device’s capabilities and use the appropriate terminology. For developer guidance, see LABiometryType.\n\nIn general, avoid offering an app-specific setting for opting in to biometric authentication. People turn on biometric authentication at the system level, so presenting an in-app setting is redundant and could be confusing.\n\nAvoid using the term passcode to refer to account authentication. People create a passcode to unlock their device or authenticate for Apple services. If you use the term in your interface, people might think you’re asking them to reuse their passcode in your app or game.\n\nDeleting accounts\n\nIf you help people create an account within your app or game, you must also help them delete it, not just deactivate it. In addition to following the guidelines below, be sure to understand and comply with your region’s legal requirements related to account deletion and the right to be forgotten.\n\nImportant\n\nIf legal requirements compel your app to maintain accounts or information — such as digital health records — or to follow a specific account-deletion process, clearly describe the situation so people can understand the information or accounts you must maintain and the process you must follow.\n\nProvide a clear way to initiate account deletion within your app or game. If people can’t perform account deletion within your app, you must provide a direct link to the webpage on which people can do so. Make the link easy to discover — for example, don’t bury it in your Privacy Policy or Terms of Service pages.\n\nDeveloper note\n\nIf people used Sign in with Apple to create an account within your app, you revoke the associated tokens when they delete their account. See Revoke tokens.\n\nProvide a consistent account-deletion experience whether people perform it within your app or game or on the website. For example, avoid making one version of the deletion flow longer or more complicated than the other.\n\nConsider letting people schedule account deletion to occur in the future. People can appreciate the opportunity to use their remaining services or wait until their subscription auto-renews before deleting their account. If you offer a way to schedule account deletion, offer an option for immediate deletion as well.\n\nTell people when account deletion will complete, and notify them when it’s finished. Because it can sometimes take a while to fully delete an account, it’s essential to keep people informed about the status of the deletion process so they know what to expect.\n\nIf you support in-app purchases, help people understand how billing and cancellation work when they delete their account. For example, you might need to help people understand the following scenarios:\n\nBilling for an auto-renewable subscription continues through Apple until people cancel the subscription, regardless of whether they delete their account.\n\nAfter they delete their account, people need to cancel their subscription or request a refund.\n\nIn addition to helping people understand these scenarios, provide information that describes how to cancel subscriptions and manage purchases. For guidance, see Helping people manage their subscriptions and Providing help with in-app purchases.\n\nNote\n\nEven if people didn’t use your app to purchase the subscription, you still need to support account deletion.\n\nTV provider accounts\n\nMany popular TV providers let people sign in to their accounts at the system level, eliminating the need to authenticate on an app-by-app basis. If your TV provider app requires people to sign in, use TV Provider Authentication to provide the most efficient onboarding experience.\n\nAvoid displaying a sign-out option when people are signed in at the system level. If your app must include a sign-out option, invoking it needs to prompt people to navigate to Settings > TV Provider to sign out of their account.\n\nNever instruct people to sign out by adjusting privacy controls. The TV provider controls in Settings > Privacy aren’t a sign-out mechanism. These settings help people manage the apps that can access their TV provider account.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, or visionOS.\n\ntvOS\n\nMost people interact with Apple TV using a remote, not a keyboard, so ask for the minimum amount of information necessary.\n\nPrefer letting people use another device to sign up or authenticate. When you configure your app’s associated domains, Apple TV can work with other devices to safely suggest sign-in credentials, including Sign in with Apple. For developer guidance, see Configuring an associated domain.\n\nWhen people are signed in to a shared account, avoid asking them to choose their profile every time they become the current user. In tvOS 16 and later, your app can share its credentials with all users while storing each individual’s profile and user data separately. When you support this type of sharing, your app can automatically use the current user’s profile without asking each person to sign in separately to a shared account. For developer guidance, see kSecUseUserIndependentKeychain and User Management Entitlement.\n\nMinimize data entry. If you need to gather more than a small amount of information, ask people to visit a website from another device. If you need an email address, show the email keyboard screen, which includes a list of recently entered addresses.\n\nwatchOS\n\nUse iCloud synchronization to provide access to the Keychain, letting people autofill user names and passwords and preserve app settings.\n\nResources\nRelated\n\nOnboarding\n\nSign in with Apple\n\nDeveloper documentation\n\nSupporting passkeys — Authentication Services\n\nVideos\nMove beyond passwords\nDiscover account-driven User Enrollment\nSimplify sign in for your tvOS apps"
  },
  {
    "title": "Live-viewing apps",
    "url": "https://developer.apple.com/design/human-interface-guidelines/live-viewing-apps",
    "html": "Live-viewing apps\nAs you design a live-viewing app, prioritize the content and create fun, fluid interactions that encourage immersion in the live-viewing experience.\n\nLive-viewing apps have some unique design challenges that set them apart from other tvOS apps. Above all, your app needs to elevate and prioritize live content. In every screen, draw people’s attention to live content and make sure they can distinguish it from video-on-demand (VOD) content at a glance.\n\nBest practices\n\nFeature live content prominently and make it easy to access. People come to your app to watch TV, so you want to minimize the interval between starting your app and playing content. When live content is in the first tab, people don’t have to tap more than once to start viewing it.\n\nLet people tap once — or not at all — to start playback. For example, you might display a Watch Now button on top of featured or recently viewed live content. When people tap this button, it immediately disappears and playback begins, replacing your app’s UI with a full-screen, immersive viewing experience.\n\nMake sure live content looks live. People need to be able to distinguish live content from VOD content. Although simply playing live content is the best way to make it feel live, you can also help people recognize live content by marking it in some way. For example, you might display other channels in a collection row titled “Live” and give each item a visual indicator — such as a badge, symbol, or sash — that identifies it as live.\n\nConsider indicating the progress of currently playing live content. People appreciate knowing where they’ll land when they jump into in-progress live content. You can use a progress bar or other indicator to show people how much content remains.\n\nGive people additional actions and viewing alternatives. In addition to playback, which always needs to be the primary action, make it easy for people to record, restart, download, and perform other actions that you support. Display these actions in the same order throughout your app — for example, Watch, Start Over, Record, and Favorite. Also, if the currently playing content is playing again at other times, show this information so that people can schedule their viewing.\n\nConsider using a content footer for browsing channels during playback. A content footer lets people browse without taking them out of the live playback experience. If you decide to use a content footer, be sure to:\n\nGive it a subtle treatment, such as a darkening, to keep text legible and help all items remain visually distinct from the content playing behind it.\n\nMake it easy for people to identify the thumbnail that represents the currently playing content by, for example, badging the thumbnail or tinting its progress bar.\n\nMatch the categories in the content footer to those in your electronic program guide (for related guidance, see EPG experience).\n\nDesign a simple, predictable way for people to invoke and dismiss the content footer — for example, if swiping up invokes the footer, people would expect swiping down to dismiss it.\n\nProvide instant visual feedback when people change channels. Immediately providing feedback after a channel change is essential for two reasons. First, people need confirmation that they’ve arrived at the channel they want. Second, providing feedback can give the streaming content some time to load.\n\nMatch audio to the current context. When people start playing live content, they expect the audio to match even if they switch to browsing while the content plays in the background. However, when people navigate away from the live tab in your app, they leave the live-viewing context, so audio needs to stop.\n\nEPG experience\n\nLive-viewing apps typically provide an electronic program guide (EPG) that contains information about scheduled programming. Follow these guidelines to give people a streamlined EPG experience that feels designed specifically for your live-viewing app.\n\nProminently display current information and make it easy to return to playback. When people first open the EPG, the current program, channel, and time needs to be easy to spot so they can instantly return to the current channel.\n\nMake browsing the EPG effortless. A typical EPG contains a lot of information, so it’s important to help people page, scroll, or jump through it easily. Also consider providing a My Channels group or a Favorites group that gives people quick access to the content they view most often.\n\nGroup content into familiar categories to help people find it more easily. For example, you might use categories like Movies, TV Shows, Kids, Sports, and Popular. If your app includes a content footer, organize content thumbnails using the same categories as in the EPG.\n\nLet people browse the EPG without leaving their current content. For example, you can continue playing content in a picture-in-picture (PiP) mode or in the background while people browse the EPG.\n\nCloud DVR\n\nIf you support digital video recording (DVR) in the cloud, follow these guidelines to provide a great recording experience in your live-viewing app.\n\nLet people start and stop recording from the info panel. While live-streaming, people want to reveal the info panel to start recording immediately.\n\nLet people record a future program in a view that provides details about the content. Also, give people the option to record only that program or all future episodes.\n\nHelp people adapt the recording experience to their needs. Let people specify precisely what they want to record, such as only the current episode, only new episodes, or only games that involve specific teams.\n\nAllow playback and other content-specific actions within your cloud DVR area. When people open a view that displays content details in your cloud DVR section, let them play or delete content and, if applicable, adjust recording settings.\n\nConsider offering a control that lets people manage cloud DVR settings. For example, you might let people delete recordings they’ve already watched or content that’s older than a certain number of days. Ideally, help people avoid running out of space by letting them set up automatic storage management, which overwrites the oldest or already viewed content.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, visionOS, or watchOS.\n\nResources\nRelated\n\nRemotes\n\nPlaying video"
  },
  {
    "title": "Loading",
    "url": "https://developer.apple.com/design/human-interface-guidelines/loading",
    "html": "Loading\nWhile content loads, avoid showing a blank view or static content that might make people think your app or game is sluggish or frozen.\n\nBest practices\n\nShow content as soon as possible. If you make people wait for loading to complete before displaying anything, they may interpret the lack of content as sluggishness. Instead, show placeholder text, graphics, or animations where content isn’t available yet, and replace these elements as the content loads. When possible, preload upcoming content in the background, such as while an animation is playing or people are navigating a level or menu.\n\nClearly communicate that content is loading and how long it might take to complete. Ideally, content displays instantly, but for situations where loading takes more than a moment or two, you can use system-provided components — called progress indicators — to show that content is loading. In general, you use a determinate progress indicator when you know how long loading will take, and you use an indeterminate progress indicator when you can’t quantify loading duration. In macOS, for example, the Finder combines a determinate progress bar with brief explanatory text to help people gauge how long a file copy will take to complete. For guidance, see Progress indicators.\n\nIf loading takes an unavoidably long time, consider giving people something to view while they wait. For example, you might provide hints about gameplay, play a short video or animation, or display informative placeholder graphics. Gauge the remaining loading time as accurately as possible to help you avoid giving people too little time to enjoy interesting content or having so much time that you need to repeat content.\n\nConsider customizing loading views. Although standard progress indicators are usually OK, they can sometimes feel out of context. Consider designing a more engaging experience by using custom animations and elements that match the style of your app or game.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or visionOS.\n\nwatchOS\n\nAs much as possible, avoid showing a loading indicator in your watchOS experience. People expect quick interactions with their Apple Watch, so aim to display content immediately. In situations where content needs a second or two to load, it’s better to display a loading indicator than a blank screen.\n\nResources\nRelated\n\nLaunching\n\nProgress indicators"
  },
  {
    "title": "Launching",
    "url": "https://developer.apple.com/design/human-interface-guidelines/launching",
    "html": "Launching\nPeople appreciate a streamlined launch experience that helps them start using your app or game immediately.\n\nBest practices\n\nIf the platform requires it, provide a launch screen. In iOS, iPadOS, and tvOS, the system displays a launch screen the moment your app or game starts and quickly replaces it with your first screen, giving people the impression that your experience is fast and responsive. The ideal launch screen is effectively invisible to people, because it simply provides a context for your initial content; for guidance, see Launch screens. macOS, visionOS, and watchOS apps don’t need launch screens.\n\nAsk for initial setup information only when necessary. Help people accomplish something as soon as they start your app or game, letting them be successful before you request additional information. As much as possible, get setup information from existing device settings and defaults. If people need to sign in before doing anything useful, consider offering Sign in with Apple, or relying on a synchronization service, such as iCloud.\n\nAsk for permission to access private data at the right time. When possible, avoid asking for permission to access private data when your app launches; instead, request permission after people indicate their interest in a feature that requires their private data. For example, a navigation app probably needs access to location information right away, but an app that includes a navigation-related feature doesn’t need location information until people want to use that feature. In visionOS, an app must be running in a Full Space before it can request access to information such as hand position or details about a person’s surroundings. For guidance, see Privacy.\n\nGive people time to enjoy your app before showing supplementary information or asking for a review. At first launch, people want to dive right in; they don’t want to be required to read a lot of content or provide a rating before they get a sense of the experience you offer. To help you streamline first launch, consider:\n\nLetting the App Store display agreements and disclaimers so people can read them before downloading your app\n\nAsking for ratings and reviews after people gain enough experience with your app to accurately rate it and provide a substantive review that potential customers might find helpful (for guidance, see Ratings and reviews)\n\nRestore the previous state when your app restarts so people can continue where they left off. Avoid making people retrace steps to reach their previous location in your app or game. Restore granular details of the previous state as much as possible. For example, scroll the view to people’s most recent position, and display windows in the same state and location in which people left them.\n\nLaunch screens\n\nNot every platform requires a launch screen.\n\niOS, iPadOS, and tvOS apps must supply a launch screen.\n\nmacOS, visionOS, and watchOS apps don’t need a launch screen.\n\nA launch screen isn’t an onboarding experience or a splash screen, and it isn’t an opportunity for artistic expression. A launch screen’s sole function is to enhance the perception of your experience as quick to launch and immediately ready to use.\n\nDesign a launch screen that’s nearly identical to the first screen of your app. If you include elements that look different when the app finishes launching, people may experience an unpleasant flash between the launch screen and the first screen of the app. Also make sure that your launch screen matches the device’s current appearance, such as Dark Mode.\n\nLaunch screen\n\nFirst screen\n\nAvoid including text on your launch screen. Because the content in a launch screen doesn’t change, any text you display won’t be localized.\n\nDownplay the launch experience. Design a launch screen that smooths the transition to the first screen of your app or game; avoid designing a launch screen that delays people from immediately getting into the experience.\n\nDon’t advertise. The launch screen isn’t a branding opportunity. Avoid creating a screen that looks like a splash screen or an “About” window, and don’t include logos or other branding elements unless they’re a fixed part of your app’s first screen. If your game or other immersive app displays a solid color before transitioning to the first screen, create a launch screen that displays only that solid color.\n\nPlatform considerations\n\nNo additional considerations for macOS or watchOS.\n\niOS, iPadOS\n\nLaunch in the appropriate orientation. If your app supports both portrait and landscape modes, launch using the device’s current orientation. If your app only runs in one orientation, launch in that orientation and let people rotate the device if necessary. Ensure a landscape-only app responds correctly, regardless of whether people entered landscape orientation by rotating the device left or right. For guidance, see Layout.\n\ntvOS\n\nUnlike the layered images throughout much of a tvOS app, the launch screen is static.\n\nIn a live-viewing app, consider automatically starting playback soon after people start the app. People come to your app to watch TV, so you might want to start playing new or recently viewed live content after a few seconds of inactivity. For guidance, see Live-viewing apps.\n\nvisionOS\n\nLaunch as quickly as possible. If your app doesn’t load content quickly, the system displays a window that contains your app icon. This window uses the same background appearance and dimensions as the first window you open while running in the Shared Space; if your app is running in a Full Space, the window uses a system-defined size.\n\nConsider launching in the Shared Space even if your app is fully immersive. Opening a window in the Shared Space lets you provide more context about your app while giving it time to load, and it also lets you present a control that people can use to open your fully immersive experience. In general, people appreciate being able to choose when to transition to a Full Space, especially if they’re currently running other apps in the Shared Space. For guidance, see Immersive experiences.\n\nResources\nRelated\n\nOnboarding\n\nLoading\n\nDeveloper documentation\n\nSpecifying your app’s launch screen — Xcode\n\nResponding to the launch of your app — UIKit\n\nVideos\nOptimizing App Launch\nLove at First Launch\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Buttons",
    "url": "https://developer.apple.com/design/human-interface-guidelines/buttons",
    "html": "Buttons\nA button initiates an instantaneous action.\n\nVersatile and highly customizable, buttons give people simple, familiar ways to do tasks in your app. In general, a button combines three attributes to clearly communicate its function:\n\nStyle. A visual style based on size, color, and shape.\n\nContent. The symbol (or interface icon), text label, or both that a button displays to convey its purpose.\n\nRole. A system-defined role that identifies a button’s semantic meaning and can affect its appearance.\n\nIn addition to all-purpose buttons, many common button styles — like Info, Close, and Contact Add — perform familiar tasks throughout the system. There are also many button-like components that have distinct appearances and behaviors for specific use cases, like toggles, pop-up buttons, and segmented controls.\n\nBest practices\n\nWhen buttons are instantly recognizable and easy to understand, an app tends to feel intuitive and well designed.\n\nMake buttons easy for people to use. It’s essential to include enough space around a button so that people can visually distinguish it from surrounding components and content. Giving a button enough space is also critical for helping people select or activate it, regardless of the method of input they use. As a general rule, a button needs a hit region of at least 44x44 pt — in visionOS, 60x60 pt — to ensure that people can select it easily, whether they use a fingertip, a pointer, their eyes, or a remote.\n\nEnsure that each button clearly communicates it purpose. A button always includes a text label or a symbol (or interface icon) — and sometimes a combination of both — to help people predict what it does.\n\nStyle\n\nSystem buttons offer a range of styles that support extensive customization while providing built-in interaction states, accessibility support, and appearance adaptation. Different platforms define different styles that help you communicate hierarchies of actions in your app.\n\nYou can configure a system button to use any combination of style and size. By default, a system button uses a size-specific corner radius and your app’s accent color. If necessary, you can change these attributes, in addition to attributes that control content layout and the presence of an activity indicator.\n\nIn general, use a button that has a visible background for the most likely action in a view. Buttons that have a fill or background shape tend to be the most visually prominent, helping people quickly identify the action they’re most likely to want.\n\nConsider keeping the number of visually prominent buttons to one or two per view. Giving people too many prominent buttons increases their cognitive load, requiring them to spend more time considering options before making a choice.\n\nUse style — not size — to visually distinguish the preferred choice among multiple options. When you use buttons of the same size to offer two or more options, you signal that the options form a coherent set of choices. If you want to highlight the preferred or most likely option in a set, use a more prominent button style for that option and a less prominent style for the remaining ones.\n\nContent\n\nCreate button content that helps people instantly understand what the button does. Depending on the platform, a button can contain an icon, text, or both.\n\nNote\n\nIn macOS and visionOS, the system displays a tooltip after people hover over a button for a moment. A tooltip displays a brief phrase that explains what a button does; for guidance, see Offering help.\n\nConsider using an icon when a button performs a familiar action that people associate with the icon. For example, people can predict that a button containing the square.and.arrow.up symbol will help them perform share-related activities. If it makes sense to use an icon in your button, consider using an existing or customized symbol.\n\nConsider using text when a short label communicates more clearly than an icon. To use text, write a few words that succinctly describe what the button does. Using title-style capitalization, consider starting the label with a verb to help convey the button’s action — for example, a button that lets people add items to their shopping cart might use the label “Add to Cart.”\n\nRole\n\nA system button can have one of the following roles:\n\nNormal. No specific meaning.\n\nPrimary. The button is the default button — the button people are most likely to choose.\n\nCancel. The button cancels the current action.\n\nDestructive. The button performs an action that can result in data destruction.\n\nA button’s role can have additional effects on the appearance you configure. For example, the system can use bold text for the label in a primary button, whereas a destructive button uses a red color.\n\nAssign the primary role to the button people are most likely to choose. When a primary button responds to the Return key, it makes it easy for people to quickly confirm their choice. In addition, when the button is in a temporary view — like a sheet, an editable view, or an alert — assigning it the primary role means that the view can automatically close when people press Return.\n\nDon’t assign the primary role to a button that performs a destructive action, even if that action is the most likely choice. Because of its visual prominence, people sometimes choose a primary button without reading it first. Help people avoid losing content by assigning the primary role to nondestructive buttons.\n\nPlatform considerations\n\nNo additional considerations for tvOS.\n\niOS, iPadOS\n\niOS and iPadOS have four button styles, each available in three sizes. Each combination of size and style has a different level of visual prominence.\n\nInclude additional text below the label only if it provides useful details. Additional text uses a smaller text size than the label, showing that the information is secondary to the button’s action. For example, you might add text to update an Add to Cart button with the number of items in the cart. Avoid writing a subtitle that explains more about what the button does; make sure a button’s containing view, label or image, style, and role provide all the information people need to understand its action.\n\nConfigure a button to display an activity indicator when you need to provide feedback about an action that doesn’t instantly complete. Displaying an activity indicator within a button can save space in your user interface while clearly communicating the reason for the delay. To help clarify what’s happening, you can also configure the button to display a different label alongside the activity indicator. For example, the label “Checkout” could change to “Checking out…” while the activity indicator is visible. When a delay occurs after people click or tap your configured button, the system displays the activity indicator next to the original or alternative label, hiding the button image, if there is one.\n\nmacOS\n\nSeveral specific button types are unique to macOS.\n\nPush buttons\n\nThe standard button type in macOS is known as a push button. You can configure a push button to display text, a symbol, an interface icon, or an image, or a combination of text and image content. Push buttons can act as the default button in a view and you can tint them.\n\nUse a flexible-height push button only when you need to display tall or variable height content. Flexible-height buttons support the same configurations as regular push buttons — and they use the same corner radius and content padding — so they look consistent with other buttons in your interface. If you need to present a button that contains two lines of text or a tall icon, use a flexible-height button; otherwise, use a standard push button. For developer guidance, see NSButton.BezelStyle.flexiblePush.\n\nAppend a trailing ellipsis to the title when a push button opens another window, view, or app. Throughout the system, an ellipsis in a control title signals that people can provide additional input. For example, the Edit buttons in the AutoFill pane of Safari Settings include ellipses because they open other views that let people modify autofill values.\n\nConsider supporting spring loading. On systems with a Magic Trackpad, spring loading lets people activate a button by dragging selected items over it and force clicking — that is, pressing harder — without dropping the selected items. After force clicking, people can continue dragging the items, possibly to perform additional actions.\n\nGradient buttons\n\nA gradient button initiates an action related to a view, like adding or removing rows in a table.\n\nGradient buttons contain symbols or interface icons — not text — and you can configure them to behave like push buttons, toggles, or pop-up buttons. The buttons appear in close proximity to their associated view — usually within or beneath it — so people know which view the buttons affect.\n\nUse gradient buttons in a view, not in the window frame. Gradient buttons aren’t intended for use in toolbars or status bars. If you need a button in a toolbar, use a toolbar item.\n\nPrefer using a symbol in a gradient button. SF Symbols provides a wide range of symbols that automatically receive appropriate coloring in their default state and in response to user interaction.\n\nAvoid using labels to introduce gradient buttons. Because gradient buttons are closely connected with a specific view, their purpose is generally clear without the need for descriptive text.\n\nFor developer guidance, see NSButton.BezelStyle.smallSquare.\n\nHelp buttons\n\nA help button appears within a view and opens app-specific help documentation.\n\nHelp buttons are circular, consistently sized buttons that contain a question mark. For guidance on creating help documentation, see Offering help.\n\nUse the system-provided help button to display your help documentation. People are familiar with the appearance of the standard help button and know that choosing it opens help content.\n\nWhen possible, open the help topic that’s related to the current context. For example, the help button in the Rules pane of Mail settings opens the Mail User Guide to a help topic that explains how to change these settings. If no specific help topic applies directly to the current context, open the top level of your app’s help documentation when people choose a help button.\n\nInclude no more than one help button per window. Multiple help buttons in the same context make it hard for people to predict the result of clicking one.\n\nPosition help buttons where people expect to find them. Use the following locations for guidance.\n\nView style\n\n\t\n\nHelp button location\n\n\n\n\nDialog with dismissal buttons (like OK and Cancel)\n\n\t\n\nLower corner, opposite to the dismissal buttons and vertically aligned with them\n\n\n\n\nDialog without dismissal buttons\n\n\t\n\nLower-left or lower-right corner\n\n\n\n\nSettings window or pane\n\n\t\n\nLower-left or lower-right corner\n\nUse a help button within a view, not in the window frame. For example, avoid placing a help button in a toolbar or status bar.\n\nAvoid displaying text that introduces a help button. People know what a help button does, so they don’t need additional descriptive text.\n\nImage buttons\n\nAn image button appears in a view and displays an image, symbol, or interface icon. You can configure an image button to behave like a push button, toggle, or pop-up button.\n\nUse an image button in a view, not in the window frame. For example, avoid placing an image button in a toolbar or status bar. If you need to use an image as a button in a toolbar, use a toolbar item. See Toolbars.\n\nInclude about 10 pixels of padding between the edges of the image and the button edges. An image button’s edges define its clickable area even when they aren’t visible. Including padding ensures that a click registers correctly even if it’s not precisely within the image. In general, avoid including a system-provided border in an image button; for developer guidance, see isBordered.\n\nIf you need to include a label, position it below the image button. For related guidance, see Labels.\n\nvisionOS\n\nA visionOS button typically includes a visible background that can help people see it, and the button plays sound to provide feedback when people interact with it.\n\nPlay\n\nThere are three standard button shapes in visionOS. Typically, an icon-only button uses a circle shape, a text-only button uses a roundedRectangle or capsule shape, and a button that includes both an icon and text uses the capsule shape.\n\nvisionOS buttons use different visual styles to communicate five different interaction states.\n\nIdle\n\nHover\n\nSelected\n\nToggled\n\nUnavailable\n\nNote\n\nIn visionOS, buttons don’t support custom hover effects.\n\nIn addition to the five states shown above, a button can also reveal a tooltip when people look at it for a brief time. In general, buttons that contain text don’t need to display a tooltip because the button’s descriptive label communicates what it does.\n\nPlay\n\nIn visionOS, buttons can have the following sizes.\n\nShape\n\n\t\n\nMini (28 pt)\n\n\t\n\nSmall (32 pt)\n\n\t\n\nRegular (44 pt)\n\n\t\n\nLarge (52 pt)\n\n\t\n\nExtra Large (64 pt)\n\n\n\n\nCircular\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nCapsule (text only)\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nCapsule (text and icon)\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nRounded rectangle\n\n\t\n\n\t\n\n\t\n\n\t\n\n\t\n\nPrefer buttons that have a discernible background shape and fill. It tends to be easier for people to see a button when it’s enclosed in a shape that uses a contrasting background fill. The exception is a button in a toolbar, context menu, alert, or ornament where the shape and material of the larger component make the button comfortably visible. The following guidelines can help you ensure that a button looks good in different contexts:\n\nWhen a button appears on top of a glass window, use the thin material as the button’s background.\n\nWhen a button appears floating in space, use the glass material for its background.\n\nAvoid creating a custom button that uses a white background fill and black text or icons. The system reserves this visual style to convey the toggled state.\n\nIn general, prefer circular or capsule-shape buttons. People’s eyes tend to be drawn toward the corners in a shape, making it difficult to keep looking at the shape’s center. The more rounded a button’s shape, the easier it is for people to look steadily at it. When you need to display a button by itself, prefer a capsule-shape button.\n\nProvide enough space around a button to make it easy for people to look at it. Aim to place buttons so their centers are always at least 60 points apart. If your buttons measure 60 points or larger, add four points of padding around them to keep the hover effect from overlapping. Also, it’s usually best to avoid displaying small or mini buttons in a vertical stack or horizontal row.\n\nChoose the right shape if you need to display text-labeled buttons in a stack or row. Specifically, prefer the rounded-rectangle shape in a vertical stack of buttons and prefer the capsule shape in a horizontal row of buttons.\n\nUse standard controls to take advantage of the audible feedback sounds people already know. Audible feedback is especially important in visionOS, because the system doesn’t play haptics.\n\nwatchOS\n\nwatchOS displays all buttons using the capsule button shape. In watchOS 10, the buttons are larger and have material backgrounds that adapt to underlying content to ensure legibility.\n\nUse the toolbar to place buttons in the corners. The system automatically moves the time and title to accommodate toolbar buttons.\n\nToolbar buttons automatically inherit the app’s tint color. Only change the tint color when you need to convey important information, such as when a button performs a destructive action.\n\nPrefer buttons that span the width of the screen for primary actions in your app. Full-width buttons look better and are easier for people to tap. If two buttons must share the same horizontal space, use the same height for both, and use images or short text titles for each button’s content.\n\nUse toolbar buttons to provide either navigation to related areas or contextual actions for the view’s content. These buttons provide access to additional information or secondary actions for the view’s content.\n\nUse the same height for vertical stacks of one- and two-line text buttons. As much as possible, use identical button heights for visual consistency.\n\nResources\nRelated\n\nPop-up buttons\n\nPull-down buttons\n\nToggles\n\nSegmented controls\n\nLocation button\n\nDeveloper documentation\n\nButton — SwiftUI\n\nUIButton — UIKit\n\nNSButton — AppKit\n\nVideos\nDesign for spatial user interfaces\nMeet the UIKit button system\nWhat's new in UIKit\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nNoted that visionOS buttons don’t support custom hover effects.\n\n\n\n\nDecember 5, 2023\n\n\t\n\nClarified some terminology and guidance for buttons in visionOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using buttons in watchOS."
  },
  {
    "title": "Collaboration and sharing",
    "url": "https://developer.apple.com/design/human-interface-guidelines/collaboration-and-sharing",
    "html": "Collaboration and sharing\nGreat collaboration and sharing experiences are simple and responsive, letting people engage with the content while communicating effectively with others.\n\nSystem interfaces and the Messages app can help you provide consistent and convenient ways for people to collaborate and share. For example, people can share content or begin a collaboration by dropping a document into a Messages conversation or selecting a destination in the familiar share sheet.\n\nAfter a collaboration begins, people can use the Collaboration button in your app to communicate with others, perform custom actions, and manage details. In addition, people can receive Messages notifications when collaborators mention them, make changes, join, or leave.\n\nYou can take advantage of Messages integration and the system-provided sharing interfaces whether you implement collaboration and sharing through CloudKit, iCloud Drive, or a custom solution. To offer these features when you use a custom collaboration infrastructure, make sure your app also supports universal links (for developer guidance, see Supporting universal links in your app).\n\nIn addition to helping people share and collaborate on documents, visionOS supports immersive sharing experiences through SharePlay. For guidance, see SharePlay.\n\nBest practices\n\nPlace the Share button in a convenient location, like a toolbar, to make it easy for people to start sharing or collaborating. In iOS 16, the system-provided share sheet includes ways to choose a file-sharing method and set permissions for a new collaboration; iPadOS 16 and macOS 13 introduce similar appearance and functionality in the sharing popover. In your SwiftUI app, you can also enable sharing by presenting a share link that opens the system-provided share sheet when people choose it; for developer guidance, see ShareLink.\n\nIf necessary, customize the share sheet or sharing popover to offer the types of file sharing your app supports. If you use CloudKit, you can add support for sending a copy of a file by passing both the file and your collaboration object to the share sheet. Because the share sheet has built-in support for multiple items, it automatically detects the file and makes the “send copy” functionality available. With iCloud Drive, your collaboration object supports “send copy” functionality by default. For custom collaboration, you can support “send copy” functionality in the share sheet by including a file — or a plain text representation of it — in your collaboration object.\n\nWrite succinct phrases that summarize the sharing permissions you support. For example, you might write phrases like “Only invited people can edit” or “Everyone can make changes.” The system uses your permission summary in a button that reveals a set of sharing options that people use to define the collaboration.\n\nProvide a set of simple sharing options that streamline collaboration setup. You can customize the view that appears when people choose the permission summary button to provide choices that reflect your collaboration functionality. For example, you might offer options that let people specify who can access the content and whether they can edit it or just read it, and whether collaborators can add new participants. Keep the number of custom choices to a minimum and group them in ways that help people understand them at a glance.\n\nProminently display the Collaboration button as soon as collaboration starts. The system-provided Collaboration button reminds people that the content is shared and identifies who’s sharing it. Because the Collaboration button typically appears after people interact with the share sheet or sharing popover, it works well to place it next to the Share button.\n\nProvide custom actions in the collaboration popover only if needed. Choosing the Collaboration button in your app reveals a popover that consists of three sections. The top section lists collaborators and provides communication buttons that can open Messages or FaceTime, the middle section contains your custom items, and the bottom section displays a button people use to manage the shared file. You don’t want to overwhelm people with too much information, so it’s crucial to offer only the most essential items that people need while they use your app to collaborate. For example, Notes summarizes the most recent updates and provides buttons that let people get more information about the updates or view more activities.\n\nIf it makes sense in your app, customize the title of the modal view’s collaboration-management button. People choose this button — titled “Manage Shared File” by default — to reveal the collaboration-management view where they can change settings and add or remove collaborators. If you use CloudKit sharing, the system provides a management view for you; otherwise, you create your own.\n\nConsider posting collaboration event notifications in Messages. Choose the type of event that occurred — such as a change in the content or the collaboration membership, or the mention of a participant — and include a universal link people can use to open the relevant view in your app. For developer guidance, see SWHighlightEvent.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or macOS. Not available in tvOS.\n\nvisionOS\n\nBy default, the system supports screen sharing for an app running in the Shared Space by streaming the current window to other collaborators. If one person transitions the app to a Full Space while sharing is in progress, the system pauses the stream for other people until the app returns to the Shared Space. For guidance, see Immersive experiences.\n\nwatchOS\n\nIn your SwiftUI app running in watchOS, use ShareLink to present the system-provided share sheet.\n\nResources\nRelated\n\nActivity views\n\nDeveloper documentation\n\nShared with You\n\nShareLink — SwiftUI\n\nVideos\nDesign for Collaboration with Messages\nEnhance collaboration experiences with Messages\nIntegrate your custom collaboration app with Messages\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded artwork illustrating button placement and various types of collaboration permissions.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nNew page."
  },
  {
    "title": "Charting data",
    "url": "https://developer.apple.com/design/human-interface-guidelines/charting-data",
    "html": "Charting data\nPresenting data in a chart can help you communicate information with clarity and appeal.\n\nCharts provide efficient ways to communicate complex information without requiring people to read and interpret a lot of text. The graphical nature of charts also gives you additional opportunities to express the personality of your experience and add visual interest to your interface. To learn about the components you use to create a chart, see Charts.\n\nA chart can range from a simple graphic that provides glanceable information to a rich, interactive experience that can form the centerpiece of your app and encourage people to explore the data from various perspectives. Whether simple or complex, you can use charts to help people perform data-driven tasks that are important to them, such as:\n\nAnalyzing trends based on historical or predicted values\n\nVisualizing the current state of a process, system, or quantity that changes over time\n\nEvaluating different items — or the same item at different times — by comparing data across multiple categories\n\nNot every collection of data needs to be displayed in a chart. If you simply need to provide data — and you don’t need to convey information about it or help people analyze it — consider offering the data in other ways, such as in a list or table that people can scroll, search, and sort.\n\nBest practices\n\nUse a chart when you want to highlight important information about a dataset. Charts are visually prominent, so they tend to draw people’s attention. Take advantage of this prominence by clearly communicating what people can learn from the data they care about.\n\nKeep a chart simple, letting people choose when they want additional details. Resist the temptation to pack as much data as possible into a chart. Too much data can make a chart visually overwhelming and difficult to use, obscuring the relationships and other information you want to convey. If you have a lot of data to present — or a lot of functionality to provide — consider giving people a way to reveal it gradually. For example, you might let people choose to view different levels of detail or subsets of data to match their interest. To help people learn how to use an interactive chart, you might offer several versions of the chart, each with more functionality than the last.\n\nMake every chart in your app accessible. A chart communicates visually through graphical representations of data and visual descriptions. In addition to the visual descriptions you display, it’s crucial to provide both accessibility labels that describe chart values and components, and accessibility elements that help people interact with the chart. For guidance, see Enhancing the accessibility of a chart.\n\nDesigning effective charts\n\nIn general, prefer using common chart types. People tend to be familiar with common chart types — such as bar charts and line charts — so using one of these types in your app can make it more likely that people will already know how to read your chart. For guidance, see Charts.\n\nIf you need to create a chart that presents data in a novel way, help people learn how to interpret the chart. For example, when a Watch pairs with iPhone, Activity introduces the Activity rings by animating them individually, showing people how each ring maps to the move, exercise, and stand metrics.\n\nExamine the data from multiple levels or perspectives to find details you can display to enhance the chart. For example, viewing the data from a macro level can help you determine high-level summaries that people might be interested in, like totals or averages. From a mid-level perspective, you might find ways to help people identify useful subsets of the data, whereas examining individual data points might help you find ways to draw people’s attention to specific values or items. Displaying information that helps people view the chart from various perspectives can encourage them to engage with it.\n\nAid comprehension by adding descriptive text to the chart. Descriptive text titles, subtitles, and annotations help emphasize the most important information in a chart and can highlight actionable takeaways. You can also display brief descriptive text that serves as a headline or summary for a chart, helping people grasp essential information at a glance. For example, Weather displays text that summarizes the information people need right now — such as “Chance of light rain in the next hour” — above the scrolling list of hourly forecasts for the next 24 hours. Although a descriptive headline or summary can make a chart more accessible, it doesn’t take the place of accessibility labels.\n\nMatch the size of a chart to its functionality, topic, and level of detail. In general, a chart needs to be large enough to comfortably display the details you need to include and expansive enough for the interactivity you want to support. For example, you always want to make it easy for people to read a chart’s details and descriptive text — like labels and annotations — but you might also want to give people enough room to change the scope of a chart or investigate the data from different perspectives. On the other hand, you might want to use a small chart to offer glanceable information about an individual item or to provide a snapshot or preview of a larger version of the chart that people can reveal in a different view.\n\nPrefer consistency across multiple charts, deviating only when you need to highlight differences. If multiple charts in your app serve a similar purpose, you generally don’t want to imply that the charts are unrelated by using a different type or style for each one. Also, using a consistent visual approach for the charts in your app lets people use what they learn about one chart to help them understand another. Consider using different chart types and styles when you need to highlight meaningful differences between charts.\n\nMaintain continuity among multiple charts that use the same data. When you use multiple charts to help people explore one dataset from different perspectives, it’s important to use one chart type and consistent colors, annotations, layouts, and descriptive text to signal that the dataset remains the same. For example, the Heath Trends screen shows small charts that each use a specific visual style to depict a recent trend in an area like steps or resting heart rate. When people choose a chart to reveal all their data in that area, the expanded version uses the same style, colors, marks, and annotations to strengthen the relationship between the versions.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nCharts\n\nDeveloper documentation\n\nSwift Charts\n\nVideos\nDesign app experiences with charts\nDesign an effective chart\nHello Swift Charts\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 23, 2022\n\n\t\n\nNew page."
  },
  {
    "title": "Tab bars",
    "url": "https://developer.apple.com/design/human-interface-guidelines/tab-bars",
    "html": "Tab bars\nTab bars use bar items to navigate between mutually exclusive panes of content in the same view.\n\nTab bars help people understand the different types of information or functionality that a view provides. They also let people quickly switch between sections of the view while preserving the current navigation state within each section.\n\nFor guidance using a similar component in macOS, see tab views.\n\nBest practices\n\nUse a tab bar to support navigation, not to provide actions. A tab bar lets people navigate among different areas of an app, like the Alarm, Stopwatch, and Timer tabs in the Clock app. If you need to provide controls that act on elements in the current view, use a toolbar instead.\n\nMake sure the tab bar is visible when people navigate to different areas in your app. The exception is a tab bar within a modal view. Because a modal view provides a separate experience that people dismiss when they’re finished, hiding the view’s tab bar doesn’t affect app navigation.\n\nUse the minimum number of tabs required to help people navigate your app. Each additional tab increases the complexity of your app, making it harder for people to locate information. Aim for a few tabs with short titles or icons to avoid crowding and causing labels to truncate. In general, use up to five tabs in iOS and up to six in visionOS, iPadOS, and tvOS.\n\nKeep tabs visible even when their content is unavailable. If tabs are available in some cases but not in others, your app’s interface might appear unstable and unpredictable. When necessary, explain why a tab’s content is unavailable. For example, even when there is no music on an iOS device, the Listen Now tab in the Music app remains available and offers suggestions for downloading music.\n\nUse a succinct term for each tab title. A useful tab title aids navigation by clearly describing the type of content or functionality the tab contains. Aim for a single word or a very short phrase, like Music, Shared, Library, or For You. Consider avoiding a generic term like Home, which lacks specificity and can mean different things in different apps.\n\nUse a badge to communicate unobtrusively. You can display a badge — a red oval containing white text and either a number or an exclamation point — on a tab to indicate that new information associated with that view or mode is available. For guidance, see Notifications.\n\nPlatform considerations\n\nNot supported in macOS or watchOS.\n\niOS, iPadOS\n\nBy default, a tab bar is translucent: It uses a background material only when content appears behind it, removing the material when the view scrolls to the bottom. A tab bar hides when a keyboard is onscreen.\n\nAvoid overflow tabs whenever possible. Depending on device size and orientation, the number of visible tabs can be smaller than the total number of tabs. If horizontal space limits the number of visible tabs, the trailing tab becomes a More tab, revealing the remaining items in a list on a separate screen. The More tab makes it harder for people to reach and notice content on tabs that are hidden, so try to limit scenarios in your app where this can happen.\n\nIn an iPadOS app, consider using a sidebar instead of a tab bar. Because a sidebar can display a large number of items, it can make navigating an iPad app more efficient. You can also let people customize a sidebar’s items and let them hide it to make more room for content. For guidance, see Sidebars.\n\nEnsure that tabs affect the view that’s attached to the tab bar, not views elsewhere onscreen. For example, make sure selecting a tab on the left side of a split view doesn’t cause the right side of the split view to change.\n\nConsider using SF Symbols to provide scalable, visually consistent tab bar items. When you use SF Symbols, tab bar items automatically adapt to different contexts. For example, the tab bar can be regular or compact, depending on the current device and orientation. Also, tab bar icons can appear above tab titles in portrait orientation, whereas in landscape, the icons and titles can appear side by side. Prefer filled symbols or icons for consistency with the platform. If your app uses a sidebar instead of a tab bar when it runs on iPad, switch the filled symbols or icons to the outlined variant in the sidebar.\n\nIf you need to create custom tab bar icons using bitmaps, create each icon in two sizes so that the tab bar looks good in both regular and compact environments. Use the following metrics when creating tab bar icons in different shapes. For guidance, see Icons.\n\nTarget dimensions\n\nIcon Shape\n\n\t\n\nRegular tab bars\n\n\t\n\nCompact tab bars\n\n\n\n\nCircle\n\n\t\n\n25x25 pt\n\n\t\n\n18x18 pt\n\n\n\n\n50x50 px @2x\n\n\t\n\n36x36 px @2x\n\n\n\n\n75x75 px @3x\n\n\t\n\n54x54 px @3x\n\n\n\n\nSquare\n\n\t\n\n23x23 pt\n\n\t\n\n17x17 pt\n\n\n\n\n46x46 px @2x\n\n\t\n\n34x34 px @2x\n\n\n\n\n69x69 px @3x\n\n\t\n\n51x51 px @3x\n\n\n\n\nWide\n\n\t\n\n31 pt\n\n\t\n\n23 pt\n\n\n\n\n62 px @2x\n\n\t\n\n46 px @2x\n\n\n\n\n93 px @3x\n\n\t\n\n69 px @3x\n\n\n\n\nTall\n\n\t\n\n28 pt\n\n\t\n\n20 pt\n\n\n\n\n56 px @2x\n\n\t\n\n40 px @2x\n\n\n\n\n84 px @3x\n\n\t\n\n60 px @3x\n\ntvOS\n\nA tab bar is highly customizable. For example, you can:\n\nSpecify a tint, color, or image for the tab bar background\n\nChoose a font for tab items, including a different font for the selected item\n\nSpecify tints for selected and unselected items\n\nAdd button icons, like settings and search\n\nBy default, a tab bar is translucent, and only the selected tab is opaque. When people use the remote to focus on the tab bar, the selected tab includes a drop shadow that emphasizes its selected state. The height of a tab bar is 68 points, and its top edge is 46 points from the top of the screen; you can’t change either of these values.\n\nIf there are more items than can fit in the tab bar, the system truncates the rightmost item by applying a fade effect that begins at the right side of the tab bar. If there are enough items to cause scrolling, the system also applies a truncating fade effect that starts from the left side.\n\nIf you use an icon for a tab title, make sure it’s familiar. You can use icons as tab titles to help save space, but only for universally recognized symbols like search or settings. Using an unfamiliar symbol without a descriptive title can confuse people. For guidance, see SF Symbols.\n\nBe aware of tab bar scrolling behaviors. By default, people can scroll the tab bar offscreen when the current tab contains a single main view. You can see examples of this behavior in the Watch Now, Movies, TV Show, Sports, and Kids tabs in the TV app. The exception is when a screen contains a split view, such as the TV app’s Library tab or an app’s Settings screen. In this case, the tab bar remains pinned at the top of the view while people scroll the content within the primary and secondary panes of the split view. Regardless of a tab’s contents, focus always returns to the tab bar at the top of the page when people press Menu on the remote.\n\nIn a live-viewing app, organize tabs in a consistent way. For the best experience, organize content in live-streaming apps with tabs in the following order:\n\nLive content\n\nCloud DVR or other recorded content\n\nOther content\n\nFor additional guidance, see Live-viewing apps.\n\nCreate a branded logo image to display next to the leading or trailing end of the tab bar, if it makes sense in your app. To ensure enough room between the branded logo image and the edge of the tab bar, place the image within the safe margin. Use the following image size values for guidance:\n\nMaximum width\n\n\t\n\nMaximum height\n\n\n\n\n200 pt\n\n\t\n\n68 pt\n\nvisionOS\n\nIn visionOS, a tab bar is always vertical, floating in a position that’s fixed relative to the window’s leading side. When people look at a tab bar, it automatically expands; to open a specific tab, people look at the tab and tap. While a tab bar is expanded, it can temporarily obscure the content behind it.\n\nPlay\n\nSupply a symbol and a text title for each tab. A tab’s symbol is always visible in the tab bar. When people look at the tab bar, the system reveals tab titles, too. Even though the tab bar expands, you need to keep tab titles short so people can read them at a glance.\n\nCollapsed\n\nExpanded\n\nIf it makes sense in your app, consider using a sidebar within a tab. If your app’s hierarchy is deep, you might want to use a sidebar to support secondary navigation within a tab. If you do this, be sure to prevent selections in the sidebar from changing which tab is currently open.\n\nResources\nRelated\n\nTab views\n\nToolbars\n\nSidebars\n\nNavigation bars\n\nDeveloper documentation\n\nUITabBar — UIKit\n\nVideos\nDesign for spatial user interfaces\nExplore navigation design for iOS\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Tab views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/tab-views",
    "html": "Tab views\nA tab view presents multiple mutually exclusive panes of content in the same area, which people can switch between using a tabbed control.\n\nBest practices\n\nUse a tab view to present closely related areas of content. The appearance of a tab view provides a strong visual indication of enclosure. People expect each tab to display content that is in some way similar or related to the content in the other tabs.\n\nMake sure the controls within a pane affect content only in the same pane. Panes are mutually exclusive, so ensure they’re fully self-contained.\n\nProvide a label for each tab that describes the contents of its pane. A good label helps people predict the contents of a pane before clicking or tapping its tab. In general, use nouns or short noun phrases for tab labels. A verb or short verb phrase may make sense in some contexts. Use title-style capitalization for tab labels.\n\nAvoid using a pop-up button to switch between tabs. A tabbed control is efficient because it requires a single click or tap to make a selection, whereas a pop-up button requires two. A tabbed control also presents all choices onscreen at the same time, whereas people must click a pop-up button to see its choices. Note that a pop-up button can be a reasonable alternative in cases where there are too many panes of content to reasonably display with tabs.\n\nAvoid providing more than six tabs in a tab view. Having more than six tabs can be overwhelming and create layout issues. If you need to present six or more tabs, consider another way to implement the interface. For example, you could instead present each tab as a view option in a pop-up button menu.\n\nFor developer guidance, see NSTabView.\n\nAnatomy\n\nYou can position the tabbed control on any side of the content area: top, bottom, left, or right. You can also hide the controls, which is appropriate when you switch the panes programmatically.\n\nTop tabs\n\nBottom tabs\n\nWhen you hide the tabbed control, the content area can be borderless, bezeled, or bordered with a line. A borderless view can be solid or transparent.\n\nIn general, inset a tab view by leaving a margin of window-body area on all sides of a tab view. This layout looks clean and leaves room for additional controls that aren’t directly related to the contents of the tab view. For example, the lock button in Date & Time settings is outside of the tab view because it applies to all tabs. You can extend a tab view to meet the window edges, but this layout is unusual.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, or visionOS.\n\niOS, iPadOS\n\nFor similar functionality, consider using a segmented control instead.\n\nwatchOS\n\nwatchOS displays tab views using page controls. For developer guidance, see TabView and verticalPage.\n\nResources\nRelated\n\nTab bars\n\nSegmented controls\n\nDeveloper documentation\n\nTabView — SwiftUI\n\nNSTabView — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nAdded guidance for using tab views in watchOS."
  },
  {
    "title": "Watch faces",
    "url": "https://developer.apple.com/design/human-interface-guidelines/watch-faces",
    "html": "Watch faces\nA watch face is a view that people choose as their primary view in watchOS.\n\nThe watch face is at the heart of the watchOS experience. People choose a watch face they want to see every time they raise their wrist, and they customize it with their favorite complications. People can even customize different watch faces for different activities, so they can switch to the watch face that fits their current context.\n\nIn watchOS 7 and later, people can share the watch faces they configure. For example, a fitness instructor might configure a watch face to share with their students by choosing the Gradient watch face, customizing the color, and adding their favorite health and fitness complications. When the students add the shared watch face to their Apple Watch or the Watch app on their iPhone, they get a custom experience without having to configure it themselves.\n\nYou can also configure a watch face to share from within your app, on your website, or through Messages, Mail, or social media. Offering shareable watch faces can help you introduce more people to your complications and your app.\n\nBest practices\n\nHelp people discover your app by sharing watch faces that feature your complications. Ideally, you support multiple complications so that you can showcase them in a shareable watch face and provide a curated experience. For some watch faces, you can also specify a system accent color, images, or styles. If people add your watch face but haven’t installed your app, the system prompts them to install it.\n\nDisplay a preview of each watch face you share. Displaying a preview that highlights the advantages of your watch face can help people visualize its benefits. You can get a preview by using the iOS Watch app to email the watch face to yourself. The preview includes an illustrated device bezel that frames the face and is suitable for display on websites and in watchOS and iOS apps. Alternatively, you can replace the illustrated bezel with a high-fidelity hardware bezel that you can download from Apple Design Resources and composite onto the preview. For developer guidance, see Sharing an Apple Watch face.\n\nAim to offer shareable watch faces for all Apple Watch devices. Some watch faces are available on Series 4 and later — such as California, Chronograph Pro, Gradient, Infograph, Infograph Modular, Meridian, Modular Compact, and Solar Dial — and Explorer is available on Series 3 (with cellular) and later. If you use one of these faces in your configuration, consider offering a similar configuration using a face that’s available on Series 3 and earlier. To help people make a choice, you can clearly label each shareable watch face with the devices it supports.\n\nRespond gracefully if people choose an incompatible watch face. The system sends your app an error when people try to use an incompatible watch face on Series 3 or earlier. In this scenario, consider immediately offering an alternative configuration that uses a compatible face instead of displaying an error. Along with the previews you provide, help people understand that they might receive an alternative watch face if they choose a face that isn’t compatible with their Apple Watch.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, tvOS, or visionOS.\n\nResources\nRelated\n\nApple Design Resources — Product Bezels\n\nDeveloper documentation\n\nSharing an Apple Watch face — ClockKit"
  },
  {
    "title": "Going full screen",
    "url": "https://developer.apple.com/design/human-interface-guidelines/going-full-screen",
    "html": "Going full screen\niPhone, iPad, and Mac offer full-screen modes that can provide a distraction-free environment, often hiding system and app controls until people take action to reveal them.\n\nNote\n\nvisionOS doesn’t support a full-screen mode. When a visionOS app runs alongside other apps in the Shared Space, people can concentrate on the content in one window by increasing its size. If the app also offers a more immersive experience, people can transition the app to a Full Space, where they can engage more deeply with content or perform a task without distractions. For guidance, see Immersive experiences.\n\nBest practices\n\nSupport full-screen mode when it makes sense for your experience. People appreciate full-screen mode when they want to play a game, play media, or perform an in-depth task, but not every app provides such experiences. For example, Calculator in macOS doesn’t need to support full-screen mode, because people generally use it to perform calculations and paste the results into other locations.\n\nMaintain access to essential app features so people can complete their task without exiting full-screen mode. For example, a full-screen media experience needs to make playback controls persistently available or easy to reveal when people need them.\n\nIf necessary, adjust your interface to take advantage of the expanded space in full-screen mode. The area available for a full-screen experience is generally larger than the non-full-screen area. In some cases, such as in macOS and visionOS, a window can grow in both width and height when people choose to enter full-screen mode. To keep essential content prominent and to use the extra space well, you might want to subtly adjust the proportions of your interface. If this type of adjustment makes sense in your app, avoid jarring transitions and make sure your interface remains instantly recognizable.\n\nLet people choose when to exit full-screen mode. People generally don’t expect to exit full-screen mode automatically when they switch to another app or finish an absorbing activity, like playing a movie or game.\n\nIn general, let people reveal the Dock while an iPadOS or macOS app is in full-screen mode. It’s important to preserve access to the Dock so people can quickly open apps and other Dock items. An exception is in a game where the edges of the screen are part of the experience.\n\nPlatform considerations\n\nNot supported in tvOS, visionOS, or watchOS.\n\niOS, iPadOS\n\nAllow auto-hiding of the Home Screen indicator when it makes sense. With auto-hiding, the indicator fades out if people haven’t touched the screen for a few seconds, reappearing when they touch it again. Support this behavior only for viewing experiences like playing videos or photo slideshows and during gameplay.\n\nmacOS\n\nUse the system-provided full-screen experience. Using the system’s full-screen support ensures that your full-screen window works well in all contexts. For developer guidance, see toggleFullScreen(_:).\n\nIf you use custom full-screen support, rely on system-defined areas to keep your full-screen window content unobscured. For example, some Mac models include a camera housing that occupies an area at the top-center of the screen. Using the system’s full-screen support automatically accommodates this area; if you use a custom full-screen experience, you need to account for system-defined areas as you position your content. macOS provides two ways to help you position content when using a custom full-screen experience:\n\nThe safeAreaInsets property contains top, bottom, left, and right values that define the safe area of the screen. Use the top value to inset your content from the top of the screen so that it remains unobscured.\n\nThe auxiliaryTopLeftArea and auxiliaryTopRightArea properties define the rectangles at the top of the screen that represent unobscured areas left and right of the camera housing and outside of the safe area.\n\nKeep the toolbar visible when it’s necessary for accomplishing tasks; hide it when content is the priority. You can set a full-screen window to show the toolbar all the time, or only when people move the pointer to the top of the screen. Calendar, for example, always displays the toolbar, providing quick access to essential navigation and schedule-management controls. On the other hand, Preview hides the toolbar so people can concentrate on reading or viewing content. Note that the menu bar typically hides in full-screen mode unless people reveal it.\n\nAlways let people enter Mission Control. Even when your app is the only thing that’s visible, people expect to invoke Mission Control to preview and navigate other open windows, full-screen apps, desktops, and spaces. Respect the keyboard shortcuts and gestures people use to enter Mission Control, regardless of the type of experience your app provides.\n\nAfter people switch away from your full-screen app, help them resume where they left off when they return. For example, a game or a slideshow needs to pause automatically when people leave the app so they don’t miss anything.\n\nConfigure auxiliary windows for use in full-screen mode. Full-screen auxiliary windows need proper configuration to display above full-screen content. For developer guidance, see fullScreenAuxiliary.\n\nIf people expect to access files while they’re in your app, provide convenient ways to do so in full-screen mode. Don’t make people exit full-screen mode to open files, import images, save files, or perform similar interactions. For example, you might implement an app-specific image browser that lets people open images in your app regardless of the current mode.\n\nResources\nRelated\n\nLayout\n\nMultitasking\n\nDeveloper documentation\n\nNSScreen — AppKit\n\nNSWindow.CollectionBehavior — AppKit"
  },
  {
    "title": "Status bars",
    "url": "https://developer.apple.com/design/human-interface-guidelines/status-bars",
    "html": "Status bars\nA status bar appears along the upper edge of the screen and displays information about the device’s current state, like the time, cellular carrier, and battery level.\n\nBest practices\n\nObscure content under the status bar. By default, the background of the status bar is transparent, allowing content beneath to show through. This can make it difficult to see the information presented in the status bar. If controls are visible behind the status bar, people may attempt to interact with them and be unable to do so. Be sure to keep the status bar readable and don’t imply that content behind it is interactive. There are several common techniques for doing this:\n\nUse a navigation bar that automatically displays a status bar background.\n\nDisplay a custom image, like a gradient or solid color, behind the status bar.\n\nPlace a blurred view behind the status bar. For developer guidance, see UIBlurEffect.\n\nConsider temporarily hiding the status bar when displaying full-screen media. A status bar can be distracting when people are paying attention to media. Temporarily hide these elements to provide a more immersive experience. The Photos app, for example, hides the status bar and other interface elements when people browse full-screen photos.\n\nAvoid permanently hiding the status bar. Without a status bar, people have to leave your app to check the time or see if they have a Wi-Fi connection. Let people redisplay a hidden status bar with a simple, discoverable gesture. For example, when browsing full-screen photos in the Photos app, a single tap shows the status bar again.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS. Not supported in macOS, tvOS, visionOS, or watchOS.\n\nResources\nDeveloper documentation\n\nUIStatusBarStyle — UIKit\n\npreferredStatusBarStyle — UIKit"
  },
  {
    "title": "Pickers",
    "url": "https://developer.apple.com/design/human-interface-guidelines/pickers",
    "html": "Pickers\nA picker displays one or more scrollable lists of distinct values that people can choose from.\n\nThe system provides several styles of pickers, each of which offers different types of selectable values and has a different appearance. The exact values shown in a picker, and their order, depend on the device language.\n\nPickers help people enter information by letting them choose single or multipart values. Date pickers specifically offer additional ways to choose values, like selecting a day in a calendar view or entering dates and times using a numeric keypad.\n\nBest practices\n\nConsider using a picker to offer medium-to-long lists of items. If you need to display a fairly short list of choices, consider using a pull-down button instead of a picker. Although a picker makes it easy to scroll quickly through many items, it may add too much visual weight to a short list of items. On the other hand, if you need to present a very large set of items, consider using a list or table. Lists and tables can adjust in height, and tables can include an index, which makes it much faster to target a section of the list.\n\nUse predictable and logically ordered values. Before people interact with a picker, many of its values can be hidden. It’s best when people can predict what the hidden values are, such as with an alphabetized list of countries, so they can move through the items quickly.\n\nAvoid switching views to show a picker. A picker works well when displayed in context, below or in proximity to the field people are editing. A picker typically appears at the bottom of a window or in a popover.\n\nConsider providing less granularity when specifying minutes in a date picker. By default, a minute list includes 60 values (0 to 59). You can optionally increase the minute interval as long as it divides evenly into 60. For example, you might want quarter-hour intervals (0, 15, 30, and 45).\n\nPlatform considerations\n\nNo additional considerations for visionOS.\n\niOS, iPadOS\n\nA date picker is an efficient interface for selecting a specific date, time, or both, using touch, a keyboard, or a pointing device. You can display a date picker in one of the following styles:\n\nCompact — A button that displays editable date and time content in a modal view.\n\nInline — For time only, a button that displays wheels of values; for dates and times, an inline calendar view.\n\nWheels — A set of scrolling wheels that also supports data entry through built-in or external keyboards.\n\nAutomatic — A system-determined style based on the current platform and date picker mode.\n\nA date picker has four modes, each of which presents a different set of selectable values.\n\nDate — Displays months, days of the month, and years.\n\nTime — Displays hours, minutes, and (optionally) an AM/PM designation.\n\nDate and time — Displays dates, hours, minutes, and (optionally) an AM/PM designation.\n\nCountdown timer — Displays hours and minutes, up to a maximum of 23 hours and 59 minutes. This mode isn’t available in the inline or compact styles.\n\nThe exact values shown in a date picker, and their order, depend on the device location.\n\nHere are several examples of date pickers showing different combinations of style and mode.\n\nCompact\nInline\nWheels\n\nScheduled summary settings uses a compact date picker in time mode.\n\nWhen people tap the date picker, it reveals time values within a modal view.\n\nUse a compact date picker when space is constrained. The compact style displays a button that shows the current value in your app’s accent color. When people tap the button, the date picker opens a modal view, providing access to a familiar calendar-style editor and time picker. Within the modal view, people can make multiple edits to dates and times before tapping outside the view to confirm their choices.\n\nmacOS\n\nChoose a date picker style that suits your app. There are two styles of date pickers in macOS: textual and graphical. The textual style is useful when you’re working with limited space and you expect people to make specific date and time selections. The graphical style is useful when you want to give people the option of browsing through days in a calendar or selecting a range of dates, or when the look of a clock face is appropriate for your app.\n\nFor developer guidance, see NSDatePicker.\n\ntvOS\n\nPickers are available in tvOS with SwiftUI. For developer guidance, see Picker.\n\nwatchOS\n\nPickers display lists of items that people navigate using the Digital Crown, which helps people manage selections in a precise and engaging way.\n\nA picker can display a list of items using the wheels style. watchOS can also display date and time pickers using the wheels style. For developer guidance, see Picker and DatePicker.\n\nYou can configure a picker to display an outline, caption, and scrolling indicator.\n\nFor longer lists, the navigation link displays the picker as a button. When someone taps the button, the system shows the list of options. The person can also scrub through the options using the Digital Crown without tapping the button. For developer guidance, see navigationLink.\n\nResources\nRelated\n\nPull-down buttons\n\nLists and tables\n\nDeveloper documentation\n\nPicker — SwiftUI\n\nUIDatePicker — UIKit\n\nUIPickerView — UIKit\n\nNSDatePicker — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using pickers in watchOS."
  },
  {
    "title": "Digit entry views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/digit-entry-views",
    "html": "Digit entry views\nA digit entry view fills the entire screen and prompts people to enter a series of digits, like a PIN, using a digit-specific keyboard.\n\nYou can add an optional title and prompt above the line of digits.\n\nBest practices\n\nUse secure digit fields. Secure digit fields display asterisks instead of the entered digit onscreen. Always use a secure digit field when your app asks for sensitive data.\n\nClearly state the purpose of the digit entry view. Use a title and prompt that explains why someone needs to enter digits.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, visionOS, or watchOS.\n\nResources\nRelated\n\nVirtual keyboards\n\nDeveloper documentation\n\nTVDigitEntryViewController — TVUIKit"
  },
  {
    "title": "Combo boxes",
    "url": "https://developer.apple.com/design/human-interface-guidelines/combo-boxes",
    "html": "Combo boxes\nA combo box combines a text field with a pull-down button in a single control.\n\nPeople can enter a custom value into the field or click the button to choose from a list of predefined values. When people enter a custom value, it’s not added to the list of choices.\n\nBest practices\n\nPopulate the field with a meaningful default value from the list. Although the field can be empty by default, it’s best when the default value refers to the hidden choices. The default value doesn’t have to be the first item in the list.\n\nUse an introductory label to let people know what types of items to expect. Generally, use title-style capitalization for labels and end them with a colon. For related guidance, see Labels.\n\nProvide relevant choices. People appreciate the ability to enter a custom value, as well as the convenience of choosing from a list of the most likely choices.\n\nMake sure list items aren’t wider than the text field. If an item is too wide, the text field might truncate it, which is hard for people to read.\n\nFor guidance, see Text fields and Pull-down buttons.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nText fields\n\nPull-down buttons\n\nDeveloper documentation\n\nNSComboBox — AppKit"
  },
  {
    "title": "Image wells",
    "url": "https://developer.apple.com/design/human-interface-guidelines/image-wells",
    "html": "Image wells\nAn image well is an editable version of an image view.\n\nAfter selecting an image well, people can copy and paste its image or delete it. People can also drag a new image into an image well without selecting it first.\n\nBest practices\n\nRevert to a default image when necessary. If your image well requires an image, display the default image again if people clear the content of the image well.\n\nIf your image well supports copy and paste, make sure the standard copy and paste menu items are available. People generally expect to choose these menu items — or use the standard keyboard shortcuts — to interact with an image well. For guidance, see Edit menu.\n\nFor related guidance, see Image views.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nImage views\n\nDeveloper documentation\n\nNSImageView — AppKit"
  },
  {
    "title": "Outline views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/outline-views",
    "html": "Outline views\nAn outline view presents hierarchical data in a scrolling list of cells that are organized into columns and rows.\n\nAn outline view includes at least one column that contains primary hierarchical data, such as a set of parent containers and their children. You can add columns, as needed, to display attributes that supplement the primary data; for example, sizes and modification dates. Parent containers have disclosure triangles that expand to reveal their children.\n\nFinder windows offer an outline view for navigating the file system.\n\nBest practices\n\nOutline views work well to display text-based content and often appear in the leading side of a split view, with related content on the opposite side.\n\nUse a table instead of an outline view to present data that’s not hierarchical. For guidance, see Lists and tables.\n\nExpose data hierarchy in the first column only. Other columns can display attributes that apply to the hierarchical data in the primary column.\n\nUse descriptive column headings to provide context. Use nouns or short noun phrases with title-style capitalization and no punctuation; in particular, avoid adding a trailing colon. Always provide column headings in a multi-column outline view. If you don’t include a column heading in a single-column outline view, use a label or other means to make sure there’s enough context.\n\nConsider letting people click column headings to sort an outline view. In a sortable outline view, people can click a column heading to perform an ascending or descending sort based on that column. You can implement additional sorting based on secondary columns behind the scenes, if necessary. If people click the primary column heading, sorting occurs at each hierarchy level. For example, in the Finder, all top-level folders are sorted, then the items within each folder are sorted. If people click the heading of a column that’s already sorted, the folders and their contents are sorted again in the opposite direction.\n\nLet people resize columns. Data displayed in an outline view often varies in width. It’s important to let people adjust column width as needed to reveal data that’s wider than the column.\n\nMake it easy for people to expand or collapse nested containers. For example, clicking a disclosure triangle for a folder in a Finder window expands only that folder. However, Option-clicking the disclosure triangle expands all of its subfolders.\n\nRetain people’s expansion choices. If people expand various levels of an outline view to reach a specific item, store the state so you can display it again the next time. This way, people won’t need to navigate back to the same place again.\n\nConsider using alternating row colors in multi-column outline views. Alternating colors can make it easier for people to track row values across columns, especially in wide outline views.\n\nLet people edit data if it makes sense in your app. In an editable outline view cell, people expect to be able to single-click a cell to edit its contents. Note that a cell can respond differently to a double click. For example, an outline view listing files might let people single-click a file’s name to edit it, but double-click a file’s name to open the file. You can also let people reorder, add, and remove rows if it would be useful.\n\nConsider using a centered ellipsis to truncate cell text instead of clipping it. An ellipsis in the middle preserves the beginning and end of the cell text, which can make the content more distinct and recognizable than clipped text.\n\nConsider offering a search field to help people find values quickly in a lengthy outline view. Windows with an outline view as the primary feature often include a search field in the toolbar. For guidance, see Search fields.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nColumn views\n\nLists and tables\n\nSplit views\n\nDeveloper documentation\n\nOutlineGroup — SwiftUI\n\nNSOutlineView — AppKit\n\nVideos\nStacks, Grids, and Outlines in SwiftUI"
  },
  {
    "title": "Color wells",
    "url": "https://developer.apple.com/design/human-interface-guidelines/color-wells",
    "html": "Color wells\nA color well lets people adjust the color of text, shapes, guides, and other onscreen elements.\n\nA color well displays a color picker when people tap or click it. This color picker can be the system-provided one or a custom interface that you design.\n\nBest practices\n\nConsider the system-provided color picker for a familiar experience. Using the built-in color picker provides a consistent experience, in addition to letting people save a set of colors they can access from any app. The system-defined color picker can also help provide a familiar experience when developing apps across iOS, iPadOS, and macOS.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or visionOS. Not supported in tvOS or watchOS.\n\nmacOS\n\nWhen people click a color well, it receives a highlight to provide visual confirmation that it’s active. It then opens a color picker so people can choose a color. After they make a selection, the color well updates to show the new color.\n\nColor wells also support drag and drop, so people can drag colors from one color well to another, and from the color picker to a color well.\n\nResources\nRelated\n\nColor\n\nDeveloper documentation\n\nUIColorWell — UIKit\n\nUIColorPickerViewController — UIKit\n\nNSColorWell — AppKit\n\nColor Programming Topics"
  },
  {
    "title": "Lockups",
    "url": "https://developer.apple.com/design/human-interface-guidelines/lockups",
    "html": "Lockups\nLockups combine multiple separate views into a single, interactive unit.\n\nEach lockup consists of a content view, a header, and a footer. Headers appear above the main content for a lockup, and footers appear below the main content. All three views expand and contract together as the lockup gets focus.\n\nAccording to the needs of your app, you can combine four types of lockup: cards, caption buttons, monograms, and posters.\n\nBest practices\n\nAllow adequate space between lockups. A focused lockup expands in size, so leave enough room between lockups to avoid overlapping or displacing other lockups. For guidance, see Layout.\n\nUse consistent lockup sizes within a row or group. A group of buttons or a row of content images is more visually appealing when the widths and heights of all elements match.\n\nFor developer guidance, see TVLockupView and TVLockupHeaderFooterView.\n\nCards\n\nA card combines a header, footer, and content view to present ratings and reviews for media items.\n\nFor developer guidance, see TVCardView\n\nCaption buttons\n\nA caption button can include a title and a subtitle beneath the button. A caption button can contain either an image or text.\n\nMake sure that when people focus on them, caption buttons tilt with the motion that they swipe. When aligned vertically, caption buttons tilt up and down. When aligned horizontally, caption buttons tilt left and right. When displayed in a grid, caption buttons tilt both vertically and horizontally.\n\nFor developer guidance, see TVCaptionButtonView.\n\nMonograms\n\nMonograms identify people, usually the cast and crew for a media item. Each monogram consists of a circular picture of the person and their name. If an image isn’t available, the person’s initials appear in place of an image.\n\nPrefer images over initials. An image of a person creates a more intimate connection than text.\n\nFor developer guidance, see TVMonogramContentView.\n\nPosters\n\nPosters consist of an image and an optional title and subtitle, which are hidden until the poster comes into focus. Posters can be any size, but the size needs to be appropriate for their content. For related guidance, see Image views.\n\nFor developer guidance, see TVPosterView\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, visionOS, or watchOS.\n\nResources\nRelated\n\nDesigning for tvOS\n\nLayout\n\nDeveloper documentation\n\nTVLockupView — TVUIKit\n\nTVLockupHeaderFooterView — TVUIKit"
  },
  {
    "title": "Lists and tables",
    "url": "https://developer.apple.com/design/human-interface-guidelines/lists-and-tables",
    "html": "Lists and tables\nLists and tables present data in one or more columns of rows.\n\nA table or list can represent data that’s organized in groups or hierarchies, and it can support user interactions like selecting, adding, deleting, and reordering. Apps and games in all platforms can use tables to present content and options; many apps use lists to express an overall information hierarchy and help people navigate it. For example, iOS Settings uses a hierarchy of lists to help people choose options, and several apps — such as Mail in iPadOS and macOS — use a table within a split view.\n\nSometimes, people need to work with complex data in a multicolumn table or a spreadsheet. Apps that offer productivity tasks often use a table to represent various characteristics or attributes of the data in separate, sortable columns.\n\nBest practices\n\nPrefer displaying text in a list or table. A table can include any type of content, but the row-based format is especially well suited to making text easy to scan and read. If you have items that vary widely in size — or you need to display a large number of images — consider using a collection instead.\n\nLet people edit a table when it makes sense. People appreciate being able to reorder a list, even if they can’t add or remove items. In iOS and iPadOS, people must enter an edit mode before they can select table items.\n\nProvide appropriate feedback when people select a list item. The feedback can vary depending on whether selecting the item reveals a new view or toggles the item’s state. In general, a table that helps people navigate through a hierarchy persistently highlights the selected row to clarify the path people are taking. In contrast, a table that lists options often highlights a row only briefly before adding an image — such as a checkmark — indicating that the item is selected.\n\nContent\n\nKeep item text succinct so row content is comfortable to read. Short, succinct text can help minimize truncation and wrapping, making text easier to read and scan. If each item consists of a large amount of text, consider alternatives that help you avoid displaying over-large table rows. For example, you could list item titles only, letting people choose an item to reveal its content in a detail view.\n\nConsider ways to preserve readability of text that might otherwise get clipped or truncated. When a table is narrow — for example, if people can vary its width — you want content to remain recognizable and easy to read. Sometimes, an ellipsis in the middle of text can make an item easier to distinguish because it preserves both the beginning and the end of the content.\n\nUse descriptive column headings in a multicolumn table. Use nouns or short noun phrases with title-style capitalization, and don’t add ending punctuation. If you don’t include a column heading in a single-column table view, use a label or a header to help people understand the context.\n\nStyle\n\nChoose a table or list style that coordinates with your data and platform. Some styles use visual details to help communicate grouping and hierarchy or to provide specific experiences. In iOS and iPadOS, for example, the grouped style uses headers, footers, and additional space to separate groups of data; the elliptical style available in watchOS makes items appear as if they’re rolling off a rounded surface as people scroll; and macOS defines a bordered style that uses alternating row backgrounds to help make large tables easier to use. For developer guidance, see ListStyle.\n\nChoose a row style that fits the information you need to display. For example, you might need to display a small image in the leading end of a row, followed by a brief explanatory label. Some platforms provide built-in row styles you can use to arrange content in list rows, such as the UIListContentConfiguration API you can use to lay out content in a list’s rows, headers, and footers in iOS, iPadOS, and tvOS.\n\nPlatform considerations\niOS, iPadOS, visionOS\n\nUse an info button only to reveal more information about a row’s content. An info button — called a detail disclosure button when it appears in a list row — doesn’t support navigation through a hierarchical table or list. If you need to let people drill into a list or table row’s subviews, use a disclosure indicator accessory control. For developer guidance, see UITableViewCell.AccessoryType.disclosureIndicator.\n\nAn info button shows details about a list item; it doesn’t support navigation.\n\nA disclosure indicator reveals the next level in a hierarchy; it doesn’t show details about the item.\n\nAvoid adding an index to a table that displays controls — like disclosure indicators — in the trailing ends of its rows. An index typically consists of the letters in an alphabet, displayed vertically at the trailing side of a list. People can jump to a specific section in the list by choosing the index letter that maps to it. Because both the index and elements like disclosure indicators appear on the trailing side of a list, it can be difficult for people to use one element without activating the other.\n\nmacOS\n\nWhen it provides value, let people click a column heading to sort a table view based on that column. If people click the heading of a column that’s already sorted, re-sort the data in the opposite direction.\n\nLet people resize columns. Data displayed in a table view often varies in width. People appreciate resizing columns to help them concentrate on different areas or reveal clipped data.\n\nConsider using alternating row colors in a multicolumn table. Alternating colors can help people track row values across columns, especially in a wide table.\n\nUse an outline view instead of a table view to present hierarchical data. An outline view looks like a table view, but includes disclosure triangles for exposing nested levels of data. For example, an outline view might display folders and the items they contain.\n\ntvOS\n\nConfirm that images near a table still look good as each row highlights and slightly increases in size when it becomes focused. A focused row’s corners can also become rounded, which may affect the appearance of images on either side of it. Account for this effect as you prepare images, and don’t add your own masks to round the corners.\n\nwatchOS\n\nWhen possible, limit the number of rows. Short lists are easier for people to scan, but sometimes people expect a long list of items. For example, if people subscribe to a large number of podcasts, they might think something’s wrong if they can’t view all their items. You can help make a long list more manageable by listing the most relevant items and providing a way for people to view more.\n\nConstrain the length of detail views if you want to support vertical page-based navigation. People use vertical page-based navigation to swipe vertically among the detail items of different list rows. Navigating in this way saves time because people don’t need to return to the list to tap a new detail item, but it works only when detail views are short. If your detail views scroll, people won’t be able to use vertical page-based navigation to swipe among them.\n\nResources\nRelated\n\nCollections\n\nOutline views\n\nLayout\n\nDeveloper documentation\n\nList — SwiftUI\n\nTables — SwiftUI\n\nUITableView — UIKit\n\nNSTableView — AppKit\n\nVideos\nStacks, Grids, and Outlines in SwiftUI\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance to reflect changes in watchOS 10."
  },
  {
    "title": "Labels",
    "url": "https://developer.apple.com/design/human-interface-guidelines/labels",
    "html": "Labels\nA label is a static piece of text that people can read and often copy, but not edit.\n\nLabels display text throughout the interface, in buttons, menu items, and views, helping people understand the current context and what they can do next.\n\nThe term label refers to uneditable text that can appear in various places. For example:\n\nWithin a button, a label generally conveys what the button does, such as Edit, Cancel, or Send.\n\nWithin many lists, a label can describe each item, often accompanied by a symbol or an image.\n\nWithin a view, a label might provide additional context by introducing a control or describing a common action or task that people can perform in the view.\n\nDeveloper note\n\nTo display uneditable text, SwiftUI defines two components: Label and Text.\n\nThe guidance below can help you use a label to display text. In some cases, guidance for specific components — such as action buttons, menus, and lists and tables — includes additional recommendations for using text.\n\nBest practices\n\nUse a label to display a small amount of text that people don’t need to edit. If you need to let people edit a small amount of text, use a text field. If you need to display a large amount of text, and optionally let people edit it, use a text view.\n\nPrefer system fonts. A label can display plain or styled text, and it supports Dynamic Type (where available) by default. If you adjust the style of a label or use custom fonts, make sure the text remains legible.\n\nUse system-provided label colors to communicate relative importance. The system defines four label colors that vary in appearance to help you give text different levels of visual importance. For additional guidance, see Color.\n\nSystem color\n\n\t\n\nExample usage\n\n\t\n\niOS, iPadOS, tvOS, visionOS\n\n\t\n\nmacOS\n\n\n\n\nLabel\n\n\t\n\nPrimary information\n\n\t\n\nlabel\n\n\t\n\nlabelColor\n\n\n\n\nSecondary label\n\n\t\n\nA subheading or supplemental text\n\n\t\n\nsecondaryLabel\n\n\t\n\nsecondaryLabelColor\n\n\n\n\nTertiary label\n\n\t\n\nText that describes an unavailable item or behavior\n\n\t\n\ntertiaryLabel\n\n\t\n\ntertiaryLabelColor\n\n\n\n\nQuaternary label\n\n\t\n\nWatermark text\n\n\t\n\nquaternaryLabel\n\n\t\n\nquaternaryLabelColor\n\nMake useful label text selectable. If a label contains useful information — like an error message, a location, or an IP address — consider letting people select and copy it for pasting elsewhere.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, tvOS, or visionOS.\n\nmacOS\n\nDeveloper note\n\nTo display uneditable text in a label, use the isEditable property of NSTextField.\n\nwatchOS\n\nDate and time text components (shown below on the left) display the current date, the current time, or a combination of both. You can configure a date text component to use a variety of formats, calendars, and time zones. A countdown timer text component (shown below on the right) displays a precise countdown or count-up timer. You can configure a timer text component to display its count value in a variety of formats.\n\nDate label\n\nTimer label\n\nWhen you use the system-provided date and timer text components, watchOS automatically adjusts the label’s presentation to fit the available space. The system also updates the content without further input from your app.\n\nConsider using date and timer components in complications. For design guidance, see Complications; for developer guidance, see Text.\n\nResources\nRelated\n\nText fields\n\nText views\n\nDeveloper documentation\n\nLabel — SwiftUI\n\nText — SwiftUI\n\nUILabel — UIKit\n\nNSTextField — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance to reflect changes in watchOS 10."
  },
  {
    "title": "Disclosure controls",
    "url": "https://developer.apple.com/design/human-interface-guidelines/disclosure-controls",
    "html": "Disclosure controls\nDisclosure controls reveal and hide information and functionality related to specific controls or views.\n\nBest practices\n\nUse a disclosure control to hide details until they’re relevant. Place controls that people are most likely to use at the top of the disclosure hierarchy so they’re always visible, with more advanced functionality hidden by default. This organization helps people quickly find the most essential information without overwhelming them with too many detailed options.\n\nDisclosure triangles\n\nA disclosure triangle shows and hides information and functionality associated with a view or a list of items. For example, Keynote uses a disclosure triangle to show advanced options when exporting a presentation, and the Finder uses disclosure triangles to progressively reveal hierarchy when navigating a folder structure in list view.\n\nCollapsed\nExpanded\n\nA disclosure triangle points inward from the leading edge when its content is hidden and down when its content is visible. Clicking or tapping the disclosure triangle switches between these two states, and the view expands or collapses accordingly to accommodate the content.\n\nProvide a descriptive label when using a disclosure triangle. Make sure your labels indicate what is disclosed or hidden, like “Advanced Options.”\n\nFor developer guidance, see NSButton.BezelStyle.disclosure.\n\nDisclosure buttons\n\nA disclosure button shows and hides functionality associated with a specific control. For example, the macOS Save sheet shows a disclosure button next to the Save As text field. When people click or tap this button, the Save dialog expands to give advanced navigation options for selecting an output location for their document.\n\nCollapsed\nExpanded\n\nA disclosure button points down when its content is hidden and up when its content is visible. Clicking or tapping the disclosure button switches between these two states, and the view expands or collapses accordingly to accommodate the content.\n\nPlace a disclosure button near the content that it shows and hides. Establish a clear relationship between the control and the expanded choices that appear when a person clicks or taps a button.\n\nUse no more than one disclosure button in a single view. Multiple disclosure buttons add complexity and can be confusing.\n\nFor developer guidance, see NSButton.BezelStyle.pushDisclosure.\n\nPlatform considerations\n\nNo additional considerations for macOS. Not supported in tvOS or watchOS.\n\niOS, iPadOS, visionOS\n\nDisclosure controls are available in iOS, iPadOS, and visionOS with the SwiftUI DisclosureGroup view.\n\nResources\nRelated\n\nOutline views\n\nLists and tables\n\nButtons\n\nDeveloper documentation\n\nDisclosureGroup — SwiftUI\n\nNSButton.BezelStyle.disclosure — AppKit\n\nNSButton.BezelStyle.pushDisclosure — AppKit\n\nVideos\nStacks, Grids, and Outlines in SwiftUI"
  },
  {
    "title": "Column views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/column-views",
    "html": "Column views\nA column view — also called a browser — lets people view and navigate a data hierarchy using a series of vertical columns.\n\nEach column represents one level of the hierarchy and contains horizontal rows of data items. Within a column, any parent item that contains nested child items is marked with a triangle icon. When people select a parent, the next column displays its children. People can continue navigating in this way until they reach an item with no children, and can also navigate back up the hierarchy to explore other branches of data.\n\nNote\n\nIf you need to manage the presentation of hierarchical content in your iPadOS or visionOS app, consider using a split view.\n\nBest practices\n\nConsider using a column view when you have a deep data hierarchy in which people tend to navigate back and forth frequently between levels, and you don’t need the sorting capabilities that a list or table provides. For example, Finder offers a column view (in addition to icon, list, and gallery views) for navigating directory structures.\n\nShow the root level of your data hierarchy in the first column. People know they can quickly scroll back to the first column to begin navigating the hierarchy from the top again.\n\nConsider showing information about the selected item when there are no nested items to display. The Finder, for example, shows a preview of the selected item and information like the creation date, modification date, file type, and size.\n\nLet people resize columns. This is especially important if the names of some data items are too long to fit within the default column width.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nLists and tables\n\nOutline views\n\nSplit views\n\nDeveloper documentation\n\nNSBrowser — AppKit"
  },
  {
    "title": "Collections",
    "url": "https://developer.apple.com/design/human-interface-guidelines/collections",
    "html": "Collections\nA collection manages an ordered set of content and presents it in a customizable and highly visual layout.\n\nGenerally speaking, collections are ideal for showing image-based content.\n\nBest practices\n\nUse the standard row or grid layout whenever possible. Collections display content by default in a horizontal row or a grid, which are simple, effective appearances that people expect. Avoid creating a custom layout that might confuse people or draw undue attention to itself.\n\nConsider using a table instead of a collection for text. It’s generally simpler and more efficient to view and digest textual information when it’s displayed in a scrollable list.\n\nMake it easy to choose an item. If it’s too difficult to get to an item in your collection, people will get frustrated and lose interest before reaching the content they want. Use adequate padding around images to keep focus or hover effects easy to see and prevent content from overlapping.\n\nAdd custom interactions when necessary. By default, people can tap to select, touch and hold to edit, and swipe to scroll. If your app requires it, you can add more gestures for performing custom actions.\n\nConsider using animations to provide feedback when people insert, delete, or reorder items. Collections support standard animations for these actions, and you can also use custom animations.\n\nPlatform considerations\n\nNo additional considerations for macOS, tvOS, or visionOS. Not supported in watchOS.\n\niOS, iPadOS\n\nUse caution when making dynamic layout changes. The layout of a collection can change dynamically. Be sure any changes make sense and are easy to track. If possible, try to avoid changing the layout while people are viewing and interacting with it, unless it’s in response to an explicit action.\n\nResources\nRelated\n\nLists and tables\n\nImage views\n\nLayout\n\nDeveloper documentation\n\nUICollectionView — UIKit\n\nNSCollectionView — AppKit"
  },
  {
    "title": "Modality",
    "url": "https://developer.apple.com/design/human-interface-guidelines/modality",
    "html": "Modality\nModality is a design technique that presents content in a separate, dedicated mode that prevents interaction with the parent view and requires an explicit action to dismiss.\n\nPresenting content modally can:\n\nEnsure that people receive critical information and, if necessary, act on it\n\nProvide options that let people confirm or modify their most recent action\n\nHelp people perform a distinct, narrowly scoped task without losing track of their previous context\n\nGive people an immersive experience or help them concentrate on a complex task\n\nDepending on the platform, you might use different components to present these types of modal experiences. For example, all platforms can present an alert, which is a modal view that delivers important information related to your app or game. In addition, each platform may define various types of modal views for presenting context-specific options, such as activity views, sheets, and confirmation dialogs or action sheets. To help people perform a distinct task, iOS, iPadOS, and macOS apps tend to use sheets or popovers, but iPadOS, macOS, and visionOS apps might also just use a separate window.\n\nTo provide a temporary experience, like viewing media, or to help people perform a distinct, multistep task, like editing content, apps can offer a full-screen modal experience. In contrast, apps may also offer nonmodal types of full-screen experiences; for guidance, see Going full screen. visionOS apps can offer a range of immersive experiences; for guidance, see Immersive experiences.\n\nBest practices\n\nPresent content modally only when there’s a clear benefit. A modal experience takes people out of their current context and requires an action to dismiss, so it’s important to use modality only when it helps people focus or make choices that affect their content or device.\n\nAim to keep modal tasks simple, short, and streamlined. If a modal task is too complicated, people can lose track of the task they suspended when they entered the modal view, especially if the modal view obscures their previous context.\n\nTake care to avoid creating a modal experience that feels like an app within your app. In particular, presenting a hierarchy of views within a modal task can make people forget how to retrace their steps. If a modal task must contain subviews, provide a single path through the hierarchy and avoid including buttons that people might mistake for the button that dismisses the modal view.\n\nConsider using a full-screen modal style for in-depth content or a complex task. A modal experience that fills a window or the device display minimizes distractions, so it can work well for presenting videos, photos, or camera views, or to support a multistep task like marking up a document or editing a photo. When a visionOS app runs alongside other apps in the Shared Space, a full-screen modal presentation fills a window; if people transition the app to a Full Space, the full-screen modal presentation can become a more immersive experience.\n\nAlways give people an obvious way to dismiss a modal view. In general, it works well to follow the platform conventions people already know. For example, in iOS, iPadOS, and watchOS apps, people typically expect to find a button in the navigation bar or swipe down; in macOS and tvOS apps, people expect to find a button in the main content view.\n\nWhen necessary, help people avoid data loss by getting confirmation before closing a modal view. Regardless of whether people use a dismiss gesture or a button, if closing the view could result in the loss of user-generated content, be sure to explain the situation and give people ways to resolve it. For example, in iOS, you might present an action sheet that includes a save option.\n\nMake it easy to identify a modal view’s task. When people enter a modal view, they switch away from their previous context and might not return to it right away. When you provide a title that names the modal view’s task — or additional text that describes the task or provides guidance — you can help people keep their place in your app.\n\nLet people dismiss a modal view before presenting another one. Allowing multiple modal views to be visible at the same time tends to create visual clutter and can make your app seem scattered and disorganized. People need to remember the context they were in before a modal view appears, so presenting multiple views adds to people’s cognitive load, especially when a modal view hides another one by appearing on top of it. Although an alert can appear on top of all other content — including other modal views — you never want to display more than one alert at the same time.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nSheets\n\nAlerts\n\nPopovers\n\nAction sheets\n\nActivity views\n\nDeveloper documentation\n\nPresentation modifiers — SwiftUI\n\nUIModalPresentationStyle — UIKit\n\nModal Windows and Panels — AppKit\n\nVideos\nWhat’s new in iPad app design\nExplore navigation design for iOS\nWhat's New in iOS Design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nEnhanced guidance for in-depth modal experiences and clarified guidance on multiple modal views.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Scroll views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/scroll-views",
    "html": "Scroll views\nA scroll view lets people view content that’s larger than the view’s boundaries by moving the content vertically or horizontally.\n\nThe scroll view itself has no appearance, but it can display a translucent scroll indicator that typically appears after people begin scrolling the view’s content. Although the appearance and behavior of scroll indicators can vary per platform, all indicators provide visual feedback about the scrolling action. For example, in iOS, iPadOS, macOS, visionOS, and watchOS, the indicator shows whether the currently visible content is near the beginning, middle, or end of the view.\n\nBest practices\n\nSupport default scrolling gestures and keyboard shortcuts. People are accustomed to the systemwide scrolling behavior and expect it to work everywhere. If you build custom scrolling for a view, make sure your scroll indicators use the elastic behavior that people expect.\n\nMake it apparent when content is scrollable. Because scroll indicators aren’t always visible, it can be helpful to make it obvious when content extends beyond the view. For example, displaying partial content at the edge of a view indicates that there’s more content in that direction. Although most people immediately try scrolling a view to discover if additional content is available, it’s considerate to draw their attention to it.\n\nAvoid putting a scroll view inside another scroll view with the same orientation. Nesting scroll views that have the same orientation can create an unpredictable interface that’s difficult to control. It’s alright to place a horizontal scroll view inside a vertical scroll view (or vice versa), however.\n\nConsider supporting page-by-page scrolling if it makes sense for your content. In some situations, people appreciate scrolling by a fixed amount of content per interaction instead of scrolling continuously. On most platforms, you can define the size of such a page — typically the current height or width of the view — and define an interaction that scrolls one page at a time. To help maintain context during page-by-page scrolling, you can define a unit of overlap, such as a line of text, a row of glyphs, or part of a picture, and subtract the unit from the page size. For developer guidance, see PagingScrollTargetBehavior.\n\nIn some cases, scroll automatically to help people find their place. Although people initiate almost all scrolling, automatic scrolling can be helpful when relevant content is no longer in view, such as when:\n\nYour app performs an operation that selects content or places the insertion point in an area that’s currently hidden. For example, when your app locates text that people are searching for, scroll the content to bring the new selection into view.\n\nPeople start entering information in a location that’s not currently visible. For example, if the insertion point is on one page and people navigate to another page, scroll back to the insertion point as soon as they begin to enter text.\n\nThe pointer moves past the edge of the view while people are making a selection. In this case, follow the pointer by scrolling in the direction it moves.\n\nPeople select something and scroll to a new location before acting on the selection. In this case, scroll until the selection is in view before performing the operation.\n\nIn all cases, automatically scroll the content only as much as necessary to help people retain context. For example, if part of a selection is visible, you don’t need to scroll the entire selection into view.\n\nIf you support zoom, set appropriate maximum and minimum scale values. For example, zooming in on text until a single character fills the screen doesn’t make sense in most situations.\n\nPlatform considerations\niOS, iPadOS\n\nIn general, display one scroll view per screen. People often make large swipe gestures when scrolling, and it can be hard to avoid interacting with a neighboring scroll view on the same screen. If you need to put two scroll views on one screen, consider allowing them to scroll in different directions so one gesture is less likely to affect both views. For example, when iPhone is in portrait orientation, the Stocks app shows stock quotes that scroll vertically above company-specific information that scrolls horizontally.\n\nConsider showing a page control when a scroll view is in page-by-page mode. Page controls show how many pages, screens, or other chunks of content are available and indicates which one is currently visible. For example, Weather uses a page control to indicate movement between people’s saved locations. If you show a page control with a scroll view, don’t show the scrolling indicator on the same axis to avoid confusing people with redundant controls.\n\nmacOS\n\nIn macOS, a scroll indicator is commonly called a scroll bar.\n\nAccount for scroll bars in your layout. By default, scroll bars appear only when people interact with views that contain them, but people can use a setting in General settings to make them appear all the time. Some input devices also cause scroll bars to display all the time. If necessary, adjust the layout of your window so important interface elements don’t appear beneath scroll bars. The scroll bar track has a thickness of 15 points (regular size) or 11 points (small or mini size).\n\nAvoid moving window content when transient scroll bars appear. Constantly shifting content every time scroll bars appear can be disorienting.\n\nAvoid placing controls inline with a scroll bar. Doing this can cause the bar to appear even when people set it to be transient.\n\nIf necessary, use small or mini scroll bars in a panel. When space is tight, you can use smaller scroll bars in panels that need to coexist with other windows. Be sure to use the same size for all controls in such a panel.\n\ntvOS\n\nViews in tvOS can scroll, but they aren’t treated as distinct objects with scroll indicators. Instead, when content exceeds the size of the screen, the system automatically scrolls the interface to keep focused items visible.\n\nvisionOS\n\nIn visionOS, the scroll indicator has a small, fixed size to help communicate that people can scroll efficiently without making large movements. To make it easy to find, the scroll indicator always appears in a predictable location with respect to the window: vertically centered at the trailing edge during vertical scrolling and horizontally centered at the window’s bottom edge during horizontal scrolling.\n\nWhen people begin swiping content in the direction they want it to scroll, the scroll indicator appears at the window’s edge, visually reinforcing the effect of their gesture and providing feedback about the content’s current position and overall length. When people look at the scroll indicator and begin a drag gesture, the indicator enables a jog bar experience that lets people manipulate the scrolling speed instead of the content’s position. In this experience, the scroll indicator reveals tick marks that speed up or slow down as people make small adjustments to their gesture, providing visual feedback that helps people precisely control scrolling acceleration.\n\nPlay\n\nIf necessary, account for the size of the scroll indicator. Although the indicator’s overall size is small, it’s a little thicker than the same component in iOS. If your content uses tight margins, consider increasing them to prevent the scroll indicator from overlapping the content.\n\nwatchOS\n\nPrefer vertically scrolling content. People are accustomed to using the Digital Crown to navigate to and within apps on Apple Watch. If your app contains a single list or content view, rotating the Digital Crown scrolls vertically when your app’s content is taller than the height of the display.\n\nUse tab views to provide page-by-page scrolling. watchOS displays tab views as pages. If you place tab views in a vertical stack, people can rotate the Digital Crown to move vertically through full-screen pages of content. In this scenario, the system displays a page indicator next to the Digital Crown that shows people where they are in the content, both within the current page and within a set of pages. For guidance, see Tab views.\n\nWhen displaying paged content, consider limiting the content of an individual page to a single screen height. Embracing this constraint clarifies the purpose of each page, helping you create a more glanceable design. However, if your app has long pages, people can still use the Digital Crown both to navigate between shorter pages and to scroll content in a longer page because the page indicator expands into a scroll indicator when necessary. Use variable-height pages judiciously and place them after fixed-height pages when possible.\n\nResources\nRelated\n\nPage controls\n\nGestures\n\nPointing devices\n\nDeveloper documentation\n\nScrollView\n\nUIScrollView\n\nNSScrollView\n\nWKPageOrientation\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nAdded artwork showing the behavior of the visionOS scroll indicator.\n\n\n\n\nDecember 5, 2023\n\n\t\n\nDescribed the visionOS scroll indicator and added guidance for integrating it with window layout.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using scroll views in watchOS."
  },
  {
    "title": "Toggles",
    "url": "https://developer.apple.com/design/human-interface-guidelines/toggles#Checkboxes",
    "html": "Toggles\nA toggle lets people choose between a pair of opposing states, like on and off, using a different appearance to indicate each state.\n\nA toggle can have various styles, such as switch and checkbox, and different platforms can use these styles in different ways. For guidance, see Platform considerations.\n\nIn addition to toggles, all platforms also support buttons that behave like toggles by using a different appearance for each state. For developer guidance, see ToggleStyle.\n\nBest practices\n\nUse a toggle to help people choose between two opposing values that affect the state of content or a view. A toggle always lets people manage the state of something, so if you need to support other types of actions — such as choosing from a list of items — use a different component, like a pop-up button.\n\nClearly identify the setting, view, or content the toggle affects. In general, the surrounding context provides enough information for people to understand what they’re turning on or off. In some cases, often in macOS apps, you can also supply a label to describe the state the toggle controls. If you use a button that behaves like a toggle, you generally use an interface icon that communicates its purpose, and you update its appearance — typically by changing the background — based on the current state.\n\nMake sure the visual differences in a toggle’s state are obvious. For example, you might add or remove a color fill, show or hide the background shape, or change the inner details you display — like a checkmark or dot — to show that a toggle is on or off. Avoid relying solely on different colors to communicate state, because not everyone can perceive the differences.\n\nPlatform considerations\n\nNo additional considerations for tvOS, visionOS, or watchOS.\n\niOS, iPadOS\n\nUse the switch toggle style only in a list row. You don’t need to supply a label in this situation because the content in the row provides the context for the state the switch controls.\n\nChange the default color of a switch only if necessary. The default green color tends to work well in most cases, but you might want to use your app’s accent color instead. Be sure to use a color that provides enough contrast with the uncolored appearance to be perceptible.\n\nOutside of a list, use a button that behaves like a toggle, not a switch. Avoid supplying a label that explains the button’s purpose. The interface icon you create — combined with the alternative background appearances you supply — help people understand what the button does. For developer guidance, see changesSelectionAsPrimaryAction.\n\nCalendar displays a solid background shape behind the toggle’s symbol to indicate that the day’s events are visible.\n\nCalendar removes the solid background shape from the toggle to indicate that the day’s events are hidden.\n\nmacOS\n\nIn addition to the switch toggle style, macOS supports the checkbox style and also defines radio buttons that can provide similar behaviors.\n\nUse switches, checkboxes, and radio buttons in the window body, not the window frame. In particular, avoid using these components in a toolbar or status bar.\n\nSwitches\n\nAvoid using a switch to control a single detail or a minor setting. A switch has more visual weight than a checkbox, so it looks better when it controls more functionality than a checkbox typically does. For example, you might use a switch to let people turn on or off a group of settings, instead of just one setting.\n\nIn general, don’t replace a checkbox with a switch. If you’re already using a checkbox in your interface, it’s probably best to keep using it.\n\nCheckboxes\n\nA checkbox is a small square button that’s empty when the button is off, contains a checkmark when the button is on, and can contain a dash when the button’s state is mixed. Unless a checkbox appears in a checklist, a descriptive label follows the button.\n\nUse a checkbox instead of a switch if you need to present a hierarchy of settings. The visual style of checkboxes helps them align well and communicate grouping. By using alignment — generally along the leading edge of the checkboxes — and indentation, you can show dependencies, such as when the state of a checkbox governs the state of subordinate checkboxes.\n\nConsider using radio buttons if you need to present a set of more than two mutually exclusive options. When people need to choose from options in addition to just “on” or “off,” using multiple radio buttons can help you clarify each option with a unique label.\n\nConsider using a label to introduce a group of checkboxes if their relationship isn’t clear. Describe the set of options, and align the label’s baseline with the first checkbox in the group.\n\nAccurately reflect a checkbox’s state in its appearance. A checkbox can be in a selected, deselected, or mixed state. If you use a checkbox to globally turn on and off multiple subordinate checkboxes, show a mixed state when the subordinate checkboxes have different states. For example, you might need to present a text-style setting that turns all styles on or off, but also lets people choose a subset of individual style settings like bold, italic, or underline. For developer guidance, see allowsMixedState.\n\nDeselected\n\nSelected\n\nMixed\n\nRadio buttons\n\nA radio button is a small, circular button followed by a label. Typically displayed in groups of two to five, radio buttons present a set of mutually exclusive choices.\n\nA radio button’s state is either on (a filled circle) or off (an empty circle). Although a radio button can also display a mixed state (indicated by a dash), this state is rarely useful because you can communicate multiple states by using additional radio buttons. If you need to show that a setting or item has a mixed state, consider using a checkbox instead.\n\nPrefer a set of radio buttons to present mutually exclusive options. If you need to let people choose multiple options in a set, use checkboxes instead.\n\nAvoid listing too many radio buttons in a set. A long list of radio buttons takes up a lot of space in the interface and can be overwhelming. If you need to present more than about five options, consider using a component like a pop-up button instead.\n\nTo present a single setting that can be on or off, prefer a checkbox. Although a single radio button can also turn something on or off, the presence or absence of the checkmark in a checkbox can make the current state easier to understand at a glance. In rare cases where a single checkbox doesn’t clearly communicate the opposing states, you can use a pair of radio buttons, each with a label that specifies the state it controls.\n\nUse consistent spacing when you display radio buttons horizontally. Measure the space needed to accommodate the longest button label, and use that measurement consistently.\n\nResources\nRelated\n\nLayout\n\nDeveloper documentation\n\nToggle — SwiftUI\n\nUISwitch — UIKit\n\nNSButton.ButtonType.toggle — AppKit\n\nNSSwitch — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nUpdated artwork."
  },
  {
    "title": "Page controls",
    "url": "https://developer.apple.com/design/human-interface-guidelines/page-controls",
    "html": "Page controls\nA page control displays a row of indicator images, each of which represents a page in a flat list.\n\nThe scrolling row of indicators helps people navigate the list to find the page they want. Page controls can handle an arbitrary number of pages, making them particularly useful in situations where people can create custom lists.\n\nPage controls appear as a series of small indicator dots by default, representing the available pages. A solid dot denotes the current page. Visually, these dots are always equidistant, and are clipped if there are too many to fit in the window.\n\nBest practices\n\nUse page controls to represent movement between an ordered list of pages. Page controls don’t represent hierarchical or nonsequential page relationships. For more complex navigation, consider using a sidebar or split view instead.\n\nCenter a page control at the bottom of the view or window. To ensure people always know where to find a page control, center it horizontally and position it near the bottom of the view.\n\nAlthough page controls can handle any number of pages, don’t display too many. More than about 10 dots are hard to count at a glance. If your app needs to display more than 10 pages as peers, consider using a different arrangement‚ such as a grid, that lets people navigate the content in any order.\n\nCustomizing indicators\n\nBy default, a page control uses the system-provided dot image for all indicators, but it can also display a unique image to help people identify a specific page. For example, Weather uses the location.fill symbol to distinguish the current location’s page.\n\nIf it enhances your app or game, you can provide a custom image to use as the default image for all indicators and you can also supply a different image for a specific page. For developer guidance, see preferredIndicatorImage and setIndicatorImage(_:forPage:).\n\nMake sure custom indicator images are simple and clear. Avoid complex shapes, and don’t include negative space, text, or inner lines, because these details can make an icon muddy and indecipherable at very small sizes. Consider using simple SF Symbols as indicators or design your own icons. For guidance, see Icons.\n\nCustomize the default indicator image only when it enhances the page control’s overall meaning. For example, if every page you list contains bookmarks, you might use the bookmark.fill symbol as the default indicator image.\n\nAvoid using more than two different indicator images in a page control. If your list contains one page with special meaning — like the current-location page in Weather — you can make the page easy to find by giving it a unique indicator image. In contrast, a page control that uses several unique images to mark several important pages is hard to use because people must memorize the meaning of each image. A page control that displays more than two types of indicator images tends to look messy and haphazard, even when each image is clear.\n\nUsing only two different indicators looks well-organized and provides a consistent experience.\n\nUsing several different indicators can make a page control look busy and difficult to use.\n\nAvoid coloring indicator images. Custom colors can reduce the contrast that differentiates the current-page indicator and makes the page control visible on the screen. To ensure that your page control is easy to use and looks good in different contexts, let the system automatically color the indicators.\n\nPlatform considerations\n\nNot supported in macOS.\n\niOS, iPadOS\n\nA page control can adjust the appearance of indicators to provide more information about the list. For example, the control highlights the indicator of the current page so people can estimate the page’s relative position in the list. When there are more indicators than fit in the space, the control can shrink indicators at both sides to suggest that more pages are available.\n\nPeople interact with page controls by tapping or scrubbing (to scrub, people touch the control and drag left or right). Tapping on the leading or trailing side of the current-page indicator reveals the next or previous page; in iPadOS, people can also use the pointer to target a specific indicator. Scrubbing opens pages in sequence, and scrubbing past the leading or trailing edge of the control helps people quickly reach the first or last page.\n\nDeveloper note\n\nIn the API, tapping is a discrete interaction, whereas scrubbing is a continuous interaction; for developer guidance, see UIPageControl.InteractionState.\n\nAvoid animating page transitions during scrubbing. People can scrub very quickly, and using the scrolling animation for every transition can make your app lag and cause distracting visual flashes. Use the animated scrolling transition only for tapping.\n\nA page control can include a translucent, rounded-rectangle background appearance that provides visual contrast for the indicators. You can choose one of the following background styles:\n\nAutomatic — Displays the background only when people interact with the control. Use this style when the page control isn’t the primary navigational element in the UI.\n\nProminent — Always displays the background. Use this style only when the control is the primary navigational control in the screen.\n\nMinimal — Never displays the background. Use this style when you just want to show the position of the current page in the list and you don’t need to provide visual feedback during scrubbing.\n\nFor developer guidance, see backgroundStyle.\n\nAvoid supporting the scrubber when you use the minimal background style. The minimal style doesn’t provide visual feedback during scrubbing. If you want to let people scrub a list of pages in your app, use the automatic or prominent background styles.\n\ntvOS\n\nUse page controls on collections of full-screen pages. A page control is designed to operate in a full-screen environment where multiple content-rich pages are peers in the page hierarchy. Inclusion of additional controls makes it difficult to maintain focus while moving between pages.\n\nvisionOS\n\nIn visionOS, page controls represent available pages and indicate the current page, but people don’t interact with them.\n\nwatchOS\n\nIn watchOS, page controls can be displayed at the bottom of the screen for horizontal pagination, or next to the Digital Crown when presenting a vertical tab view. When using vertical tab views, the page indicator shows people where they are in the navigation, both within the current page and within the set of pages. The page control transitions between scrolling through a page’s content and scrolling to other pages.\n\nUse vertical pagination to separate multiple views into distinct, purposeful pages. Give each page a clear purpose, and let people scroll through the pages using the Digital Crown. In watchOS, this design is more effective than horizontal pagination or many levels of hierarchical navigation.\n\nConsider limiting the content of an individual page to a single screen height. Embracing this constraint encourages each page to serve a clear and distinct purpose and results in a more glanceable design. Use variable-height pages judiciously and, if possible, only place them after fixed-height pages in your app design.\n\nResources\nRelated\n\nScroll views\n\nDeveloper documentation\n\nPageTabViewStyle — SwiftUI\n\nUIPageControl — UIKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using page controls in watchOS."
  },
  {
    "title": "Token fields",
    "url": "https://developer.apple.com/design/human-interface-guidelines/token-fields",
    "html": "Token fields\nA token field is a type of text field that can convert text into tokens that are easy to select and manipulate.\n\nFor example, Mail uses token fields for the address fields in the compose window. As people enter recipients, Mail converts the text that represents each recipient’s name into a token. People can select these recipient tokens and drag to reorder them or move them into a different field.\n\nYou can configure a token field to present people with a list of suggestions as they enter text into the field. For example, Mail suggests recipients as people type in an address field. When people select a suggested recipient, Mail inserts the recipient into the field as a token.\n\nAn individual token can also include a contextual menu that offers information about the token or editing options. For example, a recipient token in Mail includes a contextual menu with commands for editing the recipient name, marking the recipient as a VIP, and viewing the recipient’s contact card, among others.\n\nTokens can also represent search terms in some situations; for guidance, see Search fields.\n\nBest practices\n\nAdd value with a context menu. People often benefit from a context menu with additional options or information about a token.\n\nConsider providing additional ways to convert text into tokens. By default, text people enter turns into a token whenever they type a comma. You can specify additional shortcuts, such as pressing Return, that also invoke this action.\n\nConsider customizing the delay the system uses before showing suggested tokens. By default, suggestions appear immediately. However, suggestions that appear too quickly may distract people while they’re typing. If your app suggests tokens, consider adjusting the delay to a comfortable level.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, and watchOS.\n\nResources\nRelated\n\nText fields\n\nSearch fields\n\nContext menus\n\nDeveloper documentation\n\nNSTokenField — AppKit"
  },
  {
    "title": "Sidebars",
    "url": "https://developer.apple.com/design/human-interface-guidelines/sidebars",
    "html": "Sidebars\nA sidebar can help people navigate your app or game, providing quick access to top-level collections of content.\n\nThe term sidebar refers to a list of top-level app areas and collections, almost always displayed in the primary pane of a split view. When people choose an item in a sidebar, the split view displays the item’s details in a secondary pane or — if the item contains a list — the secondary pane presents the list and a tertiary pane presents the details. For example, Mail in iOS, iPadOS, macOS, and visionOS uses sidebar styling and behavior to display the list of accounts and mailboxes, typically displaying the message list in a secondary pane and a message’s content in a tertiary pane.\n\nA sidebar layout can take a lot of horizontal space, especially if you want the sidebar and its accompanying panes to be visible at the same time. In a layout that’s horizontally constrained, you might want to consider an alternative component, like a tab bar.\n\nDeveloper note\n\nWhen you use SwiftUI to construct a sidebar interface, you automatically get platform-appropriate appearance and behavior. For developer guidance, see NavigationSplitView. If you don’t use SwiftUI, you can instead use UISplitViewController or NSSplitViewController.\n\nBest practices\n\nUse a sidebar to help people quickly navigate to key areas of your app or top-level collections of content, like folders and playlists. A sidebar can help you flatten your information hierarchy, giving people access to several peer information categories or modes at the same time.\n\nWhen possible, let people customize the contents of a sidebar. A sidebar lets people navigate to important areas in your app, so it works well when people can decide which areas are most important and in what order they appear.\n\nConsider letting people hide the sidebar. People sometimes want to hide the sidebar to create more room for content details or to reduce distraction. When possible, let people hide and show the sidebar using the platform-specific interactions they already know. For example, in iPadOS, people expect to use the built-in edge swipe gesture; in macOS, you can include a show/hide button or add Show Sidebar and Hide Sidebar commands to your app’s View menu. In visionOS, a window typically expands to accommodate a sidebar, so people rarely need to hide it. Avoid hiding the sidebar by default to ensure that it remains discoverable.\n\nIn general, show no more than two levels of hierarchy in a sidebar. When a data hierarchy is deeper than two levels, consider using a split view interface that includes a content list between the sidebar items and detail view.\n\nIf you need to include two levels of hierarchy in a sidebar, use succinct, descriptive labels to title each group. To help keep labels short, omit unnecessary words. For example, Mail omits the word Messages from the title of each mailbox, using more concise terms like Flagged and Drafts.\n\nPlatform considerations\n\nNo additional considerations for tvOS. Not supported in watchOS.\n\niOS, iPadOS\n\nIn an iOS app, consider using a tab bar instead of a sidebar. A sidebar interface can require a lot of horizontal space, which might make it too crowded on iPhone, especially in portrait orientation. In contrast, a tab bar works well to let people quickly switch between top-level sections in your app while preserving the current navigation state within each section.\n\nIn an iPadOS app, consider using a sidebar instead of a tab bar. Because a sidebar can display a large number of items, it can make navigating an iPad app more efficient. You can also let people customize a sidebar’s items and let them hide it to make more room for content.\n\nIf necessary, apply the correct appearance to a sidebar. If you’re not using SwiftUI to create a sidebar, you can use the sidebar appearance of a collection view list layout. For developer guidance, see UICollectionLayoutListConfiguration.Appearance.\n\nmacOS\n\nIn macOS, a sidebar — also known as a source list — extends to the full height of the window, and uses a rounded-corner appearance for the selected-item highlight.\n\nA sidebar’s row height, text, and glyph size depend on its overall size, which can be small, medium, or large. You can set the size programmatically, but people can also change it by selecting a different sidebar icon size in General settings. The table below shows the default metrics for a sidebar in macOS.\n\nSidebar size\n\n\t\n\nSidebar component\n\n\t\n\nDefault metrics\n\n\n\n\nSmall\n\n\t\n\nRow height\n\n\t\n\n24 pt\n\n\n\n\nSF Symbol scale\n\n\t\n\nMedium *\n\n\n\n\nIcon size\n\n\t\n\n16x16 px @1x\n\n\n\n\nText size (style)\n\n\t\n\n11 pt (Subhead)\n\n\n\n\nMedium\n\n\t\n\nRow height\n\n\t\n\n28 pt\n\n\n\n\nSF symbol scale\n\n\t\n\nMedium\n\n\n\n\nIcon size\n\n\t\n\n20x20 px @1x\n\n\n\n\nText size (style)\n\n\t\n\n13 pt (Body)\n\n\n\n\nLarge\n\n\t\n\nRow height\n\n\t\n\n32 pt\n\n\n\n\nSF Symbol scale\n\n\t\n\nMedium\n\n\n\n\nIcon size\n\n\t\n\n24x24 px @1x\n\n\n\n\nText size (style)\n\n\t\n\n15 pt (Title 3)\n\n\n\n\nAll\n\n\t\n\nHorizontal spacing between cells\n\n\t\n\n17 pt\n\n\n\n\nVertical spacing between cells\n\n\t\n\n0 pt\n\nIn some cases, a small sidebar uses small-scale SF Symbols by default.\n\nConsider using familiar symbols to represent items in the sidebar. SF Symbols provides a wide range of customizable symbols you can use to represent items in your app. If you need to use a bitmap image to create a custom interface icon for the sidebar, create the image in both @1x and @2x resolutions and in the small, medium, and large sizes shown in the table above.\n\nAvoid stylizing your app by specifying a fixed color for all sidebar icons. By default, sidebar icons use the current accent color and people expect to see their chosen accent color throughout all the apps they use. Although a fixed color can help clarify the meaning of an icon, you want to make sure that most sidebar icons display the color people choose.\n\nIf necessary, apply the correct background appearance to a sidebar. If you’re not using SwiftUI to create a sidebar in your macOS app, you may need to specify an opaque background for when the window contains more than one sidebar, or when using a sidebar in a panel or settings window. In all other use cases, use a translucent background for the sidebar.\n\nConsider automatically hiding and revealing a sidebar when its container window resizes. For example, reducing the size of a Mail viewer window can automatically collapse its sidebar, making more room for message content.\n\nIn an editable sidebar, avoid placing edit buttons at the bottom edge of the view. Consider providing buttons that add, remove, manipulate, or get information about items. Buttons at the bottom of the sidebar can hide when the bottom edge of the window is offscreen. To let people add a new sidebar group, include an Add (+) button on the trailing side of the group’s label, next to the disclosure triangle. Provide other actions, like remove, in a context menu or in a menu bar menu. For example, in addition to providing the New Mailbox command in a context menu, Mail also lists it in the Mailbox menu.\n\nvisionOS\n\nIf your app’s hierarchy is deep, consider using a sidebar within a tab in a tab bar. In this situation, a sidebar can support secondary navigation within the tab. If you do this, be sure to prevent selections in the sidebar from changing which tab is currently open.\n\nResources\nRelated\n\nSplit views\n\nTab bars\n\nNavigation bars\n\nLayout\n\nDeveloper documentation\n\nNavigationSplitView — SwiftUI\n\nsidebar — SwiftUI\n\nUICollectionLayoutListConfiguration — UIKit\n\nNSSplitViewController — AppKit\n\nVideos\nDesigned for iPad\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded artwork for iPadOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Search fields",
    "url": "https://developer.apple.com/design/human-interface-guidelines/search-fields",
    "html": "Search fields\nA search field lets people search a collection of content for specific terms they enter.\n\nA search field is an editable text field that often displays a Search button, a Clear button, and optional placeholder text. Depending on the platform, a search text field can use a token to represent a search term that people enter or an app-defined item that people can use as a filter. A token uses a visual treatment that encapsulates the term or item, indicating that people can easily copy or drag the token without having to select the text within it. For an example of a token in macOS, see Token fields.\n\nIn iOS, iPadOS, and watchOS, when you make a list searchable, the system hides the search field under the toolbar until someone swipes down to reveal it. For developer guidance, see searchable(text:placement:prompt:).\n\niOS and iPadOS\nwatchOS\n\nBest practices\n\nDisplay placeholder text that describes the type of information people can search for. For example, Music includes the placeholder text Artists, Songs, Lyrics, and More. Avoid using a term like Search for placeholder text because it doesn’t provide any helpful information.\n\nProvide suggestions to improve the search experience. When you display a person’s recent searches (when available) or a list of popular terms or suggestions based on the content they’re entering, you can help them type less. For developer guidance, see searchSuggestions(_:).\n\nConsider providing access to relevant items near a search field so people can select them instead of searching. For example, Safari shows bookmarks as soon as people tap or click the search field, letting them select a bookmark to open it immediately. For developer guidance, see UISearchSuggestion.\n\nStart the search at an appropriate time. You can start the search as soon as people start typing, or wait until they choose Return or Enter. Searching while people type provides results that are continuously refined as the text becomes more specific. If the search happens after people finish typing, consider showing a menu while they type that lets them choose from their recent searches or terms you suggest.\n\nInclude a Clear button. People appreciate having a Clear button because it lets them quickly delete their current search terms.\n\nTake privacy into consideration before displaying search history. People might not appreciate having their search history displayed where others might see it. As an alternative, consider offering a scope bar that helps people narrow down results quickly.\n\nScope bars\n\nIn iOS, iPadOS, and tvOS, you can use a scope bar to help people refine the scope of a search. For developer guidance, see UISearchBar.\n\nFavor improving search results over including a scope bar. A scope bar can be useful when there are clearly defined categories for the search, but it’s generally better to improve search results so scoping isn’t necessary.\n\nPlatform considerations\n\nNo additional considerations for visionOS.\n\niOS, iPadOS\n\nYou can display a search field in a navigation bar or within your content area. When you use system-provided components to include a search field in a navigation bar, it automatically receives the appropriate appearance and behaves as people expect. For example, the search bar can hide until people swipe down to reveal it.\n\nDeveloper note\n\nUse searchController if you want to take advantage of the system-provided appearance and behavior of a search field within a navigation bar. If you need to implement custom appearances and behaviors for a search field, consider using UISearchBar to create a field you want to put in a bar or UISearchTextField to apply a custom background to a search field in a content area.\n\nmacOS\n\nAlthough it’s typical to include a search field in a window’s toolbar, you can also display one in the body area.\n\nAvoid supplying an introductory label for a search field within a content area. People are familiar with the distinctive appearance of a search field, so there is no need to label it. In contrast, when you place a search field in a toolbar, supply the label “Search” so that the label appears when people configure the toolbar to show icons and text or text only.\n\nApply the appropriate bezel style to a scope button. There are two bezel styles you can use. The recessed bezel — which makes the button look like it’s slightly inset — is for scope buttons that toggle on and off to narrow a search; the rounded bezel is for scope buttons that initiate an action or specify search criteria.\n\nIf appropriate, let people refine the scope. You can provide supplementary scoping rules using filter rows that appear beneath a scope bar. For example, when searching for a filename in Finder, people can click an Add (+) button to specify additional attributes like an extension or a modification date range. A filter row can include text fields, buttons, and other controls for specifying filter criteria.\n\ntvOS\n\nA search screen is a specialized keyboard screen that helps people enter search text, displaying search results beneath the keyboard in a fully customizable view. For developer guidance, see UISearchController.\n\nConsider presenting recent searches. Because people frequently repeat searches in tvOS, you can minimize the need for text entry by listing popular or recent searches in the results area under the keyboard before people start typing.\n\nProvide suggestions to make searching easier. People typically don’t want to do a lot of typing in tvOS. To improve the search experience, provide popular and context-specific search suggestions, including recent searches when available. For developer guidance, see Using Suggested Searches with a Search Controller.\n\nSimplify search results. Avoid providing a lengthy list of search results that requires lots of scrolling. In addition to prioritizing the most likely results, consider categorizing them to help people find what they want.\n\nConsider letting people filter search results. For example, you can include a scope bar in the search results content area to help people quickly and easily filter search results.\n\nwatchOS\n\nWhen someone taps the search field, the system displays a text-input control that covers the entire screen. The app only returns to the search field after they tap the Cancel or Search button.\n\nResources\nRelated\n\nSearching\n\nDeveloper documentation\n\nsearchable(text:placement:) — SwiftUI\n\nUISearchBar — UIKit\n\nUISearchTextField — UIKit\n\nNSSearchField — AppKit\n\nVideos\nDiscoverable design\nCraft search experiences in SwiftUI\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nCombined guidance common to all platforms.\n\n\n\n\nJune 5, 2023\n\n\t\n\nAdded guidance for using search fields in watchOS."
  },
  {
    "title": "Complications",
    "url": "https://developer.apple.com/design/human-interface-guidelines/complications",
    "html": "Complications\nA complication displays timely, relevant information on the watch face, where people can view it each time they raise their wrist.\n\nPeople often prefer apps that provide multiple, powerful complications, because it gives them quick ways to view the data they care about, even when they don’t open the app.\n\nMost watch faces can display at least one complication; some can display four or more.\n\nStarting in watchOS 9, the system organizes complications (also known as accessories) into several families — like circular and inline — and defines some recommended layouts you can use to display your complication data. A watch face can specify the family it supports in each complication slot. Complications that work in earlier versions of watchOS can use the legacy templates, which define nongraphic complication styles that don’t take on a wearer’s selected color.\n\nDeveloper note\n\nPrefer using WidgetKit to develop complications for watchOS 9 and later. For guidance, see Migrating ClockKit complications to WidgetKit. To support earlier versions of watchOS, continue to implement the ClockKit complication data source protocol (see CLKComplicationDataSource).\n\nBest practices\n\nIdentify essential, dynamic content that people want to view at a glance. Although people can use a complication to quickly launch an app, the complication behavior they appreciate more is the display of relevant information that always feels up to date. A static complication that doesn’t display meaningful data may be less likely to remain in a prominent position on the watch face.\n\nSupport all complication families when possible. Supporting more families means that your complications are available on more watch faces. If you can’t display useful information for a particular complication family, provide an image that represents your app — like your app icon — that still lets people launch your app from the watch face.\n\nConsider creating multiple complications for each family. Supporting multiple complications helps you take advantage of shareable watch faces and lets people configure a watch face that’s centered on an app they love. For example, an app that helps people train for triathlons could offer three circular complications — one for each segment of the race — each of which deep-links to the segment-specific area in the app. This app could also offer a shareable watch face that’s preconfigured to include its swimming, biking, and running complications and to use its custom images and colors. When people choose this watch face, they don’t have to do any configuration before they can start using it. For guidance, see Watch faces.\n\nDefine a different deep link for each complication you support. It works well when each complication opens your app to the most relevant area. If all the complications you support open the same area in your app, they can seem less useful.\n\nKeep privacy in mind. With the Always-On Retina display, information on the watch face might be visible to people other than the wearer. Make sure you help people prevent potentially sensitive information from being visible to others. For guidance, see Always On.\n\nCarefully consider when to update data. You provide a complication’s data in the form of a timeline where each entry has a value that specifies the time at which to display your data on the watch face. Different data sets might require different time values. For example, a meeting app might display information about an upcoming meeting an hour before the meeting starts, but a weather app might display forecast information at the time those conditions are expected to occur. You can update the timeline a limited number of times each day, and the system stores a limited number of timeline entries for each app, so you need to choose times that enhance the usefulness of your data. For developer guidance, see Migrating ClockKit complications to WidgetKit.\n\nVisual design\n\nChoose a ring or gauge style based on the data you need to display. Many families support a ring or gauge layout that provides consistent ways to represent numerical values that can change over time. For example:\n\nThe closed style can convey a value that’s a percentage of a whole, such as for a battery gauge.\n\nThe open style works well when the minimum and maximum values are arbitrary — or don’t represent a percentage of the whole — like for a speed indicator.\n\nSimilar to the open style, the segmented style also displays values within an app-defined range, and can convey rapid value changes, such as in the Noise complication.\n\nMake sure images look good in tinted mode. In tinted mode, the system applies a solid color to a complication’s text, gauges, and images, and desaturates full-color images unless you provide tinted versions of them. For developer guidance, see WidgetRenderingMode. (If you’re using legacy templates, tinted mode applies only to graphic complications.) To help your complications perform well in tinted mode:\n\nAvoid using color as the only way to communicate important information. You want people to get the same information in tinted mode as they do in nontinted mode.\n\nWhen necessary, provide an alternative tinted-mode version of a full-color image. If your full-color image doesn’t look good when it’s desaturated, you can supply a different version of the image for the system to use in tinted mode.\n\nRecognize that people might prefer to use tinted mode for complications, instead of viewing them in full color. When people choose tinted mode, the system automatically desaturates your complication, converting it to grayscale and tinting its images, gauges, and text using a single color that’s based on the wearer’s selected color.\n\nWhen creating complication content, generally use line widths of two points or greater. Thinner lines can be difficult to see at a glance, especially when the wearer is in motion. Use line weights that suit the size and complexity of the image.\n\nProvide a set of static placeholder images for each complication you support. The system uses placeholder images when there’s no other content to display for your complication’s data. For example, when people first install your app, the system can display a static placeholder while it checks to see if your app can generate a localized placeholder to use instead. Placeholder images can also appear in the carousel from which people select complications. Note that complication image sizes vary per layout (and per legacy template) and the size of a placeholder image may not match the size of the actual image you supply for that complication. For developer guidance, see placeholder(in:).\n\nCircular\n\nCircular layouts can include text, gauges, and full-color images in circular areas on the Infograph and Infograph Modular watch faces. The circular family also defines extra-large layouts for displaying content on the X-Large watch face.\n\nClosed gauge image\n\nClosed gauge text\n\nOpen gauge image\n\nOpen gauge text\n\nOpen gauge range\n\nImage\n\nStack image\n\nStack text\n\nYou can also add text to accompany a regular-size circular image, using a design that curves the text along the bezel of some watch faces, like Infograph. The text can fill nearly 180 degrees of the bezel before truncating.\n\nClosed gauge image\n\nAs you design images for a regular-size circular complication, use the following values for guidance.\n\nImage\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nImage\n\n\t\n\n42x42 pt (84x84 px @2x)\n\n\t\n\n44.5x44.5 pt (89x89 px @2x)\n\n\t\n\n47x47 pt (94x94 px @2x)\n\n\t\n\n50x50 pt (100x100 px @2x)\n\n\n\n\nClosed gauge\n\n\t\n\n27x27 pt (54x54 px @2x)\n\n\t\n\n28.5x28.5 pt (57x57 px @2x)\n\n\t\n\n31x31 pt (62x62 px @2x)\n\n\t\n\n32x32 pt (64x64 px @2x)\n\n\n\n\nOpen gauge\n\n\t\n\n11x11 pt (22x22 px @2x)\n\n\t\n\n11.5x11.5 pt (23x23 px @2x)\n\n\t\n\n12x12 pt (24x24 px @2x)\n\n\t\n\n13x13 pt (26x26 px @2x)\n\n\n\n\nStack (not text)\n\n\t\n\n28x14 pt (56x28 px @2x)\n\n\t\n\n29.5x15 pt (59X30 px @2x)\n\n\t\n\n31x16 pt (62x32px @ 2x)\n\n\t\n\n33.5x16.5 pt (67x33 px @2x)\n\nNote\n\nThe system applies a circular mask to each image.\n\nA SwiftUI view that implements a regular-size circular complication uses the following default text values:\n\nStyle: Rounded\n\nWeight: Medium\n\nText size: 12 pt (40mm), 12.5 pt (41mm), 13 pt (44mm), 14.5 pt (45mm/49mm)\n\nIf you want to design an oversized treatment of important information that can appear on the X-Large watch face — for example, the Contacts complication, which features a contact photo — use the extra-large versions of the circular family’s layouts. The following layouts let you display full-color images, text, and gauges in a large circular region that fills most of the X-Large watch face. Some of the text fields can support multicolor text.\n\nClosed gauge image\n\nClosed gauge text\n\nOpen gauge image\n\nOpen gauge text\n\nOpen gauge range\n\nImage\n\nStack image\n\nStack text\n\nUse the following values for guidance as you create images for an extra-large circular complication.\n\nImage\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nImage\n\n\t\n\n120x120 pt (240x240 px @2x)\n\n\t\n\n127x127 pt (254x254 px @2x)\n\n\t\n\n132x132 pt (264x264 px @2x)\n\n\t\n\n143x143 pt (286x286 px @2x)\n\n\n\n\nOpen gauge\n\n\t\n\n31x31 pt (62x62 px @2x)\n\n\t\n\n33x33 pt (66x66 px @2x)\n\n\t\n\n33x33 pt (66x66 px @2x)\n\n\t\n\n37x37 pt (74x74 px @2x)\n\n\n\n\nClosed gauge\n\n\t\n\n77x77 pt (154x154 px @2x)\n\n\t\n\n81.5x81.5 (163x163 px @2x)\n\n\t\n\n87x87 pt (174x174 px @2x)\n\n\t\n\n91.5x91.5 (183x183 px @2x)\n\n\n\n\nStack\n\n\t\n\n80x40 pt (160x80 px @2x)\n\n\t\n\n85x42 (170x84 px @2x)\n\n\t\n\n87x44 pt (174x88 px @2x)\n\n\t\n\n95x48 pt (190x96 px @2x )\n\nNote\n\nThe system applies a circular mask to the circular, open-gauge, and closed-gauge images.\n\nUse the following values to create no-content placeholder images for your circular-family complications.\n\nLayout\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nCircular\n\n\t\n\n–\n\n\t\n\n42x42 pt (84x84 px @2x)\n\n\t\n\n44.5x44.5 pt (89x89 px @2x)\n\n\t\n\n47x47 pt (94x94 px @2x)\n\n\t\n\n50x50 pt (100x100 px @2x)\n\n\n\n\nBezel\n\n\t\n\n–\n\n\t\n\n42x42 pt (84x84 px @2x)\n\n\t\n\n44.5x44.5 pt (89x89 px @2x)\n\n\t\n\n47x47 pt (94x94 px @2x)\n\n\t\n\n50x50 pt (100x100 px @2x)\n\n\n\n\nExtra Large\n\n\t\n\n–\n\n\t\n\n120x120 pt (240x240 px @2x)\n\n\t\n\n127x127 pt (254x254 px @2x)\n\n\t\n\n132x132 pt (264x264 px @2x)\n\n\t\n\n143x143 pt (286x286 px @2x)\n\nA SwiftUI view that implements an extra-large circular layout uses the following default text values:\n\nStyle: Rounded\n\nWeight: Medium\n\nText size: 34.5 pt (40mm), 36.5 pt (41mm), 36.5 pt (44mm), 41 pt (45mm/49mm)\n\nCorner\n\nCorner layouts let you display full-color images, text, and gauges in the corners of the watch face, like Infograph. Some of the templates also support multicolor text.\n\nCircular image\n\nGauge image\n\nGauge text\n\nStack text\n\nText image\n\nAs you design images for a corner complication, use the following values for guidance.\n\nImage\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nCircular\n\n\t\n\n32x32 pt (64x64 px @2x)\n\n\t\n\n34x34 pt (68x68 px @2x)\n\n\t\n\n36x36 pt (72x72 px @2x)\n\n\t\n\n38x38 pt (76x76 px @2x )\n\n\n\n\nGauge\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21x21 pt (42x42 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n24x24 pt (48x48 px @2x)\n\n\n\n\nText\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21x21 pt (42x42 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n24x24 pt (48x48 px @2x)\n\nNote\n\nThe system applies a circular mask to each image.\n\nUse the following values to create no-content placeholder images for your corner-family complications.\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\n–\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21x21 pt (42x42 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n24x24 pt (48x48 px @2x)\n\nA SwiftUI view that implements a corner layout uses the following default text values:\n\nStyle: Rounded\n\nWeight: Semibold\n\nText size: 10 pt (40mm), 10.5 pt (41mm), 11 pt (44mm), 12 pt (45mm/49mm)\n\nInline\n\nInline layouts include utilitarian small and large layouts.\n\nUtilitarian small layouts are intended to occupy a rectangular area in the corner of a watch face, such as the Chronograph and Simple watch faces. The content can include an image, interface icon, or a circular graph.\n\nFlat\n\nRing image\n\nRing text\n\nSquare\n\nAs you design images for a utilitarian small layout, use the following values for guidance.\n\nContent\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nFlat\n\n\t\n\n9-21x9 pt (18-42x18 px @2x)\n\n\t\n\n10-22x10 pt (20-44x20 px @2x)\n\n\t\n\n10.5-23.5x21 pt (21-47x21 @2x)\n\n\t\n\nN/A\n\n\t\n\n12-26x12 pt (24-52x24 px @2x)\n\n\n\n\nRing\n\n\t\n\n14x14 pt (28x28 px @2x)\n\n\t\n\n14x14 pt (28x28 px @2x)\n\n\t\n\n15x15 pt (30x30 px @2x)\n\n\t\n\n16x16 pt (32x32 px @2x)\n\n\t\n\n16.5x16.5 pt (33x33 px @2x)\n\n\n\n\nSquare\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n23.5x23.5 pt (47x47 px @2x)\n\n\t\n\n25x25 pt (50x50 px @2x)\n\n\t\n\n26x26 pt (52x52 px @2x)\n\nThe utilitarian large layout is primarily text-based, but also supports an interface icon placed on the leading side of the text. This layout spans the bottom of a watch face, like the Utility or Motion watch faces.\n\nLarge flat\n\nAs you design images for a utilitarian large layout, use the following values for guidance.\n\nContent\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nFlat\n\n\t\n\n9-21x9 pt (18-42x18 px @2x)\n\n\t\n\n10-22x10 pt (20-44x20 px @2x)\n\n\t\n\n10.5-23.5x10.5 pt (21-47x21 px @2x)\n\n\t\n\nN/A\n\n\t\n\n12-26x12 pt (24-52x24 px @2x)\n\nRectangular\n\nRectangular layouts can display full-color images, text, a gauge, and an optional title in a large rectangular region. Some of the text fields can support multicolor text.\n\nThe large rectangular region works well for showing details about a value or process that changes over time, because it provides room for information-rich charts, graphs, and diagrams. For example, the Heart Rate complication displays a graph of heart-rate values within a 24-hour period. The graph uses high-contrast white and red for the primary content and a lower-contrast gray for the graph lines and labels, making the data easy to understand at a glance.\n\nStarting with watchOS 10, if you have created a rectangular layout for your watchOS app, the system may display it in the Smart Stack. You can optimize this presentation in a few ways:\n\nBy supplying background color or content that communicates information or aids in recognition\n\nBy using intents to specify relevancy, and help ensure that your widget is displayed in the Smart Stack at times that are most appropriate and useful to people\n\nBy creating a custom layout of your information that is optimized for the Smart Stack\n\nFor developer guidance, see WidgetFamily.accessoryRectangular. See Widgets for additional guidance on designing widgets for the Smart Stack.\n\nStandard body\n\nText gauge\n\nLarge image\n\nUse the following values for guidance as you create images for a rectangular layout.\n\nContent\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nLarge image with title *\n\n\t\n\n150x47 pt (300x94 px @2x)\n\n\t\n\n159x50 pt (318x100 px @2x)\n\n\t\n\n171x54 pt (342x108 px @2x)\n\n\t\n\n178.5x56 pt (357x112 px @2x)\n\n\n\n\nLarge image without title *\n\n\t\n\n162x69 pt (324x138 px @2x)\n\n\t\n\n171.5x73 pt (343x146 px @2x)\n\n\t\n\n184x78 pt (368x156 px @2x)\n\n\t\n\n193x82 pt (386x164 px @2x)\n\n\n\n\nStandard body\n\n\t\n\n12x12 pt (24x24 px @2x)\n\n\t\n\n12.5x12.5 pt (25x25 px @2x)\n\n\t\n\n13.5x13.5 pt (27x27 px @2x)\n\n\t\n\n14.5x14.5 pt (29x29 px @2x)\n\n\n\n\nText gauge\n\n\t\n\n12x12 pt (24x24 px @2x)\n\n\t\n\n12.5x12.5 pt (25x25 px @2x)\n\n\t\n\n13.5x13.5 pt (27x27 px @2x)\n\n\t\n\n14.5x14.5 pt (29x29 px @2x)\n\nNote\n\nBoth large-image layouts automatically include a four-point corner radius.\n\nA SwiftUI view that implements a rectangular layout uses the following default text values:\n\nStyle: Rounded\n\nWeight: Medium\n\nText size: 16.5 pt (40mm), 17.5 pt (41mm), 18 pt (44mm), 19.5 pt (45mm/49mm)\n\nLegacy templates\nCircular small\n\nCircular small templates display a small image or a few characters of text. They appear in the corner of the watch face (for example, in the Color watch face).\n\nRing image\n\nRing text\n\nSimple image\n\nSimple text\n\nStack image\n\nStack text\n\nAs you design images for a circular small complication, use the following values for guidance.\n\nImage\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nRing\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n22x22 pt (44x44 px @2x)\n\n\t\n\n23.5x23.5 pt (47x47 px @2x)\n\n\t\n\n24x24 pt (48x48 px @2x)\n\n\t\n\n26x26 pt (52x52 px @2x)\n\n\n\n\nSimple\n\n\t\n\n16x16 pt (32x32 px @2x)\n\n\t\n\n18x18 pt (36x36 px @2x)\n\n\t\n\n19x19 pt (38x38 px @2x)\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21.5x21.5 pt (43x43 px @2x)\n\n\n\n\nStack\n\n\t\n\n16x7 pt (32x14 px @2x)\n\n\t\n\n17x8 pt (34x16 px @2x)\n\n\t\n\n18x8.5 pt (36x17 px @2x)\n\n\t\n\n19x9 pt (38x18 px @2x)\n\n\t\n\n19x9.5 pt (38x19 px @2x)\n\n\n\n\nPlaceholder\n\n\t\n\n16x16 pt (32x32 px @2x)\n\n\t\n\n18x18x pt (36x36 px @2x)\n\n\t\n\n19x19 pt (38x38 px @2x)\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21.5x21.5 pt (43x43 px @2x)\n\nNote\n\nIn each stack measurement, the width value represents the maximum size.\n\nModular small\n\nModular small templates display two stacked rows consisting of an icon and content, a circular graph, or a single larger item (for example, the bottom row of complications on the Modular watch face).\n\nColumns text\n\nRing image\n\nRing text\n\nSimple image\n\nSimple text\n\nStack image\n\nStack text\n\nAs you design icons and images for a modular small complication, use the following values for guidance.\n\nImage\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nRing\n\n\t\n\n18x18 pt (36x36 px @2x)\n\n\t\n\n19x19 pt (38x38 px @2x)\n\n\t\n\n20x20 pt (40x40 px @2x)\n\n\t\n\n21x21 pt (42x42 px @2x)\n\n\t\n\n22.5x22.5 pt (45x45 px @2x)\n\n\n\n\nSimple\n\n\t\n\n26x26 pt (52x52 px @2x)\n\n\t\n\n29x29 pt (58x58 px @2x)\n\n\t\n\n30.5x30.5 pt (61x61 px @2x)\n\n\t\n\n32x32 pt (64x64 px @2x)\n\n\t\n\n34.5x34.5 pt (69x69 px @2x)\n\n\n\n\nStack\n\n\t\n\n26x14 pt (52x28 px @2x)\n\n\t\n\n29x15 pt (58x30 px @2x)\n\n\t\n\n30.5x16 pt (61x32 px @2x)\n\n\t\n\n32x17 pt (64x34 px @2x)\n\n\t\n\n34.5x18 pt (69x36 px @2x)\n\n\n\n\nPlaceholder\n\n\t\n\n26x26 pt (52x52 px @2x)\n\n\t\n\n29x29 pt (58x58 px @2x)\n\n\t\n\n30.5x30.5 pt (61x61 px @2x)\n\n\t\n\n32x32 pt (64x64 px @2x)\n\n\t\n\n34.5x34.5 pt (69x69 px @2x)\n\nNote\n\nIn each stack measurement, the width value represents the maximum size.\n\nModular large\n\nModular large templates offer a large canvas for displaying up to three rows of content (for example, in the center of the Modular watch face).\n\nColumns\n\nStandard body\n\nTable\n\nTall body\n\nAs you design icons and images for a modular large complication, use the following values for guidance.\n\nContent\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nColumns\n\n\t\n\n11-32x11 pt (22-64x22 px @2x)\n\n\t\n\n12-37x12 pt (24-74x24 px @2x)\n\n\t\n\n12.5-39x12.5 pt (25-78x25 px @2x)\n\n\t\n\n14-42x14 pt (28-84x28 px @2x)\n\n\t\n\n14.5-44x14.5 pt (29-88x29 px @2x)\n\n\n\n\nStandard body\n\n\t\n\n11-32x11 pt (22-64x22 px @2x)\n\n\t\n\n12-37x12 pt (24-74x24 px @2x)\n\n\t\n\n12.5-39x12.5 pt (25-78x25 px @2x)\n\n\t\n\n14-42x14 pt (28-84x28 px @2x)\n\n\t\n\n14.5-44x14.5 pt (29-88x29 px @2x)\n\n\n\n\nTable\n\n\t\n\n11-32x11 pt (22-64x22 px @2x)\n\n\t\n\n12-37x12 pt (24-74x24 px @2x)\n\n\t\n\n12.5-39x12.5 pt (25-78x25 px @2x)\n\n\t\n\n14-42x14 pt (28-84x28 px @2x)\n\n\t\n\n14.5-44x14.5 pt (29-88x29 px @2x)\n\nExtra large\n\nExtra large templates display larger text and images (for example, on the X-Large watch faces).\n\nRing image\n\nRing text\n\nSimple image\n\nSimple text\n\nStack image\n\nStack text\n\nAs you design icons and images for an extra large complication, use the following values for guidance.\n\nImage\n\n\t\n\n38mm\n\n\t\n\n40mm/42mm\n\n\t\n\n41mm\n\n\t\n\n44mm\n\n\t\n\n45mm/49mm\n\n\n\n\nRing\n\n\t\n\n63x63 pt (126x126 px @2x)\n\n\t\n\n66.5x66.5 pt (133x133 px @2x)\n\n\t\n\n70.5x70.5 pt (141x141 px @2x)\n\n\t\n\n73x73 pt (146x146 px @2x)\n\n\t\n\n79x79 pt (158x158 px @2x)\n\n\n\n\nSimple\n\n\t\n\n91x91 pt (182x182 px @2x)\n\n\t\n\n101.5x101.5 pt (203x203 px @2x)\n\n\t\n\n107.5x107.5 pt (215x215 px @2x)\n\n\t\n\n112x112 pt (224x224 px @2x)\n\n\t\n\n121x121 pt (242x242 px @2x )\n\n\n\n\nStack\n\n\t\n\n78x42 pt (156x84 px @2x)\n\n\t\n\n87x45 pt (174x90 px @2x)\n\n\t\n\n92x47.5 pt (184x95 px @2x)\n\n\t\n\n96x51 pt (192x102 px @2x)\n\n\t\n\n103.5x53.5 pt (207x107 px @2x)\n\n\n\n\nPlaceholder\n\n\t\n\n91x91 pt (182x182 px @2x)\n\n\t\n\n101.5x101.5 pt (203x203 px @2x)\n\n\t\n\n107.5x107.5 pt (215x215 px @2x)\n\n\t\n\n112x112 pt (224x224 px @2x)\n\n\t\n\n121x121 pt (242x242 px @2x)\n\nNote\n\nIn each stack measurement, the width value represents the maximum size.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, tvOS, or visionOS.\n\nResources\nRelated\n\nWatch faces\n\nDeveloper documentation\n\nWidgetKit\n\nVideos\nDesign widgets for the Smart Stack on Apple Watch\nGo further with Complications in WidgetKit\nComplications and widgets: Reloaded\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nReplaced links to deprecated ClockKit documentation with links to WidgetKit documentation.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for rectangular complications to support them as widgets in the Smart Stack.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded specifications for Apple Watch Ultra."
  },
  {
    "title": "Path controls",
    "url": "https://developer.apple.com/design/human-interface-guidelines/path-controls",
    "html": "Path controls\nA path control shows the file system path of a selected file or folder.\n\nFor example, choosing View > Show Path Bar in the Finder displays a path bar at the bottom of the window. It shows the path of the selected item, or the path of the window’s folder if nothing is selected.\n\nThere are two styles of path control.\n\nStandard. A linear list that includes the root disk, parent folders, and selected item. Each item appears with an icon and a name. If the list is too long to fit within the control, it hides names between the first and last items. If you make the control editable, people can drag an item onto the control to select the item and display its path in the control.\n\nPop up. A control similar to a pop-up button that shows the icon and name of the selected item. People can click the item to open a menu containing the root disk, parent folders, and selected item. If you make the control editable, the menu contains an additional Choose command that people can use to select an item and display it in the control. They can also drag an item onto the control to select it and display its path.\n\nBest practices\n\nUse a path control in the window body, not the window frame. Path controls aren’t intended for use in toolbars or status bars. Note that the path control in the Finder appears at the bottom of the window body, not in the status bar.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nFile management\n\nDeveloper documentation\n\nNSPathControl — AppKit"
  },
  {
    "title": "Navigation bars",
    "url": "https://developer.apple.com/design/human-interface-guidelines/navigation-bars",
    "html": "Navigation bars\nA navigation bar appears at the top of a window or screen, helping people navigate through a hierarchy of content.\n\nA navigation bar provides a natural place to display a title that can help people orient themselves in your app or game, and it can also include controls that affect the content below it.\n\nmacOS doesn’t provide a navigation bar. To support navigation in a macOS app, you often use a sidebar or a navigation control like a Back button in a toolbar. Also, you typically display the title of a macOS window in the title bar.\n\nBest practices\n\nUse the title area to describe the current window if it provides useful context. A title helps people confirm their location as they navigate your app. However, if titling a navigation bar seems redundant, you can leave the title area empty. For example, Notes doesn’t title the current note because the first line of content typically supplies sufficient context. Your app’s name doesn’t provide useful information about your content hierarchy or any window or screen in your app, so it doesn’t work well as a title.\n\nWrite a concise title. Aim for a word or short phrase that distills the purpose of the window or screen. Using no more than about 15 characters tends to work well in most cases because it leaves enough room for a Back button and optional controls.\n\nConsider temporarily hiding the navigation bar to provide a distraction-free experience. For example, in iOS, iPadOS, and macOS, Photos hides the navigation bar and other interface elements when people view full-screen photos. If you implement this type of behavior, let people restore the navigation bar by using a familiar gesture, like tapping or swiping down. Although a visionOS window can hide its navigation bar, people generally expect different types of immersive experiences while wearing Apple Vision Pro; for guidance, see Immersive experiences.\n\nUse the standard back button. People know that the standard back button lets them retrace their steps through a hierarchy of information. If you implement a custom back button, make sure it still looks like a back button, behaves as people expect, matches the rest of your interface, and is consistently implemented throughout your app or game. If you replace the system-provided back button chevron with a custom image, you may need to supply a mask for your custom image, too. For example, iOS uses this mask to animate the button title during transitions.\n\nMake sure buttons that use text labels have enough room. If your navigation bar includes more than one text-labeled button, the text of those buttons may appear to run together, making the buttons indistinguishable. Add separation by inserting a fixed-space item between the buttons. For developer guidance, see UIBarButtonItem.SystemItem.fixedSpace.\n\nPlatform considerations\n\nNo additional considerations for tvOS. Not supported in macOS.\n\niOS, iPadOS\n\nConsider using a segmented control in a navigation bar to flatten the information hierarchy. For example, Phone uses a segmented control in the navigation bar of the Recents tab to let people switch between viewing all recent calls or only missed ones. If a design like this makes sense in your app, place a segmented control in the navigation bar only at the top level of the hierarchy, and be sure to create accurate back-button labels for the second-level screens. For guidance, see Segmented controls.\n\nUse a large title to help people stay oriented as they navigate and scroll. For example, Phone uses the large title to clarify the active tab, while Music uses large titles to differentiate content areas like albums, artists, playlists, and radio. By default, a large title transitions to a standard title as people begin scrolling the content, and transitions back to large when people scroll to the top, reminding them of their current location. For developer guidance, see prefersLargeTitles.\n\nStandard title\n\nLarge title\n\nConsider hiding the border of a large-title navigation bar to enhance the sense of connection between title and content. Use caution applying this design to a standard-title navigation bar, though, because the bar’s title and buttons might be harder to distinguish without a visible border. In contrast, you might want to maintain consistency between the primary and secondary views in a Split View on iPad by using the borderless style in both. You can hide the bottom border of a navigation bar by removing the bar’s shadow (the border automatically reappears when people scroll the content area).\n\nvisionOS\n\nTo maintain the legibility of navigation bar items as content scrolls behind them, visionOS uses a variable blur in the bar background. The variable blur anchors the bar above the scrolling content while letting the view’s glass material remain uniform and undivided.\n\nPrefer using standard components in a navigation bar. In visionOS, navigation bar corners use a 60-pt continuous curve. By default, standard buttons, text fields, headers, and footers have corner radii that maintain concentricity with bar corners. If you need to create a custom component, you can use the following formula to help ensure that its corner radius is also concentric with the bar’s corners:\n\nradius = 60 pt - padding, where radius is a custom component’s corner radius and padding is the value of the top padding or the bottom padding, if these values are identical.\n\nUse a large title to help people stay oriented as they navigate and scroll. It generally works well when you display a large title in the view that’s at the top of a navigation stack, while centering a standard title in the navigation bar of all other views in the stack. By default, a large title transitions to a standard title as people begin scrolling the content, and transitions back to large when people scroll to the top, reminding them of their current location. For developer guidance, see prefersLargeTitles.\n\nwatchOS\n\nThe navigation bar appears at the top edge of the Apple Watch screen. The system offers space for a title, the time, and two buttons.\n\nIf the navigation bar doesn’t include any buttons, the system displays the time on the top trailing edge, and a large title on the leading edge, just below the time. However, watchOS resizes and relocates the title and time to accommodate top toolbar buttons.\n\nBy default, watchOS displays a back button when displaying hierarchical information.\n\nImportant\n\nThe clock appears in the navigation bar of every nonmodal app screen. You can’t remove the clock, so be sure to account for it in your designs.\n\nInset your content so that it aligns with the navigation bar buttons, title, and time. You can also use the safe area insets to avoid having your content clipped by the rounded corners. For guidance, see Layout.\n\nResources\nRelated\n\nTab bars\n\nSidebars\n\nDeveloper documentation\n\nMigrating to new navigation types — SwiftUI\n\nUINavigationBar — UIKit\n\nVideos\nExplore navigation design for iOS\nWhat’s new in iPad app design\nEssential Design Principles\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using navigation bars in watchOS."
  },
  {
    "title": "Menus and actions",
    "url": "https://developer.apple.com/design/human-interface-guidelines/menus-and-actions",
    "html": "Menus and actions\nActivity views\nButtons\nContext menus\nDock menus\nEdit menus\nMenus\nOrnaments\nPop-up buttons\nPull-down buttons\nToolbars"
  },
  {
    "title": "App Shortcuts",
    "url": "https://developer.apple.com/design/human-interface-guidelines/app-shortcuts",
    "html": "App Shortcuts\nAn App Shortcut is an easily understood, frequently used task or piece of content from your app or game that you provide to the system for people to use in a variety of contexts.\n\nApp Shortcuts work on iPhone, iPad, Apple Watch, HomePod, and AirPods, so people can use them almost everywhere, as soon as they install your app or game. The system presents App Shortcuts in a variety of ways to help people use them quickly and conveniently, including with Siri, in Spotlight search, Suggestions, and the Shortcuts app.\n\nApp Shortcuts exist within the broader context of custom shortcuts, which people define using the Shortcuts app, and actions, the set of all functions from your app or game that you make available to the system.\n\nActions are the building blocks of both App Shortcuts and custom shortcuts. For guidance on designing actions with custom shortcuts in mind, see Actions.\n\nFor developer guidance, see App Intents. For guidance specific to Siri, see Siri.\n\nDeveloper note\n\nThe SiriKit framework supports a variety of common use cases without the need to build custom intents. Before you start building an App Shortcut with the App Intents framework, it’s a good idea to determine whether you can take advantage of the predefined system intents available in SiriKit.\n\nBest practices\n\nIdentify the subset of things your app can do that make the most sense as App Shortcuts. You can create up to 10 App Shortcuts, so prioritize the ones you think will be most helpful.\n\nChoose self-contained, straightforward features. Self-contained tasks can be completed via Siri or search in their entirety. They don’t require your app to be open at all. Straightforward tasks are uncomplicated ones that people can succeed at quickly. Tasks that require many steps or a lot of input are less helpful as App Shortcuts.\n\nWrite brief, memorable shortcut names. Because the shortcut name is what people see in the UI and what they say to run it with Siri, it’s important to clearly communicate its function and make it easy to remember. You’ll have to include your app name (or a related synonym that you define), but you can be creative with it. For example, the Voice Memos app uses the shortcut “Record Voice Memo” rather than “Start recording a Voice Memo”.\n\nConsider including a dynamic parameter. You can set a parameter in your shortcut that people can change depending on what they’d like to do. For example, a meditation app could use a dynamic parameter to let someone start a specific type of meditation, by saying “Start [Morning, Daily, Sleep] Meditation.” You can supply one dynamic parameter per App Shortcut, and its value comes from a finite list that you specify. Choose predictable and familiar parameter values, since people won’t have the list in front of them for reference. For developer guidance, see App entities.\n\nIn the case of an ambiguous request, ask for more information. When possible, try to make a reasonable assumption and present it as an option for people to consider. If they don’t want the first option, direct them to a list of alternatives. It’s important for this list to be short (roughly five items or fewer), since Siri reads the entire list aloud in voice-only scenarios.\n\nUse custom snippets and Live Activities to present information and request further action. Live Activities offer people continuous access to information, which is great for timers and countdowns that appear until an event is complete. Custom snippets are noninteractive custom views you can create with SiriKit or the App Intents framework, and are great for self-contained pieces of information (showing the weather at a person’s current location, for example). Live Activities and custom snippets are great ways to add visual elements that are unique to your app. See Live Activities.\n\nConsider how your App Shortcuts will appear in Spotlight. Your App Shortcuts can appear in Spotlight along with suggestions and searches for your app, so for each of your shortcuts, choose an SF Symbol from the SF Symbols library that accurately reflects its intent.\n\nLanguage\n\nFavor simple phrases with a single, obvious parameter. Avoid complex phrases with multiple potential variables that people could mistake for the single dynamic parameter available in your shortcut. For example, “Start [Sleep] Meditation with nature sounds” appears to have two possible parameters. If your phrase feels too complicated when you say it aloud, it’s probably too complicated for people to use consistently. If the additional information is absolutely required, you can ask for it in a subsequent step.\n\nInclude thoughtful natural language variations. People might try a similar phrase to run your shortcut if they don’t remember the exact words. Be sure to include as many of these as you can: “Start Voice Memo” and “New Voice Memo” as variations, for example. Be thorough, but use your judgement to determine the boundaries of the shortcut’s function; “Save a Voice Memo” might not be appropriate when the intent is to create one. Include natural language variations for all of the languages that your app is localized in.\n\nOmit supporting dialogue when a custom visual presentation makes it redundant. By default, the system displays the dialogue that Siri reads to people alongside any custom visual elements that you provide with a custom snippet. If the visual you provide contains the same information as the dialogue, suppress the dialogue so it won’t be shown.\n\nWrite snippet dialogues for all platforms, not just visual ones. Because your snippets can appear when people run App Shortcuts on audio-only platforms such as AirPods and HomePod, be sure to include all of the critical information in the snippet in the dialogue as well as any custom visual elements. Make sure your custom snippets look and sound great on all of the platforms where they’ll appear.\n\nPresentation\n\nArrange your shortcuts in the order that you want them to appear in Spotlight. This is the same order that they appear in the Shortcuts app. You can manually change the order with an app update, and you can also let peoples’ parameter choice reorder your shortcuts dynamically. As people use your app more and the number of their custom parameters increases, sorting shortcuts dynamically becomes more important. Consider using a heuristic such as recency or frequency to drive the order.\n\nUse a Siri tip view to highlight App Shortcuts in your app. Pick key places to surface these tips, where people are most likely to benefit as they’re exploring — immediately before or after completing an action that they may want to repeat, for example. Be sure to make these tips dismissible; it’s always good to respect a person’s desire to remove unwanted information from their workflow. For developer guidance, see SiriTipUIView.\n\nInformation collection\n\nUse an open-ended request to collect information with a wide range of possible values. This is particularly useful for collecting values like numbers, place names, or times. Since people can say anything in response, make it clear what type of information you expect. To benefit from built-in dialogue and visual patterns, as well as Siri’s natural language understanding, use one of the open-ended requests provided by the App Intents framework if it fits the needs of your shortcut task.\n\nUse an intent confirmation before collecting an important response. Intent confirmations are meant for particularly consequential actions, such as financial transactions, destructive actions like deleting content, or actions that feel high-risk (like sending a Calendar invitation to a big group). Be deliberate about when you use confirmations, since people appreciate being able to get through shortcuts quickly, and confirmations add an extra step.\n\nWhen confirming an intent, use a verb that reiterates the specific action. Specific verbs (like “order”) communicate more clearly than ambiguous ones (like “confirm”). The App Intents framework provides a list of useful default verbs and their synonyms that you can use as-is, or you can use a custom verb that specifically matches the needs of your shortcut; if you use a custom verb, be sure to provide all of its relevant synonyms so Siri understands the intent in as many situations as possible.\n\nActions\n\nActions are specific tasks or functions that you want to make accessible through Siri, Spotlight, and the Shortcuts app. When you designate a function in your app as an action, people can use it in custom shortcuts they create, and the action can appear as a suggestion as people establish use patterns with your app.\n\nNote\n\nThe most useful, concise, and self-contained actions are great candidates for App Shortcuts.\n\nPrioritize building actions for features that people use the most. Starting with your app’s most widely used features helps people get the most out of each action. In the Calendar app, for example, people often add new events, get existing events, and edit their events, so these are great candidates for actions.\n\nSplit complex tasks into smaller, more concise actions when possible. This can make for a more powerful and configurable automation experience, and helps people understand exactly what each action will do.\n\nMake your actions platform agnostic. People appreciate when actions are available on all of the devices they use. Support as many devices as you can in the context of your app. For AirPods and HomePod, this means creating a straightforward, complete experience interacting with voice alone.\n\nConsider the experience that people will have when customizing your actions. People can use your actions as part of larger custom shortcuts that they create in the Shortcuts app. Be sure to present parameters that flow clearly, according to natural language, to help people understand what the action does and how it can relate to other actions in the context of a larger workflow.\n\nWrite an action title that matches the action’s parameter summary. An action is represented by its title, which is a brief representation that appears throughout the system, and by its parameter summary, which is a phrase that includes the action’s important parameters and appears in the editor of the Shortcuts app. Both the action’s title and its parameter summary start with the same verb, and they share as many words as possible between them. For example, Messages pairs the “Send Message” action title with the parameter summary “Send “Message” to Recipients.” For developer guidance, see Providing your app’s capabilities to system services.\n\nParameters\n\nParameters are elements within an action that provide additional information to the system to resolve the action. For example, an action that sends a message might include a parameter for the recipient, and one for the message string. An action can have any number of parameters, though actions you designate as App Shortcuts can have only one.\n\nFor developer guidance, see Parameter resolution.\n\nInclude parameters where they would naturally occur in an action. Any place an action can make use of a variety of possible input values, or present a variety of possible results, is a great opportunity to add a parameter.\n\nKeep in mind that people can use parameters in shortcuts they configure. People interact with your actions when they provide follow-up responses to resolve them, and when they configure custom shortcuts in the Shortcuts app. Be sure that the parameter’s position in the action and its possible response values make sense in both contexts. For example, when setting up an action for archiving tasks, be sure to include similar values for the “archive” parameter when editing it in the Shortcuts app (configuration) and when running the action with Siri (resolution).\n\nDefine custom parameter entities as necessary. The system provides useful built-in parameters that you can query as part of an action, but if you need to describe a parameter that isn’t included by default, you can configure a custom one. Use dynamic enumerations to define custom UIs for custom parameters in your actions. For developer guidance, see DynamicOptionsProvider.\n\nConsider providing a default value for each required parameter of your action. If you have a strong opinion about a good starting place for a certain parameter, consider providing it as a default so people don’t have to go through multiple steps when using your action. Whether you provide a default or not, make sure that the action prompts people to provide their own value for the parameter — either through a question, or from a list — since people can always configure a parameter to “Ask Each Time” using the Shortcuts app.\n\nPlace all of your optional parameters in the Options UI. This way people can disclose them when they need to see them, and you don’t need to include them as part of the action summary.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, visionOS, or watchOS. Not supported in tvOS.\n\nmacOS\n\nApp Shortcuts aren’t supported in macOS. However, actions you create for your app using App Intents and SiriKit are supported, and people can build shortcuts using them with the Shortcuts app on Mac.\n\nResources\nRelated\n\nSiri\n\nSiri Style Guide\n\nShortcuts User Guide\n\nDeveloper documentation\n\nApp Intents\n\nSiriKit\n\nProviding your app’s capabilities to system services — App Intents\n\nIntegrating custom data types into your intents — App Intents\n\nVideos\nDesign Shortcuts for Spotlight\nDesign App Shortcuts\nImplement App Shortcuts with App Intents\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nNew page."
  },
  {
    "title": "Web views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/web-views",
    "html": "Web views\nA web view loads and displays rich web content, such as embedded HTML and websites, directly within your app.\n\nFor example, Mail uses a web view to show HTML content in messages.\n\nBest practices\n\nSupport forward and back navigation when appropriate. Web views support forward and back navigation, but this behavior isn’t available by default. If people are likely to use your web view to visit multiple pages, allow forward and back navigation, and provide corresponding controls to initiate these features.\n\nAvoid using a web view to build a web browser. Using a web view to let people briefly access a website without leaving the context of your app is fine, but Safari is the primary way people browse the web. Attempting to replicate the functionality of Safari in your app is unnecessary and discouraged.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, or visionOS. Not supported in tvOS or watchOS.\n\nResources\nRelated\n\nWebkit.org\n\nDeveloper documentation\n\nWKWebView — WebKit\n\nVideos\nExplore WKWebView additions"
  },
  {
    "title": "Text views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/text-views",
    "html": "Text views\nA text view displays multiline, styled text content, which can optionally be editable.\n\nText views can be any height and allow scrolling when the content extends outside of the view. By default, content within a text view is aligned to the leading edge and uses the system label color. In iOS, iPadOS, and visionOS, if a text view is editable, a keyboard appears when people select the view.\n\nBest practices\n\nUse a text view when you need to display text that’s long, editable, or in a special format. Text views differ from text fields and labels in that they provide the most options for displaying specialized text and receiving text input. If you need to display a small amount of text, it’s simpler to use a label or — if the text is editable — a text field.\n\nKeep text legible. Although you can use multiple fonts, colors, and alignments in creative ways, it’s essential to maintain the readability of your content. It’s a good idea to adopt Dynamic Type so your text still looks good if people change text size on their device. Be sure to test your content with accessibility options turned on, such as bold text. For guidance, see Accessibility and Typography.\n\nMake useful text selectable. If a text view contains useful information such as an error message, a serial number, or an IP address, consider letting people select and copy it for pasting elsewhere.\n\nPlatform considerations\n\nNo additional considerations for macOS, visionOS, or watchOS.\n\niOS, iPadOS\n\nShow the appropriate keyboard type. Several different keyboard types are available, each designed to facilitate a different type of input. To streamline data entry, the keyboard you display when editing a text view needs to be appropriate for the type of content. For guidance, see Virtual keyboards.\n\ntvOS\n\nYou can display text in tvOS using a text view. Because text input in tvOS is minimal by design, tvOS uses text fields for editable text instead.\n\nResources\nRelated\n\nLabels\n\nText fields\n\nCombo boxes\n\nDeveloper documentation\n\nText — SwiftUI\n\nUITextView — UIKit\n\nNSTextView — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance to reflect changes in watchOS 10."
  },
  {
    "title": "Image views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/image-views",
    "html": "Image views\nAn image view displays a single image — or in some cases, an animated sequence of images — on a transparent or opaque background.\n\nWithin an image view, you can stretch, scale, size to fit, or pin the image to a specific location. Image views are typically not interactive.\n\nBest practices\n\nUse an image view when the primary purpose of the view is simply to display an image. In rare cases where you might want an image to be interactive, configure a system-provided button to display the image instead of adding button behaviors to an image view.\n\nIf you want to display an icon in your interface, consider using a symbol or interface icon instead of an image view. SF Symbols provides a large library of streamlined, vector-based images that you can render with various colors and opacities. An icon (also called a glyph or template image) is typically a bitmap image in which the nontransparent pixels can receive color. Both symbols and interface icons can use the accent colors people choose.\n\nContent\n\nAn image view can contain rich image data in various formats, like PNG, JPEG, and PDF. For more guidance, see Images.\n\nTake care when overlaying text on images. Compositing text on top of images can decrease both the clarity of the image and the legibility of the text. To help improve the results, ensure the text contrasts well with the image, and consider ways to make the text object stand out, like adding a text shadow or background layer.\n\nAim to use a consistent size for all images in an animated sequence. When you prescale images to fit the view, the system doesn’t have to perform any scaling. In cases where the system must do the scaling, performance is generally better when all images are the same size and shape.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS.\n\nmacOS\n\nIf your app needs an editable image view, use an image well. An image well is an image view that supports copying, pasting, dragging, and using the Delete key to clear its content.\n\nUse an image button instead of an image view to make a clickable image. An image button contains an image or icon, appears in a view, and initiates an instantaneous app-specific action.\n\ntvOS\n\nMany tvOS images combine multiple layers with transparency to create a feeling of depth. For guidance, see Layered images.\n\nvisionOS\n\nYou can add the appearance of depth to image views in a standard window to give your content more visual substance and improve the experience when people view it from an angle. If you display 3D content in a standard window, the system clips it when it extends too far from the window’s surface; for guidance, see Windows.\n\nIf you want to display true 3D content, use a volume; for guidance, see Volumes.\n\nwatchOS\n\nUse SwiftUI to create animations when possible. Alternatively, you can use WatchKit to animate a sequence of images within an image element if necessary. For developer guidance, see WKImageAnimatable.\n\nResources\nRelated\n\nImages\n\nImage wells\n\nImage buttons\n\nSF Symbols\n\nDeveloper documentation\n\nImage — SwiftUI\n\nUIImageView — UIKit\n\nNSImageView — AppKit\n\nVideos\nAdd rich graphics to your SwiftUI app\nThe details of UI typography\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Live Photos",
    "url": "https://developer.apple.com/design/human-interface-guidelines/live-photos",
    "html": "Live Photos\nLive Photos lets people capture favorite memories in a sound- and motion-rich interactive experience that adds vitality to traditional still photos.\n\nWhen Live Photos is available, the Camera app captures additional content — including audio and extra frames — before and after people take a photo. People press a Live Photo to see it spring to life.\n\nPlay\nBest practices\n\nApply adjustments to all frames. If your app lets people apply effects or adjustments to a Live Photo, make sure those changes are applied to the entire photo. If you don’t support this, give people the option of converting it to a still photo.\n\nKeep Live Photo content intact. It’s important for people to experience Live Photos in a consistent way that uses the same visual treatment and interaction model across all apps. Don’t disassemble a Live Photo and present its frames or audio separately.\n\nImplement a great photo sharing experience. If your app supports photo sharing, let people preview the entire contents of Live Photos before deciding to share. Always offer the option to share Live Photos as traditional photos.\n\nClearly indicate when a Live Photo is downloading and when the photo is playable. Show a progress indicator during the download process and provide some indication when the download is complete.\n\nDisplay Live Photos as traditional photos in environments that don’t support Live Photos. Don’t attempt to replicate the Live Photos experience provided in a supported environment. Instead, show a traditional, still representation of the photo.\n\nMake Live Photos easily distinguishable from still photos. The best way to identify a Live Photo is through a hint of movement. Note that there are no built-in Live Photo motion effects, like the one that occurs as you swipe through photos in the full-screen browser of Photos app. Any motion effects like this must be custom designed and implemented. In cases where movement isn’t possible, show a system-provided badge above the photo. This badge can be displayed as an overlay with a shadow or as a solid color without a shadow. A badge variant is also available for situations where a Live Photo appears as a traditional photo. Never include a playback button that could be interpreted as a video playback button.\n\nKeep badge placement consistent. If you show a badge, put it in the same location on every photo. Typically, a badge looks best in a corner of a photo.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, or tvOS. Not supported in watchOS.\n\nvisionOS\n\nIn visionOS, people can view a Live Photo, but they can’t capture one.\n\nResources\nVideos\nWhat’s new in camera capture"
  },
  {
    "title": "Maps",
    "url": "https://developer.apple.com/design/human-interface-guidelines/maps",
    "html": "Maps\nA map displays outdoor or indoor geographical data in your app or on your website.\n\nA map uses a familiar interface that supports much of the same functionality as the system-provided Maps app, such as zooming, panning, and rotation. A map can also include annotations and overlays and show routing information, and you can configure it to use a standard graphical view, a satellite image-based view, or a view that’s a hybrid of both.\n\nBest practices\n\nIn general, make your map interactive. People expect to be able to zoom, pan, and otherwise interact with maps in familiar ways. Noninteractive elements, such as overlays that obscure the map, can interfere with people’s expectations for how maps behave.\n\nPick a map emphasis style that suits the needs of your app. There are two emphasis styles to choose from:\n\nThe default style presents a version of the map with fully saturated colors, and is a good option for most standard map applications without a lot of custom elements. This style is also useful for keeping visual alignment between your map and the Maps app, in situations when people might switch between them.\n\nThe muted style, by contrast, presents a desaturated version of the map. This style is great if you have a lot of information-rich content that you want to stand out against the map.\n\nSee Custom information for additional guidance.\n\nHelp people find your app’s content. Consider offering a search feature combined with a way to filter locations by category. The search field for a shopping mall map, for example, might include filters that make it easy to find common store types, like clothing, housewares, electronics, jewelry, and toys.\n\nClearly identify elements that people select. When someone selects a specific area or other element on the map, use distinct styling like an outline and color variation to call attention to the selection.\n\nCluster overlapping points of interest to improve map legibility. A cluster uses a single pin to represent multiple points of interest within close proximity. As people zoom in on a map, clusters expand to progressively reveal individual points of interest.\n\nHelp people see the Apple logo and legal link. It’s fine when parts of your interface temporarily cover the logo and link, but don’t cover these elements all the time. To help you maintain the visibility of the Apple logo and legal link, follow these recommendations.\n\nUse adequate padding to separate the logo and link from the map boundaries and your custom controls. For example, it works well to use 7 points of padding on the sides of the elements and 10 points above and below them.\n\nAvoid causing the logo and link to move with your interface. It’s best when the Apple logo and legal link appear to be fixed to the map.\n\nIf your custom interface can move relative to the map, use the lowest position of the custom element to determine the placement of the logo and link. For example, if your app lets people pull up a custom card from the bottom of the screen, place the Apple logo and legal link 10 points above the lowest resting position of the card.\n\nNote\n\nThe Apple logo and legal link aren’t shown on maps that are smaller than 200x100 pixels.\n\nCustom information\n\nUse annotations that match the visual style of your app. Annotations identify custom points of interest on your map. The default annotation marker has a red tint and a white pin icon. You can change the tint to match the color scheme of your app. You can also change the icon to a string or image, like a logo. An icon string can contain any characters, including Unicode characters, but keep it to two to three characters in length for readability. For developer guidance, see MKAnnotationView.\n\nIf you want to display custom information that’s related to standard map features, consider making them independently selectable. When you support selectable map features, the system treats Apple-provided features (including points of interest, territories, and physical features) independently from other annotations that you add. You can configure custom appearances and information to represent these features when people select them. For developer guidance, see MKMapFeatureOptions.\n\nUse overlays to define map areas with a specific relationship to your content.\n\nAbove roads, the default level, places the overlay above roads but below buildings, trees, and other features. This is great for situations where you want people to have an idea of what’s below the overlay, while still clearly understanding that it’s a defined space.\n\nAbove labels places the overlay above both roads and labels, hiding everything beneath it. This is useful for content that you want to be fully abstracted from the features of the map, or when you want to hide areas of the map that aren’t relevant.\n\nMake sure there’s enough contrast between custom controls and the map. Insufficient contrast makes controls hard to see and can cause them to blend in with the map. Consider using a thin stroke or light drop shadow to help a custom control stand out, or applying blend modes to the map area to increase its contrast with the controls atop it.\n\nIndoor maps\n\nApps connected with specific venues like shopping malls and stadiums can design custom interactive maps that help people locate and navigate to indoor points of interest. Indoor maps can include overlays that highlight specific areas, such as rooms, kiosks, and other locations. They can also include text labels, icons, and routes.\n\nExample 1\nExample 2\nExample 3\n\nAdjust map detail based on the zoom level. Too much detail can cause a map to appear cluttered. Show large areas like rooms and buildings at all zoom levels. Then, progressively add more detailed features and labels as the map is zoomed in. An airport map might show only terminals and gates when zoomed out, but reveal individual stores and restrooms when zoomed in.\n\nUse distinctive styling to differentiate the features of your map. Using color along with icons can help distinguish different types of areas, stores, and services, and make it easy for people to quickly find what they’re looking for.\n\nOffer a floor picker if your venue includes multiple levels. A floor picker lets people quickly jump between floors. If you implement this feature, keep floor numbers concise for simplicity. In most cases, a list of floor numbers — rather than floor names — is sufficient.\n\nInclude surrounding areas to provide context. Adjacent streets, playgrounds, and other nearby locations can all help orient people when they use your map. If these areas are noninteractive, use dimming and a distinct color to make them appear supplemental.\n\nConsider supporting navigation between your venue and nearby transit points. Make it easy to enter and exit your venue by offering routing to and from nearby bus stops, train stations, parking lots, garages, and other transit locations. You might also offer a way for people to quickly switch over to Apple Maps for additional navigation options.\n\nLimit scrolling outside of your venue. This can help people avoid getting lost when they swipe too hard on your map. When possible, keep at least part of your indoor map visible onscreen at all times. To help people stay oriented, you may need to adjust the amount of scrolling you permit based on the zoom level.\n\nDesign an indoor map that feels like a natural extension of your app. Don’t try to replicate the appearance of Apple Maps. Instead, make sure area overlays, icons, and text match the visual style of your app.\n\nYou use a specific, distinct format to create indoor maps; to learn more, see Indoor Mapping Data Format.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or visionOS.\n\nwatchOS\n\nOn Apple Watch, maps are static snapshots of geographic locations. Place a map in your interface at design time and show the appropriate region at runtime. The displayed region isn’t interactive; tapping it opens the Maps app on Apple Watch. You can annotate the map to highlight points of interest or other relevant information. The system lets you add up to five annotations to a map.\n\nFit the map interface element to the screen. The entire element needs to be visible on the Apple Watch display without requiring scrolling.\n\nShow the smallest region that encompasses the points of interest. The content within a map interface element doesn’t scroll, so all key content must be visible within the displayed region.\n\nFor developer guidance, see WKInterfaceMap.\n\nResources\nDeveloper documentation\n\nMapKit\n\nMapKit JS\n\nMKStandardMapConfiguration — MapKit\n\nMKAnnotationView — MapKit\n\nMKLocalSearch — MapKit\n\nApple Maps Server API\n\nIndoor Mapping Data Format\n\nWKInterfaceMap — WatchKit\n\nVideos\nWhat's new in MapKit\nMeet Apple Maps Server APIs\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nAdded artwork.\n\n\n\n\nSeptember 23, 2022\n\n\t\n\nAdded guidelines for presenting custom information, refined best practices, and consolidated guidance into one page."
  },
  {
    "title": "Charts",
    "url": "https://developer.apple.com/design/human-interface-guidelines/charts",
    "html": "Charts\nOrganize data in a chart to communicate information with clarity and visual appeal.\n\nAn effective chart highlights a few key pieces of information in a dataset, helping people gain insights and make decisions. For example, people might use a chart to:\n\nLearn how upcoming weather conditions might affect their plans.\n\nAnalyze stock prices to understand past performance and discover trends.\n\nReview fitness data to monitor their progress and set new goals.\n\nTo learn about designing charts to enhance your experience, see Charting data; for developer guidance, see Creating a chart using Swift Charts.\n\nAnatomy\n\nA chart comprises several graphical elements that depict the values in a dataset and convey information about them.\n\nA mark is a visual representation of a data value. You create a chart by supplying one or more series of data values, assigning each value to a mark. To specify the style of chart you want to display — such as bar chart, line chart, or scatter plot — you choose a mark type, such as bar, line, or point (for guidance, see Marks). The general task of depicting individual data values in a chart is called plotting, and the area that contains the marks is called the plot area.\n\nTo depict a value, each type of mark uses visual attributes that are determined by a scale, which maps data values like numbers, dates, or categories to visual characteristics like position, color, or height. For example, a bar mark can use a particular height to represent the magnitude of a value and a particular position to represent the time at which the value occurred.\n\nTo give people the context they need to interpret a chart’s visual characteristics, you supply descriptive content that can take a few different forms.\n\nYou can use an axis to help define a frame of reference for the data represented by a set of marks. Many charts display a pair of axes at the edges of the plot area — one horizontal and one vertical — where each axis represents a variable like time, amount, or category.\n\nAn axis can include ticks, which are reference points that help people visually locate the position of important values along the axis, such as a 0, 50%, and 100%. Many charts display grid lines that each extend from a tick across the plot area to help people visually estimate a data value when its mark isn’t near an axis.\n\nYou also have multiple ways to describe chart elements to help people interpret the data and to highlight the key information you want to communicate. For example, you can supply labels that name items like axes, grid lines, ticks, or marks, and accessibility labels that describe chart elements for people who use assistive technologies. To provide context and additional details, you can create descriptive titles, subtitles, and annotations. When needed, you can also create a legend, which describes chart properties that aren’t related to a mark’s position, such as the use of color or shape to denote different value categories.\n\nClear, accurate descriptions can help make a chart more approachable and accessible; to learn about additional ways to improve the accessibility of your chart, see Enhancing the accessibility of a chart.\n\nMarks\n\nChoose a mark type based on the information you want to communicate about the data. Some of the most familiar mark types are bar, line, and point; for developer guidance on these and other mark types, see Swift Charts.\n\nBar marks work well in charts that help people compare values in different categories or view the relative proportions of various parts in a whole. When used to help people understand data that changes over time, bar charts work especially well when each value can represent a sum, like the total number of steps taken in a day.\n\nLine marks can also show how values change over time. In a line chart, a line connects all data values in one series of data. The slope of the line reveals the magnitude of change between data values and can help people visualize overall trends.\n\nPoint marks help you depict individual data values as visually distinct marks. A set of point marks can show how two different properties of your data relate to each other, helping people inspect individual data values and identify outliers and clusters.\n\nConsider combining mark types when it adds clarity to your chart. For example, if you use a line chart to show a change over time, you might want to add point marks on top of the line to highlight individual data points. By combining points with a line, you can help people understand the overall trend while also drawing their attention to individual values.\n\nAxes\n\nUse a fixed or dynamic axis range depending on the meaning of your chart. In a fixed range, the upper and lower bounds of the axis never change, whereas in a dynamic range, the upper and lower bounds can vary with the current data. Consider using a fixed range when specific minimum and maximum values are meaningful for all possible data values. For example, people expect a chart that shows a battery’s current charge to have a minimum value of 0% (completely empty) and a maximum value of 100% (completely full).\n\nIn contrast, consider using a dynamic range when the possible data values can vary widely and you want the marks to fill the available plot area. For example, the upper bound of the Y axis range in the Health app’s Steps chart varies so that the largest number of steps in a particular time period is close to the top of the chart.\n\nDefine the value of the lower bound based on mark type and chart usage. For example, bar charts can work well when you use zero for the lower bound of the Y axis, because doing so lets people visually compare the relative heights of individual bars to get a reasonable estimate of their values. In contrast, defining a lower bound of zero can sometimes make meaningful differences between values more difficult to discern. For example, a heart rate chart that always uses zero for the lower bound could obscure important differences between resting and active readings because the differences occur in a range that’s far from zero.\n\nPrefer familiar sequences of values in the tick and grid-line labels for an axis. For example, if you use a common number sequence like 0, 5, 10, etc., people are likely to know at a glance that each tick value equals the previous value plus five. Even though a sequence like 1, 6, 11, etc., follows the same rule, it’s not common, so most people are likely to spend extra time thinking about the interval between values.\n\nTailor the appearance of grid lines and labels to a chart’s use cases. Too many grid lines can be visually overwhelming, distracting people from the data; too few grid lines can make it difficult to estimate a mark’s value. To help you determine the appropriate density and visual weight of these elements, consider a chart’s context in the interface, the interactions you support, and the tasks people can do in the chart. For example, if people can inspect individual data points by interacting with a chart, you might use fewer grid lines and light label colors to ensure the data remains visually prominent.\n\nDescriptive content\n\nWrite descriptions that help people understand what a chart does before they view it. When you provide information-rich titles and labels that describe the purpose and functionality of a chart, you give people the context they need before they dive in and examine the details. Providing context in this way is especially important for VoiceOver users and those with certain types of cognitive disabilities because they rely on your descriptions to understand the purpose and primary message of your chart before they decide to investigate it further.\n\nSummarize the main message of your chart to help make it approachable and useful for everyone. Although a primary reason to use a chart is to display the data that supports the main message, it’s essential to summarize key information so that people can grasp it quickly. For example, Weather provides a title and subtitle that succinctly describe the expected precipitation for the next hour, giving people the most important information without requiring them to examine the details of the chart.\n\nBest practices\n\nEstablish a consistent visual hierarchy that helps communicate the relative importance of various chart elements. Typically, you want the data itself to be most prominent, while letting the descriptions and axes provide additional context without competing with the data.\n\nIn a compact environment, maximize the width of the plot area to give people enough space to comfortably examine a chart. To help important data fit well in a given width, ensure that labels on a vertical axis are as short as possible without losing clarity. You might also consider describing units in other areas of the chart, such as in a title, and placing a longer axis label, such as a category name, inside the plot area when doing so doesn’t obscure important information.\n\nMake every chart in your app accessible. Charts — like all infographics — need to be fully accessible to everyone, regardless of how they perceive content. For example, it’s essential to support VoiceOver, which describes onscreen content to help people get information and navigate without needing to see the screen (to learn more about VoiceOver, see Vision). In addition to supplying accessibility labels that describe the components of your chart, you can enhance the VoiceOver experience by also using Audio Graphs. doc://com.apple.documentation/documentation/accessibility/audio_graphs provides chart information to VoiceOver, which constructs a set of tones that audibly represent a chart’s data values and their trend; it also lets you present high-level text summaries that provide additional context. For guidance, see Enhancing the accessibility of a chart.\n\nLet people interact with the data when it makes sense, but don’t require interaction to reveal critical information. In Stocks, for example, people are often most interested in a stock’s performance over time, so the app displays a line graph that depicts performance during the time period people choose, such as one day, three months, or five years. If people want to explore additional details, they can drag a vertical indicator through the line graph, revealing the value at the selected time.\n\nMake it easy for everyone to interact with a chart. Sometimes, chart marks are too small to target with a finger or a pointer, making your chart hard to use for people with reduced motor control and uncomfortable for everyone. When this is the case, consider expanding the hit target to include the entire plot area, letting people scrub across the area to reveal various values.\n\nMake an interactive chart easy to navigate when using keyboard commands (including full keyboard access) or Switch Control. By default, these input types tend to visit individual onscreen elements in a linear sequence, such as the sequence of values in a data file. If you want to provide a custom navigation experience in your chart, here are two main ways to do so. The first way is to use accessibility APIs (such as accessibilityRespondsToUserInteraction(_:)) to specify a logical and predictable path through your chart’s information. For example, you might want to let people navigate along the X axis instead of jumping back and forth. The second way — which is particularly useful if you need to present a very large dataset — is to let people move focus among subsets of values instead of navigating through all individual data points. Note that both of these customizations can also enhance the VoiceOver experience, even when your chart isn’t interactive. For guidance, see Navigation.\n\nHelp people notice important changes in a chart. For example, if people don’t notice when marks or axes change, they can misread a chart. Animating such changes can help people notice them, but you need to highlight the changes in other ways, too, to ensure that VoiceOver users and people who turn off animations know about them. For developer guidance, see UIAccessibility.Notification (UIKit) or NSAccessibility.Notification (AppKit).\n\nAlign a chart with surrounding interface elements. For example, it often works well to align the leading edge of a chart with the leading edge of other views in a screen. One way to maintain a clean leading edge in a chart is to display the label for each vertical grid line on its trailing side. You might also consider shifting the Y axis to the trailing side of the chart so that its tick labels don’t protrude past the chart’s leading edge. If you end up with a label that doesn’t appear to be associated with anything, you can use a tick to anchor it to a grid line.\n\nColor\n\nAs in all other parts of your interface, using color in a chart can help you clarify information, evoke your brand, and provide visual continuity. For general guidance on using color in ways that everyone can appreciate, see Inclusive color.\n\nAvoid relying solely on color to differentiate between different pieces of data or communicate essential information in a chart. Using meaningful color in a chart works well to highlight differences and elevate key details, but it’s crucial to include alternative ways to convey this information so that people can use your chart regardless of whether they can discern colors. One way to supplement color is to use different shapes or patterns to depict different parts of data. For example, in addition to using red and black colors, Health uses two different shapes in the point marks that represent the two components of blood pressure.\n\nAid comprehension by adding visual separation between contiguous areas of color. For example, in a bar chart that stacks marks in a single row or column, it’s common to assign a different color to each mark. In this design, adding separators between the marks can help people distinguish individual ones.\n\nEnhancing the accessibility of a chart\n\nWhen you use Swift Charts to create a chart, you get a default implementation of doc://com.apple.documentation/documentation/accessibility/audio_graphs, in addition to a default accessibility element for each mark (or group of marks) that describes its value.\n\nConsider using Audio Graphs to give VoiceOver users more information about your chart. You can customize the default Audio Graphs implementation that Swift Charts provides by supplying a chart title and descriptive summary that VoiceOver speaks to help people understand the purpose and main features of your chart. If you don’t use Audio Graphs, you need to provide an overview of the chart’s structure and purpose. For example, you need to identify the chart’s type — such as bar or line — explain what each axis represents, and describe details like the upper and lower axis bounds.\n\nImportant\n\nUnlike an image — which requires one descriptive accessibility label — a chart often needs to offer an accessibility label for each important or interactive element. Depending on the purpose of your chart and the scope and density of its marks, you need to decide whether it’s essential to describe each mark or whether it improves the accessibility experience to describe groups of marks. In some cases, it can make sense to use a single accessibility label that provides a succinct, high-level description of the chart, such as when you use a small version of a chart in a button that reveals a more detailed version.\n\nWrite accessibility labels that support the purpose of your chart. For example, Maps shows elevation changes for a cycling route using a set of individual bars that each represent the elevation for a small portion of the route. The purpose of the chart is to give people a sense of the terrain for the entire route, not to provide individual elevations. For this reason, Maps provides accessibility labels that summarize the elevation changes in a group of bars; it doesn’t provide an accessibility label per bar. In contrast, Health offers an accessibility label for each bar in the Steps chart, because the purpose of the chart is to give people their actual step count for each tracking period.\n\nFor the focused section of this cycling elevation chart, VoiceOver provides the description “From 0.4 miles to 0.7 miles: Climb 70 feet.”\n\nThe following guidelines can help you write useful accessibility labels for chart elements.\n\nPrioritize clarity and comprehensiveness. In general, it’s rarely enough to merely report a data value unless you also include context that helps people understand it, like the date or location that’s associated with it. Aim to concisely describe the context for a value without repeating information that people can get in other ways, like an axis name that Audio Graphs or your overview provides. Follow context-setting information with a succinct description of the element’s details.\n\nAvoid using subjective terms. Subjective words — like rapidly, gradually, and almost — communicate your interpretation of the data. To help people form their own interpretations, use actual values in your descriptions.\n\nMaximize clarity in data descriptions by avoiding potentially ambiguous formats and abbreviations. For example, using “June 6” is clearer than using “6/6”; similarly, spelling out “60 minutes” or “60 meters” is clearer than using the abbreviation “60m.”\n\nDescribe what the chart’s details represent, not what they look like. Consider a chart that uses red and blue colors to help people visually distinguish two different data series. It’s crucial to create accessibility labels that identify what each series represents, but describing the colors that visually represent them can add unnecessary information and be distracting.\n\nBe consistent throughout your app when referring to a specific axis. For example, if you always mention the X axis first, people can spend less time figuring out which axis is relevant in a description.\n\nHide visible text labels for axes and ticks from assistive technologies. Axis and tick labels help people visually assess trends in a chart and estimate mark values. VoiceOver users can get mark values and trend information through accessibility labels and Audio Graphs, so they don’t generally need the content in the visible labels.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS.\n\nwatchOS\n\nIn general, avoid requiring complex chart interactions in your watchOS app. As much as possible, prefer displaying useful information people can get at a glance and supporting simple interactions when they add value. If you also offer a version of your app in another platform, consider using it to display more details and to support additional interactions with your chart. For example, Heart Rate in watchOS displays a chart of the wearer’s heart-rate data for the current day, whereas the Health app on iPhone displays heart-rate data for several different periods of time and lets people examine individual marks.\n\nResources\nRelated\n\nCharting data\n\nDeveloper documentation\n\nSwift Charts\n\nVideos\nDesign app experiences with charts\nDesign an effective chart\nHello Swift Charts\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 23, 2022\n\n\t\n\nNew page."
  },
  {
    "title": "ShazamKit",
    "url": "https://developer.apple.com/design/human-interface-guidelines/shazamkit",
    "html": "ShazamKit\nShazamKit supports audio recognition by matching an audio sample against the ShazamKit catalog or a custom audio catalog.\n\nYou can use ShazamKit to provide features like:\n\nEnhancing experiences with graphics that correspond with the genre of currently playing music\n\nMaking media content accessible to people with hearing disabilities by providing closed captions or sign language that syncs with the audio\n\nSynchronizing in-app experiences with virtual content in contexts like online learning and retail\n\nIf you need the device microphone to get audio samples for your app to recognize, you must request access to it. As with all types of permission requests, it’s important to help people understand why you’re asking for access. For guidance, see Privacy.\n\nBest practices\n\nAfter you receive permission to access the microphone for features that use ShazamKit, follow these guidelines.\n\nStop recording as soon as possible. When people allow your app to record audio for recognition, they don’t expect the microphone to stay on. To help preserve privacy, only record for as long as it takes to get the sample you need.\n\nLet people opt in to storing your app’s recognized songs to their iCloud library. If your app can store recognized songs to iCloud, give people a way to first approve this action. Even though both the Music Recognition control and the Shazam app show your app as the source of the recognized song, people appreciate having control over which apps can store content in their library.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nDeveloper documentation\n\nShazamKit\n\nVideos\nExplore ShazamKit"
  },
  {
    "title": "Pop-up buttons",
    "url": "https://developer.apple.com/design/human-interface-guidelines/pop-up-buttons",
    "html": "Pop-up buttons\nA pop-up button displays a menu of mutually exclusive options.\n\nAfter people choose an item from a pop-up button’s menu, the menu closes, and the button can update its content to indicate the current selection.\n\nBest practices\n\nUse a pop-up button to present a flat list of mutually exclusive options or states. A pop-up button helps people make a choice that affects their content or the surrounding view. Use a pull-down button instead if you need to:\n\nOffer a list of actions\n\nLet people select multiple items\n\nInclude a submenu\n\nProvide a useful default selection. A pop-up button can update its content to identify the current selection, but if people haven’t made a selection yet, it shows the default item you specify. When possible, make the default selection an item that most people are likely to want.\n\nGive people a way to predict a pop-up button’s options without opening it. For example, you can use an introductory label or a button label that describes the button’s effect, giving context to the options.\n\nConsider using a pop-up button when space is limited and you don’t need to display all options all the time. Pop-up buttons are a space-efficient way to present a wide array of choices.\n\nIf necessary, include a Custom option in a pop-up button’s menu to provide additional items that are useful in some situations. Offering a Custom option can help you avoid cluttering the interface with items or controls that people need only occasionally. You can also display explanatory text below the list to help people understand how the options work.\n\nPlatform considerations\n\nNo additional considerations for iOS, macOS, or visionOS. Not supported in tvOS or watchOS.\n\niPadOS\n\nWithin a popover or modal view, consider using a pop-up button instead of a disclosure indicator to present multiple options for a list item. For example, people can quickly choose an option from the pop-up button’s menu without navigating to a detail view. Consider using a pop-up button in this scenario when you have a fairly small, well-defined set of options that work well in a menu.\n\nResources\nRelated\n\nPull-down buttons\n\nButtons\n\nMenus\n\nDeveloper documentation\n\nMenuPickerStyle — SwiftUI\n\nchangesSelectionAsPrimaryAction — UIKit\n\nNSPopUpButton — AppKit\n\nVideos\nMeet the UIKit button system\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nAdded artwork.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded a guideline on using a pop-up button in a popover or modal view in iPadOS."
  },
  {
    "title": "iMessage apps and stickers",
    "url": "https://developer.apple.com/design/human-interface-guidelines/imessage-apps-and-stickers",
    "html": "iMessage apps and stickers\nAn iMessage app can help people share content, collaborate, and even play games with others in a conversation; stickers are images that people can use to decorate a conversation.\n\nAn iMessage app or sticker pack is available within the context of a Messages conversation and also in effects in both Messages and FaceTime. You can create an iMessage app or sticker pack as a standalone app or as an app extension within your iOS or iPadOS app. For developer guidance, see Messages and doc://com.apple.documentation/documentation/messages/adding_sticker_packs_and_imessage_apps_to_effects_in_messages_and_facetime.\n\nBest practices\n\nPrefer providing one primary experience in your iMessage app. People are in a conversational flow when they choose your app, so your functionality or content needs to be easy to understand and immediately available. If you want to provide multiple types of functionality or different collections of content, consider creating a separate iMessage app for each one.\n\nConsider surfacing content from your iOS or iPadOS app. For example, your iMessage app could offer app-specific information that people might want to share — such as a shopping list or a trip itinerary — or support a simple, collaborative task, like deciding where to go for a meal or which movie to watch.\n\nPresent essential features in the compact view. People can experience your iMessage app in a compact view that appears below the message transcript, or they can expand the view to occupy most of the window. Make sure the most frequently used items are available in the compact view, reserving additional content and features for the expanded view.\n\nIn general, let people edit text only in the expanded view. The compact view occupies roughly the same space as the keyboard. To ensure that the iMessage app’s content remains visible while people edit, display the keyboard in the expanded view.\n\nCreate stickers that are expressive, inclusive, and versatile. Whether your stickers are rich, static images or short animations, make sure that each one remains legible against a wide range of backgrounds and when rotated or scaled. You can also use transparency to help people visually integrate a sticker with text, photos, and other stickers.\n\nFor each sticker, provide a localized alternative description. VoiceOver can help people use your sticker pack by speaking a sticker’s alternative description.\n\nSpecifications\nIcon sizes\n\nThe icon for an iMessage app or sticker pack can appear in Messages, the App Store, notifications, and Settings. After people install your iMessage app or sticker pack, its icon also appears in the app drawer in the Messages app.\n\nYou supply a square-cornered icon for each extension you offer, and the system automatically applies a mask that rounds the corners.\n\nTo ensure that your icon looks great in any context and on various devices, create a square-cornered icon in the following sizes:\n\nUsage\n\n\t\n\n@2x (pixels)\n\n\t\n\n@3x (pixels)\n\n\n\n\nMessages, notifications\n\n\t\n\n148x110\n\n\t\n\n-\n\n\n\n\n\t\n\n143x100\n\n\t\n\n-\n\n\n\n\n\t\n\n120x90\n\n\t\n\n180x135\n\n\n\n\n\t\n\n64x48\n\n\t\n\n96x72\n\n\n\n\n\t\n\n54x40\n\n\t\n\n81x60\n\n\n\n\nSettings\n\n\t\n\n58x58\n\n\t\n\n87x87\n\n\n\n\nApp Store\n\n\t\n\n1024x1024\n\n\t\n\n1024x1024\n\nSticker sizes\n\nMessages supports small, regular, and large stickers. Pick the size that works best for your content and prepare all of your stickers at that size; don’t mix sizes within a single sticker pack. Messages displays stickers in a grid, organized differently for different sizes.\n\nSmall\n\nRegular\n\nLarge\n\nCreate your sticker images using the following @3x dimensions for the sticker size you chose. If necessary, the system generates @2x and @1x versions by downscaling the images at runtime. For developer guidance, see MSStickerSize.\n\nSticker size\n\n\t\n\n@3x dimensions (pixels)\n\n\n\n\nSmall\n\n\t\n\n300x300\n\n\n\n\nRegular\n\n\t\n\n408x408\n\n\n\n\nLarge\n\n\t\n\n618x618\n\nA sticker file must be 500 KB or smaller in size. For each supported format, the table below provides guidance for using transparency and animation.\n\nFormat\n\n\t\n\nTransparency\n\n\t\n\nAnimation\n\n\n\n\nPNG\n\n\t\n\n8-bit\n\n\t\n\nNo\n\n\n\n\nAPNG\n\n\t\n\n8-bit\n\n\t\n\nYes\n\n\n\n\nGIF\n\n\t\n\nSingle-color\n\n\t\n\nYes\n\n\n\n\nJPEG\n\n\t\n\nNo\n\n\t\n\nNo\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS. Not supported in macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\niMessage Apps and Stickers\n\nDeveloper documentation\n\nMessages\n\ndoc://com.apple.documentation/documentation/messages/adding_sticker_packs_and_imessage_apps_to_effects_in_messages_and_facetime — Messages\n\nVideos\nExpress Yourself!\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "HomeKit",
    "url": "https://developer.apple.com/design/human-interface-guidelines/homekit",
    "html": "HomeKit\nHomeKit lets people securely control connected accessories in their homes using Siri or the Home app on iPhone, iPad, Apple Watch, and Mac.\n\nIn iOS, the Home app also lets people manage and configure accessories.\n\nYour iOS, tvOS, or watchOS app can integrate with HomeKit (and by extension the Home app) to provide a custom or accessory-specific experience. For example, you can:\n\nHelp people set up, name, and organize their accessories\n\nAllow fine-grained accessory configuration and control\n\nProvide access to custom accessory features\n\nShow people how to create powerful, hands-free automations\n\nProvide support\n\nFor developer guidance, see HomeKit. If you’re an MFi licensee, visit the MFi portal for guidance on naming and messaging for accessory packaging.\n\nTerminology and layout\n\nHomeKit models the home as a hierarchy of objects and defines a vocabulary of terms that refer to them. The Home app uses the HomeKit object model and terminology to give people intuitive control of accessories by voice, app, and automation.\n\nIt’s crucial for your app to use the terminology and object model that HomeKit defines, so that you can reinforce people’s understanding and make home automation feel approachable.\n\nIn the HomeKit model, the home object is the root of a hierarchy that contains all other objects, such as rooms, accessories, and zones. When there’s more than one home, each home is the root of a different hierarchy.\n\nAcknowledge the hierarchical model that HomeKit uses. Even if your app doesn’t organize accessories by rooms and zones in its UI, it’s useful to reference the HomeKit model when helping people set up or control their accessories. People need to know where accessories are located so they can use Siri and HomePod to control them by speaking commands like “Siri, turn on the lights upstairs,” or “It’s dark in here.” For more guidance, see Siri interactions.\n\nMake it easy for people to find an accessory’s related HomeKit details. If your app’s organization is based on accessories, don’t hide other HomeKit information, such as an accessory’s zone or room, in a hard-to-discover settings screen. Instead, consider making the related HomeKit information easily available in an accessory detail view.\n\nRecognize that people can have more than one home. Even if your app doesn’t support the concept of multiple homes per user, consider providing the relevant home information in an accessory detail view.\n\nDon’t present duplicate home settings. If your app has a different perspective on the organization of a home, don’t confuse people by asking them to set up all or parts of their homes again or by showing a duplicate settings view. Always defer to the settings people made in the Home app and find an intuitive way to present these details in your UI.\n\nHomes\n\nHomeKit uses the term home to represent a physical home, office, or other location of relevance to people. One person might have multiple homes.\n\nRooms\n\nA room represents a physical room in a home. Rooms don’t have attributes like size or location; they’re simply names that have meaning to people, such as Bedroom or Office. When people assign accessories to a room, they can use voice commands like “Siri, turn on all the lights except the bedroom,” or “Siri, turn on the kitchen and hallway lights.”\n\nAccessories, services, and characteristics\n\nThe term accessory represents a physical, connected home accessory, like a ceiling fan, lamp, lock, or camera. HomeKit uses category to represent a type of accessory, such as thermostat, fan, or light. Typically, an accessory manufacturer assigns each accessory to a category, but your app can help people make this assignment if necessary. For example, a switch that’s connected to a fan or a lamp needs to be assigned to the same category as the accessory it controls.\n\nA controllable feature of an accessory, such as the switch on a connected light, is known as a service. Some accessories offer multiple services. For example, a connected garage door might let people control the light and the door separately, or a connected outlet might support separate control of the top outlet and the bottom outlet. Apps don’t use the word service in the UI; instead, they use names that describe the service, such as garage door opener and ceiling fan light. When people use Siri to control the accessories in their homes, they speak the service name, not the accessory name. For more guidance on naming, see Help people choose useful names.\n\nA characteristic is a controllable attribute of a service. For example, in a ceiling fan, the fan service might have a speed characteristic and the light service might have a brightness characteristic. Apps don’t use the word characteristic in the UI; instead, they use terms that describe the attribute, such as speed and brightness.\n\nA service group represents a group of accessory services that someone might want to control as a unit. For example, if there’s a floor lamp and two table lamps in one corner of a room, people might assign all three services to a service group named reading lamps. Doing so would let people use the reading lamps service group to control these three lights independently of all other lights in the room.\n\nActions and scenes\n\nThe term action refers to the changing of a service’s characteristic, such as adjusting the speed of a fan or the brightness of a light. People and automation can initiate actions.\n\nA scene is a group of actions that control one or more services in one or more accessories. For example, people might create a Movie Time scene that lowers the shades and dims the lights in the living room, or a Good Morning scene that turns on the lights, raises the shades, and starts the coffee maker in the kitchen.\n\nTip\n\nThe HomeKit API uses the term action set instead of scene. In your app’s UI, always use the term scene.\n\nAutomations\n\nAutomations cause accessories to react to certain situations, such as when a person’s location changes, a particular time of day occurs, another accessory turns on or off, or a sensor detects something. For example, an automation could turn on the house lights at sunset or when people arrive home.\n\nZones\n\nA zone represents an area in the home that contains multiple rooms, such as upstairs or downstairs. Setting up a zone is optional, but doing so lets people control multiple accessories at one time. For example, assigning all downstairs lights to a zone named downstairs lets people use voice commands like “Siri, turn off all the lights downstairs.”\n\nSetup\n\nUse the system-provided setup flow to give people a familiar experience. The HomeKit setup flow works more quickly than traditional setup flows because it lets people name accessories, join networks, pair with HomeKit, assign room and service categories, and designate favorites in just a few steps. Using the system-provided setup flow lets you concentrate on promoting the custom functionality that makes your accessory unique. For developer guidance, see addAndSetupAccessories(with:completionHandler:).\n\nProvide context to explain why you need access to people’s Home data. Create a purpose string with a phrase that describes why you’re asking for permission to access data, such as “Lets you control this accessory with the Apple Home app and Siri across your Apple devices.”\n\nDon’t require people to create an account or supply personal information. Instead, defer to HomeKit for any information you might need. If your app provides additional services that require an account, such as cloud services, make account setup optional and wait until after initial HomeKit setup to offer it.\n\nHonor people’s setup choices. When people choose to use HomeKit to set up your accessory, don’t force them to set up other platforms during the HomeKit setup flow. A cross-platform setup experience prevents people from using the accessory right away and can cause confusion by presenting too many ways to control the accessory.\n\nCarefully consider how and when to provide a custom accessory setup experience. Always begin by presenting the system-provided setup flow. Then, after the accessory’s basic functionality is available, offer a custom post-setup experience that highlights the unique features of your accessory and helps people get the most out of it. For example, a light manufacturer’s app could help people create personalized light scenes in their homes using key colors scanned in from photos in their library.\n\nHelp people choose useful names\n\nSuggest service names that suit your accessory. If your app detects when someone creates a suboptimal name for Siri voice controls, recommend alternatives that you know will work well for most people. Never suggest company names or model numbers for use as service names.\n\nCheck that the names people provide follow HomeKit naming rules. If your app lets people rename services, make sure that the new names follow the rules. (The system-provided setup flow automatically checks the original names.) If people enter a name that breaks one or more rules, briefly explain the problem and suggest some alternative names that work. Here are the rules:\n\nUse only alphanumeric, space, and apostrophe characters.\n\nStart and end with an alphabetic or numeric character.\n\nDon’t include emojis.\n\n\t\n\nExample service names\n\n\n\n\n\t\n\nReading lamp\n\n\n\n\n\t\n\n📚 lamp\n\n\n\n\n\t\n\n2nd garage door\n\n\n\n\n\t\n\n#2 garage door\n\nHelp people avoid creating names that include location information. Although it’s natural for someone to use “kitchen light” to name a light in the kitchen, including the room name in the service name can lead to unpredictable results when controlling the accessory by voice. Your app can detect service names that duplicate location information and help people fix them. For example, you might present a post-setup experience that removes the room or zone from a service name and encourages people to assign the accessory to that room or zone instead.\n\nSiri interactions\n\nHomeKit supports powerful, hands-free control using voice commands. You can help people use Siri to interact with accessories, services, and zones in their home quickly and efficiently.\n\nPresent example voice commands to demonstrate using Siri to control accessories during setup. As soon as people complete the setup of a new accessory, consider using the service name they chose in a few example Siri phrases and encourage people to try them out.\n\nAfter setup, consider teaching people about more complex Siri commands. People might not be aware of the broad range of natural language phrases they can use with Siri and HomePod to control their accessories. After setup is complete, find useful places throughout your app to help people learn about these types of commands. For example, in a scene detail view, you could tell people, You can say “Hey Siri, set ‘Movie Time.’”\n\nIn addition to recognizing the names of homes, rooms, zones, services, and scenes, Siri can also use information such as accessory category and characteristic to identify a service. For example, when people use terms like brighter or dim, Siri recognizes that they’re referring to a service that has a brightness characteristic, even if they don’t speak the name of the service.\n\nTo illustrate the power and flexibility of Siri commands, here are some examples of the types of phrases that people could use to control their accessories.\n\nPhrase\n\n\t\n\nSiri understands\n\n\n\n\n“Turn on the floor lamp”\n\n\t\n\nService (floor lamp)\n\n\n\n\n“Show me the entryway camera”\n\n\t\n\nService (entryway camera)\n\n\n\n\n“Turn on the light”\n\n\t\n\nAccessory category (light)\n\n\n\n\n“Turn off the living room light”\n\n\t\n\nRoom (living room)\n\n\n\n\nAccessory category (light)\n\n\n\n\n“Make the living room a little bit brighter”\n\n\t\n\nRoom (living room)\n\n\n\n\nAccessory category (implied)\n\n\n\n\nBrightness characteristic (brighter)\n\n\n\n\n“Turn on the recessed lights”\n\n\t\n\nService group (recessed lights)\n\n\n\n\n“Turn off the lights upstairs”\n\n\t\n\nAccessory category (lights)\n\n\n\n\nZone (upstairs)\n\n\n\n\n“Dim the lights in the bedroom and nursery”\n\n\t\n\nAccessory category (lights)\n\n\n\n\nBrightness characteristic (dim)\n\n\n\n\nRooms (bedroom, nursery)\n\n\n\n\n“Run Good night”\n\n\t\n\nScene (Good night)\n\n\n\n\n“Is someone in the living room?”\n\n\t\n\nAccessory category (implied)\n\n\n\n\nOccupancy detection characteristic (implied)\n\n\n\n\n“Is my security system tripped?”\n\n\t\n\nAccessory category (security system)\n\n\n\n\n“Did I leave the garage door open?”\n\n\t\n\nAccessory category (garage door)\n\n\n\n\nOpen characteristic (open)\n\n\n\n\n“Did I forget to turn off the lights in the Tahoe House?”\n\n\t\n\nAccessory category (lights)\n\n\n\n\nHome (Tahoe House)\n\n\n\n\n“It’s dark in here”\n\n\t\n\nCurrent home (here)\n\n\n\n\nCurrent room (via HomePod)\n\n\n\n\nAccessory category (implied)\n\nRecommend that people create zones and service groups, if they make sense for your accessory. If people might benefit from using context-specific voice commands to control your accessory, suggest these types of interactions and help people set them up. For example, if you provide an accessory such as a light, switch, or thermostat, you could suggest setting up a zone named “upstairs” or a service group named “media center” to support commands like “Siri, turn off the upstairs lights,” or “Siri, activate the media center.”\n\nOffer shortcuts only for accessory-specific functionality that HomeKit doesn’t support. HomeKit lets people use ordinary (or natural) language to control accessories without requiring any additional configuration, so you avoid confusing people by offering shortcuts that duplicate HomeKit functionality. Instead, consider offering shortcuts for complementary functionality that your app provides. For example, if people often want to order filters for an air conditioner that you support, you might offer a shortcut like “Order AC filters.” To learn how to provide phrases that people can use for shortcuts, see Shortcuts and suggestions.\n\nIf your app supports both HomeKit and shortcuts, help people understand the difference between these types of voice control. People can get confused if they’re presented with multiple methods of voice control. Be sure you clearly indicate what’s possible with shortcuts, and never encourage people to create a shortcut for a scene or action that HomeKit already supports.\n\nCustom functionality\n\nYour app is a great place to help people appreciate the unique functionality of your accessory. For example, an app for a light that displays different colors could help people create HomeKit scenes using colors imported from their photos.\n\nBe clear about what people can do in your app and when they might want to use the Home app. For example, if your app supports only lights, consider encouraging people to create a “Movie Time” scene that not only dims the lights, but also closes the shades, and turns on the TV to a specific input. To do this, first guide people to set up a scene that includes only your accessory’s actions — in this scenario, dimming the lights. Then, your app can suggest that people open the Home app to add their HomeKit-compatible shades and TV to the scene you helped them create. For guidance on how to refer to the Home app, see Referring to HomeKit.\n\nDefer to HomeKit if your database differs from the HomeKit database. Give people a seamless experience by automatically reflecting changes made in the Home app or in other third-party HomeKit apps. If you must ask people to manage conflicts in your app, present the conflict visually so that they have a clear picture of the choice they need to confirm. For example, if someone changes an accessory’s service name in the Home app, your app can detect this change and could show both names side by side to confirm that the person wants to use the new name in your app, too.\n\nAsk permission to update the HomeKit database when people make changes in your app. You don’t want to surprise people by changing something in the Home app, so it’s essential to get permission or an indication of intent before you write to the database. In particular, never overwrite HomeKit database settings without a person’s explicit direction.\n\nCameras\n\nYour app can display still images or streaming video from a connected HomeKit IP camera.\n\nDon’t block camera images. It’s fine to supplement the camera’s content with useful features, such as an alert calling attention to potentially interesting activity. However, avoid covering portions of the camera’s images with other content.\n\nShow a microphone button only if the camera supports bidirectional audio. A nonfunctioning microphone button takes up valuable display space in your app and risks confusing people.\n\nUsing HomeKit icons\n\nUse the HomeKit icon in setup or instructional communications related to HomeKit technology.\n\nIn addition, you can use the Apple Home app icon when referencing the Apple Home app or in a button that opens the Apple Home app product page in the App Store.\n\nUse only Apple-provided icons. Don’t create your own HomeKit or Home app icon design or attempt to mimic the Apple-provided designs. Download HomeKit icons in Resources.\n\nStyles\n\nYou have several options for displaying the HomeKit icon.\n\nBlack HomeKit icon\n\nUse the HomeKit icon on white or light backgrounds when other technology icons appear in black.\n\nWhite HomeKit icon\n\nUse the HomeKit icon on black or dark backgrounds when other technology icons appear in white.\n\nCustom color HomeKit icon\n\nUse a custom color when other technology icons appear in the same color.\n\nPosition the HomeKit icon consistently with other technology icons. When other technology icons are contained within shapes, treat the HomeKit icon in the same manner.\n\nUse the HomeKit icon noninteractively. Don’t use the icon and the name HomeKit in custom interactive elements or buttons. You can use the Apple Home app icon to open the app’s product page in the App Store.\n\nDon’t use the HomeKit icon within text or as a replacement for the word HomeKit. See Referring to HomeKit to learn how to properly reference HomeKit in text.\n\nPair the icon with the name HomeKit correctly. You can show the name below or beside the icon if other technologies are referenced in this way. Use the same font that’s used on the rest of your layout. For related guidance, see Referring to HomeKit.\n\nUsing the icon and name in setup or instructional content\n\nUsing the icon and name referencing the Apple Home app\n\nReferring to HomeKit\n\nEmphasize your app over HomeKit. Make references to HomeKit or Apple Home less prominent than your app name or main identity.\n\nAdhere to Apple’s trademark guidelines. Apple trademarks can’t appear in your app name or images. In text, use Apple product names exactly as shown on the Apple Trademark List.\n\nUse Apple product names in singular form only; do not make Apple product names possessive.\n\nDon’t translate Apple, Apple Home, HomeKit, or any other Apple trademark.\n\nDon’t use category descriptors. For example, say iPad, not tablet.\n\nDon’t indicate any kind of sponsorship, partnership, or endorsement from Apple.\n\nAttribute Apple, HomeKit, and all other Apple trademarks with the correct credit lines wherever legal information appears within your app.\n\nRefer to Apple devices and operating systems only in technical specifications or compatibility descriptions.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nUse HomeKit to turn on your lights from your iPhone or iPad.\n\n\n\n\n\t\n\nUse HomeKit to turn on your lights from your iOS devices.\n\nSee Guidelines for Using Apple Trademarks.\n\nReferencing HomeKit and the Home app\n\nUse correct capitalization when using the term HomeKit. HomeKit is one word, with an uppercase H and uppercase K, followed by lowercase letters. Apple Home is two words, with an uppercase A and uppercase H, followed by lowercase letters. If your layout displays only all-uppercase designations, HomeKit or Apple Home can be typeset in all uppercase to match the style of the rest of the layout.\n\nDon’t use the name HomeKit as a descriptor. Instead use terms like works with, use, supports, or compatible.\n\n\t\n\nExample text\n\n\n\n\n\t\n\n[Brand] lightbulbs work with HomeKit.\n\n\n\n\n\t\n\nHomeKit-enabled thermostat.\n\n\n\n\n\t\n\nYou can use HomeKit with [App Name].\n\n\n\n\n\t\n\nHomeKit lightbulbs.\n\nDon’t suggest that HomeKit is performing an action or function.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nBack door is unlocked with HomeKit.\n\n\n\n\n\t\n\nHomeKit unlocked the back door.\n\nUse the name Apple with the name HomeKit, if desired.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nCompatible with Apple HomeKit.\n\nUse the name HomeKit for setup, configuration, and instructions, if desired.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nOpen HomeKit settings.\n\nUse the app name Apple Home whenever referring specifically to the app. On the first mention of the app in body copy, use the complete name Apple Home. Subsequent mentions can refer to the Home app.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nOpen the Apple Home app.\n\n\n\n\n\t\n\nOpen the Apple Home app. Your accessory and room will now appear in the Home app.\n\n\n\n\n\t\n\nOpen Home.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nApple Design Resources\n\nGuidelines for Using Apple Trademarks and Copyrights\n\nDeveloper documentation\n\nHomeKit\n\nVideos\nAdd support for Matter in your smart home app\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "Playing haptics",
    "url": "https://developer.apple.com/design/human-interface-guidelines/playing-haptics",
    "html": "Playing haptics\nPlaying haptics can engage people’s sense of touch and bring their familiarity with the physical world into your app or game.\n\nThe system can play haptics in addition to visual and auditory feedback to communicate things like the confirmation of an Apple Pay transaction or the arrival of a notification in iOS and watchOS. On a Mac that’s equipped with a Force Touch trackpad, apps can play haptics while people are dragging content or respond to different strengths of a force click to cause different levels of change in an onscreen element. In a tvOS or iPadOS app, game controllers can provide haptic feedback.\n\nDepending on the platform, the system may provide haptic feedback for standard components by default. For example, components like switches, sliders, and pickers automatically play haptic feedback on supported iPhone models; on Apple Watch, the Taptic Engine generates haptics and watchOS combines an audible tone with some of them. In addition, the system may provide built-in haptic patterns you can use in your app or game or even let you design custom ones.\n\nBest practices\n\nUse system-provided haptic patterns according to their documented meanings. People recognize standard haptics because the system plays them consistently on interactions with standard controls. If the documented use case for a pattern doesn’t make sense in your app, use a generic pattern or create your own, where supported. For guidance, see Custom haptics.\n\nUse haptics consistently. It’s important to build a clear, causal relationship between each haptic and the action that causes it so people learn to associate certain haptic patterns with certain experiences. If a haptic doesn’t reinforce a cause-and-effect relationship, it can be confusing and seem gratuitous. For example, if your app plays a specific haptic pattern when a game character fails to finish a mission, people associate that pattern with a negative outcome. If you use the same haptic pattern for a positive outcome like a level completion, people will be confused.\n\nUse haptics in ways that complement other feedback in your app. When visual, auditory, and tactile feedback are in harmony — as they generally are in the physical world — the user experience is more coherent and can seem more natural. For example, match the intensity and sharpness of a haptic with the animation you use to accompany it. You can also synchronize sound with haptics; for developer guidance, see Delivering Rich App Experiences with Haptics.\n\nAvoid overusing haptics. Sometimes a haptic can feel just right when it happens occasionally, but become tiresome when it plays frequently. It’s important to do user testing that can help you discover a balance that most people appreciate. Often, the best haptic experience is one that people may not be conscious of, but miss when it’s turned off.\n\nMake haptics optional. Let people turn off or mute haptics if they wish, and make sure people can still enjoy your app without them.\n\nBe aware that playing haptics might impact other user experiences. By design, haptics produce enough physical force for people to feel the vibration. Ensure that haptic vibrations don’t disrupt user experiences involving the camera, gyroscope, or microphone.\n\nCustom haptics\n\nGames often use custom haptics to enhance gameplay. Although it’s less common, nongame apps might also use custom haptics to provide a richer, more delightful experience.\n\nYou can design custom haptic patterns that vary dynamically, based on user input or context. For example, the impact players feel when a game character jumps from a tree can be stronger than when the character jumps in place, and substantial experiences — like a collision or a hit — can feel very different from subtle experiences like the approach of footsteps or a looming danger.\n\nThere are two basic building blocks you can use to generate custom haptic patterns.\n\nTransient events are brief and compact, often feeling like taps or impulses. The experience of tapping the Flashlight button on the Home Screen is an example of a transient event.\n\nContinuous events feel like sustained vibrations, such as the experience of the lasers effect in a message.\n\nRegardless of the type of haptic event you use to generate a custom haptic, you can also control its sharpness and intensity. You can think of sharpness as a way to abstract a haptic experience into the waveform that produces the corresponding physical sensations. Specifying sharpness lets you relay to the system your intent for the experience. For example, you might use sharpness values to convey an experience that’s soft, rounded, or organic, or one that’s crisp, precise, or mechanical. As the term implies, intensity means the strength of the haptic.\n\nBy combining transient and continuous events, varying sharpness and intensity, and including optional audio content, you can create a wide range of different haptic experiences. For developer guidance, see Core Haptics.\n\nPlatform considerations\niPadOS, tvOS, visionOS\n\nGame controllers can play haptics and you can support game controller input in your apps. For developer guidance, see Playing Haptics on Game Controllers.\n\niOS\n\nOn supported iPhone models, you can add haptics to your experience in the following ways:\n\nUse standard UI components — like toggles, sliders, and pickers — that play Apple-designed system haptics by default.\n\nWhen it makes sense, use a feedback generator to play one of several predefined haptic patterns in the categories of notification, impact, and selection (for developer guidance, see UIFeedbackGenerator).\n\nNotification\n\nNotification haptics provide feedback about the outcome of a task or action, such as depositing a check or unlocking a vehicle.\n\nPlay\nSuccess. Indicates that a task or action has completed.\nPlay\nWarning. Indicates that a task or action has produced a warning of some kind.\nPlay\nError. Indicates that an error has occurred.\nImpact\n\nImpact haptics provide a physical metaphor you can use to complement a visual experience. For example, people might feel a tap when a view snaps into place or a thud when two heavy objects collide.\n\nPlay\nLight. Indicates a collision between small or lightweight UI objects.\nPlay\nMedium. Indicates a collision between medium-sized or medium-weight UI objects.\nPlay\nHeavy. Indicates a collision between large or heavyweight UI objects.\nPlay\nRigid. Indicates a collision between hard or inflexible UI objects.\nPlay\nSoft. Indicates a collision between soft or flexible UI objects.\nSelection\n\nSelection haptics provide feedback while the values of a UI element are changing.\n\nPlay\nSelection. Indicates that a UI element’s values are changing.\nmacOS\n\nWhen a Magic Trackpad is available, your app can provide one of the three following haptic patterns in response to a drag operation or force click.\n\nHaptic feedback pattern\n\n\t\n\nDescription\n\n\n\n\nAlignment\n\n\t\n\nIndicates the alignment of a dragged item. For example, this pattern could be used in a drawing app when the people drag a shape into alignment with another shape. Other scenarios where this type of feedback could be used might include scaling an object to fit within specific dimensions, positioning an object at a preferred location, or reaching the beginning/end or minimum/maximum of something like a scrubber in a video app.\n\n\n\n\nLevel change\n\n\t\n\nIndicates movement between discrete levels of pressure. For example, as people press a fast-forward button on a video player, playback could increase or decrease and haptic feedback could be provided as different levels of pressure are reached.\n\n\n\n\nGeneric\n\n\t\n\nIntended for providing general feedback when the other patterns don’t apply.\n\nFor developer guidance, see NSHapticFeedbackPerformer.\n\nwatchOS\n\nApple Watch Series 4 and later provides haptic feedback for the Digital Crown, which gives people a more tactile experience as they scroll through content. By default, the system provides linear haptic detents that people can feel as they rotate the Digital Crown. Some system controls, like table views, provide detents as new items scroll onto the screen. For developer guidance, see WKHapticType.\n\nwatchOS defines the following set of haptics, each of which conveys a specific meaning to people.\n\nNotification\nUp\nDown\nSuccess\nFailure\nRetry\nStart\nStop\nClick\nPlay\n\nNotification. Tells the person that something significant or out of the ordinary has happened and requires their attention. The system plays this same haptic when a local or remote notification arrives.\n\nResources\nRelated\n\nFeedback\n\nGestures\n\nDeveloper documentation\n\nCore Haptics\n\nVideos\nPractice audio haptic design\nIntroducing Core Haptics\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Game Center",
    "url": "https://developer.apple.com/design/human-interface-guidelines/game-center",
    "html": "Game Center\nThe GameKit framework supports Game Center, a social gaming network available for games running in iOS, iPadOS, macOS, tvOS, visionOS, and watchOS.\n\nPlayers can use Game Center’s centralized service to connect to each other and to access their profile and game-related information across all Game Center games on their devices.\n\nWhen you integrate Game Center into your game, you can take advantage of its social and multiplayer features without having to develop your own support for them. For example, you can use Game Center functionality to deliver:\n\nYour unique achievements\n\nLeaderboards that promote competition and comparison\n\nRich multiplayer experiences\n\nGameKit provides a full-featured UI that makes it easy to present Game Center highlights and experiences in consistent ways within your game. Alternatively, you can use GameKit APIs and Game Center data to present this functionality within your custom UI. For developer guidance, see GameKit.\n\nAccess point\n\nThe Game Center access point is an Apple-designed UI element that lets players view their Game Center profile and information without leaving your game. After signing into Game Center on a device, players can use the access point within your game to launch the in-game Dashboard, where they can view and manage their profile and other game-related content.\n\nTo make sure that players can engage with their Game Center information without leaving your game, you need to include the access point in your interface and incorporate its behaviors into your game. The following guidelines can help you give players a consistent experience. For developer guidance, see Adding an access point to your game.\n\nNote\n\nIf necessary, your game can include a custom link that opens the dashboard. For guidance, see Custom dashboard links.\n\nChoose the information to present when the access point appears. When it first appears, the access point can briefly display highlights that are relevant in your game, like players’ overall achievement progress or their standing among friends in the default leaderboard.\n\nAfter displaying your relevant Game Center updates, the access point shrinks to display only the player’s profile avatar. Because players frequently view their avatar in the collapsed access point, they learn to associate it with Game Center highlights. Players can always launch the in-game dashboard by choosing the access point, regardless of its current appearance.\n\nDisplay the access point in your main menu. Players typically view your main menu every time they start your game, so using this location for the access point can help them remember where to find it. Avoid displaying the access point in splash screens, cinematic flows, tutorials, or other content that might precede your game’s main menu screen. If you can’t add the access point to your game menu, you can add it to your settings area instead.\n\nHide the access point when players leave your menu. When players leave the main menu to play your game, they’re thinking about gameplay, not Game Center. Players know that they can always view their progress and open the dashboard by revisiting your menu, so there’s no need to include the access point elsewhere.\n\nPlace the access point in a corner of your game menu window or view. You can choose the corner that works best with your menu interface.\n\nNote\n\nIn visionOS, the locations of the access point and dashboard vary based on game type, such as immersive or volume-based. For developer guidance, see Adding an access point to your game.\n\nAvoid placing game controls near the access point. To help you prevent game controls from encroaching on the access point, consider defining a safe area. A safe area helps you ensure that there’s enough room for both the collapsed and expanded versions of the access point, in addition to Game Center achievement notifications that you might want to appear during gameplay.\n\nOn iPhone, the width of the expanded access point is 335 points and the height is 62 points, in both landscape and portrait orientations. In general, it’s a good idea to avoid the area at the top of the screen that has a height of 91 points in landscape and 114 points in portrait.\n\nPortrait\nLandscape\n\nDashboard\n\nAfter players sign in to Game Center, they can launch the in-game dashboard by selecting the access point within your game. The dashboard is a full-screen view that appears on top of your game and gives players access to their Game Center profile and information. For developer guidance, see Displaying the Game Center dashboard; to learn how visionOS games present the dashboard, see Adding an access point to your game.\n\nThe dashboard — like the access point and other Game Center UI — uses a background material that adapts to the appearance of your game. The translucency of this material provides a sense of depth and helps remind players that they haven’t left your game.\n\nPause your game while the dashboard is present. Pausing your game helps you avoid potential performance impacts, but it also means that players can view their Game Center information without feeling that the game is continuing without them.\n\nIf necessary, your game can include custom links that open the dashboard or take players directly to their Game Center profile. For guidance, see Custom dashboard links.\n\nCreating a dashboard image (tvOS)\n\nGames that run in tvOS can display an optional image at the top of the in-game dashboard.\n\nUse a simple, easily recognizable image that looks great at a distance. Although you want to avoid using your app icon for this image, you could use your game’s logo or word mark. To ensure that your image contrasts well with the dashboard appearance, consider using transparency to let the dashboard background show through.\n\nUse the following specifications to create a dashboard image.\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nFormat\n\n\t\n\nPNG, TIF, or JPG\n\n\n\n\nColor space\n\n\t\n\nsRGB or P3\n\n\n\n\nResolution\n\n\t\n\n72 DPI (minimum)\n\n\n\n\nImage size\n\n\t\n\n600x180 pt (1200x360 px @2x)\n\nCustom dashboard artwork isn’t focusable.\n\nAchievements\n\nAchievements can give players added incentive to stay engaged with your game. Game Center achievements appear in a collectible card format that highlights the player’s progress and showcases your artwork. Achievements are a prominent feature in Game Center UI, so it’s essential to design high-quality assets that catch the eye and encourage players to return to your game. For developer guidance, see Rewarding players with achievements.\n\nIf necessary, your game can include a custom link that takes players directly to the achievements area in the dashboard. For guidance, see Custom dashboard links.\n\nIntegrating your achievements into Game Center\n\nGame Center defines four achievement states: locked, in-progress, hidden, and completed. The system groups achievements by completion status, displaying completed achievements in the Completed group and all other achievements in the Locked group.\n\nAlign your achievement types with Game Center achievement states. The system displays achievements differently, depending on state. For example, an in-progress achievement includes a percentage value that shows how close players are to completion, whereas a locked achievement displays a padlock glyph. When you map your achievements to the four Game Center achievement states, you give players a consistent experience and you help them see at a glance the types of achievements your game offers.\n\nDetermine a display order for your achievements. The order in which you upload achievements is the order in which they’re displayed. For example, you might want your achievements to appear in an order that corresponds to the most common path through your game.\n\nCreating great achievement images\n\nWhen players complete an achievement, the system moves the card that represents it into the Completed group, fills the card’s circular frame with your artwork, and adds a badge that displays the completion date. Achievement artwork is required when you adopt Game Center achievements.\n\nDesign rich, high-quality images that complement your game and make players feel rewarded. Providing beautiful achievements that reward a variety of gameplay styles and skill levels can encourage players to stay engaged with your game and earn more achievements. Because players appreciate earning unique achievements that remind them of each accomplishment, avoid reusing the same asset to represent more than one achievement. If you don’t provide an asset for an achievement, the card shows a placeholder image instead.\n\nDesign a centered image for each achievement. The system applies a circular mask to your achievement image, so be sure to keep primary content centered.\n\nCreate achievement images in the appropriate size and format. Use the following specifications to create opaque images for games that run in iOS, iPadOS, and macOS.\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nFormat\n\n\t\n\nPNG, TIF, or JPG\n\n\n\n\nColor space\n\n\t\n\nsRGB or P3\n\n\n\n\nResolution\n\n\t\n\n72 DPI (minimum)\n\n\n\n\nImage size\n\n\t\n\n512x512 pt (1024x1024 px @2x)\n\n\n\n\nMask diameter\n\n\t\n\n512 pt (1024 px @2x)\n\nUse the following specifications to create an achievement image for a game that runs in tvOS.\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nFormat\n\n\t\n\nPNG, TIF, or JPG\n\n\n\n\nColor space\n\n\t\n\nsRGB or P3\n\n\n\n\nResolution\n\n\t\n\n72 DPI (minimum)\n\n\n\n\nImage size\n\n\t\n\n320x320 pt (640x640 px @2x)\n\n\n\n\nMask diameter\n\n\t\n\n200 pt (400 px @2x)\n\nIn tvOS, achievement images aren’t focusable.\n\nWriting text that describes your achievements\n\nRegardless of an achievement’s state, the card displays your title and description below the circular frame.\n\nBe succinct. The achievement card limits the title and description to two lines each. If your title or description wraps beyond two lines, the card truncates the text.\n\nUse correct capitalization styles. In particular, avoid using all capital letters in your title and description. Use title-style capitalization for the achievement title and use sentence-style capitalization for the description.\n\nBe creative with an achievement’s title but straightforward with its description. Although most players appreciate entertaining titles, they expect an achievement’s description to specify how to earn it.\n\nLeaderboards\n\nLeaderboards can be a great way to encourage competition within your game. When you adopt Game Center and provide the relevant data, players can easily check their ranking against friends or global players.\n\nYou can take advantage of the system-designed UI or present leaderboard information within custom UI. If necessary, you can also provide a custom link that takes players directly to the leaderboards area in the dashboard. For guidance, see Custom dashboard links.\n\nChoose a leaderboard type that aligns with the core mechanics of your game. Game Center supports a classic leaderboard that tracks all-time scores and a recurring leaderboard that resets based on an interval you define. For example, you might want your leaderboard to reset every other week, every day, or even every 5 minutes. Recurring leaderboards can increase engagement by giving players more chances to take the lead. For developer guidance, see GKLeaderboard.\n\nCreating leaderboard images (optional)\n\nAlthough you don’t have to supply leaderboard images, doing so gives you another opportunity to offer beautiful artwork and reinforce your game’s visual aesthetic.\n\nDesign high-quality artwork that echoes the in-game experience. You want players to be able to recognize your leaderboards at a glance.\n\nAim to create a unique image for each leaderboard. People often use these images to help them distinguish among leaderboards, so it’s a good idea to avoid reusing an image in multiple leaderboards. As you design individual images, keep in mind that players often see several leaderboards at the same time, so prefer complementary images that work well as a set.\n\nCreate leaderboard images in the appropriate size and format. For games that run in iOS, iPadOS, and macOS, the system displays an individual leaderboard at its actual size, rounding both top corners. For leaderboards that are part of a set, the system adjusts each image’s actual size by cropping its top and bottom, leaving a rectangular area in the middle. To ensure that your primary content remains visible, make sure it stays within the cropped rectangle.\n\nUse the following specifications to create leaderboard artwork for a game that runs in iOS, iPadOS, and macOS.\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nFormat\n\n\t\n\nPNG or JPG\n\n\n\n\nColor space\n\n\t\n\nsRGB or P3\n\n\n\n\nResolution\n\n\t\n\n72 DPI (minimum)\n\n\n\n\nImage size\n\n\t\n\n512x512 pt (1024x1024 px @2x)\n\n\n\n\nCropped area\n\n\t\n\n512x320 pt (1024x640 px @2x)\n\nFor games that run in tvOS, provide between one and three multilayer images for each leaderboard or leaderboard set in your game. The back layer of the art must be opaque. At runtime, a dark gradient may overlay your image from bottom to top, and you can place text above the bottom-right corner. Unlike achievement images, leaderboard images are focusable.\n\nBecause they’re focusable, you need to design leaderboards that remain easy to view while the focus effect moves and scales the images (to learn more about focus effects, see Focus and selection). In addition, focusing may crop your leaderboard content at the edges of some layers. To ensure that your primary content stays comfortably visible while in focus, avoid placing it too close to the edges.\n\nUse the following specifications to create leaderboard images for a game that runs in tvOS. You can also download a template from Apple Design Resources that can help you position content.\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nAspect ratio\n\n\t\n\n16:9\n\n\n\n\nFormat\n\n\t\n\nPNG, TIF, or JPG\n\n\n\n\nColor space\n\n\t\n\nsRGB or P3\n\n\n\n\nResolution\n\n\t\n\n72 DPI (minimum)\n\n\n\n\nImage size\n\n\t\n\n659x371 pt (1318x742 px @2x)\n\n\n\n\nFocused size\n\n\t\n\n618x348 pt (1236x696 px @2x)\n\n\n\n\nUnfocused size\n\n\t\n\n548x309 pt (1096x618 px @2x)\n\nWriting text that describes your leaderboards\n\nA leaderboard includes a title you can use to describe the area of competition.\n\nBe succinct and use correct capitalization. A leaderboard truncates the title after two lines of text. Use title-style capitalization for the title and avoid capitalizing all letters.\n\nMultiplayer\n\nGame Center supports real-time and turn-based multiplayer functionality. For developer guidance, see Finding multiple players for a game.\n\nWhen you adopt Game Center’s full-featured UI, you can provide a familiar and consistent matchmaking experience. In particular, you can offer the built-in player picker view, which helps players find people for a match without leaving your game. The built-in picker view can list system-suggested contacts, Game Center friends, and players who recently participated in non-auto-matched games.\n\nWhen you add support for SharePlay, players can automatically join a game with friends from a Messages conversation or during a group FaceTime call (for developer guidance, see Group Activities).\n\nWhen you adopt Game Center multiplayer functionality, you can use the system-designed multiplayer UI or present the information within your custom UI. Although the Game Center multiplayer UI supports the ability to send invitations to a player’s contacts, GameKit doesn’t provide API that lets you offer this functionality in a custom multiplayer UI.\n\nProvide an unambiguous button that lets players access the multiplayer lobby. If your game supports a multiplayer experience, clearly display this option in your game’s main menu screen. For best results, use the term Multiplayer.\n\nProvide a rich preview image to customize a Messages-based invitation experience. If players can use Messages to invite other people to a match, supply an image that represents your game to help customize the experience. Create an image that measures 480x480 pt (960x960 px @2x), name it GKMessageImage.png, and add it to your game’s asset catalog.\n\nCustom dashboard links\n\nPlayers can always use the access point to launch the dashboard without leaving your game, but you might need to provide custom UI that opens the dashboard or deep-links to an area within it, like leaderboards. If custom links are necessary in your game, it’s important to provide a familiar user experience that doesn’t confuse players. To ensure consistency, use the artwork that Game Center provides and use the correct terms to refer to each Game Center area.\n\nUse only Game Center–provided artwork in custom UI that opens the dashboard. Apple Design Resources provides downloadable Game Center artwork you can use in your custom UI. For example, you can download artwork for custom UI that links to achievements, leaderboards, the player’s Game Center profile, and the dashboard itself. Be sure to use each art file for the appropriate area; for example, don’t use the dashboard art file in a button that opens the leaderboards section. In particular, don’t use the player’s Game Center avatar in a custom button that opens the player’s profile. Reusing the avatar can cause players to confuse your button with the access point, which creates an inconsistent user experience.\n\nRespect the appearance of Game Center artwork. Don’t adjust the width, corner radius, or aspect ratio of the artwork; don’t add a trademark symbol or any other content; don’t add visual effects to the artwork, such as shadows, glows, or reflections; and don’t flip, rotate, or animate the artwork.\n\nReferencing Game Center and dashboard areas\n\nThe following guidelines describe how to use Game Center terminology correctly so that you can avoid confusing players.\n\nDon’t use the term GameKit in game UI. GameKit is a developer-facing term that refers to the framework your game uses to integrate with Game Center. If you need to describe how your game works with the features GameKit provides, use the term Game Center. For example, you might say that your game “displays achievements in Game Center.”\n\nUse correct capitalization when using the term Game Center. Game Center is two words, with an uppercase G and uppercase C, followed by lowercase letters. You can display Game Center entirely in uppercase only when you need to conform to an established typographic interface style, such as in a game that capitalizes all text.\n\nUse the system-provided translation of Game Center. Avoid confusing players by referring to Game Center using the translation that they view on their device.\n\nUse correct terminology to refer to dashboard areas. If you use different terms in your custom links to dashboard areas, players won’t be certain where the links will take them.\n\nCorrect term\n\n\t\n\nExamples of incorrect terms\n\n\n\n\nAchievements\n\n\t\n\nAwards, Trophies, Medals\n\n\n\n\nLeaderboards\n\n\t\n\nRankings, Scores, Leaders\n\n\n\n\nGame Center Profile\n\n\t\n\nProfile, Account, Player Info\n\n\n\n\nGame Center\n\n\t\n\nGame Zone, Game Space, Play Center\n\n\n\n\nAdd Friends\n\n\t\n\nAdd, Add Profile, Add Buddies, Include Friends\n\nLocalize the correct terms. When a term includes Game Center, use the system-provided translation of Game Center and localize the remaining terms, such as Profile.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nGameKit\n\nCreate asset catalogs and sets — Xcode Help\n\nVideos\nDesign for Game Center\nTap into Game Center: Dashboard, Access Point, and Profile\nTap into Game Center: Leaderboards, Achievements, and Multiplayer\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nAdded links to developer guidance on using the access point and dashboard in a visionOS game.\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nAdded artwork for the iOS achievement layout.\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "Always On",
    "url": "https://developer.apple.com/design/human-interface-guidelines/always-on",
    "html": "Always On\nOn devices that include the Always On display, the system can continue to display an app’s interface when people suspend their interactions with the device.\n\nIn the Always On state, a device can continue to give people useful, glanceable information in a low-power, privacy-preserving way by dimming the display and minimizing onscreen motion. The system can display different items depending on the device.\n\nOn iPhone 14 Pro and iPhone 14 Pro Max, the system displays Lock Screen items like Widgets and Live Activities when people set aside their device face up and stop interacting with it.\n\nWhen people drop their wrist while wearing Apple Watch, the system dims the watch face, continuing to display the interface of the app as long as it’s either frontmost or running a background session.\n\nOn both devices, the system displays notifications while in Always On, and people can tap the display to exit Always On and resume interactions.\n\nBest practices\n\nHide sensitive information. It’s crucial to redact personal information that people wouldn’t want casual observers to view, like bank balances or health data. You also need to hide personal information that might be visible in a notification; for guidance, see Notifications.\n\nKeep other types of personal information glanceable when it makes sense. On Apple Watch, for example, people typically appreciate getting pace and heart rate updates while they’re working out; on iPhone, people appreciate getting a glanceable update on a flight arrival or a notification when a ride-sharing service arrives. If people don’t want any information to be visible, they can turn off Always On.\n\nKeep important content legible and dim nonessential content. You can increase dimming on secondary text, images, and color fills to give more prominence to the information that’s important to people. For example, a to-do list app might remove row backgrounds and dim each item’s additional details to highlight its title. Also, if you display rich images or large areas of color, consider removing the images and using dimmed colors.\n\nMaintain a consistent layout. Avoid making distracting interface changes when Always On begins or ends and throughout the Always On experience. For example, when Always On begins, prefer transitioning an interactive component to an unavailable appearance — don’t just remove it. Within the Always On context, aim to make infrequent, subtle updates to the interface. For example, a sports app might pause granular play-by-play updates while in Always On, only updating the score when it changes. Note that unnecessary changes during Always On can be especially distracting on iPhone, because people often put their device face up on a surface, making motion on the screen visible even when they’re not looking directly at it.\n\nGracefully transition motion to a resting state; don’t stop it instantly. Smoothly finishing the current motion helps communicate the transition and avoids making people think that something went wrong.\n\nPlatform considerations\n\nNo additional considerations for iOS or watchOS. Not supported in iPadOS, macOS, tvOS, or visionOS.\n\nResources\nRelated\n\nDesigning for watchOS\n\nDeveloper documentation\n\nDesigning your app for the Always On state — watchOS apps\n\nVideos\nWhat's new in watchOS 8\nBuild a workout app for Apple Watch\nWhat's new in SwiftUI\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nUpdated intro image artwork.\n\n\n\n\nSeptember 23, 2022\n\n\t\n\nExpanded guidance to cover the Always On display on iPhone 14 Pro and iPhone 14 Pro Max."
  },
  {
    "title": "AirPlay",
    "url": "https://developer.apple.com/design/human-interface-guidelines/airplay",
    "html": "AirPlay\nAirPlay lets people stream media content wirelessly from iOS, iPadOS, macOS, and tvOS devices to Apple TV, HomePod, and TVs and speakers that support AirPlay.\n\nBest practices\n\nPrefer the system-provided media player. The built-in media player offers a standard set of controls and supports features like chapter navigation, subtitles, closed captioning, and AirPlay streaming. It’s also easy to implement, provides a consistent and familiar playback experience across the system, and accommodates the needs of most media apps. Consider designing a custom video player only if the system-provided player doesn’t meet your app’s needs. For developer guidance, see AVPlayerViewController.\n\nProvide content in the highest possible resolution. Your HTTP Live Streaming (HLS) playlist needs to include the full range of available resolutions so that people can experience your content in the resolution that’s appropriate for the device they’re using (AVFoundation automatically selects the resolution based on the device). If you don’t include a range of resolutions, your content looks low quality when people stream it to a device that can play at higher resolutions. For example, content that looks great on iPhone at 720p will look low quality when people use AirPlay to stream it to a 4K TV.\n\nStream only the content people expect. Avoid streaming content like background loops and short video experiences that make sense only within the context of the app itself. For developer guidance, see usesExternalPlaybackWhileExternalScreenIsActive.\n\nSupport both AirPlay streaming and mirroring. Supporting both features gives people the most flexibility.\n\nSupport remote control events. When you do, people can choose actions like play, pause, and fast forward on the lock screen, and through interaction with Siri or HomePod. For developer guidance, see Remote command center events.\n\nDon’t stop playback when your app enters the background or when the device locks. For example, people expect the TV show they started streaming from your app to continue while they check their mail or put their device to sleep. In this type of scenario, it’s also crucial to avoid automatic mirroring because people don’t want to stream other content on their device without explicitly choosing to do so.\n\nDon’t interrupt another app’s playback unless your app is starting to play immersive content. For example, if your app plays a video when it launches or auto-plays inline videos, play this content on only the local device, while allowing current playback to continue. For developer guidance, see ambient.\n\nLet people use other parts of your app during playback. When AirPlay is active, your app needs to remain functional. If people navigate away from the playback screen, make sure other in-app videos don’t begin playing and interrupt the streaming content.\n\nIf necessary, provide a custom interface for controlling media playback. If you can’t use the system-provided media player, you can create a custom media player that gives people an intuitive way to enter AirPlay. If you need to do this, be sure to provide custom buttons that match the appearance and behavior of the system-provided ones, including distinct visual states that indicate when playback starts, is occurring, or is unavailable. Use only Apple-provided symbols in custom controls that initiate AirPlay, and position the AirPlay icon correctly in your custom player — that is, in the lower-right corner (in iOS 16 and iPadOS 16 and later).\n\nUsing AirPlay icons\n\nYou can download AirPlay icons in Resources. You have the following options for displaying the AirPlay icon in your app.\n\nBlack AirPlay icon\n\nUse the black AirPlay icon on white or light backgrounds when other technology icons also appear in black.\n\nWhite AirPlay icon\n\nUse the white AirPlay icon on black or dark backgrounds when other technology icons also appear in white.\n\nCustom color AirPlay icon\n\nUse a custom color when other technology icons also appear in the same color.\n\nPosition the AirPlay icon consistently with other technology icons. If you display other technology icons within shapes, you can display the AirPlay icon in the same manner.\n\nDon’t use the AirPlay icon or name in custom buttons or interactive elements. Use the icon and the name AirPlay only in noninteractive ways.\n\nPair the icon with the name AirPlay correctly. You can show the name below or beside the icon if you also reference other technologies in this way. Use the same font you use in the rest of your layout. Avoid using the AirPlay icon within text or as a replacement for the name AirPlay.\n\nEmphasize your app over AirPlay. Make references to AirPlay less prominent than your app name or main identity.\n\nReferring to AirPlay\n\nUse correct capitalization when using the term AirPlay. AirPlay is one word, with an uppercase A and uppercase P, each followed by lowercase letters. If your layout displays only all-uppercase designations, you can typeset AirPlay in all uppercase to match the style of the rest of the layout.\n\nAlways use AirPlay as a noun.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nUse AirPlay to listen on your speaker\n\n\n\n\n\t\n\nAirPlay to your speaker\n\n\n\n\n\t\n\nYou can AirPlay with [App Name]\n\nUse terms like works with, use, supports, and compatible.\n\n\t\n\nExample text\n\n\n\n\n\t\n\n[App Name] is compatible with AirPlay\n\n\n\n\n\t\n\nAirPlay-enabled speaker\n\n\n\n\n\t\n\nYou can use AirPlay with [App Name]\n\n\n\n\n\t\n\n[App Name] has AirPlay\n\nUse the name Apple with the name AirPlay if desired.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nCompatible with Apple AirPlay\n\nRefer to AirPlay if appropriate and to add clarity. If your content is specific to AirPlay, you can use Airplay to make that clear. You can also refer to AirPlay in technical specifications.\n\n\t\n\nExample text\n\n\n\n\n\t\n\n[App Name] now supports AirPlay\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or visionOS. Not supported in watchOS.\n\nResources\nRelated\n\nApple Design Resources\n\nApple Trademark List\n\nGuidelines for Using Apple Trademarks and Copyrights\n\nDeveloper documentation\n\nAVFoundation\n\nAVKit\n\nVideos\nReaching the Big Screen with AirPlay 2\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "Immersive experiences",
    "url": "https://developer.apple.com/design/human-interface-guidelines/immersive-experiences",
    "html": "Immersive experiences\nIn visionOS, you can design apps and games that extend beyond windows and volumes, and let people immerse themselves in your content.\n\nPeople can run visionOS apps and games in the Shared Space or in a Full Space. In the Shared Space, people can switch between multiple running apps much as they do on a Mac; in a Full Space, people can immerse themselves in one app’s content while hiding other apps. Apps can support a spectrum of immersion, transitioning fluidly between the Shared Space and a Full Space as people choose.\n\nPlay\nImmersion and passthrough\n\nWhile wearing Apple Vision Pro, people use passthrough to see their physical surroundings. Passthrough provides real-time video from the device’s external cameras, helping people feel comfortable and connected to their physical context.\n\nPeople can also use the Digital Crown to help them manage app content and adjust passthrough. For example, people can press and hold the Digital Crown to recenter content in their field of view or double-click it to briefly hide all app content and increase passthrough for a clear view of their surroundings.\n\nPlay\n\nImportant\n\nYour app doesn’t receive direct information about the current level of passthrough or when it changes, which means that you don’t know how well a person can see their surroundings.\n\nIn addition to responding to the Digital Crown, the system also helps people remain comfortable by automatically changing the opacity of content in certain situations. For example, if someone moves too quickly or gets too close to a physical object, the app content in front of them dims briefly so they can see their physical surroundings more clearly. In more immersive contexts — such as in the progressive and full styles described below — the system defines a boundary that extends about 1.5 meters from the initial position of the wearer’s head. As a person’s head gets close to this boundary, the experience begins to fade and passthrough increases. The experience stops if a person’s head moves beyond the boundary, and restarts when they return to their original location or recenter their view.\n\nvisionOS offers several ways to immerse people in your content. For example, you can:\n\nBring attention to your content while in the Shared Space. You can ask the system to subtly dim passthrough and other visible content to minimize distractions and highlight a specific window or volume, without hiding other apps. For developer guidance, see SurroundingsEffect.\n\nDisplay 3D content in a Full Space. When your app transitions to a Full Space, you can display 3D content that isn’t bound by a window, in addition to content in standard windows and volumes. For developer guidance, see automatic.\n\nMix your content with someone’s surroundings. When running in a Full Space, your app can request access to information about nearby physical objects and room layout, helping you display virtual content in the context of people’s surroundings. Although the mixed immersion style doesn’t define a boundary, the system automatically makes all app content semi-opaque to help people remain aware of their surroundings if they move around. For developer guidance, see mixed and ARKit.\n\nOffer progressive immersion. When your app runs in a Full Space, you can use the progressive style to display a 180-to-360 degree custom environment that appears with your app’s windows and volumes. When your app starts, people get a roughly 180-degree view of your immersive experience, and they can use the Digital Crown to adjust their level of immersion. The system defines the approximately 1.5-meter boundary when an experience using progressive style starts. For developer guidance, see progressive.\n\nCreate a fully immersive experience. An app running in a Full Space can use the full style to supply a 360-degree custom environment that can completely replace passthrough and transport people to a new place. As with the progressive style, the system defines the approximately 1.5-meter boundary when a fully immersive experience starts. For developer guidance, see full.\n\nBest practices\n\nOffer multiple ways to use your app. In addition to giving people the freedom to choose their experiences, it’s essential to design your app to support the accessibility features people use to personalize the ways they interact with their devices. For guidance, see Accessibility.\n\nPrefer launching your app or game in the Shared Space. People appreciate being able to choose when to increase the immersiveness of an experience.\n\nReserve immersion for meaningful moments and content. Not every task benefits from immersion, and not every immersive task needs to be fully immersive. Although people sometimes want to enter a different world, they often want to stay grounded in their surroundings while they’re using your app, and they can appreciate being able to use other apps and system features at the same time. Instead of assuming that your app needs to be fully immersive most of the time, design ways for people to immerse themselves in the individual tasks and content that make your app unique. For example, people can browse their albums in Photos using a familiar app window in the Shared Space, but when they want to examine a single photo, they can temporarily transition to a more immersive experience in a Full Space where they can expand the photo and appreciate its details.\n\nHelp people engage with key moments in your app, regardless of the level of immersion. Cues like dimming, motion, scale, and Spatial Audio can help draw people’s attention to a specific area of content, whether it’s in a window in the Shared Space or in a completely immersive experience in a Full Space. Start with subtle cues that gently guide people’s attention, strengthening the cues only if it makes sense in your app.\n\nAvoid encouraging people to move while they’re in an immersive experience. For example, let people bring a virtual object closer to them instead of expecting them to move close to the object.\n\nChoose a style of immersion that supports the movements people might make while they’re in your app or game. It’s essential to choose the right style for your immersive experience because it allows the system to respond appropriately if people move in unexpected ways. Although people can make minor physical movements while in an immersive experience — such as shifting their weight, turning around, or switching between sitting and standing — making additional movements can cause the system to interrupt some experiences. In particular, avoid using the progressive or full immersion styles if you think people might make additional movements.\n\nIn an app that uses the mixed immersion style, avoid obscuring passthrough too much. People use passthrough to help them understand and navigate their physical surroundings, so it’s important to avoid displaying virtual objects that block too much of their view. If your app displays virtual objects that could substantially obscure passthrough, use the full or progressive immersion styles instead of mixed.\n\nDesign smooth, predictable transitions between experiences. Help people prepare for different experiences by providing gentle transitions that let people visually track changes. Avoid sudden, jarring transitions that might be disorienting or uncomfortable.\n\nLet people choose when to enter a more immersive experience. You don’t want to put people into a more immersive experience when they’re not expecting it, and you don’t want to overwhelm them by suddenly displaying large windows or objects. Instead, provide a clear entry control so people can decide when to be more immersed in your content.\n\nLet people choose when to exit an immersive experience. For example, Keynote provides a prominent Exit button to help people leave the Theater experience and return to the slide-viewing window. Make sure your button clarifies whether it returns people to a previous, less immersive context or quits an experience like a game. If exiting your immersive experience also quits your app, consider providing controls that let people pause or return to a place where they can save their progress before quitting. In particular, avoid making the close button in Control Center or pressing the Digital Crown the only ways people can leave your immersive experience.\n\nBe mindful of people’s visual comfort. For example, although you can place 3D content anywhere while your app is running in a Full Space, prefer placing it within people’s field of view. Also make sure you display motion in comfortable ways while your app runs in a Full Space because people may not have the same frame of reference they’re used to. For guidance, see Motion.\n\nAdopt ARKit if you want to blend app content with someone’s surroundings. For example, you might want to integrate virtual content into someone’s surroundings or use the wearer’s hand positions to inform your experience. If you need access to these types of sensitive data, you must request people’s permission. For guidance, see Privacy; for developer guidance, see SceneReconstructionProvider.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, tvOS, or watchOS.\n\nResources\nRelated\n\nSpatial layout\n\nMotion\n\nDeveloper documentation\n\nCreating fully immersive experiences in your app — visionOS\n\nIncorporating real-world surroundings in an immersive experience — visionOS\n\nImmersionStyle — visionOS\n\nImmersive spaces — SwiftUI\n\nVideos\nPrinciples of spatial design\nExplore immersive sound design\nDesign spatial SharePlay experiences\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nClarified guidance for choosing an immersion style that matches the experience your app provides.\n\n\n\n\nOctober 24, 2023\n\n\t\n\nUpdated artwork.\n\n\n\n\nJune 21, 2023\n\n\t\n\nNew page."
  },
  {
    "title": "Feedback",
    "url": "https://developer.apple.com/design/human-interface-guidelines/feedback",
    "html": "Feedback\nFeedback helps people know what’s happening, discover what they can do next, understand the results of actions, and avoid mistakes.\n\nProviding clear, consistent feedback as people interact with your app or game can make it feel intuitive and encourage deeper exploration. Feedback can communicate several different things, such as:\n\nThe current status of something\n\nThe success or failure of an important task or action\n\nA warning about an action that can have negative consequences\n\nAn opportunity to correct a mistake or problematic situation\n\nThe most effective feedback tends to match the significance of the information to the way it’s delivered. For example, it often works well to display status information in a passive way so that people can view it when they need it. In contrast, a warning about possible data loss needs to interrupt people so they have a chance to avoid the problem.\n\nBest practices\n\nMake sure all feedback is accessible. When you use multiple ways to provide feedback, you reach more people and give them the opportunity to receive the feedback in ways that work for them. For example, when you provide feedback using color, text, sound, and haptics, people can receive it whether they silence their device, look away from the screen, or use VoiceOver. (For guidance on providing haptic feedback, see Playing haptics.)\n\nConsider integrating status feedback into your interface. When status feedback is available near the items it describes, people get important information without having to take action or leave their current context. For example, Mail in iOS and iPadOS describes the most recent update and displays the number of unread messages in the toolbar of the mailbox screen, making the information unobtrusive but easy for people to check when they’re interested.\n\nUse alerts to deliver critical — and ideally actionable — information. By design, alerts disrupt the current context, so you need to match the importance of the information to the level of interruption. Alerts can lose their impact if you use them too often or to deliver unimportant information. For guidance, see Alerts.\n\nWarn people when they initiate a task that can cause data loss that’s unexpected and irreversible. In contrast, don’t warn people when data loss is the expected result of their action. For example, the Finder doesn’t warn people every time they throw away a file because deleting the file is the expected result.\n\nWhen it makes sense, confirm that a significant action or task has completed. For example, people appreciate getting feedback that confirms a successful Apple Pay transaction. It’s generally best to reserve this type of confirmation for activities that are sufficiently important — because people typically expect their action or task to succeed, they only need to know when it doesn’t.\n\nShow people when a command can’t be carried out and help them understand why. For example, if people request directions without specifying a destination, Maps tells them that it can’t provide directions to and from the same location.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or visionOS.\n\nwatchOS\n\nAvoid displaying an indeterminate progress indicator — such as a loading indicator — in a watchOS app. An animated indicator can make people think they need to continue paying attention to the display, which isn’t a good user experience. To provide a better experience, reassure people that they’ll receive a notification when the process completes.\n\nResources\nRelated\n\nPlaying audio\n\nPlaying haptics\n\nMotion\n\nDeveloper documentation\n\nAnimation and haptics — UIKit\n\nVideos\nDesigning Fluid Interfaces\nEssential Design Principles"
  },
  {
    "title": "Settings",
    "url": "https://developer.apple.com/design/human-interface-guidelines/settings",
    "html": "Settings\nPeople expect apps and games to just work, but they also appreciate having ways to customize the experience to fit their needs.\n\nWhen it makes sense, you can offer context-specific settings within your app or game so people don’t have to leave their current task to make adjustments. If you also offer settings that affect the overall app or game, you can provide a custom settings area. In visionOS, iOS, iPadOS, macOS, and tvOS, the system provides a Settings app that can include some app-specific options.\n\nBest practices\n\nAs much as possible, let people modify task-specific options without going to a settings area. For example, if your app lets people adjust things like showing or hiding parts of the interface, reordering a collection of items, or filtering a list, make these options available in the screens they affect, where they’re discoverable and convenient. Putting this type of option in a separate settings area disconnects it from its context, requiring people to suspend their task to make adjustments, and often hiding the results until people resume the task.\n\nWhen necessary, put app-level options in a separate settings area. People don’t tend to visit an app’s settings area very often, so it’s important to include only rarely-changed options that affect the experience as a whole, such as overall interface style or alternative app icons.\n\nMinimize the number of settings you offer. Although people appreciate having control over an app, they also appreciate being able to benefit from the experience without first doing a lot of setup. Too many settings can make an app feel less approachable, while also making it hard to find a particular setting.\n\nRespect people’s systemwide settings and avoid including redundant versions of them in your app-specific settings area. People expect to use the system-provided settings apps to manage global options like accessibility accommodations, scrolling behavior, and authentication methods, and they expect all apps to adhere to their choices. Offering app-specific settings that include custom versions of global options is inconsistent and confusing in at least two ways: First, it implies that systemwide settings may not apply to the current app and second, that changing one of the app’s custom settings can affect other apps too.\n\nAvoid using in-app settings to ask for setup information you can get in other ways. For example, instead of asking someone to enter a zip code so you can present local options, ask permission to use their current location. For guidance, see Privacy.\n\nAdd only the most rarely changed options to the system-provided settings apps. On each platform, the system includes an app that lets people adjust things like the overall appearance of the system, network connections, account details, accessibility requirements, and language and region settings. Although both the Settings app (in iOS, iPadOS, tvOS, and visionOS) and the System Settings app (in macOS) can also contain app-specific settings, people must switch away from their current context to adjust those settings. If you must offer app-specific settings in the system settings apps, consider providing a button that opens them directly from your app.\n\nMake your in-app settings easy to find, but not too prominent. For example, consider making settings available within a profile or account view. In a watchOS app, you could make a very small number of essential options available at the bottom of the main view.\n\nIn macOS and iPadOS apps, make settings available in ways people expect. For example, people appreciate being able to use the standard Command-Comma (,) keyboard shortcut to open app-level settings. In an app that runs on a Mac, include an app-level settings item in the App menu and, if you provide document-level options, add this item to the File menu. Avoid adding settings buttons to a macOS app’s toolbar, because doing so decreases the space available for essential commands that people use frequently.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, tvOS, or visionOS.\n\nmacOS\n\nAn app-specific window opens when people choose the Settings item in the App menu. Typically, an app-specific settings window contains a toolbar that includes buttons for switching between views — called panes — that each contain a group of related settings.\n\nDim a settings window’s minimize and maximize buttons. It’s quick to open a settings window using the standard Command–Comma (,) keyboard shortcut, so there’s no need to keep the window in the Dock, and because a settings window accommodates the size of the current pane, people don’t need to expand the window to see more.\n\nProvide a noncustomizable toolbar that remains visible and always indicates the active toolbar button. A settings window’s toolbar identifies the areas people can customize and helps people navigate among those areas. People rely on a stable settings interface to help them find what they need.\n\nUpdate the window’s title to reflect the currently visible pane. If your settings window doesn’t have multiple panes, use the title App Name Settings.\n\nRestore the most recently viewed pane. People often adjust related settings more than once, so it can be convenient when a settings window opens to the last pane people used.\n\nwatchOS\n\nAvoid supplying app-specific settings to include in the watchOS Settings app.\n\nResources\nRelated\n\nOnboarding\n\nDeveloper documentation\n\nSettings — SwiftUI\n\nUserDefaults — Foundation\n\nPreference Panes"
  },
  {
    "title": "Text fields",
    "url": "https://developer.apple.com/design/human-interface-guidelines/text-fields",
    "html": "Text fields\nA text field is a rectangular area in which people enter or edit small, specific pieces of text.\n\nBest practices\n\nUse a text field to request a small amount of information, such as a name or an email address. To let people input larger amounts of text, use a text view instead.\n\nShow a hint in a text field to help communicate its purpose. A text field can contain placeholder text — such as “Email” or “Password” — when there’s no other text in the field. Because placeholder text disappears when people start typing, it can also be useful to include a separate label describing the field to remind people of its purpose.\n\nUse secure text fields to hide private data. Always use a secure text field when your app asks for sensitive data, such as a password. For developer guidance, see SecureField.\n\nTo the extent possible, match the size of a text field to the quantity of anticipated text. The size of a text field helps people visually gauge the amount of information to provide.\n\nEvenly space multiple text fields. If your layout includes multiple text fields, leave enough space between them so people can easily see which input field belongs with each introductory label. Stack multiple text fields vertically when possible, and use consistent widths to create a more organized layout. For example, the first and last name fields on an address form might be one width, while the address and city fields might be a different width.\n\nEnsure that tabbing between multiple fields flows as people expect. When tabbing between fields, move focus in a logical sequence. The system attempts to achieve this result automatically, so you won’t need to customize this too often.\n\nValidate fields when it makes sense. For example, if the only legitimate value for a field is a string of digits, your app needs to alert people if they’ve entered characters other than digits. The appropriate time to check the data depends on the context: when entering an email address, it’s best to validate when people switch to another field; when creating a user name or password, validation needs to happen before people switch to another field.\n\nUse a number formatter to help with numeric data. A number formatter automatically configures the text field to accept only numeric values. It can also display the value in a specific way, such as with a certain number of decimal places, as a percentage, or as currency. Don’t assume the actual presentation of data, however, as formatting can vary significantly based on people’s locale.\n\nFormatted text\n\nAdjust line breaks according to the needs of the field. By default, the system clips any text extending beyond the bounds of a text field. Alternatively, you can set up a text field to wrap text to a new line at the character or word level, or to truncate (indicated by an ellipsis) at the beginning, middle, or end.\n\nClipped text\n\nWrapped text\n\nTruncated text\n\nConsider using an expansion tooltip to show the full version of clipped or truncated text. An expansion tooltip behaves like a regular tooltip and appears when someone places the pointer over the field.\n\nIn iOS, iPadOS, tvOS, and visionOS apps, show the appropriate keyboard type. Several different keyboard types are available, each designed to facilitate a different type of input, such as numbers or URLs. To streamline data entry, display the keyboard that’s appropriate for the type of content people are entering. For guidance, see Virtual keyboards.\n\nMinimize text entry in your tvOS and watchOS apps. Entering long passages of text or filling out numerous text fields is time-consuming on Apple TV and Apple Watch. Minimize text input and consider gathering information more efficiently, such as with buttons.\n\nPlatform considerations\n\nNo additional considerations for tvOS or visionOS.\n\niOS, iPadOS\n\nDisplay a Clear button in the trailing end of a text field to help people erase their input. When this element is present, people can tap it to clear the text field’s contents, without having to keep tapping the Delete key.\n\nUse images and buttons to provide clarity and functionality in text fields. You can display custom images in both ends of a text field, or you can add a system-provided button, such as the Bookmarks button. In general, use the leading end of a text field to indicate a field’s purpose and the trailing end to offer additional features, such as bookmarking.\n\nmacOS\n\nConsider using a combo box if you need to pair text input with a list of choices. For related guidance, see Combo boxes.\n\nwatchOS\n\nPresent a text field only when necessary. Whenever possible, prefer displaying a list of options rather than requiring text entry.\n\nResources\nRelated\n\nText views\n\nCombo boxes\n\nEntering data\n\nDeveloper documentation\n\nTextField — SwiftUI\n\nSecureField — SwiftUI\n\nUITextField — UIKit\n\nNSTextField — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance to reflect changes in watchOS 10."
  },
  {
    "title": "Ornaments",
    "url": "https://developer.apple.com/design/human-interface-guidelines/ornaments",
    "html": "Ornaments\nIn visionOS, an ornament presents controls and information related to a window, without crowding or obscuring the window’s contents.\n\nAn ornament floats in a plane that’s parallel to its associated window and slightly in front of it along the z-axis. If the associated window moves, the ornament moves with it, maintaining its relative position; if the window’s contents scroll, the controls or information in the ornament remain unchanged.\n\nOrnaments can appear on any edge of a window and can contain UI components like buttons, segmented controls, and other views. The system uses ornaments to create and manage components like toolbars, tab bars, and video playback controls; you can use an ornament to create a custom component.\n\nBest practices\n\nConsider using an ornament to present frequently needed controls or information in a consistent location that doesn’t clutter the window. Because an ornament stays close to its window, people always know where to find it. For example, Music uses an ornament to offer Now Playing controls, ensuring that these controls remain in a predictable location that’s easy to find.\n\nIn general, keep an ornament visible. It can make sense to hide an ornament when people dive into a window’s content — for example, when they watch a video or view a photo — but in most cases, people appreciate having consistent access to an ornament’s controls.\n\nIf you need to display multiple ornaments, prioritize the overall visual balance of the window. Ornaments help elevate important actions, but they can sometimes distract from your content. When necessary, consider constraining the total number of ornaments to avoid increasing a window’s visual weight and making your app feel more complicated. If you decide to remove an ornament, you can relocate its elements into the main window.\n\nAim to keep an ornament’s width the same or narrower than the width of the associated window. If an ornament is wider than its window, it can interfere with a tab bar or other vertical content on the window’s side.\n\nConsider using borderless buttons in an ornament. By default, an ornament’s background is glass, so if you place a button directly on the background, it may not need a visible border. When people look at a borderless button in an ornament, the system automatically applies the hover affect to it (for guidance, see Eyes).\n\nUse system-provided toolbars and tab bars unless you need to create custom components. In visionOS, toolbars and tab bars automatically appear as ornaments, so you don’t need to use an ornament to create these components. For developer guidance, see Toolbars and TabView.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, tvOS, or watchOS.\n\nResources\nRelated\n\nLayout\n\nDeveloper documentation\n\nornament(visibility:attachmentAnchor:contentAlignment:ornament:) — SwiftUI\n\nVideos\nDesign for spatial user interfaces\nPrinciples of spatial design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nAdded guidance on using multiple ornaments.\n\n\n\n\nDecember 5, 2023\n\n\t\n\nRemoved a statement about using ornaments to present supplementary items.\n\n\n\n\nJune 21, 2023\n\n\t\n\nNew page."
  },
  {
    "title": "Color",
    "url": "https://developer.apple.com/design/human-interface-guidelines/color",
    "html": "Color\nJudicious use of color can enhance communication, evoke your brand, provide visual continuity, communicate status and feedback, and help people understand information.\n\nThe system defines colors that look good on various backgrounds and appearance modes, and can automatically adapt to vibrancy and accessibility settings. People are familiar with the system colors, and using them is a convenient way to make your experience feel at home on the device.\n\nYou may also want to use custom colors to enhance the visual experience of your app or game and express its unique personality. The following guidelines can help you use color in ways that people appreciate, regardless of whether you use system-defined or custom colors.\n\nBest practices\n\nUse color sparingly in nongame apps. In a nongame app, overuse of color can make communication less clear and can distract people. Prefer using touches of color to call attention to important information or show the relationship between parts of the interface.\n\nAvoid using the same color to mean different things. Use color consistently throughout your interface, especially when you use it to help communicate information like status or interactivity. For example, an app might use blue to indicate that people can tap text to view more. Even when the app communicates interactivity using a visual indicator that doesn’t rely on color — such as a chevron or arrow icon — using a color other than blue for the interactive text is confusing.\n\nMake sure your app’s colors work well in both light and dark contexts. Most platforms offer a dark alternative to the default light appearance called Dark Mode. Dark Mode uses a darker color palette for all screens, views, menus, and controls, and can increase vibrancy — a subtle effect that dynamically blends foreground and background colors — to make foreground content stand out against darker backgrounds (for guidance, see Materials). Dark mode isn’t available in visionOS or watchOS. visionOS uses a material called glass that automatically adapts to the luminance of the surrounding objects and colors. In watchOS, apps typically use a dark background, but can also use full-screen background gradients or graphics to support foreground content in the view. In all platforms, system colors automatically support light and dark contexts as needed; if you use a custom color, you need to supply both variants.\n\nTest your app’s color scheme under a variety of lighting conditions. For example, colors can look different when you run your app outside on a sunny day or in dim light. In visionOS, colors can look different depending on the colors of a wall or object in a person’s physical surroundings and how it reflects light. Adjust app colors to provide an optimal viewing experience in the majority of use cases.\n\nTest your app on different devices. For example, the True Tone display — available on certain iPhone, iPad, and Mac models — uses ambient light sensors to automatically adjust the white point of the display to adapt to the lighting conditions of the current environment. Apps that primarily support reading, photos, video, and gaming can strengthen or weaken this effect by specifying a white point adaptivity style (for developer guidance, see UIWhitePointAdaptivityStyle). Test tvOS apps on multiple brands of HD and 4K TVs, and with different display settings. You can also test the appearance of your app using different color profiles on a Mac — such as P3 and Standard RGB (sRGB) — by choosing a profile in System Settings > Displays. For guidance, see Color management.\n\nConsider how artwork and translucency affect nearby colors. Variations in artwork sometimes warrant changes to nearby colors to maintain visual continuity and prevent interface elements from becoming overpowering or underwhelming. Maps, for example, displays a light color scheme when in map mode but switches to a dark color scheme when in satellite mode. Colors can also appear different when placed behind or applied to a translucent element like a toolbar.\n\nIf your app lets people choose colors, prefer system-provided color controls where available. Using built-in color pickers provides a consistent user experience, in addition to letting people save a set of colors they can access from any app. For developer guidance, see ColorPicker.\n\nInclusive color\n\nAvoid relying solely on color to differentiate between objects, indicate interactivity, or communicate essential information. When you use color to convey information, be sure to provide the same information in alternative ways so people with color blindness or other visual disabilities can understand it. For example, you can use labels or glyph shapes to identify objects or states.\n\nAvoid using colors that make it hard to perceive content in your app. For example, insufficient contrast can cause icons and text to blend with the background and make content hard to read, and people who are color blind might not be able to distinguish some color combinations. For guidance, see Color and effects.\n\nConsider how the colors you use might be perceived in other countries and cultures. For example, red communicates danger in some cultures, but has positive connotations in other cultures. Make sure the colors in your app send the message you intend.\n\nSystem colors\n\nAvoid hard-coding system color values in your app. Documented color values are for your reference during the app design process. The actual color values may fluctuate from release to release, based on a variety of environmental variables. Use APIs like Color to apply system colors.\n\niOS, iPadOS, macOS, and visionOS also define sets of dynamic system colors that match the color schemes of standard UI components and automatically adapt to both light and dark contexts. Each dynamic color is semantically defined by its purpose, rather than its appearance or color values. For example, some colors represent view backgrounds at different levels of hierarchy and other colors represent foreground content, such as labels, links, and separators.\n\nAvoid replicating dynamic system colors. Dynamic system colors — some of which can be patterns — may fluctuate from release to release, based on a variety of environmental variables.\n\nAvoid redefining the semantic meanings of dynamic system colors. To ensure a consistent experience and ensure your interface looks great when the appearance of the platform changes, use dynamic system colors as intended.\n\nColor management\n\nA color space represents the colors in a color model like RGB or CMYK. Common color spaces — sometimes called gamuts — are sRGB and Display P3.\n\nA color profile describes the colors in a color space using, for example, mathematical formulas or tables of data that map colors to numerical representations. An image embeds its color profile so that a device can interpret the image’s colors correctly and reproduce them on a display.\n\nApply color profiles to your images. Color profiles help ensure that your app’s colors appear as intended on different displays. The sRGB color space produces accurate colors on most displays.\n\nUse wide color to enhance the visual experience on compatible displays. Wide color displays support a P3 color space, which can produce richer, more saturated colors than sRGB. As a result, photos and videos that use wide color are more lifelike, and visual data and status indicators that use wide color can be more meaningful. When appropriate, use the Display P3 color profile at 16 bits per pixel (per channel) and export images in PNG format. Note that you need to use a wide color display to design wide color images and select P3 colors.\n\nProvide color space–specific image and color variations if necessary. In general, P3 colors and images appear fine on sRGB displays. Occasionally, it may be hard to distinguish two very similar P3 colors when viewing them on an sRGB display. Gradients that use P3 colors can also sometimes appear clipped on sRGB displays. To avoid these issues and to ensure visual fidelity on both wide color and sRGB displays, you can use the asset catalog of your Xcode project to provide different versions of images and colors for each color space.\n\nTo learn more, see How to start designing assets in Display P3.\n\nPlatform considerations\niOS, iPadOS\n\niOS defines two sets of dynamic background colors — system and grouped — each of which contains primary, secondary, and tertiary variants that help you convey a hierarchy of information. In general, use the grouped background colors (systemGroupedBackground, secondarySystemGroupedBackground, and tertiarySystemGroupedBackground) when you have a grouped table view; otherwise, use the system set of background colors (systemBackground, secondarySystemBackground, and tertiarySystemBackground).\n\nWith both sets of background colors, you generally use the variants to indicate hierarchy in the following ways:\n\nPrimary for the overall view\n\nSecondary for grouping content or elements within the overall view\n\nTertiary for grouping content or elements within secondary elements\n\nFor foreground content, iOS defines the following dynamic colors:\n\nColor\n\n\t\n\nUse for…\n\n\t\n\nUIKit API\n\n\n\n\nLabel\n\n\t\n\nA text label that contains primary content.\n\n\t\n\nlabel\n\n\n\n\nSecondary label\n\n\t\n\nA text label that contains secondary content.\n\n\t\n\nsecondaryLabel\n\n\n\n\nTertiary label\n\n\t\n\nA text label that contains tertiary content.\n\n\t\n\ntertiaryLabel\n\n\n\n\nQuaternary label\n\n\t\n\nA text label that contains quaternary content.\n\n\t\n\nquaternaryLabel\n\n\n\n\nPlaceholder text\n\n\t\n\nPlaceholder text in controls or text views.\n\n\t\n\nplaceholderText\n\n\n\n\nSeparator\n\n\t\n\nA separator that allows some underlying content to be visible.\n\n\t\n\nseparator\n\n\n\n\nOpaque separator\n\n\t\n\nA separator that doesn’t allow any underlying content to be visible.\n\n\t\n\nopaqueSeparator\n\n\n\n\nLink\n\n\t\n\nText that functions as a link.\n\n\t\n\nlink\n\nmacOS\n\nmacOS defines the following dynamic system colors (you can also view them in the Developer palette of the standard Color panel):\n\nColor\n\n\t\n\nUse for…\n\n\t\n\nAppKit API\n\n\n\n\nAlternate selected control text color\n\n\t\n\nThe text on a selected surface in a list or table.\n\n\t\n\nalternateSelectedControlTextColor\n\n\n\n\nAlternating content background colors\n\n\t\n\nThe backgrounds of alternating rows or columns in a list, table, or collection view.\n\n\t\n\nalternatingContentBackgroundColors\n\n\n\n\nControl accent\n\n\t\n\nThe accent color people select in System Settings.\n\n\t\n\ncontrolAccentColor\n\n\n\n\nControl background color\n\n\t\n\nThe background of a large interface element, such as a browser or table.\n\n\t\n\ncontrolBackgroundColor\n\n\n\n\nControl color\n\n\t\n\nThe surface of a control.\n\n\t\n\ncontrolColor\n\n\n\n\nControl text color\n\n\t\n\nThe text of a control that is available.\n\n\t\n\ncontrolTextColor\n\n\n\n\nCurrent control tint\n\n\t\n\nThe system-defined control tint.\n\n\t\n\ncurrentControlTint\n\n\n\n\nUnavailable control text color\n\n\t\n\nThe text of a control that’s unavailable.\n\n\t\n\ndisabledControlTextColor\n\n\n\n\nFind highlight color\n\n\t\n\nThe color of a find indicator.\n\n\t\n\nfindHighlightColor\n\n\n\n\nGrid color\n\n\t\n\nThe gridlines of an interface element, such as a table.\n\n\t\n\ngridColor\n\n\n\n\nHeader text color\n\n\t\n\nThe text of a header cell in a table.\n\n\t\n\nheaderTextColor\n\n\n\n\nHighlight color\n\n\t\n\nThe virtual light source onscreen.\n\n\t\n\nhighlightColor\n\n\n\n\nKeyboard focus indicator color\n\n\t\n\nThe ring that appears around the currently focused control when using the keyboard for interface navigation.\n\n\t\n\nkeyboardFocusIndicatorColor\n\n\n\n\nLabel color\n\n\t\n\nThe text of a label containing primary content.\n\n\t\n\nlabelColor\n\n\n\n\nLink color\n\n\t\n\nA link to other content.\n\n\t\n\nlinkColor\n\n\n\n\nPlaceholder text color\n\n\t\n\nA placeholder string in a control or text view.\n\n\t\n\nplaceholderTextColor\n\n\n\n\nQuaternary label color\n\n\t\n\nThe text of a label of lesser importance than a tertiary label, such as watermark text.\n\n\t\n\nquaternaryLabelColor\n\n\n\n\nScrubber textured background color\n\n\t\n\nThe background of a scrubber in the Touch Bar. For guidance, see Touch Bar.\n\n\t\n\nscrubberTexturedBackground\n\n\n\n\nSecondary label color\n\n\t\n\nThe text of a label of lesser importance than a primary label, such as a label used to represent a subheading or additional information.\n\n\t\n\nsecondaryLabelColor\n\n\n\n\nSelected content background color\n\n\t\n\nThe background for selected content in a key window or view.\n\n\t\n\nselectedContentBackgroundColor\n\n\n\n\nSelected control color\n\n\t\n\nThe surface of a selected control.\n\n\t\n\nselectedControlColor\n\n\n\n\nSelected control text color\n\n\t\n\nThe text of a selected control.\n\n\t\n\nselectedControlTextColor\n\n\n\n\nSelected menu item text color\n\n\t\n\nThe text of a selected menu.\n\n\t\n\nselectedMenuItemTextColor\n\n\n\n\nSelected text background color\n\n\t\n\nThe background of selected text.\n\n\t\n\nselectedTextBackgroundColor\n\n\n\n\nSelected text color\n\n\t\n\nThe color for selected text.\n\n\t\n\nselectedTextColor\n\n\n\n\nSeparator color\n\n\t\n\nA separator between different sections of content.\n\n\t\n\nseparatorColor\n\n\n\n\nShadow color\n\n\t\n\nThe virtual shadow cast by a raised object onscreen.\n\n\t\n\nshadowColor\n\n\n\n\nTertiary label color\n\n\t\n\nThe text of a label of lesser importance than a secondary label.\n\n\t\n\ntertiaryLabelColor\n\n\n\n\nText background color\n\n\t\n\nThe background color behind text.\n\n\t\n\ntextBackgroundColor\n\n\n\n\nText color\n\n\t\n\nThe text in a document.\n\n\t\n\ntextColor\n\n\n\n\nUnder page background color\n\n\t\n\nThe background behind a document’s content.\n\n\t\n\nunderPageBackgroundColor\n\n\n\n\nUnemphasized selected content background color\n\n\t\n\nThe selected content in a non-key window or view.\n\n\t\n\nunemphasizedSelectedContentBackgroundColor\n\n\n\n\nUnemphasized selected text background color\n\n\t\n\nA background for selected text in a non-key window or view.\n\n\t\n\nunemphasizedSelectedTextBackgroundColor\n\n\n\n\nUnemphasized selected text color\n\n\t\n\nSelected text in a non-key window or view.\n\n\t\n\nunemphasizedSelectedTextColor\n\n\n\n\nWindow background color\n\n\t\n\nThe background of a window.\n\n\t\n\nwindowBackgroundColor\n\n\n\n\nWindow frame text color\n\n\t\n\nThe text in the window’s title bar area.\n\n\t\n\nwindowFrameTextColor\n\nApp accent colors\n\nBeginning in macOS 11, you can specify an accent color to customize the appearance of your app’s buttons, selection highlighting, and sidebar icons. The system applies your accent color when the current value in General > Accent color settings is multicolor.\n\nIf people set their accent color setting to a value other than multicolor, the system applies their chosen color to the relevant items throughout your app, replacing your accent color. The exception is a sidebar icon that uses a fixed color you specify. Because a fixed-color sidebar icon uses a specific color to provide meaning, the system doesn’t override its color when people change the value of accent color settings. For guidance, see Sidebars.\n\nThe iCloud icon remains blue, even when the other glyphs use orange.\n\ntvOS\n\nConsider choosing a limited color palette that coordinates with your app logo. Subtle use of color can help you communicate your brand while deferring to the content.\n\nAvoid using only color to indicate focus. Subtle scaling and responsive animation are the primary ways to denote interactivity when an element is in focus.\n\nvisionOS\n\nUse color sparingly, especially on glass. Standard visionOS windows typically use the system-defined glass material, which lets light and objects from people’s physical surroundings and their space show through. Because the colors in these physical and virtual objects are visible through the glass, they can affect the legibility of colorful app content in the window. Prefer using color in places where it can help call attention to important information or show the relationship between parts of the interface.\n\nPrefer using color in bold text and large areas. Color in lightweight text or small areas can make them harder to see and understand.\n\nIn a fully immersive experience, help people maintain visual comfort by keeping brightness levels balanced. Although using high contrast can help direct people’s attention to important content, it can also cause visual discomfort if people’s eyes have adjusted to low light or darkness. Consider making content fully bright only when the rest of the visual context is also bright. For example, avoid displaying a bright object on a very dark or black background, especially if the object flashes or moves.\n\nwatchOS\n\nUse background color to support existing content or supply additional information. Background color can establish a sense of place and help people recognize key content. For example, in Activity, each infographic view for the Move, Exercise, and Stand Activity rings has a background that matches the color of the ring. Use background color when you have something to communicate, rather than as a solely visual flourish. Avoid using full-screen background color in views that are likely to remain onscreen for long periods of time, such as in a workout or audio-playing app.\n\nRecognize that people might prefer graphic complications to use tinted mode instead of full color. The system can use a single color that’s based on the wearer’s selected color in a graphic complication’s images, gauges, and text. For guidance, see Complications.\n\nSpecifications\niOS, iPadOS system colors\n\nName\n\n\t\n\nSwiftUI API\n\n\t\n\nDefault (Light)\n\n\t\n\nDefault (Dark)\n\n\t\n\nAccessible (Light)\n\n\t\n\nAccessible (Dark)\n\n\n\n\nRed\n\n\t\n\nred\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nOrange\n\n\t\n\norange\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nYellow\n\n\t\n\nyellow\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGreen\n\n\t\n\ngreen\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nMint\n\n\t\n\nmint\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nTeal\n\n\t\n\nteal\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nCyan\n\n\t\n\ncyan\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nBlue\n\n\t\n\nblue\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nIndigo\n\n\t\n\nindigo\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nPurple\n\n\t\n\npurple\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nPink\n\n\t\n\npink\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nBrown\n\n\t\n\nbrown\n\n\t\n\n\t\n\n\t\n\n\t\n\niOS, iPadOS system gray colors\n\nName\n\n\t\n\nUIKit API\n\n\t\n\nDefault (Light)\n\n\t\n\nDefault (Dark)\n\n\t\n\nAccessible (Light)\n\n\t\n\nAccessible (Dark)\n\n\n\n\nGray\n\n\t\n\nsystemGray\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGray (2)\n\n\t\n\nsystemGray2\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGray (3)\n\n\t\n\nsystemGray3\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGray (4)\n\n\t\n\nsystemGray4\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGray (5)\n\n\t\n\nsystemGray5\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGray (6)\n\n\t\n\nsystemGray6\n\n\t\n\n\t\n\n\t\n\n\t\n\nIn SwiftUI, the equivalent of systemGray is gray.\n\nmacOS system colors\nDefault\nVibrant\n\nName\n\n\t\n\nSwiftUI API\n\n\t\n\nDefault (Light)\n\n\t\n\nDefault (Dark)\n\n\t\n\nAccessible (Light)\n\n\t\n\nAccessible (Dark)\n\n\n\n\nRed\n\n\t\n\nred\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nOrange\n\n\t\n\norange\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nYellow\n\n\t\n\nyellow\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGreen\n\n\t\n\ngreen\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nMint\n\n\t\n\nmint\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nTeal\n\n\t\n\nteal\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nCyan\n\n\t\n\ncyan\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nBlue\n\n\t\n\nblue\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nIndigo\n\n\t\n\nindigo\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nPurple\n\n\t\n\npurple\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nPink\n\n\t\n\npink\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nBrown\n\n\t\n\nbrown\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGray\n\n\t\n\ngray\n\n\t\n\n\t\n\n\t\n\n\t\n\ntvOS system colors\n\nName\n\n\t\n\nSwiftUI API\n\n\t\n\nDefault (Light)\n\n\t\n\nDefault (Dark)\n\n\t\n\nAccessible (Light)\n\n\t\n\nAccessible (Dark)\n\n\n\n\nRed\n\n\t\n\nred\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nOrange\n\n\t\n\norange\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nYellow\n\n\t\n\nyellow\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGreen\n\n\t\n\ngreen\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nMint\n\n\t\n\nmint\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nTeal\n\n\t\n\nteal\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nCyan\n\n\t\n\ncyan\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nBlue\n\n\t\n\nblue\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nIndigo\n\n\t\n\nindigo\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nPurple\n\n\t\n\npurple\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nPink\n\n\t\n\npink\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nBrown\n\n\t\n\nbrown\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGray\n\n\t\n\ngray\n\n\t\n\n\t\n\n\t\n\n\t\n\nvisionOS system colors\n\nName\n\n\t\n\nSwiftUI API\n\n\t\n\nDefault\n\n\n\n\nRed\n\n\t\n\nred\n\n\t\n\n\n\n\nOrange\n\n\t\n\norange\n\n\t\n\n\n\n\nYellow\n\n\t\n\nyellow\n\n\t\n\n\n\n\nGreen\n\n\t\n\ngreen\n\n\t\n\n\n\n\nMint\n\n\t\n\nmint\n\n\t\n\n\n\n\nTeal\n\n\t\n\nteal\n\n\t\n\n\n\n\nCyan\n\n\t\n\ncyan\n\n\t\n\n\n\n\nBlue\n\n\t\n\nblue\n\n\t\n\n\n\n\nIndigo\n\n\t\n\nindigo\n\n\t\n\n\n\n\nPurple\n\n\t\n\npurple\n\n\t\n\n\n\n\nPink\n\n\t\n\npink\n\n\t\n\n\n\n\nBrown\n\n\t\n\nbrown\n\n\t\n\n\n\n\nGray\n\n\t\n\ngray\n\n\t\n\nwatchOS system colors\n\nName\n\n\t\n\nSwiftUI API\n\n\t\n\nDefault (Light)\n\n\t\n\nDefault (Dark)\n\n\t\n\nAccessible (Light)\n\n\t\n\nAccessible (Dark)\n\n\n\n\nRed\n\n\t\n\nred\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nOrange\n\n\t\n\norange\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nYellow\n\n\t\n\nyellow\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nGreen\n\n\t\n\ngreen\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nMint\n\n\t\n\nmint\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nTeal\n\n\t\n\nteal\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nCyan\n\n\t\n\ncyan\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nBlue\n\n\t\n\nblue\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nIndigo\n\n\t\n\nindigo\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nPurple\n\n\t\n\npurple\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nPink\n\n\t\n\npink\n\n\t\n\n\t\n\n\t\n\n\t\n\n\n\n\nBrown\n\n\t\n\nbrown\n\n\t\n\n\t\n\n\t\n\n\t\n\nResources\nRelated\n\nDark Mode\n\nAccessibility\n\nDeveloper documentation\n\nColor — SwiftUI\n\nUI element colors — UIKit\n\nColor — AppKit\n\nVideos\nWhat's New in iOS Design\nGet Started with Display P3\nImplementing Dark Mode on iOS\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nDistinguished UIKit and SwiftUI gray colors in iOS and iPadOS, and added guidance for balancing brightness levels in visionOS apps.\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nEnhanced guidance for using background color in watchOS views, and added color swatches for tvOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using background color in watchOS.\n\n\n\n\nDecember 19, 2022\n\n\t\n\nCorrected RGB values for system mint color (Dark Mode) in iOS and iPadOS."
  },
  {
    "title": "Privacy",
    "url": "https://developer.apple.com/design/human-interface-guidelines/privacy",
    "html": "Privacy\nPrivacy is paramount: it’s critical to be transparent about the privacy-related data and resources you require and essential to protect the data people allow you to access.\n\nPeople use their devices in very personal ways and they expect apps to help them preserve their privacy.\n\nWhen you submit a new or updated app, you must provide details about your privacy practices and the privacy-relevant data you collect so the App Store can display the information on your product page. (You can manage this information at any time in App Store Connect.) People use the privacy details on your product page to make an informed decision before they download your app. To learn more, see App privacy details on the App Store.\n\nAn app’s App Store product page helps people understand the app’s privacy practices before they download it.\n\nBest practices\n\nRequest access only to data that you actually need. Asking for more data than a feature needs — or asking for data before a person shows interest in the feature — can make it hard for people to trust your app. Give people precise control over their data by making your permission requests as specific as possible.\n\nBe transparent about how your app collects and uses people’s data. People are less likely to be comfortable sharing data with your app if they don’t understand exactly how you plan to use it. Always respect people’s choices to use system features like Hide My Email and Mail Privacy Protection, and be sure you understand your obligations with regard to app tracking. To learn more about Apple privacy features, see Privacy; for developer guidance, see User privacy and data use.\n\nProcess data on the device where possible. In iOS, for example, you can take advantage of the Apple Neural Engine and custom CreateML models to process the data right on the device, helping you avoid lengthy and potentially risky round trips to a remote server.\n\nAdopt system-defined privacy protections and follow security best practices. For example, in iOS 15 and later, you can rely on CloudKit to provide encryption and key management for additional data types, like strings, numbers, and dates.\n\nRequesting permission\n\nHere are several examples of the things you must request permission to access:\n\nPersonal data, including location, health, financial, contact, and other personally identifying information\n\nUser-generated content like emails, messages, calendar data, contacts, gameplay information, Apple Music activity, HomeKit data, and audio, video, and photo content\n\nProtected resources like Bluetooth peripherals, home automation features, Wi-Fi connections, and local networks\n\nDevice capabilities like camera and microphone\n\nIn a visionOS app running in a Full Space, ARKit data, such as hand tracking, plane estimation, image anchoring, and world tracking\n\nThe device’s advertising identifier, which supports app tracking\n\nThe system provides a standard alert that lets people view each request you make. You supply copy that describes why your app needs access, and the system displays your description in the alert. People can also view the description — and update their choice — in Settings > Privacy.\n\nRequest permission only when your app clearly needs access to the data or resource. It’s natural for people to be suspicious of a request for personal information or access to a device capability, especially if there’s no obvious need for it. Ideally, wait to request permission until people actually use an app feature that requires access. For example, you can use the location button to give people a way to share their location after they indicate interest in a feature that needs that information.\n\nAvoid requesting permission at launch unless the data or resource is required for your app to function. People are less likely to be bothered by a launch-time request when it’s obvious why you’re making it. For example, people understand that a navigation app needs access to their location before they can benefit from it. Similarly, before people can play a visionOS game that lets them bounce virtual objects off walls in their surroundings, they need to permit the game to access information about their surroundings.\n\nWrite copy that clearly describes how your app uses the ability, data, or resource you’re requesting. The standard alert displays your copy (called a purpose string or usage description string) after your app name and before the buttons people use to grant or deny their permission. Aim for a brief, complete sentence that’s straightforward, specific, and easy to understand. Use sentence case, avoid passive voice, and include a period at the end. For developer guidance, see Requesting access to protected resources and App Tracking Transparency.\n\n\t\n\nExample purpose string\n\n\t\n\nNotes\n\n\n\n\n\t\n\nThe app records during the night to detect snoring sounds.\n\n\t\n\nAn active sentence that clearly describes how and why the app collects the data.\n\n\n\n\n\t\n\nMicrophone access is needed for a better experience.\n\n\t\n\nA passive sentence that provides a vague, undefined justification.\n\n\n\n\n\t\n\nTurn on microphone access.\n\n\t\n\nAn imperative sentence that doesn’t provide any justification.\n\nHere are several examples of the standard system alert:\n\nExample 1\nExample 2\nExample 3\n\nPre-alert screens, windows, or views\n\nIdeally, the current context helps people understand why you’re requesting their permission. If it’s essential to provide additional details, you can display a custom screen or window before the system alert appears. The following guidelines apply to custom views that display before system alerts that request permission to access protected data and resources, including camera, microphone, location, contact, calendar, and tracking.\n\nInclude only one button and make it clear that it opens the system alert. People can feel manipulated when a custom screen or window also includes a button that doesn’t open the alert because the experience diverts them from making their choice. Another type of manipulation is using a term like “Allow” to title the custom screen’s button. If the custom button seems similar in meaning and visual weight to the allow button in the alert, people can be more likely to choose the alert’s allow button without meaning to. Use a term like “Continue” or “Next” to title the single button in your custom screen or window, clarifying that its action is to open the system alert.\n\nDon’t include additional actions in your custom screen or window. For example, don’t provide a way for people to leave the screen or window without viewing the system alert — like offering an option to close or cancel.\n\nTracking requests\n\nApp tracking is a sensitive issue. In some cases, it might make sense to display a custom screen or window that describes the benefits of tracking. If you want to perform app tracking as soon as people launch your app, you must display the system-provided alert before you collect any tracking data.\n\nNever precede the system-provided alert with a custom screen or window that could confuse or mislead people. People sometimes tap quickly to dismiss alerts without reading them. A custom messaging screen, window, or view that takes advantage of such behaviors to influence choices will lead to rejection by App Store review.\n\nThere are several prohibited custom-screen designs that will cause rejection. Some examples are offering incentives, displaying a screen or window that looks like a request, displaying an image of the alert, and annotating the screen behind the alert (as shown below). To learn more, see App Store Review Guidelines: 5.1.1 (iv).\n\nIncentive\nImitation request\nAlert image\nAlert annotation\n\nDon’t offer incentives for granting the request. You can’t offer people compensation for granting their permission, and you can’t withhold functionality or content or make your app unusable until people allow you to track them.\n\nLocation button\n\nIn iOS, iPadOS, and watchOS, Core Location provides a button so people can grant your app temporary authorization to access their location at the moment a task needs it. A location button’s appearance can vary to match your app’s UI and it always communicates the action of location sharing in a way that’s instantly recognizable.\n\nThe first time people open your app and tap a location button, the system displays a standard alert. The alert helps people understand how using the button limits your app’s access to their location, and reminds them of the location indicator that appears when sharing starts.\n\nAfter people confirm their understanding of the button’s action, simply tapping the location button gives your app one-time permission to access their location. Although each one-time authorization expires when people stop using your app, they don’t need to reconfirm their understanding of the button’s behavior.\n\nNote\n\nIf your app has no authorization status, tapping the location button has the same effect as when a person chooses Allow Once in the standard alert. If people previously chose While Using the App, tapping the location button doesn’t change your app’s status. For developer guidance, see LocationButton (SwiftUI) and CLLocationButton (Swift).\n\nConsider using the location button to give people a lightweight way to share their location for specific app features. For example, your app might help people attach their location to a message or post, find a store, or identify a building, plant, or animal they’ve encountered in their location. If you know that people often grant your app Allow Once permission, consider using the location button to help them benefit from sharing their location without having to repeatedly interact with the alert.\n\nConsider customizing the location button to harmonize with your UI. Specifically, you can:\n\nChoose the system-provided title that works best with your feature, such as “Current Location” or “Share My Current Location.”\n\nChoose the filled or outlined location glyph.\n\nSelect a background color and a color for the title and glyph.\n\nAdjust the button’s corner radius.\n\nTo help people recognize and trust location buttons, you can’t customize the button’s other visual attributes. The system also ensures a location button remains legible by warning you about problems like low-contrast color combinations or too much translucency. In addition to fixing such problems, you’re responsible for making sure the text fits in the button — for example, button text needs to fit without truncation at all accessibility text sizes and when translated into other languages.\n\nImportant\n\nIf the system identifies consistent problems with your customized location button, it won’t give your app access to the device location when people tap it. Although such a button can perform other app-specific actions, people may lose trust in your app if your location button doesn’t work as they expect.\n\nProtecting data\n\nProtecting people’s information is paramount. Give people confidence in your app’s security and help preserve their privacy by taking advantage of system-provided security technologies when you need to store information locally, authorize people for specific operations, and transport information across a network.\n\nHere are some high-level guidelines.\n\nAvoid relying solely on passwords for authentication. Where possible, use passkeys to replace passwords. If you need to continue using passwords for authentication, augment security by requiring two-factor authentication (for developer guidance, see Securing Logins with iCloud Keychain Verification Codes). To further protect access to apps that people keep logged in on their device, use biometric identification like Face ID, Optic ID, or Touch ID. For developer guidance, see Local Authentication.\n\nStore sensitive information in a keychain. A keychain provides a secure, predictable user experience when handling someone’s private information. For developer guidance, see Keychain services.\n\nNever store passwords or other secure content in plain-text files. Even if you restrict access using file permissions, sensitive information is much safer in an encrypted keychain.\n\nAvoid inventing custom authentication schemes. If your app requires authentication, prefer system-provided features like passkeys, Sign in with Apple or Password AutoFill. For related guidance, see Managing accounts.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, tvOS, or watchOS.\n\nmacOS\n\nSign your app with a valid Developer ID. If you choose to distribute your app outside the store, signing your app with Developer ID identifies you as an Apple developer and confirms that your app is safe to use. For developer guidance, see Xcode Help.\n\nProtect people’s data with app sandboxing. Sandboxing provides your app with access to system resources and user data while protecting it from malware. All apps submitted to the Mac App Store require sandboxing. For developer guidance, see Configuring the macOS App Sandbox.\n\nAvoid making assumptions about who is signed in. Because of fast user switching, multiple people may be active on the same system.\n\nvisionOS\n\nBy default, visionOS uses ARKit algorithms to handle features like persistence, world mapping, segmentation, matting, and environment lighting. These algorithms are always running, allowing apps and games to automatically benefit from ARKit while in the Shared Space.\n\nARKit doesn’t send data to apps in the Shared Space; to access ARKit APIs, your app must open a Full Space. Additionally, features like Plane Estimation, Scene Reconstruction, Image Anchoring, and Hand Tracking require people’s permission to access any information. For developer guidance, see Setting up access to ARKit data.\n\nIn visionOS, user input is private by design. The system automatically displays hover effects when people look at interactive components you create using SwiftUI or RealityKit, giving people the visual feedback they need without exposing the direction of their gaze before they tap. For guidance, see Eyes and Gestures > visionOS.\n\nDeveloper access to device cameras works differently in visionOS than it does in other platforms. Specifically, the back camera provides blank input and is only available as a compatibility convenience; the front camera provides input for Spatial Personas, but only after people grant their permission. If the iOS or iPadOS app you’re bringing to visionOS includes a feature that needs camera access, remove it or replace it with an option for people to import content instead. For developer guidance, see Checking whether your existing app is compatible with visionOS.\n\nResources\nDeveloper documentation\n\nRequesting access to protected resources — UIKit\n\nSecurity\n\nVideos\nDesign for location privacy\nMeet the Location Button\nApple’s privacy pillars in focus\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nConsolidated guidance into new page and updated for visionOS."
  },
  {
    "title": "Designing for visionOS",
    "url": "https://developer.apple.com/design/human-interface-guidelines/designing-for-visionos",
    "html": "Designing for visionOS\nWhen people wear Apple Vision Pro, they enter an infinite 3D space where they can engage with your app or game while staying connected to their surroundings.\n\nAs you begin designing your app or game for visionOS, start by understanding the fundamental device characteristics and patterns that distinguish the platform. Use these characteristics and patterns to inform your design decisions and help you create immersive and engaging experiences.\n\nSpace. Apple Vision Pro offers a limitless canvas where people can view virtual content like windows, volumes, and 3D objects, and choose to enter deeply immersive experiences that can transport them to different places.\n\nImmersion. In a visionOS app, people can fluidly transition between different levels of immersion. By default, an app launches in the Shared Space where multiple apps can run side-by-side and people can open, close, and relocate windows. People can also choose to transition an app to a Full Space, where it’s the only app running. While in a Full Space app, people can view 3D content blended with their surroundings, open a portal to view another place, or enter a different world.\n\nPassthrough. Passthrough provides live video from the device’s external cameras, and helps people interact with virtual content while also seeing their actual surroundings. When people want to see more or less of their surroundings, they use the Digital Crown to control the amount of passthrough.\n\nSpatial Audio. Apple Vision Pro combines acoustic and visual-sensing technologies to model the sonic characteristics of a person’s surroundings, automatically making audio sound natural in their space. When an app receives a person’s permission to access information about their surroundings, it can fine-tune Spatial Audio to bring custom experiences to life.\n\nEyes and hands. In general, people perform most actions by using their eyes to look at a virtual object and making an indirect gesture, like a tap, to activate it. People can also interact with a virtual object by using a direct gesture, like touching it with a finger.\n\nErgonomics. While wearing Apple Vision Pro, people rely entirely on the device’s cameras for everything they see, both real and virtual, so maintaining visual comfort is paramount. The system helps maintain comfort by automatically placing content so it’s relative to the wearer’s head, regardless of the person’s height or whether they’re sitting, standing, or lying down. Because visionOS brings content to people — instead of making people move to reach the content — people can remain at rest while engaging with apps and games.\n\nAccessibility. Apple Vision Pro supports accessibility technologies like VoiceOver, Switch Control, Dwell Control, Guided Access, Head Pointer, and many more, so people can use the interactions that work for them. In visionOS, as in all platforms, system-provided UI components build in accessibility support by default, while system frameworks give you ways to enhance the accessibility of your app or game.\n\nImportant\n\nWhen building your app for Apple Vision Pro, be sure to consider the unique characteristics of the device and its spatial computing environment, and pay special attention to your user’s safety; for more details about these characteristics, see Apple Vision Pro User Guide. For example, Apple Vision Pro should not be used while operating a vehicle or heavy machinery. The device is also not designed to be used while moving around unsafe environments such as near balconies, streets, stairs, or other potential hazards. Note that Apple Vision Pro is designed to be fit and used only by individuals 13 years of age or older.\n\nBest practices\n\nGreat visionOS apps and games are approachable and familiar, while offering extraordinary experiences that can surround people with beautiful content, expanded capabilities, and captivating adventures.\n\nEmbrace the unique features of Apple Vision Pro. Take advantage of space, Spatial Audio, and immersion to bring life to your experiences, while integrating passthrough and spatial input from eyes and hands in ways that feel at home on the device.\n\nConsider the entire spectrum of immersion as you design ways to present your app’s most distinctive moments. You can present experiences in a windowed, UI-centric context, a fully immersive context, or something in between. For each key moment in your app, find the minimum level of immersion that suits it best — don’t assume that every moment needs to be fully immersive.\n\nUse windows for contained, UI-centric experiences. To help people perform standard tasks, prefer standard windows that appear as planes in space and contain familiar controls. In visionOS, people can relocate windows anywhere they want, and the system’s dynamic scaling helps keep window content legible whether it’s near or far.\n\nPrioritize comfort. To help people stay comfortable and physically relaxed as they interact with your app or game, keep the following fundamentals in mind.\n\nDisplay content within a person’s field of view, positioning it relative to their head. Avoid placing content in places where people have to turn their head or change their position to interact with it.\n\nAvoid displaying motion that’s overwhelming, jarring, too fast, or missing a stationary frame of reference.\n\nSupport indirect gestures that let people interact with apps while their hands rest in their lap or at their sides.\n\nIf you support direct gestures, make sure the interactive content isn’t too far away and that people don’t need to interact with it for extended periods.\n\nAvoid encouraging people to move too much while they’re in a fully immersive experience.\n\nHelp people share activities with others. When you use SharePlay to support shared activities, people can view the Spatial Personas of other participants, making it feel like everyone is together in the same space.\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nCreating your first visionOS app\n\nVideos\nPrinciples of spatial design\nDesign for spatial input\nDesign for spatial user interfaces\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nIncluded a link to Apple Vision Pro User Guide.\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nUpdated intro artwork.\n\n\n\n\nJune 21, 2023\n\n\t\n\nNew page."
  },
  {
    "title": "Progress indicators",
    "url": "https://developer.apple.com/design/human-interface-guidelines/progress-indicators",
    "html": "Progress indicators\nProgress indicators let people know that your app isn’t stalled while it loads content or performs lengthy operations.\n\nSome progress indicators also give people a way to estimate how long they have to wait for something to complete. All progress indicators are transient, appearing only while an operation is ongoing and disappearing after it completes.\n\nBecause the duration of an operation is either known or unknown, there are two types of progress indicators:\n\nDeterminate, for a task with a well-defined duration, such as a file conversion\n\nIndeterminate, for unquantifiable tasks, such as loading or synchronizing complex data\n\nBoth determinate and indeterminate progress indicators can have different appearances depending on the platform. A determinate progress indicator shows the progress of a task by filling a linear or circular track as the task completes. Progress bars include a track that fills from the leading side to the trailing side. Circular progress indicators have a track that fills in a clockwise direction.\n\nProgress bar\n\nCircular progress indicator\n\nAn indeterminate progress indicator — also called an activity indicator — uses an animated image to indicate progress. All platforms support a circular image that appears to spin; however, macOS also supports an indeterminate progress bar.\n\nmacOS\n\nwatchOS\n\nFor developer guidance, see ProgressView.\n\nBest practices\n\nWhen possible, use a determinate progress indicator. An indeterminate progress indicator shows that a process is occurring, but it doesn’t help people estimate how long a task will take. A determinate progress indicator can help people decide whether to do something else while waiting for the task to complete, restart the task at a different time, or abandon the task.\n\nBe as accurate as possible when reporting advancement in a determinate progress indicator. Consider evening out the pace of advancement to help people feel confident about the time needed for the task to complete. Showing 90 percent completion in five seconds and the last 10 percent in 5 minutes can make people wonder if your app is still working and can even feel deceptive.\n\nKeep progress indicators moving so people know something is continuing to happen. People tend to associate a stationary indicator with a stalled process or a frozen app. If a process stalls for some reason, provide feedback that helps people understand the problem and what they can do about it.\n\nWhen possible, switch a progress bar from indeterminate to determinate. If an indeterminate process reaches a point where you can determine its duration, switch to a determinate progress bar. People generally prefer a determinate progress indicator, because it helps them gauge what’s happening and how long it will take.\n\nDon’t switch from the circular style to the bar style. Activity indicators (also called spinners) and progress bars are different shapes and sizes, so transitioning between them can disrupt your interface and confuse people.\n\nIf it’s helpful, display a description that provides additional context for the task. Be accurate and succinct. Avoid vague terms like loading or authenticating because they seldom add value.\n\nDisplay a progress indicator in a consistent location. Choosing a consistent location for a progress indicator helps people reliably find the status of an operation across platforms or within or between apps.\n\nWhen it’s feasible, let people halt processing. If people can interrupt a process without causing negative side effects, include a Cancel button. If interrupting the process might cause negative side effects — such as losing the downloaded portion of a file — it can be useful to provide a Pause button in addition to a Cancel button.\n\nLet people know when halting a process has a negative consequence. When canceling a process results in lost progress, it’s helpful to provide an alert that includes an option to confirm the cancellation or resume the process.\n\nPlatform considerations\n\nNo additional considerations for tvOS or visionOS.\n\niOS, iPadOS\n\nHide the unfilled portion of the track in navigation bars and toolbars. By default, a progress bar’s track includes both filled and unfilled portions. When you use a progress bar in a navigation bar or toolbar — for example, to show a page loading — configure it to hide the unfilled portion of the track.\n\nRefresh content controls\n\nA refresh control lets people immediately reload content, typically in a table view, without waiting for the next automatic content update to occur. A refresh control is a specialized type of activity indicator that’s hidden by default, becoming visible when people drag down the view they want to reload. In Mail, for example, people can drag down the list of Inbox messages to check for new messages.\n\nPerform automatic content updates. Although people appreciate being able to do an immediate content refresh, they also expect automatic refreshes to occur periodically. Don’t make people responsible for initiating every update. Keep data fresh by updating it regularly.\n\nSupply a short title only if it adds value. Optionally, a refresh control can include a title. In most cases, this is unnecessary, as the animation of the control indicates that content is loading. If you do include a title, don’t use it to explain how to perform a refresh. Instead, provide information of value about the content being refreshed. A refresh control in Podcasts, for example, uses a title to tell people when the last podcast update occurred.\n\nFor developer guidance, see UIRefreshControl.\n\nmacOS\n\nIn macOS, an indeterminate progress indicator can have a bar or circular appearance. Both versions use an animated image to indicate that the app is performing a task.\n\nIndeterminate progress bar\n\nIndeterminate circular progress indicator\n\nPrefer an activity indicator (spinner) to communicate the status of a background operation or when space is constrained. Spinners are small and unobtrusive, so they’re useful for asynchronous background tasks, like retrieving messages from a server. Spinners are also good for communicating progress within a small area, such as within a text field or next to a specific control, such as a button.\n\nAvoid labeling a spinning progress indicator. Because a spinner typically appears when people initiate a process, a label is usually unnecessary.\n\nwatchOS\n\nBy default the system displays the progress indicators in white over the scene’s background color. You can change the color of the progress indicator by setting its tint color.\n\nProgress bar\n\nCircular progress indicator\n\nActivity indicator\n\nResources\nDeveloper documentation\n\nProgressView — SwiftUI\n\nUIProgressView — UIKit\n\nUIActivityIndicatorView — UIKit\n\nUIRefreshControl — UIKit\n\nNSProgressIndicator — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nCombined guidance common to all platforms.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance to reflect changes in watchOS 10."
  },
  {
    "title": "Accessibility",
    "url": "https://developer.apple.com/design/human-interface-guidelines/accessibility",
    "html": "Accessibility\nPeople use Apple’s accessibility features to personalize how they interact with their devices in ways that work for them.\n\nAn accessible app or game supports accessibility personalizations by design and helps everyone have a great experience, regardless of their capabilities or how they use their devices.\n\nApproximately one in seven people have a disability that affects the way they interact with the world and their devices. People can experience disabilities at any age, for any duration, and at varying levels of severity. For example, situational disabilities — such as a wrist injury from a fall or voice loss from overuse — can affect the way almost everyone interacts with their devices at various times.\n\nBest practices\n\nDesign with accessibility in mind. Accessibility is not just about making information available to people with disabilities — it’s about making information available to everyone, regardless of their capabilities or situation. Designing your app with accessibility in mind means prioritizing simplicity and perceivability and examining every design decision to ensure that it doesn’t exclude people with disabilities or who interact with their devices in different ways.\n\nSimplicity — Support familiar, consistent interactions that make complex tasks simple and straightforward to perform.\n\nPerceivability — Make sure that all content can be perceived whether people are using sight, hearing, or touch.\n\nSupport personalization. You already design your experience to adapt to environmental variations — such as device orientation, display size, resolution, color gamut, and split view — because you want people to enjoy it in any context and on all supported devices. With minimal additional effort, you can design your app to support the accessibility features people use to personalize the ways they interact with their devices.\n\nWhen you use standard components to implement your interface, text and controls automatically adapt to several accessibility settings, such as Bold Text, Larger Text, Invert Colors, and Increase Contrast.\n\nAudit and test your app or game for accessibility. An audit examines every element in your experience and gives you a comprehensive list of issues to fix. Testing helps you ensure that everyone can complete the most important tasks in your app, no matter how they interact with their devices.\n\nWhen you test important user flows with accessibility features turned on, you gain an appreciation for the challenges of interacting with a device in different ways. You also discover places where your app might fail to deliver a great user experience.\n\nFor example, a common user flow in a social media app might be “post a response to a comment.” The tasks that make up this flow could include:\n\nRead posted comments.\n\nChoose a comment for a response.\n\nOpen the response view.\n\nEdit the response.\n\nPost the response.\n\nFor each critical user flow in your app or game, turn on an accessibility feature, such as VoiceOver, Reduce Motion, or Large Text Size, and make sure that you can complete every task in the flow without difficulty. After you fix the problems you uncover, turn on a different accessibility feature and run through the user flow again. To help you audit, test, and fix your app or game, consider using Xcode’s Accessibility Inspector.\n\nInteractions\n\nAssistive technologies like VoiceOver, Assistive Touch, Pointer Control, and Switch Control expand the ways people can interact with their devices. Because these technologies integrate with system-provided interactions, it’s essential that you support the system interactions correctly in your app.\n\nGestures\n\nDon’t override the platform gestures. People expect gestures that target system features — like swiping down to reveal Notification Center — to work regardless of the app they’re using.\n\nPrefer simplified gestures for common interactions. Complex gestures such as multifinger or multihand gestures, long presses, or gestures that require repeated movements can be challenging for many people. Using the simplest gestures possible improves the experience for everyone who interacts with your app.\n\nProvide alternative ways to perform gesture-based actions. Include an option for people who may not be able to perform a specific gesture. For example, if people can use a gesture to delete a row in a table, you can also provide a way to delete items through an edit mode or by offering a Delete button in an item detail view.\n\nEdit to delete.\n\nSwipe to delete.\n\nWhen possible, make your app’s core functionality accessible through more than one type of physical interaction. For example, Camera on iPhone and iPad lets people take a photo by tapping the onscreen button or by pressing the device’s volume down button. In addition to making photo-capture more convenient for everyone, these alternative interactions provide options to people who might have limited grip strength or dexterity.\n\nIf you define custom gestures, be sure to support assistive technologies that give people alternative ways to interact with your app. For example, with Pointer Control, people can use a wrist, index finger, or head-based pointer; with Dwell Control, they can use only their eyes to select and activate objects. One way to support technologies like VoiceOver, Dwell Control, and Switch Control is to implement custom actions; for developer guidance, see UIAccessibilityCustomAction.\n\nMake drag and drop accessible in your iOS or iPadOS app. When you use the accessibility APIs to identify drag sources and drop targets in your app, assistive technologies can help people drag and drop items. For developer guidance, see accessibilityDragSourceDescriptors and accessibilityDropPointDescriptors.\n\nButtons and controls\n\nGive all controls and interactive elements a hit target that’s large enough. For example, on touchscreen devices, a hit target needs to measure at least 44x44 pt; in visionOS, place controls so that their centers are at least 60 pt apart. People with limited mobility need larger hit targets to help them interact with your app. It can be frustrating to interact with too-small controls in any platform, even when people use a pointer.\n\nCharacterize the accessibility of custom elements. You can use system APIs to tell assistive technologies how a component behaves. For example, using button or NSAccessibilityButton to characterize a view as a button means that VoiceOver speaks the view’s description followed by the word button, which tells people that the view behaves like a button.\n\nUse a consistent style hierarchy to communicate the relative importance of buttons. In iOS, iPadOS, and tvOS, for example, you can use the visually prominent filled style for the button that performs the most likely action in a view, using less prominent styles — such as gray or plain — for buttons that perform less important actions. (For developer guidance, see UIButton.Configuration.) In visionOS, system-provided buttons generally include a visible background by default. In iOS, iPadOS, visionOS, and for some buttons in macOS, people can also turn on Button Shapes to make it easier to distinguish active buttons from surrounding content.\n\nPrefer the system-provided switch component. SwiftUI provides a switch that indicates its state by the position of its knob and its fill color. For some people, however, the addition of labels makes it easier to perceive whether a switch is on or off. When you use system-provided switches, iOS, iPadOS, tvOS, visionOS, and watchOS automatically display on/off glyphs within them when people turn on On/Off Labels.\n\nWithout on/off labels\n\nWith on/off labels\n\nConsider giving links a visual indicator in addition to color, such as an underline. It’s fine to use color to identify a link, but if you use it as the only indicator, people — such as those with color blindness or cognitive or situational attention impairments — may not be able to perceive the distinction.\n\nUser input\n\nLet people input information by speaking instead of typing or gesturing. Adding a dictation button in a text entry field lets people choose speech as their preferred input method. If you create a custom keyboard, be sure to include a microphone key for dictation.\n\nSupport Siri or Shortcuts for performing important tasks by voice alone. To learn more about helping people use Siri interactions in your app, see Siri.\n\nWhen possible, don’t prevent people from selecting plain text. Many people rely on using selected text as input for translations and definitions.\n\nHaptics\n\nSupport the system-defined haptics where available. Many people rely on haptics to help them interact with apps when they can’t see the display. For example, system apps play haptics to notify people when a task has succeeded or failed or when an event is about to happen. Be sure to use the system-defined haptics consistently in your app so that you don’t confuse people. For guidance, see Playing haptics.\n\nNote\n\nIn platforms that don’t play haptics, use other ways to provide feedback when people interact with custom objects, such as sound.\n\nVoiceOver\n\nVoiceOver gives audible descriptions of visible content, helping people get information and navigate when they can’t see the display. In visionOS, VoiceOver uses Spatial Audio to help communicate the location of accessible objects.\n\nImportant\n\nWhen VoiceOver is on in visionOS, apps that define custom gestures don’t receive hand input by default. Instead, people can perform VoiceOver gestures to explore apps without worrying about an app interpreting their hand input. In VoiceOver’s Direct Gesture mode, VoiceOver doesn’t process its standard gestures, instead letting an app process hand input directly. For developer guidance, see Improving accessibility support in your visionOS app.\n\nContent descriptions\n\nProvide alternative descriptions for all images that convey meaning. If you don’t describe the meaningful images in your content, you prevent VoiceOver users from fully experiencing your app. To create a useful description, start by reporting what would be self-explanatory to someone who is able to see the image. Because VoiceOver reads the text surrounding the image and any captions, describe only the information that’s conveyed by the image itself.\n\nThe alternative description for this element is “Moving: 125 percent; Exercise: zero percent; Standing: 58 percent.”\n\nMake infographics fully accessible. Provide a concise description of the infographic that explains what it conveys. If people can interact with the infographic to get more or different information, you need to make these interactions available to VoiceOver users, too. The accessibility APIs provide ways to represent custom interactive elements so that assistive technologies can help people use them.\n\nWhen an image is purely decorative and isn’t intended to communicate anything important, hide it from assistive technologies. Making VoiceOver describe a purely decorative image can waste people’s time and add to their cognitive load without providing any benefit.\n\nGive each page a unique title and provide headings that identify sections in your information hierarchy. When people arrive on a page, the title is the first piece of information they receive from an assistive technology. To help people understand the structure of your app, create a unique title for each page that succinctly describes its contents or purpose. Similarly, people need accurate section headings to help them build a mental map of the information hierarchy of each page.\n\nHelp everyone enjoy your video and audio content. When you provide closed captions, audio descriptions, and transcripts, you can help people benefit from audio and video content in ways that work for them.\n\nClosed captions give people a textual equivalent for the audible information in a video. You can also use closed captions to provide multiple translations for the same content, letting the system choose the version that matches the device’s current settings. Because closed captions aren’t always available, it’s important to provide subtitles, too.\n\nAudio descriptions provide a spoken narration of important information that’s presented only visually.\n\nA transcript provides a complete textual description of a video, covering both audible and visual information, so that people can enjoy the video in different ways.\n\nFor developer guidance, see Selecting Subtitles and Alternative Audio Tracks.\n\nNavigation\n\nMake sure VoiceOver users can navigate to every element. VoiceOver uses accessibility information from UI elements to help people understand the location of each element and what it can do. System-provided UI components include this accessibility information by default, but VoiceOver can’t help people discover and use custom elements unless you provide the information. For developer guidance, see Accessibility modifiers.\n\nImprove the VoiceOver experience by specifying how elements are grouped, ordered, or linked. Proximity, alignment, and other contextual cues can help sighted people perceive the relationships among visible elements, but these cues don’t work well for VoiceOver users. Examine your app for places where relationships among elements are visual only, and describe these relationships to VoiceOver.\n\nFor example, the layout below relies on proximity and centering to imply that each phrase is a caption for the image above it. However, if you don’t tell VoiceOver that each image needs to be grouped with its phrase, VoiceOver reads, “A large container holding a variety of mangoes. A large container holding many green artichokes. Mangoes come from trees that belong to the genus Mangifera. Artichokes come from a variety of a species of thistle.” This happens because VoiceOver reads elements from top to bottom by default. For developer guidance, see shouldGroupAccessibilityChildren and accessibilityTitleUIElement.\n\nMangoes come from trees that belong to the genus Mangifera.\n\nArtichokes come from a variety of a species of thistle.\n\nTell VoiceOver when visible content or layout changes. An unexpected change in content or layout can be very confusing to VoiceOver users, because it means that their mental map of the content is no longer accurate. It’s crucial to report visible changes so that VoiceOver and other assistive technologies can help people update their understanding of the content. For developer guidance, see UIAccessibility.Notification (UIKit) or NSAccessibility.Notification (AppKit).\n\nHelp people predict when a control opens a different webpage or app. An unexpected change in context can cause confusion and require people to suddenly rebuild their mental model of the current experience. One way to draw attention to a potential change in context is append an ellipsis to a button’s title. Throughout the system, an ellipsis trailing the title is the standard way for a button to communicate that it opens another window or view in which people can complete the action. For example, Mail in iOS and iPadOS appends an ellipsis to the Move Message button, signaling that a separate view opens, listing the destinations people can choose.\n\nProvide alternative text labels for all important interface elements. Alternative text labels aren’t visible, but they let VoiceOver audibly describe app elements, making navigation easier for people with visual disabilities. System-provided controls have useful labels by default, but you need to create labels for custom elements. For example, if you create an accessibility element that represents a custom rating button, you might supply the label “Rate.”\n\nSupport the VoiceOver rotor when necessary. VoiceOver users can use a control called the rotor to navigate a document or webpage by headings, links, or other section types. The rotor can also bring up the braille keyboard. You can help VoiceOver users navigate among related items in your app by identifying these items to the rotor. For developer guidance, see UIAccessibilityCustomRotor and NSAccessibilityCustomRotor.\n\nIn iPadOS, macOS, and visionOS, make sure people can use the keyboard to navigate and interact with all components in your app. Ideally, people can turn on Full Keyboard Access and perform every task in your experience using only the keyboard. In addition to accessibility keyboard shortcuts, the system defines a large number of other keyboard shortcuts that many people use all the time. To support everyone, it’s important to avoid overriding any system-defined keyboard shortcuts in your app. For guidance, see Keyboards.\n\nText display\n\nIn iOS, iPadOS, tvOS, visionOS, and watchOS, use Dynamic Type and test that your app’s layout adapts to all font sizes. Dynamic Type lets people pick the font size that works for them. Verify that your design can scale and that both text and glyphs are legible at all font sizes. On iPhone or iPad, for example, turn on Larger Accessibility Text Sizes in Settings > Accessibility > Display & Text Size > Larger Text, and make sure your app remains comfortably readable. You can download the Dynamic Type size tables in Apple Design Resources for each platform.\n\nAs font size increases, keep text truncation to a minimum. In general, aim to display as much useful text in the largest accessibility font size as you do in the largest standard font size. Avoid truncating text in scrollable regions unless people can open a separate view to read the rest of the content. You can prevent text truncation in a label by configuring it to use as many lines as needed to display a useful amount of text; for developer guidance, see numberOfLines.\n\nConsider adjusting layout at large font sizes. When font size increases in a horizontally constrained context, inline items and container boundaries can crowd text, making it less readable. For example, if you display text inline with secondary items — such as glyphs or timestamps — the text has less horizontal space. At large font sizes, an inline layout might cause text to truncate or result in overlapping text and secondary items. In this case, consider using a stacked layout where the text appears above the secondary items. Similarly, multiple columns of text can become less readable at large font sizes because each column constrains horizontal space. In this case, consider reducing the number of columns when font size increases to avoid text truncation and improve overall readability. For developer guidance, see isAccessibilityCategory.\n\nAt smaller text sizes, Mail displays the date inline with the sender’s name.\n\nAt the largest accessibility text size, Mail displays the date below the recipient’s name.\n\nIncrease the size of meaningful interface icons as font size increases. If you use interface icons to communicate important information, make sure they are easy to view at larger font sizes, too. When you use SF Symbols, you get icons that scale automatically with Dynamic Type size changes.\n\nMaintain a consistent information hierarchy regardless of the current font size. For example, keep primary elements toward the top of a view even when the font size is very large, so that people don’t lose track of these elements.\n\nPrefer regular or heavy font weights in your app. Consider using Regular, Medium, Semibold, or Bold font weights, because they are easier to see. Avoid Ultralight, Thin, and Light font weights, which can be more difficult to see.\n\nEnsure your app responds correctly and looks good when people turn on bold text. In iOS, iPadOS, tvOS, visionOS, and watchOS, people turn on the bold text accessibility setting to make text and symbols easier to see. In response, your app needs to make all text bolder and give all glyphs an increased stroke weight. The system fonts and SF symbols automatically adjust to the bold text accessibility setting.\n\nMake sure custom fonts are legible. Custom typefaces can sometimes be difficult to read. Unless your app has a compelling need for a custom font, such as for branding purposes or to create an immersive gaming experience, it’s usually best to use the system fonts. If you do use a custom font, make sure it’s easy to read, even at small sizes.\n\nAvoid full text justification. The whitespace created by fully justified text can create patterns that make it difficult for many people to read and focus on the text. Left justification — or right justification in right-to-left languages — provides a framing reference for people with learning and literacy challenges, such as dyslexia.\n\nAvoid using italics or all caps for long passages of text. Italics and all caps are great for occasional emphasis, but overuse of these styles makes text hard to read.\n\nColor and effects\n\nDon’t rely solely on color to differentiate between objects or communicate important information. If you use color to convey information, be sure to provide text labels or glyph shapes to help everyone perceive it.\n\nPrefer system colors for text. When you use system colors in text, it responds correctly to accessibility settings such as Invert Colors and Increase Contrast.\n\nAvoid using color combinations as the only way to distinguish between two states or values. Many colorblind people find it difficult to distinguish blue from orange; other problematic combinations are red and green, red and black, and either red or green combined with gray. When it makes sense to use a combination of colors to communicate states or values, include additional visual indicators so everyone can perceive the information. For example, instead of using red and green circles to indicate offline and online, you could use a red square and a green circle. Some image-editing software includes tools that can help you proof for colorblindness.\n\nAs seen without colorblindness.\n\nAs seen with red-green colorblindness.\n\nEnsure your views respond correctly to Invert Colors. People can turn on Invert Colors when they prefer to view items on a dark background. In the Smart Invert mode of Invert Colors, images, video, and full-color icons (such as app icons and nontemplate images) don’t invert, and dark UI stays dark. Test your app or game to find places where you might need to prevent an image — like a photo in a custom view — from inverting.\n\nUse strongly contrasting colors to improve readability. Many factors affect the perception of color, including font size and weight, color brightness, screen resolution, and lighting conditions. When you increase color contrast of visual elements like text, glyphs, and controls, you can help more people use your app in more situations. To find out if the contrast of adjacent colors in your UI meets minimum acceptable levels, you can use Xcode’s Accessibility Inspector or an online color calculator based on the Web Content Accessibility Guidelines (WCAG) color contrast formula. In general, smaller or lighter-weight text needs to have greater contrast to be legible. Use the following values for guidance.\n\nText size\n\n\t\n\nText weight\n\n\t\n\nMinimum contrast ratio\n\n\n\n\nUp to 17 points\n\n\t\n\nAll\n\n\t\n\n4.5:1\n\n\n\n\n18 points and larger\n\n\t\n\nAll\n\n\t\n\n3:1\n\n\n\n\nAll\n\n\t\n\nBold\n\n\t\n\n3:1\n\nChange blurring and transparency when people turn on Reduce Transparency. For example, make areas of blurred content and translucency mostly opaque. For best results, use a color value in the opaque area that’s different from the original color value you used when the area was blurred or translucent.\n\nMotion\n\nAvoid requiring animations unless they’re essential for your experience. In general, let people use your app without relying on any animations.\n\nPlay tightened animations when Reduce Motion is on. People can turn on Reduce Motion if they tend to get distracted or experience dizziness or nausea when viewing animations that include effects such as zooming, scaling, spinning, or peripheral motion. In response to this setting, you need to turn off or reduce animations that are known to cause problems (to learn more, see Responsive design for motion). If you use a problematic animation to communicate important information, consider designing a non animated alternative or tightening the physics of the animation to reduce its motion. For example:\n\nTighten springs to reduce bounce effects or track 1:1 as a person gestures\n\nAvoid animating depth changes in z-axis layers\n\nAvoid animating into or out of blurs\n\nReplace a slide with a fade to avoid motion\n\nLet people control video and other motion effects. Avoid autoplaying video or effects without also providing a button or other way to control them.\n\nBe cautious when displaying moving or blinking elements. Although subtle movement and blinking can draw people’s attention, these effects can also be distracting and they aren’t useful for people with visual disabilities. Worse, some blinking elements can cause epileptic episodes. In all cases, avoid using movement and blinking as the only way to convey information.\n\nFor additional guidance on helping people remain comfortable while they experience motion in your visionOS app, see Motion > visionOS. For developer guidance, see Improving accessibility support in your visionOS app.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or watchOS.\n\nvisionOS\n\nAvoid anchoring content to the wearer’s head. In addition to making people feel stuck or confined, anchoring content to their head can prevent someone from using Pointer Control to interact with that content. Head-anchored content can also prevent people with low vision from reading it because they can’t move closer to it or position the content inside the Zoom lens.\n\nPointer control - hand\nPointer control - head\nZoom lens\nPlay\nResources\nRelated\n\nInclusion\n\nDeveloper documentation\n\nAccessibility for developers\n\nAccessibility\n\nAccessibility modifiers — SwiftUI\n\nAccessibility for UIKit — UIKit\n\nAccessibility for AppKit — AppKit\n\nVideos\nCreate accessible spatial experiences\nDesign considerations for vision and motion\nThe practice of inclusive design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nUpdated visionOS Zoom lens artwork.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Onboarding",
    "url": "https://developer.apple.com/design/human-interface-guidelines/onboarding",
    "html": "Onboarding\nIdeally, people can understand your app or game simply by experiencing it, but if onboarding is necessary, provide a flow that’s fast, fun, and optional.\n\nTo help reduce the need for an onboarding flow, make sure it’s easy for people to discover and navigate your app’s primary actions and content, and that secondary items are in logical, predictable locations. If you need to create a separate onboarding experience, consider the following best practices.\n\nBest practices\n\nDesign a brief, enjoyable experience that doesn’t require people to memorize or provide a lot of information. When you orient people to the main purpose of your app in a quick and entertaining way, people are more likely to appreciate the experience and remember what they learn. If your app or game requires access to private data or resources before it can do anything, you might want to initiate the system-provided permission request during your onboarding flow because it gives you the opportunity show people why your app needs their information and the benefits of providing it. Be sure to defer requests for additional information until the situation requires it. For guidance, see Privacy.\n\nMake sure your onboarding flow is only about your app. People enter your onboarding experience to learn how to use your app; they don’t need to learn how to use the system or the device.\n\nPrefer teaching through interactivity. People tend to learn better when they can actually perform a task and interact with content instead of just viewing instructional material. Also, an interactive onboarding experience can help people feel like they’re jumping right in and getting started with your app or game.\n\nAs an alternative to a separate onboarding flow, consider integrating brief onboarding elements into the main experience. For example, when people activate a feature for the first time, you might provide a succinct description of the functionality and display a visual cue that points to the next step. Because people generally learn better by doing, it can help to provide first-time feedback that guides people as they try new things.\n\nIf you offer a tutorial, give people a way to skip it. If people skip the tutorial when they first launch your app, don’t present it again on subsequent launches, but make sure it’s easy for people to find if they want to view it later. For example, you might want to make the tutorial available in a help, account, or settings area within your app or game.\n\nAvoid displaying licensing details within your onboarding flow. Let the App Store display agreements and disclaimers so people can read them before downloading your app. If you must include these items within the app, integrate them in a balanced way that doesn’t disrupt the user experience.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or watchOS.\n\nvisionOS\n\nConsider creating 2D images or animations to illustrate user flows. Avoid creating an onboarding video that takes a long time to load.\n\nResources\nRelated\n\nLaunching\n\nFeedback\n\nOffering help\n\nVideos\nDiscoverable design\nDesigning Award Winning Apps and Games\nLove at First Launch\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Branding",
    "url": "https://developer.apple.com/design/human-interface-guidelines/branding",
    "html": "Branding\nApps and games express their unique brand identity in ways that make them instantly recognizable while feeling at home on the platform and giving people a consistent experience.\n\nIn addition to expressing your brand in your app icon and throughout your experience, you have several opportunities to highlight it within the App Store. For guidance, see App Store Marketing Guidelines.\n\nBest practices\n\nUse your brand’s unique voice and tone in all the written communication you display. For example, your brand might convey feelings of encouragement and optimism by using plain words, occasional exclamation marks and emoji, and simple sentence structures.\n\nConsider choosing an accent color. On most platforms, you can specify a color that the system applies to app elements like interface icons, buttons, and text. In macOS, people can also choose their own accent color that the system can use in place of the color an app specifies. For guidance, see Color.\n\nConsider using a custom font. If your brand is strongly associated with a specific font, be sure that it’s legible at all sizes and supports accessibility features like bold text and larger type. It can work well to use a custom font for headlines and subheadings while using a system font for body copy and captions, because the system fonts are designed for optimal legibility at small sizes. For guidance, see Typography.\n\nEnsure branding always defers to content. Using screen space for an element that does nothing but display a brand asset can mean there’s less room for the content people care about. Aim to incorporate branding in refined, unobtrusive ways that don’t distract people from your experience.\n\nHelp people feel comfortable by using standard patterns consistently. Even a highly stylized interface can be approachable if it maintains familiar behaviors. For example, place UI components in expected locations and use standard symbols to represent common actions.\n\nResist the temptation to display your logo throughout your app or game unless it’s essential for providing context. People seldom need to be reminded which app they’re using, and it’s usually better to use the space to give people valuable information and controls.\n\nAvoid using a launch screen as a branding opportunity. Some platforms use a launch screen to minimize the startup experience, while simultaneously giving the app or game a little time to load resources (for guidance, see Launch screens). A launch screen disappears too quickly to convey any information, but you might consider displaying a welcome or onboarding screen that incorporates your branding content at the beginning of your experience. For guidance, see Onboarding.\n\nFollow Apple’s trademark guidelines. Apple trademarks must not appear in your app name or images. See Apple Trademark List and Guidelines for Using Apple Trademarks.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nMarketing resources and identity guidelines\n\nShow more with app previews\n\nColor\n\nVideos\nHow to Pick a Custom Font"
  },
  {
    "title": "Drag and drop",
    "url": "https://developer.apple.com/design/human-interface-guidelines/drag-and-drop",
    "html": "Drag and drop\nUsing drag and drop, people can move or duplicate selected photos, text, and other content by dragging the selection from one location to another.\n\nTo perform drag and drop, people select content in one location, called the source, and drop it in another, called the destination. These locations can be in the same container — like a text view — or in different containers, like text views on opposite sides of a split view, or even in different apps.\n\nDepending on various factors, the drag and drop action might move the selected content to the destination or copy it. After a successful drop, moved content exists only in the destination; copied content exists in both locations. As a general rule, dropping selected content within the same container moves it, whereas dropping content in a different container copies it. Dragging and dropping content between apps always results in a copy.\n\nPeople use different interactions to perform drag and drop depending on platform. For example:\n\nIn visionOS, people pinch and hold a virtual object while dragging it to a new location in any direction, including along the z-axis.\n\niOS and iPadOS support drag and drop through gestures on the touchscreen, interactions with a pointing device, and through full keyboard-access mode.\n\nUniversal Control lets people drag content between their Mac and iPad.\n\nOn a Mac, people can interact with a pointing device, use full keyboard access mode, or use VoiceOver to perform drag and drop.\n\nBest practices\n\nAs much as possible, support drag and drop throughout your app. Most people are familiar with drag and drop and they often try it everywhere. When you use system-provided components — such as text fields and text views — you get built-in support for drag and drop.\n\nOffer alternative ways to accomplish drag-and-drop actions. Sometimes, drag-and-drop operations are inconvenient or impossible for people to perform, so it’s important to provide other ways to do the same things. For example, you can include menu commands that people can use to copy an item and move it to another location. In iOS and iPadOS, you can use accessibility APIs to identify sources and destinations so that people can use assistive technologies to drag and drop in your app (for developer guidance, see accessibilityDragSourceDescriptors and accessibilityDropPointDescriptors).\n\nDetermine when dragging and dropping content within your app results in a move or a copy. In general, a move makes sense when the source and destination containers are the same — such as dragging text from one location to another within a document — and a copy makes sense when they’re different, like dragging an image from one document to another. Before you change these defaults, consider the behavior that most people expect and prefer the one that is least likely to result in frustration or data loss.\n\nSupport multi-item drag and drop when it makes sense. People appreciate the convenience of dragging a group of items to a destination, instead of dragging each item separately. In iOS, iPadOS, macOS, and visionOS, people can select multiple items and drag them as a group; macOS also lets people select multiple items from several apps and drag them as a group. In iPadOS, people can select an item, start dragging it, and add other items to the group without stopping the drag operation.\n\nPrefer letting people undo a drag-and-drop operation. Sometimes, people inadvertently drop content in the wrong destination, so they appreciate being able to undo the action and return to their previous state. You might also be able to help people avoid mistakes by asking for confirmation before completing a drag-and-drop operation that can’t be undone. In macOS, for example, the Finder asks for confirmation when people drag a file into a write-only folder because they won’t be able to open the folder and remove the dropped item. In some situations, it might make sense to provide a way to reverse the results of drag and drop when people can’t undo it. For example, Photos lets people cancel photo sharing after dropping a photo into a shared photo stream.\n\nConsider offering multiple versions of dragged content, ordered from highest to lowest fidelity. By providing multiple alternatives, the destination can choose the highest quality version it can accept. For example, if people can drag a line drawing they created in your app, you could offer a PDF vector representation, a lossless PNG image with transparency, and a lossy JPEG image without transparency, in that order. Another example is an app that uses rich, complicated objects, like charts. This app might offer the native chart object followed by a simpler version — like an image of the chart — for destinations that don’t support chart objects.\n\nConsider supporting spring loading. Spring loading lets people activate certain controls, like buttons and segmented controls, by dragging selected content over them. For example, Calendar lets people drag a selected event over the day, week, month, or year segments in the toolbar, giving them a convenient way to move the event to a different date. On a Mac equipped with a Magic Trackpad, a button or segmented control can activate when people force-click it while continuing to hold the content; on iPad, these components can activate when people hover over them while holding the content.\n\nProviding feedback\n\nDrag and drop is a dynamic process that can result in multiple outcomes. To help people feel in control the process, it’s crucial to provide clear and continuous feedback throughout.\n\nDisplay a drag image as soon as people drag a selection about three points. It works well to create a translucent representation of the content people are dragging. Translucency helps distinguish the representation from the original content and lets people see destinations as they pass over them. Display the drag image until people drop the content.\n\nIf it adds clarity, modify the drag image to help people predict the result of a drag-and-drop operation. For example, when dragging a photo into a document, the drag image could expand to show the default size of the photo in the document. You can also use drag flocking to visually group multiple drag items — letting people confirm that they haven’t missed an item they want to drag — and then ungroup the items when people drop them. Although changing the drag image can provide valuable feedback, avoid creating a distracting experience in which the drag image is constantly and radically changing.\n\nShow people whether a destination can accept dragged content. For example, you might display an insertion point or highlight a containing view only when the destination can accept a dragged item, and show no visual feedback — or an explicit “not allowed” image, like the circle.slash from SF Symbols — when it can’t. Display highlighting or other visual cues only while the content is positioned above the destination, removing the visual feedback when people drag the content away. When there are multiple possible destinations, provide visual cues that help people identify one at a time.\n\nWhen people drop an item on an invalid destination, or when dropping fails, provide visual feedback. For example, the item can move back from its current location to its source (if the source is still visible) or it can scale up and fade out to give the impression of the item evaporating instead of landing successfully.\n\nAccepting drops\n\nScroll the contents of a destination when necessary. When people drag an item within a scrolling container that has a lot of content, the content can automatically scroll as people move the item over it. This behavior makes it easy for people to find the right place to drop the item, but if they continue the drag operation outside of the container, automatic scrolling is no longer necessary. System-provided text views and text fields behave this way by default.\n\nWhen there’s a choice, pick the richest version of dropped content your app can accept. For example, if people drag a chart object from another app, the drag operation might offer both the rich, native chart object and a simple image of it. If your app supports charts, extract and display the native chart object; it it doesn’t, use the image instead.\n\nExtract only the relevant portion of dropped content if necessary. For example, when people drag a contact to a recipient field in an email, Mail displays only the name and email address, not the contact’s address information.\n\nWhen a physical keyboard is attached, check for the Option key at drop time. When people hold the Option key while dragging, they can force a drag-and-drop operation within the same container to behave like a copy. If people stop holding Option before dropping content in the same container, the drag operation results in a move.\n\nProvide feedback when dropped content needs time to transfer. For example, you might display a progress indicator to help people estimate how long the transfer will take. In collections, lists, and tables, you might also display a placeholder at the drop location so people know where to find the content after it finishes transferring. The system can display an alert when a time-consuming transfer occurs between apps.\n\nProvide feedback when dropped content initiates a task or action. If people drop content onto a control that initiates a task — such as printing — show people that the task has begun and keep them informed of its progress.\n\nApply appropriate styling to dropped text. When the source and destination both support the same text styles, make sure dropped text maintains its original font, typeface, size, and other attributes. Otherwise, apply the destination’s style to dropped text.\n\nAfter a drop, maintain the content’s selection state in the destination, updating it in the source as needed. People expect the content they drop to remain selected so they can immediately act on it. When the source and destination are the same container, the content disappears from its original location when the drag operation performs a move. When a drag operation within the same container performs a copy, remove the selection state from the content that remains in the original location. When people drag selected content to a different container, deselect the content in the source.\n\nPlatform considerations\n\nNot supported in tvOS or watchOS.\n\niOS, iPadOS\n\nLet people perform multiple simultaneous drag activities. In iPadOS, people can sequentially add items to an in-progress drag session, gathering as many items as their fingers can handle. For example, people can select an app icon on the Home Screen, start dragging it, and select additional app icons before dropping all of them in a different Home Screen or in a folder. To support this interaction, you need to let people add items during a drag — providing visual feedback through flocking — and accept multiple, simultaneous drops.\n\nmacOS\n\nConsider letting people drag content from your app into the Finder. When you support this, be sure to present the content in a format your app can open later. For example, Calendar lets people drag an event to the Finder as a .ics file. People can share this file with others or drag it back to Calendar to open it. When necessary, you can output dragged content in a clipping, which is a temporary container for storing dragged content. For example, most system apps let people drag text to the Finder, where it appears as a clipping. Later, people can drag the clipping into a text field or other location that accepts text. Note that a drag-and-drop clipping isn’t related to the Clipboard.\n\nLet people drag selected content from an inactive window without first making the window active. Selected content in an inactive window is known as a background selection and has a different appearance from selected content in the active window. In general, people expect to drag a background selection to the active window without bringing the inactive window forward.\n\nWhen possible, let people drag individual items from an inactive window without affecting an existing background selection. For example, people can drag an unselected file from an inactive Finder window without deselecting any of the window’s selected files.\n\nConsider displaying a badge during multi-item drag operations. A badge is a small filled oval containing a number you can use to indicate the number of items people are dragging. If a destination can accept only a subset of dragged items, update the badge to show the new number.\n\nConsider changing the pointer appearance to indicate what will happen when people drop content. In addition to using the copy pointer, you might want to use the drag link, disappearing item, and operation not allowed pointers, depending on the situation. For guidance, see Pointers.\n\nAs much as possible, let people select and drag content with a single motion. Unless people are selecting multiple items, they appreciate it when they don’t have to pause between making a selection and starting the drag operation.\n\nvisionOS\n\nWhen possible, launch your app to handle content that people drop into empty space. When you associate a user activity with draggable app content, your app can open a window or scene that handles the content when people drop it. For example, when people drop a URL into empty space, it launches Safari; when people drop Quick Look–supported content, Quick Look launches to display it. For developer guidance, see NSUserActivity.\n\nPlay\nResources\nRelated\n\nUniversal Control\n\nDeveloper documentation\n\nDrag and drop — UIKit\n\nDrag and Drop — AppKit\n\nFile Provider\n\nVideos\nWhat's new in UIKit\nSwiftUI on the Mac: The finishing touches\nDesigned for iPad\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nAdded artwork.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Dark Mode",
    "url": "https://developer.apple.com/design/human-interface-guidelines/dark-mode",
    "html": "Dark Mode\nDark Mode is a systemwide appearance setting that uses a dark color palette to provide a comfortable viewing experience tailored for low-light environments.\n\nIn iOS, iPadOS, macOS, and tvOS, people often choose Dark Mode as their default interface style, and they generally expect all apps and games to respect their preference. In Dark Mode, the system uses a dark color palette for all screens, views, menus, and controls, and may also use greater perceptual contrast to make foreground content stand out against the darker backgrounds.\n\nBest practices\n\nAvoid offering an app-specific appearance setting. An app-specific appearance mode option creates more work for people because they have to adjust more than one setting to get the appearance they want. Worse, they may think your app is broken because it doesn’t respond to their systemwide appearance choice.\n\nEnsure that your app looks good in both appearance modes. In addition to using one mode or the other, people can choose the Auto appearance setting, which switches between light and dark appearances as conditions change throughout the day, potentially while your app is running.\n\nTest your content to make sure that it remains comfortably legible in both appearance modes. For example, in Dark Mode with Increase Contrast and Reduce Transparency turned on (both separately and together), you may find places where dark text is less legible when it’s on a dark background. You might also find that turning on Increase Contrast in Dark Mode can result in reduced visual contrast between dark text and a dark background. Although people with strong vision might still be able to read lower contrast text, such text could be illegible for many. For guidance, see Color and effects.\n\nIn rare cases, consider using only a dark appearance in the interface. For example, it can make sense for an app that supports immersive media viewing to use a permanently dark appearance that lets the UI recede and helps people focus on the media.\n\nDark Mode colors\n\nThe color palette in Dark Mode includes dimmer background colors and brighter foreground colors. It’s important to realize that these colors aren’t necessarily inversions of their light counterparts: while many colors are inverted, some are not. For more information, see Specifications.\n\nEmbrace colors that adapt to the current appearance. Semantic colors (like labelColor and controlColor in macOS or separator in iOS and iPadOS) automatically adapt to the current appearance. When you need a custom color, add a Color Set asset to your app’s asset catalog in Xcode, and specify the bright and dim variants of the color. Avoid using hard-coded color values or colors that don’t adapt.\n\nAim for sufficient color contrast in all appearances. Using system-defined colors can help you achieve a good contrast ratio between your foreground and background content. At a minimum, make sure the contrast ratio between colors is no lower than 4.5:1. For custom foreground and background colors, strive for a contrast ratio of 7:1, especially in small text. This ratio ensures that your foreground content stands out from the background, and helps your content meet recommended accessibility guidelines.\n\nSoften the color of white backgrounds. If you display a content image that includes a white background, consider slightly darkening the image to prevent the background from glowing in the surrounding Dark Mode context.\n\nIcons and images\n\nThe system uses SF Symbols (which automatically adapt to Dark Mode) and full-color images that are optimized for both light and dark appearances.\n\nUse SF Symbols wherever possible. Symbols work well in both appearance modes when you use dynamic colors to tint them or when you add vibrancy. For guidance, see Color.\n\nDesign separate interface icons for light and dark appearances if necessary. For example, an icon that depicts a full moon might need a subtle dark outline to contrast well with a light background, but need no outline when it displays on a dark background. Similarly, an icon that represents a drop of oil might need a slight border to make the edge visible against a dark background.\n\nMake sure full-color images and icons look good in both appearances. Use the same asset if it looks good in both light and dark appearances. If an asset looks good in only one mode, modify the asset or create separate light and dark assets. Use asset catalogs to combine your assets into a single named image.\n\nText\n\nThe system uses vibrancy and increased contrast to maintain the legibility of text on darker backgrounds.\n\nUse the system-provided label colors for labels. The primary, secondary, tertiary, and quaternary label colors adapt automatically to light and dark appearances.\n\nUse system views to draw text fields and text views. System views and controls make your app’s text look good on all backgrounds, adjusting automatically for the presence or absence of vibrancy. When possible, use a system-provided view to display text instead of drawing the text yourself.\n\nPlatform considerations\n\nNo additional considerations for tvOS. Dark Mode isn’t supported in visionOS or watchOS.\n\niOS, iPadOS\n\nIn Dark Mode, the system uses two sets of background colors — called base and elevated — to enhance the perception of depth when one dark interface is layered above another. The base colors are dimmer, making background interfaces appear to recede, and the elevated colors are brighter, making foreground interfaces appear to advance.\n\nBase\n\nElevated\n\nLight\n\nPrefer the system background colors. Dark Mode is dynamic, which means that the background color automatically changes from base to elevated when an interface is in the foreground, such as a popover or modal sheet. The system also uses the elevated background color to provide visual separation between apps in a multitasking environment and between windows in a multiple-window context. Using a custom background color can make it harder for people to perceive these system-provided visual distinctions.\n\nmacOS\n\nWhen people choose the graphite accent color in General settings, macOS causes window backgrounds to pick up color from the current desktop picture. The result — called desktop tinting — is a subtle effect that helps windows blend more harmoniously with their surrounding content.\n\nInclude some transparency in custom component backgrounds when appropriate. Transparency lets your components pick up color from the window background when desktop tinting is active, creating a visual harmony that can persist even when the desktop picture changes. To help achieve this harmony, add transparency only to a custom component that has a visible background or bezel, and only when the component is in a neutral state, such as state that doesn’t use color. You don’t want to add transparency when the component is in a state that uses color, because doing so can cause the component’s color to fluctuate when the window background adjusts to a different location on the desktop or when the desktop picture changes.\n\nResources\nRelated\n\nColor\n\nMaterials\n\nTypography\n\nVideos\nWhat's New in iOS Design\nImplementing Dark Mode on iOS"
  },
  {
    "title": "File management",
    "url": "https://developer.apple.com/design/human-interface-guidelines/file-management",
    "html": "File management\nDepending on the experience, people may expect to manage their documents and files within an app or throughout the system.\n\nDocument-based apps — such as Pages, Keynote, Photos, and Notes — help people create, edit, and save documents and files, often providing customized ways for people to browse for content they want to open in the app.\n\nDepending on the platform, people may also expect to browse files without first opening an app. On a Mac, people use the Finder to access the macOS file system; on iPhone, iPad, and Apple Vision Pro, people use the Files app to manage the documents and files on their device. In watchOS and tvOS, people don’t typically create, edit, and manage documents.\n\nOpening files\n\nPeople are familiar with the system apps and interfaces for browsing and opening files, so it can work well to leverage these experiences in your app.\n\nUse app menus and keyboard shortcuts to give people convenient ways to create and open documents. In macOS and iPadOS, people expect to create new documents or open existing ones. When you provide menu commands like New or Open, macOS presents them in the menu bar File menu, and iPadOS presents them in the shortcuts interface that displays when people hold the Command key on a connected hardware keyboard. In contrast, iOS and visionOS don’t display app-level menus in these ways, so it often works well to use an Add (+) button to offer a “new document” action.\n\nReflect people’s view of the file system within a custom file-opening interface. If people already understand the basic layout of their device’s file system — for example, through their use of apps like the Finder and Files — it’s a good idea to build on this understanding in a custom file-opening view. Although it can make sense to start by showing one part of the file system within your custom interface, such as a Documents or iCloud folder or the most recently selected location, avoid forcing people to remain within this area if they want to browse elsewhere.\n\nMake your custom file-opening interface convenient. For example, people might appreciate an “open recent” action in addition to the simple “open” action. You might also want to let people choose criteria on which to filter the file-browsing experience, or select multiple documents to open at once. In a macOS open panel, you can customize the title of the Open button to reflect the task — for example, if your app lets people insert a file’s contents into the current document, you might change the title to Insert.\n\nSaving work\n\nHelp people be confident that their work is always preserved unless they cancel or delete it. In general, avoid making people take an explicit action to save their work. Instead, automatically perform periodic saves while they’re editing and when they close a file or switch to another app.\n\nProvide a save interface to let people change a file’s name, format, or location. By default, a new document’s title is “Untitled” until people choose a custom name. As with a document-opening interface, a save view can also provide a browsing experience that defaults to a logical location to help people place the saved document where they want. If you support saving content in different formats, also give people a way to choose a specific file format.\n\nHide the file extension by default, but let people view it if they choose. Be sure to reflect the current choice in all the save or open interfaces you display.\n\nExtend the functionality of the Save dialog, if appropriate. If it makes sense in your app, you can add a custom accessory view containing useful settings or options to the Save dialog. For example, the dialog for saving Mail messages as files contains an option to include attachments.\n\nQuick Look previews\n\nQuick Look helps you create previews of the files your app handles so that people can view them within your app and in some cases interact with them. On a Mac, for example, people can play the preview of an audio file; in iOS, people can add markup to a photo’s preview; and in visionOS, people can rotate and scale a file to examine it in different ways.\n\nImplement a Quick Look viewer in your app if it makes sense. If your app lets people attach or otherwise interact with files — especially files your app doesn’t natively support — implementing a Quick Look viewer lets people preview those files without leaving your app.\n\nConsider implementing a Quick Look generator if your app produces custom file types. A Quick Look generator lets other apps — including Finder, Files, and Spotlight — display previews of your documents, making it easier for people to find them.\n\nPlatform considerations\n\nNo additional considerations for tvOS, visionOS, or watchOS.\n\niOS, iPadOS\n\nIf it makes sense for your app to share its files with other apps, you can create a file provider app extension that displays a custom interface for importing, exporting, opening, and moving your app’s documents. For developer guidance, see File Provider. An app extension is code you provide that people can install and use to extend the functionality of a specific area of the system; to learn more, see App extensions.\n\nWhen someone uses your file provider extension to open or import documents, display only documents that are appropriate in the current context. For example, if a PDF-editing app loads your extension, only list PDF files for opening or import. You might also want to display additional information, such as modification dates, sizes, and whether documents are local or remote.\n\nLet people select a destination when exporting and moving documents. Unless your app stores documents in a single directory, let people navigate to a specific destination in your directory hierarchy. If it makes sense, you can also provide a way to add new subdirectories.\n\nAvoid including a custom navigation bar. Your extension loads within a modal view that already includes a navigation bar. Providing a second navigation bar is confusing and takes space away from your content.\n\nYour app can also let people browse and open files from other apps. For developer guidance, see Adding a document browser to your app.\n\nmacOS\nFinder Sync extensions\n\nIf your app syncs local and remote files, you can create a Finder Sync app extension to express file synchronization status and control within the Finder. For developer guidance, see Finder Sync.\n\nFor example, you can use a Finder Sync extension to:\n\nDisplay badges in the Finder to indicate the sync status of items\n\nProvide custom contextual menu items that perform file and folder management tasks, like favoriting and adding password-protection\n\nProvide custom toolbar buttons that perform global actions, like initiating a sync operation\n\nHelp people avoid losing work if they turn off autosaving. People can turn off autosaving by selecting the “Ask to keep changes when closing documents” checkbox in the General system settings pane. In this scenario, show that a document has unsaved changes and present a save dialog when people choose to close the document, quit your app, log out, or restart.\n\nWhen autosaving is off, make sure people know when a document has unsaved changes. To show that there are unsaved changes, display a dot on the document window’s close button and next to the document’s name in your app’s Window menu. When autosaving is on, showing a dot in these locations is confusing, because it implies that people need to take action to avoid losing their work. Regardless of autosave status, you can append “Edited” to the document’s title in the title bar, but be sure to remove this suffix as soon as autosave occurs or when people explicitly save their work.\n\nResources\nRelated\n\nToolbars\n\nFile menu\n\nPrinting\n\nDeveloper documentation\n\nDocuments — SwiftUI\n\nVideos\nBuild document-based apps in SwiftUI\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Dock menus",
    "url": "https://developer.apple.com/design/human-interface-guidelines/dock-menus",
    "html": "Dock menus\nOn a Mac, people can secondary click an app’s or game’s icon in the Dock to reveal a Dock menu, which presents both system-provided and custom items.\n\nThe system-provided Dock menu items can vary depending on whether the app is open. For example, the Dock menu for Safari includes menu items for actions like viewing a current window or creating a new window.\n\nNote\n\nAlthough iOS and iPadOS don’t support a Dock menu, people can reveal a similar menu of system-provided and custom items — called Home Screen quick actions — when they long press an app icon on the Home Screen or in the Dock. For guidance, see Home Screen quick actions.\n\nBest practices\n\nAs with all menus, you need to label Dock menu items succinctly and organize them logically. For guidance, see Menus.\n\nMake custom Dock menu items available in other places, too. Not everyone uses a Dock menu, so it’s important to offer the same commands elsewhere, like in your menu bar menus or within your interface.\n\nPrefer high-value custom items for your Dock menu. For example, a Dock menu can list all currently or recently open windows, making it a convenient way to jump to the window people want. Also consider listing a few of the actions that are most likely to be useful when your app isn’t frontmost or when there are no open windows. For example, Mail includes items for getting new mail and composing a new message in addition to listing all open windows.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nMenus\n\nHome Screen quick actions\n\nDeveloper documentation\n\napplicationDockMenu(_:) — AppKit"
  },
  {
    "title": "Searching",
    "url": "https://developer.apple.com/design/human-interface-guidelines/searching",
    "html": "Searching\nPeople use various search techniques to find content on their device, within an app, and within a document or file.\n\nTo search for content within an app, people generally expect to use a search bar. When it makes sense, you can personalize the search experience by using what you know about how people interact with your app. For example, you might display recent searches or a search history, or offer search-term suggestions, completions, or corrections based on terms people searched earlier in your app. For guidance, see Search fields.\n\nIn some cases, people appreciate the ability to scope a search or filter the results. For example, people might want to search for items by specifying attributes like creation date, file size, or file type. For guidance, see Scope bars. You can also help people find content within an open document or file by implementing ways to find content in a window or page in your iOS, iPadOS, or macOS app.\n\nIn iOS, iPadOS, and macOS, Spotlight helps people find content across all apps in the system and on the web. When you index and provide information about your app’s content, people can use Spotlight to find content your app contains without opening it first.\n\nBest practices\n\nMake your app’s content searchable. You can share content with Spotlight by making it indexable and specifying descriptive attributes known as metadata. Spotlight extracts, stores, and organizes this information to allow for fast, comprehensive searches.\n\nDefine metadata for custom file types you handle. Supply a Spotlight File Importer plug-in that describes the types of metadata your file format contains. For developer guidance, see CSImportExtension.\n\nUse Spotlight to offer advanced file-search capabilities within the context of your app. For example, you might include a button that instantly initiates a Spotlight search based on the current selection. You might then display a custom view that presents the search results or a filtered subset of them.\n\nPrefer using the system-provided open and save views. The system-provided open and save views generally include a built-in search field that people can use to search and filter the entire system. For related guidance, see File management.\n\nImplement a Quick Look generator if your app produces custom file types. A Quick Look generator helps Spotlight and other apps show previews of your documents. For developer guidance, see QuickLook.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nSearch fields\n\nDeveloper documentation\n\nMaking Content Searchable — Core Spotlight\n\nVideos\nWhat’s new in iPad app design\nCraft search experiences in SwiftUI\nShowcase app data in Spotlight"
  },
  {
    "title": "Activity views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/activity-views",
    "html": "Activity views\nAn activity view — often called a share sheet — presents a range of tasks that people can perform in the current context.\n\nActivity views present sharing activities like messaging and actions like Copy and Print, in addition to quick access to frequently used apps. People typically reveal a share sheet by choosing an Action button while viewing a page or document, or after they’ve selected an item. An activity view can appear as a sheet or a popover, depending on the device and orientation.\n\nYou can provide app-specific activities that can appear in a share sheet when people open it within your app or game. For example, Photos provides app-specific actions like Copy Photo, Add to Album, and Adjust Location. By default, the system lists app-specific actions before actions — such as Add to Files or AirPlay — that are available in multiple apps or throughout the system. People can edit the list of actions to ensure that it displays the ones they use most and to add new ones.\n\nYou can also create app extensions to provide custom share and action activities that people can use in other apps. (An app extension is code you provide that people can install and use outside of your app.) For example, you might create a custom share activity that people can install to help them share a webpage with a specific social media service. Even though macOS doesn’t provide an activity view, you can create share and action app extensions that people can use on a Mac. For guidance, see Share and action extensions.\n\nBest practices\n\nAvoid creating duplicate versions of common actions that are already available in the activity view. For example, providing a duplicate Print action is unnecessary and confusing because people wouldn’t know how to distinguish your action from the system-provided one. If you need to provide app-specific functionality that’s similar to an existing action, give it a custom title. For example, if you let people use custom formatting to print a bank transaction, use a title that helps people understand what your print activity does, like “Print Transaction.”\n\nConsider using a symbol to represent your custom activity. SF Symbols provides a comprehensive set of configurable symbols you can use to communicate items and concepts in an activity view. If you need to create a custom interface icon, center it in an area measuring about 70x70 pixels. For guidance, see Icons.\n\nWrite a succinct, descriptive title for each custom action you provide. If a title is too long, the system wraps it and may truncate it. Prefer a single verb or a brief verb phrase that clearly communicates what the action does. Avoid including your company or product name in an action title. In contrast, the share sheet displays the title of a share activity — typically a company name — below the icon that represents it.\n\nMake sure activities are appropriate for the current context. Although you can’t reorder system-provided tasks in an activity view, you can exclude tasks that aren’t applicable to your app. For example, if it doesn’t make sense to print from within your app, you can exclude the Print activity. You can also identify which custom tasks to show at any given time.\n\nUse the Share button to display an activity view. People are accustomed to accessing system-provided activities when they choose the Share button. Avoid confusing people by providing an alternative way to do the same thing.\n\nShare and action extensions\n\nShare extensions give people a convenient way to share information from the current context with apps, social media accounts, and other services. Action extensions let people initiate content-specific tasks — like adding a bookmark, copying a link, editing an inline image, or displaying selected text in another language — without leaving the current context.\n\nThe system presents share and action extensions differently depending on the platform:\n\nIn iOS and iPadOS, share and action extensions are displayed in the share sheet that appears when people choose an Action button.\n\nIn macOS, people access share extensions by clicking a Share button in the toolbar or choosing Share in a context menu. People can access an action extension by holding the pointer over certain types of embedded content — like an image they add to a Mail compose window — clicking a toolbar button, or choosing a quick action in a Finder window.\n\nIf necessary, create a custom interface that feels familiar to people. For a share extension, prefer the system-provided composition view because it provides a consistent sharing experience that people already know. For an action extension, include your app name. If you need to present an interface, include elements of your app’s interface to help people understand that your extension and your app are related.\n\nStreamline and limit interaction. People appreciate extensions that let them perform a task in just a few steps. For example, a share extension might immediately post an image to a social media account with a single tap or click.\n\nAvoid placing a modal view above your extension. By default, the system displays an extension within a modal view. While it might be necessary to display an alert above an extension, avoid displaying additional modal views.\n\nIf necessary, provide an image that communicates the purpose of your extension. A share extension automatically uses your app icon, helping give people confidence that your app provided the extension. For an action extension, prefer using a symbol or creating an interface icon that clearly identifies the task.\n\nUse your main app to denote the progress of a lengthy operation. An activity view dismisses immediately after people complete the task in your share or action extension. If a task is time-consuming, continue it in the background, and give people a way to check the status in your main app. Although you can use a notification to tell people about a problem, don’t notify them simply because the task completes.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or visionOS. Not supported in macOS, tvOS, or watchOS.\n\nResources\nRelated\n\nSheets\n\nPopovers\n\nDeveloper documentation\n\nUIActivityViewController — UIKit\n\nUIActivity — UIKit\n\nApp Extension Support — Foundation\n\nVideos\nDesign for Collaboration with Messages\nWhat's New in Sharing"
  },
  {
    "title": "Home Screen quick actions",
    "url": "https://developer.apple.com/design/human-interface-guidelines/home-screen-quick-actions",
    "html": "Home Screen quick actions\nHome Screen quick actions give people a way to perform app-specific actions from the Home Screen.\n\nPeople can get a menu of available quick actions when they touch and hold an app icon (on a 3D Touch device, people can press on the icon with increased pressure to see the menu). For example, Mail includes quick actions that open the Inbox or the VIP mailbox, initiate a search, and create a new message. In addition to app-specific actions, a Home Screen quick action menu also lists items for removing the app and editing the Home Screen.\n\nEach Home Screen quick action includes a title, an interface icon on the left or right (depending on your app’s position on the Home Screen), and an optional subtitle. The title and subtitle are always left-aligned in left-to-right languages. Your app can even dynamically update its quick actions when new information is available. For example, Messages provides quick actions for opening your most recent conversations.\n\nBest practices\n\nCreate quick actions for compelling, high-value tasks. For example, Maps lets people search near their current location or get directions home without first opening the Maps app. People tend to expect every app to provide at least one useful quick action; you can provide a total of four.\n\nAvoid making unpredictable changes to quick actions. Dynamic quick actions are a great way to keep actions relevant. For example, it may make sense to update quick actions based on the current location or recent activities in your app, time of day, or changes in settings. Make sure that actions change in ways that people can predict.\n\nFor each quick action, provide a succinct title that instantly communicates the results of the action. For example, titles like “Directions Home,” “Create New Contact,” and “New Message” can help people understand what happens when they choose the action. If you need to give more context, provide a subtitle too. Mail uses subtitles to indicate whether there are unread messages in the Inbox and VIP folder. Don’t include your app name or any extraneous information in the title or subtitle, keep the text short to avoid truncation, and take localization into account as you write the text.\n\nProvide a recognizable interface icon for each quick action. Consider using SF Symbols to represent actions. If you design your own interface icon, use the Quick Action Icon Template that’s included with Apple Design Resources for iOS and iPadOS and use the following sizes for guidance.\n\nMaximum width and height\n\n\n\n\n34.67x34.67 pt (104x104 px @3x)\n\n\n\n\n35x35 pt (70x70 px @2x)\n\nTarget width and height\n\n\n\n\n26.67x26.67 pt (80x80 px @3x)\n\n\n\n\n27x27 pt (54x54 px @2x)\n\nTarget width (wide glyphs)\n\n\n\n\n29.33pt (88px @3x)\n\n\n\n\n30pt (60px @2x)\n\nTarget height (tall glyphs)\n\n\n\n\n29.33pt (88px @3x)\n\n\n\n\n30pt (60px @2x)\n\nDon’t use an emoji in place of a symbol or interface icon. Emojis are full color, whereas quick action symbols are monochromatic and change appearance in Dark Mode to maintain contrast.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS. Not supported in macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nMenus\n\nDeveloper documentation\n\nAdd Home Screen Quick Actions — UIKit"
  },
  {
    "title": "Privacy",
    "url": "https://developer.apple.com/design/human-interface-guidelines/privacy",
    "html": "Privacy\nPrivacy is paramount: it’s critical to be transparent about the privacy-related data and resources you require and essential to protect the data people allow you to access.\n\nPeople use their devices in very personal ways and they expect apps to help them preserve their privacy.\n\nWhen you submit a new or updated app, you must provide details about your privacy practices and the privacy-relevant data you collect so the App Store can display the information on your product page. (You can manage this information at any time in App Store Connect.) People use the privacy details on your product page to make an informed decision before they download your app. To learn more, see App privacy details on the App Store.\n\nAn app’s App Store product page helps people understand the app’s privacy practices before they download it.\n\nBest practices\n\nRequest access only to data that you actually need. Asking for more data than a feature needs — or asking for data before a person shows interest in the feature — can make it hard for people to trust your app. Give people precise control over their data by making your permission requests as specific as possible.\n\nBe transparent about how your app collects and uses people’s data. People are less likely to be comfortable sharing data with your app if they don’t understand exactly how you plan to use it. Always respect people’s choices to use system features like Hide My Email and Mail Privacy Protection, and be sure you understand your obligations with regard to app tracking. To learn more about Apple privacy features, see Privacy; for developer guidance, see User privacy and data use.\n\nProcess data on the device where possible. In iOS, for example, you can take advantage of the Apple Neural Engine and custom CreateML models to process the data right on the device, helping you avoid lengthy and potentially risky round trips to a remote server.\n\nAdopt system-defined privacy protections and follow security best practices. For example, in iOS 15 and later, you can rely on CloudKit to provide encryption and key management for additional data types, like strings, numbers, and dates.\n\nRequesting permission\n\nHere are several examples of the things you must request permission to access:\n\nPersonal data, including location, health, financial, contact, and other personally identifying information\n\nUser-generated content like emails, messages, calendar data, contacts, gameplay information, Apple Music activity, HomeKit data, and audio, video, and photo content\n\nProtected resources like Bluetooth peripherals, home automation features, Wi-Fi connections, and local networks\n\nDevice capabilities like camera and microphone\n\nIn a visionOS app running in a Full Space, ARKit data, such as hand tracking, plane estimation, image anchoring, and world tracking\n\nThe device’s advertising identifier, which supports app tracking\n\nThe system provides a standard alert that lets people view each request you make. You supply copy that describes why your app needs access, and the system displays your description in the alert. People can also view the description — and update their choice — in Settings > Privacy.\n\nRequest permission only when your app clearly needs access to the data or resource. It’s natural for people to be suspicious of a request for personal information or access to a device capability, especially if there’s no obvious need for it. Ideally, wait to request permission until people actually use an app feature that requires access. For example, you can use the location button to give people a way to share their location after they indicate interest in a feature that needs that information.\n\nAvoid requesting permission at launch unless the data or resource is required for your app to function. People are less likely to be bothered by a launch-time request when it’s obvious why you’re making it. For example, people understand that a navigation app needs access to their location before they can benefit from it. Similarly, before people can play a visionOS game that lets them bounce virtual objects off walls in their surroundings, they need to permit the game to access information about their surroundings.\n\nWrite copy that clearly describes how your app uses the ability, data, or resource you’re requesting. The standard alert displays your copy (called a purpose string or usage description string) after your app name and before the buttons people use to grant or deny their permission. Aim for a brief, complete sentence that’s straightforward, specific, and easy to understand. Use sentence case, avoid passive voice, and include a period at the end. For developer guidance, see Requesting access to protected resources and App Tracking Transparency.\n\n\t\n\nExample purpose string\n\n\t\n\nNotes\n\n\n\n\n\t\n\nThe app records during the night to detect snoring sounds.\n\n\t\n\nAn active sentence that clearly describes how and why the app collects the data.\n\n\n\n\n\t\n\nMicrophone access is needed for a better experience.\n\n\t\n\nA passive sentence that provides a vague, undefined justification.\n\n\n\n\n\t\n\nTurn on microphone access.\n\n\t\n\nAn imperative sentence that doesn’t provide any justification.\n\nHere are several examples of the standard system alert:\n\nExample 1\nExample 2\nExample 3\n\nPre-alert screens, windows, or views\n\nIdeally, the current context helps people understand why you’re requesting their permission. If it’s essential to provide additional details, you can display a custom screen or window before the system alert appears. The following guidelines apply to custom views that display before system alerts that request permission to access protected data and resources, including camera, microphone, location, contact, calendar, and tracking.\n\nInclude only one button and make it clear that it opens the system alert. People can feel manipulated when a custom screen or window also includes a button that doesn’t open the alert because the experience diverts them from making their choice. Another type of manipulation is using a term like “Allow” to title the custom screen’s button. If the custom button seems similar in meaning and visual weight to the allow button in the alert, people can be more likely to choose the alert’s allow button without meaning to. Use a term like “Continue” or “Next” to title the single button in your custom screen or window, clarifying that its action is to open the system alert.\n\nDon’t include additional actions in your custom screen or window. For example, don’t provide a way for people to leave the screen or window without viewing the system alert — like offering an option to close or cancel.\n\nTracking requests\n\nApp tracking is a sensitive issue. In some cases, it might make sense to display a custom screen or window that describes the benefits of tracking. If you want to perform app tracking as soon as people launch your app, you must display the system-provided alert before you collect any tracking data.\n\nNever precede the system-provided alert with a custom screen or window that could confuse or mislead people. People sometimes tap quickly to dismiss alerts without reading them. A custom messaging screen, window, or view that takes advantage of such behaviors to influence choices will lead to rejection by App Store review.\n\nThere are several prohibited custom-screen designs that will cause rejection. Some examples are offering incentives, displaying a screen or window that looks like a request, displaying an image of the alert, and annotating the screen behind the alert (as shown below). To learn more, see App Store Review Guidelines: 5.1.1 (iv).\n\nIncentive\nImitation request\nAlert image\nAlert annotation\n\nDon’t offer incentives for granting the request. You can’t offer people compensation for granting their permission, and you can’t withhold functionality or content or make your app unusable until people allow you to track them.\n\nLocation button\n\nIn iOS, iPadOS, and watchOS, Core Location provides a button so people can grant your app temporary authorization to access their location at the moment a task needs it. A location button’s appearance can vary to match your app’s UI and it always communicates the action of location sharing in a way that’s instantly recognizable.\n\nThe first time people open your app and tap a location button, the system displays a standard alert. The alert helps people understand how using the button limits your app’s access to their location, and reminds them of the location indicator that appears when sharing starts.\n\nAfter people confirm their understanding of the button’s action, simply tapping the location button gives your app one-time permission to access their location. Although each one-time authorization expires when people stop using your app, they don’t need to reconfirm their understanding of the button’s behavior.\n\nNote\n\nIf your app has no authorization status, tapping the location button has the same effect as when a person chooses Allow Once in the standard alert. If people previously chose While Using the App, tapping the location button doesn’t change your app’s status. For developer guidance, see LocationButton (SwiftUI) and CLLocationButton (Swift).\n\nConsider using the location button to give people a lightweight way to share their location for specific app features. For example, your app might help people attach their location to a message or post, find a store, or identify a building, plant, or animal they’ve encountered in their location. If you know that people often grant your app Allow Once permission, consider using the location button to help them benefit from sharing their location without having to repeatedly interact with the alert.\n\nConsider customizing the location button to harmonize with your UI. Specifically, you can:\n\nChoose the system-provided title that works best with your feature, such as “Current Location” or “Share My Current Location.”\n\nChoose the filled or outlined location glyph.\n\nSelect a background color and a color for the title and glyph.\n\nAdjust the button’s corner radius.\n\nTo help people recognize and trust location buttons, you can’t customize the button’s other visual attributes. The system also ensures a location button remains legible by warning you about problems like low-contrast color combinations or too much translucency. In addition to fixing such problems, you’re responsible for making sure the text fits in the button — for example, button text needs to fit without truncation at all accessibility text sizes and when translated into other languages.\n\nImportant\n\nIf the system identifies consistent problems with your customized location button, it won’t give your app access to the device location when people tap it. Although such a button can perform other app-specific actions, people may lose trust in your app if your location button doesn’t work as they expect.\n\nProtecting data\n\nProtecting people’s information is paramount. Give people confidence in your app’s security and help preserve their privacy by taking advantage of system-provided security technologies when you need to store information locally, authorize people for specific operations, and transport information across a network.\n\nHere are some high-level guidelines.\n\nAvoid relying solely on passwords for authentication. Where possible, use passkeys to replace passwords. If you need to continue using passwords for authentication, augment security by requiring two-factor authentication (for developer guidance, see Securing Logins with iCloud Keychain Verification Codes). To further protect access to apps that people keep logged in on their device, use biometric identification like Face ID, Optic ID, or Touch ID. For developer guidance, see Local Authentication.\n\nStore sensitive information in a keychain. A keychain provides a secure, predictable user experience when handling someone’s private information. For developer guidance, see Keychain services.\n\nNever store passwords or other secure content in plain-text files. Even if you restrict access using file permissions, sensitive information is much safer in an encrypted keychain.\n\nAvoid inventing custom authentication schemes. If your app requires authentication, prefer system-provided features like passkeys, Sign in with Apple or Password AutoFill. For related guidance, see Managing accounts.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, tvOS, or watchOS.\n\nmacOS\n\nSign your app with a valid Developer ID. If you choose to distribute your app outside the store, signing your app with Developer ID identifies you as an Apple developer and confirms that your app is safe to use. For developer guidance, see Xcode Help.\n\nProtect people’s data with app sandboxing. Sandboxing provides your app with access to system resources and user data while protecting it from malware. All apps submitted to the Mac App Store require sandboxing. For developer guidance, see Configuring the macOS App Sandbox.\n\nAvoid making assumptions about who is signed in. Because of fast user switching, multiple people may be active on the same system.\n\nvisionOS\n\nBy default, visionOS uses ARKit algorithms to handle features like persistence, world mapping, segmentation, matting, and environment lighting. These algorithms are always running, allowing apps and games to automatically benefit from ARKit while in the Shared Space.\n\nARKit doesn’t send data to apps in the Shared Space; to access ARKit APIs, your app must open a Full Space. Additionally, features like Plane Estimation, Scene Reconstruction, Image Anchoring, and Hand Tracking require people’s permission to access any information. For developer guidance, see Setting up access to ARKit data.\n\nIn visionOS, user input is private by design. The system automatically displays hover effects when people look at interactive components you create using SwiftUI or RealityKit, giving people the visual feedback they need without exposing the direction of their gaze before they tap. For guidance, see Eyes and Gestures > visionOS.\n\nDeveloper access to device cameras works differently in visionOS than it does in other platforms. Specifically, the back camera provides blank input and is only available as a compatibility convenience; the front camera provides input for Spatial Personas, but only after people grant their permission. If the iOS or iPadOS app you’re bringing to visionOS includes a feature that needs camera access, remove it or replace it with an option for people to import content instead. For developer guidance, see Checking whether your existing app is compatible with visionOS.\n\nResources\nDeveloper documentation\n\nRequesting access to protected resources — UIKit\n\nSecurity\n\nVideos\nDesign for location privacy\nMeet the Location Button\nApple’s privacy pillars in focus\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nConsolidated guidance into new page and updated for visionOS."
  },
  {
    "title": "Widgets",
    "url": "https://developer.apple.com/design/human-interface-guidelines/widgets",
    "html": "Widgets\nA widget elevates and displays a small amount of timely, relevant information from your app or game so people can see it at a glance in additional contexts.\n\nWidgets display content and offer specific functionality without requiring people to open your app. People can use widgets to organize and personalize their devices, quickly accessing the information and features they need:\n\nIn iOS and iPadOS, widgets appear on the Home Screen, in Today View, and on the Lock Screen.\n\nIn macOS, people place widgets on the desktop and in Notification Center.\n\nIn watchOS, starting with watchOS 10, widgets appear in the Smart Stack when a person turns the Digital Crown.\n\nTo find widgets, people use the widget gallery. From the gallery’s editing mode, they can make changes to editable widgets, such as choosing a particular location in a Weather widget, or selecting a topic in a News widget.\n\nIn iOS and iPadOS, the widget gallery is available in Today View, Home Screen, and Lock Screen editing modes. In macOS, the widget gallery is available on the Desktop and in Notification Center editing mode. Starting with macOS 14, the widget gallery in macOS shows iPhone widgets from devices that use the same Apple ID.\n\nIn watchOS, where the widget gallery is not available, apps offer pre-configured widgets. The system displays up to 10 widgets in the Smart Stack, and people can pin widgets to a fixed position in the Smart Stack.\n\nIn iOS and iPadOS, the widget gallery also supports widget stacks, including a Smart Stack. A stack contains up to 10 same-size widgets; people view one widget at a time by scrolling through the stack. In a Smart Stack, the stack automatically rotates its widgets to display the widget that’s most likely to be relevant in the current context. Smart Stacks aren’t available on the Lock Screen on iPhone and iPad. A suggested widget doesn’t stay in the Smart Stack unless people choose to keep it. For developer guidance, see Increasing the visibility of widgets in Smart Stacks.\n\nWidgets come in different sizes, ranging from small accessory widgets on the Lock Screen of iPhone and iPad to extra large widgets in iPadOS and macOS.\n\nSmall\nMedium\nLarge\nExtra large\nAccessory circular\nAccessory rectangular\nAccessory inline\n\nThe following table shows the available widget sizes for each platform:\n\nWidget size\n\n\t\n\niPhone\n\n\t\n\niPad\n\n\t\n\nApple Watch\n\n\t\n\nMac\n\n\n\n\nSystem small\n\n\t\n\nHome Screen, Today View, and StandBy\n\n\t\n\nHome Screen, Today View, and Lock Screen\n\n\t\n\nNo\n\n\t\n\nDesktop and Notification Center\n\n\n\n\nSystem medium\n\n\t\n\nHome Screen and Today View\n\n\t\n\nHome Screen and Today View\n\n\t\n\nNo\n\n\t\n\nDesktop and Notification Center\n\n\n\n\nSystem large\n\n\t\n\nHome Screen and Today View\n\n\t\n\nHome Screen and Today View\n\n\t\n\nNo\n\n\t\n\nDesktop and Notification Center\n\n\n\n\nSystem extra large\n\n\t\n\nNo\n\n\t\n\nHome Screen and Today View\n\n\t\n\nNo\n\n\t\n\nDesktop and Notification Center\n\n\n\n\nAccessory circular\n\n\t\n\nLock Screen\n\n\t\n\nLock Screen\n\n\t\n\nWatch complications and in the Smart Stack\n\n\t\n\nNo\n\n\n\n\nAccessory corner\n\n\t\n\nNo\n\n\t\n\nNo\n\n\t\n\nWatch complications\n\n\t\n\nNo\n\n\n\n\nAccessory rectangular\n\n\t\n\nLock Screen\n\n\t\n\nLock Screen\n\n\t\n\nWatch complications and in the Smart Stack\n\n\t\n\nNo\n\n\n\n\nAccessory inline\n\n\t\n\nLock Screen\n\n\t\n\nLock Screen\n\n\t\n\nWatch complications\n\n\t\n\nNo\n\nBest practices\n\nLook for a simple idea that’s clearly related to your app’s main purpose. The first step in the design process is to choose a single idea for your widget. Throughout the process, use that idea to help you include only the most relevant content and functionality in the widget. For example, people who use the Weather app are often most interested in the current high and low temperatures and weather conditions, so the widget for Weather prioritizes this information.\n\nIn each size, display only the information that’s directly related to the widget’s main purpose. In larger widgets, you can display more data — or more detailed visualizations of the data — but you don’t want to lose sight of the widget’s primary purpose. For example, all Calendar widgets display a person’s upcoming events. In each size, the widget remains centered on events while expanding the range of information as the size increases.\n\nOffer your widget in multiple sizes when doing so adds value. In general, avoid simply expanding a smaller widget’s content to fill a larger area. It’s more important to create one widget in the size that works best for the content you want to display than it is to provide the widget in all sizes.\n\nAim to create a widget that gives people quick access to the content they want. People appreciate widgets that display meaningful content and offer useful actions and deep links to key areas of your app. When a widget merely behaves like an app icon, it offers little additional value and people may be less likely to keep it on their screens.\n\nPrefer dynamic information that changes throughout the day. If a widget’s content never appears to change, people may not keep it in a prominent position. Although widgets don’t update from minute to minute, it’s important to find ways to keep their content fresh to invite frequent viewing.\n\nLook for opportunities to surprise and delight. For example, you might design a unique visual treatment for your calendar widget to display on meaningful occasions, like birthdays or holidays.\n\nLet people know when authentication adds value. If your widget provides additional functionality when someone is signed in to your app, make sure people know that. For example, an app that shows upcoming reservations might include a message like “Sign in to view reservations” when people are signed out.\n\nUpdating widget content\n\nTo remain relevant and useful, widgets periodically refresh their information. Widgets don’t support continuous, real-time updates, and the system may adjust the limits for updates depending on various factors.\n\nKeep your widget up to date. Finding the appropriate update frequency for your widget depends on knowing how often the data changes, and estimating when people need to see the new data. For example, a widget that helps people track tides at a beach could provide useful information on an hourly basis, even though tide conditions change constantly. If people are likely to check your widget more frequently than you can update it, consider displaying text that describes when the data was last updated. For developer guidance, see Keeping a widget up to date.\n\nUse system functionality to refresh dates and times in your widget. Widget update frequency is limited, and you can preserve some of your update opportunities by letting the system refresh date and time information.\n\nShow content quickly. When you determine the update frequency that fits with the data you display, you don’t need to hide stale data behind placeholder content.\n\nUse animated transitions to bring attention to data updates. By default, many SwiftUI views animate content updates. Use standard and custom animations with a duration of up to two seconds to let people know when new information is available or when content displays differently.\n\nOffer Live Activities to show real-time updates. Widgets don’t show real-time information. If your app allows people to track the progress of a task or event for a limited amount of time with frequent updates, consider offering Live Activities in your app. Widgets and Live Activities use the same underlying frameworks and share design similarities. As a result, it can be a good idea to develop widgets and Live Activities in tandem and reuse code and design components for both features. For design guidance on Live Activities, see Live Activities; for developer guidance, see ActivityKit.\n\nConfiguring widgets\n\nIn some cases, people need to edit a widget to ensure it displays the information that’s most useful for them. For example, people choose a stock symbol for a Stocks widget. In contrast, some widgets — like the Podcasts widget — automatically display recent content, so people don’t need to customize them.\n\nMake editable widgets easy for people to customize. If your widget is editable, avoid requiring too many settings or asking for information that might be hard for people to find. You don’t have to design an editing-mode user interface for your widget because the system automatically generates it for you. For developer guidance, see Making a configurable widget.\n\nAdding interactivity to widgets\n\nPeople tap or click a widget to launch its corresponding app. Starting with iOS 17, iPadOS 17, and macOS 14, widgets can also include buttons and toggles to offer additional functionality without launching the app. For example, the Reminders widget helps people mark a task as completed, and the widget of an app people use to log their daily caffeine intake could include a button that increases the caffeine total for the day.\n\nIncomplete tasks\n\nCompleted tasks\n\nOffer simple, relevant functionality in a widget, reserving complex functionality for your app. Useful widgets offer an easy way to complete a task or action that’s directly related to its content.\n\nEnsure that a widget interaction opens your app at the right location. When people interact with your widget in areas that aren’t buttons or toggles, the interaction launches your app. Avoid making people navigate to the relevant area in the app, and instead deep link to the place where you offer details and actions that directly relate to the widget’s content. For example, when people click or tap a medium Stocks widget, the Stocks app opens to a page that displays information about the symbol.\n\nProvide options for interaction while remaining glanceable and uncluttered. In iOS, iPadOS, and macOS, widgets can offer multiple deep links that open the app and can include controls that perform app functions without launching the app. Multiple interaction targets — SwiftUI links, buttons, and toggles — might make sense for your content, but avoid creating app-like layouts in your widgets. Pay attention to the size of targets and make sure people can tap or click them with confidence and without accidentally performing unintended interactions. Note that inline accessory widgets and widgets in the watchOS Smart Stack offer only one tap target.\n\nInterface design\n\nWidgets use vivid colors, rich images, and clear, crisp text that’s easy to read at a glance. A unique, beautiful widget not only provides useful information, it can encourage people to feature it on their devices.\n\nHelp people recognize your widget by including design elements linked to your brand’s identity. Design elements like brand colors, typeface, and stylized glyphs can make a widget instantly recognizable. Take care to keep brand-related design elements from crowding out useful information or making your widget look out of place in its context.\n\nNote\n\nWhen a widget appears in Notification Center in macOS or on the Home Screen in iOS, the system displays the app name below it. In Today View, the Lock Screen in iOS, and the iPadOS Home Screen, the app name doesn’t appear below a widget.\n\nConsider carefully before displaying a logo, wordmark, or app icon in your widget. When you include brand-related design elements like colors and fonts, people seldom need your logo or app icon to help them recognize your widget. Also, the widget gallery displays your app name and icon when it lists the various types and sizes of widgets you offer. In some widgets — for example, those that display content from multiple sources — it may make sense to include a small logo in the top-right corner to subtly identify the app that provides the widget.\n\nAim for a comfortable density of information. When content appears sparse, the widget can seem unnecessary; when content is too dense, the widget isn’t glanceable. If you have lots of information to include, avoid letting your widget become a collage of items that are difficult to parse. Seek ways to curate the content so that people can grasp the essential parts instantly and view relevant details at a longer look. You might also consider creating a larger widget and looking for places where you can replace text with graphics without losing clarity.\n\nUse color judiciously. Beautiful colors draw the eye, but they’re best when they don’t prevent people from absorbing a widget’s information at a glance. Use color to enhance a widget’s appearance without competing with its content. In your asset catalog, you can also specify the colors you want the system to use as it generates your widget’s editing-mode user interface.\n\nAvoid mirroring your widget’s appearance within your app. If your app displays an element that looks like your widget but doesn’t behave like it, people can be confused when the element responds differently when they interact with it. Also, people may be less likely to try other ways to interact with such an element in your app because they expect it to behave like a widget.\n\nScaling content and using margins and padding\n\nWidgets scale to adapt to the screen sizes of different devices and onscreen areas. Ensure that your widget looks great on every device by supplying content at appropriate sizes.\n\nDesign content to look great in all situations by letting the system resize or scale it as necessary. In iOS, the system ensures that your widget looks good on small devices by resizing the content you design for large devices. In iPadOS, the system renders your widget at a large size before scaling it down for display on the Home Screen. As you create design comprehensives for various devices and scale factors, use the values listed in Specifications for guidance; for your production widget, use SwiftUI to ensure flexibility.\n\nCoordinate the corner radius of your content with the corner radius of the widget. To ensure that your content looks good within a widget’s rounded corners, use a SwiftUI container to apply the correct corner radius. For developer guidance, see ContainerRelativeShape.\n\nNote\n\nIn iOS, widgets support Dynamic Type sizes from Large to AX5 when you use Font to choose a system font or custom(_:size:) to choose a custom font. For more information about Dynamic Type sizes, see Specifications\n\nIn general, use standard margins to ensure your content is comfortably legible. Use the standard margin width for widgets — 16 points for most widgets — to avoid crowding the edges of widgets and creating a cluttered appearance. For example, as you place graphics or buttons or you use background shapes to create visual content groupings, you might need to use tighter, custom margins. Setting tight margins of 11 points can work well for those cases. Additionally, note that widgets use smaller margins on the Mac desktop and on the Lock Screen — including in StandBy. For developer guidance, see padding(_:_:).\n\nDisplaying text in widgets\n\nConsider using the system font, text styles, and SF Symbols. Using the system font helps your widget look at home on any platform, while making it easier for you to display great-looking text in a variety of weights, styles, and sizes. Use SF Symbols to align and scale symbols with text that uses the system font. If you need to use a custom font, consider using it sparingly, and be sure it’s easy for people to read at a glance. It often works well to use a custom font for the large text in a widget and SF Pro for the smaller text. For guidance, see Typography and SF Symbols.\n\nAvoid using very small font sizes. In general, display text using fonts at 11 points or larger. Text in a font that’s smaller than 11 points can be too hard for many people too read.\n\nAlways use text elements in a widget to ensure that your text scales well. In particular, don’t rasterize text — doing so prevents VoiceOver from speaking your content.\n\nSupporting different appearances and modes\n\nFor every appearance, a unique, beautiful widget not only provides useful information, it can encourage people to feature it on their devices. Depending on the context in which they appear, widgets can look different. For example:\n\nColor varies from vivid colors to tinted, monochrome colors.\n\nImages vary from rich, full-color images, to monochrome images, to symbols and glyphs only.\n\nFor example, a small system widget appears as follows:\n\nOn the Home Screen of iPhone and iPad, the widget takes on a rich, full color appearance that supports Light and Dark Mode.\n\nOn the Lock Screen of iPad, the widget takes on a vibrant appearance.\n\nOn the Lock Screen of iPhone in StandBy, the widget appears scaled up in size, and uses the vibrant appearance. When the ambient light falls below a threshold, StandBy in Night Mode renders widget content in a monochromatic red tint.\n\nStandBy\n\nNight Mode\n\nIn Notification Center on the Mac, the widget uses rich, full colors and supports both light and dark appearances.\n\nOn the Mac desktop, the widget uses rich, full colors when people interact with it. When people interact with apps instead, the widget uses vibrancy and a blurred background to recede.\n\nFull color appearance\nReceded appearance\n\nSimilarly, a rectangular accessory widget appears as follows:\n\nOn the Lock Screen of iPhone and iPad, it takes on a vibrant appearance.\n\nOn Apple Watch, the widget can appear as a watch complication in both full-color and tinted appearances, and it can also appear in the Smart Stack with a default material background, or custom background content.\n\niPhone Lock Screen\nWatch complication\nSmart Stack on Apple Watch\n\nThe following table lists the available rendering modes for various types and sizes of widgets. For developer guidance, see Preparing widgets for additional platforms, contexts, and appearances.\n\nWidget size\n\n\t\n\nFull color\n\n\t\n\nAccented\n\n\t\n\nVibrant (receded in macOS)\n\n\n\n\nSystem small\n\n\t\n\nYes\n\n\t\n\nNo\n\n\t\n\nYes\n\n\n\n\nSystem medium\n\n\t\n\nYes\n\n\t\n\nNo\n\n\t\n\nYes\n\n\n\n\nSystem large\n\n\t\n\nYes\n\n\t\n\nNo\n\n\t\n\nYes\n\n\n\n\nSystem extra large\n\n\t\n\nYes\n\n\t\n\nNo\n\n\t\n\nYes\n\n\n\n\nAccessory circular\n\n\t\n\nNo\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nAccessory corner\n\n\t\n\nNo\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nAccessory rectangular\n\n\t\n\nYes\n\n\t\n\nYes\n\n\t\n\nYes\n\n\n\n\nAccessory inline\n\n\t\n\nNo\n\n\t\n\nYes\n\n\t\n\nYes\n\nSupport Dark Mode. Ideally, a widget looks great in both the light and dark appearances. In general, avoid displaying dark text on a light background for the dark appearance, or light text on a dark background for the light appearance. When you use the semantic system colors for text and backgrounds, the colors dynamically adapt to the current appearance. You can also support different appearances by putting color variants in your asset catalog. For guidance, see Dark Mode; for developer guidance, see Asset management and Supporting Dark Mode in Your Interface.\n\nSupport StandBy and Night Mode. In StandBy, the system displays two small system family widgets side-by-side, scaled up so they fill the Lock Screen. Widgets that appear in StandBy typically don’t use rich images or color to convey meaning but instead make use of the additional space by scaling up and rearranging text so people can glance at the widget content from a greater distance. To seamlessly blend with the black background, don’t use background colors for your widget when it appears in StandBy.\n\nCorrect usage\nIncorrect usage\n\nIn Night Mode, the system applies a red tint to widgets.\n\nNight Mode\n\nAdjust colors and images for the vibrant rendering mode. The system renders widgets on the Lock Screen and on the Mac desktop using a vibrant, blurred appearance. The opacity of pixels within your image determines the strength of the blurred material effect. Fully transparent pixels let the background wallpaper pass through as–is. When creating assets for the vibrant rendering mode, render content like images, numbers, or text at full opacity. The brightness of pixels determines how vibrant they appear on the Lock Screen: Brighter gray values provide more contrast, and darker values provide less contrast. To establish hierarchy, use white or light gray for the most prominent content and darker grayscale values for secondary elements.\n\nTo make sure images look great in the vibrant rendering mode:\n\nConfirm that image content has sufficient contrast in grayscale.\n\nUse opaque grayscale values, rather than opacities of white, to achieve the best vibrant material effect.\n\nSupport both full color and vibrancy for widgets on the Mac desktop. Widgets that people place on the Mac desktop use rich, full colors when people interact with them; when people switch to using apps, widgets use a vibrant, monochromatic rendering that appears to recede. Be sure to prepare your widget to offer enough contrast to be glanceable and show its information when it takes on the vibrant appearance. Starting in macOS 14, people can also place iPhone widgets on the Mac, so you want to make sure your iPhone widgets support the vibrant appearance in macOS.\n\nPreviews and placeholders\n\nDesign a realistic preview to display in the widget gallery. Highlighting your widget’s capabilities — and clearly representing the experiences each widget type or size can provide — helps people make an informed decision. You can display real data in your widget preview, but if the data takes too long to generate or load, display realistic simulated data instead.\n\nDesign placeholder content that helps people recognize your widget. An installed widget displays placeholder content while its data loads. You can create an effective placeholder appearance by combining static interface components with semi-opaque shapes that stand in for dynamic content. For example, you can use rectangles of different widths to suggest lines of text, and circles or squares in place of glyphs and images.\n\nWrite a succinct description of your widget. The widget gallery displays descriptions that help people understand what each widget does. It generally works well to begin a description with an action verb — for example, “See the current weather conditions and forecast for a location” or “Keep track of your upcoming events and meetings.” Avoid including unnecessary phrases that reference the widget itself, like “This widget shows…,” “Use this widget to…,” or “Add this widget.” Use approachable language and sentence-style capitalization.\n\nGroup your widget’s sizes together, and provide a single description. If your widget is available in multiple sizes, group the sizes together so people don’t think each size is a different widget. Provide a single description of your widget — regardless of how many sizes you offer — to avoid repetition and to help people understand how each size provides a slightly different perspective on the same content and functionality.\n\nConsider coloring the Add button. After people choose your app in the widget gallery, an Add button appears below the group of widgets you offer. You can specify a color for this button to help remind people of your brand.\n\nPlatform considerations\n\nNo additional considerations for macOS. Not supported in tvOS or visionOS.\n\niOS and iPadOS\n\nWidgets on the Lock Screen are functionally similar to watch complications and follow design principles for Complications in addition to design principles for widgets. Both support Always-On displays and emphasize glanceable content within their limited space. Provide useful information in your Lock Screen widget, and don’t treat it only as an additional way for people to launch into your app. Additionally, the vibrant rendering mode that widgets on the Lock Screen use is similar to the accented rendering mode for watch complications because they both communicate information without relying on color only. In many cases, a design for complications also works well for widgets on the Lock Screen (and vice versa), so consider creating them in tandem.\n\nYour app can offer widgets on the Lock Screen in three different shapes: as inline text that appears above the clock, and as circular and rectangular shapes that appear below the clock.\n\niOS\n\nSupport Always-On display. Devices with Always-On display render widgets on the Lock Screen with reduced luminance. Use levels of gray that provide enough contrast in Always-On display, and make sure your content is legible.\n\nFor developer guidance, see Creating accessory widgets and watch complications, WidgetRenderingMode, and vibrant.\n\nwatchOS\n\nProvide a colorful background that conveys meaning. By default, widgets in the Smart Stack use a black background. Consider using a custom color that provides additional meaning. For example, the Stocks app uses a red background for falling stock values and a green background if a stock’s value rises.\n\nSpecifications\n\nAs you design your widgets, use the following values for guidance.\n\niOS widget dimensions\n\nScreen size (portrait, pt)\n\n\t\n\nSmall (pt)\n\n\t\n\nMedium (pt)\n\n\t\n\nLarge (pt)\n\n\t\n\nCircular (pt)\n\n\t\n\nRectangular (pt)\n\n\t\n\nInline (pt)\n\n\n\n\n430×932\n\n\t\n\n170x170\n\n\t\n\n364x170\n\n\t\n\n364x382\n\n\t\n\n76x76\n\n\t\n\n172x76\n\n\t\n\n257x26\n\n\n\n\n428x926\n\n\t\n\n170x170\n\n\t\n\n364x170\n\n\t\n\n364x382\n\n\t\n\n76x76\n\n\t\n\n172x76\n\n\t\n\n257x26\n\n\n\n\n414x896\n\n\t\n\n169x169\n\n\t\n\n360x169\n\n\t\n\n360x379\n\n\t\n\n76x76\n\n\t\n\n160x72\n\n\t\n\n248x26\n\n\n\n\n414x736\n\n\t\n\n159x159\n\n\t\n\n348x157\n\n\t\n\n348x357\n\n\t\n\n76x76\n\n\t\n\n170x76\n\n\t\n\n248x26\n\n\n\n\n393x852\n\n\t\n\n158x158\n\n\t\n\n338x158\n\n\t\n\n338x354\n\n\t\n\n72x72\n\n\t\n\n160x72\n\n\t\n\n234x26\n\n\n\n\n390x844\n\n\t\n\n158x158\n\n\t\n\n338x158\n\n\t\n\n338x354\n\n\t\n\n72x72\n\n\t\n\n160x72\n\n\t\n\n234x26\n\n\n\n\n375x812\n\n\t\n\n155x155\n\n\t\n\n329x155\n\n\t\n\n329x345\n\n\t\n\n72x72\n\n\t\n\n157x72\n\n\t\n\n225x26\n\n\n\n\n375x667\n\n\t\n\n148x148\n\n\t\n\n321x148\n\n\t\n\n321x324\n\n\t\n\n68x68\n\n\t\n\n153x68\n\n\t\n\n225x26\n\n\n\n\n360x780\n\n\t\n\n155x155\n\n\t\n\n329x155\n\n\t\n\n329x345\n\n\t\n\n72x72\n\n\t\n\n157x72\n\n\t\n\n225x26\n\n\n\n\n320x568\n\n\t\n\n141x141\n\n\t\n\n292x141\n\n\t\n\n292x311\n\n\t\n\nN/A\n\n\t\n\nN/A\n\n\t\n\nN/A\n\niPadOS widget dimensions\n\nScreen size (portrait, pt)\n\n\t\n\nTarget\n\n\t\n\nSmall (pt)\n\n\t\n\nMedium (pt)\n\n\t\n\nLarge (pt)\n\n\t\n\nExtra large (pt)\n\n\n\n\n768x1024\n\n\t\n\nCanvas\n\n\t\n\n141x141\n\n\t\n\n305.5x141\n\n\t\n\n305.5x305.5\n\n\t\n\n634.5x305.5\n\n\n\n\nDevice\n\n\t\n\n120x120\n\n\t\n\n260x120\n\n\t\n\n260x260\n\n\t\n\n540x260\n\n\n\n\n744x1133\n\n\t\n\nCanvas\n\n\t\n\n141x141\n\n\t\n\n305.5x141\n\n\t\n\n305.5x305.5\n\n\t\n\n634.5x305.5\n\n\n\n\nDevice\n\n\t\n\n120x120\n\n\t\n\n260x120\n\n\t\n\n260x260\n\n\t\n\n540x260\n\n\n\n\n810x1080\n\n\t\n\nCanvas\n\n\t\n\n146x146\n\n\t\n\n320.5x146\n\n\t\n\n320.5x320.5\n\n\t\n\n669x320.5\n\n\n\n\nDevice\n\n\t\n\n124x124\n\n\t\n\n272x124\n\n\t\n\n272x272\n\n\t\n\n568x272\n\n\n\n\n820x1180\n\n\t\n\nCanvas\n\n\t\n\n155x155\n\n\t\n\n342x155\n\n\t\n\n342x342\n\n\t\n\n715.5x342\n\n\n\n\nDevice\n\n\t\n\n136x136\n\n\t\n\n300x136\n\n\t\n\n300x300\n\n\t\n\n628x300\n\n\n\n\n834x1112\n\n\t\n\nCanvas\n\n\t\n\n150x150\n\n\t\n\n327.5x150\n\n\t\n\n327.5x327.5\n\n\t\n\n682x327.5\n\n\n\n\nDevice\n\n\t\n\n132x132\n\n\t\n\n288x132\n\n\t\n\n288x288\n\n\t\n\n600x288\n\n\n\n\n834x1194\n\n\t\n\nCanvas\n\n\t\n\n155x155\n\n\t\n\n342x155\n\n\t\n\n342x342\n\n\t\n\n715.5x342\n\n\n\n\nDevice\n\n\t\n\n136x136\n\n\t\n\n300x136\n\n\t\n\n300x300\n\n\t\n\n628x300\n\n\n\n\n954x1373 *\n\n\t\n\nCanvas\n\n\t\n\n162x162\n\n\t\n\n350x162\n\n\t\n\n350x350\n\n\t\n\n726x350\n\n\n\n\nDevice\n\n\t\n\n162x162\n\n\t\n\n350x162\n\n\t\n\n350x350\n\n\t\n\n726x350\n\n\n\n\n970x1389 *\n\n\t\n\nCanvas\n\n\t\n\n162x162\n\n\t\n\n350x162\n\n\t\n\n350x350\n\n\t\n\n726x350\n\n\n\n\nDevice\n\n\t\n\n162x162\n\n\t\n\n350x162\n\n\t\n\n350x350\n\n\t\n\n726x350\n\n\n\n\n1024x1366\n\n\t\n\nCanvas\n\n\t\n\n170x170\n\n\t\n\n378.5x170\n\n\t\n\n378.5x378.5\n\n\t\n\n795x378.5\n\n\n\n\nDevice\n\n\t\n\n160x160\n\n\t\n\n356x160\n\n\t\n\n356x356\n\n\t\n\n748x356\n\n\n\n\n1192x1590 *\n\n\t\n\nCanvas\n\n\t\n\n188x188\n\n\t\n\n412x188\n\n\t\n\n412x412\n\n\t\n\n860x412\n\n\n\n\nDevice\n\n\t\n\n188x188\n\n\t\n\n412x188\n\n\t\n\n412x412\n\n\t\n\n860x412\n\n* When Display Zoom is set to More Space.\n\nwatchOS widget dimensions\n\nApple Watch size\n\n\t\n\nSize of a widget in the Smart Stack (pt)\n\n\n\n\n40mm\n\n\t\n\n304x139\n\n\n\n\n41mm\n\n\t\n\n330x145\n\n\n\n\n44mm\n\n\t\n\n346x153\n\n\n\n\n45mm\n\n\t\n\n368x161\n\n\n\n\n49mm\n\n\t\n\n382x163\n\nResources\nRelated\n\nLayout\n\nDeveloper documentation\n\nWidgetKit\n\nDeveloping a WidgetKit strategy — WidgetKit\n\nVideos\nBring widgets to life\nBring widgets to new places\nPrinciples of great widgets\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance to include widgets in watchOS, widgets on the iPad Lock Screen, and updates for iOS 17, iPadOS 17, and macOS 14.\n\n\n\n\nNovember 3, 2022\n\n\t\n\nAdded guidance for widgets on the iPhone Lock Screen and updated design comprehensives for iPhone 14, iPhone 14 Pro, and iPhone 14 Pro Max."
  },
  {
    "title": "Nearby interactions",
    "url": "https://developer.apple.com/design/human-interface-guidelines/nearby-interactions",
    "html": "Nearby interactions\nNearby interactions support on-device experiences that integrate the presence of people and objects in the nearby environment.\n\nA great nearby interaction feels intuitive and natural to people, because it builds on their innate awareness of the world around them. For example, a person playing music on their iPhone can continue listening on their HomePod mini when they bring the devices close together, simply by transferring the audio output from their iPhone to the HomePod mini.\n\nNearby interactions are available on devices that support Ultra Wideband technology (to learn more, see Ultra Wideband availability), and rely on the Nearby Interaction framework. Before participating in nearby interaction experiences, people grant permission for their device to interact while they’re using your app. The Nearby Interaction APIs help you preserve people’s privacy by relying on randomly generated device identifiers that last only as long as the interaction session your app initiates.\n\nBest practices\n\nConsider a task from the perspective of the physical world to find inspiration for a nearby interaction. For example, although people can easily use your app’s UI to transfer a song from their iPhone to their HomePod mini, initiating the transfer by bringing the devices close together makes the task feel rooted in the physical world. Discovering the physical actions that inform the concept of a task can help you create an engaging experience that makes performing it feel easy and natural.\n\nUse distance, direction, and context to inform an interaction. Although your app may get information from a variety of sources, prioritizing nearby, contextually relevant information can help you deliver experiences that feel organic. For example, if people want to share content with a friend in a crowded room, the iOS share sheet can suggest a likely recipient by using on-device knowledge about the person’s most frequent and recent contacts. Combining this knowledge with information from nearby devices that include the U1 chip can let the share sheet improve the experience by suggesting the closest contact the person is facing.\n\nConsider how changes in physical distance can guide a nearby interaction. In the physical world, people generally expect their perception of an object to sharpen as they get closer to it. A nearby interaction can mirror this experience by providing feedback that changes with the proximity of an object. For example, when people use iPhone to find an AirTag, the display transitions from a directional arrow to a pulsing circle as they get closer.\n\nProvide continuous feedback. Continuous feedback reflects the dynamism of the physical world and strengthens the connection between a nearby interaction and the task people are performing. For example, when looking for a lost item in Find My, people get continuous updates that communicate the item’s direction and proximity. Keep people engaged by providing uninterrupted feedback that responds to their movements.\n\nConsider using multiple feedback types to create a holistic experience. Fluidly transitioning among visual, audible, and haptic feedback can help a nearby interaction’s task feel more engaging and real. Using more than one type of feedback also lets you vary the experience to coordinate with both the task and the current context. For example, while people are interacting with the device screen, visual feedback makes sense; while people are interacting with their environment, audible and haptic feedback often work better.\n\nAvoid using a nearby interaction as the only way to perform a task. You can’t assume that everyone can experience a nearby interaction, so it’s essential to provide alternative ways to get things done in your app.\n\nDevice usage\n\nEncourage people to hold the device in portrait orientation. Holding a device in landscape can decrease the accuracy and availability of information about the distance and relative direction of other devices. If you support only portrait orientation while your nearby interaction feature runs, prefer giving people implicit, visual feedback on how to hold the device for an optimal experience; when possible, avoid explicitly telling people to hold the device in portrait.\n\nDesign for the device’s directional field of view. Nearby interaction relies on a hardware sensor with a specific field of view similar to that of the Ultra Wide camera in iPhone 11 and later. If a participating device is outside of this field of view, your app might receive information about its distance, but not its relative direction.\n\nHelp people understand how intervening objects can affect the nearby interaction experience in your app. When other people, animals, or sufficiently large objects come between two participating devices, the accuracy or availability of distance and direction information can decrease. Consider adding advice on avoiding this situation to onboarding or tutorial content you present.\n\nPlatform considerations\n\nNo additional considerations for iPadOS. Not supported in macOS, tvOS, or visionOS.\n\niOS\n\nOn iPhone, Nearby Interaction APIs provide a peer device’s distance and direction.\n\nwatchOS\n\nOn Apple Watch, Nearby Interaction APIs provide a peer device’s distance. Also, all watchOS apps participating in a nearby interaction experience must be in the foreground.\n\nResources\nRelated\n\nFeedback\n\nDeveloper documentation\n\nNearby Interaction\n\nVideos\nDesign for spatial interaction\nMeet Nearby Interaction\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nChanged page title from Spatial interactions."
  },
  {
    "title": "Designing for tvOS",
    "url": "https://developer.apple.com/design/human-interface-guidelines/designing-for-tvos",
    "html": "Designing for tvOS\nPeople enjoy the vibrant content, immersive experiences, and streamlined interactions that tvOS delivers in media and games, as well as in fitness, education, and home utility apps.\n\nAs you begin designing your app or game for tvOS, start by understanding the following fundamental device characteristics and patterns that distinguish the tvOS experience. Using these characteristics and patterns to inform your design decisions can help you provide an app or game that tvOS users appreciate.\n\nDisplay. A TV typically has a very large, high-resolution display.\n\nErgonomics. Although people generally remain many feet away from their stationary TV — often 8 feet or more — they sometimes continue to interact with content as they move around the room.\n\nInputs. People can use a remote, a game controller, their voice, and apps running on their other devices to interact with Apple TV.\n\nApp interactions. People can get deeply immersed in a single experience — often lasting hours — but they also appreciate using a picture-in-picture view to simultaneously follow an alternative app or video.\n\nSystem features. Apple TV users expect their apps and games to integrate well with the following system experiences.\n\nIntegrating with the TV app\n\nSharePlay\n\nTop Shelf\n\nTV provider accounts\n\nBest practices\n\nGreat tvOS experiences integrate the platform and device capabilities that people value most. To help your experience feel at home in tvOS, prioritize the following ways to incorporate these features and capabilities.\n\nSupport powerful, delightful interactions through the fluid, familiar gestures people make with the Siri Remote.\n\nEmbrace the tvOS focus system, letting it gently highlight and expand onscreen items as people move among them, helping them know what to do and where they are at all times.\n\nDeliver beautiful, edge-to-edge artwork, subtle and fluid animations, and engaging audio, wrapping people in a rich, cinematic experience that’s clear, legible, and captivating from across the room.\n\nEnhance multiuser support by making sign-in easy and infrequent, handling shared sign-in, and automatically switching profiles when people change the current viewer.\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nPlanning your tvOS app\n\nVideos\nDeliver a great playback experience on tvOS\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nRefined best practices for multiuser support."
  },
  {
    "title": "Designing for watchOS",
    "url": "https://developer.apple.com/design/human-interface-guidelines/designing-for-watchos",
    "html": "Designing for watchOS\nWhen people glance at their Apple Watch, they know they can access essential information and perform simple, timely tasks whether they’re stationary or in motion.\n\nAs you begin designing your app for Apple Watch, start by understanding the following fundamental device characteristics and patterns that distinguish the watchOS experience. Using these characteristics and patterns to inform your design decisions can help you provide an app that Apple Watch users appreciate.\n\nDisplay. The small Apple Watch display fits on the wrist while delivering an easy-to-read, high-resolution experience.\n\nErgonomics. Because people wear Apple Watch, they’re usually no more than a foot away from the display as they raise their wrist to view it and use their opposite hand to interact with the device. In addition, the Always On display lets people view information on the watch face when they drop their wrist.\n\nInputs. People can navigate vertically or inspect data by turning the Digital Crown, which offers consistent control on the watch face, the Home Screen, and within apps. They can provide input even while they’re in motion with standard touchscreen gestures like tap, swipe, and drag. Pressing the Action button initiates an essential action without looking at the screen, and using shortcuts helps people perform their routine tasks quickly and easily. People can also take advantage of data that device features provide, such as GPS, sensors for blood oxygen and heart function, and the altimeter, accelerometer, and gyroscope.\n\nApp interactions. People glance at the Always On display many times throughout the day, performing concise app interactions that can last for less than a minute each. People frequently use a watchOS app’s related experiences — like complications, notifications, and Siri interactions — more than they use the app itself.\n\nSystem features. watchOS provides several features that help people interact with the system and their apps in familiar, consistent ways.\n\nComplications\n\nNotifications\n\nAlways On\n\nWatch faces\n\nBest practices\n\nGreat Apple Watch experiences are streamlined and specialized, and integrate the platform and device capabilities that people value most. To help your experience feel at home in watchOS, prioritize the following ways to incorporate these features and capabilities.\n\nSupport quick, glanceable, single-screen interactions that deliver critical information succinctly and help people perform targeted actions with a simple gesture or two.\n\nMinimize the depth of hierarchy in your app’s navigation, and use the Digital Crown to provide vertical navigation for scrolling or switching between screens.\n\nPersonalize the experience by proactively anticipating people’s needs and using on-device data to provide actionable content that’s relevant in the moment or very soon.\n\nUse complications to provide relevant, potentially dynamic data and graphics right on the watch face where people can view them on every wrist raise and tap them to dive straight into your app.\n\nUse notifications to deliver timely, high-value information and let people perform important actions without opening your app.\n\nUse background content such as color to convey useful supporting information, and use materials to illustrate hierarchy and a sense of place.\n\nSupport Siri to help people access shortcuts on the Siri watch face.\n\nDesign your app to function independently, complementing your notifications and complications by providing additional details and functionality.\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nPlanning your watchOS app\n\nVideos\nDesign and build apps for watchOS 10\nDesign widgets for the Smart Stack on Apple Watch\nUpdate your app for watchOS 10\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nEnhanced guidance for providing a glanceable, focused app experience, and emphasized the importance of the Digital Crown in navigation."
  },
  {
    "title": "Virtual keyboards",
    "url": "https://developer.apple.com/design/human-interface-guidelines/virtual-keyboards",
    "html": "Virtual keyboards\nIn iOS, iPadOS, tvOS, and visionOS, the system provides various types of virtual keyboards people can use to enter data.\n\nA virtual keyboard can provide a specific set of keys that are optimized for the current task; for example, a keyboard that supports entering email addresses can include the “@” character and a period or even “.com”. A virtual keyboard doesn’t support keyboard shortcuts.\n\nWhen it makes sense in your app, you can replace the system-provided keyboard with a custom view that supports app-specific data entry. In iOS, iPadOS, and tvOS, you can also create an app extension that offers a custom keyboard people can install and use in place of the standard keyboard.\n\nBest practices\n\nChoose a keyboard that matches the type of content people are editing. For example, you can help people enter numeric data by providing the numbers and punctuation keyboard. When you specify a semantic meaning for a text input area, the system can automatically provide a keyboard that matches the type of input you expect, potentially using this information to refine the keyboard corrections it offers. For developer guidance, see UIKeyboardType and UITextContentType.\n\nAlphabet\nASCII capable\nASCII capable number pad\nDecimal pad\nDefault\nEmail address\nName phone pad\nNumber pad\nNumbers and punctuation\nPhone pad\nTwitter\nURL\nWeb search\n\nConsider customizing the Return key label if it helps clarify the text-entry experience. For example, it might make sense to use “Join” or “Done” instead of “Return.” For developer guidance, see UIReturnKeyType.\n\nCustom input views\n\nIn some cases, you can create an input view if you want to provide custom functionality that enhances data-entry tasks in your app. For example, Numbers provides a custom input view for entering numeric values while editing a spreadsheet. A custom input view replaces the system-provided keyboard while people are in your app. For developer guidance, see inputViewController. If you want to create a custom keyboard that people can use in other apps as well as yours, you need to create an app extension that people can install.\n\nMake sure your custom input view makes sense in the context of your app. In addition to making data entry simple and intuitive, you want people to understand the benefits of using your custom input view. Otherwise, they may wonder why they can’t regain the system keyboard while in your app.\n\nPlay the standard keyboard sound while people type. The keyboard sound provides familiar feedback when people tap a key on the system keyboard, so they’re likely to expect the same sound when they tap keys in your custom input view. People can turn keyboard sounds off for all keyboard interactions in Settings > Sounds. For developer guidance, see playInputClick().\n\nConsider providing a custom input accessory view. An input accessory view can appear above a virtual keyboard — whether standard or custom — providing app-specific functionality related to the data people are working with. For example, Numbers displays an input accessory view that helps people enter standard or custom calculations to apply to spreadsheet data. Avoid using an accessory view to display content that isn’t relevant to the current task. For developer guidance, see inputAccessoryView.\n\nCustom keyboards\n\nIn iOS, iPadOS, and tvOS, you can provide a custom keyboard that replaces the system keyboard by creating an app extension. An app extension is code you provide that people can install and use to extend the functionality of a specific area of the system; to learn more, see App extensions.\n\nAfter people choose your custom keyboard in Settings, they can use it for text entry within any app, except when editing secure text fields and phone number fields. People can choose multiple custom keyboards and switch between them at any time. For developer guidance, see Creating a custom keyboard.\n\nCustom keyboards make sense when you want to expose unique keyboard functionality systemwide, such as a novel way of inputting text or the ability to type in a language the system doesn’t support. If you want to provide a custom keyboard for people to use only while they’re in your app, consider creating a custom input view instead.\n\nProvide an obvious and easy way to switch between keyboards. People know that the Globe key on the standard keyboard — which replaces the Emoji key when multiple keyboards are available — quickly switches to other keyboards, and they expect a similarly intuitive experience in your keyboard.\n\nAvoid duplicating system-provided keyboard features. On some devices, the Emoji/Globe key and Dictation key automatically appear beneath the keyboard, even when people are using custom keyboards. Your app can’t affect these keys, and it’s likely to be confusing if you repeat them in your keyboard.\n\nConsider providing a keyboard tutorial in your app. People are used to the standard keyboard, and learning how to use a new keyboard can take time. You can help make the process easier by providing usage instructions in your app — for example, you might tell people how to choose your keyboard, activate it during text entry, use it, and switch back to the standard keyboard. Avoid displaying help content within the keyboard itself.\n\nPlatform considerations\n\nNot supported in macOS or watchOS.\n\niOS, iPadOS\n\nUse the keyboard layout guide to make the keyboard feel like an integrated part of your interface. Using the layout guide also helps you keep important parts of your interface visible while the virtual keyboard is onscreen. For guidance, see iOS keyboard layout guide.\n\nThe keyboard layout guide helps ensure that app UI and the keyboard work well together.\n\nWithout the layout guide, the keyboard could make entering text more difficult.\n\nWithout the layout guide, the keyboard could make tapping a button more difficult.\n\ntvOS\n\ntvOS displays a linear virtual keyboard when people select a text field using the Siri Remote.\n\nNote\n\nA grid keyboard screen appears when people use devices other than the Siri Remote, and the layout of content automatically adapts to the keyboard.\n\nWhen people activate a digit entry view, tvOS displays a digit-specific keyboard. For guidance, see Digit entry views.\n\nvisionOS\n\nIn visionOS, the system-provided virtual keyboard supports both direct and indirect gestures and appears in a separate window that people can move where they want. You don’t need to account for the location of the keyboard in your layouts.\n\nPlay\nwatchOS\n\nOn Apple Watch, people can launch the Apple Continuity Keyboard, entering text from a nearby iOS device signed in to the same iCloud account.\n\nResources\nRelated\n\nEntering data\n\nKeyboards\n\nLayout\n\nDeveloper documentation\n\nUIKeyboardType — UIKit\n\nVideos\nDesign for spatial input\nDesign for spatial user interfaces\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nClarified the virtual keyboard’s support for direct and indirect gestures in visionOS.\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded artwork for visionOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nChanged page title from Onscreen keyboards and updated to include guidance for visionOS."
  },
  {
    "title": "Digital Crown",
    "url": "https://developer.apple.com/design/human-interface-guidelines/digital-crown",
    "html": "Digital Crown\nThe Digital Crown is an important hardware input for Apple Vision Pro and Apple Watch.\n\nOn both Apple Vision Pro and Apple Watch, people can use the Digital Crown to interact with the system; on Apple Watch, people can also use the Digital Crown to interact with apps.\n\nThe Digital Crown on Apple Vision Pro\n\nThe Digital Crown on Apple Watch\n\nApple Vision Pro\n\nOn Apple Vision Pro, people use the Digital Crown to:\n\nAdjust volume\n\nAdjust the level of immersion in a portal or an Environment\n\nRecenter content so it’s in front of them\n\nOpen Accessibility settings\n\nExit an app and return to the Home View\n\nNote that in a fully immersive app (that is, an app that uses FullImmersionStyle), people can use the Digital Crown to exit the app, but not to affect the level of immersion. To learn more, see Immersive experiences.\n\nImportant\n\nYou don’t receive direct information from the Digital Crown, no matter how a person uses it.\n\nApple Watch\n\nAs people turn the Digital Crown, it generates information you can use to enhance or facilitate interactions with your app, like scrolling or operating standard or custom controls.\n\nStarting with watchOS 10, the Digital Crown takes on an elevated role as the primary input for navigation. On the watch face, people turn the Digital Crown to view widgets in the Smart Stack, and on the Home Screen, people use it to move vertically through their collection of apps. Within apps, people turn the Digital Crown to switch between vertically paginated tabs, and to scroll through list views and variable height pages.\n\nBeyond its use for navigation, turning the Digital Crown generates information you can use to enhance or facilitate interactions with your app, such as inspecting data or operating standard or custom controls.\n\nNote\n\nApps don’t respond to presses on the Digital Crown because watchOS reserves these interactions for system-provided functionality like revealing the Home Screen.\n\nMost Apple Watch models provide haptic feedback for the Digital Crown, which gives people a more tactile experience as they scroll through content. By default, the system provides linear haptic detents — or taps — as people turn the Digital Crown a specific distance. Some system controls, like table views, provide detents as new items scroll onto the screen.\n\nAnchor your app’s navigation to the Digital Crown. Starting with watchOS 10, turning the Digital Crown is the main way people navigate within and between apps. List, tab, and scroll views are vertically oriented, allowing people to use the Digital Crown to easily move between the important elements of your app’s interface. When anchoring interactions to the Digital Crown, also be sure to back them up with corresponding touch screen interactions.\n\nConsider using the Digital Crown to inspect data in contexts where navigation isn’t necessary. In contexts where the Digital Crown doesn’t need to navigate through lists or between pages, it’s a great tool to inspect data in your app. For example, in World Clock, turning the Digital Crown advances the time of day at a selected location, allowing people to compare various times of day to their current time.\n\nProvide visual feedback in response to Digital Crown interactions. For example, pickers change the currently displayed value as people use the Digital Crown. If you track turns directly, use this data to update your interface programmatically. If you don’t provide visual feedback, people are likely to assume that turning the Digital Crown has no effect in your app.\n\nUpdate your interface to match the speed with which people turn the Digital Crown. People expect turning the Digital Crown to give them precise control over an interface, so it works well to use this speed to determine the speed at which you make changes. Avoid updating content at a rate that makes it difficult for people to select values.\n\nUse the default haptic feedback when it makes sense in your app. If haptic feedback doesn’t feel right in the context of your app — for example, if the default detents don’t match your app’s animation — turn off the detents. You can also adjust the haptic feedback behavior for tables, letting them use linear detents instead of row-based detents. For example, if your table has rows with significantly different heights, linear detents may give people a more consistent experience.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, or tvOS.\n\nResources\nRelated\n\nFeedback\n\nAction button\n\nImmersive experiences\n\nDeveloper documentation\n\nWKCrownDelegate — WatchKit\n\nVideos\nDesign considerations for vision and motion\nDesign for spatial input\nMeet watchOS 10\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded artwork for Apple Vision Pro and Apple Watch, and clarified that visionOS apps don’t receive direct information from the Digital Crown.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nAdded guidelines emphasizing the central role of the Digital Crown for navigation."
  },
  {
    "title": "Apple Pencil and Scribble",
    "url": "https://developer.apple.com/design/human-interface-guidelines/apple-pencil-and-scribble",
    "html": "Apple Pencil and Scribble\nApple Pencil helps make drawing, handwriting, and marking effortless and natural, in addition to performing well as a pointer and UI interaction tool.\n\nApple Pencil is a versatile, intuitive tool for iPad apps that offers pixel‑level precision when jotting notes, sketching, painting, marking up documents, and more. Scribble lets people use Apple Pencil to enter text in any text field through fast, private, on-device handwriting recognition.\n\nBest practices\n\nSupport behaviors people intuitively expect when using a marking instrument. Most people have a lot of experience with real-world marking tools, and this knowledge informs their expectations when they use Apple Pencil with your app. To provide a delightful experience, think about the ways people interact with nondigital pencils, pens, and other marking instruments, and proactively support actions that people may naturally attempt. For example, people often want to write in the margins of documents or books.\n\nLet people choose when to switch between Apple Pencil and finger input. For example, if your app supports Apple Pencil for marking, also ensure that your app’s controls respond to Apple Pencil so people don’t have to switch to using their finger to activate them. In this scenario, a control that doesn’t support Apple Pencil input might seem to be unresponsive, giving the impression of a malfunction or low battery. (Scribble only supports Apple Pencil input.)\n\nLet people make a mark the moment Apple Pencil touches the screen. You want the experience of putting Apple Pencil to screen to mirror the experience of putting a classic pencil to paper, so it’s essential to avoid requiring people to tap a button or enter a special mode before they can make a mark.\n\nHelp people express themselves by responding to the way they use Apple Pencil. Apple Pencil can sense tilt (altitude), force (pressure), and orientation (azimuth). Use this information to affect the strokes Apple Pencil makes, such as by varying thickness and intensity. When responding to pressure, keep things simple and intuitive. For example, it feels natural to affect continuous properties — such as ink opacity or brush size — by varying the pressure.\n\nAltitude\n\nPressure\n\nAzimuth\n\nProvide visual feedback to indicate a direct connection with content. Make sure Apple Pencil appears to directly and immediately manipulate content it touches onscreen. Avoid letting Apple Pencil appear to initiate seemingly disconnected actions, or affect content on other parts of the screen.\n\nDesign a great left- and right-handed experience. Avoid placing controls in locations that may be obscured by either hand. If there’s a chance controls may become obscured, consider letting people reposition them.\n\nHover\n\nWith iPadOS 16 or later running on iPad Pro 11-inch (4th generation) or iPad Pro 12.9-inch (6th generation), the system can detect Apple Pencil (2nd generation) when it hovers up to 12 mm above the display.\n\nUse hover to help people predict what will happen when Apple Pencil touches the screen. For example, as people hold Apple Pencil above the screen, a hover preview can show the dimensions and color of the mark that the current tool can make. As much as possible, avoid continuously modifying the preview as people move Apple Pencil closer or farther from the screen. A preview that changes according to height is unlikely to clarify the mark Apple Pencil will make, and frequent visual variations can be very distracting to people.\n\nAvoid using hover to initiate an action. Unlike tapping a button or marking the screen, hovering is a relatively imprecise motion that doesn’t require people to think about the actual distance between Apple Pencil and the display. You don’t want people to inadvertently perform an action — especially a destructive action that they might want to undo — just because they hold Apple Pencil near the screen.\n\nPrefer showing a preview value that’s near the middle in a range of dynamic values. Dynamic properties like opacity or flow can be difficult to depict at the highest or lowest ends of the spectrum. For example, previewing the appearance of a brush mark made with the maximum pressure could occlude the area in which people are marking; in contrast, depicting a mark made with the minimum pressure could be hard for people to detect, making the preview an inaccurate representation of an actual mark or even invisible.\n\nConsider using hover to support relevant interactions close to where people are marking. For example, you might use hover to display a contextual menu of tool sizes when people hold Apple Pencil above the screen and either double-tap it or press a modifier key on an attached keyboard. Revealing a menu near where people are marking lets them make choices without moving Apple Pencil or their hands to another part of the screen.\n\nPrefer showing hover previews for Apple Pencil, not for a pointing device. Although a pointing device can also respond to hover gestures, it might be confusing to provide the same visual feedback for both devices. If it makes sense in your app, you can restrict your hover preview to Apple Pencil only. For developer guidance, see Adopting hover support for Apple Pencil.\n\nDouble tap\n\nRespect people’s settings for the double-tap gesture when they make sense in your app. By default, Apple Pencil (2nd generation) responds to the double-tap gesture by toggling between the current tool and the eraser, but people can set the gesture to toggle between the current and previous tool, show and hide the color picker, or do nothing at all. If your app supports these behaviors, let people use their preferred gestures to perform them. If the systemwide double-tap settings don’t make sense in your app, you can still use the gesture to change the mode of Apple Pencil (2nd generation). For example, a 3D app that offers a mesh-editing tool could use double-tap to toggle between the tool’s raise and lower modes.\n\nGive people a way to specify custom double-tap behavior if necessary. If you offer custom double-tap behavior in addition to some or all of the default behaviors, provide a control that lets people choose the custom behavior mode. People need to know which mode they’re in; otherwise, they may get confused when your app responds differently to their interactions. In this scenario, make sure it’s easy for people to discover the custom behavior your app supports, but don’t turn it on by default.\n\nAvoid using the double-tap gesture to perform an action that modifies content. It’s possible for people to double-tap accidentally, which means that they may not even be aware that your app has performed the action. Prefer using double-tap to perform actions that are easy for people to undo. In particular, avoid using double-tap to perform a potentially destructive action that might result in data loss.\n\nScribble\n\nWith Scribble and Apple Pencil, people can simply write wherever text is accepted in your app — they don’t have to tap or switch modes first. Because Scribble is fully integrated into iPadOS 14 and later, it’s available to all apps by default.\n\nMake text entry feel fluid and effortless. By default, Scribble works in all standard text components — such as text fields, text views, search fields, and editable fields in web content — except password fields. If you use a custom text field in your app, avoid making people tap or select it before they can begin writing.\n\nMake Scribble available everywhere people might want to enter text. Unlike using the keyboard, using Apple Pencil encourages people to treat the screen the way they treat a sheet of paper. Help strengthen this perception in your app by making Scribble consistently available in places where text entry seems natural. For example, in Reminders, it’s natural for people to create a new reminder by writing it in the blank space below the last item, even though the area doesn’t contain a text field. For developer guidance, see UIIndirectScribbleInteraction.\n\nAvoid distracting people while they write. Some text field behaviors work well for keyboard input, but can disrupt the natural writing experience that Apple Pencil provides. For example, it’s best to avoid displaying autocompletion text as people write in a text field because the suggestions can visually interfere with their writing. It’s also a good idea to hide a field’s placeholder text the moment people begin to write so that their input doesn’t appear to overlap it.\n\nWhile people are writing in a text field, make sure it remains stationary. In some cases, it can make sense to move a text field when it becomes focused: for example, a search field might move to make more room to display results. Such a movement is fine when people are using the keyboard, but when they’re writing it can make them feel like they’ve lost control of where their input is going. If you can’t prevent a text field from moving or resizing, consider delaying the change until people pause their writing.\n\nPrevent autoscrolling text while people are writing and editing in a text field. When transcribed text autoscrolls, people might try to avoid writing on top of it. Worse, if text scrolls while people are using Apple Pencil to select it, they might select a different range of text than they want.\n\nGive people enough space to write. A small text field can feel uncomfortable to write in. When you know that Apple Pencil input is likely, improve the writing experience in your app by increasing the size of the text field before people begin to write in it or when they pause writing; avoid resizing a text field while people are writing. For developer guidance, see UIScribbleInteraction.\n\nCustom drawing\n\nUsing PencilKit, you can let people take notes, annotate documents and images, and draw with the same low-latency experience that iOS provides. PencilKit also makes it easy to create a custom drawing canvas in your app and offer a state-of-the-art tool picker and ink palette.\n\nHelp people draw on top of existing content. By default, the colors on your PencilKit canvas dynamically adjust to Dark Mode, so people can create content in either mode and the results will look great in both. However, when people draw on top of existing content like a PDF or a photo, you want to prevent the dynamic adjustment of colors so that the markup remains sharp and visible.\n\nMake sure the tool picker doesn’t obscure content when your app runs in a compact environment. In a regular environment, the tool picker floats above the content so people can move it out of the way, but in a compact environment the tool picker stays pinned to the bottom edge of the screen. To avoid obscuring people’s content, you can adjust the content view’s frame or the scroll view insets to account for the height of the tool picker.\n\nConsider displaying custom undo and redo buttons when your app runs in a compact environment. In a regular environment, the tool picker includes undo and redo buttons, but in a compact environment it doesn’t. In a compact environment, you could display undo and redo buttons in a navigation bar or toolbar. You might also consider supporting the standard 3-finger undo/redo gesture, so people can use it in any environment. For guidance, see Undo and redo.\n\nPlatform considerations\n\nNot supported in iOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nEntering data\n\nDeveloper documentation\n\nPencil interactions — UIKit\n\nUIScribbleInteraction — UIKit\n\nVideos\nMeet Scribble for iPad\nWhat's new in PencilKit\nInspect, modify, and construct PencilKit drawings\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nUpdated artwork.\n\n\n\n\nNovember 3, 2022\n\n\t\n\nAdded guidelines for using hover to enhance your app."
  },
  {
    "title": "Entering data",
    "url": "https://developer.apple.com/design/human-interface-guidelines/entering-data",
    "html": "Entering data\nWhen you need information from people, design ways that make it easy for them to provide it without making mistakes.\n\nEntering information can be a tedious process regardless of the interaction methods people use. Improve the experience by:\n\nPre-gathering as much information as possible to minimize the amount of data that people need to supply\n\nSupporting all available input methods so people can choose the method that works for them\n\nBest practices\n\nGet information from the system whenever possible. Don’t ask people to enter information that you can gather automatically — such as from settings — or by getting their permission, such as their location or calendar information.\n\nBe clear about the data you need. For example, you might display a prompt in a text field — like “username@company.com” — or provide an introductory label that describes the information, like “Email.” You can also prefill fields with reasonable default values, which can minimize decision making and speed data entry.\n\nUse a secure text-entry field when appropriate. If your app or game needs sensitive data, use a field that obscures people’s input as they enter it, typically by displaying a small filled circle symbol for each character. For developer guidance, see SecureField. In tvOS, you can also configure a digit entry view to obscure the numerals people enter (for developer guidance, see isSecureDigitEntry). When you use the system-provided text field in visionOS, the system shows the entered data to the wearer, but not to anyone else; for example, a secure text field automatically blurs when people use AirPlay to stream their content.\n\nNever prepopulate a password field. Always ask people to enter their password or use biometric or keychain authentication. For guidance, see Managing accounts.\n\nWhen possible, offer choices instead of requiring text entry. It’s usually easier and more efficient to choose from lists of options than to type information, even when a keyboard is conveniently available. When it makes sense, consider using a picker, menu, or other selection component to give people an easy way to provide the information you need.\n\nAs much as possible, let people provide data by dragging and dropping it or by pasting it. Supporting these interactions can ease data entry and make your experience feel more integrated with the rest of the system.\n\nDynamically validate field values. People can get frustrated when they have to go back and correct mistakes after filling out a lengthy form. When you verify values as soon as people enter them — and provide feedback as soon as you detect a problem — you give them the opportunity to correct errors right away. For numeric data in particular, consider using a number formatter, which automatically configures a text field to accept only numeric values. You can also configure a formatter to display the value in a specific way, such as with a certain number of decimal places, as a percentage, or as currency.\n\nWhen data entry is necessary, make sure people understand that they must provide the required data before they can proceed. For example, if you include a Next or Continue button after a set of text fields, make the button available only after people enter the data you require.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nmacOS\n\nConsider using an expansion tooltip to show the full version of clipped or truncated text in a field. An expansion tooltip behaves like a regular tooltip, appearing when the pointer rests on top of a field. Apps running in macOS — including iOS and iPadOS apps running on a Mac — can use an expansion tooltip to help people view the complete data they entered when a text field is too small to display it. For guidance, see Offering help > macOS, visionOS.\n\nResources\nRelated\n\nText fields\n\nVirtual keyboards\n\nKeyboards\n\nDeveloper documentation\n\nInput events — SwiftUI\n\nVideos\nWhat's new in UIKit\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "The menu bar",
    "url": "https://developer.apple.com/design/human-interface-guidelines/the-menu-bar",
    "html": "The menu bar\nOn a Mac, the menu bar at the top of the screen displays the top-level menus in your app or game, which typically include both system-provided menus and custom ones.\n\nMac users are very familiar with the macOS menu bar, and they rely on it to help them learn what an app does and find the commands they need. To help your app or game feel at home in macOS, it’s essential to provide a consistent menu bar experience.\n\nNote\n\nIn iPadOS, an app’s keyboard shortcuts can appear in the shortcut interface that displays when people hold the Command key on an attached hardware keyboard. The shortcut interface is similar in appearance and organization to the menu bar in macOS — and it can contain familiar menu items like New Window and Copy — but unlike the menu bar, it doesn’t contain every command an app supports. For guidance, see Keyboard shortcuts.\n\nMenus in the menu bar share most of the appearance and behavior characteristics that all menu types have. To learn about menus in general — and how organize and label menu items — see Menus.\n\nAnatomy\n\nThe Apple menu, which is always the first item on the leading side of the menu bar, includes system-defined menu items that are always available. You can’t modify or remove the Apple menu.\n\nWhen present in the menu bar, the following menus appear after the Apple menu in the order listed below.\n\nAppName (you supply a short version of your app’s name for this menu’s title)\n\nFile\n\nEdit\n\nFormat\n\nView\n\nApp-specific menus, if any\n\nWindow\n\nHelp\n\nSpace permitting, the system can display menu bar extras in the trailing end of the menu bar. A menu bar extra provides a menu of app- or system-defined items that people can access in most contexts. With the exception of essential menu bar extras, like Clock, people choose the menu bar extras they want to keep in the menu bar. For example, people might want to include the system-provided Bluetooth menu bar extra to help them manage Bluetooth connections at any time. For guidance, see Menu bar extras.\n\nWhen menu bar space is constrained, the system prioritizes the display of menus and essential menu bar extras. To ensure that menus remain readable, the system may decrease the space between the titles, truncating them if necessary.\n\nWhen people enter full-screen mode, the menu bar typically hides until they reveal it by moving the pointer to the top of the screen. For guidance, see Going full screen.\n\nBest practices\n\nSupport the system-defined menus and menu items that are relevant in your app. People generally expect to find familiar menus and menu items in the apps and games they use. In many cases, the system implements the functionality of standard menu items so you don’t have to. For example, when people select text in a standard text field, the system makes the Edit > Copy menu item available.\n\nPrefer using the default ordering of menu bar menus and the default ordering of menu items within each menu. It’s easier for people to find what they’re looking for when your menus and menu items use the ordering they expect.\n\nSupport the keyboard shortcuts defined for the standard menu items you include. People expect to use the keyboard shortcuts they already know for standard menu items, like Copy, Cut, Paste, Save, and Print. Define custom keyboard shortcuts only when necessary.\n\nPrefer short, one-word menu titles. Various factors — like different display sizes and the presence of menu bar extras — can affect the spacing and appearance of your menus. One-word menu titles work especially well in the menu bar because they take little space and are easy for people to scan. Consider the following guidance as you write a menu title.\n\nAim for a title that helps people predict the items within the menu. For example, a menu labeled “Font” implies that it lists items for adjusting text attributes, not for performing edit actions like copy and paste.\n\nAvoid mixing text with symbols or interface icons in a menu title. Only a menu bar extra uses a symbol or icon as a title.\n\nUse title-style capitalization if you need to use more than one word in the menu title.\n\nApp menu\n\nThe app menu lists items that apply to your app or game as a whole, rather than to a specific task, document, or window. To help people quickly identify the active app, the menu bar displays your app name in bold.\n\nThe app menu typically contains the following menu items listed in the following order.\n\nMenu item\n\n\t\n\nAction\n\n\t\n\nGuidance\n\n\n\n\nAbout YourAppName\n\n\t\n\nDisplays the About window for your app, which includes copyright and version information\n\n\t\n\nPrefer a short name of 16 characters or fewer. Don’t include a version number.\n\n\n\n\nSettings…\n\n\t\n\nOpens your settings window.\n\n\t\n\nUse only for app-level settings. If you also offer document-specific settings, put them in the File menu.\n\n\n\n\nOptional app-specific items\n\n\t\n\nPerforms custom app-level setting or configuration actions\n\n\t\n\nList custom app-configuration items after the Settings item and within the same group.\n\n\n\n\nServices\n\n\t\n\nDisplays a submenu of services from the system and other apps that apply to the current context\n\n\t\n\n\n\n\nHide YourAppName\n\n\t\n\nHides your app and all of its windows, and then activates the most recently used app\n\n\t\n\nUse the same short app name you supply for the About item.\n\n\n\n\nHide Others\n\n\t\n\nHides all other open apps and their windows\n\n\t\n\n\n\n\nShow All\n\n\t\n\nShows all other open apps and their windows behind your app’s windows\n\n\t\n\n\n\n\nQuit YourAppName\n\n\t\n\nQuits your app. Pressing Option changes Quit YourAppName to Quit and Keep Windows.\n\n\t\n\nUse the same short app name you supply for the About item.\n\nDisplay the About menu item first. Include a separator after the About menu item so that it appears by itself in a group.\n\nFile menu\n\nThe File menu contains commands that help people manage the files or documents an app supports. If your app doesn’t handle any types of files, you can rename or eliminate this menu.\n\nThe File menu typically contains the following menu items listed in the following order.\n\nMenu item\n\n\t\n\nAction\n\n\t\n\nGuidance\n\n\n\n\nNew Item\n\n\t\n\nCreates a new document, file, or window\n\n\t\n\nFor Item, use a term that names the type of item your app creates. For example, Calendar uses Event and Calendar.\n\n\n\n\nOpen\n\n\t\n\nCan open the selected item or present an interface in which people select an item to open\n\n\t\n\nIf people need to select an item in a separate interface, an ellipsis follows the command to indicate that more input is required.\n\n\n\n\nOpen Recent\n\n\t\n\nDisplays a submenu that lists recently opened documents and files that people can select, and typically includes a Clear Menu item\n\n\t\n\nList document and filenames that people recognize in the submenu; don’t display file paths. List the documents in the order people last opened them, with the most recently opened document first.\n\n\n\n\nClose\n\n\t\n\nCloses the current window or document. Pressing Option changes Close to Close All. For a tab-based window, Close Tab replaces Close.\n\n\t\n\nIn a tab-based window, consider adding a Close Window item to let people close the entire window with one click or tap.\n\n\n\n\nClose Tab\n\n\t\n\nCloses the current tab in a tab-based window. Pressing Option changes Close Tab to Close Other Tabs.\n\n\t\n\n\n\n\nClose File\n\n\t\n\nCloses the current file and all its associated windows\n\n\t\n\nConsider supporting this menu item if your app can open multiple views of the same file.\n\n\n\n\nSave\n\n\t\n\nSaves the current document or file\n\n\t\n\nAutomatically save changes periodically as people work so they don’t need to keep choosing File > Save. For a new document, prompt people for a name and location. If you need to let people save a file in multiple formats, prefer a pop-up menu that lets people choose a format in the Save sheet.\n\n\n\n\nSave All\n\n\t\n\nSaves all open documents\n\n\t\n\n\n\n\nDuplicate\n\n\t\n\nDuplicates the current document, leaving both documents open. Pressing Option changes Duplicate to Save As.\n\n\t\n\nPrefer Duplicate to menu items like Save As, Export, Copy To, and Save To because these items don’t clarify the relationship between the original file and the new one.\n\n\n\n\nRename…\n\n\t\n\nLets people change the name of the current document\n\n\t\n\n\n\n\nMove To…\n\n\t\n\nPrompts people to choose a new location for the document\n\n\t\n\n\n\n\nExport As…\n\n\t\n\nPrompts people for a name, output location, and export file format. After exporting the file, the current document remains open; the exported file doesn’t open.\n\n\t\n\nReserve the Export As item for when you need to let people export content in a format your app doesn’t typically handle.\n\n\n\n\nRevert to\n\n\t\n\nWhen people turn on autosaving, displays a submenu that lists recent document versions and an option to display the version browser. After people choose a version to restore, it replaces the current document.\n\n\t\n\n\n\n\nPage Setup…\n\n\t\n\nOpens a panel for specifying printing parameters like paper size and printing orientation. A document can save the printing parameters that people specify.\n\n\t\n\nInclude the Page Setup item if you need to support printing parameters that apply to a specific document. Parameters that are global in nature, like a printer’s name, or that people change frequently, like the number of copies to print, belong in the Print panel.\n\n\n\n\nPrint…\n\n\t\n\nOpens the standard Print panel, which lets people print to a printer, send a fax, or save as a PDF\n\n\t\n\nEdit menu\n\nThe Edit menu lets people make changes to content in the current document or text container, and provides commands for interacting with the Clipboard. Because many editing commands apply to any editable content, the Edit menu is useful even in apps that aren’t document-based.\n\nDetermine whether Find menu items belong in the Edit menu. For example, if your app lets people search for files or other types of objects, Find menu items might be more appropriate in the File menu.\n\nThe Edit menu typically contains the following top-level menu items, listed in the following order.\n\nMenu item\n\n\t\n\nAction\n\n\t\n\nGuidance\n\n\n\n\nUndo\n\n\t\n\nReverses the effect of the previous user operation\n\n\t\n\nClarify the target of the undo. For example, if people just selected a menu item, you can append the item’s title, such as Undo Paste and Match Style. For a text entry operation, you might append the word Typing to give Undo Typing.\n\n\n\n\nRedo\n\n\t\n\nReverses the effect of the previous Undo operation\n\n\t\n\nClarify the target of the redo. For example, if people just reversed a menu item selection, you can append the item’s title, such as Redo Paste and Match Style. For a text entry operation, you might append the word Typing to give Redo Typing.\n\n\n\n\nCut\n\n\t\n\nRemoves the selected data and stores it on the Clipboard, replacing the previous contents of the Clipboard\n\n\t\n\n\n\n\nCopy\n\n\t\n\nDuplicates the selected data and stores it on the Clipboard\n\n\t\n\n\n\n\nPaste\n\n\t\n\nInserts the contents of the Clipboard at the current insertion point. The Clipboard contents remain unchanged, permitting people to choose Paste multiple times.\n\n\t\n\n\n\n\nPaste and Match Style\n\n\t\n\nInserts the contents of the Clipboard at the current insertion point, matching the style of the inserted text to the surrounding text\n\n\t\n\n\n\n\nDelete\n\n\t\n\nRemoves the selected data, but doesn’t place it on the Clipboard\n\n\t\n\nProvide a Delete menu item instead of an Erase or Clear menu item. Choosing Delete is the equivalent of pressing the Delete key, so it’s important for the naming to be consistent.\n\n\n\n\nSelect All\n\n\t\n\nHighlights all selectable content in the current document or text container\n\n\t\n\n\n\n\nFind\n\n\t\n\nDisplays a submenu containing menu items for performing search operations in the current document or text container. Standard submenus include: Find, Find and Replace, Find Next, Find Previous, Use Selection for Find, Jump to Selection\n\n\t\n\n\n\n\nSpelling and Grammar\n\n\t\n\nDisplays a submenu containing menu items for checking for and correcting spelling and grammar in the current document or text container. Standard submenus include: Show Spelling and Grammar, Check Document Now, Check Spelling While Typing, Check Grammar With Spelling, Correct Spelling Automatically\n\n\t\n\n\n\n\nSubstitutions\n\n\t\n\nDisplays a submenu containing items that let people toggle automatic substitutions while they type in a document or text container. Standard submenus include: Show Substitutions, Smart Copy/Paste, Smart Quotes, Smart Dashes, Smart Links, Data Detectors, Text Replacement\n\n\t\n\n\n\n\nTransformations\n\n\t\n\nDisplays a submenu containing items that transform selected text. Standard submenus include: Make Uppercase, Make Lowercase, Capitalize\n\n\t\n\n\n\n\nSpeech\n\n\t\n\nDisplays a submenu containing Start Speaking and Stop Speaking items, which control when the system audibly reads selected text\n\n\t\n\n\n\n\nStart Dictation\n\n\t\n\nOpens the dictation window and converts spoken words into text that’s added at the current insertion point. The system automatically adds the Start Dictation menu item at the bottom of the Edit menu.\n\n\t\n\n\n\n\nEmoji & Symbols\n\n\t\n\nDisplays a Character Viewer, which includes emoji, symbols, and other characters people can insert at the current insertion point. The system automatically adds the Emoji & Symbols menu item at the bottom of the Edit menu.\n\n\t\n\nFormat menu\n\nThe Format menu lets people adjust text formatting attributes in the current document or text container. You can exclude this menu if your app doesn’t support formatted text editing.\n\nThe Format menu typically contains the following top-level menu items, listed in the following order.\n\nMenu item\n\n\t\n\nAction\n\n\n\n\nFont\n\n\t\n\nDisplays a submenu containing items for adjusting font attributes of the selected text. Standard submenus include: Show Fonts, Bold, Italic, Underline, Bigger, Smaller, Show Colors, Copy Style, Paste Style\n\n\n\n\nText\n\n\t\n\nDisplays a submenu containing items for adjusting text attributes of the selected text. Standard submenus include: Align Left, Align Center, Justify, Align Right, Writing Direction, Show Ruler, Copy Ruler, Paste Ruler\n\nView menu\n\nThe View menu lets people customize the appearance of all an app’s windows, regardless of type.\n\nImportant\n\nThe View menu doesn’t include items for navigating between or managing specific windows; the Window menu provides these commands.\n\nProvide a View menu even if your app supports only a subset of the standard view functions. For example, if your app doesn’t include a tab bar, toolbar, or sidebar, but does support full-screen mode, provide a View menu that includes only the Enter/Exit Full Screen menu item.\n\nEnsure that each show/hide item title reflects the current state of the corresponding view. For example, when the toolbar is hidden, provide a Show Toolbar menu item; when the toolbar is visible, provide a Hide Toolbar menu item.\n\nThe View menu typically contains the following top-level menu items, listed in the following order.\n\nMenu item\n\n\t\n\nAction\n\n\n\n\nShow/Hide Tab Bar\n\n\t\n\nToggles the visibility of the tab bar above the body area in a tab-based window\n\n\n\n\nShow All Tabs/Exit Tab Overview\n\n\t\n\nEnters and exits a view (similar to Mission Control) that provides an overview of all open tabs in a tab-based window\n\n\n\n\nShow/Hide Toolbar\n\n\t\n\nIn a window that includes a toolbar, toggles the toolbar’s visibility\n\n\n\n\nCustomize Toolbar\n\n\t\n\nIn a window that includes a toolbar, opens a view that lets people customize toolbar items\n\n\n\n\nShow/Hide Sidebar\n\n\t\n\nIn a window that includes a sidebar, toggles the sidebar’s visibility\n\n\n\n\nEnter/Exit Full Screen\n\n\t\n\nIn an app that supports a full-screen experience, opens the window at full-screen size in a new space\n\nApp-specific menus\n\nYour app’s custom menus appear in the menu bar between the View menu and the Window menu. For example, Safari’s menu bar includes app-specific History and Bookmarks menus.\n\nProvide app-specific menus for custom commands. People look in the menu bar when searching for app-specific commands, especially when using an app for the first time. Even when commands are available elsewhere in your app, it’s important to list them in the menu bar. Putting commands in the menu bar makes them easier for people to find, lets you assign keyboard shortcuts to them, and makes them more accessible to people using Full Keyboard Access. Excluding commands from the menu bar — even infrequently used or advanced commands — risks making them difficult for everyone to find.\n\nAs much as possible, reflect your app’s hierarchy in app-specific menus. For example, Mail lists the Mailbox, Message, and Format menus in an order that mirrors the relationships of these items: mailboxes contain messages, and messages contain formatting.\n\nAim to list app-specific menus in order from most to least general or commonly used. People tend to expect menus in the leading end of a list to be more specialized than menus in the trailing end.\n\nWindow menu\n\nThe Window menu lets people navigate, organize, and manage an app’s windows.\n\nImportant\n\nThe Window menu doesn’t help people customize the appearance of windows or close them. To customize a window, people use commands in the View menu; to close a window, people choose Close in the File menu.\n\nProvide a Window menu even if your app has only one window. Include the Minimize and Zoom menu items so people using Full Keyboard Access can use the keyboard to invoke these functions.\n\nConsider including menu items for showing and hiding panels. A panel provides information, configuration options, or tools for interacting with content in a primary window, and typically appears only when people need it. There’s no need to provide access to the font panel or text color panel because the Format menu lists these panels.\n\nThe Window menu typically contains the following top-level menu items, listed in the following order.\n\nMenu item\n\n\t\n\nAction\n\n\t\n\nGuidance\n\n\n\n\nMinimize\n\n\t\n\nMinimizes the active window to the Dock. Pressing the Option key changes this item to Minimize All.\n\n\t\n\n\n\n\nZoom\n\n\t\n\nToggles between a predefined size appropriate to the window’s content and the window size people set. Pressing the Option key changes this item to Zoom All.\n\n\t\n\nAvoid using Zoom to enter or exit full-screen mode. The View menu supports these functions.\n\n\n\n\nShow Previous Tab\n\n\t\n\nShows the tab before the current tab in a tab-based window\n\n\t\n\n\n\n\nShow Next Tab\n\n\t\n\nShows the tab after the current tab in a tab-based window\n\n\t\n\n\n\n\nMove Tab to New Window\n\n\t\n\nOpens the current tab in a new window\n\n\t\n\n\n\n\nMerge All Windows\n\n\t\n\nCombines all open windows into a single tabbed window\n\n\t\n\n\n\n\nEnter/Exit Full Screen\n\n\t\n\nIn an app that supports a full-screen experience, opens the window at full-screen size in a new space\n\n\t\n\nInclude this item in the Window menu only if your app doesn’t have a View menu. In this scenario, continue to provide separate Minimize and Zoom menu items.\n\n\n\n\nBring All to Front\n\n\t\n\nBrings all an app’s open windows to the front, maintaining their onscreen location, size, and layering order. (Clicking the app icon in the Dock has the same effect.) Pressing the Option key changes this item to Arrange in Front, which brings an app’s windows to the front in a neatly tiled arrangement.\n\n\t\n\n\n\n\nName of an open app-specific window\n\n\t\n\nBrings the selected window to the front\n\n\t\n\nList the currently open windows in alphabetical order for easy scanning. Avoid listing panels or other modal views.\n\nHelp menu\n\nThe Help menu — located at the trailing end of the menu bar — provides access to an app’s help documentation. When you use the Help Book format for this documentation, macOS automatically includes a search field at the top of the Help menu.\n\nMenu item\n\n\t\n\nAction\n\n\t\n\nGuidance\n\n\n\n\nSend YourAppName Feedback to Apple\n\n\t\n\nOpens the Feedback Assistant, in which people can provide feedback.\n\n\t\n\n\n\n\nYourAppName Help\n\n\t\n\nWhen the content uses the Help Book format, opens the content in the built-in Help Viewer.\n\n\t\n\n\n\n\nAdditional Item\n\n\t\n\n\t\n\nUse a separator between your primary help documentation and additional items, which might include registration information or release notes. Keep the total the number of items you list in the Help menu small to avoid overwhelming people with too many choices when they need help. Alternatively, consider linking to additional items from within your help documentation.\n\nFor guidance, see Offering help; for developer guidance, see NSHelpManager.\n\nDynamic menu items\n\nIn rare cases, it can make sense to present a dynamic menu item, which is a menu item that changes its behavior when people choose it while pressing a modifier key (Control, Option, Shift, or Command). For example, the Minimize item in the Window menu changes to Minimize All when people press the Option key.\n\nAvoid making a dynamic menu item the only way to accomplish a task. Dynamic menu items are hidden by default, so they’re best suited to offer shortcuts to advanced actions that people can accomplish in other ways. For example, if someone hasn’t discovered the Minimize All dynamic menu item in the Window menu, they can still minimize each open window.\n\nUse dynamic menu items primarily in menu bar menus. Adding a dynamic menu item to contextual or Dock menus can make the item even harder for people to discover.\n\nRequire only a single modifier key to reveal a dynamic menu item. It can be physically awkward to press more than one key while simultaneously opening a menu and choosing a menu item, in addition to reducing the discoverability of the dynamic behavior. For developer guidance, see isAlternate.\n\nTip\n\nmacOS automatically sets the width of a menu to hold the widest item, including dynamic menu items.\n\nMenu bar extras\n\nA menu bar extra exposes app-specific functionality using an icon that appears in the menu bar when your app is running, even when it’s not the frontmost app. Menu bar extras are on the opposite side of the menu bar from your app’s menus. For developer guidance, see MenuBarExtra.\n\nWhen necessary, the system hides menu bar extras to make room for app menus. Similarly, if there are too many menu bar extras, the system may hide some to avoid crowding app menus.\n\nConsider using a symbol to represent your menu bar extra. You can create an icon or you can choose one of the SF Symbols, using it as-is or customizing it to suit your needs. Both interface icons and symbols use black and clear colors to define their shapes; the system can apply other colors to the black areas in each image so it looks good on both dark and light menu bars, and when your menu bar extra is selected. The menu bar’s height is 24 pt.\n\nDisplay a menu — not a popover — when people click your menu bar extra. Unless the app functionality you want to expose is too complex for a menu, avoid presenting it in a popover.\n\nLet people — not your app — decide whether to put your menu bar extra in the menu bar. Typically, people add a menu bar extra to the menu bar by changing a setting in an app’s settings window. To ensure discoverability, however, consider giving people the option of doing so during setup.\n\nAvoid relying on the presence of menu bar extras. The system hides and shows menu bar extras regularly, and you can’t be sure which other menu bar extras people have chosen to display or predict the location of your menu bar extra.\n\nConsider exposing app-specific functionality in other ways, too. For example, you can provide a Dock menu that appears when people Control-click your app’s Dock icon. People can hide or choose not to use your menu bar extra, but a Dock menu is aways available when your app is running.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nMenus\n\nDock menus\n\nKeyboard shortcuts\n\nDeveloper documentation\n\nCommandMenu — SwiftUI\n\nAdding Menus and Shortcuts to the Menu Bar and User Interface — UIKit\n\nNSStatusBar — AppKit"
  },
  {
    "title": "Split views",
    "url": "https://developer.apple.com/design/human-interface-guidelines/split-views",
    "html": "Split views\nA split view manages the presentation of multiple adjacent panes of content, each of which can contain a variety of components, including tables, collections, images, and custom views.\n\nTypically, you use a split view to support navigation through a hierarchy of information. In this scenario, selecting an item in the view’s primary pane displays the item’s contents in the secondary pane. Similarly, a split view can display a tertiary pane if items in the secondary pane contain additional content.\n\nIt’s common to use a split view to create a sidebar interface, where the leading pane lists the top-level items or collections in an app, and the secondary and optional tertiary panes can present child collections and item details. For example, Mail in iPadOS lists accounts and mailboxes in the primary pane, a selected mailbox’s messages in the secondary pane, and a selected email in the tertiary pane. Rarely, you might also use a split view to provide groups of functionality that supplement the primary view — for example, Keynote in macOS uses split view panes to present the slide navigator, the presenter notes, and the inspector pane in areas that surround the main slide canvas.\n\nBest practices\n\nPrefer using a split view in a regular — not a compact — environment. A split view needs horizontal space in which to display multiple panes. In a compact environment, such as iPhone in portrait orientation, it’s difficult to display multiple panes without wrapping or truncating the content, making it less legible and harder to interact with.\n\nTo support navigation, persistently highlight the current selection in each pane that leads to the detail view. The selected appearance clarifies the relationship between the content in various panes and helps people stay oriented.\n\nConsider letting people drag and drop content between panes. Because a split view provides access to multiple levels of hierarchy, people can conveniently move content from one part of your app to another by dragging items to different panes.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS.\n\nmacOS\n\nIn macOS, you can arrange the panes of a split view horizontally, vertically, or both. A split view includes dividers between panes that can support dragging to resize them. For developer guidance, see HSplitView and VSplitView.\n\nVertical\nHorizontal\nMultiple\n\nSet reasonable defaults for minimum and maximum pane sizes. If people can resize the panes in your app’s split view, make sure to use sizes that keep the divider visible. If a pane gets too small, the divider can seem to disappear, becoming difficult to use.\n\nConsider letting people hide a pane when it makes sense. If your app includes an editing area, for example, consider letting people hide other panes to reduce distractions or allow more room for editing — in Keynote, people can hide the navigator and presenter notes panes when they want to edit slide content.\n\nProvide multiple ways to reveal hidden panes. For example, you might provide a toolbar button or a menu command — including a keyboard shortcut — that people can use to restore a hidden pane.\n\nPrefer the thin divider style. The thin divider measures one point in width, giving you maximum space for content while remaining easy for people to use. Avoid using thicker divider styles unless you have a specific need. For example, if both sides of a divider present table rows that use strong linear elements that might make a thin divider hard to distinguish, it might work to use a thicker divider. For developer guidance, see NSSplitView.DividerStyle.\n\ntvOS\n\nIn tvOS, a split view can work well to help people filter content. When people choose a filter category in the primary pane, your app can display the results in the secondary pane.\n\nChoose a split view layout that keeps the panes looking balanced. By default, a split view devotes a third of the screen width to the primary pane and two-thirds to the secondary pane, but you can also specify a half-and-half layout.\n\nDisplay a single title above a split view, helping people understand the content as a whole. People already know how to use a split view to navigate and filter content; they don’t need titles that describe what each pane contains.\n\nChoose the title’s alignment based on the type of content the secondary pane contains. Specifically, when the secondary pane contains a content collection, consider centering the title in the window. In contrast, if the secondary pane contains a single main view of important content, consider placing the title above the primary view to give the content more room.\n\nvisionOS\n\nPrefer a split view — not an ornament — for offering supplementary controls or information. A split view pane gives people convenient access to information and actions they need while continuing to interact with the main view. If you need to request a small amount of information from people or present a simple task that they can complete before returning to their main task, consider using a sheet.\n\nwatchOS\n\nIn watchOS, the split view displays either the sidebar or the detail view as a full-screen view.\n\nAutomatically display the most relevant detail view. When your app launches, show people the most pertinent information. For example, display information relevant to their location, the time, or their recent actions.\n\nIf your app displays multiple detail pages, place the detail views in a vertical tab view. People can then use the Digital Crown to scroll between the detail view’s tabs. watchOS also displays a page indicator next to the Digital Crown, indicating the number of tabs and the currently selected tab.\n\nResources\nRelated\n\nSidebars\n\nTab bars\n\nLayout\n\nDeveloper documentation\n\nNavigationSplitView — SwiftUI\n\nUISplitViewController — UIKit\n\nNSSplitViewController — AppKit\n\nVideos\nDesigned for iPad\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded guidance for split views in visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nAdded guidance for split views in watchOS."
  },
  {
    "title": "Action button",
    "url": "https://developer.apple.com/design/human-interface-guidelines/action-button",
    "html": "Action button\nThe Action button gives people quick access to their favorite features on supported iPhone and Apple Watch models.\n\nOn a supported device, people can use the Action button to run App Shortcuts or access system-provided functionality, like turning the flashlight on or off. On Apple Watch Ultra, the Action button supports activity-related actions, including workouts and dives.\n\nA person chooses a function for the Action button when they set up their device; later, they can adjust this choice in Settings. When someone associates an App Shortcut with the Action button, pressing the button runs the App Shortcut similarly to using their voice with Siri or tapping it in Spotlight.\n\nWhen designing your app or game, think of the Action button as another way for someone to quickly access a function that they use on a regular basis.\n\nBest practices\n\nSupport the Action button with a set of your app’s essential functions. For example, if your cooking app includes an egg timer, a “Start Egg Timer” action might be one that people want to initiate when they press the Action button. You don’t need to offer an App Shortcut that opens your app, because the system provides this function already. Your app icon, widgets, and Apple Watch complications give people other quick ways to open your app. For additional guidance, see App Shortcuts.\n\nFor each action you support, write a short label that succinctly describes it. People see your labels when they visit Settings to configure the Action button’s behavior. Create labels that use title-style capitalization, begin with a verb, use present tense, and exclude articles and prepositions. Keep labels as short as possible, with a maximum of three words. For example, use “Start Race” instead of “Started Race” or “Start the Race.”\n\nPrefer letting the system show people how to use the Action button with your app. When you support the Action button, the system automatically helps people configure it to initiate one of your app’s functions. Avoid creating content that repeats the guidance offered in Settings for the Action button, or other usage tips the system provides.\n\nPlatform considerations\n\nNot supported in iPadOS, macOS, tvOS, or visionOS.\n\niOS\n\nLet people use your actions without leaving their current context. When possible, make use of lightweight multitasking capabilities like Live Activities and custom snippets to provide functionality without opening your app. For example, the “Set Timer” action doesn’t launch the Clock app; it prompts people to set a duration for the timer, and then launches a Live Activity with the countdown.\n\nwatchOS\n\nIn watchOS, a person can assign the Action button’s first press to drop a waypoint, start a dive, or begin a specific workout. Beyond a single button press, the Action button also supports secondary actions like marking a segment or transitioning to the next modality during a multi-part workout.\n\nConsider offering a secondary function that supports or advances the primary action people choose. People often use the Action button without looking at the screen, so a subsequent button press needs to flow logically from the first press, while also making sense in the current context. If your app supports workout or dive actions, consider designing a simple, intuitive secondary function that people can easily learn and remember. Consider carefully before you offer more than one secondary function, because doing so can increase people’s cognitive load and make your app seem harder to use.\n\nPrefer using subsequent button presses to support additional functionality rather than to stop or conclude a function. If you need to let people stop their main task — as opposed to pausing the current function — offer this option within your interface instead.\n\nPause the current function when people press the Action button and side button together. The exception is in a diving app where pausing a dive may be dangerous to the diver, causing them to lose track of their depth or not understand how long they’ve been underwater. Unless pausing the current function results in a negative experience, be sure to meet people’s expectations by letting them pause their current activity when they press both buttons at the same time.\n\nResources\nRelated\n\nWorkouts\n\nDigital Crown\n\nApp Shortcuts\n\nLive Activities\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nUpdated to include guidance for iOS.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nNew page."
  },
  {
    "title": "Multitasking",
    "url": "https://developer.apple.com/design/human-interface-guidelines/multitasking#Multitasking-on-iPad",
    "html": "Multitasking\nMultitasking lets people switch quickly from one app to another, performing tasks in each.\n\nPeople expect to use multitasking on their devices, and they may think something is wrong if your app doesn’t allow it. With rare exceptions — such as some full-screen–only iPad apps and Apple Vision Pro apps running in a Full Space — every app needs to work well with multitasking.\n\nIn addition to app switching, multitasking can present different experiences on different devices.\n\nOn Apple Vision Pro, people can run multiple apps at the same time in the Shared Space, viewing and switching between windows and volumes throughout their space.\n\nOn iPhone, multitasking lets people use FaceTime or watch a video in Picture in Picture while they also use a different app.\n\nThe app switcher displays all currently open apps.\n\nA current FaceTime call can continue while people use another app.\n\nOn iPad, people can view and interact with the windows of several different apps at the same time. An individual app can also support multiple open windows, which lets people view and interact with more than one window in the same app at one time.\n\nMultitasking\nMultiple windows\n\nWith multitasking, windows from several apps — like Weather, Maps, and Photos — can be available onscreen at the same time.\n\nOn Apple TV, people can play or browse content while also playing movies or TV shows in Picture in Picture (where supported).\n\nOn a Mac, multitasking is the default user experience because people typically run more than one app at a time, switching between windows and tasks as they work. When multiple app windows are open, macOS applies drop shadows that make the windows appear layered on the desktop, and applies other visual effects to help people distinguish different window states; for guidance, see macOS window states.\n\nIn contrast, watchOS makes it easy for people to switch between favorite or recently used apps, but people don’t open more than one app at a time on their watch.\n\nBest practices\n\nA great multitasking experience helps people accomplish tasks in multiple apps by instantly pausing the current context when they switch away and seamlessly restoring it when they switch back. Because you don’t know when people will initiate multitasking, your app or game always needs to be prepared to save and restore their context.\n\nIn iOS and iPadOS, pause activities that require people’s attention or active participation when they switch away. If your app is a game or a media-viewing app, for example, make sure people don’t miss anything when they switch to another app. When they switch back, let them continue as if they never left.\n\nRespond smoothly to audio interruptions. Occasionally, audio from another app or the system itself may interrupt your app’s audio. For example, an incoming phone call or a music playlist initiated by Siri might interrupt your app’s audio. When situations like these occur, people expect your app to respond in the following ways:\n\nPause audio indefinitely for primary audio interruptions, such as playing music, podcasts, or audiobooks.\n\nTemporarily lower the volume or pause the audio for shorter interruptions, such as GPS directional notifications, and resume the original volume or playback when the interruption ends.\n\nFor guidance, see Playing audio.\n\nFinish user-initiated tasks in the background. When someone starts a task, they expect it to finish even if they switch away from your app. If your app is in the middle of performing a task that doesn’t need additional input, complete it in the background before suspending.\n\nUse notifications sparingly. Your app can send notifications when it’s suspended or running in the background. If people start an important or time-sensitive task in your app, and then switch away from it, they might appreciate receiving a notification when the task completes so they can switch back to your app and take the next step. In contrast, people don’t generally need to know the moment a routine or secondary task completes. In this scenario, avoid sending an unnecessary notification; instead, let people check on the task when they return to your app. For guidance, see Managing notifications.\n\nPlatform considerations\n\nNo additional considerations for iOS, macOS, or tvOS. Not supported in watchOS.\n\niPadOS\nMultitasking on iPad\n\niPadOS can present multitasking windows in a variety of configurations, supporting various workflows. The system also provides multitasking controls — which let people switch multitasking configurations — and the app shelf, which lets people access all open windows in an app.\n\nMultitasking controls\n\nApp shelf\n\nPeople can choose one of the following configurations to open multitasking windows on iPad.\n\nSlide Over opens a second window in an overlay while the first window continues in full screen. People can change the onscreen location of the Slide Over window, or hide it offscreen and retrieve it later. People can also open multiple windows in Slide Over, where they form a stack.\n\nSplit View displays two windows side by side, letting people resize the relative areas of the windows and interact with both. While viewing side-by-side windows in Split View, people can also open a third window in Slide Over.\n\nPicture in Picture opens a video in a movable, resizable window that floats above the full-screen app.\n\nSlide Over\nSplit View\nPicture in Picture\n\nNote\n\nApps don’t control multitasking configurations or receive any indication of the ones that people choose.\n\nTo help your iPad app respond correctly when people open it in Split View or Slide Over, make sure it adapts gracefully to different screen sizes. For guidance, see Layout; for developer guidance, see Multitasking on iPad. To learn more about how people use iPad multitasking features, see Use multitasking on your iPad.\n\nMultiple windows on iPad\n\nConceptually, iPad apps tend to use two types of windows to provide content:\n\nA primary window presents the app’s full hierarchy, providing access to all of the app’s objects and the actions associated with them.\n\nAn auxiliary window presents a specific task or area in the app, often using a modal presentation. Dedicated to one experience, an auxiliary window doesn’t allow navigation to other app areas, and it typically includes buttons people use to close it after completing the task.\n\nPrimary\nAuxiliary\n\nMail uses a primary window to present all mailboxes and message lists.\n\nIn iPadOS 15 and later, you can specify a presentation style that determines the initial appearance of each window that people open in your app. Although people can reposition a window after opening it, specifying a presentation style can visually reinforce the nature of a window’s task or content. iPadOS defines the following presentation styles:\n\nProminent. A modal presentation that elevates the window, dimming the surrounding areas and preventing interaction with them.\n\nStandard. A side-by-side presentation that allows interaction with peer windows, each of which supports the app’s full functionality.\n\nAutomatic. A presentation that the system chooses based on the context in which your app requests the window.\n\nTip\n\nIf you simply need to let people view a file, you can present it without creating your own window, but you must support multiple windows in your app. For developer guidance, see QLPreviewSceneActivationConfiguration.\n\nUse the prominent style to present a self-contained task people can complete without opening other parts of your app. For example, the prominent style works well for document editing or another task that’s scoped to a specific file or collection of content. Be sure a prominent window is also useful on its own; avoid using it to present secondary tasks, supplemental actions, or choosing items that affect the main task.\n\nUse the standard style to present multiple versions of the same task or content. For example, Safari uses the standard style to help people view and interact with two browsing windows onscreen at the same time.\n\nOpen a new window only when people take an explicit action. For example, people can tap the Add (+) button in the app shelf or App Exposé, or choose a menu item. Avoid surprising people by opening a new window they don’t request.\n\nMake sure your app’s primary windows support every task in your app. Multiple windows can offer convenient and efficient workflows, but people always need to be able to access every app feature in each primary window.\n\nPreserve the state in each window that people open. When people return to a window, they expect it to be in the same state in which they left it. For developer guidance, see Restoring Your App’s State.\n\nConsider letting people use a gesture to open content in a new window. For example, people can use the pinch gesture to expand a Notes item into a new window. A gesture-based transition always uses the prominent presentation style, making the resulting modal window feel like a natural consequence of expanding the item or task. For developer guidance, see collectionView(_:sceneActivationConfigurationForItemAt:point:) (to transition from a collection view item) or UIWindowScene.ActivationInteraction (to transition from an item in any other view).\n\nConsider providing a menu item that lets people open content in a new window. When you support this behavior, the menu presents an “Open in new window” item when your app runs on iPad or on a Mac using Mac Catalyst, but not when your app runs on iPhone. If it makes sense in your app, you can supply an alternative item to display when the app runs on iPhone, such as “Show details…”. You can add an “Open in new window” item to a context menu or to menus attached to buttons and bar button items. For developer guidance, see UIWindowScene.ActivationAction.\n\nAvoid specifying a layout when providing a way to open content in a new window. Because you don’t know which multitasking configuration people are using, avoid offering menu items like “Open in split view” or “Open in front.”\n\nUse the term window in user-facing content. The system refers to app windows as windows regardless of type. Using different terms — including scene, which refers to window implementation — is likely to confuse people.\n\nvisionOS\n\nIn visionOS, only one window is active at a time in the Shared Space. When people look from one window to another, the window they’re currently looking at becomes active while the previous window becomes more translucent and appears to recede along the z-axis. Closing an app window in the Shared Space transitions the app to the background without quitting it.\n\nNote\n\nWhen an app is the Now Playing app, closing its window automatically pauses audio playback; if people want to resume playback, they can do so in Control Center without opening the window.\n\nAvoid interfering with the system-provided multitasking behavior. When people look from one window to another, visionOS applies a feathered mask to the window they look away from to clarify its changed state. To avoid interfering with this visual feedback, don’t change the appearance of a window’s edges.\n\nPlay\n\nDon’t pause a window’s video playback when people look away from it. In visionOS, as in macOS, people expect the playback they start in one window to continue while they view or perform a task in another window.\n\nBe prepared for situations where your audio can duck. Unless an app is currently the Now Playing app, its audio can duck when people look away from it to another app.\n\nResources\nRelated\n\nLayout\n\nDeveloper documentation\n\nResponding to the launch of your app — UIKit\n\nMultitasking on iPad — UIKit\n\nVideos\nWhat’s new in iPad app design\nDesigned for iPad\nIntroducing Multiple Windows on iPad\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded artwork for primary and auxiliary windows in iPadOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Sheets",
    "url": "https://developer.apple.com/design/human-interface-guidelines/sheets",
    "html": "Sheets\nA sheet helps people perform a scoped task that’s closely related to their current context.\n\nBy default, a sheet is modal, presenting a targeted experience that prevents people from interacting with the parent view until they dismiss the sheet (for more on modal presentation, see Modality). A modal sheet is useful for requesting specific information from people or presenting a simple task that they can complete before returning to the parent view. For example, a sheet might let people supply information needed to complete an action, such as attaching a file, choosing the location for a move or save, or specifying the format for a selection.\n\nIn macOS, visionOS, and watchOS, a sheet is always modal, but in iOS and iPadOS, a sheet can also be nonmodal. When a nonmodal sheet is onscreen, people use its functionality to directly affect the current task in the parent view without dismissing the sheet. For example, Notes on iPhone and iPad uses a nonmodal sheet to help people apply different formatting to various text selections as they edit a note.\n\nThe Notes format sheet lets people apply formatting to selected text in the editing view.\n\nBecause the sheet is nonmodal, people can make additional text selections without dismissing the sheet.\n\nBest practices\n\nUse a sheet to present simple content or tasks. A sheet allows some of the parent view to remain visible, helping people retain their original context as they interact with the sheet.\n\nFor complex or prolonged user flows, consider alternatives to sheets. For example, iOS and iPadOS offer a full-screen style of modal view that can work well to display content like videos, photos, or camera views or to help people perform multistep tasks like document or photo editing. (For developer guidance, see UIModalPresentationStyle.fullScreen.) In a macOS experience, you might want to open a new window or let people enter full-screen mode instead of using a sheet. For example, a self-contained task like editing a document tends to work well in a separate window, whereas going full screen can help people view media. In visionOS, you can give people a way to transition your app to a Full Space where they can dive into content or a task; for guidance, see Immersive experiences.\n\nDisplay only one sheet at a time from the main interface. When people close a sheet, they expect to return to the parent view or window. If closing a sheet takes people back to another sheet, they can lose track of where they are in your app. If something people do within a sheet results in another sheet appearing, close the first sheet before displaying the new one. If necessary, you can display the first sheet again after people dismiss the second one.\n\nUse a nonmodal view when you want to present supplementary items that affect the main task in the parent view. To give people access to information and actions they need while continuing to interact with the main window, consider using a split view in visionOS or a panel in macOS; in iOS and iPadOS, you can use a nonmodal sheet for this workflow. For guidance, see iOS, iPadOS.\n\nPlatform considerations\n\nNo additional considerations for tvOS.\n\niOS, iPadOS\n\nA resizable sheet expands when people scroll its contents or drag the grabber, which is a small horizontal indicator that can appear at the top edge of a sheet. Sheets resize according to their detents, which are particular heights at which a sheet naturally rests. Designed for iPhone, detents specify particular heights at which a sheet naturally rests. The system defines two detents: large is the height of a fully expanded sheet and medium is about half of the fully expanded height.\n\nLarge detent\n\nMedium detent\n\nSheets automatically support the large detent. Adding the medium detent allows the sheet to rest at both heights, whereas specifying only medium prevents the sheet from expanding to full height. For developer guidance, see detents.\n\nIn an iPhone app, consider supporting the medium detent to allow progressive disclosure of the sheet’s content. For example, a share sheet displays the most relevant items within the medium detent, where they’re visible without resizing. To view more items, people can scroll or expand the sheet. In contrast, you might not want to support the medium detent if a sheet’s content is more useful when it displays at full height. For example, the compose sheets in Messages and Mail display only at full height to give people enough room to create content.\n\nInclude a grabber in a resizable sheet. A grabber shows people that they can drag the sheet to resize it; they can also tap it to cycle through the detents. In addition to providing a visual indicator of resizability, a grabber also works with VoiceOver so people can resize the sheet without seeing the screen. For developer guidance, see prefersGrabberVisible.\n\nSupport swiping to dismiss a sheet. People expect to swipe vertically to dismiss a sheet instead of tapping a dismiss button. If people have unsaved changes in the sheet when they begin swiping to dismiss it, use an action sheet to let them confirm their action.\n\nPosition Done and Cancel buttons as people expect. Typically, a Done or Dismiss button belongs in a sheet’s top-right corner (in a left-to-right layout) or top-left corner (in a right-to-left layout). The Cancel button belongs in a sheet’s top-left (in a left-to-right layout) or top-right (in a right-to-left layout) corner.\n\nmacOS\n\nIn macOS, a sheet is a cardlike view with rounded corners that floats on top of its parent window. The parent window is dimmed while the sheet is onscreen, signaling that people can’t interact with it until they dismiss the sheet. However, people expect to interact with other app windows before dismissing a sheet.\n\nPresent a sheet in a reasonable default size. People don’t generally expect to resize sheets, so it’s important to use a size that’s appropriate for the content you display. In some cases, however, people appreciate a resizable sheet — such as when they need to expand the contents for a clearer view — so it’s a good idea to support resizing.\n\nLet people interact with other app windows without first dismissing a sheet. When a sheet opens, you bring its parent window to the front — if the parent window is a document window, you also bring forward its modeless document-related panels. When people want to interact with other windows in your app, make sure they can bring those windows forward even if they haven’t dismissed the sheet yet.\n\nPosition a sheet’s dismiss buttons as people expect. People expect to find all buttons that dismiss a sheet — including Done, OK, and Cancel — at the bottom of the view, in the trailing corner.\n\nUse a panel instead of a sheet if people need to repeatedly provide input and observe results. A find and replace panel, for example, might let people initiate replacements individually, so they can observe the result of each search for correctness. For guidance, see Panels.\n\nvisionOS\n\nWhile a sheet is visible in a visionOS app, it floats in front of its parent window, dimming it, and becoming the target of people’s interactions with the app.\n\nPlay\n\nAvoid displaying a sheet that emerges from the bottom edge of a window. To help people view the sheet, prefer centering it in their field of view.\n\nPresent a sheet in a default size that helps people retain their context. Avoid displaying a sheet that covers most or all of its window, but consider letting people resize the sheet if they want.\n\nwatchOS\n\nIn watchOS, a sheet is a full-screen view that slides over your app’s current content. The sheet is semitransparent to help maintain the current context, but the system applies a material to the background that blurs and desaturates the covered content.\n\nUse a sheet only when your modal task requires a custom title or custom content presentation. If you need to give people important information or present a set of choices, consider using an alert or action sheet.\n\nKeep sheet interactions brief and occasional. Use a sheet only as a temporary interruption to the current workflow, and only to facilitate an important task. Avoid using a sheet to help people navigate your app’s content.\n\nChange the default label of the dismiss control only if it makes sense in your app. By default, the sheet displays a round cancel button in the upper left corner. Use this button when the sheet lets people make changes to the app’s behavior or to their data. If your sheet simply presents information without enabling a task, use Done or Dismiss instead. You can use a toolbar to display multiple buttons.\n\nIf you change the default label, avoid confusing alternatives. Avoid using a label that might mislead people into thinking that the sheet is part of a hierarchical navigation interface. Also, if the text in the top-leading corner looks like a page or app title — or if you don’t provide a button label — people won’t know how to dismiss the sheet.\n\nResources\nRelated\n\nModality\n\nAction sheets\n\nPopovers\n\nPanels\n\nDeveloper documentation\n\nsheet(item:onDismiss:content:) — SwiftUI\n\nUISheetPresentationController — UIKit\n\npresentAsSheet(_:) — AppKit\n\nVideos\nCustomize and resize sheets in UIKit\nWhat's new in UIKit\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nRecommended using a split view to offer supplementary items in a visionOS app.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nUpdated guidance for using sheets in watchOS."
  },
  {
    "title": "System experiences",
    "url": "https://developer.apple.com/design/human-interface-guidelines/system-experiences",
    "html": "System experiences\nApp Shortcuts\nComplications\nHome Screen quick actions\nLive Activities\nThe menu bar\nNotifications\nStatus bars\nTop Shelf\nWatch faces\nWidgets"
  },
  {
    "title": "Selection and input",
    "url": "https://developer.apple.com/design/human-interface-guidelines/selection-and-input",
    "html": "Selection and input\nColor wells\nCombo boxes\nDigit entry views\nImage wells\nPickers\nSegmented controls\nSliders\nSteppers\nText fields\nToggles\nVirtual keyboards"
  },
  {
    "title": "Popovers",
    "url": "https://developer.apple.com/design/human-interface-guidelines/popovers",
    "html": "Popovers\nA popover is a transient view that appears above other content when people click or tap a control or interactive area.\n\nBest practices\n\nUse a popover to expose a small amount of information or functionality. Because a popover disappears after people interact with it, limit the amount of functionality in the popover to a few related tasks. For example, a calendar event popover makes it easy for people to change the date or time of an event, or to move it to another calendar. The popover disappears after the change, letting people continue reviewing the events on their calendar.\n\nConsider using popovers when you want more room for content. Views like sidebars and panels take up a lot of space. If you need content only temporarily, displaying it in a popover can help streamline your interface.\n\nPosition popovers appropriately. Make sure a popover’s arrow points as directly as possible to the element that revealed it. Ideally, a popover doesn’t cover the element that revealed it or any essential content people may need to see while using it.\n\nUse a Close button for confirmation and guidance only. A Close button, including Cancel or Done, is worth including if it provides clarity, like exiting with or without saving changes. Otherwise, a popover generally closes when people click or tap outside its bounds or select an item in the popover. If multiple selections are possible, make sure the popover remains open until people explicitly dismiss it or they click or tap outside its bounds.\n\nAlways save work when automatically closing a nonmodal popover. People can unintentionally dismiss a nonmodal popover by clicking or tapping outside its bounds. Discard people’s work only when they click or tap an explicit Cancel button.\n\nShow one popover at a time. Displaying multiple popovers clutters the interface and causes confusion. Never show a cascade or hierarchy of popovers, in which one emerges from another. If you need to show a new popover, close the open one first.\n\nDon’t show another view over a popover. Make sure nothing displays on top of a popover, except for an alert.\n\nWhen possible, let people close one popover and open another with a single click or tap. Avoiding extra gestures is especially desirable when several different bar buttons each open a popover.\n\nAvoid making a popover too big. Make a popover only big enough to display its contents and point to the place it came from. If necessary, the system can adjust the size of a popover to ensure it fits well in the interface.\n\nProvide a smooth transition when changing the size of a popover. Some popovers provide both condensed and expanded views of the same information. If you adjust the size of a popover, animate the change to avoid giving the impression that a new popover replaced the old one.\n\nAvoid using the word popover in help documentation. Instead, refer to a specific task or selection. For example, instead of “Select the Show button at the bottom of the popover,” you might write “Select the Show button.”\n\nAvoid using a popover to show a warning. People can miss a popover or accidentally close it. If you need to warn people, use an alert instead.\n\nPlatform considerations\n\nNo additional considerations for visionOS. Not supported in tvOS or watchOS.\n\niOS, iPadOS\n\nAvoid displaying popovers in compact views. Make your app or game dynamically adjust its layout based on the size class of the content area. Reserve popovers for wide views; for compact views, use all available screen space by presenting information in a full-screen modal view like a sheet instead. For related guidance, see Modality.\n\nmacOS\n\nYou can make a popover detachable in macOS, which becomes a separate panel when people drag it. The panel remains visible onscreen while people interact with other content.\n\nDetached popover\nAttached popover\n\nConsider letting people detach a popover. People might appreciate being able to convert a popover into a panel if they want to view other information while the popover remains visible.\n\nMake minimal appearance changes to a detached popover. A panel that looks similar to the original popover helps people maintain context.\n\nResources\nRelated\n\nSheets\n\nAction sheets\n\nAlerts\n\nModality\n\nDeveloper documentation\n\npopover(isPresented:attachmentAnchor:arrowEdge:content:) — SwiftUI\n\nUIPopoverPresentationController — UIKit\n\nNSPopover — AppKit\n\nVideos\nWhat’s new in iPad app design\nCustomize and resize sheets in UIKit"
  },
  {
    "title": "Panels",
    "url": "https://developer.apple.com/design/human-interface-guidelines/panels",
    "html": "Panels\nIn a macOS app, a panel typically floats above other open windows providing supplementary controls, options, or information related to the active window or current selection.\n\nIn general, a panel has a less prominent appearance than an app’s main window. When the situation calls for it, a panel can also use a dark, translucent style to support a heads-up display (or HUD) experience.\n\nWhen your app runs in other platforms, consider using a modal view to present supplementary content that’s relevant to the current task or selection. For guidance, see Modality.\n\nBest practices\n\nUse a panel to give people quick access to important controls or information related to the content they’re working with. For example, you might use a panel to provide controls or settings that affect the selected item in the active document or window.\n\nConsider using a panel to present inspector functionality. An inspector displays the details of the currently selected item, automatically updating its contents when the item changes or when people select a new item. In contrast, if you need to present an Info window — which always maintains the same contents, even when the selected item changes — use a regular window, not a panel. Depending on the layout of your app, you might also consider using a split view pane to present an inspector.\n\nPrefer simple adjustment controls in a panel. As much as possible, avoid including controls that require typing text or selecting items to act upon because these actions can require multiple steps. Instead, consider using controls like sliders and steppers because these components can give people more direct control.\n\nWrite a brief title that describes the panel’s purpose. Because a panel often floats above other open windows in your app, it needs a title bar so people can position it where they want. Create a short title using a noun — or a noun phrase with title-style capitalization — that can help people recognize the panel onscreen. For example, macOS provides familiar panels titled “Fonts” and “Colors,” and many apps use the title “Inspector.”\n\nShow and hide panels appropriately. When your app becomes active, bring all of its open panels to the front, regardless of which window was active when the panel opened. When your app is inactive, hide all of its panels.\n\nAvoid including panels in the Window menu’s documents list. It’s fine to include commands for showing or hiding panels in the Window menu, but panels aren’t documents or standard app windows, and they don’t belong in the Window menu’s list.\n\nIn general, avoid making a panel’s minimize button available. People don’t usually need to minimize a panel, because it displays only when needed and disappears when the app is inactive.\n\nRefer to panels by title in your interface and in help documentation. In menus, use the panel’s title without including the term panel: for example, “Show Fonts,” “Show Colors,” and “Show Inspector.” In help documentation, it can be confusing to introduce “panel” as a different type of window, so it’s generally best to refer to a panel by its title or — when it adds clarity — by appending window to the title. For example, the title “Inspector” often supplies enough context to stand on its own, whereas it can be clearer to use “Fonts window” and “Colors window” instead of just “Fonts” and “Colors.”\n\nHUD-style panels\n\nA HUD-style panel serves the same function as a standard panel, but its appearance is darker and translucent. HUDs work well in apps that present highly visual content or that provide an immersive experience, such as media editing or a full-screen slide show. For example, QuickTime Player uses a HUD to display inspector information without obstructing too much content.\n\nPrefer standard panels. People can be distracted or confused by a HUD when there’s no logical reason for its presence. Also, a HUD might not match the current appearance setting. In general, use a HUD only:\n\nIn a media-oriented app that presents movies, photos, or slides\n\nWhen a standard panel would obscure essential content\n\nWhen you don’t need to include controls — with the exception of the disclosure triangle, most system-provided controls don’t match a HUD’s appearance.\n\nMaintain one panel style when your app switches modes. For example, if you use a HUD when your app is in full-screen mode, prefer maintaining the HUD style when people take your app out of full-screen mode.\n\nUse color sparingly in HUDs. Too much color in the dark appearance of a HUD can be distracting. Often, you need only small amounts of high-contrast color to highlight important information in a HUD.\n\nKeep HUDs small. HUDs are designed to be unobtrusively useful, so letting them grow too large defeats their primary purpose. Don’t let a HUD obscure the content it adjusts, and make sure it doesn’t compete with the content for people’s attention.\n\nFor developer guidance, see hudWindow.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nWindows\n\nModality\n\nDeveloper documentation\n\nNSPanel — AppKit\n\nhudWindow — AppKit"
  },
  {
    "title": "Layout and organization",
    "url": "https://developer.apple.com/design/human-interface-guidelines/layout-and-organization",
    "html": "Layout and organization\nBoxes\nCollections\nColumn views\nDisclosure controls\nLabels\nLists and tables\nLockups\nOutline views\nSplit views\nTab views"
  },
  {
    "title": "Action sheets",
    "url": "https://developer.apple.com/design/human-interface-guidelines/action-sheets",
    "html": "Action sheets\nAn action sheet is a modal view that presents choices related to an action people initiate.\n\nDeveloper note\n\nWhen you use SwiftUI, you can offer action sheet functionality in all platforms by specifying a presentation modifier for a confirmation dialog. If you use UIKit, you use the UIAlertController.Style.actionSheet to display an action sheet in iOS, iPadOS, and tvOS.\n\nBest practices\n\nUse an action sheet — not an alert — to offer choices related to an intentional action. For example, when people cancel the Mail message they’re editing, an action sheet provides three choices: delete the edits (or the entire draft), save the draft, or return to editing. Although an alert can also help people confirm or cancel an action that has destructive consequences, it doesn’t provide additional choices related to the action. More importantly, an alert is usually unexpected, generally telling people about a problem or a change in the current situation that might require them to act. For guidance, see Alerts.\n\nUse action sheets sparingly. Action sheets give people important information and choices, but they interrupt the current task to do so. To encourage people to pay attention to action sheets, avoid using them more than necessary.\n\nAim to keep titles short enough to display on a single line. A long title is difficult to read quickly and might get truncated or require people to scroll.\n\nProvide a message only if necessary. In general, the title — combined with the context of the current action — provides enough information to help people understand their choices.\n\nIf necessary, provide a Cancel button that lets people reject an action that might destroy data. Place the Cancel button at the bottom of the action sheet (or in the upper-left corner of the sheet in watchOS). A SwiftUI confirmation dialog includes a Cancel button by default.\n\nMake destructive choices visually prominent. Use the destructive style for buttons that perform destructive actions, and place these buttons at the top of the action sheet where they tend to be most noticeable. For developer guidance, see destructive (SwiftUI) or UIAlertAction.Style.destructive (UIKit)\n\nPlatform considerations\n\nNo additional considerations for macOS or tvOS. Not supported in visionOS.\n\niOS, iPadOS\n\nUse an action sheet — not a menu — to provide choices related to an action. People are accustomed to having an action sheet appear when they perform an action that might require clarifying choices. In contrast, people expect a menu to appear when they choose to reveal it.\n\nAvoid letting an action sheet scroll. The more buttons an action sheet has, the more time and effort it takes for people to make a choice. Also, scrolling an action sheet can be hard to do without inadvertently tapping a button.\n\nwatchOS\n\nThe system-defined style for action sheets includes a title, an optional message, a Cancel button, and one or more additional buttons. The appearance of this interface is different depending on the device.\n\nEach button has an associated style that conveys information about the button’s effect. There are three system-defined button styles:\n\nStyle\n\n\t\n\nMeaning\n\n\n\n\nDefault\n\n\t\n\nThe button has no special meaning.\n\n\n\n\nDestructive\n\n\t\n\nThe button destroys user data or performs a destructive action in the app.\n\n\n\n\nCancel\n\n\t\n\nThe button dismisses the view without taking any action.\n\nAvoid displaying more than four buttons in an action sheet, including the Cancel button. When there are fewer buttons onscreen, it’s easier for people to view all their options at once. Because the Cancel button is required, aim to provide no more than three additional choices.\n\nResources\nRelated\n\nModality\n\nSheets\n\nAlerts\n\nDeveloper documentation\n\nconfirmationDialog(_:isPresented:titleVisibility:actions:) — SwiftUI\n\nUIAlertController.Style.actionSheet — UIKit\n\nVideos\nCustomize and resize sheets in UIKit"
  },
  {
    "title": "Alerts",
    "url": "https://developer.apple.com/design/human-interface-guidelines/alerts",
    "html": "Alerts\nAn alert gives people critical information they need right away.\n\nFor example, an alert can tell people about a problem, warn them when their action might destroy data, and give them an opportunity to confirm a purchase or another important action they initiated.\n\nBest practices\n\nUse alerts sparingly. Alerts give people important information, but they interrupt the current task to do so. Encourage people to pay attention to your alerts by making certain that each one offers only essential information and useful actions.\n\nAvoid using an alert merely to provide information. People don’t appreciate an interruption from an alert that’s informative, but not actionable. If you need to provide only information, prefer finding an alternative way to communicate it within the relevant context. For example, when a server connection is unavailable, Mail displays an indicator that people can choose to learn more.\n\nAvoid displaying alerts for common, undoable actions, even when they’re destructive. For example, you don’t need to alert people about data loss every time they delete an email or file because they do so with the intention of discarding data, and they can undo the action. In comparison, when people take an uncommon destructive action that they can’t undo, it’s important to display an alert in case they initiated the action accidentally.\n\nAvoid showing an alert when your app starts. If you need to inform people about new or important information the moment they open your app, design a way to make the information easily discoverable. If your app detects a problem at startup, like no network connection, consider alternative ways to let people know. For example, you could show cached or placeholder data and a nonintrusive label that describes the problem.\n\nAnatomy\n\nAn alert is a modal view that can look different in different platforms and devices.\n\niOS\nmacOS\nvisionOS\nwatchOS\n\nContent\n\nIn all platforms, alerts display a title, optional informative text, and up to three buttons. On some platforms, alerts can include additional elements.\n\nIn iOS, iPadOS, macOS, and visionOS, an alert can include a text field.\n\nAlerts in macOS and visionOS can include an icon and an accessory view.\n\nmacOS alerts can add a suppression checkbox and a Help button.\n\nIn all alert copy, be direct, and use a neutral, approachable tone. Alerts often describe problems and serious situations, so avoid being oblique or accusatory, or masking the severity of the issue.\n\nWrite a title that clearly and succinctly describes the situation. You need to help people quickly understand the situation, so be complete and specific, without being verbose. As much as possible, describe what happened, the context in which it happened, and why. Avoid writing a title that doesn’t convey useful information — like “Error” or “Error 329347 occurred” — but also avoid overly long titles that wrap to more than two lines. If the title is a complete sentence, use sentence-style capitalization and appropriate ending punctuation. If the title is a sentence fragment, use title-style capitalization, and don’t add ending punctuation.\n\nInclude informative text only if it adds value. If you need to add an informative message, keep it as short as possible, using complete sentences, sentence-style capitalization, and appropriate punctuation.\n\nAvoid explaining alert buttons. If your alert text and button titles are clear, you don’t need to explain what the buttons do. In rare cases where you need to provide guidance on choosing a button, use a term like choose to account for people’s current device and interaction method, and refer to a button using its exact title without quotes. For guidance, see Buttons.\n\nIf supported, include a text field only if you need people’s input to resolve the situation. For example, you might need to present a secure text field to receive a password.\n\nButtons\n\nCreate succinct, logical button titles. Aim for a one- or two-word title that describes the result of selecting the button. Prefer verbs and verb phrases that relate directly to the alert text — for example, “View All,” “Reply,” or “Ignore.” In informational alerts only, you can use “OK” for acceptance, avoiding “Yes” and “No.” Always use “Cancel” to title a button that cancels the alert’s action. As with all button titles, use title-style capitalization and no ending punctuation.\n\nAvoid using OK as the default button title unless the alert is purely informational. The meaning of “OK” can be unclear even in alerts that ask people to confirm that they want to do something. For example, does “OK” mean “OK, I want to complete the action” or “OK, I now understand the negative results my action would have caused”? A specific button title like “Erase,” “Convert,” “Clear,” or “Delete” helps people understand the action they’re taking.\n\nPlace buttons where people expect. In general, place the button people are most likely to choose on the trailing side in a row of buttons or at the top in a stack of buttons. Always place the default button on the trailing side of a row or at the top of a stack. Cancel buttons are typically on the leading side of a row or at the bottom of a stack.\n\nUse the destructive style to identify a button that performs a destructive action people didn’t deliberately choose. For example, when people deliberately choose a destructive action — such as Empty Trash — the resulting alert doesn’t apply the destructive style to the Empty Trash button because the button performs the person’s original intent. In this scenario, the convenience of pressing Return to confirm the deliberately chosen Empty Trash action outweighs the benefit of reaffirming that the button is destructive. In contrast, people appreciate an alert that draws their attention to a button that can perform a destructive action they didn’t originally intend.\n\nIf there’s a destructive action, include a Cancel button to give people a clear, safe way to avoid the action. Always use the title “Cancel” for a button that cancels an alert’s action. Note that you don’t want to make a Cancel button the default button. If you want to encourage people to read an alert and not just automatically press Return to dismiss it, avoid making any button the default button. Similarly, if you must display an alert with a single button that’s also the default, use a Done button, not a Cancel button.\n\nProvide alternative ways to cancel an alert when it makes sense. In addition to choosing a Cancel button, people appreciate using keyboard shortcuts or other quick ways to cancel an onscreen alert. For example:\n\nAction\n\n\t\n\nPlatform\n\n\n\n\nExit to the Home Screen\n\n\t\n\niOS, iPadOS\n\n\n\n\nPressing Escape (Esc) or Command-Period (.) on an attached keyboard\n\n\t\n\niOS, iPadOS, macOS, visionOS\n\n\n\n\nPressing Menu on the remote\n\n\t\n\ntvOS\n\nPlatform considerations\n\nNo additional considerations for tvOS or watchOS.\n\niOS, iPadOS\n\nUse an action sheet — not an alert — to offer choices related to an intentional action. For example, when people cancel the Mail message they’re editing, an action sheet provides three choices: delete the edits (or the entire draft), save the draft, or return to editing. Although an alert can also help people confirm or cancel an action that has destructive consequences, it doesn’t provide additional choices related to the action. For guidance, see Action sheets.\n\nWhen possible, avoid displaying an alert that scrolls. Although an alert might scroll if the text size is large enough, be sure to minimize the potential for scrolling by keeping alert titles short and including a brief message only when necessary.\n\nmacOS\n\nmacOS automatically displays your app icon in an alert, but you can supply an alternative icon or symbol. In addition, macOS lets you:\n\nConfigure repeating alerts to let people suppress subsequent occurrences of the same alert\n\nAppend a custom view if it’s necessary to provide additional information (for developer guidance, see accessoryView)\n\nInclude a Help button that opens your help documentation (see Help buttons)\n\nUse a caution symbol sparingly. Using a caution symbol like exclamationmark.triangle too frequently in your alerts diminishes its significance. Use the symbol only when extra attention is really needed, as when confirming an action that might result in unexpected loss of data. Don’t use the symbol for tasks whose only purpose is to overwrite or remove data, such as a save or empty trash.\n\nvisionOS\n\nWhen your app is running in the Shared Space, visionOS displays your alert in front of your window, slightly forward along the z-axis. If people move a window without dismissing its alert, the alert remains anchored to the window. If your app is running in a Full Space, the system displays your alert centered in the wearer’s field of view.\n\nIf you need to display an accessory view in a visionOS alert, create a view that has a maximum height of 154 pt and a 16-pt corner radius.\n\nResources\nRelated\n\nModality\n\nAction sheets\n\nSheets\n\nDeveloper documentation\n\nalert(_:isPresented:actions:) — SwiftUI\n\nUIAlertController — UIKit\n\nNSAlert — AppKit\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nEnhanced guidance for using default and Cancel buttons.\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nAdded anatomy artwork for visionOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Presentation",
    "url": "https://developer.apple.com/design/human-interface-guidelines/presentation",
    "html": "Presentation\nAction sheets\nAlerts\nPage controls\nPanels\nPopovers\nScroll views\nSheets\nWindows"
  },
  {
    "title": "Navigation and search",
    "url": "https://developer.apple.com/design/human-interface-guidelines/navigation-and-search",
    "html": "Navigation and search\nNavigation bars\nPath controls\nSearch fields\nSidebars\nTab bars\nToken fields"
  },
  {
    "title": "Wallet",
    "url": "https://developer.apple.com/design/human-interface-guidelines/wallet",
    "html": "Wallet\nWallet helps people securely store their credit and debit cards, driver’s license or state ID, transit cards, event tickets, keys, and more on iPhone and Apple Watch.\n\nPeople use their cards and passes in Wallet to make Apple Pay — and Apple Pay Later — purchases, track their orders, confirm their identity, and streamline activities like boarding a plane, attending a concert, or receiving a discount.\n\nWhen you integrate Apple Wallet into your app, you can create custom passes and present them the moment people need them, securely verify an individual’s identity so they can access personal content, and offer detailed receipts and tracking information where it’s most convenient. For developer guidance, see doc://com.apple.documentation/documentation/passkit/wallet.\n\nPasses\n\nOffer to add new passes to Wallet. When people do something that results in a new pass — like checking into a flight, purchasing an event ticket, or registering for a store reward program — you can present system-provided UI that helps them add the pass to Wallet with one tap (for developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpasslibrary/1617093-addpasses). If people want to review a pass before adding it, you can display a custom view that displays the pass and provides an Add to Apple Wallet button; for developer guidance, see doc://com.apple.documentation/documentation/passkit/pkaddpassesviewcontroller.\n\nHelp people add a pass that they created outside of your app. If people create a pass using your website or another device, suggest adding it to Wallet the next time they open your app. If people decline your suggestion, don’t ask them again.\n\nAdd related passes as a group. If your app generates multiple passes, like boarding passes for a multi-connection flight, add all passes at the same time so people don’t have to add each one individually. If people can receive a group of passes from your website — such as a set of tickets for an event — bundle them together so that people can download all of them at one time. For developer guidance, see Distributing and updating a pass.\n\nDisplay an Add to Apple Wallet button to let people add an existing pass that isn’t already in Wallet. If people previously declined your suggestion to add a pass to Wallet — or if they removed the pass — a button makes it easy to add it if they change their minds. You can display an Add to Apple Wallet button wherever the corresponding pass information appears in your app. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkaddpassbutton. You can also display an Add to Apple Wallet badge in an email or on a webpage; for guidance, see Add to Apple Wallet guidelines.\n\nLet people jump from your app to their pass in Wallet. Wherever your app displays information about a pass that exists in Wallet, you can offer a link that opens it directly. Label the link something like “View in Wallet.”\n\nConsider hiding expired passes. In iOS 15 and later, Wallet automatically hides expired passes to reduce crowding, while also providing a button that lets people revisit them. To ensure the system hides passes appropriately, set the expiration date, relevant date, and voided properties of each pass correctly; for developer guidance, see Pass.\n\nAlways get people’s permission before deleting a pass from Wallet. For example, you could include an in-app setting that lets people specify whether they want to delete passes manually or have them removed automatically. If necessary, you can display an alert before deleting a pass.\n\nHelp the system suggest a pass on the Lock Screen when it’s contextually relevant. Ideally, passes automatically appear when they’re needed so people don’t have to manually locate them. When you supply information about when and where your pass is relevant, the system can display a link to it on the Lock Screen when people are most likely to want it. For example, a gym membership card could appear on the Lock Screen as people enter the gym. For developer guidance, see Showing a Pass on the Lock Screen.\n\nUpdate passes as needed. Physical passes don’t typically change, but a digital pass can reflect updates to events. An airline boarding pass, for example, can automatically update to display flight delays and gate changes.\n\nUse change messages only for updates to time-critical information. A change message interrupts people’s current workflow, so it’s essential to send one only when you make an update they need to know about. For example, people need to know when there’s a gate change in a boarding pass, but they don’t need to know when a customer service phone number changes. Never use a change message for marketing or other noncritical communication. Change messages are available on a per-field basis; for developer guidance, see Adding a Web Service to Update Passes.\n\nDesigning passes\n\nWallet uses a consistent design aesthetic to strengthen familiarity and build trust. Instead of merely replicating the appearance of a physical item, design a clean, simple pass that looks at home in Wallet.\n\nDesign a pass that looks great and works well on all devices. Passes can look different on different devices. For example, when a pass appears on Apple Watch, it doesn’t display all the images it displays when it appears on iPhone (for guidance, see Passes for Apple Watch). Don’t put essential information in elements that might be unavailable on certain devices. Also, don’t add padding to images; for example, watchOS crops white space from some images.\n\nAvoid using device-specific language. You can’t predict the device people will use to view your pass, so don’t include copy that might not make sense on a particular device. For example, copy that tells people to “slide to view” content doesn’t make sense when it appears on Apple Watch.\n\nMake your pass instantly identifiable. Using color — especially a color that’s linked to your brand — can help people recognize your pass as soon as they see it. Make sure that pass content remains comfortably readable against the background you choose.\n\nKeep the front of a pass uncluttered so people can get important information at a glance. Show essential information — like an event date or account balance — in the top-right area of the pass so people can still see it when the pass is collapsed in Wallet. Use the rest of the pass front to provide important information; consider putting extra information on the back of a pass (iOS) or in a details screen (watchOS).\n\nPrefer an NFC-compatible pass. People appreciate having a contactless pass, because it means that they can just hold their device near a reader. If you support both NFC and a barcode or QR code, the code appears on the back of the pass (in iOS) or in the details screen (in watchOS). In iOS, you can display a QR code or barcode on the front of your pass if necessary for your design.\n\nReduce image sizes for optimal performance. People can receive passes via email or a webpage. To make downloads as fast as possible, use the smallest image files that still look great.\n\nProvide an icon that represents your company or brand. The system includes your icon when displaying information about a relevant pass on the lock screen. Mail also uses the icon to represent your pass in an email message. You can use your app icon or design an icon for this purpose. Create an icon that measures a minimum of 38x38 pts.\n\nThe system defines several pass styles, each of which specifies the overall appearance of a pass in categories like event ticket, boarding pass, and coupon. The pass style determines the layout of your content, and can affect the types of relevancy information you provide (for guidance, see Passes).\n\nAlthough each pass style is different, all styles display information using the basic layout areas shown below:\n\nAll passes display a logo image; depending on style, passes can display additional images in other areas. To display text, you use the following PassFields to provide content within specific layout areas:\n\nField\n\n\t\n\nLayout area\n\n\t\n\nUse to provide…\n\n\n\n\nHeader\n\n\t\n\nEssential\n\n\t\n\nCritical information that needs to remain visible when the pass is collapsed in Wallet.\n\n\n\n\nPrimary\n\n\t\n\nPrimary\n\n\t\n\nImportant information that helps people use the pass.\n\n\n\n\nSecondary and auxiliary\n\n\t\n\nSecondary and auxiliary\n\n\t\n\nUseful information that people might not need every time they use the pass.\n\n\n\n\nBack\n\n\t\n\nNot shown in diagram\n\n\t\n\nSupplemental details that don’t need to be on the pass front.\n\nIn general, a pass can have up to three header fields, one primary field, up to four secondary fields, and up to four auxiliary fields. Depending on the amount of content you display in each field, some fields may not be visible.\n\nDisplay text only in pass fields. The system ensures that text in pass fields is legible and accessible to assistive technologies like VoiceOver. Don’t embed text in images — it’s not accessible and not all images are displayed on all devices — and avoid using custom fonts that might make text hard to read.\n\nBoarding passes\n\nUse the boarding pass style for train tickets, airline boarding passes, and other types of transit passes. Typically, each pass corresponds to a single trip with a specific starting and ending point.\n\nA boarding pass can display logo and footer images, and it can have up to two primary fields and up to five auxiliary fields.\n\nExample\nLayout\n\nCoupons\n\nUse the coupon style for coupons, special offers, and other discounts. A coupon can display logo and strip images, and it can have up to four secondary and auxiliary fields, all displayed on one row.\n\nExample\nLayout\n\nStore cards\n\nUse the store card style for store loyalty cards, discount cards, points cards, and gift cards. If an account related to a store card carries a balance, the pass usually shows the current balance.\n\nA store card can display logo and strip images, and it can have up to four secondary and auxiliary fields, all displayed on one row.\n\nExample\nLayout\n\nEvent tickets\n\nUse the event ticket style to give people entry into events like concerts, movies, plays, and sporting events. Typically, each pass corresponds to a specific event, but you can also use a single pass for several events, as with a season ticket.\n\nAn event ticket can display logo, strip, background, or thumbnail images. However, if you supply a strip image, don’t include a background or thumbnail image. You can also include an extra row of up to four auxiliary fields (for developer guidance, see the row property of PassFields.AuxiliaryFields).\n\nExample\nLayout 1\nLayout 2\n\nGeneric passes\n\nUse the generic style for a type of pass that doesn’t fit into the other categories, such as a gym membership card or coat-check claim ticket. A generic pass can display logo and thumbnail images, and it can have up to four secondary and auxiliary fields, all displayed on one row.\n\nExample\nLayout 1\nLayout 2\n\nPasses for Apple Watch\n\nOn Apple Watch, Wallet displays passes in a scrolling carousel of cards. People can add your pass to their Apple Watch even if you don’t create a watch-specific app, so it’s important to understand how your pass can look on the device.\n\nOn their Apple Watch, people can tap a card to reveal a details screen that displays additional pass information in a scrolling view. In some cases, people can also tap a specific transaction to get more information.\n\nEach pass style specifies the fields and images that can appear in the basic layout areas shown below:\n\nIf some information doesn’t fit within the layout areas, the system displays it in the scrolling details screen.\n\nImportant\n\nIn every style, watchOS crops the strip image to fit the aspect ratio of the card interface and may crop white space from other images.\n\nBoarding\nCoupon\nStore\nEvent\nGeneric\n\nOrder tracking\n\nWhen you support order tracking, Wallet can display information about an order a customer placed through your app or website, updating the information whenever the status of the order changes. In iOS 17 and later, you can help people start tracking their order right from your app or website and offer additional ways to add their order to Wallet.\n\nWallet presents a dashboard that displays a customer’s active and completed orders. People can choose an order to view details about it, like the items they ordered and fulfillment information for shipping and pickup.\n\nDashboard\n\nThe Wallet Orders schema defines the properties you use to provide order data like product descriptions, order status, contact information, and shipping and pickup details, including estimated arrival dates, addresses, tracking numbers, and pickup instructions. Wallet displays the information you supply within consistent, system-defined interfaces. To help people get the information they need quickly and conveniently, supply as much information as you can, using the properties that match your order processes.\n\nMake it easy for people to add an order to Wallet. For example, when a customer completes an Apple Pay transaction in your app or website, use doc://com.apple.documentation/documentation/passkit/pkpaymentorderdetails/ (app) or ApplePayPaymentOrderDetails (web) to automatically add the order to Wallet. In iOS 17 and later, you can use AddOrderToWalletButton to display the system-provided Track with Apple Wallet button in relevant areas of your app or website — such as in pages for order confirmation, status, or tracking — or in emails to customers. If a person already added an order to Wallet, trying to add it again opens Wallet and displays the order.\n\nMake information about an order available immediately after people place it. People need to confirm that their order was received, even when payment, processing, and fulfillment are still pending. If you won’t have details until a later time, provide the data you have at the time of the order and supply a status description like “Check back later for full order details.”\n\nProvide fulfillment information as soon as it’s available, and keep the status up to date. When you supply fulfillment data or you change the status of an order, the system updates the order information and can automatically send a notification to customers. The system uses the fulfillment status you report to update the order’s current status to a value like Order Placed, Processing, Ready for Pickup, Picked Up, Out for Delivery, Delivered, or — if something goes wrong — Issue or Canceled. For guidance on describing a status, see Displaying order and fulfillment details.\n\nSupply a high-resolution logo image that uses a nontransparent background. The system displays your logo image in the dashboard and detail view, so you want to make sure that people can instantly recognize it at various sizes. Use the PNG or JPEG format to create a logo image that measures 300x300 pixels. To ensure that your logo image renders correctly, be sure to use a nontransparent background. For developer guidance, see logo.\n\nSupply distinct, high-resolution product images that use nontransparent backgrounds. The system displays a product’s image — along with descriptive information you supply — in the detail views, order dashboard, and notifications for an order or a fulfillment. When creating a product image, prefer using a straightforward depiction and a solid, nontransparent background. Showing a product in a “lifestyle” context or against a busy background can make the item hard to distinguish at small sizes. For each product, use the PNG or JPEG format to create an image that measures 300x300 pixels.\n\nIn general, keep text brief. People appreciate being able to read text at a glance, and the system can truncate text that’s too long.\n\nUse clear, approachable language, and localize the text you provide. You want to make sure that all your customers can read the information in an order. Also, make sure the price you show matches the final price the customer confirmed.\n\nDisplaying order and fulfillment details\n\nAn order gives people ways to contact the merchant and displays details about their Apple Pay purchase, including fulfillment status and per-item information.\n\nProvide a link to an area where people manage their order. When you provide a universal link, people can open your order management area even if they don’t have your app installed. To learn more about universal links, see Allowing apps and websites to link to your content; for developer guidance, see Order.\n\nClearly describe each item so people can verify that their order contains everything they expect. You can use the LineItem property to provide information like a product’s price, name, and image. An order lists the line items for every item the customer ordered; a fulfillment lists only the line items that fulfillment includes. When appropriate, you can also attach a PDF receipt to an individual transaction related to an order.\n\nSupply a prioritized list of your apps that might be installed on the device. The system uses this list when it needs to display a link to your app within the order details view. For example, if you provide multiple apps and more than one of them is installed on the device, the system displays a link to the installed app that’s highest on your list. If none of your apps are installed on the device, the system displays a link to the first app on your list. For developer guidance, see Order.\n\nAvoid sending duplicate notifications. For example, you can tell the system to avoid sending order-related notifications through Wallet when the customer has one of your associated apps installed.\n\nMake it easy for customers to contact the merchant. Provide multiple contact methods, so people can choose the one that works best for them. At minimum, you need to provide a link to the merchant’s website or landing page, but you can also provide a Messages for Business link, a phone number, an email address, and a link to a support page (for developer guidance, see Merchant). When people choose the Contact button in an order, the system displays a menu of the contact methods you supply.\n\nHelp people track their order. A multi-item order can have multiple fulfillments, where each fulfillment is either shipping or pickup. For example, if a customer orders a pair of shoes and a T-shirt, the customer might want to have one item shipped, while picking up the other. Regardless of fulfillment type, you need to supply enough information for people to know where their items are and when to expect them at the destination they specified. In addition to an estimated time of arrival, here’s some information that people particularly appreciate:\n\nA link that opens the carrier’s website to a page with information about a shipping fulfillment. When possible, provide a direct link — in addition to a tracking number — so people can easily view the most up-to-date shipping information. If necessary, display this link on any intermediate order-tracking page you open.\n\nA scannable barcode when one is required to pick up the order in a pickup fulfillment. It’s convenient when people can offer the barcode from within Wallet instead of finding it in an email or webpage.\n\nClear, detailed instructions that can help people receive or pick up their order.\n\nKeep the fulfillment screen centered on order tracking. For example, if you recommend your app or other services to customers, be sure to prioritize order-tracking information over other content in the screen.\n\nChoose shipping-fulfillment values that match the details you have about the shipping process. If you know the carrier, enter its name in the carrier property; otherwise, leave the default “Track Shipment” value. If you can access details about a carrier’s interim shipping steps — such as when a fulfillment is on the way or out for delivery — indicate each step by using specific status values like onTheWay, outForDelivery, or delivered. In contrast, if you don’t have access to a carrier’s shipping details, use the shipped status. In both cases, provide a tracking link (when one is available) so people can track their order on their own. For developer guidance, see ShippingFulfillment.\n\nKeep customers informed through relevant fulfillment status descriptions. A great status message is approachable, accurate, and clearly related to the status it describes. In addition to supplying information that helps people understand the status of their order, a status message also gives you an opportunity to use your brand’s communication style.\n\nBe direct and thorough when describing an Issue or Canceled status. People generally need to know why there’s a problem and what they can do about it.\n\nIdentity verification\n\nOn iPhone running iOS 16 and later, people can store an ID card in Wallet, and later allow an app or App Clip to access information on the card to verify their identity without leaving their current context. For example, a person might need to confirm their identity when they apply for a credit card within their banking app. To learn how to support in-person mobile ID verification, see ID Verifier.\n\nDeveloper note\n\nApple doesn’t create or see the ID documents that people add to Wallet, and when people agree to share identifying information with your app, you receive only encrypted data that isn’t readable on the device. For developer guidance, see doc://com.apple.documentation/documentation/passkit/wallet/requesting_identity_data_from_a_wallet_pass.\n\nTo help you offer a consistent experience that people can trust, Apple provides a Verify with Wallet button you can use in your app when you need to ask for identify verification. The button reveals a sheet that describes your request and lets people agree to share their information or cancel.\n\nPresent a Wallet verification option only when the device supports it. If the current device can’t return the identify information you request, don’t display a Verify with Apple Wallet button. Be prepared to present a fallback view that offers a different verification method if Verify with Apple Wallet isn’t available; for developer guidance, see doc://com.apple.documentation/documentation/passkit/verifyidentitywithwalletbutton.\n\nAsk for identity information only at the precise moment you need it. People can be suspicious of a request for personal information if it doesn’t seem to be related to their current action. If your app needs identity verification, for example, wait to ask for this information until people are completing the process or transaction that requires it; don’t request verification before people are ready to start the process or when they’re simply creating an account.\n\nClearly and succinctly describe the reason you need the information you’re requesting. You must write copy (called a purpose string or usage description string) that explains why people need to share identity information with your app. The system displays your purpose string in the verification sheet so people can make an informed decision. Here are a couple of examples:\n\nTo verify…\n\n\t\n\nTo support…\n\n\t\n\nExample purpose string\n\n\n\n\nIdentity\n\n\t\n\nOpening an account for which proof of identity is legally required to prevent fraud\n\n\t\n\nFederal law requires this information to verify your identity and also to help [App Name] prevent fraud.\n\n\n\n\nDriving privilege\n\n\t\n\nRenting a vehicle that requires legal driving privileges\n\n\t\n\nApplicable state law requires [App Name] to verify your driving privileges.\n\nFor each purpose string, aim for a brief, complete sentence that’s direct, specific, and easy for everyone to understand. Use sentence case, avoid passive voice, and include a period at the end.\n\nAsk only for the data you actually need. People may lose trust in your app if you ask for more data than you need to complete the current task or action. For example, if you need to ensure that a customer is at least a certain age, use a request that specifies an age threshold; avoid requesting the customer’s current age or birth date. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkidentityelement/3930277-age.\n\nClearly indicate whether you will keep the data and — if you need to keep it — specify how long you’ll do so. To help people trust your app, it’s essential to explain how long you might need to keep the personal information they agree to share with you. When you use PassKit APIs to specify a duration — such as a particular period, indefinitely, or only as long as it takes to complete the current verification — the system automatically displays explanatory content in the verification sheet. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkidentityintenttostore.\n\nChoose the system-provided verification button that matches your use case and the visual design of your app. The system provides the following button labels to support various use cases:\n\nButton type\n\n\t\n\nConsider using when…\n\n\n\n\n\t\n\nYour app can complete the current transaction after you verify a person’s age. An example transaction is making a car available to lease.\n\n\n\n\n\t\n\nYour app can complete the current transaction after you verify a person’s identity. An example transaction is a car rental.\n\n\n\n\n\t\n\nVerify with Wallet forms one part of a verification process that also requires people to supply additional information, such as a Social Security number or phone number. Examples include opening a financial account or performing a background check.\n\n\n\n\n\t\n\nYour app can complete the current verification flow without additional steps, but the other button labels are too specific. An example is an app that helps people sign up for a government service.\n\nAll button labels are also available in a multiline variant that the system automatically uses when horizontal space is constrained. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkidentitybutton/label.\n\nThe verification button always uses white letters on a black background. You can choose the style that includes a light outline if you need to ensure that the button contrasts well with a dark background in your app (for developer guidance, see doc://com.apple.documentation/documentation/passkit/pkidentitybutton/style/blackoutline). In addition, you can use the doc://com.apple.documentation/documentation/passkit/pkidentitybutton/3967461-cornerradius property to adjust the verification button’s corners to match other related buttons in your interface.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, visionOS, or watchOS. Not supported in tvOS.\n\nResources\nRelated\n\nApple Pay\n\nID Verifier\n\nDeveloper documentation\n\nFinanceKitUI\n\nFinanceKit\n\ndoc://com.apple.documentation/documentation/passkit\n\nWallet Passes\n\nWallet Orders\n\nVideos\nWhat’s new in Wallet and Apple Pay\nWhat’s new in Wallet and Apple Pay\nWhat's new in Wallet and Apple Pay\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nAdded guidance for helping people add orders to Wallet.\n\n\n\n\nFebruary 20, 2023\n\n\t\n\nEnhanced guidance for presenting order-tracking information and added artwork.\n\n\n\n\nNovember 30, 2022\n\n\t\n\nAdded guidance to include a carrier name in status information for a shipping fulfillment.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded guidelines for using Verify with Wallet, updated guidance on providing shipping status values and descriptions, and consolidated guidance into one page."
  },
  {
    "title": "Tap to Pay on iPhone",
    "url": "https://developer.apple.com/design/human-interface-guidelines/tap-to-pay-on-iphone",
    "html": "Tap to Pay on iPhone\nTap to Pay on iPhone lets merchants accept contactless payments using an app on their iPhone, without having to connect external hardware.\n\nIn addition to accepting in-person contactless payments, Tap to Pay on iPhone also lets merchants issue refunds, accept loyalty cards, and validate credit cards, such as when a customer wants to save their card for future use.\n\nNote\n\nTap to Pay on iPhone works alongside your existing payment-acceptance hardware and accessories.\n\nYou can support Tap to Pay on iPhone in an iOS app that you provide to merchants and businesses. Although a merchant’s customers don’t use your app directly, they view some of your app’s screens as they interact with the merchant, so it’s important to follow best practices for visual design and behavior. For high-level developer and business guidance, see Tap to Pay on iPhone.\n\nBest practices\n\nMake it easy for merchants to accept Tap to Pay on iPhone terms and conditions before they begin a customer interaction. Merchants must accept the terms and conditions before you perform the initial configuration on their devices, so it’s most convenient when they can do so before they begin a checkout or other customer-facing flow. To make sure merchants understand this requirement, consider describing it during app launch; for an example, see Marketing guidelines.\n\nPresent the Tap to Pay on iPhone terms and conditions to the appropriate business representative. Specifically, if your app supports both administrator and nonadministrator accounts, be sure to present the terms and conditions to an administrator. If a nonadministrator tries to activate the feature, present a message explaining that administrator access is required.\n\nEducate merchants on how to use Tap to Pay on iPhone before they interact with their customers. For example, you could display brief instructional content while the initial configuration step completes, showing how to accept payment from cards, digital wallets, Apple Watch, and other wearable devices. After configuration completes, encourage merchants to try a refundable test transaction. Also consider making your educational content easy for merchants to view at any time so they can refer to it when they want. To view some sample educational materials, see Communicating to merchants.\n\nAvoid making merchants wait to use Tap to Pay on iPhone. In addition to performing the initial per-device configuration — which can take a few minutes — you need to perform a subsequent configuration each time your app becomes frontmost. You can minimize potential wait times by preparing the feature as soon as your app starts and immediately after each transition to the foreground. For developer guidance, see prepare(using:).\n\nMake sure the Tap to Pay on iPhone checkout option is available even if configuration is continuing in the background. Merchants must always be able to select the Tap to Pay on iPhone checkout option during a checkout flow. If configuration is ongoing, let merchants select the checkout option and then display a progress indicator — avoid waiting for configuration to complete before making the option available.\n\nMake it easy for merchants to switch between Tap to Pay on iPhone and the hardware accessories you support. Because your support for Tap to Pay on iPhone is separate from your support for a hardware accessory like a Bluetooth chip and PIN reader, you can help merchants set up both payment-acceptance solutions at the same time. After setup, make sure merchants can choose the appropriate solution during a checkout flow without having to visit your settings area.\n\nPresentation\n\nTap to Pay on iPhone is a payment-acceptance method, not a payment method like Apple Pay, cash, or credit. It’s important for your app to present the feature correctly so that merchants can represent it correctly to their customers.\n\nDuring a Tap to Pay on iPhone experience, the system presents screens that help customers participate in the process. You need to supply information for the system to display in these screens, such as the merchant name and icon — available through the payment card reader token you receive from your payment service provider (PSP) — and the final transaction amount.\n\nDon’t confuse Apple Pay with Tap to Pay on iPhone. Customers can use Tap to Pay on iPhone with Apple Pay, but it’s essential to distinguish the acceptance method from the payment method. In particular, avoid displaying an Apple Pay button near a Tap to Pay on iPhone button in your app.\n\nMake sure you know the final amount that customers need to pay before merchants initiate the Tap to Pay on iPhone experience. For example, if your app supports tipping or other customer interactions that can change the total, it’s important to ensure that merchants perform these interactions before they initiate Tap to Pay on iPhone. As much as possible, display the final amount customers need to pay in the Tap to Pay on iPhone screen.\n\nIf your app supports multiple payment-acceptance methods, make the Tap to Pay on iPhone button easy to find. As much as possible, avoid making merchants scroll to access the feature. If your app doesn’t support other payment-acceptance options, you can open Tap to Pay on iPhone automatically when checkout begins.\n\nFor the button that activates the feature, prefer the label “Tap to Pay on iPhone” or — if space is constrained — “Tap to Pay.” Alternatively, if you use icons in buttons that activate other acceptance methods, use the wave.3.right.circle or wave.3.right.circle.fill SF Symbols in your Tap to Pay on iPhone button. Regardless of which design you choose, be sure to avoid including the Apple logo.\n\nIf Tap to Pay on iPhone is the only payment-acceptance method you support, you can reuse your existing Charge or Checkout buttons to activate Tap to Pay on iPhone, if necessary.\n\nAdditional interactions\n\nTo support situations like looking up a past transaction or retaining card information to ensure future payment, Tap to Pay on iPhone lets merchants read a payment card when there’s no transaction amount.\n\nWhen people have other types of NFC-compatible cards or passes in Apple Wallet — such as loyalty, discount, and points cards — Tap to Pay on iPhone lets merchants read these items at the same time as they read a payment card or independently.\n\nIf you support an independent loyalty card transaction, distinguish this flow from a payment-acceptance flow that uses Tap to Pay on iPhone. For example, give merchants a separate button to initiate a loyalty card transaction, using a button label that helps them avoid choosing the wrong one by mistake.\n\nPlatform considerations\n\nNo additional considerations for iOS. Not supported in iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nTap to Pay on iPhone Marketing guidelines\n\nDeveloper documentation\n\nConfiguring Tap to Pay on iPhone — ProximityReader\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMarch 3, 2023\n\n\t\n\nEnhanced guidance for educating merchants and improving their experience.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nRefined guidance on preparing Tap to Pay on iPhone and helping merchants learn how to use the feature."
  },
  {
    "title": "Siri",
    "url": "https://developer.apple.com/design/human-interface-guidelines/siri",
    "html": "Siri\nSiri makes it easy for people to accomplish everyday tasks quickly, using voice, touch, or automation.\n\nWhen you use SiriKit to define the tasks and actions that your app supports, people can use Siri to perform them even when your app isn’t running. If you’re an accessory maker, you can also help people use Siri to control your accessories by integrating them with HomeKit or AirPlay. Here are some of the ways people can use Siri to interact with your app or accessory:\n\nAsk Siri to perform a system-defined task that your app supports, like send a message, play a song, or start a workout.\n\nRun a shortcut, which is a way to accelerate actions your app defines through onscreen interactions or by voice.\n\nUse the Shortcuts app to adjust what a shortcut does, including combining several actions to perform one multistep shortcut.\n\nTap a suggestion to perform a shortcut with your app (Siri can suggest shortcuts that people might want to perform, based on their current context and the information you provide).\n\nUse Siri to control an accessory that integrates with your app.\n\nSiri works with your products on iPhone, iPad, Mac, Apple Watch, HomePod, and AirPods, so people can use it almost everywhere.\n\nWhen you make your app’s tasks available through Siri, you have several opportunities to customize the user experience. At a fundamental level, you customize the flow and functionality of the everyday tasks and actions you support to implement your business requirements. To reinforce this functionality throughout the user experience, you can write dialogue that reflects the style and tone of your company’s communications and design custom UI that incorporates your app’s visual style into the Siri interface.\n\nAs you approach the job of integrating your app with Siri, assess the actions your app performs and learn how people use your app without voice interaction. Then consider the following steps:\n\nIdentify key tasks in your app that people might want to perform on a regular basis.\n\nDrive engagement by telling the system about your app’s key tasks and by supporting suggestions.\n\nFor actions that people can perform through voice interaction, design functional conversational flows that feel natural.\n\nExplore the various ways people might perform your app’s tasks — such as in a hands-free situation — and the devices they might be using, such as Apple Watch or iPad.\n\nIntegrating your app with Siri\n\nTasks are at the core of your app’s integration with Siri. SiriKit builds on the idea of a person’s intention to perform a task by using the term intent to represent a task an app supports. The communication between your app and Siri is based on the intents — that is, the tasks — your app helps people perform.\n\nSiriKit defines system intents that represent common tasks — such as sending a message, calling a friend, and starting a workout — and groups related intents into domains. A domain is a category of tasks that Siri knows how to talk about, like messaging, calling, and workouts. For a complete list of domains and the actions in each domain that iOS and watchOS support, see System intents.\n\nWhen possible, take advantage of the intents that SiriKit defines. Using system-provided intents can make your job easier, while still giving you opportunities to customize the experience. However, if your app offers tasks that aren’t represented by system-defined intents — like ordering a meal or shopping for groceries — you can create a custom intent (for guidance, see Custom intents).\n\nA closer look at intents\n\nWhen people use Siri to ask questions and perform actions, Siri does the language processing and semantic analysis needed to turn their requests into intents for your app to handle. The exception is the personal phrase that people create to run a shortcut: When people speak the exact phrase, Siri recognizes it without doing additional processing or analysis.\n\nAs a designer, your main job is to present clear, actionable content that helps clarify and streamline the interactions people have with Siri to get things done in your app. Some of these interactions happen while your app and SiriKit communicate about handling the intent, so it’s helpful to be familiar with the related SiriKit terminology. At a high level, your app processes an intent in three phases: resolve, confirm, and handle.\n\nFirst, your app and SiriKit must agree on what the request means in the resolve phase. You can think of this phase as the time to ask people for everything your app needs and, if necessary, ask for additional information or clarification. For example, if people ask to send a message to Amy, and they have multiple contacts named Amy, a messaging app can have Siri ask which Amy they mean. Details related to an intent, like a message recipient’s name, are known as parameters. In the resolve phase, you can indicate the parameters that are required to complete an action and those that are optional. For developer guidance, see Resolving the Parameters of an Intent.\n\nThe second phase — called the confirm phase — happens when you have all the information you need to handle the intent. This phase can give people a chance to make sure they want to complete the task. For example, tasks that have financial impact require confirmation. In addition to asking for a person’s consent, you can present an error during this phase if something will prevent your app from completing the action. For example, if people use an app to order an item for pickup when the pickup location is closed, the app can describe why it can’t complete the action right now. Presenting this error during the confirm phase avoids making people wait until they’re paying for the item to find out that their request has failed. For developer guidance, see Confirming the Details of an Intent.\n\nThird, your app performs the task and tells SiriKit what it actually did in the handle phase. You can provide both visual and textual information that tells people what your app did to handle their request. For example, an app that lets people order coffee might present a receipt that describes the order. Siri can speak or display the information your app provides. For developer guidance, see Handling an Intent.\n\nProvide information about actions and support suggestions\n\nMost apps support large numbers of actions, but people tend to perform only a handful of them on a regular basis. When you tell the system about people’s regular actions and describe new ones you think they’ll want to perform in the future, Siri can suggest shortcuts for both types of actions when people are likely to be interested in them.\n\nFor example, in an app that’s all about coffee, the most frequent action might be to order a cup of coffee, while less frequent actions might include buying coffee beans or locating a new coffee shop. In this example, the coffee app would share information about the order coffee action so that Siri can suggest a shortcut for this action when people usually want to do it, like weekday mornings. The app could also tell Siri about an action that people haven’t performed yet, but might be interested in — like ordering a new seasonal variation of their favorite coffee — so that Siri might suggest a shortcut for this action.\n\nSiri can use signals like location, time of day, and type of motion (such as walking, running, or driving), to intelligently predict just the right time and place to suggest actions from your app. Depending on the information your app shares and people’s current context, Siri can offer shortcut suggestions on the lock screen, in search results, or on the Siri watch face. Siri can also use some types of information to suggest actions that system apps support, such as using Calendar to add an event shared by your app. Here are some example scenarios.\n\nShortly before 7:30 a.m., Siri might suggest the order coffee action to people who use the coffee app every morning.\n\nAfter people use a box office–type app to buy tickets to a movie, Siri might remind them to turn on Do Not Disturb shortly before showtime.\n\nSiri might suggest an automation that starts a workout in a person’s favorite workout app and plays their favorite workout playlist as they enter their usual gym.\n\nWhen people enter the airport after a home-bound flight, Siri might suggest they request a ride home from their favorite ride-sharing app.\n\nWhen you provide information about your actions to the system, people can also use the Shortcuts app to create shortcuts for the system and custom intents you support. For guidance, see Shortcuts and suggestions.\n\nDesign a great voice experience\n\nA great voice interface helps people feel confident they’ll get the results they want, even when they’re not sure what they can say. Siri supports different voice experiences for system-provided intents and custom intents. With a system intent, Siri does the natural language processing for you, letting people interact with your app in various conversational ways. With a custom intent, your app helps people perform a task that Siri doesn’t know about yet, which results in a different type of support for the voice experience. Custom intents give you additional opportunities to customize conversational dialogue, but also require people to create and speak a precise phrase to start the interaction.\n\nAs a designer, you have several ways to enhance both types of conversational experiences and help people specify what they want without engaging in lengthy exchanges.\n\nFor system-provided intents, you help Siri communicate with people about the action they want to accomplish by providing essential information and defining any app-specific terminology that might come up during the conversation. You don’t have to write additional dialogue for Siri to speak because Siri already knows about the actions in the system-defined domains and understands many ways that people may talk about them. For example, if you need to confirm the recipient’s name during the resolve phase of a messaging intent, you simply indicate that the required parameter value is missing and Siri says to the sender “Who do you want to send it to?”\n\nEven though you don’t write custom dialogue for system-provided intents, you can enhance the voice experience in other ways. For example, if people ask Siri to “play MyMusicApp” as they enter their gym, you could respond by playing their workout playlist.\n\nWhen you support a custom intent, people start the action by using their personal invocation phrase; if people don’t speak their phrase precisely, Siri doesn’t initiate the intent. Although you can suggest a memorable phrase for people to use, your principal job is to write clear, direct dialogue, often in the form of follow-up questions, to help people accomplish the action in as few steps as possible.\n\nFor example, a coffee app might suggest Order coffee as a phrase people could use to reorder a favorite cup of coffee. In a scenario where people usually use Order coffee to order a cappuccino in various sizes, the coffee app could follow up with custom dialogue that builds on this knowledge, like “What size of cappuccino?” For other types of actions, more open-ended questions can be better at helping people accomplish the task efficiently. For example, if people start a grocery shopping action by saying Add to cart, the grocery shopping app could follow up with “OK, what do you want?”\n\nRecognize that people use Siri in different contexts\n\nPeople can use Siri to get things done while they’re in a car, working out, using apps on a device, or interacting with HomePod. You don’t always know the context in which people are using Siri to perform your app’s actions, so flexibility is key to help people have a great experience no matter what they’re doing.\n\nTo communicate with people regardless of their current context, supply information that Siri can provide both vocally and visually. Supporting both voice and screen-based content lets Siri decide which communication method works best for people in their current situation. For example, Siri speaks to people through their AirPods if they say “Hey Siri” while using them.\n\nIn voice-only situations, Siri verbally describes information that would have been presented onscreen in other situations. Consider a food-delivery app that requires people to confirm a transaction before completing the order. In a voice-only scenario, Siri may say “Your total is fifteen dollars, and your order will take thirty minutes to arrive at your door. Ready to order?” In contrast, when people can view the cost and delivery information onscreen, Siri might simply say “Ready to order?” When you support custom intents, you’re responsible for supplying the voice-only dialogue that describes these types of onscreen information.\n\nSystem intents\n\nSiriKit defines a large number of system intents that represent common tasks people do, such as playing music, sending messages to friends, and managing notes. For system intents, Siri defines the conversational flow, while your app provides the data to complete the interaction.\n\nSiriKit provides the following intents.\n\nDomain (link to developer guidance)\n\n\t\n\nIntents\n\n\n\n\nVoIP Calling\n\n\t\n\nInitiate calls.\n\n\n\n\nWorkouts\n\n\t\n\nStart, pause, resume, end, and cancel workouts.\n\n\n\n\nLists and Notes\n\n\t\n\nCreate notes.\n\n\n\n\nSearch for notes.\n\n\n\n\nCreate reminders based on a date, time, or location.\n\n\n\n\nMedia\n\n\t\n\nSearch for and play media content, such as video, music, audiobooks, and podcasts.\n\n\n\n\nLike or dislike items.\n\n\n\n\nAdd items to a library or playlist.\n\n\n\n\nMessaging\n\n\t\n\nSend messages.\n\n\n\n\nSearch for messages.\n\n\n\n\nRead received messages.\n\n\n\n\nPayments\n\n\t\n\nSend payments.\n\n\n\n\nRequest payments.\n\n\n\n\nCar Commands\n\n\t\n\nActivate hazard lights or honk the horn.\n\n\n\n\nLock and unlock the doors.\n\n\n\n\nCheck the current fuel or power level.\n\nDesign responses to system intents\n\nPeople use Siri for convenience, and they expect a fast response. Your app needs to perform the system intents it supports quickly and accurately so that people have a great experience when they choose your app to get things done.\n\nWhenever possible, complete requests without leaving Siri. If a request must be finished in your app, take people directly to the expected destination. Don’t show intermediary screens or messages that slow down the experience.\n\nWhen a request has a financial impact, default to the safest and least expensive option. Never deceive people or misrepresent information. For a purchase with multiple pricing levels, don’t default to the most expensive. When people make a payment, don’t charge extra fees without informing them.\n\nWhen people request media playback from your app, consider providing alternative results if the request is ambiguous. When you display alternative results within the Siri UI, people can easily choose a different piece of content if your first offering isn’t what they want.\n\nOn Apple Watch, design a streamlined workflow that requires minimal interaction. Whenever possible, use intelligent defaults instead of asking for input. For example, a music app could respond to a nonspecific request — like “Play music with MyMusicApp” — by playing a favorite playlist. If you must present options to people, offer a small number of relevant choices that reduce the need for additional prompting.\n\nEnhance the voice experience for system intents\n\nHelp people learn how to use Siri to get things done in your app, and make conversation with Siri feel natural in the context of your brand, by defining app-specific terms and alternative ways people might refer to your app.\n\nCreate example requests. When people tap the Help button in the Siri interface, they view a guide that can include example phrases that you supply. Write phrases that demonstrate the easiest and most efficient ways to use Siri with your app. For developer guidance, see Intent Phrases.\n\nDefine custom vocabulary that people use with your app. Help Siri learn more about the actions your app performs by defining specific terms people might actually use in requests, like account names, contact names, photo tags, photo album names, ride options, and workout names. Make sure these terms are nongeneric and unique to your app. Never include other app names, terms that are obviously connected with other apps, inappropriate language, or reserved phrases, like Hey Siri. Note that Siri uses the terms you define to help resolve requests, but there’s no guarantee that Siri will recognize them.\n\nConsider defining alternative app names. If people might refer to your app in different ways, it’s a good idea to provide a list of alternative names to help Siri understand what people mean. For example, a UnicornChat app might define the term Unicorn as an alternative app name. Never impersonate other apps by listing their names as alternative names for your app.\n\nDesign a custom interface for a system intent\n\nIf it makes sense in your iOS app, you can supply custom interface elements or a completely custom UI for Siri or Maps to display along with your intent response. A watchOS app can’t provide a custom UI for Siri to display on Apple Watch.\n\nAvoid including extraneous or redundant information. A custom interface lets you bring elements from your app into the Siri interface, but displaying information that isn’t related to the action can distract people. You also want to avoid duplicating information that the system can display in the Siri or Maps interface. For developer guidance, see INParameter.\n\nMake sure people can still perform the action without viewing your custom interface. People can switch to voice-only interaction with Siri at any time, so it’s crucial to help Siri speak the same information that you display in your custom interface.\n\nUse ample margins and padding in your custom interface. Avoid extending content to the edges of your interface unless it’s content that appears to flow naturally offscreen, like a map. In general, provide a margin of 20 points between each edge of your interface and the content. Use the app icon that appears above your interface to guide alignment: content tends to look best when it’s lined up with the center of this icon.\n\nMinimize the height of your interface. The system displays other elements above and below your custom interface, such as the text prompt, the spoken response, and the Siri waveform. Aim for a custom interface height that’s no taller than half the height of the screen, so people can see all your content without scrolling.\n\nRefrain from displaying your app name or icon. The system automatically shows this information, so it’s redundant to include it in your custom interface.\n\nFor developer guidance, see Creating an Intents UI Extension.\n\nCustom intents\n\nIf your app lets people perform an everyday task that doesn’t fit into any of the SiriKit domains, you can create a custom intent to represent it (see System intents for a list of domains). You can also use a custom or system intent to support a shortcut, which gives people a quick way to initiate frequently performed actions by speaking a simple phrase or accepting a suggestion from Siri. To learn how to integrate your intents with the system so that people can discover them and add them to Siri, see Shortcuts and suggestions.\n\nCustom intent categories and responses\n\nAlthough your custom intent won’t belong to a SiriKit domain, you’ll need to model it on a system-defined intent category that’s related to your action. SiriKit defines several categories that represent generic tasks, like create, order, share, and search. Because these definitions are in the system, Siri knows how to communicate with people about common actions that are associated with each category — like placing an order or sharing content — in ways that feel natural.\n\nIt’s important to choose the category that best represents your action because the category influences the ways Siri speaks about it and the controls people might see in the interface. For example, a coffee app would likely choose the order category to represent its custom order coffee intent, and as a result, Siri can speak default responses that make sense in the context of this action, like “Ready to order?” and “OK. Ordering.” Category choice can have other effects, too: Because the order category includes actions that have financial impact, using this category for the order coffee intent means that people will be asked to authenticate before completing the action.\n\nFor several categories, the system defines additional verbs that are related to the category’s default action. You can use these alternative verbs to help ensure that the Siri dialogue and the button titles displayed in the interface align with the way you present your app’s actions. For example, in addition to the default verb order, the order category includes the verbs buy and book.\n\nSiriKit defines the following custom intent categories and associated verbs.\n\nCategory\n\n\t\n\nDefault verb\n\n\t\n\nAdditional verbs\n\n\n\n\nGeneric\n\n\t\n\nDo\n\n\t\n\nRun, go\n\n\n\n\nInformation\n\n\t\n\nView\n\n\t\n\nOpen\n\n\n\n\nOrder\n\n\t\n\nOrder\n\n\t\n\nBook, buy\n\n\n\n\nStart\n\n\t\n\nStart\n\n\t\n\nNavigate\n\n\n\n\nShare\n\n\t\n\nShare\n\n\t\n\nPost, send\n\n\n\n\nCreate\n\n\t\n\nCreate\n\n\t\n\nAdd\n\n\n\n\nSearch\n\n\t\n\nSearch\n\n\t\n\nFind, filter\n\n\n\n\nDownload\n\n\t\n\nDownload\n\n\t\n\nGet\n\n\n\n\nOther\n\n\t\n\nSet\n\n\t\n\nRequest, toggle, check in\n\nSiriKit also defines three response types:\n\nConfirmation. Confirms that people still want to perform the action.\n\nSuccess. Indicates that the action has been initiated.\n\nError. Tells people that the action can’t be completed.\n\nIn several custom intent categories, SiriKit defines default dialogue for each response type. For example, the default confirmation dialogue for the order category is, “Ready to order?” and the default success dialogue for the share category is, “OK. Shared.”\n\nTo customize a response, you create a template that combines dialogue you write with placeholders for relevant information your app can supply while it’s working on the intent. For example, a coffee app might enhance the default order confirmation dialogue by providing custom content that includes a placeholder for the total cost of the order.\n\nDepending on the response type, your custom dialogue is presented before or after the default dialogue. For example, confirmation responses present the default dialogue after any custom dialogue. In the coffee app example, the customized confirmation dialogue would begin with something like, “Your large coffee with cream comes to $2.50” and end with the default dialogue, “Ready to order?”\n\nDesign a custom intent\n\nIf a built-in SiriKit intent represents your action’s purpose, adopt that intent instead of defining a custom intent. For example, if you’d like to offer a shortcut for sending a message, adopt INSendMessageIntent; if you’d like to offer a shortcut for playing media, adopt INPlayMediaIntent. For guidance, see System intents.\n\nIf your app’s action requires a custom intent, pick the category that most closely matches the action. A category informs the system about the general function of an intent or shortcut — like order, download, or search — and affects the text and spoken dialogue presented to people when a shortcut is offered by the system or used with Siri. You design the flow of conversation for the custom intents you offer, so it’s essential that you choose a category that corresponds to the meaning of each intent.\n\nTip\n\nIf your action’s primary purpose is to retrieve information or show something to people — like displaying a sports score or the weather — use the information category. Using a different category requires people to make additional taps to get the information.\n\nDesign custom intents that accelerate common, useful tasks. Take advantage of the familiarity people have with your app, and make it easier for them to initiate the tasks they perform most often.\n\nEnsure that your intent works well in every scenario. Make it easy for people to run your intent as a shortcut, regardless of how they initiate it. For example, be prepared for people to run it using their voice on devices with and without a screen, from suggestions on the lock screen or the Siri face on Apple Watch, from search, and within a multistep shortcut.\n\nIn general, design custom intents for tasks that aren’t overly complex. People benefit the most from intents that reduce the number of actions required to complete a task. Don’t counteract that simplicity by requiring people to engage in a lengthy conversation with your app. You can also reduce the likelihood of user errors by limiting custom intents to clearly defined tasks.\n\nDesign your intents to be long-lived. Avoid offering intents that are date-specific or associated with temporary data. For example, it’s not a good idea for a travel app to offer a custom intent for each specific itinerary. A better intent might use follow-up questions to let people get the itinerary for one of their upcoming trips.\n\nDon’t request permission to use Siri. If your app supports only custom intents — and not system intents — you don’t need to get permission to use Siri before letting people create and use voice shortcuts for your intents. Asking for permission can slow people down and could discourage them from using your app’s custom intents.\n\nSupport background operation. The best intents support shortcuts that run quickly and don’t pull people out of their current context. Strive to support custom intents that can run in the background without bringing your app to the front. Supporting background operation also ensures that people can complete the task in hands-free and voice-only scenarios.\n\nHelp people customize their requests\n\nCustom intents can offer follow-up questions that let people do more with a single intent by refining its results on the fly. For example, if you offer an order coffee intent, you can help people get exactly what they want by asking them questions like, “What size?”, “What flavor?”, and “Which location?” Details like size, flavor, and location are parameters your app can define to help people personalize their request.\n\nPeople supply parameter values to personalize an intent by responding to your follow-up questions or by editing existing values in the Shortcuts app. For example, if you offer an order ground coffee intent that includes a parameter for the grind size, you might supply a follow-up question like, “Which grind?” For people who typically order the coarse grind, you could simplify the interaction by using the value coarse as the default parameter value in a dialogue like, “Do you want coarse-ground coffee?” If people choose a different grind, you can follow up by presenting the full list of options. In voice-only scenarios, Siri speaks your follow-up questions and sends you the responses. When people use the Shortcuts app to edit a parameter value, you receive the new value when they use the associated shortcut. For developer guidance, see Adding User Interactivity with Siri Shortcuts and the Shortcuts App.\n\nDesign intents that require as few follow-up questions as possible. Often, an intent can fulfill a request without asking any follow-up questions. Although follow-up questions make intents more flexible, you don’t want to force people into a long interaction. In most cases, it’s best to offer just one or two follow-up questions.\n\nList the smallest number of options possible, and sort the items in a way that makes sense. As with too many follow-up questions, giving people too many options can make completing the task feel onerous. As you determine whether to include an item, consider its complexity as well as its utility. In a food-ordering app, for example, it might be easier for people to parse a list of individual menu items than a list of orders, each of which contains multiple items. After you identify a small number of useful items, consider sorting them by recency, frequency, or popularity.\n\nMake sure each follow-up question is meaningful. Ideally, each follow-up question helps people make an important choice. If options or questions you present are too granular or too similar, the conversation can become repetitive, and people may feel like using your intent is too much work.\n\nDesign parameters that are easy for people to understand and use. Aim for parameters that represent simple values or attributes and name them using simple, straightforward terms. For example, a soup-ordering app might define parameters for the type of soup, the serving size, and a delivery location, using names like soup, size, and location. For guidance, see Shortcuts and suggestions.\n\nAsk for confirmation only when necessary. An intent can ask people for confirmation before completing the task or when interpreting an answer to a follow-up question. Apps that support tasks that have financial impact, like an app that helps people place orders, must ask for confirmation before completing an order. For tasks that don’t have financial impact, asking for confirmation can feel like too much extra work and can sometimes discourage people from completing their request. In all cases, avoid asking for confirmation more than once.\n\nSupport follow-up questions when it makes sense. For example, an app that helps people order food might offer options for pickup or delivery, but ask for a specific location only after people choose the delivery option.\n\nPrioritize the options you offer based on the context in which people run your shortcut. For example, if people use your shortcut to order an item for pickup, offer pickup locations that are currently close by. Offering options that adapt to the context in which your shortcut is run can help people avoid creating separate shortcuts for specific options.\n\nConsider adjusting the parameter values you offer when people set up your shortcut. When you indicate that a parameter has dynamic options, you can enhance the shortcut setup experience in two ways:\n\nYou can find and present parameter values that are relevant to the context people are in while they’re setting up the shortcut. For example, if people use the Shortcuts app to choose a value for a store-location parameter, the parameter can dynamically generate a list of stores that are currently closest to the device.\n\nYou can present a comprehensive list of parameter values. When people set up a shortcut, having an extensive list of parameter values can help them create the shortcut they want. In contrast, when people use a shortcut to accelerate an action, they generally prefer the convenience of having a shorter list of choices.\n\nFor developer guidance, see the storeLocation parameter in the intent definition file of the Soup Chef: Accelerating App Interactions with Shortcuts sample code project.\n\nEnhance the voice experience for custom intents\n\nAim to create conversational interactions. You can customize what Siri says throughout the voice experience, including the handling of follow-up questions. Try writing a script and acting it out with another person to see how well your dialogue works in a face-to-face exchange. Experiencing custom dialogue in this way can help you find places where the interaction doesn’t feel natural.\n\nHelp people understand errors and failures. The system provides some default error descriptions, but it’s best to enhance error responses so that they’re specific to the current situation. For example, if chicken noodle soup is sold out, a soup app can respond with a custom error like, “Sorry, we’re out of chicken noodle soup” instead of “Sorry, we can’t complete your order.”\n\nStrive for engaging voice responses. Remember that people may perform your app’s tasks from their HomePod, using “Hey Siri” with their AirPods, or through CarPlay without looking at a screen. In these cases, the voice response needs to convey the same essential information that the visual elements display to ensure that people can get what they need no matter how they interact with Siri.\n\nCreate voice responses that are concise, descriptive, and effective in voice-driven scenarios. As with a shortcut title, an effective custom spoken response clearly conveys what’s happening as the shortcut runs. If you ask follow-up questions, be sure to customize the default dialogue for clarity. For example, “Which soup?” is clearer than “Which one?”\n\nAvoid unnecessary repetition. People tend to run voice shortcuts frequently, so they may hear the same prompt multiple times when answering follow-up questions or dealing with errors. Use the context of the current conversation to remove as many details from the prompts as possible. Avoid including unnecessary words or attempts at humor, because both can become irritating over time.\n\nHelp conversations with Siri feel natural. People interact with Siri in a variety of ways, like choosing a list item by saying “the second one,” or, in the case of a soup-ordering app, saying “large” or “small” instead of “bowl” or “cup.” You can make people’s Siri interactions feel more natural when you give the system alternative terms and phrases that work as app-specific synonyms (like using “bowl” as a synonym for “large”). Also consider enhancing clarity by providing alternative dialogue options for Siri to speak. For example, the soup app might present a list of onscreen menu options like “1 clam chowder,” or “1 clam chowder and 1 tomato,” but speak these options as “Which order? The one with clam chowder only or the one that includes tomato?”\n\nExclude your app name. The system provides verbal and visual attribution for your app when responding to people. Including your appʼs name in a verbal response is redundant and may make the experience of interacting with Siri feel less natural. Siri speaks your app’s name less frequently when people have used a shortcut several times, because it isn’t necessary to keep reminding them which app is responding.\n\nDon’t attempt to mimic or manipulate Siri. Never impersonate Siri, attempt to reproduce the functionality that Siri provides, or provide a response that appears to come from Apple.\n\nBe appropriate and respect parental controls. Never present offensive or demeaning content. Keep in mind that many families use parental controls to restrict explicit content and content that’s based on specific rating levels.\n\nAvoid using personal pronouns. Create content that’s inclusive of all people.\n\nConsider letting people view more options in your app. If the list of options doesn’t include the items people need, you might want to include an item that lets people open your app to see more. In the list, you could use copy like, “See more in App Name,” and in spoken dialogue, you might encourage people to say, “More options.”\n\nKeep responses device-independent. People may use Siri to interact with your app via Apple Watch, HomePod, iPad, iPhone, or CarPlay. If you must provide device-specific wording, make sure it accurately reflects the person’s current device.\n\nDon’t advertise. Don’t include advertisements, marketing, or in-app purchase sales pitches in your intent content.\n\nShortcuts and suggestions\n\nWhen you support shortcuts, people have a variety of ways to discover and interact with the custom and system intents your app provides. For example:\n\nSiri can suggest a shortcut for an action people have performed at least once by offering it in search results, on the lock screen, and in the Shortcuts app.\n\nYour app can supply a shortcut for an action that people haven’t done yet but might want to do in the future, so that the Shortcuts app can suggest it or it can appear on the Siri watch face.\n\nPeople can use the Shortcuts app to view all their shortcuts and even combine actions from different apps into multistep shortcuts.\n\nPeople can also use the Shortcuts app to automate a shortcut by defining the conditions that can run it, like time of day or current location.\n\nThe Shortcuts app is also available in macOS 12 and later and in watchOS 7 and later. For developer guidance, see SiriKit.\n\nDeveloper note\n\nThe Add to Siri method for adding shortcuts is no longer supported. See App Shortcuts for ways to integrate your app with Siri and the system.\n\nMake app actions widely available\n\nDonating information about the actions your app supports helps the system offer them to people in various ways, such as:\n\nIn search results\n\nThroughout the Shortcuts app\n\nOn the lock screen as a Siri Suggestion\n\nWithin the Now Playing view (for recently played media content)\n\nDuring Wind Down\n\nDonations also power Automation Suggestions in the Shortcut app’s Gallery, making it easy for people to set up automations for hands-free interactions with your app.\n\nYou can also tell the system about shortcuts for actions people haven’t taken yet or make a shortcut available on the Siri watch face (for guidance, see Suggest Shortcuts people might want to add to Siri and Display shortcuts on the Siri watch face). For developer guidance, see Donating Shortcuts.\n\nMake a donation every time people perform the action. When you donate a shortcut each time people perform the associated action, you help the system more accurately predict the best time and place to offer the shortcut.\n\nOnly donate actions that people actually perform. For example, a coffee-ordering app donates the Order coffee shortcut every time people order coffee, but not when people do something else, like browse the menu. Similarly, a media app donates information about a song — like its title and album — only when people are actually listening to it. (For developer guidance, see Improving Siri Media Interactions and App Selection.)\n\nRemove donations for actions that require corresponding data. If information required by a donated action no longer exists, your app needs to delete the donation so the shortcut isn’t suggested anymore. For example, if people delete a contact in a messaging app, the app needs to delete donations for messaging that contact. When people create a shortcut themselves, only they can delete it. For developer guidance, see Deleting Donated Shortcuts.\n\nIf your app handles reservations, consider donating them to the system. These items — like ticketed events, travel itineraries, or reservations for restaurants, flights, or movies — automatically appear as suggestions in Calendar or Maps. When you donate a reservation, it can appear on the lock screen with a suggestion to check in with your app or as a reminder that uses current traffic conditions to recommend when people should leave. For developer guidance, see Donating Reservations.\n\nSuggest Shortcuts people might want to add to Siri\n\nIf your app supports an action that people haven’t performed yet but might find useful, you can provide a suggested shortcut to the system so that people can discover it. For example, if people use a coffee-ordering app to order their daily coffee but not to order a holiday special, the app might still want to give them a way to do this with an Order holiday coffee shortcut.\n\nSuggested shortcuts appear in both the Gallery and the shortcut editor in the Shortcuts app. For developer guidance, see Offering Actions in the Shortcuts App.\n\nDisplay shortcuts on the Siri watch face\n\nOn Apple Watch, people can run shortcuts in several ways. For example, people can ask Siri, tap a shortcut complication on a watch face, or use the Shortcuts app available in watchOS 7 and later. You can also make shortcuts available on the Siri watch face.\n\nTo have a shortcut appear on the Siri watch face, you define a relevant shortcut by including information like the time of day at which your shortcut is relevant and how the shortcut can display on the Siri watch face. The information you supply lets the Siri watch face intelligently display your shortcut to people when they’re in the appropriate context.\n\nFor developer guidance, see Defining Relevant Shortcuts for the Siri Watch Face.\n\nCreate shortcut titles and subtitles\n\nShortcut titles and subtitles appear when the system suggests them. In Siri Suggestions on iPhone and Apple Watch, a shortcut can also display an image.\n\nBe concise but descriptive. An effective title conveys what happens when the shortcut runs. A subtitle can provide additional detail that supplements — but doesn’t duplicate — the title.\n\nStart titles with a verb and use sentence-style capitalization without punctuation. Think of a shortcut title as a brief instruction.\n\n\t\n\nExample title\n\n\n\n\n\t\n\nOrder my favorite coffee\n\n\n\n\n\t\n\nLarge latte\n\n\n\n\n\t\n\nShow today’s forecast\n\n\n\n\n\t\n\nWeather forecast\n\nLead with important information. Long titles and subtitles may be truncated in certain contexts, depending on the device’s screen size.\n\nExclude your app name. The system already identifies the app associated with a shortcut.\n\nLocalize titles and subtitles. Providing content in multiple languages ensures an equally great experience for people everywhere.\n\nConsider providing a custom image for a more engaging suggestion. For example, the shortcut for Order my favorite coffee could show a cup of the customer’s favorite coffee. Create an image that measures:\n\n60x60 pt (180x180 px @ 3x) to display in an iOS app\n\n34x34 pt (68x68 px @2x) to display on the Siri watch face on the 44mm Apple Watch (watchOS scales down the image for smaller watches)\n\nProvide default phrases for shortcuts\n\nYour app provides default phrases for shortcuts during setup. People can personalize these phrases when adding your shortcuts to Siri.\n\nKeep phrases short and memorable. Bear in mind that people must speak your phrase verbatim, so long or confusing phrases may result in mistakes and frustration. Two- and three-word phrases tend to work best. More words can be harder for people to remember, and phrases that are too long will get truncated.\n\nMake sure the phrases you suggest are accurate and specific. Phrases like Reorder coffee or Order my usual coffee clearly describe what the shortcut does, which makes it easier for people to remember the phrase later. Also make sure that your suggested phrases are specific to each shortcut’s scope. For example, Watch baseball is clearer and more memorable than Watch sports. It’s also important to avoid implying that people can vary a shortcut’s invocation phrase to get a different result. For example, people might interpret a phrase like Order a large clam chowder to mean that your shortcut will give them what they want if they substitute “small” for “large” and “lobster bisque” for “clam chowder.”\n\nDon’t commandeer core Siri commands. For example, never suggest a phrase like Call 911 or include the text Hey Siri.\n\nMake shortcuts customizable\n\nWhen you define a parameter for each detail your app needs to perform an intent, people can customize the shortcut by editing these details in the Shortcuts app.\n\nTo show people which details they can edit and how their edits affect the action, you provide a parameter summary. A parameter summary succinctly describes the action by using the parameters in a sentence that begins with a verb. For example, a customizable Order coffee shortcut could display a parameter summary like “Order quantity coffee” where quantity and coffee are the parameters that people can edit. Here’s an example of how the Order coffee shortcut might look after people supply values for the quantity and coffee parameters.\n\nProvide a parameter summary for each custom intent you support. At minimum, include in your parameter summary all parameters your intent requires and any parameters that receive values from other apps or actions. The summary doesn’t have to include optional parameters or parameters that people aren’t likely to edit; if you omit parameters like these from the summary, people can still access them in the Show More section.\n\nCraft a short parameter summary that’s clearly related to your intent’s title. When the intent title and the parameter summary are similar, it’s easy for people to recognize the action regardless of where they view it. Aim to use the same words in the summary and the title — in particular, it’s helpful to begin both phrases with the same verb. For example, if your intent title is “Search encyclopedia,” a good parameter summary could be “Search encyclopedia for search term.”\n\nAim for a parameter summary that reads like a sentence. Use sentence-style capitalization, but don’t include ending punctuation. When possible, avoid punctuation entirely. Punctuation within a summary — especially colons, semicolons, and parentheses — can make the summary hard to read and understand.\n\nProvide multiple parameter summaries when necessary. If your action includes a parameter that has a parent-child relationship with other parameters, you can provide multiple variants of the summary based on the current value of the parent parameter. For example, if your order coffee shortcut lets people specify whether they want to pick up their order or have it delivered, your parameter summary can reflect the current choice. In this scenario, create one parameter summary that helps people pick a store location and another summary that helps them pick a delivery address. Be sure to use a consistent grammatical structure and parameter order in all variants of the summary that you create.\n\nDelivery or pickup\n\nDelivery location\n\nProvide output parameters for information that people can use in a multistep shortcut. For example, an order coffee action might provide output that includes the estimated delivery time and the cost of the order. With this information, people could create a multistep shortcut that messages a friend about the delivery time and logs the transaction in their favorite budgeting app.\n\nConsider defining an input parameter. When you define an input parameter for an action, the action can automatically receive output from a preceding action in a multistep shortcut. For example, if your action applies a filter to the image it receives in an image parameter, you might designate image as the input parameter so that it automatically accepts images from other actions. You configure an input parameter in your intent definition file (shown in Adding User Interactivity with Siri Shortcuts and the Shortcuts App).\n\nHelp people distinguish among different variations of the same action. For example, an app that offers a send message action might use a contact photo to help people visually distinguish the various messages they send. To do this, choose the parameter that’s most identifiable to people and designate it as the key parameter (shown in Adding User Interactivity with Siri Shortcuts and the Shortcuts App). Be sure to provide an image for the key parameter every time you donate the action (for developer guidance, see INImage).\n\nAvoid providing multiple actions that perform the same basic task. For example, instead of providing an action that adds text to a note and a different action that adds an image, consider providing a single action that lets people add both types of content. Providing a few high-level actions can make it easier for people to understand what the actions do when they’re combined in a multistep shortcut.\n\nFor developer guidance, see Shortcut-Related UI.\n\nEditorial guidelines\n\nDon’t refer to Siri using pronouns like “she,” “him,” or “her.” Ideally, just use the word Siri. For example, After you add a shortcut to Siri, you can run the shortcut anytime by asking Siri.\n\nUse correct capitalization and punctuation when using the term Hey Siri. Hey Siri is two words, italicized or in quotes, with an uppercase H and uppercase S. Do not follow the term with an ellipsis.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nSay Hey Siri to activate Siri.\n\n\n\n\n\t\n\nSay “Hey Siri” to activate Siri.\n\n\n\n\n\t\n\nSay Hey Siri… to activate Siri.\n\n\n\n\n\t\n\nSay “hey Siri” to activate Siri.\n\nIn a localized context, translate only the word Hey in the phrase Hey Siri. As an Apple trademark, Siri is never translated. Here is a list of acceptable translations for the phrase Hey Siri:\n\nLocale code\n\n\t\n\nHey Siri translation\n\n\t\n\nLocale code\n\n\t\n\nHey Siri translation\n\n\n\n\nar_AE\n\n\t\n\nيا Siri\n\n\t\n\nfr_CA\n\n\t\n\nDis Siri\n\n\n\n\nar_SA\n\n\t\n\nيا Siri\n\n\t\n\nfr_CH\n\n\t\n\nDis Siri\n\n\n\n\nda_DK\n\n\t\n\nHej Siri\n\n\t\n\nfr_FR\n\n\t\n\nDis Siri\n\n\n\n\nde_AT\n\n\t\n\nHey Siri\n\n\t\n\nit_CH\n\n\t\n\nEhi Siri\n\n\n\n\nde_CH\n\n\t\n\nHey Siri\n\n\t\n\nit_IT\n\n\t\n\nEhi Siri\n\n\n\n\nde_DE\n\n\t\n\nHey Siri\n\n\t\n\nja_JP\n\n\t\n\nHey Siri\n\n\n\n\nen_AU\n\n\t\n\nHey Siri\n\n\t\n\nko_KR\n\n\t\n\nSiri야\n\n\n\n\nen_CA\n\n\t\n\nHey Siri\n\n\t\n\nms_MY\n\n\t\n\nHai Siri\n\n\n\n\nen_GB\n\n\t\n\nHey Siri\n\n\t\n\nnb_NO\n\n\t\n\nHei Siri\n\n\n\n\nen_IE\n\n\t\n\nHey Siri\n\n\t\n\nnl_BE\n\n\t\n\nHé, Siri\n\n\n\n\nen_IN\n\n\t\n\nHey Siri\n\n\t\n\nnl_NL\n\n\t\n\nHé Siri\n\n\n\n\nen_NZ\n\n\t\n\nHey Siri\n\n\t\n\nno_NO\n\n\t\n\nHei Siri\n\n\n\n\nen_SG\n\n\t\n\nHey Siri\n\n\t\n\npt_BR\n\n\t\n\nE aí Siri\n\n\n\n\nen_US\n\n\t\n\nHey Siri\n\n\t\n\nru_RU\n\n\t\n\nпривет Siri\n\n\n\n\nen_ZA\n\n\t\n\nHey Siri\n\n\t\n\nsv_SE\n\n\t\n\nHej Siri\n\n\n\n\nes_CL\n\n\t\n\nOye Siri\n\n\t\n\nth_TH\n\n\t\n\nหวัดดี Siri\n\n\n\n\nes_ES\n\n\t\n\nOye Siri\n\n\t\n\ntr_TR\n\n\t\n\nHey Siri\n\n\n\n\nes_MX\n\n\t\n\nOye Siri\n\n\t\n\nzh_CN\n\n\t\n\n嘿Siri\n\n\n\n\nes_US\n\n\t\n\nOye Siri\n\n\t\n\nzh_HK\n\n\t\n\n喂 Siri\n\n\n\n\nfi_FI\n\n\t\n\nHei Siri\n\n\t\n\nzh_TW\n\n\t\n\n嘿 Siri\n\n\n\n\nfr_BE\n\n\t\n\nDis Siri\n\n\t\n\n\t\n\nReferring to Shortcuts\n\nWhen referring to the Shortcuts feature or app, always typeset with a capital S and make sure that Shortcuts is plural. For example, MyApp integrates with Shortcuts to provide a quick way to get things with just a tap or by asking Siri.\n\nWhen referring to individual shortcuts (that is, not the feature or the Shortcuts app), use lowercase. For example, Run a shortcut by asking Siri or tapping a suggestion on the Lock Screen.\n\nUse the right terminology when describing how people can use Shortcuts in your app. People run shortcuts by asking Siri, so your wording needs to be very similar to phrases like Run a shortcut by asking Siri or Run the shortcut by asking Siri with your personalized phrase (localized as appropriate). Avoid using phrases like add voice shortcuts, make a voice command, create a voice prompt, or any other variation. Instead, consider a phrase like Add a shortcut to Siri to run with your voice (localized as appropriate).\n\nTo encourage people to create or use shortcuts in ways other than voice — like automations, Home Screen shortcuts, and other methods — use a phrase that doesn’t specify a particular method, like For quick access, add to Shortcuts.\n\nNote\n\nUse translations of your app name and the word Shortcuts — but not Siri — when referring to them in a localized context.\n\nReferring to Apple products\n\nAdhere to Apple’s trademark guidelines. Apple trademarks can’t appear in your app name or images. In text, use Apple product names exactly as shown on the Apple Trademark List.\n\nUse Apple product names in singular form only; don’t make Apple product names possessive.\n\nDon’t translate Apple, Siri, or any other Apple trademark.\n\nDon’t use category descriptors. For example, say iPad, not tablet.\n\nDon’t indicate any kind of sponsorship, partnership, or endorsement from Apple.\n\nAttribute Apple, Siri, and all other Apple trademarks with the correct credit lines wherever legal information appears within your app.\n\nRefer to Apple devices and operating systems only in technical specifications or compatibility descriptions.\n\nSee Guidelines for Using Apple Trademarks.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nApp Shortcuts\n\nDesign for intelligence\n\nGuidelines for using Apple trademarks and copyrights\n\nDeveloper documentation\n\nSiriKit\n\nVideos\nDesign App Shortcuts\nDonate intents and expand your app’s presence\nDesign great actions for Shortcuts, Siri, and Suggestions\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nRemoved Add to Siri guidance. Added references to the new App Shortcuts page.\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "Content",
    "url": "https://developer.apple.com/design/human-interface-guidelines/content",
    "html": "Content\nCharts\nImage views\nText views\nWeb views"
  },
  {
    "title": "Messages for Business",
    "url": "https://developer.apple.com/design/human-interface-guidelines/messages-for-business",
    "html": "Messages for Business\nMessages for Business helps customers connect with businesses through the Messages app in iOS, iPadOS, macOS, visionOS, and watchOS.\n\nUsing the Messages app, people can contact your company to ask questions, get support, schedule appointments, make payments with Apple Pay, and more.\n\nPeople can use apps, features, and services like Maps and Spotlight to discover businesses and seamlessly initiate conversations with them. The familiar Messages app interface on iPhone, iPad, Mac, and Apple Watch ensures that customer interaction is intuitive and efficient, and the informality of messaging produces a customer service experience that feels personal and meaningful.\n\nFor developer guidance, and to sign up, see Messages for Business Accounts.\n\nBranding\n\nAlthough Messages for Business conversations occur within the experience of the Messages app, you can still leverage your logo and color scheme to call attention to your brand and build a memorable conversation experience.\n\nStrive for uniqueness. It’s critical to avoid building an experience that might cause people to confuse your brand with other brands. In particular, your logo design and use of color must never cause people to think they’re conversing with Apple.\n\nFor related guidance, see Color and Logo.\n\nButtons\n\nCustomers use Messages for Business buttons to start a conversation with your company. You can also support system features like Maps and Spotlight, so that customers can use them to locate your business and start a conversation. Other ways to help customers contact you are to:\n\nTurn on Message Suggest for your account (see Triggering message suggest)\n\nInclude a URL in an email message (see Starting a message from a URL)\n\nAdd Messages for Business buttons to your app or your company’s website (see Design your website and app for the Messages buttons)\n\nLet people start conversations anytime. Don’t dim or turn off buttons or links that initiate conversations outside of your business hours. Even if you only respond to customer service inquiries during certain hours, people need to be able to start a conversation anytime. If a customer starts a conversation after hours when live agents aren’t available, an automated agent needs to send a reply letting them know when a live agent is able to respond.\n\nThe following guidelines help you use Messages for Business buttons correctly and refer appropriately to the feature in all your customer-facing communications. To learn how to create screenshots that show customers how Messages for Business interactions work with your company, see Screenshots.\n\nUsing Messages for Business buttons\n\nUse Messages for Business buttons in places where customers might want to contact your business. For example, use the buttons in your app, on your website, or in an email to make it easy for people to start a new conversation.\n\nApp\nWebsite\nEmail\n\nLet the default button title encourage customers to contact you. System-provided button titles like “Message Us,” “Get Help,” “Ask a Question,” or “Contact an Agent” help people understand what the button does. If you use the logo-only button, consider displaying the text “Apple Messages” near the button to help people recognize the service.\n\nShow the buttons on supported devices. If a customer is using an unsupported device, don’t encourage a conversation by displaying a button — on websites, the button hides automatically when it isn’t supported. If the button is hidden, update the layout accordingly and remove the call to action or other related text.\n\nMake sure Messages for Business buttons are discoverable. People generally expect to find the button on contact information, support, order confirmation, product, and order history pages.\n\nDisplay the button prominently. Make Messages for Business buttons the same size or larger than similar contact initiation buttons, such as an email button.\n\nUse only approved button styles. For guidance, see Design your website and app to include the Messages buttons.\n\nMaintain minimum and maximum button sizes and inner side margins. Use the following values for guidance.\n\nMax width\n\n\t\n\nMin height\n\n\t\n\nMax height\n\n\t\n\nMin side margins\n\n\n\n\n1000 pt (2000 px @2x)\n\n\t\n\n40 pt (80 px @2x)\n\n\t\n\n150 pt (300 px @2x)\n\n\t\n\n5% of height\n\nDon’t make any other visual or functional modifications to buttons. For example, don’t change transparency values or add drop shadows.\n\nMaintain minimum clear space. The minimum amount of clear space required around the buttons is 10% of the button’s height. Don’t let other elements infringe on this space or occlude the button in any way.\n\nMaintain the minimum button size and margin values when manually placing buttons on a webpage. You’re responsible for sizing and placing the buttons correctly.\n\nUse the following margin values for guidance.\n\nMargin\n\n\t\n\nMinimum value\n\n\n\n\nTop and bottom\n\n\t\n\n15 pt (15 px @1x, 30 px @2x)\n\n\n\n\nLeft and right\n\n\t\n\n20 pt (20 px @1x, 40 px @2x)\n\n\n\n\nBetween buttons\n\n\t\n\n15 pt (15 px @1x, 30 px @2x)\n\nFor developer guidance, see Starting a message from a URL and Adding a Messages button to your website.\n\nReferring to Apple Messages for Business\n\nIn general, use the terms Apple Messages for Business or Apple Messages in customer-facing communications. Avoid using the term Messages by itself, especially when paired with a logo-only button.\n\nUse proper capitalization when mentioning Apple Messages for Business in headlines and copy. Specifically, use four words with an uppercase A, an uppercase M, and an uppercase B, and lowercase for all other letters.\n\nAvoid using other terms to refer to Messages for Business in customer-facing content. For example, avoid using the terms chat or text to refer to a Messages for Business button or flow.\n\nNever use the Apple logo to represent the name Apple in text. Apple Messages for Business is a service mark of Apple Inc.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nApple Messages for Business\n\n\n\n\n\t\n\nApple Messages\n\n\n\n\n\t\n\nApple messages for business\n\n\n\n\n\t\n\niMessage\n\n\n\n\n\t\n\nAPPLE MESSAGES FOR BUSINESS\n\n\n\n\n\t\n\n Messages for Business\n\nReferring to Apple products\n\nAdhere to Guidelines for Using Apple Trademarks. Apple trademarks must not appear in your app name or images. In text, use Apple product names exactly as shown in Apple Trademark List — never make them plural or possessive.\n\nColor\n\nWhen configuring your Messages for Business experience, you can customize the colors of the conversation navigation bar and its back and Info buttons in iOS. These same colors appear in the message header in watchOS, brand name in watchOS, and recipient bubble in macOS.\n\nUse sufficient color contrast ratios. Insufficient contrast makes content hard to see and can cause logos and buttons to blend in with the background. An online color contrast calculator can help you accurately analyze color contrast. Strive for a minimum contrast ratio of 4.5:1, although 7:1 is preferred because it meets more stringent accessibility standards. For guidance, see Color and effects.\n\nDark Mode\n\nOn iPhone, your customers can use the system-wide appearance called Dark Mode. Because Dark Mode uses a darker color palette, you might need to redesign your logo and picker icons so that they look good in both light and dark appearances.\n\nWide logo\nMessages list or square logo\nList picker\nTime picker\n\nUse colors that contrast well with both light and dark color palettes. For example, dark transparencies and colors aren’t visible in Dark Mode.\n\nLogo\n\nYour logo visually identifies your business in Messages and other contexts throughout the system.\n\nTest your logo’s appearance in all contexts. View your logo in the message list, conversation navigation bar, and notifications, and make sure it’s clear and distinct.\n\nProvide your logo in both square and wide variations. Make sure your logo looks great everywhere by creating a separate version for each variation.\n\nUse adequate padding in your logo. Unless your logo has full-bleed elements, it’s best to inset key elements from the edges by 10% of the image’s width and height.\n\nAvoid using colors that make it hard for people to perceive your logo. For example, colorblind people might not be able to distinguish some color combinations, and insufficient contrast can cause icons and text to blend with the background and make content hard to read. For guidance, see Color and effects.\n\nSquare logo\n\nYour square logo appears on the contact card for your business, in search results, in the message list view, and in the navigation bar of a conversation if you don’t provide a wide logo.\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nBackground\n\n\t\n\nFull color\n\n\n\n\nColor space\n\n\t\n\nsRGB or P3\n\n\n\n\nFormat\n\n\t\n\nPNG or JPEG\n\n\n\n\nLayers\n\n\t\n\nFlattened\n\n\n\n\nMaximum file size\n\n\t\n\n2 MB\n\n\n\n\nMinimum dimensions\n\n\t\n\n1024x1024 px\n\n\n\n\nPadding\n\n\t\n\n10% of the image’s width and height\n\n\n\n\nResolution\n\n\t\n\n@3x\n\n\n\n\nShape\n\n\t\n\nSquare canvas\n\n\n\n\nTransparency\n\n\t\n\nNo\n\nWide logo\n\nYour wide logo appears in the navigation bar of a conversation.\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nBackground\n\n\t\n\nTransparent\n\n\n\n\nColor space\n\n\t\n\nsRGB or P3\n\n\n\n\nFormat\n\n\t\n\nPNG\n\n\n\n\nLayers\n\n\t\n\nFlattened with transparency as appropriate\n\n\n\n\nMaximum file size\n\n\t\n\n2 MB\n\n\n\n\nMaximum width\n\n\t\n\n1706 px\n\n\n\n\nMinimum height\n\n\t\n\n256 px\n\n\n\n\nResolution\n\n\t\n\n@3x\n\n\n\n\nShape\n\n\t\n\nRectangular canvas. Allow transparency to define the logo shape.\n\n\n\n\nTransparency\n\n\t\n\nYes\n\nMessage bubble content\n\nMessage bubbles for standard interactive messages like Apple Pay payment requests, rich links, and pickers include a title, and can optionally include additional text and an image (which can be a video thumbnail). Optional text includes a primary, secondary, and tertiary subtitle, and an image title and subtitle.\n\nMessage bubble layout styles\n\nMessage bubbles for standard interactive messages support the following layout styles.\n\nStyle\n\n\t\n\nDescription\n\n\t\n\nSize\n\n\n\n\nIcon\n\n\t\n\nHorizontal bubble with an icon\n\n\t\n\n280x65 pt\n\n\n\n\nSmall\n\n\t\n\nHorizontal bubble with a small image\n\n\t\n\n280x85 pt\n\n\n\n\nLarge\n\n\t\n\nHorizontal bubble with a large image\n\n\t\n\n280x210 pt\n\nScale images based on the layout style. When using the same image for multiple layout styles, provide a scaled image variation for each layout style. See Image sizes for sizing guidance.\n\nImages for message bubbles\n\nIn a conversation, you can add an image to an interactive message bubble to provide greater context. When asking the customer to choose a product, for example, you could show product photos in a list picker to help people visually distinguish the items. Or, when requesting payment, you could show the item being purchased in the Apple Pay message bubble.\n\nWhen you include a rich link to a video in a message bubble, you supply a thumbnail image that represents the video. The following size and resolution guidelines apply equally to images and video thumbnails.\n\nImage sizes\n\nProvide images at the following sizes, based on where the images are used. When displaying the same image at multiple sizes, provide a separate image for each size.\n\nUsage\n\n\t\n\nImage Size\n\n\n\n\nInteractive message message bubble (icon)\n\n\t\n\n40x40 pt (120x120 px @3x)\n\n\n\n\nInteractive message message bubble (small)\n\n\t\n\n60x60 pt (180x180 px @3x)\n\n\n\n\nInteractive message message bubble (large)\n\n\t\n\n263x150 pt (789x450 px @3x)\n\n\n\n\nList picker image\n\n\t\n\n60x60 pt (180x180 px @3x)\n\nDesigning high-resolution images\n\nA standard-resolution display has a 1:1 pixel density (or @1x), where one pixel is equal to one point. High-resolution displays have a higher pixel density, offering a scale factor of 2.0 or 3.0 (referred to as @2x and @3x). As a result, high-resolution displays demand images with more pixels.\n\n1x (10x10 px)\n\n2x (20x20 px)\n\n3x (30x30 px)\n\nFor example, suppose you have a standard resolution (@1x) image that’s 100x100 px. The @2x version of this image would be 200x200 px, and the @3x version would be 300x300 px.\n\nAlways provide high-resolution images with a scale factor of @3x. The @3x images you provide automatically scale down to @2x or @1x for display at lower resolutions.\n\nProduce artwork in the appropriate format. Use de-interlaced PNG files for bitmap/raster artwork. Use JPEG for photos.\n\nUse the 8-bit color palette for PNG graphics that don’t require full 24-bit color. Using an 8-bit color palette reduces file size without reducing image quality.\n\nOptimize JPEG files to find a balance between size and quality. Most JPEG files can be compressed without noticeable degradation of the resulting image. Even a small amount of compression can save significant disk space. Experiment with compression settings on each image to find the optimal value that yields an acceptable result.\n\nScreenshots\n\nBy creating screenshots to display on your website or in emails, you can show customers the benefits of using Messages for Business to communicate with your company.\n\nAlthough you can create custom screenshots from scratch, the easiest method is to download the Messages for Business templates from Apple Design Resources and edit them as needed. These templates include components — such as a message list, conversation view, time picker, and list picker — and symbols. You can also download an iPhone 11 Pro device frame in which to display the screenshots.\n\nRegardless of how you choose to create your screenshots, ensure that they look good and depict conversations accurately. To help make screenshots look realistic, use SF Pro Regular for conversation text (you can download the San Francisco family of fonts here).\n\nStatus bar\n\nThe system-provided status bar appears at the top edge of the screen and displays information like current time, cellular carrier, network connection status, and battery level. The status bar’s background is transparent by default, and the information it displays can be light or dark, depending on the appearance of the content behind it. It’s important to include the status bar in the screenshots you create, because people expect to see it in a messaging experience.\n\nFor consistency, use the following values in every status bar you create:\n\nTime is 9:41. Use SF Pro Regular and don’t add a.m. or p.m.\n\nCellular and Wi-Fi icons show maximum connectivity.\n\nBattery is full and doesn’t include the charging glyph.\n\nNavigation bar and Messages header\n\nThe navigation bar — which contains the Messages header — extends to the top of the screen. The system composites the status bar on top of the navigation bar, which lets the navigation bar’s background color show through. You can use the same custom colors for the navigation bar background and buttons as you use in the rest of your Messages for Business UI. For guidance, see Color.\n\nTo make your screenshots look realistic, include these items in your navigation bar and Messages header:\n\nA back button at the far left\n\nAn Info button at the far right\n\nYour company logo centered between the back and Info buttons\n\nYour company name, followed by a transparent checkmark inside a white or black circle, centered below the logo\n\nUse a maximum height of 27 pixels for your logo and 14 pixels for your company name and checkmark. For example, your navigation bar and Messages header might look something like this:\n\nMessage bubbles\n\nMessage bubbles appear in the conversation area of the Messages app screen. All conversation content, including text, links, and images, must appear within message bubbles.\n\nTo help people understand the flow of the conversation in your screenshot, it’s important to be consistent about how you use message bubbles to represent the participants. Use the following values for the bubble background color, the direction of its tail, and the text color. Use SF Pro Regular for all text.\n\nParticipant\n\n\t\n\nBackground color\n\n\t\n\nTail direction\n\n\t\n\nText color\n\n\n\n\nCustomer\n\n\t\n\n#848E99\n\n\t\n\nRight\n\n\t\n\nWhite\n\n\n\n\nAgent\n\n\t\n\n#E6E5EB\n\n\t\n\nLeft\n\n\t\n\nBlack\n\nIf you show only two message bubbles, use 4 points of vertical space to separate them. If you need to show more message bubbles, or more than one Send action, use 1 pixel to separate bubbles.\n\nFor a message bubble that contains only text, use the following values to determine its height.\n\nRows of text\n\n\t\n\nMessage bubble height (pixels)\n\n\n\n\n1\n\n\t\n\n36\n\n\n\n\n2\n\n\t\n\n57\n\n\n\n\n3\n\n\t\n\n76\n\n\n\n\n4\n\n\t\n\n96\n\n\n\n\n5\n\n\t\n\n118\n\nFor guidance on creating realistic conversations, see Automated messaging.\n\nYou might also want your screenshot to show message bubbles that include icons or rich links that display images or videos. When a message bubble includes a rich link, the title and the website URL appear below the image or video. An icon appears by itself in a message bubble. If you want to include images or icons in your message bubbles, use the following values to determine the bubble’s size.\n\nContent\n\n\t\n\nMaximum content size (pixels)\n\n\t\n\nMessage bubble size (pixels)\n\n\n\n\nImage (with tail)\n\n\t\n\nLarge (265x160)\n\n\t\n\n270x210\n\n\n\n\nImage (without tail)\n\n\t\n\nLarge (265x160)\n\n\t\n\n265x210\n\n\n\n\nImage (with tail)\n\n\t\n\nExtra large (276x160)\n\n\t\n\n280x210\n\n\n\n\nIcon\n\n\t\n\nMedium (280x85)\n\n\t\n\n280x85\n\n\n\n\nIcon\n\n\t\n\nSmall (60x33)\n\n\t\n\n280x65\n\nThe compose area\n\nThe compose area appears below the conversation area and above the keyboard, if one is present. From the left, the compose area includes a camera button and an apps button, followed by a text input field, which contains placeholder text and the microphone glyph. Use To: MyCompanyName for the placeholder text and use dark gray (#868E99) for the microphone glyph.\n\nIf you want to include the keyboard in your screenshot, add the blue typing indicator to the text input field, using #007AFF for the color. If you also want to show what the customer is typing, move the typing indicator to the right of the input text and replace the microphone glyph with the Send button.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, visionOS, or watchOS. Not supported in tvOS.\n\nResources\nRelated\n\nMessages for Business Accounts\n\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "Photo editing",
    "url": "https://developer.apple.com/design/human-interface-guidelines/photo-editing",
    "html": "Photo editing\nPhoto-editing extensions let people modify photos and videos within the Photos app by applying filters or making other changes.\n\nEdits are always saved in the Photos app as new files, safely preserving the original versions.\n\nTo access a photo editing extension, a photo must be in edit mode. While in edit mode, tapping the extension icon in the toolbar displays an action menu of available editing extensions. Selecting one displays the extension’s interface in a modal view containing a navigation bar. Dismissing this view confirms and saves the edit, or cancels it and returns to the Photos app.\n\nBest practices\n\nConfirm cancellation of edits. Editing a photo or video can be time consuming. If someone taps the Cancel button, don’t immediately discard their changes. Ask them to confirm that they really want to cancel, and inform them that any edits will be lost after cancellation. There’s no need to show this confirmation if no edits have been made yet.\n\nDon’t provide a custom navigation bar. Your extension loads within a modal view that already includes a navigation bar. Providing a second navigation bar is confusing and takes space away from the content being edited.\n\nLet people preview edits. It’s hard to approve an edit if you can’t see what it looks like. Let people see the result of their work before closing your extension and returning to the Photos app.\n\nUse your app icon for your photo editing extension icon. This instills confidence that the extension is in fact provided by your app.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or macOS. Not supported in tvOS, visionOS, or watchOS.\n\nResources\nDeveloper documentation\n\nApp extensions\n\nPhotoKit\n\nVideos\nIntroducing Photo Segmentation Mattes"
  },
  {
    "title": "ResearchKit",
    "url": "https://developer.apple.com/design/human-interface-guidelines/researchkit",
    "html": "ResearchKit\nA research app lets people everywhere participate in important medical research studies.\n\nThe ResearchKit framework provides predesigned screens and transitions that make it easy to design and build an engaging custom research app. For developer guidance, see Research & Care > ResearchKit.\n\nThese guidelines are for informational purposes only and don’t constitute legal advice. Contact an attorney to obtain advice with respect to the development of a research app and any applicable laws.\n\nCreating the onboarding experience\n\nWhen opening a research app for the first time, people encounter a series of screens that introduce them to the study, determine their eligibility to participate, request permission to proceed with the study, and, when appropriate, grant access to personal data. These screens aren’t typically revisited once they’ve been completed, so clarity is essential.\n\nAlways display the onboarding screens in the correct order.\n\n1. Introduction\n\nProvide an introduction that informs and provides a call to action. Clearly describe the subject and purpose of your study. Also allow existing participants to quickly log in and continue an in-progress study.\n\n2. Determine eligibility\n\nDetermine eligibility as soon as possible. People don’t need to move on to the consent section if they’re not eligible for the study. Only present eligibility requirements that are necessary for your study. Use simple, straightforward language that describes the requirements, and make it easy to enter information.\n\n3. Get informed consent\n\nMake sure participants understand your study before you get their consent. ResearchKit helps you make the consent process concise and friendly, while still allowing you to incorporate into the consent any legal requirements or requirements set by an institutional review board or ethics review board. Make sure that your app complies with the applicable App Store Guidelines, including the consent requirements. Typically, the consent section explains how the study works, ensures that participants understand the study and their responsibilities, and gets the participant’s consent.\n\nBreak a long consent form into easily digestible sections. Each section can cover one aspect of the study, such as data gathering, data use, potential benefits, possible risks, time commitment, how to withdraw, and so on. For each section, use simple, straightforward language to provide a high-level overview. If necessary, provide a more detailed explanation of the section that participants can read by tapping a Learn More button. Participants need to be able to view the entire consent form before they agree to participate.\n\nIf it makes sense, provide a quiz that tests the participant’s understanding. You might do this for questions the participant would otherwise be asked when obtaining consent in person.\n\nGet the participant’s consent and, if appropriate, some contact information. After agreeing to join the study, participants receive a confirmation dialog, followed by screens in which they provide their signature and contact details. Most research apps email participants a PDF version of the consent form for their records.\n\n4. Request permission to access data\n\nGet permission to access the participant’s device or data, and to send notifications. Clearly explain why your research app needs access to location, Health, or other data, and don’t request access to data that isn’t critical to your study. If your app requires it, also ask for permission to send notifications to the participant’s device.\n\nConducting research\n\nTo get input from participants, your study might use surveys, active tasks, or a combination of both. Depending on the architecture of your study, participants may interact with each section multiple times or only once.\n\nCreate surveys that keep participants engaged. ResearchKit provides many customizable screens you can use in your surveys, and makes it easy to present questions that require different types of answers, such as true or false, multiple choice, dates and times, sliding scales, and open-ended text entry. As you use ResearchKit screens to design a survey, follow these guidelines to provide a great experience:\n\nTell participants how many questions there are and about how long the survey will take.\n\nUse one screen per question.\n\nShow participants their progress in the survey.\n\nKeep the survey as short as possible. Several short surveys tend to work better than one long survey.\n\nFor questions that require some additional explanation, use the standard font for the question and a slightly smaller font for the explanatory text.\n\nTell participants when the survey is complete.\n\nMake active tasks easy to understand. An active task requires the participant to engage in an activity, such as speaking into the microphone, tapping fingers on the screen, walking, or performing a memory test. Follow these guidelines to encourage participants to perform an active task and give them the best chance of success:\n\nDescribe how to perform the task using clear, simple language.\n\nExplain any requirements, such as if the task must be performed at a particular time or under specific circumstances.\n\nMake sure participants can tell when the task is complete.\n\nManaging personal information and providing encouragement\n\nResearchKit offers a profile screen you can use to let participants manage personal information while they’re in your research app. It’s also a good idea to design a custom screen that motivates people and gives them a way to track progress in the study. Ideally, both screens are accessible at all times in your app.\n\nUse a profile to help participants manage personal data related to your study. A profile screen can let people edit data that might change during the course of the study — such as weight or sleep habits — and remind them of upcoming activities. A profile screen can also provide an easy way to leave a study and view important information, such as the consent document and privacy policy.\n\nUse a dashboard to show progress and motivate participants to continue. If appropriate for your study, use a dashboard to provide encouraging feedback, such as daily progress, weekly assessments, results from specific activities, and even results that compare the participant’s results with aggregated results from others in the study.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS. Not supported in macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nResearch & Care > ResearchKit\n\nDeveloper documentation\n\nResearch & Care > Developers\n\nProtecting user privacy — HealthKit\n\nResearchKit GitHub project\n\nVideos\nWhat's new in CareKit\nBuild a research and care app, part 1: Setup onboarding\nResearchKit and CareKit Reimagined\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nUpdated artwork."
  },
  {
    "title": "NFC",
    "url": "https://developer.apple.com/design/human-interface-guidelines/nfc",
    "html": "NFC\nNear-field communication (NFC) allows devices within a few centimeters of each other to exchange information wirelessly.\n\niOS apps running on supported devices can use NFC scanning to read data from electronic tags attached to real-world objects. For example, a person can scan a toy to connect it with a video game, a shopper can scan an in-store sign to access coupons, or a retail employee can scan products to track inventory.\n\nIn-app tag reading\n\nAn app can support single- or multiple-object scanning when the app is active, and display a scanning sheet whenever people are about to scan something.\n\nDon’t encourage people to make contact with physical objects. To scan a tag, an iOS device must simply be within close proximity of the tag. It doesn’t need to actually touch the tag. Use terms like scan and hold near instead of tap and touch when asking people to scan objects.\n\nUse approachable terminology. Near-field communication may be unfamiliar to some people. To make it approachable, avoid referring to technical, developer-oriented terms like NFC, Core NFC, Near-field communication, and tag. Instead, use friendly, conversational terms that most people will understand.\n\nUse\n\n\t\n\nDon’t use\n\n\n\n\nScan the [object name].\n\n\t\n\nScan the NFC tag.\n\n\n\n\nHold your iPhone near the [object name] to learn more about it.\n\n\t\n\nTo use NFC scanning, tap your phone to the [object].\n\nProvide succinct instructional text for the scanning sheet. Provide a complete sentence, in sentence case, with ending punctuation. Identify the object to scan, and revise the text appropriately for subsequent scans. Keep the text short to avoid truncation.\n\nFirst scan\n\n\t\n\nSubsequent scans\n\n\n\n\nHold your iPhone near the [object name] to learn more about it.\n\n\t\n\nNow hold your iPhone near another [object name].\n\nBackground tag reading\n\nBackground tag reading lets people scan tags quickly any time, without needing to first open your app and initiate scanning. On devices that support background tag reading, the system automatically looks for nearby compatible tags whenever the screen is illuminated. After detecting and matching a tag with an app, the system shows a notification that the people can tap to send the tag data to the app for processing. Note that background reading isn’t available when an NFC scanning sheet is visible, Wallet or Apple Pay are in use, cameras are in use, the device is in Airplane Mode, and the device is locked after a restart.\n\nSupport both background and in-app tag reading. Your app must still provide an in-app way to scan tags, for people with devices that don’t support background tag reading.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS. Not supported in macOS, tvOS, visionOS, or watchOS.\n\nResources\nDeveloper documentation\n\nCore NFC"
  },
  {
    "title": "Machine learning",
    "url": "https://developer.apple.com/design/human-interface-guidelines/machine-learning",
    "html": "Machine learning\nMachine learning is a powerful and versatile tool that can help you improve existing experiences and create new ones that people love.\n\nIn addition to providing familiar features like image recognition and content recommendations, your app can use machine learning to forge deep connections with people and help them accomplish more with less effort.\n\nPlanning your design\n\nMachine learning apps use models to perform tasks like recognizing images or finding relationships among numerical data. A great machine learning app depends on well-designed models as much as it depends on a well-designed UI and user experience. For insight into the process of designing models, see Create ML.\n\nAs you design your models, keep the intended experience of your app in mind. It can take a long time to adjust the behavior of models, so be prepared to change the way you use data and metrics if the app experience needs to change.\n\nDesigning the UI and user experience of a machine learning app can be uniquely challenging. Because a machine learning app bases its behavior on the data it receives — reacting to changing information and conditions — you can’t design specific reactions to a static set of scenarios. Instead, you design the experience by teaching the app how to interpret data and react accordingly.\n\nTo help you meet this challenge, first consider the role that machine learning plays in your app. Defining the role of machine learning in your app can help you discover areas in which you can explore the ways machine learning can affect the experience your app provides.\n\nUse the machine learning role you identify to help you define ways your app can receive and display data. There are several patterns — grouped into inputs and outputs — that provide guidance in areas such as getting feedback, displaying data, handling mistakes, and supporting corrections. Use the guidance in these patterns to help you integrate machine learning into your app in ways that people appreciate.\n\nThe role of machine learning in your app\n\nMachine learning systems vary widely, and the ways an app can use machine learning vary widely, too. As you approach the design of your app, think about how its features use machine learning in each of the following areas.\n\nCritical or complementary\n\nIf an app can still work without the feature that machine learning supports, machine learning is complementary to the app; otherwise, it’s a critical dependency. For example:\n\nThe keyboard uses machine learning to provide QuickType suggestions. Because the keyboard still works without these suggestions, machine learning plays a complementary role in the app.\n\nFace ID relies on machine learning to perform accurate face recognition. Without machine learning, Face ID would not work.\n\nIn general, the more critical an app feature is, the more people need accurate and reliable results. On the other hand, if a complementary feature delivers results that aren’t always of the highest quality, people might be more forgiving.\n\nPrivate or public\n\nMachine learning results depend on data. To make good design decisions, you need to know as much as possible about the types of data your app feature needs. In general, the more sensitive the data, the more serious the consequences of inaccurate or unreliable results. For example:\n\nIf a health app misinterprets data and incorrectly recommends a visit to the doctor, people are likely to experience anxiety and may lose trust in the app.\n\nIf a music app misinterprets data and recommends an artist that people don’t like, they’re likely to view the result as an inconsequential mistake.\n\nAs with critical app features, features that use sensitive data must prioritize accuracy and reliability. Regardless of the sensitivity of the data, all apps must protect user privacy at all times.\n\nProactive or reactive\n\nA proactive app feature provides results without people requesting it to do so. Proactive features can prompt new tasks and interactions by providing unexpected, sometimes serendipitous results. In contrast, a reactive app feature provides results when people ask for them or when they take certain actions. Reactive features typically help people as they perform their current task. For example:\n\nQuickType suggests words in reaction to what people type.\n\nSiri Suggestions can proactively suggest a shortcut based on people’s recent routines.\n\nBecause people don’t ask for the results that a proactive feature provides, they may have less tolerance for low-quality information. To reduce the possibility that people will find proactive results intrusive or irrelevant, you may need to use additional data for the feature.\n\nVisible or invisible\n\nApps may use machine learning to support visible or invisible features. People are usually aware of visible app features because such features tend to offer suggestions or choices that people view and interact with. For example, a visible keyboard feature tries to guess the word that people are typing and presents the most likely words in a list from which people choose.\n\nAs the name suggests, an invisible feature provides results that aren’t obvious to people. For example, the keyboard learns how people type over time so it can optimize the tap area for each key and help them make fewer typing mistakes. Because this app feature improves the typing experience without requiring people to make choices, many people aren’t aware that the feature exists.\n\nPeople’s impression of the reliability of results can differ depending on whether a feature is visible or invisible. With a visible feature, people form an opinion about the feature’s reliability as they choose from its results. It’s harder for an invisible feature to communicate its reliability — and potentially receive feedback — because people may not be aware of the feature at all.\n\nDynamic or static\n\nAll machine learning models can improve, but some improve dynamically, as people interact with the app feature, and others improve offline and affect the feature only when the app updates. For example:\n\nFace ID improves dynamically as people’s faces gradually change over time.\n\nPhotos improves its object recognition capabilities with every new iOS release.\n\nIn addition to the frequency of app updates, static or dynamic improvements can affect other parts of the user experience, too. For example, dynamic features often incorporate forms of calibration and feedback (either implicit or explicit), whereas static features might not.\n\nExplicit feedback\n\nExplicit feedback provides actionable information your app can use to improve the content and experience it presents to people. Unlike implicit feedback — which is information an app gleans from user actions — explicit feedback is information people provide in response to a specific request from the app.\n\nFavoriting — marking an item for quick access in the future — and social feedback — expressing emotions towards others — are common user interactions that seem like mechanisms that supply explicit feedback. However, these tools actually provide implicit feedback because they don’t support app-specific requests. People use favoriting and social feedback to accomplish their own goals and apps can gather implicit feedback from these interactions.\n\nRequest explicit feedback only when necessary. People must take action to provide explicit feedback, so it’s best to avoid requesting it if possible. Instead, consider using implicit feedback to learn how people interact with your app without asking them to do extra work.\n\nAlways make providing explicit feedback a voluntary task. You want to communicate that explicit feedback can help improve the experience without making people feel that providing it is mandatory.\n\nDon’t ask for both positive and negative feedback. Good suggestions don’t require any feedback, so you don’t want to imply that people need to give positive feedback on all the results they like. Instead, give people the opportunity to provide negative feedback on results they don’t like so that you can improve the experience.\n\nUse simple, direct language to describe each explicit feedback option and its consequences. Avoid using imprecise terms such as dislike because such terms don’t convey consequences and can be hard to translate. Instead, describe each option in a way that helps people understand what happens when they choose the option, such as:\n\nSuggest less pop music\n\nSuggest more thrillers\n\nMute politics for a week\n\nAdd icons to an option description if it helps people understand it. Icons can help clarify or emphasize part of an option description. Avoid using an icon by itself, because it might not be clear enough to communicate granularity or consequences.\n\nConsider offering multiple options when requesting explicit feedback. Providing multiple options can give people a sense of control and help them identify unwanted suggestions and remove them from your app. To help people provide feedback, consider offering options that become progressively more specific so that it’s easy for people to clarify their response.\n\nAct immediately when you receive explicit feedback and persist the resulting changes. For example, if people identify content they don’t want to see, that the content instantly disappears from their view and doesn’t appear elsewhere in your app. When you react immediately to feedback and show that your app remembers it, you build people’s trust in the value of providing it.\n\nConsider using explicit feedback to help improve when and where you show results. For example, people might like a result, but they may not want to see it at certain times or in certain contexts. Explicit feedback on when and where to show results can help you fine-tune the experience people have in your app.\n\nImplicit feedback\n\nImplicit feedback is information that arises as people interact with your app’s features. Unlike the specific responses you get from explicit feedback, implicit feedback gives you a wide range of information about user behavior and preferences. Although incorporating implicit feedback isn’t required for a great machine learning app, the feedback can help you improve your app’s user experience without asking people to do any extra work.\n\nAlways secure people’s information. Implicit feedback can gather potentially sensitive user information, so you must be particularly careful to maintain strict controls on user privacy.\n\nHelp people control their information. As an app developer, you know that the more you understand about the behavior of your users — both within your app and in other apps — the more you can improve the experience your app provides. Although most people understand the benefits of making their information available to multiple apps, they may still be surprised when things they do in one app affect experiences they have in a different app. Worse, people may assume that apps are sharing their private information, which can cause them to lose trust in the apps. It’s important to tell people how your app gets and shares their information and to give people ways to restrict the flow of their information.\n\nDon’t let implicit feedback decrease people’s opportunities to explore. Implicit feedback tends to reinforce people’s behavior, which can improve the user experience in the short term, but may worsen it in the long term. For example, it might seem like a good idea to give people a set of suggestions that matches all the things they’re interested in now, but doing so doesn’t encourage them to explore new things.\n\nWhen possible, use multiple feedback signals to improve suggestions and mitigate mistakes. Implicit feedback is indirect, so it can be difficult to discern a person’s actual intent in the information you gather. For example, if someone views a photo, shares it in a message, and adds it to a shared album, it doesn’t necessarily mean they have positive feelings about the photo. Incorporate implicit feedback from multiple sources and interactions to help you avoid misinterpreting people’s intentions.\n\nConsider withholding private or sensitive suggestions. People often share their accounts and devices with others, or switch from using a personal device to a communal one. If your app receives implicit feedback related to private or sensitive topics, avoid offering recommendations based on that feedback.\n\nPrioritize recent feedback. People’s tastes can change frequently, so base your recommendations on recent implicit feedback. For example, Face ID prioritizes recent facial input because it’s most likely to represent what the person looks like now. If recent feedback isn’t available, you can fall back to historical feedback.\n\nUse feedback to update predictions on a cadence that matches the person’s mental model of the feature. For example, people expect typing suggestions to update immediately as they’re typing. On the other hand, giving people continuously updated song recommendations makes it hard to consider individual songs and could make them feel rushed or overwhelmed.\n\nBe prepared for changes in implicit feedback when you make changes to your app’s UI. Even small UI changes can lead to noticeable changes in the amount and types of implicit feedback. For example, changing the location of a button can affect how people use it, even if there’s no change in the benefit they get from the button’s action. Take such changes into account when interpreting the implicit feedback you receive from interactions in your app.\n\nBeware of confirmation bias. Implicit feedback is constrained by what people can actually see and do in your app and other apps — it rarely gives you insight into new things they might like to do. Avoid relying solely on implicit feedback to inform your results.\n\nCalibration\n\nCalibration is a process during which people provide information that an app feature needs before it can function. To use Face ID, for example, a person must first scan their face.\n\nIn general, only use calibration when your feature can’t function without that initial information. If your feature can work without calibration, consider using other ways to gather the information you need, such as implicit feedback or possibly explicit feedback.\n\nAlways secure people’s information. During calibration, people may provide sensitive information and you must make sure it remains secure.\n\nBe clear about why you need people’s information. Typically, calibration is required before people can use a feature, so it’s essential that they understand the value of providing their information. As you briefly describe how people can benefit from your feature, emphasize what it does rather than how it works.\n\nCollect only the most essential information. Designing a unique experience that requests a minimal amount of information can make people more comfortable participating in the process and increase their trust in your app.\n\nAvoid asking people to participate in calibration more than once. Also, it’s best when calibration occurs early in the user experience. As people continue using your app or feature, you can use implicit or explicit feedback to evolve your information about them without asking them to participate again. An exception is a feature that needs calibration with an object instead of a person. For example, an app that helps people improve their baseball swing might need to calibrate with each new baseball field.\n\nMake calibration quick and easy. Even a brief calibration experience takes time and requires effort from people. An ideal calibration experience makes it easy for people to respond, without compromising the quality of the information they provide. The following guidelines can help you create a streamlined calibration experience.\n\nPrioritize getting a few pieces of important information and infer the rest from other sources or by getting people’s feedback.\n\nAvoid asking for information that most people would have to look up.\n\nAvoid asking people to perform actions that might be difficult.\n\nMake sure people know how to perform calibration successfully. After people decide to participate in calibration, give them an explicit goal and show their progress towards it. For example, Face ID calibration briefly describes what people need to do and changes the appearance of the tick marks encircling the face as people progress through scanning.\n\nImmediately provide assistance if progress stalls. When progress stalls, people can feel stuck or powerless, and they may lose trust in your app. In this situation, it’s crucial to give people actionable recommendations that quickly get them back on track. As you provide this guidance, never imply that something’s wrong or that people are at fault, and never leave people without a clear next step.\n\nConfirm success. The moment people successfully complete calibration, reward their time and effort by giving them a clear path towards using the feature. Providing an explicit completion to the calibration experience reinforces the unique nature of the experience and helps people switch their focus to your feature.\n\nLet people cancel calibration at any time. Make sure you give people an easy way to cancel the experience at any point and avoid implying any judgement about their choice. There’s no need to provide any messaging that mentions the canceled calibration, because the next time people attempt to use the feature, they’ll have another chance to participate.\n\nGive people a way to update or remove information they provided during calibration. Letting people edit their information gives them more control and can lead them to have greater trust in your app. Although the calibration experience can help people edit their responses, it’s a good idea to let people edit their information outside of the calibration experience so that they feel free to make changes at any time.\n\nCorrections\n\nPeople use corrections to fix mistakes that apps make. For example, if a photo app automatically crops a photo in a way people don’t like, they can correct the mistake by cropping the photo in a different way.\n\nGive people familiar, easy ways to make corrections. When your app makes a mistake, you don’t want people to be confused about how to correct it. You can avoid causing confusion by showing the steps your app takes as it performs the automated task. For example, Photos highlights the controls it uses to auto-crop a photograph so that people can use the same controls to refine or undo the results.\n\nProvide immediate value when people make a correction. Reward people’s effort by instantly displaying corrected content, especially when the feature is critical or you’re responding to direct user input. Also, be sure to persist the updates so people don’t have to make the same corrections again.\n\nLet people correct their corrections. Sometimes, people make a correction without realizing that they’ve made a mistake. As you do with all corrections, respond immediately to an updated correction and persist the update.\n\nAlways balance the benefits of a feature with the effort required to make a correction. People may not mind when a feature that automates a task makes a mistake, but they’re likely to stop using the feature if it seems easier to perform the task themselves.\n\nNever rely on corrections to make up for low-quality results. Although corrections can reduce the impact of a mistake, depending on them may erode people’s trust in your app and reduce the value of your feature.\n\nLearn from corrections when it makes sense. A correction is a type of implicit feedback that can give you valuable information about ways your app doesn’t meet people’s expectations. Before you use a correction to update your models, make sure that the correction will lead to higher quality results.\n\nWhen possible, use guided corrections instead of freeform corrections. Guided corrections suggest specific alternatives, so they require less user effort; freeform corrections don’t suggest specific alternatives, so they require more input from people. An example of guided correction is a speech-to-text feature that gives people a list of alternative text completions from which to choose. In contrast, Photos offers freeform correction so that people can adjust the auto-cropping of a photo as they see fit. If it makes sense in your app, you can support a combination of guided and freeform corrections.\n\nMistakes\n\nIt’s inevitable that your app will make mistakes. Although people may not expect perfection, mistakes can damage their experience and decrease their trust in your app. To help you avoid negative consequences, it’s crucial to:\n\nAnticipate mistakes. As much as possible, design ways to avoid mistakes and mitigate them when they happen.\n\nHelp people handle mistakes. Mistakes can have a wide range of consequences, so the tools you provide to handle a mistake must be able to address those consequences.\n\nLearn from mistakes when doing so improves your app. In some cases, learning from a mistake might have undesirable effects, such as causing unpredictability in the user experience. When it makes sense, use each mistake as a data point that can refine your machine learning models and improve your app.\n\nThere are several machine learning patterns that can help you address mistakes:\n\nLimitations help you set people’s expectations about the accuracy of your suggestions.\n\nCorrections give people a way to be successful even when your results are wrong.\n\nAttribution gives people insight into where suggestions come from, which can help them understand mistakes.\n\nConfidence helps you gauge the quality of your results, which can impact how you present them.\n\nFeedback — both explicit and implicit — lets people tell you about mistakes that you might not be aware of.\n\nUnderstand the significance of a mistake’s consequences. For example, incorrect keyboard suggestions might annoy people, but suggesting a travel route that results in a missed flight is a serious inconvenience. Show empathy by providing corrective actions or tools that match the seriousness of the mistake.\n\nMake it easy for people to correct frequent or predictable mistakes. If you don’t give people an easy way to correct mistakes, they can lose trust in your app.\n\nContinuously update your feature to reflect people’s evolving interests and preferences and help avoid mistakes. For example, you can use implicit feedback to discover changes in people’s tastes and habits. It’s also a good idea to update your feature with domain-specific information, such as current trends in popular entertainment. Ideally, people don’t have to do any work to benefit from improvements in your app.\n\nWhen possible, address mistakes without complicating the UI. Some patterns, such as corrections and limitations, tend to integrate seamlessly with an app’s UI, whereas others, like attributions, can be harder to integrate. Balance a pattern’s effect on the UI with its potential for compounding the mistake. For example, if you update the UI with an attribution that turns out to be wrong, the effect of the original mistake is magnified.\n\nBe especially careful to avoid mistakes in proactive features. A proactive feature — like a suggestion based on people’s behaviors — promises valuable results without asking people to do anything to get them. However, because people don’t request a proactive feature, they often have less patience with its mistakes. Mistakes made by proactive features can also cause people to feel that they have less control.\n\nAs you work on reducing mistakes in one area, always consider the effect your work has on other areas and overall accuracy. For example, optimizing an image-recognition app to improve how it recognizes dogs might result in a decreased ability to recognize cats. As your models evolve, be prepared for mistakes to evolve, too. Use what you know about people’s preferences to help you determine the areas to work on.\n\nMultiple options\n\nDepending on the design of your feature, it might work best to present a single result or multiple results from which people can choose. Providing multiple options can give people a greater sense of control and can help bridge the gap between your model’s predictions and what people actually want. Multiple options can also encourage people to have realistic expectations about the types of results your app generates.\n\nYou might present multiple options to people in the following contexts:\n\nSuggested options, a proactive feature that suggests content to people based on the their past interactions. For example, For You recommendations from Apple Music.\n\nRequested options, a reactive feature that suggests potential next steps to people based on their recent actions. For example, Quick Type suggestions.\n\nCorrections, which are actions people take to fix mistakes your app has made when it’s acting on their behalf. For example, the Photos Auto-Crop feature.\n\nPrefer diverse options. When possible, balance the accuracy of a response with the diversity of multiple options. For example, Apple Maps generally suggests more than one route to a destination, such as a route without tolls, a scenic route, or a route that uses highways. Providing different types of options helps people choose the one that they prefer and can also suggest new items that might interest them.\n\nIn general, avoid providing too many options. People must evaluate each option before making a choice, so more options increases cognitive load. When possible, list options on one screen so people don’t have to scroll to find the right one.\n\nList the most likely option first. When you know how your confidence values correlate with the quality of your results, you might use them to rank the options. You might also consider using contextual information, such as the time of day or the current location, to help you determine the most likely option. If it makes sense in your app, select the first option by default so people can quickly achieve their goals without reading through every option.\n\nMake options easy to distinguish and choose. For example, in a routing app, people often need to make route choices quickly to avoid going the wrong way. When options look similar, help people distinguish between them by providing a brief description of each one and taking particular care to highlight the differences. In cases where there are too many options to display in a single view, such as with content recommendations, consider grouping options in categories that people can scan rapidly.\n\nLearn from selections when it makes sense. People give you implicit feedback every time they make a selection. When it doesn’t adversely affect the user experience, use this feedback to refine the options you provide and increase the chance that you’ll present the most likely option first. In general, continuing to offer incorrect results is likely to decrease people’s trust in the quality of your app’s predictions.\n\nConfidence\n\nConfidence indicates the measure of certainty for a result. Not all models produce confidence values by default, so you might consider generating them if you can use them to improve the user experience of your app.\n\nAlthough it might seem like higher confidence produces a higher quality result — and therefore a better user experience — it doesn’t necessarily work that way. You need to verify that your confidence values correspond to the quality of your results. For example, you might review values for multiple confidence thresholds or compare values across multiple versions of your app. If you’re not sure how your confidence values correlate with the quality of your results, it’s not a good idea to convey confidence to people.\n\nKnow what your confidence values mean before you decide how to present them. For example, people may forgive low-quality results from critical or complementary features — especially when results are accompanied by attribution or other contextual information — but presenting low-quality results in a prominent way is likely to erode trust in your app.\n\nIn general, translate confidence values into concepts that people already understand. Simply displaying a confidence value doesn’t necessarily help people understand how it relates to a result. For example, a feature that suggests new music based on a person’s listening habits might calculate that there’s a 97% match between a new song and the songs they usually listen to. However, displaying “97% match” next to the new song as an attribution doesn’t communicate enough information to help people make a choice. In contrast, providing an attribution that clearly identifies the behavior — such as “Because you listen to pop music” — can be more actionable.\n\nIn situations where attributions aren’t helpful, consider ranking or ordering the results in a way that implies confidence levels. If you must display confidence directly, consider expressing it in terms of semantic categories. For example, a feature that predicts travel prices might replace ranges of confidence numbers with categories like “high chance” and “low chance” to give context to the values and help people understand and compare the results.\n\nIn scenarios where people expect statistical or numerical information, display confidence values that help them interpret the results. For example, weather predictions, sports statistics, and polling numbers are often accompanied by specific values that express the accuracy of the data as an interval or a percentage.\n\nWhenever possible, help people make decisions by conveying confidence in terms of actionable suggestions. Understanding people’s goals is key to expressing confidence in ways that help them make decisions. For example, if your feature predicts when an item will be at its lowest price, you know that people want to optimize how they spend their time and money. For a feature like this, displaying percentages or other numerical confidence values would be less valuable than providing actionable suggestions like “This is a good time to buy,” or “Consider waiting for a better price.”\n\nConsider changing how you present results based on different confidence thresholds. If high or low levels of confidence have a meaningful impact on the ways people can experience the results, it’s a good idea to adapt your presentation accordingly. For example, when confidence is high, the face recognition feature in Photos simply displays the photos that contain a specific person, but when confidence is lower, the feature asks people to confirm whether the photos contain the person before showing more.\n\nWhen you know that confidence values correspond to result quality, you generally want to avoid showing results when confidence is low. Especially when a feature is proactive and can make unbidden suggestions, poor results can cause people to be annoyed and even lose trust in the feature. For suggestions and proactive features, it’s a good idea to set a confidence threshold below which you don’t offer results.\n\nAttribution\n\nAn attribution expresses the underlying basis or rationale for a result, without explaining exactly how a model works. Depending on the design of your app, you might want to use attributions to impart transparency and give people insight into your results. For example, if your app suggests books for people to read, you might use an attribution like “Because you’ve read mysteries” when you suggest books in the “thrillers” category.\n\nTo help you decide whether to include attributions in your app, consider how you want them to affect people. For example, you might want attributions to:\n\nEncourage people to change what they do in your app\n\nMinimize the impact of mistakes\n\nHelp people build a mental model of your feature\n\nPromote trust in your app over time\n\nConsider using attributions to help people distinguish among results. For example, if you present a set of results as multiple options, including attributions can help people choose an option based on their understanding of the premise that led to it, such as “New books by authors you’ve read.”\n\nAvoid being too specific or too general. Overly specific attributions can make people feel like they have to do additional work to interpret the results, whereas overly general attributions typically don’t provide useful information. In apps that make content recommendations, general attributions can make people feel like your app is not treating them as individuals, but overly specific attributions can make people think that your app is watching them too closely. The best attributions strike a balance between these extremes.\n\nKeep attributions factual and based on objective analysis. To be useful, an attribution needs to help people reason about a result; you don’t want to provoke an emotional response. Don’t provide an attribution that implies understanding or judgment of people’s emotions, preferences, or beliefs. For example, an app that recommends new content to people can use an attribution like “Because you’ve read nonfiction” instead of an attribution like “Because you love nonfiction.”\n\nIn general, avoid technical or statistical jargon. In most situations, using percentages, statistics, and other technical jargon doesn’t help people assess the results you provide. The exception to this is when the result itself is of a statistical or technical nature, such as information in the areas of weather, sports, polling and election results, or scientific data.\n\nLimitations\n\nEvery feature — whether it’s based on machine learning or not — has certain limitations to what it can deliver. In general, there are two types of limitations: things a feature can’t do well and things a feature can’t do at all. When there’s a mismatch between people’s expectations about a feature and what the feature can actually accomplish, a limitation can seem like a defect. For example, people might expect:\n\nPhotos to perform a search that covers every category they can imagine\n\nSiri to respond to queries that aren’t well defined, like “What is the meaning of life?”\n\nFaceID to work from every angle\n\nAn important part of the design process is to identify the scenarios where limitations impact the user experience and design ways to help people work with them. For example:\n\nSet people’s expectations before they use the feature.\n\nShow people how to get the best results while they’re using the feature.\n\nWhen inferior results occur, explain why so that people can understand the feature better.\n\nHelp people establish realistic expectations. When a limitation may have a serious effect on user experience but happens rarely, consider making people aware of the limitation before they use your app or feature. You might describe the limitation in marketing materials or within the feature’s context so that people can decide how they want to rely on the feature. If the effects of a limitation aren’t serious, you can help set people’s expectations by providing attributions.\n\nDemonstrate how to get the best results. If you don’t provide guidance for using a feature, people may assume it’ll do everything they want. When you proactively show people how to get good results, you help them benefit from the feature and establish a more accurate mental model of the feature’s capabilities. There are many ways to show people the best ways to use a feature, such as:\n\nUse placeholder text to suggest input. In Photos, the search bar displays the text “Photos, People, Places…” to help people understand what they can search for before they begin typing. Photos also displays a description of how it scans the photo library to offer search suggestions.\n\nAs people interact with the feature, provide feedback on their actions to guide them towards a result without overwhelming them. For example, while people are interacting with Animoji, the feature responds to current conditions and suggests how people can improve their results by adjusting the lighting or moving closer to the camera.\n\nSuggest alternative ways to accomplish the goal instead of showing no results. To do this successfully, you need to understand the goal well enough to suggest alternatives that make sense. For example, if people ask Siri to set a timer on a Mac, Siri suggests setting a reminder instead, because timers aren’t available in macOS. This suggestion makes sense because people’s goal is to receive an alert at a certain time.\n\nExplain how limitations can cause unsatisfactory results. People can get frustrated when it seems that your feature works intermittently. Ideally, your feature can recognize and describe the reasons for poor results to make people aware of the limitations and help them to adjust their expectations. For example, Animoji tells people that it doesn’t work well in the dark.\n\nConsider telling people when limitations are resolved. When people use a feature frequently, they learn to avoid the interactions that fail because of the feature’s limitations. When you update your app to remove a limitation, you might want to notify people so that they can adjust their mental model of your feature and return to interactions they’d previously avoided.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nDeveloper documentation\n\nCreate ML\n\nVideos\nBuild dynamic iOS apps with the Create ML framework\nExplore the Action & Vision app\nDesigning Great ML Experiences\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nOctober 24, 2023\n\n\t\n\nAdded art to Corrections section.\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "Mac Catalyst",
    "url": "https://developer.apple.com/design/human-interface-guidelines/mac-catalyst",
    "html": "Mac Catalyst\nWhen you use Mac Catalyst to create a Mac version of your iPad app, you give people the opportunity to enjoy the experience in a new environment.\n\nBefore you start\n\nMany iPad apps are great candidates for creating a Mac app built with Mac Catalyst. This is especially true for apps that already work well on iPad and support key iPad features, such as:\n\nDrag and drop. When you support drag and drop in your iPad app, you also get support for drag and drop in the Mac version.\n\nKeyboard navigation and shortcuts. Even though a physical keyboard may not always be available on iPad, iPad users appreciate using the keyboard to navigate and keyboard shortcuts to streamline their interactions. On the Mac, people expect apps to offer both keyboard navigation and shortcuts.\n\nMultitasking. Apps that do a good job scaling the interface to support Split View, Slide Over, and Picture in Picture lay the necessary groundwork to support the extensive window resizability that Mac users expect.\n\nMultiple windows. By supporting multiple scenes on iPad, you also get support for multiple windows in the macOS version of your app.\n\nAlthough great iPad apps can provide a solid foundation for creating a Mac app built with Mac Catalyst, some apps rely on frameworks or features that don’t exist on a Mac. For example, if the essential features of your experience require capabilities like gyroscope, accelerometer, or rear camera, frameworks like HealthKit or ARKit, or if the primary function you offer is something like marking, handwriting, or navigation, your app might not be suitable for the Mac.\n\nCreating a Mac version of your iPad app with Mac Catalyst gives the app automatic support for fundamental macOS features such as:\n\nPointer interactions and keyboard-based focus and navigation\n\nWindow management\n\nToolbars\n\nRich text interaction, including copy and paste as well as contextual menus for editing\n\nFile management\n\nMenu bar menus\n\nApp-specific settings in the system-provided Settings app\n\nSystem-provided UI elements take on a more Mac-like appearance, too; for example:\n\nSplit view\n\nFile browser\n\nActivity view\n\nForm sheet\n\nContextual actions\n\nColor picker\n\nTo learn more about the characteristics that distinguish the Mac experience, see Designing for macOS. For developer guidance, see Mac Catalyst.\n\nDeveloper note\n\nTo discover how views and controls can change when you create a Mac app using Mac Catalyst, download UIKit Catalog: Creating and Customizing Views and Controls and build the macOS target.\n\nChoose an idiom\n\nWhen you first create your Mac app using Mac Catalyst, Xcode defaults to the “Scale Interface to Match iPad” setting, or iPad idiom. With this setting, the system ensures that your Mac app appears consistent with the macOS display environment without requiring significant changes to the app’s layout. However, text and graphics may appear slightly less detailed because iPadOS views and text scale down to 77% in macOS when you use the iPad idiom. For example, the system scales text that uses the iPadOS baseline font size of 17pt down to 13pt in macOS.\n\nWhen your app feels at home on the Mac using the iPad idiom, consider switching to the Mac idiom. With this setting, text and artwork render in more detail, some interface elements and views take on an even more Mac-like appearance, and graphics-intensive apps may see improved performance and lower power consumption.\n\nYou’re most likely to benefit from the Mac idiom if your app displays a lot of text, detailed artwork, or animations, but choosing this idiom can also mean that you need to spend additional time updating your Mac app’s layout, text, and images.\n\nWhen you adopt the Mac idiom, thoroughly audit your app’s layout, and plan to make changes to it. To help with this effort, consider using a separate asset catalog to contain your Mac app’s assets instead of reusing the asset catalog that contains your iPad app’s assets.\n\nAdjust font sizes as needed. With the Mac idiom, text renders at 100% of its configured size, which can appear too large without adjustment. When possible, use text styles and avoid fixed font sizes.\n\nMake sure views and images look good in the Mac version of your app. With the Mac idiom, iPadOS views render at 100% of their size, making them appear more detailed. To help you visualize the difference, consider the two depictions of an image asset shown below. One version illustrates how the asset appears when you use the iPad idiom, and the other version shows how the asset appears when you adopt the Mac idiom. Both depictions are zoomed in to show how the image renders with more details when you use the Mac idiom.\n\niPad idiom\nMac idiom\n\nDeveloper note\n\nWhen you adopt the Mac idiom, the unscaled views and interface elements report different metrics, often resulting in a significant amount of additional work. To reduce the amount of work, avoid using fixed font, view, or layout sizes. For developer guidance, see Choosing a user interface idiom for your Mac app.\n\nLimit your appearance customizations to standard macOS appearance customizations that are the same or similar to those available in iPadOS. Not all appearance customizations available to iPadOS controls are available to macOS controls.\n\nIntegrate the Mac experience\n\nWhen you use Mac Catalyst to create a Mac version of your iPad app, you need to ensure that your Mac app gives people a rich Mac experience. Regardless of the idiom you choose, it’s essential to go beyond simply displaying your iPadOS layout in a macOS window.\n\niPadOS and macOS each define patterns and conventions that are rooted in the different ways people use their devices. Before you dive in and update specific views and controls, become familiar with the main differences between the platforms so you can create a great Mac app.\n\nNavigation\n\nMany iPad and Mac apps organize data in similar ways, but they use different controls and visual indicators to help people understand and navigate through the data.\n\nTypically, iPad apps use the following components to organize their content and features:\n\nSplit views. A split view supports hierarchical navigation, which consists of a two- or three-column interface that shows a primary column, an optional supplementary column, and a secondary pane of content. Frequently, apps use the primary column to create a sidebar-based interface where changes in the sidebar drive changes in the optional supplementary column, which then affect the content in the content pane.\n\nTab bars. A tab bar supports flat navigation by displaying top-level categories in a persistent bar at the bottom of the screen.\n\nPage controls. A page control displays dots at the bottom of the screen that indicate the position of the current page in a flat list of pages.\n\nIf you use a tab bar in your iPad app, consider using a split view with a sidebar or a segmented control. Both items are similar to macOS navigation conventions. To choose between a split view or a segmented control, consider the following:\n\nA split view with a sidebar displays a list of top-level items, each of which can disclose a list of child items. Using a sidebar streamlines navigation, because each tab’s contents are available within the sidebar. By using a sidebar on both iPad and Mac, you create a consistent layout that makes it easy for iPad users to start using the Mac version of your app.\n\nA segmented control and a tab bar both accommodate similar interactions, such as mutually exclusive selection. In general, using a split view instead of a tab bar works better than using a segmented control. However, a segmented control can work well on the Mac if your app uses a flat navigation hierarchy.\n\nMake sure people retain access to important tab-bar items in the Mac version of your app. Regardless of whether you use a split view or a segmented control instead of a tab bar in your iPad app, be sure to give people quick access to top-level items by listing them in the macOS View menu.\n\nOffer multiple ways to move between pages. Mac users — especially those who interact using a pointing device or only the keyboard — appreciate Next and Previous buttons in addition to iPad or trackpad gestures that let them swipe between pages.\n\nInputs\n\nAlthough both iPad and Mac accept user input from a range of devices — such as keyboard, mouse, and trackpad — touch interactions are the basis for iPadOS conventions. In contrast, keyboard and mouse interactions inform most macOS conventions.\n\nMost iPadOS gestures convert automatically when you create your Mac app using Mac Catalyst; for example:\n\niPadOS gesture…\n\n\t\n\nTranslates to mouse interaction\n\n\n\n\nTap\n\n\t\n\nLeft or right click\n\n\n\n\nTouch and hold\n\n\t\n\nClick and hold\n\n\n\n\nPan\n\n\t\n\nLeft click and drag\n\niPadOS gesture…\n\n\t\n\nTranslates to trackpad gesture\n\n\n\n\nTap\n\n\t\n\nClick\n\n\n\n\nTouch and hold\n\n\t\n\nClick and hold\n\n\n\n\nPan\n\n\t\n\nClick and drag\n\n\n\n\nPinch\n\n\t\n\nPinch\n\n\n\n\nRotate\n\n\t\n\nRotate\n\nDeveloper note\n\nThe system sends the two touches in the pinch and rotate gestures to the view under the pointer, not the view under each touch.\n\nApp icons\n\nCreate a macOS version of your app icon. Great macOS app icons showcase the lifelike rendering style that people expect in macOS while maintaining a harmonious experience across all platforms.\n\nLayout\n\nTo take advantage of the wider Mac screen in ways that give Mac users a great experience, consider updating your layout in the following ways:\n\nDivide a single column of content and actions into multiple columns.\n\nUse the regular-width and regular-height size classes, and consider reflowing elements in the content area to a side-by-side arrangement as people resize the window.\n\nPresent an inspector UI next to the main content instead of using a popover.\n\nConsider moving controls from the main UI of your iPad app to your Mac app’s toolbar. Be sure to list the commands associated with these controls in the menus of your Mac app’s menu bar.\n\nAs much as possible, adopt a top-down flow. Mac apps place the most important actions and content near the top of the window. If your iPad app provides controls in a toolbar or navigation bar, put these controls in the window toolbar of the macOS version of your app.\n\nRelocate buttons from the side and bottom edges of the screen. On iPad, placing buttons on these screen edges can help people reach them, but on a Mac, this ergonomic consideration doesn’t apply. You may want to relocate these controls to other areas or put them in the toolbar of your macOS window.\n\nMenus\n\nMac users are familiar with the persistent menu bar and expect to find all of an app’s commands in it. In contrast, iPadOS doesn’t have a persistent menu bar, and iPad users expect to find app commands within the app’s UI or in the shortcut interface that displays when they hold the Command key on a connected keyboard.\n\nDeveloper note\n\nTo support keyboard shortcuts for menu commands, use UIKeyCommand. For developer guidance, see Adding Menus and Shortcuts to the Menu Bar and User Interface.\n\nIf you provide pop-up buttons or pull-down buttons that reveal a menu in your iPad app, the menu automatically takes on a macOS appearance in the Mac app you create with Mac Catalyst.\n\nDeveloper note\n\nTo add and remove custom app menus, use UIMenuBuilder and add menu items that represent your iPad app’s commands as menu items with UICommand.\n\nThe system automatically converts the context menus in your iPad app to context menus in the macOS version of your app. As you create the Mac version of your app, consider looking for additional places to support context menus. Mac users tend to expect every object in your app to offer a context menu of relevant actions. Note that on a Mac, a context menu is sometimes called a contextual menu.\n\nPlatform considerations\n\nNo additional considerations for iPadOS or macOS. Not supported in iOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nDesigning for macOS\n\nDeveloper documentation\n\nMac Catalyst — UIKit\n\nVideos\nDesigning iPad Apps for Mac\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "In-app purchase",
    "url": "https://developer.apple.com/design/human-interface-guidelines/in-app-purchase",
    "html": "In-app purchase\nPeople can use in-app purchase to pay for virtual goods — like premium content, digital goods, and subscriptions — securely within your app, regardless of the device on which it runs.\n\nYou can also promote and offer in-app purchases directly through the App Store. For developer guidance, see In-App Purchase.\n\nTip\n\nIn-app purchase and Apple Pay are different technologies that support different use cases. Use in-app purchase to sell virtual goods in your app, such as premium content for your app and subscriptions for digital content. Use Apple Pay in your app to sell physical goods like groceries, clothing, and appliances; for services such as club memberships, hotel reservations, and event tickets; and for donations.\n\nUsing in-app purchase, there are four types of content you can offer:\n\nConsumable content like lives or gems in a game. After purchase, consumable content depletes as people use it, and people can purchase it again.\n\nNon-consumable content like premium features in an app. Purchased non-consumable content doesn’t expire.\n\nAuto-renewable subscriptions to virtual content, services, and premium features in your app on an ongoing basis. An auto-renewable subscription continues to automatically renew at the end of each subscription period until people choose to cancel it.\n\nNon-renewing subscriptions to a service or content that lasts for a limited time, like access to an in-game battle pass. People purchase a non-renewing subscription each time they want to extend their access to the service or content.\n\nFor marketing and business guidance, see In-app purchase and Auto-renewable subscriptions. For information about what you can and can’t sell in your app, including in-app purchase usage requirements and restrictions, see App Store review guidelines.\n\nBest practices\n\nLet people experience your app before making a purchase. People may be more inclined to invest in paid items or features after they’ve enjoyed your app and discovered its value. If you offer auto-renewable subscriptions, consider supporting limited free access to your content; for guidance, see Auto-renewable subscriptions.\n\nDesign an integrated shopping experience. You don’t want people to think they’ve entered a different app when they browse and purchase your digital products. Present products and handle transactions in ways that mirror the style of your app.\n\nUse simple, succinct product names and descriptions. Titles that don’t truncate or wrap and plain, direct language can help people find products quickly.\n\nDisplay the total billing price for each in-app purchase you offer, regardless of type. People need to know the total billing amount for every purchase they consider.\n\nDisplay your store only when people can make payments. If someone canʼt make payments — for example, because of parental restrictions — consider hiding your store or displaying UI that explains why the store isnʼt available. For developer guidance, see canMakePayments.\n\nUse the default confirmation sheet. When someone initiates an in-app purchase, the system displays a confirmation sheet to help prevent accidental purchases. Don’t modify or replicate this sheet.\n\nSupporting Family Sharing\n\nPeople can use Family Sharing to share access to their purchased content — such as auto-renewable subscriptions and non-consumable in-app purchases — with up to five additional family members, across all their Apple devices. To encourage people to take advantage of the Family Sharing support you offer, consider the following guidelines.\n\nProminently mention Family Sharing in places where people learn about the content you offer. For example, including “Family” or “Shareable” in a subscription or item name and referring to Family Sharing in your sign-up screen can highlight the feature and help people make an informed choice.\n\nHelp people understand the benefits of Family Sharing and how to participate. When you turn on Family Sharing, people can receive notifications about the change, depending on their current settings. For example, an existing subscriber whose sharing setting is turned off (the default) receives a notice from Apple that invites them to share their subscription with family members. Similarly, a family member can get a notification about content that’s being shared with them. (To learn more about the types of notifications people can receive, see Auto-renewable subscriptions.)\n\nAim to customize your in-app messaging so that it makes sense to both purchasers and family members. For example, when a family member views shared content for the first time, you might welcome them with wording like “Your family subscription includes…”.\n\nProviding help with in-app purchases\n\nSometimes, people need help with a purchase or want to request a refund. To help make this experience convenient, you can present custom UI within your app that provides assistance, offers alternative solutions, and helps people initiate the system-provided refund flow. For developer guidance, see beginRefundRequest(for:in:); for related guidance specific to auto-renewable subscriptions, see Helping people manage their subscriptions.\n\nProvide help that customers can view before they request a refund. In addition to including a link to the system-provided refund flow, your custom purchase-help screen can provide assistance you tailor to your app. For example, your custom screen might help people resolve problems with missing purchases, answer frequently asked questions about the in-app purchases you offer, and give people ways to submit feedback or contact you directly for support.\n\nUse a simple title for the refund action, like “Refund” or “Request a Refund”. The system-provided refund flow makes it clear that people request a refund from Apple, so there’s no need to reiterate this information.\n\nHelp people find the problematic purchase. For each recent purchase you display, include contextual information that helps people identify the one they want. For example, you might display an image of the product — along with its name and description — and list the original purchase date.\n\nConsider offering alternative solutions. For example, if the customer didn’t receive the item they purchased, you might offer immediate fulfillment or a conciliatory item. Regardless of the alternatives you offer, make it clear that people can still request a refund.\n\nMake it easy for people to request a refund. Although your purchase-help screen can offer useful information and alternative solutions, make sure this content doesn’t create a barrier to requesting a refund. For example, avoid making people scroll or open another screen to reveal your refund-request button. When people choose your refund-request item, they automatically enter the system-provided refund flow shown below.\n\nAvoid characterizing or providing guidance on Apple’s refund policies. For example, don’t speculate about whether customers will receive the refund they request. To help people understand the refund-request process, you can provide a link to Request a refund for apps or content that you bought from Apple.\n\nAuto-renewable subscriptions\n\nCall attention to subscription benefits during onboarding. By showing the value of your subscription when people first launch your app, you can educate them on how the app works and help them understand what they’ll gain by subscribing. Include a strong call to action and a clear summary of subscription terms (see Making signup effortless). For related guidance, see Onboarding.\n\nOffer a range of content choices, service levels, and durations. People appreciate the flexibility to choose the subscription that best meets their needs.\n\nConsider letting people try your content for free before signing up. Limited free access gives people the opportunity to sample your content and encourages people who already engaged with your content to sign up. For example, you might offer a freemium app, a metered paywall, or a free trial.\n\nFreemium app\nMetered paywall\nFree trial\n\nPrompt people to subscribe at relevant times, like when they near their monthly limit of free content. Additionally, consider making it easy for people to subscribe at any time by including prompts at relevant points throughout your app.\n\nEncourage a new subscription only when someone isn’t already a subscriber. Otherwise, people may believe their existing subscription has lapsed when that’s not actually the case. If you offer the same subscription options in multiple apps or through your website, provide a sign-in option so people don’t think they have to pay multiple times for the same service.\n\nMaking signup effortless\n\nA simple and informative sign-up experience makes it easy for people to act on their interest in your content, whether they’re in your app or viewing your App Store product page.\n\nProvide clear, distinguishable subscription options. Use short, self-explanatory names that differentiate subscription options from one another, and specify the price and duration for each option. If you offer an introductory price, be sure to list the introductory price, the duration of the offer, and the standard price the customer pays after the offer ends.\n\nSimplify initial signup by asking only for necessary information. A lengthy sign-up process may lower your subscription conversion rate. Defer asking for additional information until after people have signed up.\n\nIn your tvOS app, help people sign up or authenticate using another device. Instead of asking people to input information in your tvOS app, send a code to another device where they can enter the information you need.\n\nGive people more information in your app’s sign-up screen. In addition to including links to your Terms of Service and Privacy Policy in your app and App Store metadata, the in-app sign-up screen needs to include:\n\nThe subscription name, duration, and the content or services provided during each subscription period\n\nThe billing amount, correctly localized for the territories and currencies where the subscription is available for purchase\n\nA way for existing subscribers to sign in or restore purchases\n\nFor example, the Forest Explorer sign-up screen displays billing totals for monthly, biannual, and annual subscriptions in the most prominent positions. In subordinate positions, it shows breakdowns of the biannual and annual prices, so that people can compare the values and make an informed choice. The sign-up screen also contains a button that existing subscribers can use to restore their purchases.\n\nClearly describe how a free trial works. It’s particularly important to make sure people know that when the free trial is over, a payment will be automatically initiated for the next subscription period. For example, the Ocean Journal sign-up screen explicitly states both the duration of the free trial and the amount that’s billed when it ends.\n\nInclude a sign-up opportunity in your app’s settings. App and account settings are common places for people to look for a way to subscribe.\n\nSupporting offer codes\n\nIn iOS and iPadOS, subscription offer codes let you use both online and offline channels to give new, existing, and lapsed subscribers free or discounted access to your subscription content. For example, you might provide offer codes through email, give them out at a store or event, or print one on a physical product.\n\nThere are two types of offer codes you can support:\n\nA one-time use code is a unique code you generate in App Store Connect. People can redeem a one-time use code on a website, within your app (when you support redemption), or by entering it in the App Store, where they’re prompted to install your app if they haven’t already. Consider using one-time use codes when your distribution is small or when you need to restrict access to a code.\n\nA custom code is a code you create, such as NEWYEAR or SPRINGSALE. People can redeem a custom code on a website, or within your app (when you support redemption). Consider using a custom code when you want to support a large campaign that requires a mass distribution of codes.\n\nFor technical details and business guidance on using both types of offer codes, see Offer codes; to learn more about other types of offers, see Providing subscription offers.\n\nDeveloper note\n\nWhile in-app purchase is supported on all platforms, redeeming an offer code through a URL is supported in iOS and iPadOS only. The offer itself can represent a subscription that is available on any platform.\n\nClearly explain offer details. To help people make an informed decision, provide a straightforward and succinct description of your offer in your marketing materials.\n\nFollow guidelines for creating a custom code. A custom code can contain only alphanumeric ASCII characters. Don’t use special characters, including Chinese and Arabic characters.\n\nTell people how to redeem a custom code. Because people can’t redeem a custom code by entering it in their App Store account settings, it’s important to let them know that they can redeem it on your website or within your app.\n\nConsider supporting offer redemption within your app. The system automatically provides screens that present the offer-redemption flow, whether people redeem the offer in your app or in the App Store. When you use StoreKit API to let people redeem offer codes within your app, the only custom UI you need to create is one that initiates the system-provided flow. For developer guidance, see presentOfferCodeRedeemSheet(in:) and offerCodeRedemption(isPresented:onCompletion:). There are several natural places to provide this custom UI. For example, you could add a “Redeem Code” button to your paywall, onboarding screens, or your app’s settings screen.\n\nAfter people tap your custom redeem button, the system automatically provides a series of code-redemption screens like the ones shown below.\n\nSupply an engaging and informative promotional image. Creating this optional image can help people understand the value of your content. If you don’t supply a promotional image, the code redemption screens use your app icon by default. To learn more, see Promoting your in-app purchases.\n\nHelp people benefit from unlocked content as soon as they complete the redemption flow. Think about ways to align the post-redemption experience in your app with the subscriber’s new status. For example, you might provide a welcome experience for new subscribers or a brief tour of new features for an existing subscriber who’s unlocked additional functionality. In particular, be prepared to welcome people who subscribe before they open your app for the first time. For example, if you require people to create an account or sign in before they can use your app, make this process as smooth as possible for new subscribers who haven’t experienced it before.\n\nHelping people manage their subscriptions\n\nSupporting subscription management means people can upgrade, downgrade, or cancel a subscription without leaving your app. Offering subscription management within your app also gives you a natural place to provide help for common subscriber issues and present alternative offers for people to consider.\n\nProvide summaries of the customer’s subscriptions. In particular, people appreciate viewing the upcoming renewal date without having to search for it. Consider displaying this information in a settings or account screen, near the subscription-management option. For developer guidance, see Product.SubscriptionInfo.\n\nConsider using the system-provided subscription-management UI. Using StoreKit APIs lets you present a consistent experience that helps people manage or cancel their subscriptions without leaving your app. For developer guidance, see showManageSubscriptions(in:).\n\nConsider ways to encourage a subscriber to keep their subscription or resubscribe later. When you use StoreKit APIs, your app is notified when someone chooses to cancel their subscription. In this scenario, you might want to extend a personalized offer as an alternative to cancellation or invite people to describe their reasons for canceling in an exit survey. In addition to giving you insights into various customer problems, survey feedback can also help inform messaging for retention and win-back strategies.\n\nAlways make it easy for customers to cancel an auto-renewable subscription. If the manage subscription action is deep within an app — or hard to recognize — subscribers can feel they’re being discouraged or prevented from canceling.\n\nConsider creating a branded, contextual experience to complement the system-provided management UI. Within your custom UI, you might offer a popular premium tier or provide personalized suggestions for alternative plans based on what you know about the customer’s preferences or how they use your app. For example, you can create a promotional offer that provides a discounted price for a specific period of time. You might also consider subscription offer codes to help you win back lapsed subscribers and encourage existing subscribers to upgrade.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or visionOS.\n\nwatchOS\n\nThe sign-up screen in your watchOS app needs to display the same set of information about your subscription options that you display in other versions of your app. For the complete list of required items, see Making signup effortless. The following guidelines can help you design a sign-up screen that feels at home on Apple Watch.\n\nClearly describe the differences between versions of your app that run on different devices. If your watchOS app supports different functionality or provides a subset of the content that’s available on other devices, be sure to clarify these differences in your description. Be straightforward about the advantages of accessing subscription content through your watchOS app without implying that the experience is identical to the ones in other versions of your app.\n\nA description that might lead people to expect access to 90,000 maps on their Apple Watch\n\nA description that clarifies how the subscription works on Apple Watch in contrast with other devices\n\nConsider using a modal sheet to display the required information. After people respond to your call to action to learn more about your subscription offers, you can use a modal sheet to present all required items in a single view. Even though people must scroll the view to access all the information, displaying it in a modal sheet helps your app UI remain streamlined and concise. Also, a modal sheet’s default Close button makes it easy for people to return to your free content with one tap. If you create a custom sign-up view instead of using a modal sheet, design a complete, efficient flow and include a Close or Cancel button that lets people return to your free content.\n\nMake subscription options easy to compare on a small screen. People need to understand the terms of each subscription option before they can choose one. Aim to display the duration and discount information for each option in a compact way that’s easy to scan and compare. Here are two ways you might present subscription options in your watchOS app:\n\nDisplay each option in a separate button. Using one button per payment option lets people start the signup process with one tap. In this design, it’s important to lock up each button with its description so that people can see how these elements are related, especially while scrolling.\n\nDisplay a list of options, followed by a button people tap to start the signup process. Using a list to display one option per row gives you a compact design that minimizes scrolling while making subscription choices easy to scan and understand. In this design, the button’s title can update to reflect the chosen option.\n\nOne payment option per button\n\nOne payment option per list row, followed by a button that updates to display the chosen option\n\nResources\nRelated\n\nIn-App Purchase\n\nOffering Subscriptions\n\nApp Store Review Guidelines\n\nDeveloper documentation\n\nIn-App Purchase — StoreKit\n\nVideos\nMeet StoreKit 2\nSupport customers and handle refunds\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nUpdated artwork and guidance for redeeming offer codes.\n\n\n\n\nNovember 3, 2022\n\n\t\n\nAdded a guideline for displaying the total billing price for every in-app purchase item and consolidated guidance into one page."
  },
  {
    "title": "iCloud",
    "url": "https://developer.apple.com/design/human-interface-guidelines/icloud",
    "html": "iCloud\niCloud is a service that lets people seamlessly access the content they care about — photos, videos, documents, and more — from any device, without performing explicit synchronization.\n\nA fundamental aspect of iCloud is transparency. People don’t need to know where content resides. They can just assume they’re always accessing the latest version.\n\nBest practices\n\nMake it easy to use your app with iCloud. People turn on iCloud in Settings and expect apps to work with it automatically. If you think people might want to choose whether to use iCloud with your app, show a simple option the first time your app opens that provides a choice between using iCloud for all data or not at all.\n\nAvoid asking which documents to keep in iCloud. Most people expect all of their content to be available in iCloud and don’t want to manage the storage of individual documents. Consider how your app handles and exposes content, and try to perform more file-management tasks automatically.\n\nKeep content up to date when possible. In an app that supports iCloud, its best when people always have access to the most recent content. However, you need to balance this experience with respect to device storage and bandwidth constraints. If your app works with very large documents, it may be better to let people control when updated content is downloaded. If your app fits in this category, design a way to indicate that a more recent version of a document is available in iCloud. When a document is updating, provide subtle feedback if the download takes more than a few seconds.\n\nRespect iCloud storage space. iCloud is a finite resource for which people pay. Use iCloud to store information people create and understand, and avoid using it for app resources or content you can regenerate. Even if your app doesn’t implement iCloud support, remember that iCloud backups include the contents of every app’s Documents folder. To avoid using up too much space, be picky about the content you place in the Documents folder.\n\nMake sure your app behaves appropriately when iCloud is unavailable. If someone manually turns off iCloud or turns on Airplane Mode, you don’t need to display an alert notifying them iCloud is unavailable. However, it may still be helpful to unobtrusively let people know that changes they make won’t be available on other devices until they restore iCloud access.\n\nKeep app state information in iCloud. In addition to storing documents and other files, you can use iCloud to store settings and information about the state of your app. For example, a magazine app might store the last page viewed so when the app is opened on another device, someone can continue reading from where they left off. If you use iCloud to store settings, make sure it’s for ones people want applied to all of their devices. For example, some settings might be more useful at work than at home.\n\nWarn about the consequences of deleting a document. When someone deletes a document in an app that supports iCloud, the document is removed from iCloud and all other devices too. Show a warning and ask for confirmation before performing the deletion.\n\nMake conflict resolution prompt and easy. To the extent possible, try to detect and resolve version conflicts automatically. If this can’t be done, display an unobtrusive notification that makes it easy to differentiate and choose between the conflicting versions. Ideally, conflict resolution occurs as early as possible, so time isn’t wasted in the wrong version.\n\nInclude iCloud content in search results. People with iCloud accounts assume their content is universally available, and they expect search results to reflect this perspective.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nDeveloper documentation\n\nCloudKit"
  },
  {
    "title": "HealthKit",
    "url": "https://developer.apple.com/design/human-interface-guidelines/healthkit",
    "html": "HealthKit\nHealthKit is the central repository for health and fitness data in iOS, iPadOS, and watchOS.\n\nWhen you support HealthKit in your app, you can ask people for permission to access and update their health information.\n\nImportant\n\nIf your app doesn’t provide health and fitness functionality, don’t request access to people’s private health data.\n\nFor example, a nutrition app might ask for permission to retrieve people’s weight and activity data, so it can define calorie consumption goals and make dietary recommendations. In this scenario, the nutrition app could also send data — such as the calories that people log — to HealthKit, which can include the data in its global progress metrics.\n\nFor developer guidance, see HealthKit.\n\nPrivacy protection\n\nYou must request permission to access people’s data, and you must take all necessary steps to protect that data. After you receive permission, it’s essential to maintain people’s trust by clearly showing them how you use their data. For developer guidance, see Protecting user privacy.\n\nProvide a coherent privacy policy. During the app submission process, you must provide a URL to a clearly stated privacy policy, so that people can view the policy when they click the link in the App Store page for your app. For developer guidance, see App Information > App Store Connect Help.\n\nRequest access to health data only when you need it. It makes sense to request access to weight information when people log their weight, for example, but not immediately after your app launches. When your request is clearly related to the current context, you help people understand your app’s intentions. Also, people can change the permissions they grant, so your app needs to make a request every time it needs access. For developer guidance, see requestAuthorization(toShare:read:completion:).\n\nClarify your app’s intent by adding descriptive messages to the standard permission screen. People expect to see the system-provided permission screen when asked to approve access to health data. Write a few succinct sentences that explain why you need the information and how people can benefit from sharing it with your app. Avoid adding custom screens that replicate the standard permission screen’s behavior or content.\n\nManage health data sharing solely through the system’s privacy settings. People expect to globally manage access to their health information in Settings > Privacy. Don’t confuse people by building additional screens in your app that affect the flow of health data.\n\nActivity rings\n\nYou can enhance your app’s health and wellness offerings by displaying the Activity ring element to show people’s progress toward their Move, Exercise, and Stand goals. The Activity app defines the position and color of each ring, so people are familiar with the element and understand what it means.\n\nUse Activity rings for Move, Exercise, and Stand information only. Activity rings consistently represent progress in these specific areas. Don’t attempt to replicate or modify Activity rings for other purposes or to display other types of data. Never show Move, Exercise, and Stand progress in another ring-like element.\n\nUse Activity rings to show progress for a single person. Never use Activity rings to represent data for more than one person, and make sure it’s obvious whose progress is shown, such as by using a label, a photo, or an avatar.\n\nDon’t use Activity rings for ornamentation. Activity rings provide information to people; they don’t merely embellish your app’s design. Never display Activity rings in labels or background graphics.\n\nDon’t use Activity rings for branding. Use Activity rings strictly to display Activity progress in your app. Never use Activity rings in your app’s icon or marketing materials.\n\nMaintain Activity ring and background colors. For a consistent user experience, the visual appearance of Activity rings must always be the same, regardless of the context in which they appear. Never change the look of the rings or background by using filters, changing colors, or modifying opacity. Instead, design the surrounding interface to blend with the rings. For example, enclose the rings within a circle. Always scale the rings appropriately so they don’t seem disconnected or out of place.\n\nMaintain Activity ring margins. An Activity ring element must include a minimum outer margin of no less than the distance between rings. Never allow other elements to crop, obstruct, or encroach upon this margin or the rings themselves. To display an Activity ring element within a circle, adjust the corner radius of the enclosing view rather than applying a circular mask.\n\nDifferentiate other ring-like elements from Activity rings. Mixing different ring styles can lead to a visually confusing interface. If you must include other rings, use padding, lines, or labels to separate them from Activity rings. Color and scale can also help provide visual separation.\n\nProvide app-specific information only in Activity notifications. The system already delivers Move, Exercise, and Stand progress updates. Don’t repeat this same information, and never show an Activity ring element in your app’s notifications. It’s fine to reference Activity progress in a notification, but do so in a way that’s unique to your app and doesn’t replicate the same information provided by the system.\n\nFor developer guidance, see HKActivityRingView.\n\nApple Health icon\n\nThe Apple Health icon shows that an app works with HealthKit and the Health app. The following guidelines help you use the icon correctly. To learn how to refer to HealthKit and the Health app in copy and UI text, see Editorial guidelines; to learn about using the “Works with Apple Health” badge in your marketing communications, see Works with Apple Health.\n\nUse only the Apple-provided icon. Don’t create your own Apple Health icon design or attempt to mimic any Apple-provided designs. Download the Apple Health app icon from Apple Design Resources.\n\nDisplay the name Apple Health close to the Apple Health icon. Displaying both elements near each other reminds people that the icon represents the Health app.\n\nDisplay the Apple Health icon consistently with other health-related app icons. In a view that contains other app icons, make the Apple Health icon no smaller than other icons.\n\nDon’t use the Apple Health icon as a button. Use the icon only to indicate compatibility with the Health app.\n\nDon’t alter the appearance of the Apple Health icon. Don’t mask the icon to change its corner radius or present it in a circular shape. Don’t add embellishments like borders, color overlays, gradients, shadows, or other visual effects.\n\nMaintain a minimum clear space around the Apple Health icon of 1/10 of its height. Don’t composite the icon onto another graphic element.\n\nDon’t use the Apple Health icon within text or as a replacement for the terms Health, Apple Health, or HealthKit. See Editorial guidelines to learn how to properly reference the Health app and HealthKit in text.\n\nDon’t display Health app images or screenshots. Like all Apple images, these designs are copyrighted and can’t appear in your app or marketing materials. You can include an Activity ring element in your app to display Move, Exercise, and Stand progress; for guidance, see Activity rings.\n\nEditorial guidelines\n\nRefer to the Health app as Apple Health or the Apple Health app. In your app and marketing text, using Apple Health adds clarity.\n\nDon’t use the term HealthKit. HealthKit is a developer-facing term that names the framework your app uses to access health data. If you need to explain to people how your app works with their data, use the term the Apple Health app. For example, you might say that your app “works with the Apple Health app” or “uses data from the Apple Health app.”\n\nUse correct capitalization when using the term Apple Health. Apple Health is two words, with an uppercase A and uppercase H, followed by lowercase letters. You can display Apple Health entirely in uppercase only when you need to conform to an established typographic interface style, such as in an app that capitalizes all text.\n\nUse the system-provided translation of Health to avoid confusing people. It’s best to refer to the Apple Health app using the translation that people view on their device.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, visionOS, or watchOS. Not supported in macOS or tvOS.\n\nResources\nRelated\n\nWorks with Apple Health\n\nActivity rings\n\nApple Design Resources\n\nDeveloper documentation\n\nHealthKit\n\nProtecting user privacy — HealthKit\n\nVideos\nWhat's new in watchOS 8\nWhat's new in HealthKit\nMeasure health with motion"
  },
  {
    "title": "Apple Pay",
    "url": "https://developer.apple.com/design/human-interface-guidelines/apple-pay",
    "html": "Apple Pay\nApple Pay is a secure, easy way to make payments for physical goods and services — as well as donations and subscriptions — in apps running on iPhone, iPad, Mac, and Apple Watch, and on websites.\n\nPeople authorize payments and provide shipping and contact information, using credentials that are securely stored on the device.\n\nTip\n\nIt’s important to understand the difference between Apple Pay and In-app purchase. Use Apple Pay in your app to sell physical goods like groceries, clothing, and appliances; for services such as club memberships, hotel reservations, and tickets for events; and for donations. Use In-App Purchase in your app to sell virtual goods, such as premium content for your app, and subscriptions for digital content.\n\nApps that accept Apple Pay display an Apple Pay mark wherever available payment options are shown and an Apple Pay button that people tap to bring up a payment sheet. During checkout, the payment sheet can show the credit or debit card linked to Apple Pay, purchase amount (including tax and fees), shipping options, and contact information. People make any necessary adjustments and then authorize payment and complete the purchase.\n\nFor developer guidance, see doc://com.apple.documentation/documentation/passkit/apple_pay.\n\nWebsites that accept Apple Pay incorporate it into the purchasing flow. An Apple Pay mark needs to be shown wherever available payment options are shown and an Apple Pay button lets people view a payment sheet. During checkout, the payment sheet can show the credit or debit card linked to Apple Pay, purchase amount (including tax and fees), shipping options, and contact information. People make any necessary adjustments, authorize payment, and complete the purchase using securely stored credentials on iPhone, iPad, and Macs that include Touch ID or a Magic Keyboard with Touch ID (for a complete list of supported Macs, see Devices compatible with Apple Pay). On other Macs, people confirm the purchase with their nearby iPhone or Apple Watch on which Apple Pay is set up.\n\nAll websites that offer Apple Pay must include a privacy statement and adhere to the Acceptable use guidelines for Apple Pay on the web. For developer guidance, see Apple Pay on the Web. For a hands-on demo of Apple Pay on the web, see Apple Pay on the web interactive demo.\n\nOffering Apple Pay\n\nOffer Apple Pay on all devices that support it. If the device doesn’t support Apple Pay, don’t present Apple Pay as a payment option.\n\nIf you use Apple Pay APIs to find out whether someone has an active card in Wallet, you must make Apple Pay the primary — but not necessarily sole — payment option everywhere you use the APIs. For example, you might pre-select Apple Pay as the payment option when you display it alongside other options. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymentauthorizationcontroller (iOS, watchOS) and canMakePaymentsWithActiveCard (web).\n\nIf you also offer other payment methods, offer Apple Pay at the same time. Feature Apple Pay at least as prominently as the other options on every page or screen that offers or accepts payment methods.\n\nIf you use an Apple Pay button to start the Apple Pay payment process, you must use the Apple-provided API to display it. Unlike a button graphic, the buttons produced by the API always have the correct appearance and are localized automatically. On devices running older systems that support Apple Pay on the web but don’t include the API, use the recommended CSS to display the buttons on your website, as described in Displaying Apple Pay Buttons Using CSS.\n\nIf you use a custom button to start the Apple Pay payment process, make sure your custom button doesn’t display “Apple Pay” or the Apple Pay logo. In this scenario, you must let people know that you accept Apple Pay by displaying the Apple Pay mark or referencing Apple Pay in text on the same page that displays your payment button.\n\nUse Apple Pay buttons only to start the Apple Pay payment process and, when appropriate, the Apple Pay set-up process. When people choose an Apple Pay button to make a purchase, but their device doesn’t have Apple Pay set up, they’re given the opportunity to set up Apple Pay. Don’t use Apple Pay buttons in any other ways.\n\nDon’t hide an Apple Pay button or make it appear unavailable. If an Apple Pay button can’t be used yet, such as when a product size or color hasn’t been selected, gracefully point out the problem after someone taps or clicks the button.\n\nUse the Apple Pay mark only to communicate that Apple Pay is accepted. The Apple Pay mark doesn’t facilitate payment. Never use it as a payment button or position it as a button. When using the Apple Pay mark to indicate Apple Pay as the selected payment method, you can create a separate custom button conforming to your app’s design to initiate the Apple Pay payment.\n\nInform search engines that Apple Pay is accepted on your website. If your website uses semantic markup to provide product details to search engines, list Apple Pay as a payment option.\n\nFor app developer guidance, see doc://com.apple.documentation/documentation/passkit/apple_pay. For website developer guidance, including how to determine whether Apple Pay on the web is available, see Apple Pay on the Web.\n\nStreamlining checkout\n\nProvide a cohesive checkout experience. It’s best when the entire checkout flow feels tightly integrated with your app or website. To strengthen people’s perception of integration, use your branding throughout the checkout experience and avoid opening different pages or windows. For website checkout flows in particular, opening new windows during the process can cause confusion and may even lead people to think they’ve been handed off to a different website.\n\nIf Apple Pay is available, assume the person wants to use it. Consider presenting the Apple Pay button as the first payment option, displaying it larger than other options, or using a line to visually separate it from other choices.\n\nAccelerate single-item purchases with Apple Pay buttons on product detail pages. In addition to offering a shopping cart, consider putting Apple Pay buttons on product detail pages so people can purchase an individual item quickly. Purchases initiated in this way need to be for an individual item only, excluding any items that already reside in the shopping cart. If the shopping cart contains an item purchased directly from a product detail page, remove the item from the cart after the purchase is complete.\n\nAccelerate multi-item purchases with express checkout. Consider providing an express checkout feature that immediately displays the payment sheet, allowing people to purchase multiple items quickly using a single shipping method and destination. If you offer a coupon or promotional code, you can enhance the express checkout experience by letting people enter it on the payment sheet.\n\nCollect necessary information, like color and size options, before people reach the Apple Pay button. When additional information is needed at checkout time — perhaps because the customer forgot to choose an option — gracefully point out the problem and help them correct it. Use highlighting or warning text to identify missing information, and automatically navigate to the problematic field so people can correct it quickly and complete their purchase.\n\nCollect optional information before checkout begins. There’s no way to input optional data — like gift messages or delivery instructions — on the payment sheet, so collect this information ahead of time or even after the purchase is complete.\n\nGather multiple shipping methods and destinations before showing the payment sheet. The payment sheet lets people select a single shipping method and destination for an entire order. If your customers can choose different shipping methods and destinations for individual items in an order, collect those details before Apple Pay checkout begins, instead of on the payment sheet.\n\nFor in-store pickup, help people choose a pickup location before displaying the payment sheet. After a customer chooses the pickup location they want, use the read-only format to display the location’s address on the payment sheet. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymentrequest/displaying_a_read-only_pickup_address.\n\nPrefer information from Apple Pay. Assume that Apple Pay information is complete and up to date. Even if your app or website has existing contact, shipping, and payment information, consider fetching the latest from Apple Pay during checkout to reduce potential corrections.\n\nAvoid requiring account creation prior to purchase. If you want people to register for an account, ask them to do so on the order confirmation page. Prepopulate as many registration fields as possible using information provided by the payment sheet during checkout.\n\nReport the result of the transaction so that people can view it in the payment sheet. In failure cases, the payment sheet can display the errors that you provide, so people can take steps to fix the problem.\n\nDisplay an order confirmation or thank-you page. After the payment sheet shows the result of the transaction, display an order confirmation page to thank people for their purchase, provide details about when the order will ship, and indicate how to check its status. Listing Apple Pay on the confirmation page isn’t necessary, but if you do, show it after the last four digits of the account used to process the transaction or as a separate note. For example, ”1234 (Apple Pay)” or ”Paid with Apple Pay.”\n\nCustomizing the payment sheet\n\nOnly present and request essential information. People may get confused or have privacy concerns if the payment sheet includes extraneous information. For example, it makes sense to see a contact email address but not a shipping address if the purchase is a gift card that will be delivered electronically. Showing or asking for a shipping address in this scenario may give the false impression that something will be physically delivered.\n\nDisplay the active coupon or promotional code, or give people a way to enter it. For example, if people can enter a code before the payment sheet appears, displaying it on the sheet can reassure them that the code works as they expect. Alternatively, allowing code entry on the payment sheet can be particularly beneficial in an express checkout flow.\n\nLet people choose the shipping method in the payment sheet. To the extent space permits, show a clear description, a cost, and, optionally, an estimated delivery or pickup date — or range of dates — for each available option. In iOS 15 and later, you can take advantage of the shipping method’s calendar and time-zone support to provide accurate delivery or pickup information, regardless of the customer’s current location. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkdatecomponentsrange.\n\nFor in-store pickup, consider letting people choose a pickup window that works for them. You can use the shipping method to supply a range of dates and times from which people can choose.\n\nUse line items to explain additional charges, discounts, pending costs, add-on donations, recurring, and future payments. A line item includes a label and cost; a line item for a recurring payment can also include a frequency. Don’t use line items to show an itemized list of products that make up the purchase. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymentrequest/1619231-paymentsummaryitems; for guidance on donations, see Supporting donations.\n\niOS\nWeb\n\nKeep line items short. Make line items specific and easily understandable at a glance. Whenever possible, fit line items on a single line.\n\nProvide a business name after the word Pay on the same line as the total. Use the same business name people will see when they look for the charge on their bank or credit card statement. This provides reassurance that payment is going to the right place. For example, Pay [Business_Name].\n\nIf you’re not the end merchant, specify both your business name and the end merchant’s name in the payment sheet. There are a few ways your app, App Clip, or website might help people make a purchase from an end merchant that’s unrelated to your company. For example, a marketplace app can help people make a purchase from an end merchant they might not recognize. Another example is an app that offers a self-checkout service people can use to pay for an item in an end merchant’s physical store without visiting the store’s checkout counter. In scenarios like these, people might not realize two businesses are involved in the transaction, so it’s essential to name both businesses and clarify their roles. When your app acts as an intermediary for an end merchant, clearly and succinctly describe the situation in the Pay line of the payment sheet, using something like Pay [End_Merchant_Business_Name (via Your_Business_Name)].\n\nClearly disclose when additional costs may be incurred after payment authorization. In some cases, the total cost may be unknown at checkout time. For example, the price of a car ride based on distance or time might change after checkout. Or, a customer might want to add a tip after a product is delivered. In situations like these, and when local regulations allow, you can provide a clear explanation in the payment sheet and a subtotal marked as Amount Pending. If you’re preauthorizing a specific amount, be sure the payment sheet accurately reflects this information.\n\nHandle data entry and payment errors gracefully. If an error occurs during checkout, help people resolve it quickly so they can complete their transaction. For related guidance, see Data validation.\n\nDisplaying a website icon\n\nMany websites provide an icon that can display with bookmarks, in URL fields, or on a device’s Home screen. Websites that support Apple Pay can display this icon in a summary view and in the payment sheet of the connected device that’s used to authorize payment. The icon provides visual reassurance that payment is going to the right place.\n\nIf your website supports Apple Pay, provide an icon in the following sizes for use in the summary view and the payment sheet:\n\n@2x\n\n\t\n\n@3x\n\n\n\n\n60x60 pt (120x120 px @2x)\n\n\t\n\n60x60 pt (180x180 px @3x)\n\nHandling errors\n\nProvide clear, actionable guidance when problems occur during checkout or payment processing, so people can resolve problems quickly and complete their transaction.\n\nData validation\n\nYour app or website can respond to user input when the payment sheet appears, when people change certain field values on the payment sheet, and after they authenticate the transaction. Use these opportunities to check for data entry problems and to provide clear and consistent messaging.\n\niOS\nWeb\n\nPayment sheet error messaging\n\nCustom detail view error messaging\n\nWhen data is invalid, system-provided error messaging calls attention to relevant fields on the payment sheet. People can choose a field to view additional details and resolve the problem. Provide customized error messages for the detail view that appears when people choose a problematic field.\n\nFor developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymentauthorizationviewcontrollerdelegate (iOS, watchOS) and Apple Pay on the Web (web).\n\nNote\n\nFor privacy reasons, your app or website has limited access to data until people attempt to authorize a transaction. Prior to authorization, only the card type and a redacted shipping address are accessible. It’s critical to display errors when authorization fails, but to the extent possible, you also need to attempt to validate available information and report problems before authorization.\n\nAvoid forcing compliance with your business logic. Design a data validation process that’s intelligent enough to ignore irrelevant data and infer missing data whenever possible. For example, if your app requires a five-digit zip code but someone enters a Zip+4 code, ignore the additional digits rather than asking for a correction. Let people enter phone numbers in multiple formats — such as with and without dashes, and with and without a country code — without producing an error.\n\nProvide accurate status reporting to the system. When a problem occurs, it’s essential that your app or website accurately indicate the type of problem so the system can show the most relevant error message on the payment sheet. This is done by accompanying your custom error message with the correct status code. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymenterror (iOS, watchOS) and Apple Pay Status Codes (web).\n\nSuccinctly and specifically describe the problem when data is invalid or incorrectly formatted. Reference the relevant field and indicate exactly what’s expected. For example, if people enter an invalid zip code, instead of showing “Address is invalid,” show a specific message like “Zip code doesn’t match city.” If the shipping address is unserviceable, indicate why with a message like “Shipping not available for this state.” Use noun phrases with sentence-style capitalization and no ending punctuation. Aim to keep messages at 128 characters or fewer to avoid truncation.\n\nPayment processing\n\nHandle interruptions correctly. A user-driven event like a cancellation or a system-driven event like a timeout could cause an interruption in the payment flow, resulting in the payment sheet being dismissed. When such an event occurs, you must cancel any in-progress payment. After the payment sheet dismisses, people can restart the process by choosing the Apple Pay button again. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymentauthorizationviewcontrollerdelegate (iOS, watchOS) and oncancel (web).\n\nSupporting subscriptions\n\nYour app or website can use Apple Pay to request authorization for recurring fees. A recurring fee can be a fixed amount, such as a monthly movie ticket subscription, or — when local regulations allow — a variable amount like a weekly grocery order. The initial authorization can also include discounts and additional fees.\n\niOS\nWeb\n\nFixed subscription\n\nVariable subscription (where local regulations allow)\n\nClarify subscription details before showing the payment sheet. Before asking people to authorize a recurring payment, make sure they fully understand the billing frequency and any other terms of service. You can reiterate the billing frequency on the payment sheet.\n\nInclude line items that reiterate billing frequency, discounts, and additional upfront fees. Use these line items to remind people what they’re authorizing. If no payment is required at authorization time, clearly disclose when billing will occur.\n\niOS\nWeb\n\nNo payment required at authorization\n\nClarify the current payment amount in the total line. Make sure people know the amount they’re being billed at the time of authorization.\n\nOnly show the payment sheet when a subscription change results in additional fees. When the someone changes a subscription, authorization isn’t necessary if the cost decreases or remains the same.\n\nSupporting donations\n\nApproved nonprofits can use Apple Pay to accept donations.\n\nUse a line item to denote a donation. Display a line item on the payment sheet that reminds people they’re authorizing a donation; for example, display Donation $50.00.\n\nStreamline checkout by offering predefined donation amounts. You can reduce steps in the donation process by offering one-step recommended donations, like $25, $50, $100. Be sure to include an Other Amount option too, so people can customize the donation if they prefer.\n\nUsing Apple Pay buttons\n\nThe system provides several Apple Pay button types and styles you can use in your app or website. In contrast to the Apple Pay buttons, you use the Apple Pay mark to communicate the availability of Apple Pay as a payment option.\n\nDon’t create your own Apple Pay button design or attempt to mimic the system-provided button designs.\n\nFor developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymentbuttontype and doc://com.apple.documentation/documentation/passkit/pkpaymentbuttonstyle (iOS and macOS), WKInterfacePaymentButton (watchOS), and Apple Pay on the Web (web).\n\nButton types\n\nApple provides several types of buttons so you can choose the button type that fits best with the terminology and flow of your purchase or payment experience.\n\nUse the Apple-provided APIs to create Apple Pay buttons. When you use the system-provided APIs, you get:\n\nA button that is guaranteed to use an Apple-approved caption, font, color, and style\n\nAssurance that the button’s contents maintain ideal proportions as you change its size\n\nAutomatic translation of the button’s caption into the language that’s set for the device\n\nSupport for configuring the button’s corner radius to match the style of your UI\n\nA system-provided alternative text label that lets VoiceOver describe the button\n\nPayment button type\n\n\t\n\nExample usage\n\n\n\n\n\t\n\nAn area in an app or website where people can make a purchase, such as a product detail page or shopping cart page.\n\n\n\n\n\t\n\nAn app or website that lets people pay bills or invoices, such as those for a utility — like cable or electricity — or a service like plumbing or car repair.\n\n\n\n\n\t\n\nAn app or website offering a shopping cart or purchase experience that includes other payment buttons that start with the text Check out.\n\n\n\n\n\t\n\nAn app or website offering a shopping cart or purchase experience that includes other payment buttons that start with the text Continue with.\n\n\n\n\n\t\n\nAn app or website that helps people book flights, trips, or other experiences.\n\n\n\n\n\t\n\nAn app or website for an approved nonprofit that lets people make donations.\n\n\n\n\n\t\n\nAn app or website that lets people purchase a subscription, such as a gym membership or a meal-kit delivery service.\n\n\n\n\n\t\n\nAn app or website that uses the term reload to help people add money to a card, account, or payment system associated with a service, such as transit or a prepaid phone plan.\n\n\n\n\n\t\n\nAn app or website that uses the term add money to help people add money to a card, account, or payment system associated with a service, such as transit or a prepaid phone plan.\n\n\n\n\n\t\n\nAn app or website that uses the term top up to help people add money to a card, account, or payment system associated with a service, such as transit or a prepaid phone plan.\n\n\n\n\n\t\n\nAn app or website that lets people place orders for items like meals or flowers.\n\n\n\n\n\t\n\nAn app or website that lets people rent items like cars or scooters.\n\n\n\n\n\t\n\nAn app or website that uses the term support to help people give money to projects, causes, organizations, and other entities.\n\n\n\n\n\t\n\nAn app or website that uses the term contribute to help people give money to projects, causes, organizations, and other entities.\n\n\n\n\n\t\n\nAn app or website that lets people tip for goods or services.\n\n\n\n\n\t\n\nAn app or website that has stylistic reasons to use a button that can have a smaller minimum width or that doesn’t specify a call to action. If you choose a payment button type that isn’t supported on the version of the operating system your app or website is running in, the system may replace it with this button.\n\nWhen a device supports Apple Pay, but it hasn’t been set up yet, you can use the Set up Apple Pay button to show that Apple Pay is accepted and to give people an explicit opportunity to set it up.\n\nYou can display the Set up Apple Pay button on pages such as a Settings page, a user profile screen, or an interstitial page. Tapping the button in any of these locations needs to initiate the process of adding a card.\n\nButton styles\n\nYou can use the automatic style to let the current system appearance determine the appearance of the Apple Pay buttons in your app (for developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymentbuttonstyle/automatic). If you want to control the button appearance yourself, you can use one of the following options. For web developer guidance, see ApplePayButtonStyle.\n\nBlack\n\nUse on white or light-color backgrounds that provide sufficient contrast. Don’t use on black or dark backgrounds.\n\nWhite with outline\n\nUse on white or light-color backgrounds that don’t provide sufficient contrast. Don’t place on dark or saturated backgrounds.\n\nWhite\n\nUse on dark-color backgrounds that provide sufficient contrast.\n\nButton size and position\n\nProminently display the Apple Pay button. Make the Apple Pay button no smaller than other payment buttons, and avoid making people scroll to see it.\n\nPosition the Apple Pay button correctly in relation to an Add to Cart button. In a side-by-side layout, place the Apple Pay button to the right of an Add to Cart button.\n\nIn a stacked layout, place the Apple Pay button above an Add to Cart button.\n\nAdjust the corner radius to match the appearance of other buttons. By default, an Apple Pay button has rounded corners. You can change the corner radius to produce a button with square corners or a capsule-shape button. For developer guidance, see doc://com.apple.documentation/documentation/passkit/pkpaymentbutton/2999416-cornerradius.\n\nMinimum corner radius\n\nDefault corner radius\n\nMaximum corner radius\n\nMaintain the minimum button size and margins around the button. Be mindful that the button title may vary in length depending on the locale.\n\nNote\n\nIf the size you specify doesn’t accommodate the translated title for the type of payment button you’re using, the system automatically replaces it with the plain Apple Pay button shown below on the left. There is no automatic replacement for the Set up Apple Pay button.\n\nUse the following values for guidance.\n\nButton\n\n\t\n\nMinimum width\n\n\t\n\nMinimum height\n\n\t\n\nMinimum margins\n\n\n\n\nApple Pay\n\n\t\n\n100pt (100px @1x, 200px @2x)\n\n\t\n\n30pt (30px @1x, 60px @2x)\n\n\t\n\n1/10 of the button’s height\n\n\n\n\nBook with Apple Pay\n\n\t\n\n140pt (140px @1x, 280px @2x)\n\n\t\n\n30pt (30px @1x, 60px @2x)\n\n\t\n\n1/10 of the button’s height\n\n\n\n\nBuy with Apple Pay\n\n\n\n\nCheck out with Apple Pay\n\n\n\n\nDonate with Apple Pay\n\n\n\n\nSet up Apple Pay\n\n\n\n\nSubscribe with Apple Pay\n\nApple Pay mark\n\nUse the Apple Pay mark graphic to show that Apple Pay is an available payment option when showing other payment options in a similar manner. The Apple Pay mark isn’t a button; if you need an Apple Pay button, choose one of the buttons described in Button types. For design guidance related to showing Apple Pay as a payment option, see Offering Apple Pay.\n\nUse only the artwork provided by Apple, with no alterations other than height. You can specify a height for the Apple Pay mark, but make sure that the height you use is equal to or larger than other payment brand marks in your payment flow. Don’t adjust the width, corner radius, or aspect ratio of the artwork; don’t add a trademark symbol or any other content; don’t remove the border; don’t add visual effects to the mark, such as shadows, glows, or reflections; and don’t flip, rotate, or animate the Apple Pay mark.\n\nMaintain a minimum clear space around the mark of 1/10 of its height. Don’t let the Apple Pay mark share its surrounding border with another graphic or button.\n\nDownload the Apple Pay mark graphic and full usage guidelines here.\n\nReferring to Apple Pay\n\nAs with all Apple product names, use Apple Pay exactly as shown in Apple Trademark List — never make it plural or possessive — and adhere to Guidelines for Using Apple Trademarks.\n\nYou can use plain text to promote Apple Pay and indicate that Apple Pay is a payment option.\n\nCapitalize Apple Pay in text as it appears in the Apple Trademark list. Use two words with an uppercase A, an uppercase P, and lowercase for all other letters. Display Apple Pay entirely in uppercase only when doing so is necessary for conforming to an established, typographic interface style, such as in an app that capitalizes all text.\n\nNever use the Apple logo to represent the name Apple in text. In the United States, use the registered trademark symbol (®) the first time Apple Pay appears in body text. Don’t include a registered trademark symbol when Apple Pay appears as a selection option during checkout.\n\n\t\n\nExample text\n\n\n\n\n\t\n\nPurchase with Apple Pay\n\n\n\n\n\t\n\nPurchase with Apple Pay®\n\n\n\n\n\t\n\nPurchase with ApplePay\n\n\n\n\n\t\n\nPurchase with  Pay\n\n\n\n\n\t\n\nPurchase with APPLE PAY\n\nCoordinate the font face and size with your app. Don’t mimic Apple typography. Instead, use text attributes that are consistent with the rest of your app or website.\n\nDon’t translate Apple Pay or any other Apple trademark. Always use Apple trademarks in English, even when they appear within non-English text.\n\nIn a payment selection context, you can display a text-only description of Apple Pay only when all payment options have text-only descriptions. If any other payment option description includes an icon or logo, you must use the Apple Pay mark as described in Offering Apple Pay.\n\nWhen promoting your app’s use of Apple Pay, follow App Store guidelines. Before promoting Apple Pay for your app, refer to the App Store marketing guidelines.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, visionOS, or watchOS. Not supported in tvOS.\n\nResources\nRelated\n\nApple Pay Marketing Guidelines\n\nDeveloper documentation\n\ndoc://com.apple.documentation/documentation/passkit/apple_pay — PassKit\n\nApple Pay on the Web\n\nWKInterfacePaymentButton — WatchKit\n\nVideos\nWhat's new in Wallet and Apple Pay\nWhat's new in Wallet and Apple Pay\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 12, 2023\n\n\t\n\nUpdated artwork.\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "Augmented reality",
    "url": "https://developer.apple.com/design/human-interface-guidelines/augmented-reality",
    "html": "Augmented reality\nAugmented reality (or AR) lets you deliver immersive, engaging experiences that seamlessly blend virtual objects with the real world.\n\nUsing the device’s camera to present the physical world onscreen live, your app can superimpose three-dimensional virtual objects, creating the illusion that these objects actually exist. Depending on the platform and the experiences your app offers, people can reorient the device to explore the objects from different angles, interact with objects using gestures and movement, and even join other people in multiuser AR experiences. For developer guidance, see ARKit.\n\nOffer AR features only on capable devices. If your app’s primary purpose is AR, make your app available only to devices that support ARKit. If your app includes features that require specific AR capabilities, or if AR features are optional in your app, don’t show people an error if they try to use these features on a device that doesn’t support them; instead, simply avoid offering the feature on an unsupported device. For developer guidance, see Verifying Device Support and User Permission.\n\nNote\n\nThe following guidance applies to apps that run in iOS and iPadOS. To learn about using ARKit to create immersive augmented reality experiences in visionOS, see ARKit.\n\nBest practices\n\nLet people use the entire display. Devote as much of the screen as possible to displaying the physical world and your app’s virtual objects. Avoid cluttering the screen with controls and information that diminish the immersive experience.\n\nStrive for convincing illusions when placing realistic objects. Design detailed 3D assets with lifelike textures to create objects that appear to inhabit the physical environment in which you place them. Using information from ARKit, you can scale objects properly and position them on detected real-world surfaces, reflect environmental lighting conditions and simulate camera grain, cast top-down diffuse object shadows on real-world surfaces, and update visuals as the camera’s position changes. To help avoid breaking the illusion you create, make sure your app updates scenes 60 times per second so objects don’t appear to jump or flicker.\n\nConsider how virtual objects with reflective surfaces show the environment. Reflections in ARKit are approximations based on the environment captured by the camera. To help maintain the illusion that an AR experience is real, prefer small or coarse reflective surfaces that downplay the effect of these approximations.\n\nUse audio and haptics to enhance the immersive experience. A sound effect or bump sensation is a great way to confirm that a virtual object has made contact with a physical surface or other virtual object. Background music can also help envelop people in the virtual world. For guidance, see Playing audio and Playing haptics.\n\nMinimize text in the environment. Display only the information that people need for your app experience.\n\nIf additional information or controls are necessary, consider displaying them in screen space. Content in screen space appears fixed to a consistent location either in the virtual world or, less commonly, on the device screen. It’s typically easy for people to find and view content in screen space because it remains stationary while the underlying AR environment moves with the device.\n\nConsider using indirect controls when you need to provide persistent controls. Indirect controls are not part of the virtual environment — instead, they are 2D controls displayed in screen space. If people need access to persistent controls in your app, consider placing the controls so that people don’t have to adjust how they’re holding the device to reach them. Also, consider using translucency in an indirect control to help avoid blocking the underlying scene. For example, the Measure app uses screen space to display a mix of translucent and opaque controls that people use to measure objects in the real world.\n\nAnticipate that people will use your app in a wide variety of real-world environments. People may open your app in a place where there isn’t much room to move around or there aren’t any large, flat surfaces. Clearly communicate your app’s requirements and expectations to people up front to help them understand how their physical environment can affect their AR experience. You might also consider offering different sets of features for use in different environments.\n\nBe mindful of people’s comfort. Holding a device at a certain distance or angle for a prolonged period can be fatiguing. To help avoid causing fatigue, consider placing objects at a distance that reduces the need to move the device closer to the object; in a game, consider keeping levels short and intermixed with brief periods of downtime.\n\nIf your app encourages people to move, introduce motion gradually. For example, you might not want to make people dodge a virtual projectile as soon as they enter your AR game. Give people time to adapt to the AR experience in your app and then progressively encourage movement.\n\nBe mindful of people’s safety. When people are immersed in an AR experience, they’re not necessarily aware of their physical surroundings, so making rapid, sweeping, or expansive motions might be dangerous. Consider ways of making your app safe to operate; for example, a game could avoid encouraging large or sudden movements.\n\nProviding coaching\n\nBefore people can enjoy an AR experience in your app, they need to move their device in ways that lets ARKit evaluate the surroundings and detect surfaces. Consider using the built-in coaching view to show people what to do and provide feedback during the initialization process. You can also use the coaching view to help people reinitialize AR — a process known as relocalization — after an AR experience is interrupted by, for example, people switching briefly to a different app. For guidance on relocalization, see Handling interruptions; for developer guidance, see ARCoachingOverlayView.\n\nHide unnecessary app UI while people are using a coaching view. By default, the coaching view appears automatically when initialization or relocalization starts, so be prepared to hide unrelated UI to help people concentrate on the coaching view’s instructions.\n\nIf necessary, offer a custom coaching experience. Although you can configure the system-provided coaching view to help people provide specific information — such as the detection of a horizontal or vertical plane — you might need additional information or want to use a different visual style. If you want to design a custom coaching experience, use the system-provided coaching view for reference.\n\nHelping people place objects\n\nShow people when to locate a surface and place an object. You can use the system-provided coaching view to help people find a horizontal or vertical flat surface on which to place an object. After ARKit detects a surface, your app can display a custom visual indicator to show when object placement is possible. You can help people understand how the placed object will look in the environment by aligning your indicator with the plane of the detected surface.\n\nApp-specific indicator\n\nWhen people place an object, immediately integrate that object into the AR environment. Although surface detection quickly and progressively refines accuracy, it’s best to avoid waiting for more accurate data before placing an object. Use the information available to respond instantly when people place an object; then, when surface detection completes, subtly refine the object’s position if necessary. For example, if people place an object beyond the bounds of the detected surface, gently nudge the object back onto the surface. For developer guidance on refining an object’s position, see ARTrackedRaycast.\n\nConsider guiding people toward offscreen virtual objects. Sometimes, it can be difficult for people to locate an object that’s positioned offscreen. When this is the case, you can help people find such objects by offering visual or audible cues. For example, if an object is offscreen to the left, you could display an indicator along the left edge of the screen that guides people to point the camera in that direction.\n\nAvoid trying to precisely align objects with the edges of detected surfaces. In AR, surface boundaries are approximations that may change as people’s surroundings are further analyzed.\n\nIncorporate plane classification information to inform object placement. For example, only let people place a virtual piece of furniture on a plane that’s classified as “floor,” or require a plane to be classified as “table” in order to place a virtual game board.\n\nDesigning object interactions\n\nLet people use direct manipulation to interact with objects when possible. It’s more immersive and intuitive when people can interact with onscreen 3D objects by touching them directly, than by using indirect controls in screen space. However, in situations where people are moving around as they use your app, indirect controls can work better.\n\nDirect manipulation\n\nIndirect controls\n\nLet people directly interact with virtual objects using standard, familiar gestures. For example, consider supporting a single-finger drag gesture for moving objects, and a two-finger rotation gesture for spinning objects. For guidance, see Gestures.\n\nIn general, keep interactions simple. Touch gestures are inherently two-dimensional, but an AR experience involves the three dimensions of the real world. Consider the following approaches to simplifying people’s interactions with virtual objects.\n\nLimit movement to the two-dimensional surface on which the object rests.\n\nLimit object rotation to a single axis.\n\nRespond to gestures within reasonable proximity of interactive virtual objects. It can be difficult for people to be precise when aiming to touch specific points on objects that are small, thin, or placed at a distance. When your app detects a gesture near an interactive object, it’s usually best to assume that people want to affect that object.\n\nLet people initiate object scaling when it makes sense in your app. For example, if your app lets people explore an imaginary environment, it probably makes sense to support object scaling because your app doesn’t need to represent the real world. On the other hand, if your app helps shoppers decide on furniture to buy, letting people scale a chair object doesn’t help them visualize how the chair will look in a room.\n\nTip\n\nRegardless of the purpose of your app, don’t use scaling as a way to adjust the distance of an object. If you enlarge a distant object in an effort to make it appear closer, the result is a larger object that still looks far away.\n\nBe wary of potentially conflicting gestures. A two-finger pinch gesture, for example, is similar to a two-finger rotation gesture. If you implement two similar gestures like this, be sure to test your app and make sure they’re interpreted properly.\n\nStrive for virtual object movement that’s consistent with the physics of your app’s AR environment. People don’t necessarily expect an object to move smoothly over a rough or uneven surface, but they do expect objects to remain visible during movement. Aim to keep moving objects attached to real-world surfaces and avoid causing objects to jump or vanish and reappear as people resize, rotate, or move them.\n\nExplore even more engaging methods of interaction. Gestures aren’t the only way for people to interact with virtual objects in AR. Your app can use other factors, like motion and proximity, to bring content to life. A game character, for example, could turn its head to look at a person as they walk toward it.\n\nOffering a multiuser experience\n\nWhen multiple people share your app’s AR experience, each participant maps the environment independently and ARKit automatically merges the maps. For developer guidance, see isCollaborationEnabled.\n\nConsider allowing people occlusion. If your app supports placing virtual objects behind people who appear in the device’s camera feed, enhance the illusion of reality by letting the people occlude the objects. For developer guidance, see doc://com.apple.documentation/documentation/arkit/camera_lighting_and_effects/occluding_virtual_content_with_people.\n\nWhen possible, let new participants enter a multiuser AR experience. Unless your app requires all participants to join before the experience begins, consider using implicit map merging to let new people quickly join an ongoing AR experience. For developer guidance, see isCollaborationEnabled.\n\nReacting to real-world objects\n\nYou can enhance an AR experience by using known images and objects in the real-world environment to make virtual content appear. For example, an app that recognizes theater posters for a sci-fi film could cause virtual space ships to emerge from the posters and fly around the environment. Another example is an app for an art museum that presents a virtual tour guide when it recognizes a sculpture. To support experiences like these, your app provides a set of 2D reference images or 3D reference objects, and ARKit indicates when and where it detects any of these items in the current environment. For developer guidance, see doc://com.apple.documentation/documentation/arkit/content_anchors/detecting_images_in_an_ar_experience.\n\nWhen a detected image first disappears, consider delaying the removal of virtual objects that are attached to it. ARKit doesn’t track changes to the position or orientation of each detected image. To help prevent virtual objects from flickering, consider waiting up to one second before fading them out or removing them.\n\nLimit the number of reference images in use at one time. Image detection performance works best when ARKit looks for 100 or fewer distinct images in the real-world environment. If you need more than 100 reference images, you can change the set of active reference images based on context. For example, a museum guide app could ask permission to use location services to determine the part of the museum a person is in, and then look only for images displayed in that area.\n\nLimit the number of reference images requiring an accurate position. Updating the position of a reference image requires more resources. Use a tracked image when the image may move in the environment or when an attached animation or virtual object is small compared to the size of the image.\n\nCommunicating with people\n\nIf you must display instructional text, use approachable terminology. AR is an advanced concept that may be intimidating to some people. To help make it approachable, avoid using technical terms like ARKit, world detection, and tracking. Instead, use friendly, conversational terms that most people will understand.\n\nDo\n\n\t\n\nDon’t\n\n\n\n\nUnable to find a surface. Try moving to the side or repositioning your phone.\n\n\t\n\nUnable to find a plane. Adjust tracking.\n\n\n\n\nTap a location to place the [name of object to be placed].\n\n\t\n\nTap a plane to anchor an object.\n\n\n\n\nTry turning on more lights and moving around.\n\n\t\n\nInsufficient features.\n\n\n\n\nTry moving your phone more slowly.\n\n\t\n\nExcessive motion detected.\n\nIn a three-dimensional context, prefer 3D hints. For example, placing a 3D rotation indicator around an object is more intuitive than displaying text-based instructions in a 2D overlay. Avoid displaying textual overlay hints in a 3D context unless people aren’t responding to contextual hints.\n\nPrefer a 3D hint in a 3D context.\n\nIf necessary, use a 2D hint in a 3D context.\n\nMake important text readable. Use screen space to display text used for critical labels, annotations, and instructions. If you need to display text in 3D space, make sure the text faces people and that you use the same type size regardless of the distance between the text and the labeled object.\n\nIf necessary, provide a way to get more information. Design a visual indicator that fits with your app experience to show people that they can tap for more information.\n\nCamera view\n\nDetail view\n\nHandling interruptions\n\nARKit can’t track device position and orientation during an interruption, such as when people briefly switch to another app or accept a phone call. After an interruption ends, previously placed virtual objects are likely to appear in the wrong real-world positions. When you support relocalization, ARKit attempts to restore those virtual objects to their original real-world positions using new information. For developer guidance, see doc://com.apple.documentation/documentation/arkit/managing_session_life_cycle_and_tracking_quality.\n\nConsider using the system-provided coaching view to help people relocalize. During relocalization, ARKit attempts to reconcile its previous state with new observations of the current environment. To make these observations more useful, you can use the coaching view to help people return the device to its previous position and orientation.\n\nConsider hiding previously placed virtual objects during relocalization. To avoid flickering or other unpleasant visual effects during relocalization, it can be best to hide virtual objects and redisplay them in their new positions.\n\nMinimize interruptions if your app supports both AR and non-AR experiences. One way to avoid interruptions is by embedding a non-AR experience within an AR experience so that people can handle the task without exiting and re-entering AR. For example, if your app helps people decide on a piece of furniture to purchase by placing the item in a room, you might let them change the upholstery without leaving the AR experience.\n\nAllow people to cancel relocalization. If people don’t position and orient their device near where it was before an interruption, relocalization continues indefinitely without success. If coaching people to resume their session isn’t successful, consider providing a reset button or other way to restart the AR experience.\n\nIndicate when the front-facing camera is unable to track a face for more than about half a second. Use a visual indicator to indicate that the camera can no longer track the person’s face. If you need to provide text instructions in this situation, keep them to a minimum.\n\nSuggesting problem resolutions\n\nLet people reset the experience if it doesn’t meet their expectations. Don’t force people to wait for conditions to improve or struggle with object placement. Give them a way to start over again and see if they have better results.\n\nSufficient lighting\n\nInsufficient lighting\n\nSuggest possible fixes if problems occur. Analysis of the real-world environment and surface detection can fail or take too long for a variety of reasons — insufficient light, an overly reflective surface, a surface without enough detail, or too much camera motion. If your app is notified of these problems, use straightforward, friendly language to offer suggestions for resolving them.\n\nProblem\n\n\t\n\nPossible suggestion\n\n\n\n\nInsufficient features detected.\n\n\t\n\nTry turning on more lights and moving around.\n\n\n\n\nExcessive motion detected.\n\n\t\n\nTry moving your phone slower.\n\n\n\n\nSurface detection takes too long.\n\n\t\n\nTry moving around, turning on more lights, and making sure your phone is pointed at a sufficiently textured surface.\n\nIcons and badges\n\nApps can display an AR icon in controls that launch ARKit-based experiences. You can download this icon in Resources.\n\nUse the AR glyph as intended. The glyph is strictly for initiating an ARKit-based experience. Never alter the glyph (other than adjusting its size and color), use it for other purposes, or use it in conjunction with AR experiences not created using ARKit.\n\nMaintain minimum clear space. The minimum amount of clear space required around an AR glyph is 10% of the glyph’s height. Don’t let other elements infringe on this space or occlude the glyph in any way.\n\nApps that include collections of products or other objects can use badging to identify specific items that can be viewed in AR using ARKit. For example, a department store app might use a badge to mark furniture that people can preview in their home before making a purchase.\n\nUse the AR badges as intended and don’t alter them. You can download AR badges, available in collapsed and expanded form, in Resources. Use these images exclusively to identify products or other objects that can be viewed in AR using ARKit. Never alter the badges, change their color, use them for other purposes, or use them in conjunction with AR experiences not created with ARKit.\n\nAR badge\n\nGlyph-only AR badge\n\nPrefer the AR badge to the glyph-only badge. In general, use the glyph-only badge for constrained spaces that can’t accommodate the AR badge. Both badges work well at their default size.\n\nUse badging only when your app contains a mixture of objects that can be viewed in AR and objects that cannot. If all objects in your app can be viewed in AR, then badging is redundant.\n\nKeep badge placement consistent and clear. A badge looks best when displayed in one corner of an object’s photo. Always place it in the same corner and make sure it’s large enough to be seen clearly (but not so large that it occludes important detail in the photo).\n\nMaintain minimum clear space. The minimum amount of clear space required around an AR badge is 10% of the badge’s height. Don’t allow other elements to infringe on this space and occlude the badge in any way.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS. Not supported in macOS, tvOS, or watchOS.\n\nvisionOS\n\nWith the wearer’s permission, you can use ARKit in your visionOS app to detect surfaces in a person’s surroundings, use a person’s hand and finger postions to inform your custom gestures, support interactions that incorporate nearby physical objects into your immersive experience, and more. For developer guidance, see ARKit.\n\nResources\nRelated\n\nPlaying haptics\n\nGestures\n\nApple Design Resources\n\nDeveloper documentation\n\nARKit\n\nVideos\nQualities of great AR experiences\nExplore ARKit 5"
  },
  {
    "title": "App Clips",
    "url": "https://developer.apple.com/design/human-interface-guidelines/app-clips",
    "html": "App Clips\nAn App Clip is a lightweight version of your app that lets people perform everyday tasks quickly, without downloading and installing your app.\n\nApp Clips focus on offering the fastest solution possible to a task, remaining on a device for a limited amount of time while preserving people’s privacy.\n\nPeople discover and launch App Clips in a variety of situations and contexts. At a physical location, people launch an App Clip by scanning an App Clip Code, NFC tag, or a QR code. An App Clip Code tends to be the best way for people to discover and launch your App Clip because its distinct design is immediately recognizable, and people trust it to offer a fast, secure way to launch an App Clip.\n\nOn their device, people launch an App Clip from location-based suggestions they permit in Siri Suggestions, the Maps app, Smart App Banners on websites, App Clip cards in Safari, and by tapping links others share with them in the Messages app. Starting with iOS 17, an app can include links and App Clip previews that people tap to launch another app’s App Clip.\n\nConsider creating an App Clip if your app provides an in-the-moment experience that helps people perform a task over a finite amount of time. For example:\n\nA rental bike could come with an App Clip Code that people tap or scan to launch an App Clip that lets them rent the bike.\n\nA coffee shop could offer an App Clip for fast advance orders that customers launch from a Smart App Banner or an App Clip card on the shop’s website. Customers could share a link to the website from the Messages app, which recipients then tap to launch the App Clip from within Messages.\n\nA food truck could create marketing material (for example, a poster to promote a seasonal dish) that includes an App Clip Code. People can scan the App Clip Code with the Camera app on their device and instantly launch the App Clip to order the seasonal dish.\n\nA restaurant could let diners pay for a meal by launching an App Clip from the Maps app or a suggestion from Siri Suggestions, or by holding their device close to an App Clip Code or NFC tag at their table.\n\nA museum could have visitors scan App Clip Codes or QR codes on labels next to displayed works to launch an App Clip that reveals augmented reality content or provides audio commentary.\n\nAn App Clip is a great way to share some of your app’s features with people who haven’t installed the app. For developer guidance, see App Clips.\n\nDesigning your App Clip\n\nFocus on essential features. Interactions with App Clips are quick and focused. Limit features to what’s necessary to accomplish the task at hand. Reserve advanced or complex features for the app.\n\nDon’t use App Clips solely for marketing purposes. App Clips need to provide real value and help people accomplish tasks. Don’t use them as a means to advertise services or products, and don’t display ads in your App Clip.\n\nAvoid using web views in your App Clip. App Clips use native components and frameworks to offer an app-quality experience. If only web components are available to you, offer a quick link to your website instead of an App Clip.\n\nDesign a linear, easy-to-use, and focused user interface. App Clips don’t need tab bars, complex navigation, or settings. Keep the number of screens and entry forms to a minimum. Remove extraneous information and reduce complexity in the user interface wherever possible.\n\nOn launch, show the most relevant part of your App Clip. Skip unnecessary steps and take people immediately to the part of the App Clip that best fits their context.\n\nEnsure people can use your App Clip immediately. App Clips need to include all required assets, omit splash screens, and never make people wait on launch.\n\nEnsure your App Clip is small. The smaller your App Clip, the faster it will launch on a person’s device. Keeping your App Clip small is especially important when bandwidth is limited. As much as possible, reduce unnecessary code and remove unused assets. Avoid downloading additional data, which can take away the feeling of immediacy.\n\nMake the App Clip shareable. When someone shares a link to an App Clip in the Messages app, recipients can launch the App Clip from within the Messages app. Offer the ability to share links to specific points in your App Clip, and encourage people to share the App Clip with others.\n\nMake it easy to pay for a service or product. Entering payment information can be a long and error-prone task. Consider supporting Apple Pay to offer express checkout and let people enter shipping information with no typing.\n\nAvoid requiring people to create an account before they can benefit from your App Clip. Creating an account is a complex task that takes time and effort. Consider not requiring an account, or think about asking people to create an account after they finish a task. If your App Clip requires an account to provide value, limit the amount of information people need to provide — for example, by offering Sign in with Apple.\n\nProvide a familiar, focused experience in your app. When people install the full app, it replaces the App Clip on their device. From this moment, invocations that would have launched the App Clip launch the full app instead. Ensure your app provides a focused, familiar experience to people who previously used the App Clip. Don’t require additional steps that slow people down; for example, don’t require people to log in again when they transition from the App Clip to the app.\n\nPreserving privacy\n\nThe system imposes limits on App Clips to ensure people’s privacy. For example, App Clips can’t perform background operations. For developer guidance, see Choosing the right functionality for your App Clip.\n\nLimit the amount of data you store and handle yourself. If you need to store people’s data — for example, login information — store it securely. In addition, don’t rely on the availability of data you previously stored on the device — the system may have removed the App Clip from the device between launches and deleted all of its data. If you store login information, securely store it off the device.\n\nConsider offering Sign in with Apple. Sign in with Apple securely retains login information off people’s devices and preserves their privacy. For guidance, see Sign in with Apple.\n\nOffer a secure way to pay for services or goods that also respects people’s privacy. For example, consider offering Apple Pay.\n\nShowcasing your app\n\nPeople don’t manage App Clips themselves, and App Clips don’t appear on the Home screen. Instead, the system removes an App Clip after a period of inactivity.\n\nBecause apps remain the best way to keep people engaged over time, the system helps them discover and install the full app:\n\nOn the App Clip card, people can either launch the App Clip or visit the full app’s page on the App Store.\n\nWhen people first launch the App Clip, the system displays an app banner at the top of the screen. Like the App Clip card, the banner allows people to visit the app’s page on the App Store.\n\nIn addition, you can display an overlay in your App Clip that allows people to download the full app from within the App Clip.\n\nThe following guidance can help you find a good time to recommend your app to people.\n\nDon’t compromise the user experience by asking people to install the full app. Instead, consider whether the App Clip card and the system-provided app banner provide enough incentive for people to download the full app. App Clips don’t require people to install the full app to complete a task.\n\nPick the right time to recommend your app. Give people the opportunity to try out your App Clip and understand its value. Only recommend the full app to people who use your App Clip repeatedly, or after they complete a task.\n\nRecommend your app in a nonintrusive, polite way. Don’t ask people to install the full app repeatedly or interrupt them during a task. Push notifications aren’t a good way to ask people to install the app either. Clearly communicate your app’s additional features.\n\nFor developer guidance, see Recommending your app to App Clip users.\n\nLimiting notifications\n\nApp Clips provide the option to schedule and receive notifications for up to 8 hours after launch, enough time to follow up and complete most common tasks.\n\nOnly ask for permission to use notifications for an extended period of time if it’s really needed. If your App Clip’s functionality spans more than a day, explicitly request permission to schedule and receive notifications. For example, a car rental company’s App Clip can ask for permission to send a notification that reminds people that they need to return a rented car soon.\n\nKeep notifications focused. Don’t send purely promotional notifications, and only use notifications in response to an explicit user action. If a person completes their task without leaving the App Clip, you might not need to send any notifications at all.\n\nUse notifications to help people complete a task. Notifications for an App Clip relate directly to the task the App Clip helps to accomplish. For example, an App Clip that helps people order food could send notifications related to a scheduled delivery.\n\nFor developer guidance, see Enabling notifications in App Clips.\n\nCreating App Clips for businesses\n\nIf you’re a platform provider who services businesses, you may create several App Clip experiences in App Store Connect and use a single App Clip to power them all. To people using the App Clip, it appears with the branding of an individual business or location instead of your own branding.\n\nUse consistent branding. When people see the App Clip card for a business, the brand for that business is front and center. Tone down your own branding and make sure the branding for the business is clearly visible to avoid confusing people when they enter the App Clip experience.\n\nConsider multiple businesses. An App Clip may power many different businesses or a business that has multiple locations. In both scenarios, people may end up using the App Clip for more than one business or location at a time. The App Clip must handle this use case and update its user interface accordingly. For example, consider a way to switch between recent businesses or locations within your App Clip, and verify a person’s location when they launch it.\n\nFor developer guidance, see Configuring the launch experience of your App Clip.\n\nCreating content for an App Clip card\n\nThe system-provided App Clip card is people’s first interaction with your App Clip, so give careful consideration to its images and copy.\n\nBe informative. Make sure the image on the App Clip card clearly communicates the features offered by your App Clip, supported tasks, or content.\n\nPrefer photography and graphics. Avoid using a screenshot of your app’s user interface because it’s unlikely to communicate the purpose of your App Clip. Instead, use an image that helps people understand the App Clip’s value, or a photo of the location of its associated business or point of interest.\n\nAvoid using text. Text in the header image isn’t localizable, can be difficult to read, and can make a card image less aesthetically pleasing.\n\nAdhere to image requirements. Use a 1800x1200 px PNG or JPEG image without transparency.\n\nUse concise copy. An App Clip card requires both a title and a subtitle. Clearly express the purpose of your App Clip within the available space so people can read and understand it at a glance. Create a title that has no more than 30 characters and a subtitle that has no more than 56 characters.\n\nPick a verb for the action button that best fits your App Clip. Possible verbs are View, Play, or Open. Pick View for media, or if your App Clip provides informational or educational content. Pick Play for games. Choose Open for all other App Clips.\n\nApp Clip Codes\n\nApp Clip Codes are the best way for people to discover your App Clip. Their distinct design is immediately recognizable, and they offer a fast, secure way to launch your App Clip.\n\nApp Clip Code with the App Clip logo\n\nApp Clip Code without the App Clip logo\n\nApp Clip Codes always use the designs Apple provides and follow size, placement, and printing guidelines. Choose between the badge design that uses the App Clip logo ( App Clip) or, when space is at a premium, a design without it. Create App Clip Codes that use a default color pair, or choose custom foreground and background colors. For developer guidance, see Creating App Clip Codes.\n\nInteracting with App Clip Codes\n\nApp Clip Codes come in two variants: scan-only or with an embedded NFC tag (NFC-integrated).\n\nThe scan-only variant uses a camera icon in its center to let people know to use the Camera app or the Code Scanner in Control Center to scan the App Clip Code. The NFC-integrated variant uses an iPhone icon at its center that guides people to hold their device close to the App Clip Code or to scan it using the NFC Tag Reader in Control Center. People can also scan an NFC-integrated App Clip Code with the Camera app or the Code Scanner in Control Center. For example:\n\nA coffee shop could place an App Clip Code on their menu. A guest could hold their device close to the App Clip Code and instantly launch the shop’s App Clip to order a drink.\n\nA gas station could have an NFC-integrated App Clip Code attached to each pump. A traveler could hold their device close to it to launch the gas station’s App Clip and use it to pay for their refill.\n\nA video game creator could hand out marketing material at an industry event that includes an App Clip Code. An event attendee could scan the code to launch an App Clip that’s a playable demo of their latest video game.\n\nDisplaying App Clip Codes\n\nWhen you start designing your App Clip Codes, choose the variant that works best for the way people use your App Clip. If people can physically access the App Clip Code, use the NFC-integrated variant. For example:\n\nOn a tabletop at a restaurant\n\nNear a register at a retail store\n\nIn a storefront window\n\nOn signage\n\nOn a gift card or coupon\n\nIf you need to place your App Clip Code in an area that’s physically inaccessible or you need to display it digitally, use a scan-only App Clip Code. For example:\n\nOn posters or printed advertising\n\nOn signage behind a counter or unreachable in a storefront\n\nOn digital materials such as digital displays, in emails, or on images you post to social media\n\nNo matter which of the two variants you use, it’s important you carefully consider where you place your App Clip Code to ensure a reliable scanning experience.\n\nInclude the App Clip logo when space allows. The logo helps make it clear that the code launches an App Clip; however, if you can’t meet the clear space requirements, use the App Clip Code design without the App Clip logo. Also, use the design without the App Clip logo if you place the App Clip Code on disposable paper or plastic items, or on items associated with gambling or drinking. For example, use the App Clip Code without the App Clip logo on playing cards, poker chips, or bar coasters. The App Clip logo is always part of the badge design where it appears below the App Clip Code; never use the App Clip logo on its own.\n\nPlace your App Clip Code on a flat or cylindrical surface only. If you place your App Clip Code on a cylindrical surface — for example, on a scooter’s handlebar — make sure the width of the App Clip Code doesn’t exceed one-sixth of the cylinder’s circumference.\n\nHelp your App Clip Code remain as flat as possible so it’s easy for people to scan. To provide the best scanning experience, avoid displaying App Clip Codes on deformable materials that readily fold or crumple, such as paper, plastic, or fabric. If you need to make your App Clip Code available on a bag, flexible box, or other deformable object, display it on something rigid — like a card — that you attach to the object. If you create an App Clip Code sticker, make sure it adheres well to flat surfaces.\n\nPlace your App Clip Code in a location that helps ensure reliable scanning. For example, place a scan-only App Clip Code in a location that offers enough light to ensure reliable scanning, and don’t require people to scan from a wide angle.\n\nMake sure the App Clip Code is unobstructed. Don’t overlay the App Clip Code with text, logos, or images. Never animate the App Clip Code or dim it.\n\nDisplay the App Clip Code in an upright position. Don’t rotate the generated App Clip Code or display the center glyph at an angle.\n\nDon’t create App Clip Codes that are too small. App Clip Codes must adhere to the following specifications.\n\nType\n\n\t\n\nMinimum size\n\n\n\n\nPrinted communications\n\n\t\n\nMinimum diameter of 3/4 inch (1.9 cm).\n\n\n\n\nDigital communications\n\n\t\n\nMinimum size of 256×256 px. Use a PNG or SVG file.\n\n\n\n\nNFC-integrated App Clip Code\n\n\t\n\nThe embedded NFC tag needs to be at least 35 mm in diameter or of equivalent size. For example, if your embedded NFC tag is 35 mm in diameter, your printed App Clip Code needs to be at least 1.37 inches (3.48 cm) in diameter.\n\nWhen determining the dimensions of your App Clip Codes, consider a distance to code size ratio of no more than 20:1. If possible, use a ratio of 10:1 to ensure reliable scanning. For example, an App Clip that people scan from 40 inches (101 cm) away needs to be at least 4 inches (10.16 cm) in diameter.\n\nIf you display an App Clip Code near a QR Code or other scannable item, choose a size for the App Clip Code that’s at least the other code’s or item’s size.\n\nProvide enough space between an App Clip Code and adjacent App Clip Codes, graphics, or materials. The minimum clear space around an App Clip Code is equal to the space between the center glyph and the circular code. If you place your App Clip Code next to another App Clip Code or other machine-readable code, leave enough clear space to allow for reliable scanning of each code.\n\nUsing clear messaging\n\nAdd clear messaging that informs people how they can use the App Clip Code to launch your App Clip, especially if you use the design without the App Clip logo. For example, add a call to action next to an App Clip Code you display in an email or on a poster. Use the suggested call-to-action messaging or your own copy. Always use a simple, clear call to action.\n\nFor a scan-only App Clip Code, you can use the following call to action:\n\nScan to [describe what people can do with your App Clip].\n\nScan using the camera on your iPhone or iPad to [describe what people can do with your App Clip].\n\nFor an NFC-integrated App Clip Code, you can use the following call to action:\n\nScan to [describe what people can do with your App Clip].\n\nHold your iPhone near the [object name] to launch an App Clip that [describe what a person can do with your App Clip].\n\nFor more information, see NFC.\n\nAdhere to Guidelines for Using Apple Trademarks when referring to your App Clip and App Clip Codes. For example, Apple trademarks can’t appear in your app name or images, always use title case when using the terms App Clips or App Clip Code, and so on. For additional information, see Legal requirements.\n\nCustomizing your App Clip Code\n\nUse App Store Connect or the App Clip Code Generator command-line tool to create App Clip Codes, and follow best practices to ensure a reliable scanning experience.\n\nAlways use the generated App Clip Code. Don’t create your own App Clip Code design or modify a generated App Clip Code in any way. Don’t apply filters, augment its colors, or add glows, shadows, gradients, or reflections. They negatively impact people’s scanning experience. When scaling a generated App Clip Code, don’t change the generated code’s aspect ratio, and be sure to scale all attributes of the App Clip Code — for example the stroke widths.\n\nChoose colors with enough contrast that ensure accurate scanning. Each App Clip Code uses three colors: a foreground color, a background color, and a third color that’s generated for you based on the foreground and background colors. Both App Store Connect and the App Clip Code Generator command-line tool offer a selection of default color pairs. Alternatively, you can choose custom foreground and background colors. Note that you can’t choose custom colors that will lead to a suboptimal scanning experience. If your color selection doesn’t work well, neither App Store Connect nor the command-line tool will generate an App Clip Code. To help you choose a color combination that works well, both tools contain functionality to suggest a different foreground color based on your custom background color. For more information, see Creating App Clip Codes with the App Clip Code Generator and Creating App Clip Codes with App Store Connect.\n\nPrinting guidelines\n\nApp Clip Codes offer the best experience to launch App Clips. As a result, it’s important to manufacture and display App Clip Codes that offer a reliable scanning experience for a long time. You can print App Clip Codes yourself, or work with a professional printing service — for example, RR Donnelley.\n\nAlways test printed App Clip Codes before you distribute them to be sure they’re scannable from a variety of angles.\n\nUse high-quality, non-textured print materials. Print App Clip Codes on matte finishes. Avoid shine, gloss, reflective or holographic overlays, as well as thin laminate finishes or materials. In case you need to laminate print material with an App Clip Code on it, use a matte laminate to avoid shine and reflections. If you place your App Clip Code outdoors, use UV-resistant materials or coatings to prevent fading from exposure to sunlight, rain, and other weather conditions. If you work with a professional printing service, use flexographic printing for best results. If you print the App Clip Codes yourself using a desktop printer, use an inkjet printer for best results.\n\nUse high-resolution images and printer settings. When rasterizing the SVG file, set the image resolution to at least 600 ppi, and print your App Clip Codes with a minimum resolution of 300 dpi. Consider leveling and calibrating your printer before printing to ensure a high print quality, and avoid poor color channel alignment, inaccurate gamma values, artifacts, or printing elliptical or otherwise distorted App Clip Codes. When using receipt printers, print App Clip Codes as close to the paper’s maximum bounds as possible.\n\nUse correct color settings when you convert the generated SVG file to a CMYK image. Both the App Clip Code Generator command-line tool and App Store Connect generate App Clip Codes as SVG files in the sRGB color space. To print colors that match the SVG file, convert the sRGB image to a CMYK image. Use a relative calorimetric (media-relative) intent when performing the conversion. Use “Generic CMYK ICC profile” on CMYK printers or “Gracol 2013 ICC profile” on CMYKOV printers and allow for a color tolerance CIELab Delta E of 2.5.\n\nIf you’re using a printer that only prints in grayscale, only generate grayscale App Clip Codes. Codes generated in color and then printed in grayscale may work less reliably.\n\nFor NFC-integrated App Clip Codes, choose Type 5 NFC tags. The embedded NFC tag needs to be at least 35 mm in diameter or of equivalent size.\n\nIf you create large batches of App Clip Codes, thoroughly test your printing workflow, and verify printed App Clip Codes. For example, conduct small, inexpensive print runs using a subset of codes. Print your App Clip Codes on print templates with additional padded regions that allow you to display the encoded invocation URL and the SVG filename alongside each code for validation at the time of print.\n\nIf you create many App Clip Codes with the App Clip Code Generator tool or App Store Connect, you’ll likely work with a professional printing service. If this is the case, you need to handle a lot of SVG files. Because you have no way of knowing which App Clip Code encodes which URL by looking at an App Clip Code, you need to use a file that contains information about which SVG file maps to which invocation URL. Under any circumstance, careful file management, versioning, and change tracking are key to avoiding faulty print runs. For more information, see Preparing multiple App Clip Codes for production.\n\nVerifying your printer’s calibration\n\nA reliable scanning experience depends on the quality of your printed App Clip Codes. To ensure printing App Clip Codes results in a reliable scanning experience and to avoid using a printer that can’t print high-quality App Clip Codes, Apple offers printer calibration test sheets you can use to verify your printer’s settings and print quality.\n\nVerify print quality of your chosen color pair with the printer calibration test sheet that shows text boxes for each default color pair. Follow the instructions on the sheet to print it at the right scale and to verify that your printer can create high-quality App Clip Codes.\n\nVerify your printer’s grayscale settings by printing the printer calibration test sheet that shows two grayscale bars. If any of the specific gray colors are light or entirely missing, the printer may need calibration or may not be suitable for printing an App Clip Code that allows for reliable scanning.\n\nLegal requirements\n\nOnly the Apple-provided App Clip Codes created in App Store Connect or with the App Clip Code Generator command-line tool and that follow these guidelines are approved for use.\n\nApp Clip Codes are approved for use to indicate availability of an App Clip. Apple may update the App Clip Code design from time to time at Apple’s discretion.\n\nIn the event your App Clip is no longer active, also stop displaying the App Clip Code associated with that inactive App Clip.\n\nYou may not use the App Clip Code (including, without limitation, the Apple Logo, the App Clip mark, and the App Clip Code designs) as part of your own company name or as part of your product name. You may not seek copyright or trademark registration for the App Clip Codes or any elements contained therein.\n\nThe App Clip Codes described in these guidelines must not be used in any manner that is likely to reduce, diminish, or damage the goodwill, value, or reputation associated with Apple or App Clips; or that infringes or violates the trademarks or other proprietary rights of any third party; or that is likely to cause confusion as to the source of products or services.\n\nApple retains all rights to its trademarks, copyrights, or other intellectual property rights contained in the materials provided for use hereunder, including, without limitation, the App Clip Codes and any elements contained therein.\n\nDon’t add a symbol to App Clip Codes created in App Store Connect or with the App Clip Code Generator command-line tool.\n\nDon’t translate any Apple trademark. Apple trademarks must remain in English even when they appear within text in a language other than English. With Apple’s approval, a translation of the legal notice and credit lines (but not the trademarks) can be used in materials distributed outside the U.S.\n\nFor more information about using Apple trademarks, see Guidelines for Using Apple Trademarks.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS. Not supported in macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nApple Pay\n\nSign in with Apple\n\nGuidelines for Using Apple Trademarks and Copyrights\n\nDeveloper documentation\n\nApp Clips\n\nApp Store Connect\n\nVideos\nWhat's new in App Clips\nBuild light and fast App Clips\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "CarPlay",
    "url": "https://developer.apple.com/design/human-interface-guidelines/carplay",
    "html": "CarPlay\nCarPlay lets people get directions, make calls, send and receive messages, listen to music, and more from their car’s built-in display, all while staying focused on the road.\n\nPeople download CarPlay apps from the App Store and install them on iPhone like any other app. When people connect their iPhone with their vehicle, app icons for installed CarPlay apps appear on the CarPlay Home screen.\n\nCarPlay is designed for drivers to use while they’re driving. Keep this context in mind as you design your CarPlay app, providing features that help people perform tasks quickly and with minimal interaction.\n\nTo create the interface of your CarPlay app, you use the system-defined templates that are appropriate for the type of app you’re developing, such as audio, communication, navigation, or fueling. For each template, your app provides the content and iOS renders it in CarPlay. Because the system displays UI components and handles the interface with the vehicle, you don’t need to adjust your layout for different screen resolutions, or manage input from different types of hardware like touchscreens, knobs, or touch pads.\n\nTo learn how to create various types of CarPlay apps and use the system-provided templates, see CarPlay App Programming Guide. The general design guidelines below apply to all types of CarPlay apps.\n\niPhone interactions\n\nCarPlay shows compatible apps from the connected iPhone on the car’s built-in display, applying simplified interfaces that are optimized for use while driving.\n\nEliminate app interactions on iPhone when CarPlay is active. Interactions with your app need to occur using the car’s built-in controls and display. If your app requires setup on iPhone, make sure people perform it before the vehicle is in motion.\n\nNever lock people out of CarPlay because the connected iPhone requires input. Your app needs to function when iPhone is inaccessible — for example, when people put it in a bag or in the trunk while driving. If people must resolve a problem on the connected iPhone, let them do so after the vehicle stops.\n\nMake sure your app works without requiring people to unlock iPhone. Most people use CarPlay while their iPhone is locked, so ensure that the features you provide in your CarPlay app work as expected in this scenario.\n\nAudio\n\nIn CarPlay, keep in mind that your app coexists with other audio sources, such as the car’s own built-in radio and voice prompts from the navigation system. Regardless of whether audio is a primary aspect of your app’s experience, you need to know how people expect audio to behave so you can meet those expectations.\n\nLet people choose when to start playback. In general, avoid beginning playback automatically unless your app’s purpose is to play a single source of audio, or your app is resuming previously interrupted audio. Also, avoid starting an audio session until you’re ready to actually play audio because starting a session silences other audio sources, like the car’s built-in radio.\n\nStart playback as soon as audio has sufficiently loaded. After people make a selection, it may take several seconds for audio to begin playing, depending on buffering and network conditions. The system keeps the selection highlighted and displays a spinning activity indicator until your app signals that the audio is ready to play.\n\nDisplay the Now Playing screen when audio is ready to play. Don’t delay playback until descriptive information completes loading. If necessary, continue loading such information in the background, and show it when it’s available.\n\nResume audio playback after an interruption only when it’s appropriate. For example, your app can resume audio after a temporary interruption like a phone call. Permanent interruptions, such as a music playlist initiated by Siri, are nonresumable. When a resumable interruption occurs, your app needs to resume playback when the interruption ends if audio was actively playing when the interruption started.\n\nWhen necessary, automatically adjust audio levels, but don’t change the overall volume. Although your app can adjust relative, independent volume levels to achieve a great mix of audio, people need to control the final output volume.\n\nLayout\n\nCarPlay supports a wide range of display resolutions with varying pixel densities and aspect ratios. The system automatically scales app icons and interfaces based on the resolution of the display, so they always appear onscreen at roughly the same size. Some common screen sizes are listed in the table below.\n\nDimensions (pixels)\n\n\t\n\nAspect ratio\n\n\n\n\n800x480\n\n\t\n\n5:3\n\n\n\n\n960x540\n\n\t\n\n16:9\n\n\n\n\n1280x720\n\n\t\n\n16:9\n\n\n\n\n1920x720\n\n\t\n\n8:3\n\nProvide useful, high-value information in a clean layout that’s easy to scan from the driver’s seat. Don’t clutter the screen with nonessential details and unnecessary visual embellishments.\n\nMaintain an overall consistent appearance throughout your app. In general, ensure that elements with similar functions look similar.\n\nEnsure that primary content stands out and feels actionable. Large items tend to appear more important than smaller ones and are easier for people to tap. In general, place the most important content and controls in the upper half of the screen.\n\nColor\n\nColor can indicate interactivity, impart vitality, and provide visual continuity.\n\nIn general, prefer a limited color palette that coordinates with your app logo. Subtle use of color is a great way to communicate your brand.\n\nAvoid using the same color for interactive and noninteractive elements. If interactive and noninteractive elements have the same color, it’s hard for people to know where to tap.\n\nTest your app’s color scheme under a variety of lighting conditions in an actual car. Lighting varies significantly based on time of day, weather, window tinting, and more. Colors you see on your computer at design time won’t always look the same when your app is used in the real world. Consider how color brightness might affect the experience of driving at night, and how low-contrast colors can wash out in direct sunlight. If necessary, make adjustments to provide the best possible viewing experience in the majority of use cases.\n\nEnsure your app looks great in both dark and light environments. CarPlay supports both light and dark appearances, and may automatically adjust the current appearance based on lighting conditions.\n\nChoose colors that help you communicate effectively with everyone. Different people see and interpret colors differently. For guidance on using colors in ways that people appreciate, see Inclusive color.\n\nIcons and images\n\nCarPlay supports both landscape and portrait displays and both @2x (low resolution) and @3x (high resolution) scale factors.\n\nSupply high-resolution images with scale factors of @2x and @3x for all CarPlay artwork in your app. The system automatically shows the correct images and scales them appropriately, based on the resolution and size of the car’s display.\n\nMirror your iPhone app icon. A well-designed app icon works well in CarPlay and on iPhone, without the need for a second design.\n\nDon’t use black for your icon’s background. Lighten a black background or add a border so the icon doesn’t blend into the display background.\n\nCreate your CarPlay app icon in the following sizes:\n\n@2x (pixels)\n\n\t\n\n@3x (pixels)\n\n\n\n\n120x120\n\n\t\n\n180x180\n\nError handling\n\nA CarPlay app needs to handle errors gracefully and report them to people only when absolutely necessary.\n\nReport errors in CarPlay, not on the connected iPhone. If you must notify people of a problem, do so clearly in CarPlay. Never direct people to pick up their iPhone to read or resolve an error.\n\nPlatform considerations\n\nNo additional considerations for iOS. Not supported in iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nCarPlay\n\nDeveloper documentation\n\nCarPlay App Programming Guide\n\nVideos\nAccelerate your app with CarPlay\nAdvances in CarPlay Systems\nCarPlay Audio and Navigation Apps\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "CareKit",
    "url": "https://developer.apple.com/design/human-interface-guidelines/carekit",
    "html": "CareKit\nPeople can use CareKit apps to manage care plans related to a chronic illness like diabetes, recover from an injury or surgery, or achieve health and wellness goals.\n\nTo learn more about CareKit, see Research & Care > CareKit.\n\nCareKit 2.0 contains two projects, CareKit UI and CareKit Store. CareKit UI provides a wide variety of prebuilt views you can use to create a custom CareKit app. CareKit Store defines a database scheme that incorporates CareKit entities — such as patients, care plans, tasks, and contacts — so you can store and manage data on the patient’s device. CareKit 2.0 provides seamless synchronization between your database and the UI, so you can always keep a care plan up to date. For developer guidance, see CareKit.\n\nData and privacy\n\nNothing is more important than protecting people’s privacy and safeguarding the extremely sensitive data your CareKit app collects and stores.\n\nProvide a coherent privacy policy. During the app submission process, you must provide a URL to a clearly stated privacy policy, so that people can view the policy when they click the link in the App Store page for your app. For developer guidance, see App information > App Store Connect help.\n\nIn addition to the data that people enter into your CareKit app, you may be able to access data through iOS features and capabilities. You must receive people’s permission before accessing data through these features, and you must protect people’s data whether people enter it into your app or you get it from the device or the system. For developer guidance, see Protecting user privacy.\n\nHealthKit integration\n\nHealthKit is the central repository for health and fitness data in iOS and watchOS. When you support HealthKit in your CareKit app, you can ask people for permission to access and share their health and fitness data with designated caregivers.\n\nRequest access to health data only when you need it. It makes sense to request access to weight information when people log their weight, for example, but not immediately after your app launches. When your request is clearly related to the current context, you help people understand your app’s intentions. Also, people can change the permissions they grant, so it’s a good idea to make a request every time your app needs access. For developer guidance, see requestAuthorization(toShare:read:completion:).\n\nClarify your app’s intent by adding descriptive messages to the standard permission screen. People expect to see the system-provided permission screen when asked to approve access to health data. Write a few succinct sentences that explain why you need the information and how people can benefit from sharing it with your app. Avoid adding custom screens that replicate the standard permission screen’s behavior or content.\n\nManage health data sharing solely through the system’s privacy settings. People expect to globally manage access to their health information in Settings > Privacy. Don’t confuse people by building additional screens in your app that affect the flow of health data.\n\nFor related design guidance, see HealthKit. For developer guidance, see HealthKit.\n\nMotion data\n\nIf it’s useful for treatment and if people give permission, your app can get motion information from the device to determine if people are standing still, walking, running, cycling, or driving. When people are walking or running, you can also determine the step count, pace, and number of flights of stairs ascended or descended.\n\nMotion information can also include custom data collected as part of physical therapy. For example, some ResearchKit tasks use device sensors to test flexibility, range of motion, and ambulatory capability.\n\nFor developer guidance, see Core Motion.\n\nPhotos\n\nPictures are a great way to communicate treatment progress. With people’s permission, your app can access the device’s camera and photos to share pictures with a care team. For example, a care plan might include a request for people to share periodic photos of an injury, so the physician can monitor the healing process.\n\nFor developer guidance, see UIImagePickerController.\n\nResearchKit integration\n\nA ResearchKit app lets people participate in important medical research studies. Your CareKit app can incorporate ResearchKit features to display related surveys, tasks, and charts, if appropriate. ResearchKit also includes an informed consent module, which your CareKit app can use to request people’s permission to collect and share data.\n\nFor related design guidance, see ResearchKit. For developer guidance, see Research & Care > Developers.\n\nCareKit views\n\nCareKit UI provides customizable views organized into three categories — tasks, charts, and contacts — and defines several default view styles in each. To design a CareKit app, you simply choose the view styles you need and supply CareKit Store data to display in them.\n\nEach view category is designed to support specific types of content and interaction. To ensure a consistent experience, use each view type for its intended purpose.\n\nCategory\n\n\t\n\nPurpose\n\n\n\n\nTasks\n\n\t\n\nPresent tasks, like taking medication or doing physical therapy. Support logging of patient symptoms and other data.\n\n\n\n\nCharts\n\n\t\n\nDisplay graphical data that can help people understand how their treatment is progressing.\n\n\n\n\nContact views\n\n\t\n\nDisplay contact information. Support communication through phone, message, and email, and link to a map of the contact’s location.\n\nTasks and charts\n\nContacts\n\nA CareKit UI view consists of a header and may include a stack of content subviews. Located at the top of the view, the header can display text, a symbol, and a disclosure indicator, and can include a separator at its bottom edge. The content stack appears below the header and displays your content subviews in a vertical arrangement.\n\nCareKit UI takes care of all the layout constraints within a view, so you don’t have to worry about breaking existing constraints when you add new subviews to the stack.\n\nTasks\n\nA care plan generally presents a set of prescribed actions for people to perform, such as taking medication, eating specific foods, exercising, or reporting symptoms. CareKit UI defines several styles of task views you can use to display prescribed actions. Typically, you customize a task view by providing the information to display, often by specifying data stored in an on-device CareKit Store database. In some cases, you might also supply custom UI elements.\n\nA task can contain the following types of information.\n\nInformation\n\n\t\n\nRequired\n\n\t\n\nDescription\n\n\t\n\nExample value\n\n\n\n\nTitle\n\n\t\n\nYes\n\n\t\n\nA word or short phrase that introduces the task.\n\n\t\n\nIbuprofen\n\n\n\n\nSchedule\n\n\t\n\nYes\n\n\t\n\nThe schedule on which a task must be completed.\n\n\t\n\nFour times a day\n\n\n\n\nInstructions\n\n\t\n\nNo\n\n\t\n\nDetailed instructions, recommendations, and warnings.\n\n\t\n\nTake 1 tablet every 4–6 hours (not to exceed 4 tablets daily).\n\n\n\n\nGroup ID\n\n\t\n\nNo\n\n\t\n\nAn identifier you can use to group similar tasks in ways that make sense in your app.\n\n\t\n\nA category identifier like medication or exercise.\n\nIn CareKit 2.0, CareKit UI defines five styles of task views: simple, instructions, log, checklist, and grid. Each style is designed to support a particular use case.\n\nUse the simple style for a one-step task. The default simple-style view consists of a header area that contains a title, subtitle, and button. You provide the title and subtitle, and you can provide a custom image to display in the button when the task is complete. If you don’t supply an image, CareKit shows that a task is complete by filling in the button and displaying a checkmark. Because the default simple-style view doesn’t include a content stack, consider using a different task style if you need to display additional content.\n\nUse the instructions style when you need to add informative text to a simple task. For example, if a single-step medication task needs to include additional information — such as “Take on an empty stomach” or “Take at bedtime” — you can use an instructions-style task to display it.\n\nUse the log style to help people log events. For example, you could use this task style to display a button people can tap whenever they feel nauseated. The log-style task can automatically display a timestamp every time the patient logs an event.\n\nUse the checklist style to display a list of actions or steps in a multistep task. For example, if people must take a medication three times per day, you could display the three scheduled times in a checklist. Each checklist item can include a text description and a button that people can tap to mark the item as done. By default, a checklist task can also display instructional text below the list.\n\nUse the grid style to display a grid of buttons in a multistep task. Like the checklist style, the grid style also supports a multistep task, but it displays the steps in a more compact arrangement. You can supply a succinct title for each button (if you need to provide additional description for each button, you might want to use the checklist style instead). By default, a grid-style task can also display instructional text below the grid of buttons. Unlike other task styles, the grid style gives you access to its underlying collection view, which means that you can display custom UI elements in the grid layout.\n\nConsider using color to reinforce the meaning of task items. Color can be a good way to help people understand information at a glance. For example, you could use one color for medications and a different color for physical activities. Always avoid using color as the only way to convey information. For guidance, see Color.\n\nCombine accuracy with simplicity when describing a task and its steps. For example, use a medication’s marketing name instead of its chemical description. Also, when the context of a task helps to clarify meaning, minimize the number of words you use. For example, a daily medication task generally tells people when to take specific medications, so it may be unnecessary to repeat words like take.\n\nConsider supplementing multistep or complex tasks with videos or images. Visually demonstrating how to perform a task can help people avoid mistakes.\n\nCharts\n\nChart views let you present data and trends in graphical ways that can help people visualize their progress in a care plan. CareKit chart views can display both current and historical data, and update automatically with new data.\n\nIn CareKit 2.0, CareKit UI provides three chart styles: bar, scatter, and line. For each style, you provide a descriptive title and subtitle, supply axis markers — like days of the week — and specify the data set.\n\nBar chart\n\nScatter chart\n\nLine chart\n\nConsider highlighting narratives and trends to illustrate progress. For example, your app could display a bar chart that shows a correlation between the number of times people took medication and their level of pain. Displaying such data can encourage better adherence to a care plan.\n\nLabel chart elements clearly and succinctly. Long, detailed labels can make a chart difficult to read and understand. Keep labels short and avoid repeating the same information. For example, a heart rate chart might use the term BPM in an axis label instead of using it in the label of every data point.\n\nUse distinct colors. In general, avoid using different shades of the same color to mean different things. Also ensure that you use colors with sufficient contrast. For related guidance, see Color and effects.\n\nConsider providing a legend to add clarity. If the colors you use to represent different types of data aren’t immediately clear, include a legend that clearly and succinctly describes them.\n\nClearly denote units of time. People need to know whether time-based data is represented in seconds, minutes, hours, days, weeks, months, or years. If you don’t want to include this information in individual data value labels, include it in an axis label or elsewhere on the chart.\n\nConsolidate large data sets for greater readability. A large amount of data can make a chart unreadable by reducing the size of individual data points and presenting too much visible information. Look for ways to group and organize data for clarity and simplicity.\n\nIf necessary, offset data to keep charts proportional. It’s easy for very small data points to get lost or become unreadable in a chart that also contains very large data points. If the difference between data points is significant, find ways to offset or restructure the data so all data points are readable.\n\nFor developer guidance, see CareKit > Chart Interfaces. To learn about ResearchKit charts, see the ResearchKit GitHub project.\n\nContact views\n\nA care plan typically includes a care team and other trusted individuals who can help patients follow the plan. CareKit UI defines a contact view you can use to help patients communicate with the people in their care plan.\n\nIn CareKit 2.0, CareKit UI provides two styles of the contact view: simple and detailed.\n\nSimple\n\nDetailed\n\nConsider using color to categorize care team members. Color can help people identify care team members at a glance.\n\nNotifications\n\nNotifications can tell people when it’s time to take medication or complete a task, and badging your app icon can show that there’s an unread message from a caregiver. Apple Watch can also display a notification from your app; for guidance, see Notifications.\n\nMinimize notifications. Care plans vary from patient to patient. While one individual may have only a few daily tasks to complete, another may have a long list. Use notifications sparingly so people don’t feel overwhelmed. When possible, consider coalescing multiple items into a single notification.\n\nConsider providing a detail view. In addition to providing more information, a notification detail view can help people take immediate action without leaving their current context to open your app. For example, you could use a notification detail view to display a list of pending tasks so that people can quickly mark them as complete.\n\nSymbols and branding\n\nCareKit uses a variety of built-in symbols to help people understand what they can do in a care app. For example, CareKit can display the phone, messaging, and envelope symbols in a contact view and the clock symbol in a log-style task view.\n\nAlthough you can customize the default symbols, most view styles work best with the CareKit-provided symbols. The exception is the highly customizable grid-style task view, which can display your custom UI in a grid layout.\n\nIn a grid view, you might want to display custom symbols that are relevant to the unique content and experience in your app. You could use symbols to indicate the grouping of tasks; for example, a pill to represent medication tasks, or a person walking to represent exercise tasks. In this scenario, consider using SF Symbols to illustrate custom items in your app.\n\nUsing SF Symbols in your app gives you:\n\nDesigns that coordinate with CareKit’s visual design language\n\nSupport for creating custom symbols to represent the unique content in your app\n\nDesign a relevant care symbol. If you need to customize a symbol, be sure the design is closely related to your app or the general concept of health and wellness. Avoid creating a purely decorative symbol or using a corporate logo as a custom symbol.\n\nIncorporate refined, unobtrusive branding. People use CareKit apps to help them achieve their health and wellness goals; they don’t want to see advertising. To avoid distracting people from their care plan, subtly incorporate your brand through your app’s use of color and communication style.\n\nPlatform considerations\n\nNo additional considerations for iOS or iPadOS. Not supported in macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nResearch & Care > CareKit\n\nDeveloper documentation\n\nCareKit\n\nResearch & Care > Developers\n\nProtecting user privacy — HealthKit\n\nHealthKit\n\nResearchKit GitHub project\n\nVideos\nWhat's new in CareKit\nBuild a research and care app, part 1: Setup onboarding\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nMay 2, 2023\n\n\t\n\nConsolidated guidance into one page."
  },
  {
    "title": "Writing",
    "url": "https://developer.apple.com/design/human-interface-guidelines/writing",
    "html": "Writing\nThe words you choose within your app are an essential part of its user experience.\n\nWhether you’re building an onboarding experience, writing an alert, or describing an image for accessibility, designing through the lens of language will help people get the most from your app or game.\n\nGetting started\n\nDetermine your app’s voice. Think about who you’re talking to, so you can figure out the type of vocabulary you’ll use. What types of words are familiar to people using your app? How do you want people to feel? The words for a banking app might convey trust and stability, for example, while the words in a game might convey excitement and fun. Create a list of common terms, and reference that list to keep your language consistent. Consistent language, along with a voice that reflects your app’s values, helps everything feel more cohesive.\n\nMatch your tone to the context. Once you’ve established your app’s voice, vary your tone based on the situation. Consider what people are doing while they’re using your app — both in the physical world and within the app itself. Are they exercising and reached a goal? Or are they trying to make a payment and received an error? Situational factors affect both what you say and how you display the text on the screen.\n\nCompare the tone of these two examples from Apple Watch. In the first, the tone is straightforward and direct, reflecting the seriousness of the situation. In the second, the tone is light and congratulatory.\n\nBe clear. Choose words that are easily understood and convey the right thing. Check each word to be sure it needs to be there. If you can use fewer words, do so. When in doubt, read your writing out loud.\n\nWrite for everyone. For your app to be useful for as many people as possible, it needs to speak to as many people as possible. Choose simple, plain language and write with accessibility and localization in mind, avoiding jargon and gendered terminology. For guidance, see Writing inclusively and VoiceOver; for developer guidance, see Localization.\n\nBest practices\n\nConsider each screen’s purpose. Pay attention to the order of elements on a screen, and put the most important information first. Format your text to make it easy to read. If you’re trying to convey more than one idea, consider breaking up the text onto multiple screens, and think about the flow of information across those screens.\n\nBe action oriented. Active voice and clear labels help people navigate through your app from one step to the next, or from one screen to another. When labeling buttons and links, it’s almost always best to use a verb. Prioritize clarity and avoid the temptation to be too cute or clever with your labels. For example, just saying “Next” often works better than “Let’s do this!” For links, avoid using “Click here” in favor of more descriptive words or phrases, such as “Learn more about UX Writing.” This is especially important for people using screen readers to access your app.\n\nBuild language patterns. Consistency builds familiarity, helping your app feel cohesive, intuitive, and thoughtfully designed. It also makes writing for your app easier, as you can return to these patterns again and again. Here are a few language patterns to consider establishing:\n\nTitle or sentence case. Decide whether you want to use title case or sentence case for alerts, page titles, headlines, button labels, and links. Throughout the HIG, you’ll find guidelines for specific components, but how you format your text is a reflection of your app’s voice. Title case is more formal, while sentence case is more casual. Choose a style that fits your app.\n\nFirst or second person. If your app allows people to save favorites or bookmark items, for example, those items could be found in “My Favorites” or “Your Saved Items,” but don’t use both. Choose first or second person and stick with it.\n\nContinue or Next. If your app has a flow that spans multiple screens, decide how you want to label the button or link that takes you from one step to the next. “Continue” or “Next” works well, but choose one and be consistent with how you use it. Make sure you indicate a difference at the end of the flow, like a button labeled “Done.”\n\nWrite for how people use each device. People may use your app on several types of devices. While your language needs to be consistent across them, think about where it would be helpful to adjust your text to make it suitable for different devices. Make sure you describe gestures correctly on each device — for example, not saying “click” for a touch device like iPhone or iPad where you mean “tap.”\n\nWhere and how people use a device, its screen size, and its location all affect how you write for your app. iPhone and Apple Watch, for example, offer opportunities for personalization, but their small screens require brevity. TVs, on the other hand, are often in common living spaces, and several people are likely to see anything on the screen, so consider who you’re addressing. Bigger screens also require brevity, as the text must be large for people to see it from a distance.\n\nProvide clear next steps on any blank screens. An empty state, like a completed to-do list or bookmarks folder with nothing in it, can provide a good opportunity to make people feel welcome and educate them about your app. Empty states can also showcase your app’s voice, but make sure that the content is useful and fits the context. An empty screen can be daunting if it isn’t obvious what to do next, so guide people on actions they can take, and give them a button or link to do so if possible. Remember that empty states are usually temporary, so don’t show crucial information that could then disappear.\n\nWrite clear error messages. It’s always best to help people avoid errors. When an error message is necessary, display it as close to the problem as possible, avoid blame, and be clear about what someone can do to fix it. For example, “That password is too short” isn’t as helpful as “Choose a password with at least 8 characters.” Remember that errors can be frustrating. Interjections like “oops!” or “uh-oh” are typically unnecessary and can sound insincere. If you find that language alone can’t address an error that’s likely to affect many people, use that as an opportunity to rethink the interaction.\n\nChoose the right delivery method. There are many ways to get people’s attention, whether or not they are actively using your app. When there’s something you want to communicate, consider the urgency and importance of the message. Think about the context in which someone might see the message, whether it requires immediate action, and how much supporting information someone might need. Choose the correct delivery method, and use a tone appropriate for the situation. For guidance, see Notifications, Alerts, and Action sheets.\n\nKeep settings labels clear and simple. Help people easily find the settings they need by labeling them as practically as possible. If the setting label isn’t enough, add an explanation. Describe what it does when turned on, and people can infer the opposite. In the Handwashing Timer setting for Apple Watch, for example, the description explains that a timer can start when you’re washing your hands. It isn’t necessary to tell you that a timer won’t start when this setting is off.\n\nIf you need to direct someone to a setting, provide a direct link or button, rather than trying to describe its location. For guidance, see Settings.\n\nShow hints in text fields. If your app allows people to enter their own text, like account or contact information, label all fields clearly, and use hint or placeholder text so people know how to format the information. You can give an example in hint text, like “name@example.com,” or describe the information, such as “Your name.” Show errors right next to the field, and instruct people how to enter the information correctly, rather than scolding them for not following the rules. “Use only letters for your name” is better than “Don’t use numbers or symbols.” Avoid robotic error messages with no helpful information, like “Invalid name.” For guidance, see Text fields.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nApple Style Guide\n\nWriting inclusively\n\nInclusion\n\nAccessibility\n\nColor\n\nVideos\nWriting for interfaces\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 27, 2023\n\n\t\n\nNew page."
  },
  {
    "title": "SF Symbols",
    "url": "https://developer.apple.com/design/human-interface-guidelines/sf-symbols",
    "html": "SF Symbols\nSF Symbols provides thousands of consistent, highly configurable symbols that integrate seamlessly with the San Francisco system font, automatically aligning with text in all weights and sizes.\n\nYou can use a symbol to convey an object or concept wherever interface icons can appear, such as in navigation bars, toolbars, tab bars, context menus, and within text.\n\nAvailability of individual symbols and features varies based on the version of the system you’re targeting. Symbols and symbol features introduced in a given year aren’t available in earlier operating systems.\n\nVisit SF Symbols to download the app and browse the full set of symbols. Be sure to understand the terms and conditions for using SF Symbols, including the prohibition against using symbols — or images that are confusingly similar — in app icons, logos, or any other trademarked use. For developer guidance, see Configuring and displaying symbol images in your UI.\n\nRendering modes\n\nSF Symbols 3 and later provide four rendering modes — monochrome, hierarchical, palette, and multicolor — that give you multiple options when applying color to symbols. For example, you might want to use multiple opacities of your app’s accent color to give symbols depth and emphasis, or specify a palette of contrasting colors to display symbols that coordinate with various color schemes.\n\nTo support the rendering modes, SF Symbols organizes a symbol’s paths into distinct layers. For example, the cloud.sun.rain.fill symbol consists of three layers: the primary layer contains the cloud paths, the secondary layer contains the paths that define the sun and its rays, and the tertiary layer contains the raindrop paths.\n\nPrimary\n\nSecondary\n\nTertiary\n\nDepending on the rendering mode you choose, a symbol can produce various appearances. For example, Hierarchical rendering mode assigns a different opacity of a single color to each layer, creating a visual hierarchy that gives depth to the symbol.\n\nTo learn more about supporting rendering modes in custom symbols, see Custom symbols.\n\nSF Symbols supports the following rendering modes.\n\nMonochrome — Applies one color to all layers in a symbol. Within a symbol, paths render in the color you specify or as a transparent shape within a color-filled path.\n\nHierarchical — Applies one color to all layers in a symbol, varying the color’s opacity according to each layer’s hierarchical level.\n\nPalette — Applies two or more colors to a symbol, using one color per layer. Specifying only two colors for a symbol that defines three levels of hierarchy means the secondary and tertiary layers use the same color.\n\nMulticolor — Applies intrinsic colors to some symbols to enhance meaning. For example, the leaf symbol uses green to reflect the appearance of leaves in the physical world, whereas the trash.slash symbol uses red to signal data loss. Some multicolor symbols include layers that can receive other colors.\n\nRegardless of rendering mode, using system-provided colors ensures that symbols automatically adapt to accessibility accommodations and appearance modes like vibrancy and Dark Mode. For developer guidance, see renderingMode(_:).\n\nConfirm that a symbol’s rendering mode works well in every context. Depending on factors like the size of a symbol and its contrast with the current background color, different rendering modes can affect how well people can discern the symbol’s details. In SF Symbols 4 and later, you can use the automatic setting to get a symbol’s preferred rendering mode, but it’s still a good idea to check the results for places where a different rendering mode might improve a symbol’s legibility.\n\nVariable color\n\nWith variable color, SF Symbols 4 introduces a way to represent a characteristic that can change over time — like capacity or strength — regardless of rendering mode. To visually communicate such a change, variable color applies color to different layers of a symbol as a value reaches different thresholds between zero and 100 percent.\n\nFor example, you could use variable color with the speaker.wave.3 symbol to communicate three different ranges of sound — plus the state where there’s no sound — by mapping the layers that represent the curved wave paths to different ranges of decibel values. In the case of no sound, no wave layers get color. In all other cases, a wave layer receives color when the sound reaches a threshold the system defines based on the number of nonzero states you want to represent.\n\nSometimes, it can make sense for some of a symbol’s layers to opt out of variable color. For example, in the speaker.wave.3 symbol shown above, the layer that contains the speaker path doesn’t receive variable color because a speaker doesn’t change as the sound level changes. A symbol can support variable color in any number of layers.\n\nUse variable color to communicate change — don’t use it to communicate depth. To convey depth and visual hierarchy, use Hierarchical rendering mode to elevate certain layers and distinguish foreground and background elements in a symbol.\n\nWeights and scales\n\nSF Symbols provides symbols in a wide range of weights and scales to help you create adaptable designs.\n\nEach of the nine symbol weights — from ultralight to black — corresponds to a weight of the San Francisco system font, helping you achieve precise weight matching between symbols and adjacent text, while supporting flexibility for different sizes and contexts.\n\nEach symbol is also available in three scales: small, medium (the default), and large. The scales are defined relative to the cap height of the San Francisco system font.\n\nSmall\n\nMedium\n\nLarge\n\nSpecifying a scale lets you adjust a symbol’s emphasis compared to adjacent text, without disrupting the weight matching with text that uses the same point size. For developer guidance, see imageScale(_:) (SwiftUI), UIImage.SymbolScale (UIKit), and NSImage.SymbolConfiguration (AppKit).\n\nDesign variants\n\nSF Symbols defines several design variants — such as fill, slash, and enclosed — that can help you communicate precise states and actions while maintaining visual consistency and simplicity in your UI. For example, you could use the slash variant of a symbol to show that an item or action is unavailable, or use the fill variant to indicate selection.\n\nOutline is the most common variant in SF Symbols. An outlined symbol has no solid areas, resembling the appearance of text. Most symbols are also available in a fill variant, in which the areas within some shapes are solid.\n\nIn addition to outline and fill, SF Symbols also defines variants that include a slash or enclose a symbol within a shape like a circle, square, or rectangle. In many cases, enclosed and slash variants can combine with outline or fill variants.\n\nSF Symbols 3 and later provides many variants for specific languages and writing systems, including Latin, Arabic, Hebrew, Hindi, Thai, Chinese, Japanese, and Korean. Language- and script-specific variants adapt automatically when the device language changes. For guidance, see Images.\n\nSymbol variants support a range of design goals. For example:\n\nThe outline variant works well in toolbars, navigation bars, lists, and other places where you display a symbol alongside text.\n\nSymbols that use an enclosing shape — like a square or circle — can improve legibility at small sizes.\n\nThe solid areas in a fill variant tend to give a symbol more visual emphasis, making it a good choice for iOS tab bars and swipe actions and places where you use an accent color to communicate selection.\n\nIn many cases, the view that displays a symbol determines whether to use outline or fill, so you don’t have to specify a variant. For example, an iOS tab bar prefers the fill variant, whereas a navigation bar takes the outline variant.\n\nAnimations\n\nSF Symbols provides a collection of expressive, configurable animations that enhance your interface and add vitality to your app. Symbol animations help communicate ideas, provide feedback in response to people’s actions, and signal changes in status or ongoing activities.\n\nAnimations work on all SF Symbols in the library, in all rendering modes, weights, and scales, and on custom symbols. For considerations when animating custom symbols, see Custom symbols. You can control the playback of an animation, whether you want the animation to run from start to finish, or run indefinitely, repeating its effect until a condition is met. You can customize behaviors, like changing the playback speed of an animation or determining whether to reverse an animation before repeating it. For developer guidance, see Symbols and SymbolEffect.\n\nSF Symbols 5 and later supports the following animations.\n\nAppear — Causes a symbol to gradually emerge into view.\n\nPlay\n\nDisappear — Causes a symbol to gradually recede out of view.\n\nPlay\n\nBounce — Briefly scales a symbol with an elastic-like movement that goes either up or down and then returns to the symbol’s initial state. The bounce animation plays once by default and can help communicate that an action occurred or needs to take place.\n\nPlay\n\nScale — Changes the size of a symbol, increasing or decreasing its scale. Unlike the bounce animation, which returns the symbol to its original state, the scale animation persists until you set a new scale or remove the effect. You might use the scale animation to draw people’s attention to a selected item or as feedback when people choose a symbol.\n\nPlay\n\nPulse — Varies the opacity of a symbol over time. This animation automatically pulses only the layers within a symbol that are annotated to pulse, and optionally can pulse all layers within a symbol. You might use the pulse animation to communicate ongoing activity, playing it continuously until a condition is met.\n\nPlay\n\nVariable color — Incrementally varies the opacity of layers within a symbol. This animation can be cumulative or iterative. When cumulative, color changes persist for each layer until the animation cycle is complete. When iterative, color changes occur one layer at a time. You might use variable color to communicate progress or ongoing activity, such as playback, connecting, or broadcasting. You can customize the animation to autoreverse — meaning reverse the animation to the starting point and replay the sequence — as well as hide inactive layers rather than reduce their opacity.\n\nPlay\n\nReplace — Replaces one symbol with another. The replace animation works between arbitrary symbols and across all weights and rendering modes. This animation features three configurations:\n\nDown-up, where the outgoing symbol scales down and the incoming symbol scales up, communicating a change in state.\n\nUp-up, where both the outgoing and incoming symbols scale up. This configuration communicates a change in state that includes a sense of forward progression.\n\nOff-up, where the outgoing symbol hides immediately and the incoming symbol scales up. This configuration communicates a state change that emphasizes the next available state or action.\n\nPlay\nFrom left to right: down-up, up-up, off-up\n\nApply symbol animations judiciously. While there’s no limit to how many animations you can add to a view, too many animations can overwhelm an interface and distract people.\n\nMake sure that animations serve a clear purpose in communicating a symbol’s intent. Each type of animation has a discrete movement that communicates a certain type of action or elicits a certain response. Consider how people might interpret an animated symbol and whether the animation, or combination of animations, might be confusing.\n\nUse symbol animations to communicate information more efficiently. Animations provide visual feedback, reinforcing that something happened in your interface. You can use animations to present complex information in a simple way and without taking up a lot of visual space.\n\nConsider your app’s tone when adding animations. When animating a symbol, think about what the animation can convey and how that might align with your brand identity and your app’s overall style and tone. For guidance, see Branding.\n\nCustom symbols\n\nIf you need a symbol that SF Symbols doesn’t provide, you can create your own. To create a custom symbol, first export the template for a symbol that’s similar to the design you want, then use a vector-editing tool to modify it. For developer guidance, see Creating custom symbol images for your app.\n\nImportant\n\nSF Symbols includes copyrighted symbols that depict Apple products and features. You can display these symbols in your app, but you can’t customize them. To help you identify a noncustomizable symbol, the SF Symbols app badges it with an Info icon; to help you use the symbol correctly, the inspector pane describes its usage restrictions.\n\nUsing a process called annotating, you can assign a specific color — or a specific hierarchical level, such as primary, secondary, or tertiary — to each layer in a custom symbol. Depending on the rendering modes you support, you can use a different mode in each instance of the symbol in your app.\n\nUse the template as a guide. Create a custom symbol that’s consistent with the ones the system provides in level of detail, optical weight, alignment, position, and perspective. Strive to design a symbol that is:\n\nSimple\n\nRecognizable\n\nInclusive\n\nDirectly related to the action or content it represents\n\nFor guidance, see Icons.\n\nAssign negative side margins to your custom symbol if necessary. SF Symbols supports negative side margins to aid optical horizontal alignment when a symbol contains a badge or other elements that increase its width. For example, negative side margins can help you horizontally align a stack of folder symbols, some of which include a badge. Beginning in SF Symbols 3, the name of each margin includes the relevant configuration — such as “left-margin-Regular-M” — so be sure to use this naming pattern if you add margins to your custom symbols.\n\nOptimize layers to use animations with custom symbols. If you want to animate your symbol by layer, make sure to annotate the layers in the SF Symbols app. The Z-order determines the order that you want to apply colors to the layers of a variable color symbol, and you can choose whether to animate those changes from front-to-back, or back-to-front. SF Symbols 5 introduces layer groups, which allows related layers to move together when animated.\n\nTest animations for custom symbols. It’s important to test your custom symbols with all of the animation presets because the shapes and paths might not appear how you expect when the layers are in motion. To get the most out of this feature, consider drawing your custom symbols with whole shapes. For example, a custom symbol similar to the person.2.fill symbol doesn’t need to create a cutout for the shape representing the person on the left. Instead, you can draw the full shape of the person, and in addition to that, draw an offset path of the person on the right to help represent the gap between them. This offset path can later be annotated as an erase layer to render the symbol as desired. This method of drawing helps preserve additional layer information that allow for animations to perform as expected.\n\nAvoid making custom symbols that include common variants, such as enclosures or badges. The SF Symbols app offers a component library for creating variants of your custom symbol. Using the component library allows you to create commonly used variants of your custom symbol while maintaining design consistency with the included SF Symbols.\n\nProvide alternative text labels for custom symbols. Alternative text labels — or accessibility descriptions — let VoiceOver describe visible UI and content, making navigation easier for people with visual disabilities. For guidance, see VoiceOver.\n\nDon’t design replicas of Apple products. Apple products are copyrighted and you can’t reproduce them in your custom symbols. Also, you can’t customize a symbol that SF Symbols identifies as representing an Apple feature or product.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nSF Symbols\n\nTypography\n\nDeveloper documentation\n\nConfiguring and displaying symbol images in your UI — UIKit\n\nCreating custom symbol images for your app — UIKit\n\nSymbols\n\nVideos\nWhat’s new in SF Symbols 5\nCreate animated symbols\nAdopt Variable Color in SF Symbols\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 5, 2023\n\n\t\n\nAdded a new section on animations. Included animation guidance for custom symbols.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded a new section on variable color. Removed instructions on creating custom symbol paths, exporting templates, and layering paths, deferring to developer articles that cover these topics."
  },
  {
    "title": "Components",
    "url": "https://developer.apple.com/design/human-interface-guidelines/components",
    "html": "Components\nLearn how to use and customize system-defined components to give people a familiar and consistent experience.\nContent\nLayout and organization\nMenus and actions\nNavigation and search\nPresentation\nSelection and input\nStatus\nSystem experiences"
  },
  {
    "title": "Right to left",
    "url": "https://developer.apple.com/design/human-interface-guidelines/right-to-left",
    "html": "Right to left\nSupport right-to-left languages like Arabic and Hebrew by reversing your interface as needed to match the reading direction of the related scripts.\n\nWhen people choose a language for their device — or just your app or game — they expect the interface to adapt in various ways (to learn more, see Localization).\n\nSystem-provided UI frameworks support right-to-left (RTL) by default, allowing system-provided UI components to flip automatically in the RTL context. If you use system-provided elements and standard layouts, you might not need to make any changes to your app’s automatically reversed interface.\n\nIf you want to fine-tune your layout or enhance specific localizations to adapt to different currencies, numerals, or mathematical symbols that can occur in various locales in countries that use RTL languages, follow these guidelines.\n\nText alignment\n\nAdjust text alignment to match the interface direction, if the system doesn’t do so automatically. For example, if you left-align text with content in the left-to-right (LTR) context, right-align the text to match the content’s mirrored position in the RTL context.\n\nLeft-aligned text in the LTR context\n\nRight-aligned content in the RTL context\n\nAlign a paragraph based on its language, not on the current context. When the alignment of a paragraph — defined as three or more lines of text — doesn’t match its language, it can be difficult to read. For example, right-aligning a paragraph that consists of LTR text can make the beginning of each line difficult to see. To improve readability, continue aligning one- and two-line text blocks to match the reading direction of the current context, but align a paragraph to match its language.\n\nA left-aligned paragraph in the RTL context\n\nA right-aligned paragraph in the RTL context\n\nUse a consistent alignment for all text items in a list. To ensure a comfortable reading and scanning experience, reverse the alignment of all items in a list, including items that are displayed in a different script.\n\nRight-aligned content in the RTL context\n\nMixed alignment in the RTL content\n\nNumbers and characters\n\nDifferent RTL languages can use different number systems. For example, Hebrew text uses Western Arabic numerals, whereas Arabic text might use either Western or Eastern Arabic numerals. The use of Western and Eastern Arabic numerals varies among countries and regions and even among areas within the same country or region.\n\nIf your app covers mathematical concepts or other number-centric topics, it’s a good idea to identify the appropriate way to display such information in each locale you support. In contrast, apps that don’t address number-related topics can generally rely on system-provided number representations.\n\nWestern Arabic numerals\n\nEastern Arabic numerals\n\nDon’t reverse the order of numerals in a specific number. Regardless of the current language or the surrounding content, the digits in a specific number — such as “541,” a phone number, or a credit card number — always appear in the same order.\n\nLatin\n\nHebrew\n\nArabic (Western Arabic numerals)\n\nArabic (Eastern Arabic numerals)\n\nReverse the order of numerals that show progress or a counting direction; never flip the numerals themselves. Controls like progress bars, sliders, and rating controls often include numerals to clarify their meaning. If you use numerals in this way, be sure to reverse the order of the numerals to match the direction of the flipped control. Also reverse a sequence of numerals if you use the sequence to communicate a specific order.\n\nLatin\n\nArabic (Eastern Arabic numerals)\n\nHebrew\n\nArabic (Western Arabic numerals)\n\nControls\n\nFlip controls that show progress from one value to another. Because people tend to view forward progress as moving in the same direction as the language they read, it makes sense to flip controls like sliders and progress indicators in the RTL context. When you do this, also be sure to reverse the positions of the accompanying glyphs or images that depict the beginning and ending values of the control.\n\nDirectional controls in the LTR context\n\nDirectional controls in the RTL context\n\nFlip controls that help people navigate or access items in a fixed order. For example, in the RTL context, a back button must point to the right so the flow of screens matches the reading order of the RTL language. Similarly, next or previous buttons that let people access items in an ordered list need to flip in the RTL context to match the reading order.\n\nPreserve the direction of a control that refers to an actual direction or points to an onscreen area. For example, if you provide a control that means “to the right,” it must always point right, regardless of the current context.\n\nVisually balance adjacent Latin and RTL scripts when necessary. In buttons, labels, and titles, Arabic or Hebrew text can appear too small when next to uppercased Latin text, because Arabic and Hebrew don’t include uppercase letters. To visually balance Arabic or Hebrew text with Latin text that uses all capitals, it often works well to increase the RTL font size by about 2 points.\n\nArabic and Hebrew text can look too small next to uppercased Latin text of the same font size.\n\nYou can slightly increase the font size of Arabic and Hebrew text to visually balance uppercased Latin text.\n\nImages\n\nAvoid flipping images like photographs, illustrations, and general artwork. Flipping an image often changes the image’s meaning; flipping a copyrighted image could be a violation. If an image’s content is strongly connected to reading direction, consider creating a new version of the image instead of flipping the original.\n\nReverse the positions of images when their order is meaningful. For example, if you display multiple images in a specific order like chronological, alphabetical, or favorite, reverse their positions to preserve the order’s meaning in the RTL context.\n\nItems with meaningful positions in the LTR context\n\nItems with meaningful positions in the RTL context\n\nInterface icons\n\nWhen you use SF Symbols to supply interface icons for your app, you get variants for the RTL context and localized symbols for Arabic and Hebrew, among other languages. If you create custom symbols, you can specify their directionality. For developer guidance, see Creating custom symbol images for your app.\n\nLTR variants of directional symbols\n\nRTL variants of directional symbols\n\nFlip interface icons that represent text or reading direction. For example, if an interface icon uses left-aligned bars to represent text in the LTR context, right-align the bars in the RTL context.\n\nLTR variant of a symbol that represents text\n\nRTL variant of a symbol that represents text\n\nConsider creating a localized version of an interface icon that displays text. Some interface icons include letters or words to help communicate a script-related concept, like font-size choice or a signature. If you have a custom interface icon that needs to display actual text, consider creating a localized version. For example, SF Symbols offers different versions of the signature, rich-text, and I-beam pointer symbols for use with Latin, Hebrew, and Arabic text, among others.\n\nLatin\n\nHebrew\n\nArabic\n\nIf you have a custom interface icon that uses letters or words to communicate a concept unrelated to reading or writing, consider designing an alternative image that doesn’t use text.\n\nFlip an interface icon that shows forward or backward motion. When something moves in the same direction that people read, they typically interpret that direction as forward; when something moves in the opposite direction, people tend to interpret the direction as backward. An interface icon that depicts an object moving forward or backward needs to flip in the RTL context to preserve the meaning of the motion. For example, an icon that represents a speaker typically shows sound waves emanating forward from the speaker. In the LTR context, the sound waves come from the left, so in the RTL context, the icon needs to flip to show the waves coming from the right.\n\nLTR variant of a symbol that depicts forward motion\n\nRTL variant of a symbol that depicts forward motion\n\nDon’t flip logos or universal signs and marks. Displaying a flipped logo confuses people and can have legal repercussions. Always display a logo in its original form, even if it includes text. People expect universal symbols and marks like the checkmark to have a consistent appearance, so avoid flipping them.\n\nA logo\n\nA universal symbol or mark\n\nIn general, avoid flipping interface icons that depict real-world objects. Unless you use the object to indicate directionality, it’s best to avoid flipping an icon that represents a familiar item. For example, clocks work the same everywhere, so a traditional clock interface icon needs to look the same regardless of language direction. Some interface icons might seem to reference language or reading direction because they represent items that are slanted for right-handed use. However, most people are right-handed, so flipping an icon that shows a right-handed tool isn’t necessary and might be confusing.\n\nBefore merely flipping a complex custom interface icon, consider its individual components and the overall visual balance. In some cases, a component — like a badge, slash, or magnifying glass — needs to adhere to a visual design language regardless of localization. For example, SF Symbols maintains visual consistency by using the same backslash to represent the prohibition or negation of a symbol’s meaning in both LTR and RTL versions.\n\nLTR variant of a symbol that includes a backslash\n\nRTL variant of a symbol that includes a backslash\n\nIn other cases, you might need to flip a component (or its position) to ensure the localized version of the icon still makes sense. For example, if a badge represents the actual UI that people see in your app, it needs to flip if your UI flips. Alternatively, if a badge modifies the meaning of an interface icon, consider whether flipping the badge preserves both the modified meaning and the overall visual balance of the icon. In the images shown below, the badge doesn’t depict an object in the UI, but keeping it in the top-right corner visually unbalances the cart.\n\nIf your custom interface icon includes a component that can imply handedness, like a tool, consider preserving the orientation of the tool while flipping the base image if necessary.\n\nLTR variant of a symbol that depicts a tool\n\nRTL variant of a symbol that depicts a tool\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nLayout\n\nInclusion\n\nSF Symbols\n\nDeveloper documentation\n\nPreparing views for localization — SwiftUI\n\nVideos\nDesign for Arabic\nWriting for interfaces\nThe practice of inclusive design"
  },
  {
    "title": "Layout",
    "url": "https://developer.apple.com/design/human-interface-guidelines/layout",
    "html": "Layout\nA consistent layout that adapts to various contexts makes your experience more approachable and helps people enjoy their favorite apps and games on all their devices.\n\nThe following guidance helps you design content layouts for all platforms. To learn about displaying windows and other content throughout Apple Vision Pro space, see Spatial layout.\n\nGuides and safe areas\n\nA layout guide defines a rectangular region that helps you position, align, and space your content on the screen. The system includes predefined layout guides that make it easy to apply standard margins around content and restrict the width of text for optimal readability. You can also define custom layout guides.\n\nA safe area defines the area within a view that isn’t covered by a navigation bar, tab bar, toolbar, or other views a window or scene might provide. Safe areas are essential for avoiding a device’s interactive and display features, like the Dynamic Island on iPhone or the camera housing on some Mac models.\n\nIn iOS, iPadOS, tvOS, and visionOS, the system defines a collection of traits that characterize variations in the device environment that can affect the way your app looks. Using SwiftUI or Auto Layout, you can ensure that your interface adapts dynamically to a wide range of traits and contexts, including:\n\nDifferent device screen sizes, resolutions, and color spaces\n\nDifferent device orientations (portrait/landscape)\n\nSplit view\n\nExternal display support, Display Zoom, and multitasking modes on iPad\n\nDynamic Type text-size changes\n\nLocale-based internationalization features like left-to-right/right-to-left layout direction, date/time/number formatting, font variation, and text length\n\nSystem feature availability\n\nBest practices\n\nDesign a consistent layout that adapts gracefully to context changes, while displaying the same content as much as possible. People expect your experience to work well and remain familiar when they rotate their device, resize a window, add another display, or switch to a different device. You can help ensure an adaptable interface by respecting system-defined safe areas, margins, and guides (where available) and specifying layout modifiers to fine-tune the placement of views in your hierarchy.\n\nRespect key display and system features in each platform. Safe areas help you accommodate features like the corner radius and sensor housings on various devices, and avoid interfering with interactive system elements like Dynamic Island on iPhone and the Home indicator and app switcher on iPhone and iPad. Safe areas also help you account for interactive components like bars, dynamically repositioning content if sizes change.\n\nUse placement to convey relative importance. People often start by viewing items in reading order — that is, from top to bottom and from the leading to trailing side — so it generally works well to place the most important items near the top and leading side of the window, display, or field of view.\n\nMake essential information easy to find by giving it sufficient space. People want to view the most important information right away, so you don’t want to obscure it by crowding it with nonessential details. You can make secondary information available in other parts of the window or display.\n\nCreate visual groupings to help people find the information they want. For example, you might use negative space, background shapes, colors, materials, or separator lines to show when elements are related and to separate information into distinct areas.\n\nUse alignment to ease visual scanning and to communicate organization and hierarchy. Alignment makes an app look neat and organized and can help people track content while scrolling or moving their eyes, making it easier to find information. Along with indentation, alignment can also help people understand an information hierarchy.\n\nBe prepared for text-size changes. People expect most apps to respond when they choose a different text size. To accommodate text-size changes, you might need to adjust the layout. For guidance on displaying text in your app, see Typography.\n\nConsider providing visual hints to help people discover content that’s currently hidden. For example, if you can’t display all the items in a large collection at once, you need to indicate that there are additional items that aren’t currently visible. Depending on the platform, you might display parts of items to hint that people can reveal additional content by interacting with the view, such as by scrolling.\n\nMake interactive components easy to discover by providing enough space around them. If interactive components are too close together — or if other content crowds them — the components can be difficult for people to distinguish, which can make your app or game hard to use.\n\nPreview your app on multiple devices, using different orientations, localizations, and text sizes. Although it’s generally best to preview features like wide color on actual devices, you can use Xcode Simulator to check for clipping and other layout issues. For example, if your iOS app supports landscape mode, you can use Simulator to make sure your layouts look great regardless of whether the device rotates left or right.\n\nWhen necessary, scale artwork in response to display changes. For example, viewing your app in a different context — such as on a screen with a different aspect ratio — might make your artwork appear cropped, letterboxed, or pillarboxed. If this happens, don’t change the aspect ratio of the artwork; instead, scale it so that important visual content remains visible. In visionOS, the system automatically scales a window when it moves along the z-axis.\n\nPlatform considerations\niOS, iPadOS\n\nAim to support both portrait and landscape orientations. People choose different orientations for a variety of reasons, and they generally expect apps to work well in every context. If it’s essential that your app run in a single orientation, don’t tell people to rotate their device to match; if your app doesn’t rotate automatically when someone holds the device in an unsupported orientation, they’ll know instinctively to rotate it. If your app is landscape-only, make sure it runs equally well whether people rotate their device to the left or the right.\n\nIf your app runs on a specific device, make sure it runs on every screen size for that device. In other words, an iPhone-only app must run on every iPhone screen size and an iPad-only app must run on every iPad screen size. For guidance, see Device screen sizes and orientations.\n\nInset full-width buttons. Respect the standard system-defined margins on the sides of full-width buttons. A full-width button at the bottom of the screen generally looks best when it has rounded corners and it aligns with the bottom of the safe area — which also ensures that it doesn’t conflict with the Home indicator.\n\nExtend visual content to fill the screen. Make sure backgrounds extend to the edges of the display, and that vertically scrollable layouts, like tables and collections, continue all the way to the bottom.\n\nOn iPad, consider placing controls on the sides of the screen in landscape orientation. When controls are on the left and right sides of the screen, people can reach them easily with both hands while they’re holding the device.\n\nNote\n\nOn iPad, avoid putting custom content or controls in the center of the status bar or too close to the bottom corners. The system displays controls in these areas when people use multitasking or Stage Manager.\n\nAvoid placing interactive controls at the bottom edge of the screen when possible. Regardless of orientation, people use system gestures at the bottom edge of the display to access features like the Home screen and app switcher, and these gestures may cancel custom gestures you implement in this area. Also avoid placing controls in the far corners of the screen because these areas can be difficult for people to reach comfortably. If your game needs to place controls in the lower portion of the screen — below the safe area — use matching insets when placing them at the top and bottom of the screen, and leave ample space around the Home indicator so people don’t accidentally target it when trying to interact with a control.\n\nBe prepared for different status bar heights. If you display content below the status bar, you can use the safe area to help dynamically reposition the content as needed.\n\nHide the status bar only when it adds value or enhances your experience. The status bar displays information people find useful and it occupies an area of the screen most apps don’t fully use, so it’s generally a good idea to keep it visible.\n\niOS, iPadOS safe areas\n\nThe safe area defines the area within a view that isn’t covered by a navigation bar, tab bar, toolbar, or other views a view controller might provide.\n\niPhone\niPad\n\niOS keyboard layout guide\n\niOS 15 and later provides a keyboard layout guide that represents the space the keyboard currently occupies and accounts for safe area insets. Using this guide can help you make the keyboard feel like an integral part of your app, regardless of the type of keyboard people use or where they position it. For developer guidance, see UIKeyboardLayoutGuide.\n\nWhen the keyboard is visible, the layout guide represents its area and position.\n\nWhen the keyboard dismisses, the top of the layout guide matches the bottom of the safe area layout guide.\n\nmacOS\n\nAvoid placing controls or critical information at the bottom of a window. People often move windows so that the bottom edge is below the bottom of the screen.\n\ntvOS\n\nTVs vary widely in size. On Apple TV, app layouts don’t automatically adapt to the size of the screen like they do on iPhone or iPad. Instead, apps show the same interface on every display. Take extra care in designing your layout so that it looks great in a variety of screen sizes.\n\nAdhere to the screen’s safe zone. Inset primary content 60 pixels from the top and bottom of the screen, and 80 pixels from the sides. It can be difficult for people to see content that close to the edges, and unintended cropping can occur due to overscanning on older TVs. Allow only partially displayed offscreen content and elements that deliberately flow offscreen to appear outside this zone.\n\nInclude appropriate padding between focusable elements. When you use UIKit and the focus APIs, an element gets bigger when it comes into focus. Consider how elements look when they’re focused, and make sure they don’t unintentionally overlap important information.\n\nUse layout templates to build media-centered apps and use grids to provide collections of content. If the layout of your media app simply needs to present content beautifully with minimal layout customization, use a predesigned layout template. If your app needs to showcase a collection of content, use a grid to make the content easy to browse at a distance and quick to navigate with the remote.\n\nLayout templates\n\nApple TV templates deliver clean, consistent layouts that make content the center of attention. These templates — based on JavaScript and the Apple TV markup language (TVML) — dynamically load and populate with content when people open your app. Templates give you flexibility to create content-rich apps with predefined layouts that look good on the TV screen and are ideal for streaming media.\n\nChoose a template based on its purpose. You can customize a template’s background, color, size, layout, and more, but if your customizations make the template jarring or unrecognizable, consider using a different one or designing a custom interface.\n\nAlert template\nCatalog template\nCompilation template\nDescriptive alert template\nForm template\nList template\nLoading template\nMenu bar template\nParade template\nProduct template\nProduct bundle template\nRating template\nSearch template\nStack template\n\nAlert template\n\nThe alert template displays a message that asks for permission to perform an action, such as confirming a purchase or a destructive action like a deletion. See also Alerts.\n\nCustomize templates tastefully. Layout templates are highly customizable; you have control over the background, tinting, size, layout, and more. As you design your app, defer to content whenever possible, avoiding customizations that appear distracting, jarring, or obtrusive.\n\nUnderstand a template’s purpose before using it. If your customizations make the underlying template unrecognizable, consider using a different template or building a custom interface.\n\nFor detailed information about integrating templates into your app, see TVML.\n\nGrids\n\nThe following grid layouts provide an optimal viewing experience. Be sure to use appropriate spacing between unfocused rows and columns to prevent overlap when an item is brought into focus.\n\nIf you use the UIKit collection view flow element, the number of columns in a grid is automatically determined based on the width and spacing of your content. For developer guidance, see UICollectionViewFlowLayout.\n\nTwo-column\nThree-column\nFour-column\nFive-column\nSix-column\nSeven-column\nEight-column\nNine-column\n\nTwo-column grid\n\nAttribute\n\n\t\n\nValue\n\n\n\n\nUnfocused content width\n\n\t\n\n860 pt\n\n\n\n\nHorizontal spacing\n\n\t\n\n40 pt\n\n\n\n\nMinimum vertical spacing\n\n\t\n\n100 pt\n\nInclude additional vertical spacing for titled rows. If a row has a title, provide enough spacing between the bottom of the previous unfocused row and the center of the title to avoid crowding. Also provide spacing between the bottom of the title and the top of the unfocused items in the row.\n\nUse consistent spacing. When content isn’t consistently spaced, it no longer looks like a grid and it’s harder for people to scan.\n\nMake partially hidden content look symmetrical. To help direct attention to the fully visible content, keep partially hidden offscreen content the same width on each side of the screen.\n\nvisionOS\n\nThe guidance below can help you lay out content within the windows of your visionOS app or game, making it feel familiar and easy to use. For guidance on displaying windows in space and best practices for using depth, scale, and field of view in your visionOS app, see Spatial layout. To learn more about visionOS window components, see Windows > visionOS.\n\nNote\n\nWhen you add depth to content in a standard window, the content extends beyond the window’s bounds along the z-axis. If content extends too far along the z-axis, the system clips it.\n\nKeep a window’s content within its bounds. In visionOS, the system displays window controls just outside a window’s bounds in the XY plane. For example, the Share menu appears above the window and the controls for resizing, moving, and closing the window appear below it. Letting 2D or 3D content encroach on these areas can make the system-provided controls, especially those below the window, difficult for people to use.\n\nConsider centering the most important content and controls in your app. It can be easier for people to discover and interact with content when it’s near the middle of a window, especially when the window is large.\n\nMake a window’s interactive components easy for people to look at. You need to include enough space around an interactive component so that visually identifying it is easy and comfortable, and to prevent the system-provided hover effect from obscuring other content. For example, place buttons so their centers are at least 60 points apart. For guidance, see Eyes, Spatial layout, and Buttons > visionOS.\n\nIf you need to display additional controls that don’t belong within a window, use an ornament. An ornament lets you offer app controls that remain visually associated with a window without interfering with the system-provided controls. For example, a window’s toolbar and tab bar appear as ornaments. For guidance, see Ornaments.\n\nwatchOS\n\nDesign your content to extend from one edge of the screen to the other. The Apple Watch bezel provides a natural visual padding around your content. To avoid wasting valuable space, consider minimizing the padding between elements.\n\nAvoid placing more than two or three controls side by side in your interface. As a general rule, display no more than three buttons that contain glyphs — or two buttons that contain text — in a row. Although it’s usually better to let text buttons span the full width of the screen, two side-by-side buttons with short text labels can also work well, as long as the screen doesn’t scroll.\n\nSupport autorotation in views people might want to show others. When people flip their wrist away, apps typically respond to the motion by sleeping the display, but in some cases it makes sense to autorotate the content. For example, a wearer might want to show an image to a friend or display a QR code to a reader. For developer guidance, see isAutorotating.\n\nSpecifications\niOS, iPadOS\nDevice screen sizes and orientations\n\nDevice\n\n\t\n\nDimensions (portrait)\n\n\n\n\n12.9” iPad Pro\n\n\t\n\n1024x1366 pt (2048x2732 px @2x)\n\n\n\n\n11” iPad Pro\n\n\t\n\n834x1194 pt (1668x2388 px @2x)\n\n\n\n\n10.5” iPad Pro\n\n\t\n\n834x1194 pt (1668x2388 px @2x)\n\n\n\n\n9.7” iPad Pro\n\n\t\n\n768x1024 pt (1536x2048 px @2x)\n\n\n\n\n8.3” iPad mini\n\n\t\n\n744x1133 pt (1488x2266 px @2x)\n\n\n\n\n7.9” iPad mini\n\n\t\n\n768x1024 pt (1536x2048 px @2x)\n\n\n\n\n10.9” iPad Air\n\n\t\n\n820x1180 pt (1640x2360 px @2x)\n\n\n\n\n10.5” iPad Air\n\n\t\n\n834x1112 pt (1668x2224 px @2x)\n\n\n\n\n9.7” iPad Air\n\n\t\n\n768x1024 pt (1536x2048 px @2x)\n\n\n\n\n10.2” iPad\n\n\t\n\n810x1080 pt (1620x2160 px @2x)\n\n\n\n\n9.7” iPad\n\n\t\n\n768x1024 pt (1536x2048 px @2x)\n\n\n\n\niPhone 15 Pro Max\n\n\t\n\n430x932 pt (1290x2796 px @3x)\n\n\n\n\niPhone 15 Pro\n\n\t\n\n393x852 pt (1179x2556 px @3x)\n\n\n\n\niPhone 15 Plus\n\n\t\n\n430x932 pt (1290x2796 px @3x)\n\n\n\n\niPhone 15\n\n\t\n\n393x852 pt (1179x2556 px @3x)\n\n\n\n\niPhone 14 Pro Max\n\n\t\n\n430x932 pt (1290x2796 px @3x)\n\n\n\n\niPhone 14 Pro\n\n\t\n\n393x852 pt (1179x2556 px @3x)\n\n\n\n\niPhone 14 Plus\n\n\t\n\n428x926 pt (1284x2778 px @3x)\n\n\n\n\niPhone 14\n\n\t\n\n390x844 pt (1170x2532 px @3x)\n\n\n\n\niPhone 13 Pro Max\n\n\t\n\n428x926 pt (1284x2778 px @3x)\n\n\n\n\niPhone 13 Pro\n\n\t\n\n390x844 pt (1170x2532 px @3x)\n\n\n\n\niPhone 13\n\n\t\n\n390x844 pt (1170x2532 px @3x)\n\n\n\n\niPhone 13 mini\n\n\t\n\n375x812 pt (1125x2436 px @3x)\n\n\n\n\niPhone 12 Pro Max\n\n\t\n\n428x926 pt (1284x2778 px @3x)\n\n\n\n\niPhone 12 Pro\n\n\t\n\n390x844 pt (1170x2532 px @3x)\n\n\n\n\niPhone 12\n\n\t\n\n390x844 pt (1170x2532 px @3x)\n\n\n\n\niPhone 12 mini\n\n\t\n\n375x812 pt (1125x2436 px @3x)\n\n\n\n\niPhone 11 Pro Max\n\n\t\n\n414x896 pt (1242x2688 px @3x)\n\n\n\n\niPhone 11 Pro\n\n\t\n\n375x812 pt (1125x2436 px @3x)\n\n\n\n\niPhone 11\n\n\t\n\n414x896 pt (828x1792 px @2x)\n\n\n\n\niPhone XS Max\n\n\t\n\n414x896 pt (1242x2688 px @3x)\n\n\n\n\niPhone XS\n\n\t\n\n375x812 pt (1125x2436 px @3x)\n\n\n\n\niPhone XR\n\n\t\n\n414x896 pt (828x1792 px @2x)\n\n\n\n\niPhone X\n\n\t\n\n375x812 pt (1125x2436 px @3x)\n\n\n\n\niPhone 8 Plus\n\n\t\n\n414x736 pt (1080x1920 px @3x)\n\n\n\n\niPhone 8\n\n\t\n\n375x667 pt (750x1334 px @2x)\n\n\n\n\niPhone 7 Plus\n\n\t\n\n414x736 pt (1080x1920 px @3x)\n\n\n\n\niPhone 7\n\n\t\n\n375x667 pt (750x1334 px @2x)\n\n\n\n\niPhone 6s Plus\n\n\t\n\n414x736 pt (1080x1920 px @3x)\n\n\n\n\niPhone 6s\n\n\t\n\n375x667 pt (750x1334 px @2x)\n\n\n\n\niPhone 6 Plus\n\n\t\n\n414x736 pt (1080x1920 px @3x)\n\n\n\n\niPhone 6\n\n\t\n\n375x667 pt (750x1334 px @2x)\n\n\n\n\n4.7” iPhone SE\n\n\t\n\n375x667 pt (750x1334 px @2x)\n\n\n\n\n4” iPhone SE\n\n\t\n\n320x568 pt (640x1136 px @2x)\n\n\n\n\niPod touch 5th generation and later\n\n\t\n\n320x568 pt (640x1136 px @2x)\n\nNote\n\nAll scale factors in the table above are UIKit scale factors, which may differ from native scale factors. For developer guidance, see scale and nativeScale.\n\nDevice size classes\n\nDifferent size class combinations apply to the full-screen experience on different devices, based on screen size.\n\nDevice\n\n\t\n\nPortrait orientation\n\n\t\n\nLandscape orientation\n\n\n\n\n12.9” iPad Pro\n\n\t\n\nRegular width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n11” iPad Pro\n\n\t\n\nRegular width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n10.5” iPad Pro\n\n\t\n\nRegular width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n9.7” iPad\n\n\t\n\nRegular width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n7.9” iPad mini\n\n\t\n\nRegular width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\niPhone 15 Pro Max\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 15 Pro\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 15 Plus\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 15\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 14 Pro Max\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 14 Pro\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 14 Plus\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 14\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 13 Pro Max\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 13 Pro\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 13\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 13 mini\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 12 Pro Max\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 12 Pro\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 12\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 12 mini\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 11 Pro Max\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 11 Pro\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 11\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone XS Max\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone XS\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone XR\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone X\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 8 Plus\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 8\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 7 Plus\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 7\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone 6s Plus\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, compact height\n\n\n\n\niPhone 6s\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPhone SE\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\n\n\n\niPod touch 5th generation and later\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, compact height\n\nOn iPad, size classes also apply when your app or game runs in a multitasking configuration.\n\n2/3 split view\n\n1/2 split view\n\n1/3 split view\n\nDevice\n\n\t\n\nMode\n\n\t\n\nPortrait orientation\n\n\t\n\nLandscape orientation\n\n\n\n\n12.9” iPad Pro\n\n\t\n\n2/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n\t\n\n1/2 split view\n\n\t\n\nN/A\n\n\t\n\nRegular width, regular height\n\n\n\n\n\t\n\n1/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, regular height\n\n\n\n\n11” iPad Pro\n\n\t\n\n2/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n\t\n\n1/2 split view\n\n\t\n\nN/A\n\n\t\n\nCompact width, regular height\n\n\n\n\n\t\n\n1/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, regular height\n\n\n\n\n10.5” iPad Pro\n\n\t\n\n2/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n\t\n\n1/2 split view\n\n\t\n\nN/A\n\n\t\n\nCompact width, regular height\n\n\n\n\n\t\n\n1/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, regular height\n\n\n\n\n9.7” iPad\n\n\t\n\n2/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n\t\n\n1/2 split view\n\n\t\n\nN/A\n\n\t\n\nCompact width, regular height\n\n\n\n\n\t\n\n1/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, regular height\n\n\n\n\n7.9” iPad mini 4\n\n\t\n\n2/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nRegular width, regular height\n\n\n\n\n\t\n\n1/2 split view\n\n\t\n\nN/A\n\n\t\n\nCompact width, regular height\n\n\n\n\n\t\n\n1/3 split view\n\n\t\n\nCompact width, regular height\n\n\t\n\nCompact width, regular height\n\nwatchOS\n\nSeries\n\n\t\n\nScreen size\n\n\t\n\nWidth (pixels)\n\n\t\n\nHeight (pixels)\n\n\n\n\nApple Watch Ultra (1st and 2nd generations)\n\n\t\n\n49mm\n\n\t\n\n410\n\n\t\n\n502\n\n\n\n\n7 and later\n\n\t\n\n41mm\n\n\t\n\n352\n\n\t\n\n430\n\n\n\n\n7 and later\n\n\t\n\n45mm\n\n\t\n\n396\n\n\t\n\n484\n\n\n\n\n4, 5, 6, and SE\n\n\t\n\n40mm\n\n\t\n\n324\n\n\t\n\n394\n\n\n\n\n4, 5, 6, and SE\n\n\t\n\n44mm\n\n\t\n\n368\n\n\t\n\n448\n\n\n\n\n1, 2, and 3\n\n\t\n\n38mm\n\n\t\n\n272\n\n\t\n\n340\n\n\n\n\n1, 2, and 3\n\n\t\n\n42mm\n\n\t\n\n312\n\n\t\n\n390\n\nResources\nRelated\n\nRight to left\n\nDeveloper documentation\n\nUITraitCollection — UIKit\n\nUITraitEnvironment — UIKit\n\nResponding to changing display modes on Apple TV — UIKit\n\nVideos\nWhat's New in iOS Design\nEssential Design Principles\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nEnhanced guidance for avoiding system controls in iPadOS app layouts, and added specifications for 10.9-inch iPad Air and 8.3-inch iPad mini.\n\n\n\n\nDecember 5, 2023\n\n\t\n\nClarified guidance on centering content in a visionOS window.\n\n\n\n\nSeptember 15, 2023\n\n\t\n\nAdded specifications for iPhone 15 Pro Max, iPhone 15 Pro, iPhone 15 Plus, iPhone 15, Apple Watch Ultra 2, and Apple Watch SE.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded specifications for iPhone 14 Pro Max, iPhone 14 Pro, iPhone 14 Plus, iPhone 14, and Apple Watch Ultra."
  },
  {
    "title": "Materials",
    "url": "https://developer.apple.com/design/human-interface-guidelines/materials",
    "html": "Materials\nOn Apple platforms, a material imparts translucency by blurring and modifying the color values of the underlying visual content.\n\nTranslucency can improve the integration of foreground and background elements, visually communicating a separation between layers and helping people retain a sense of place. To enhance translucency, materials can combine with vibrancy. Vibrancy amplifies the sense of depth for foreground content like text, symbols, and fills, by pulling color forward from behind the material.\n\nNote\n\nVibrancy can affect all apps and games — even ones that don’t display any vibrant views — because some components are vibrant by default, such as menus in macOS, windows in visionOS, and labels in iOS.\n\nBest practices\n\nThe system supplies several materials you can use to convey a sense of depth and hierarchical structure without distracting from content. Ranging from the mostly translucent ultraThin to the mostly opaque ultraThick, materials can automatically adapt to appearance modes. In addition, you can apply system-provided visual effects — such as blur, vibrancy, and blending modes — to help UI components integrate well with materials and achieve the prominence you want. Using system-defined materials and effects can give your app or game a consistent appearance, and create smooth transitions when people switch between apps.\n\nChoose system materials and effects based on semantic meaning and recommended usage. Avoid selecting a material or effect based on the apparent color it imparts to your interface, because system settings can change its appearance and behavior. Instead, match the material or vibrancy style to your specific use case. For example, you can use the label vibrancy style for primary labels in your iOS app, the menu material for a menu in your macOS app, and the thin material to highlight interactive components in your visionOS app.\n\nHelp ensure legibility by using vibrant colors on top of materials. When you use system-defined vibrant colors, you don’t need to worry about colors seeming too dark, bright, saturated, or low contrast in different contexts. For example, iOS defines Dynamic System Colors for text, fills, symbols, and separators, making these items look great on translucent backgrounds. In macOS, all standard system colors have vibrant versions. In visionOS, the system uses the same dark vibrant colors that macOS uses, automatically adapting them to maintain contrast in different visual contexts. For guidance, see Color.\n\nConsider contrast and visual separation when choosing a material to combine with blur and vibrancy effects. For example, consider that:\n\nThicker materials can provide better contrast for text and other elements with fine features\n\nTranslucency can help people retain their context by providing a visible reminder of the content that’s in the background\n\nRegardless of the material you choose, you want to avoid using nonvibrant colors on top of it.\n\nFor developer guidance, see Material.\n\nPlatform considerations\niOS, iPadOS\n\nAlthough the standard system colors aren’t available in vibrant versions, iOS and iPadOS define vibrant colors for labels, fills, and separators that are specifically designed to work with each material.\n\nLabels and fills both have several levels of vibrancy; separators have one level. The name of a level indicates the relative amount of contrast between an element and the background: The default level has the highest contrast, whereas quaternary (when it exists) has the lowest contrast.\n\nExcept for quaternary, you can use the following vibrancy values for labels on any material. In general, avoid using quaternary on top of the thin and ultraThin materials, because the contrast is too low.\n\nUIVibrancyEffectStyle.label (default)\n\nUIVibrancyEffectStyle.secondaryLabel\n\nUIVibrancyEffectStyle.tertiaryLabel\n\nUIVibrancyEffectStyle.quaternaryLabel\n\nYou can use the following vibrancy values for fills on all materials.\n\nUIVibrancyEffectStyle.fill (default)\n\nUIVibrancyEffectStyle.secondaryFill\n\nUIVibrancyEffectStyle.tertiaryFill\n\nThe system provides a single, default vibrancy value for a separator, which works well on all materials.\n\nmacOS\n\nmacOS provides materials that define the amounts of translucency, blurring, and vibrancy applied to your interface. In addition, macOS provides several standard materials, each with a designated purpose, and vibrant versions of all standard colors. For example, you can choose a material to match the default look of a window, menu, popover, sidebar, title bar, and more. For developer guidance, see NSVisualEffectView.Material.\n\nLight appearance\n\nDark appearance\n\nChoose when to allow vibrancy in custom views and controls. Depending on configuration and system settings, system views and controls use vibrancy to make foreground content stand out against any background. Test your interface in a variety of contexts to discover when vibrancy enhances the appearance and improves communication.\n\nChoose a background blending mode that complements your interface design. macOS defines two modes that blend background content: behind window and within window. For developer guidance, see NSVisualEffectView.BlendingMode.\n\nBehind-window blending. In this mode, the content behind a window shows through, helping people retain some of the context that surrounds your app or game. Components such as menus, sheets, and sidebars automatically use this mode.\n\nIn-window blending. This mode lets window content show through other window components. For example, a toolbar can use this mode to give people a sense of continuity as window content scrolls under it.\n\ntvOS\n\nUse thinner, translucent materials to elevate content and make it feel fresh. Thicker materials tend to hide shadows, reducing depth and making it harder to distinguish content clearly. You might consider using thicker materials if you want to evoke a heavier feeling or suggest that the content is older.\n\nFor example, consider using system materials in the following ways:\n\nMaterial\n\n\t\n\nRecommended for\n\n\n\n\nultraThin\n\n\t\n\nFull-screen views that require a light color scheme\n\n\n\n\nthin\n\n\t\n\nOverlay views that partially obscure onscreen content and require a light color scheme\n\n\n\n\nregular\n\n\t\n\nOverlay views that partially obscure onscreen content\n\n\n\n\nthick\n\n\t\n\nOverlay views that partially obscure onscreen content and require a dark color scheme\n\n\n\n\nultraThick\n\n\t\n\nFull-screen views that require a dark color scheme\n\nYou can also use the prominent blur effect for adaptable, full-screen backgrounds in your tvOS app.\n\nvisionOS\n\nIn visionOS, windows generally use an unmodifiable system-defined material called glass that helps people stay grounded by letting light, the current Environment, virtual content, and objects in people’s surroundings show through. Glass is an adaptive material that limits the range of background color information so a window can continue to provide contrast for app content while becoming brighter or darker depending on people’s physical surroundings and other virtual content.\n\nPlay\n\nNote\n\nvisionOS doesn’t have a distinct Dark Mode setting. Instead, glass automatically adapts to the luminance of the objects and colors behind it.\n\nAvoid using opaque colors in a window. Areas of opacity can block people’s view, making them feel constricted and reducing their awareness of the virtual and physical objects around them.\n\nIf necessary, choose materials that help you create visual separations or indicate interactivity in your app. If you need to create a custom component, you may need to specify a system material for it. Use the following examples for guidance.\n\nThe thin material brings attention to interactive elements like buttons and selected items.\n\nThe regular material can help you visually separate sections of your app, like a sidebar or a grouped table view.\n\nThe thick material can give a component like a text field a recessed appearance that shows it’s an area that can accept text entry.\n\nTo ensure foreground content remains legible when it displays on top of a material, visionOS applies vibrancy to text, symbols, and fills. Vibrancy enhances the sense of depth by pulling light and color forward from both virtual and physical surroundings.\n\nvisionOS defines three vibrancy values that help you communicate a hierarchy of text, symbols, and fills.\n\nUse UIVibrancyEffectStyle.label for standard text.\n\nUse UIVibrancyEffectStyle.secondaryLabel for descriptive text like footnotes and subtitles.\n\nUse UIVibrancyEffectStyle.tertiaryLabel for inactive elements, and only when text doesn’t need high legibility.\n\nwatchOS\n\nUse materials to provide context in a full-screen modal view. Because full-screen modal views are common in watchOS, the contrast provided by material layers can help orient people in your app and distinguish controls and system elements from other content. Avoid removing or replacing material backgrounds for modal sheets when they’re provided by default.\n\nResources\nRelated\n\nColor\n\nAccessibility\n\nDeveloper documentation\n\nMaterial — SwiftUI\n\nUIVisualEffectView — UIKit\n\nNSVisualEffectView — AppKit\n\nVideos\nWhat's New in iOS Design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nUpdated descriptions of the various material types, and clarified terms related to vibrancy and material thickness.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nJune 5, 2023\n\n\t\n\nAdded guidance on using materials to provide context and orientation in watchOS apps."
  },
  {
    "title": "Inclusion",
    "url": "https://developer.apple.com/design/human-interface-guidelines/inclusion",
    "html": "Inclusion\nAn inclusive app puts people first by prioritizing respectful communication and presenting content and functionality in ways that everyone can access and understand.\n\nTo help you design an inclusive app, consider the following goals as you review the words and images you use and the experiences you offer.\n\nAs with all design, designing an inclusive app is an iterative process that takes time to get right. Throughout the process, be prepared to examine your assumptions about how other people think and feel and be open to evolving knowledge and understanding.\n\nInclusive by design\n\nSimple, intuitive experiences are at the core of well-designed apps. To design an intuitive experience, you start by investigating people’s goals and perspectives so you can present content that resonates with them.\n\nEmpathy is an important tool in this investigation because it helps you understand how people with different perspectives might respond to the content and experiences you create. For example, you might discover that from some perspectives a word or image in your app is incomprehensible or has a meaning you don’t intend.\n\nAlthough each person’s perspective comprises a unique intersection of human qualities that’s both distinct and dynamic, all perspectives arise from human characteristics and experiences that everyone shares, including:\n\nAge\n\nGender and gender identity\n\nRace and ethnicity\n\nSexuality\n\nPhysical attributes\n\nCognitive attributes\n\nPermanent, temporary, and situational disabilities\n\nLanguage and culture\n\nReligion\n\nEducation\n\nPolitical or philosophical opinions\n\nSocial and economic context\n\nAs you examine your app through different perspectives, avoid framing the work as merely a search for content that might give offense. Although no app should contain offensive material or experiences, an inoffensive app isn’t necessarily an inclusive app. Focusing on inclusion can help you avoid potentially offensive content while also helping you create a welcoming experience that everyone can enjoy.\n\nWelcoming language\n\nUsing plain, inclusive language welcomes everyone and helps them understand your app. Carefully review the writing in your app to make sure that your tone and words don’t exclude people. Here are a few tips for writing text — also known as copy — that’s direct, easy to understand, and inclusive.\n\nConsider the tone of your copy from different perspectives. The style of your writing communicates almost as much as the words you use. Although different apps use different communication styles, make sure the tone you use doesn’t send messages you don’t intend. For example, an academic tone can make an app seem like it welcomes only high levels of education. As you seek the style that’s right for your app, be clear, direct, and respectful.\n\nPay attention to how you refer to people. It typically works well to use you and your to address people directly. Referring to people indirectly as users or the user can make your app feel distant and unwelcoming. Also, consider reserving words like we and our to represent your app or company; otherwise, these terms can suggest a personal relationship with people that might be interpreted as insulting or condescending.\n\nAvoid using specialized or technical terms without defining them. Using specialized or technical terms can make your writing more succinct, but doing so excludes people who don’t know what the terms mean. If you must use such terms, be sure to define them first and make the definitions easy for people to look up. Even when people know the definition of a specialized or technical term in a sentence, the sentence is easier to read — and translate — when it uses plain language instead.\n\nReplace colloquial expressions with plain language. Colloquial expressions are often culture-specific and can be difficult to translate. Worse, some colloquial phrases have exclusionary meanings you might not know. For example, the phrases peanut gallery and grandfathered in both arose from oppressive contexts and continue to exclude people. Even when a colloquial phrase doesn’t have an exclusionary meaning, it can still exclude everyone who doesn’t understand it.\n\nConsider carefully before including humor. Humor is highly subjective and — similar to colloquial expressions — difficult to translate from one culture to another. Including humor in your app risks confusing people who donʼt understand it, irritating people who tire of repeatedly encountering it, and insulting people who interpret it differently. For additional writing guidance, see Writing inclusively.\n\nBeing approachable\n\nAn approachable app doesn’t require people to have particular skills or knowledge before they can use it, and it gives people a clear path toward deepening their understanding over time.\n\nWhether your app provides a range of powerful functions or performs one simple task, here are two ways to make it approachable.\n\nPresent a clear, straightforward interface. To help you design a simple interface that fits in with other apps on each platform, see Designing for visionOS, Designing for iOS, Designing for iPadOS, Designing for macOS, Designing for watchOS, and Designing for tvOS.\n\nBuild in ways to learn how to use your app. Consider designing a first-launch experience that helps people who are new to your app take a step-by-step approach while letting others skip straight to the content they want. For guidance, see Onboarding.\n\nGender identity\n\nThroughout history, cultures around the world have recognized a spectrum of self-identity and expression that expands beyond the binary variants of woman and man.\n\nYou can help everyone feel welcome in your app by avoiding unnecessary references to specific genders. For example, a recipe-sharing app that uses copy like “You can let a subscriber post his or her recipes to your shared folder” could avoid unnecessary gender references by using an alternative like “Subscribers can post recipes to your shared folder.” In addition to using the gender-neutral noun “subscribers,” the revised copy avoids the unnecessary singular pronouns “his” and “her,” helping the sentence remain inclusive when it’s localized for languages that use gendered pronouns.\n\nAnother example of an unnecessary reference to a specific gender is in an avatar, emoji, or glyph. To welcome everyone, give people the tools they need to create avatars and emoji that represent them accurately. When it’s necessary to depict a generic person or people, use a nongendered human image to reinforce the message that generic person means human, not man or woman. SF Symbols provides many nongendered glyphs you can use, such as the figure and person symbols shown here:\n\nperson.crop.circle\n\nperson.3.fill\n\nfigure.wave\n\nMost apps don’t need to know a person’s gender, but if your app requires this information — such as for health or legal reasons — consider providing inclusive options, such as nonbinary, self-identify, and decline to state. In this situation, you could also let people specify the pronouns they use so you can address them properly when necessary.\n\nPeople and settings\n\nPortraying human diversity is one of the most noticeable ways your app can welcome everyone. When people recognize others like themselves within an app and its related materials, they’re less likely to feel excluded and can be more likely to think they’ll benefit from the app.\n\nAs you create copy and images that represent people, portray a range of human characteristics and activities. For example, a fitness app could feature exercise moves demonstrated by people with different racial backgrounds, body types, ages, and physical capabilities. If you need to depict common occupations, avoid stereotypical representations, such as showing only male doctors or female nurses.\n\nAlso review the settings and objects you show. For example, showing high levels of affluence might make sense in some scenarios, but in other cases it can be unwelcoming and make an app seem out of touch. When it makes sense in your app, prefer showing places, homes, activities, and items that are familiar and relatable to most people.\n\nAvoiding stereotypes\n\nEveryone holds biases and stereotypes — often unconsciously — and it can be challenging to discover how they affect your thoughts. A goal of inclusive design is to become aware of your biases and generalizations so you can recognize where they might influence your design decisions.\n\nFor example, consider an app that helps people manage account access for various family members. If this app uses a stereotypical definition of family — such as a woman, a man, and their biological children — it’s likely to communicate this perspective in its copy and images. Because the app assumes that people’s families fit this narrow definition, it excludes everyone whose family is different.\n\nAlthough the assumption made in the account-access app might seem like an obvious mistake, it’s important to realize that not all assumptions are so easy to spot. For example, consider an app that requires people to choose security questions they can answer for future identity confirmation, such as:\n\nWhat was your favorite subject in college?\n\nWhat was the make of your first car?\n\nHow did you feel when you first saw a rainbow?\n\nFrom some perspectives these questions refer to commonplace events, but all are based on experiences that not everyone has. Using a context-specific experience to communicate something is useless for everyone who doesn’t share that context and effectively excludes them. To create alternatives to the culture- and capability-specific questions above, you might reference more universal human experiences like:\n\nWhat’s your favorite hobby?\n\nWhat was the name of your first friend?\n\nWhat quality describes you best?\n\nBasing design decisions on stereotypes or assumptions inevitably leads to exclusion because generalizations can’t reflect the diversity of human perspectives. Avoiding assumptions and instead concentrating on inclusion can help you craft experiences that benefit everyone.\n\nAccessibility\n\nAn inclusive app is accessible to everyone. People rely on Apple’s accessibility features — such as VoiceOver, Display Accommodations, closed captioning, Switch Control, and Speak Screen — to customize their devices for their individual needs, so it’s essential to support these features in your app.\n\nIt’s also essential to avoid assuming that any disability might prevent someone from wanting to use your app. Making an assumption like this can result in designs that limit an app’s potential audience. In contrast, when you make each app experience accessible, you give everyone the opportunity to benefit from your app in ways that work for them.\n\nTo help you design an app that everyone can enjoy, remember that:\n\nEach disability is a spectrum. For example, visual disabilities range from low vision to complete blindness, and include things like color blindness, blurry vision, light sensitivity, and peripheral vision loss.\n\nEveryone can experience disabilities. In addition to disabilities that most people experience as they age, there are temporary disabilities — like short-term hearing loss due to an infection — and situational disabilities — like being unable to hear while on a noisy train — that can affect everyone at various times.\n\nAs you design content that welcomes people of all abilities, consider the following tips.\n\nAvoid images and language that exclude people with disabilities. For example, include people with disabilities when you represent a variety of people, and avoid language that uses a disability to express a negative quality.\n\nTake a people-first approach when writing about people with disabilities. For example, you could describe an individual’s accomplishments and goals before mentioning a disability they may have. If you’re writing about a specific person or community, find out how they self-identify; for more guidance, see Writing about disability.\n\nPrioritize simplicity and perceivability. Prefer familiar, consistent interactions that make tasks simple to perform, and ensure that everyone can perceive your content, whether they use sight, hearing, or touch.\n\nTo learn more about making your app accessible, see Accessibility.\n\nLanguages\n\nPeople expect to customize their device by choosing a language for text and a region for formatting values like date, time, and money. To welcome a global audience, first prepare your app to handle languages and regions other than your own — a process called internationalization — and provide translated text and resources for specific locales. For an overview of internationalization, see Expanding your app to new markets; for developer guidance on localization, see Localization.\n\nCreating an inclusive experience can also help you prepare for localization. For example, using plain language, avoiding unnecessary gender references, representing a variety of people, and avoiding stereotypes and culture-specific content, can put you in a good position to create versions of your app localized into more languages. Using SF Symbols for the glyphs in your app can also help streamline localization. In addition to providing many language-specific glyphs, SF Symbols includes glyphs you can use in both left-to-right and right-to-left contexts; for guidance, see Right to left.\n\nAs you localize your app and related content, also be aware of the ways you use color. Colors often have strong culture-specific meanings, so it’s essential to discover how people respond to specific colors in each locale you support. In some places, for example, white is associated with death or grief, whereas in other places, it’s associated with purity or peace. If you use color as a way to communicate, make sure your color choices communicate the same thing in each version of your app.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nWriting inclusively\n\nAccessibility\n\nDeveloper documentation\n\nLocalization — Xcode\n\nVideos\nThe practice of inclusive design\nThe process of inclusive design"
  },
  {
    "title": "Images",
    "url": "https://developer.apple.com/design/human-interface-guidelines/images",
    "html": "Images\nTo make sure your artwork looks great on all devices you support, learn how the system displays content and how to deliver art at the appropriate scale factors.\n\nResolution\n\nDifferent devices can display images at different resolutions. For example, a 2D device displays images according to the resolution of its screen.\n\nA point is an abstract unit of measurement that helps visual content remain consistent regardless of how it’s displayed. In 2D platforms, a point maps to a number of pixels that can vary according to the resolution of the display; in visionOS, a point is an angular value that allows visual content to scale according to its distance from the viewer.\n\nTo identify the resolution of an image you create, you specify a scale factor. You can visualize scale factor by considering the density of pixels per point in 2D displays of various resolutions. For example, a scale factor of 1 (also called @1x) describes a 1:1 pixel density, where one pixel is equal to one point. High-resolution 2D displays have higher pixel densities, such as 2:1 or 3:1. A 2:1 density (called @2x) has a scale factor of 2, and a 3:1 density (called @3x) has a scale factor of 3. Because of higher pixel densities, high-resolution displays demand images with more pixels.\n\n1x (10x10 px)\n\n2x (20x20 px)\n\n3x (30x30 px)\n\nFormats\n\nAs you create different types of images, consider the following recommendations.\n\nImage type\n\n\t\n\nFormat\n\n\n\n\nBitmap or raster work\n\n\t\n\nDe-interlaced PNG files\n\n\n\n\nPNG graphics that don’t require full 24-bit color\n\n\t\n\nAn 8-bit color palette\n\n\n\n\nPhotos\n\n\t\n\nJPEG files, optimized as necessary, or HEIC files\n\n\n\n\nFlat icons, interface icons, and other flat artwork that requires high-resolution scaling\n\n\t\n\nPDF or SVG files\n\nBest practices\n\nSupply high-resolution images for all artwork in your app, for every device you support. As you add each image to your project’s asset catalog, identify its scale factor by appending “@1x,” “@2x,” or “@3x” to its filename. Use the following values for guidance; for additional scale factors, see Layout.\n\nPlatform\n\n\t\n\nScale factors\n\n\n\n\niPadOS, watchOS\n\n\t\n\n@2x\n\n\n\n\niOS\n\n\t\n\n@2x and @3x\n\n\n\n\nvisionOS\n\n\t\n\n@2x or higher (for details, see visionOS)\n\n\n\n\nmacOS, tvOS\n\n\t\n\n@1x and @2x\n\nIn general, design images at the lowest resolution and scale them up to create high-resolution assets. When you use resizable vectorized shapes, you might want to position control points at whole values so that they’re cleanly aligned at 1x. This positioning allows the points to remain cleanly aligned to the raster grid at higher resolutions, because 2x and 3x are multiples of 1x. In contrast, there are times when you don’t want to keep a shape perfectly aligned to the raster grid; for example, aligning a circle to the grid can make it appear flattened at the top and bottom.\n\nInclude a color profile with each image. Color profiles help ensure that your app’s colors appear as intended on different displays. For guidance, see Color management.\n\nAlways test images on a range of actual devices. An image that looks great at design time may appear pixelated, stretched, or compressed when viewed on various devices.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, or macOS.\n\ntvOS\n\nLayered images are at the heart of the Apple TV user experience. The system combines layered images, transparency, scaling, and motion to produce a sense of realism and vigor that evokes a personal connection as people interact with onscreen content.\n\nParallax effect\n\nParallax is a subtle visual effect the system uses to convey depth and dynamism when an element is in focus. As an element comes into focus, the system elevates it to the foreground, gently swaying it while applying illumination that makes the element’s surface appear to shine. After a period of inactivity, out-of-focus content dims and the focused element expands.\n\nLayered images are required to support the parallax effect.\n\nLayered images\n\nA layered image consists of two to five distinct layers that come together to form a single image. The separation between layers, along with use of transparency, creates a feeling of depth. As someone interacts with an image, layers closer to the surface elevate and scale, overlapping lower layers farther back and producing a 3D effect.\n\nImportant\n\nYour tvOS app icon must use a layered image. For other focusable images in your app, including Top Shelf images, layered images are strongly encouraged, but optional.\n\nUse standard interface elements to display layered images. If you use standard views and system-provided focus APIs — such as FocusState — layered images automatically get the parallax treatment when people bring them into focus.\n\nIdentify logical foreground, middle, and background elements. In foreground layers, display prominent elements like a character in a game, or text on an album cover or movie poster. Middle layers are perfect for secondary content and effects like shadows. Background layers are opaque backdrops that showcase the foreground and middle layers without upstaging them.\n\nGenerally, keep text in the foreground. Unless you want to obscure text, bring it to the foreground layer for clarity.\n\nKeep the background layer opaque. Using varying levels of opacity to let content shine through higher layers is fine, but your background layer must be opaque — you’ll get an error if it’s not. An opaque background layer ensures your artwork looks great with parallax, drop shadows, and system backgrounds.\n\nKeep layering simple and subtle. Parallax is designed to be almost unnoticeable. Excessive 3D effects can appear unrealistic and jarring. Keep depth simple to bring your content to life and add delight.\n\nLeave a safe zone around your content. During focus and parallax, content around the edges of some layers may be cropped or difficult to see clearly as the image scales and moves. To ensure that your primary content is always visible, don’t put it too close to the edges. Be aware that the safe zone can vary, depending on the image size, layer depth, and motion, and that foreground layers are cropped more than background layers.\n\nAlways preview layered images. To ensure your layered images look great on Apple TV, preview them throughout your design process using Xcode, the Parallax Previewer app for macOS, or the Parallax Exporter plug-in for Adobe Photoshop. Pay special attention as scaling and clipping occur, and readjust your images as needed to keep important content safe. After your layered images are final, preview them on an actual TV for the most accurate representation of what people will see. To download Parallax Previewer and Parallax Exporter, see Resources.\n\nUse both the unfocused and focused states to determine the appropriate size for a layered image. During the parallax effect, the system may crop background layers slightly, so keep essential content within a safe zone and include some additional space to make sure your content looks good.\n\nThe following formulas can help you calculate sizing for a layered image based on the size of the image when it’s not in focus.\n\nImage side\n\n\t\n\nFocused/Safe zone size\n\n\t\n\nActual size\n\n\n\n\nLongest\n\n\t\n\nLength of longest unfocused side + 70 pt\n\n\t\n\nLength of longest focused side x 106%\n\n\n\n\nShortest\n\n\t\n\nProportional based on longest side\n\n\t\n\nProportional based on longest side\n\nYou can embed layered images in your app or retrieve them from a content server at runtime. To create layered images for inclusion within your app, use one of the following tools:\n\nParallax Previewer app for macOS. Parallax Previewer can import PNG files to serve as individual layers, layered images (.lsr) created with the Parallax Exporter plug-in, and layered Photoshop images (.psd). Parallax Previewer can export LSR files that you can import directly into an Xcode project.\n\nParallax Exporter Adobe Photoshop plug-in. Use this plug-in to test your layered images in Photoshop and export them as LSR files that you can import directly into an Xcode project.\n\nXcode. Drag standard PNG files into your app’s asset catalog to serve as individual layers of an image stack in Xcode. Image stacks can be exported as LSR files. Xcode can also import LSR files.\n\nIf your app retrieves layered images from a content server at runtime, you must provide those images in runtime layered image (.lcr) format. You don’t create runtime layered images directly; you generate them from LSR files or Photoshop files using the layerutil command-line tool that Xcode provides. Runtime layered images are intended to be downloaded — don’t embed them within your app.\n\nvisionOS\n\nIn visionOS, the area an image occupies typically varies when the system dynamically scales it according to the distance and angle at which people view it. This means that an image doesn’t line up 1:1 with screen pixels as it can in other platforms.\n\nCreate a multilayered image for your visionOS app icon. For guidance, see App icons.\n\nPrefer vector-based art. Avoid bitmap content because it might not look good when the system scales it up. If you use Core Animation layers, see Drawing sharp layer-based content in visionOS for developer guidance.\n\nIf you need to use rasterized images, balance quality with performance as you choose a resolution. Although a @2x image looks fine at common viewing distances, its fixed resolution means that the system doesn’t dynamically scale it and it might not look sharp from close up. To help a rasterized image look sharp when people view it from a wide range of distances, you can use a higher resolution, but each increase in resolution results in a larger file size and may impact your app’s runtime performance, especially for resolutions over @6x. If you use images that have resolutions higher than @2x, be sure to also apply high-quality image filtering to help balance quality and performance (for developer guidance, see filters).\n\nwatchOS\n\nIn general, avoid transparency to keep image files small. If you always composite an image on the same solid background color, it’s more efficient to include the background in the image. However, transparency is necessary in complication images, menu icons, and other interface icons that serve as template images, because the system uses it to determine where to apply color.\n\nUse autoscaling PDFs to let you provide a single asset for all screen sizes. Design your image for the 40mm and 42mm screens at 2x. When you load the PDF, WatchKit automatically scales the image based on the device’s screen size, using the values shown below:\n\nScreen size\n\n\t\n\nImage scale\n\n\n\n\n38mm\n\n\t\n\n90%\n\n\n\n\n40mm\n\n\t\n\n100%\n\n\n\n\n41mm\n\n\t\n\n106%\n\n\n\n\n42mm\n\n\t\n\n100%\n\n\n\n\n44mm\n\n\t\n\n110%\n\n\n\n\n45mm\n\n\t\n\n119%\n\n\n\n\n49mm\n\n\t\n\n119%\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nDrawing sharp layer-based content in visionOS — visionOS\n\nImages — SwiftUI\n\nUIImageView — UIKit\n\nNSImageView — AppKit\n\nVideos\nGet Started with Display P3\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nClarified guidance on choosing a resolution for a rasterized image in a visionOS app.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded specifications for Apple Watch Ultra."
  },
  {
    "title": "Icons",
    "url": "https://developer.apple.com/design/human-interface-guidelines/icons",
    "html": "Icons\nAn effective icon is a graphic asset that expresses a single concept in ways people instantly understand.\n\nApps and games use a variety of simple icons to help people understand the items, actions, and modes they can choose. Unlike app icons, which can use rich visual details like shading, texturing, and highlighting to evoke the app’s personality, an interface icon typically uses streamlined shapes and touches of color to communicate a straightforward idea.\n\nYou can design interface icons — also called glyphs or template images — or you can choose symbols from the SF Symbols app, using them as-is or customizing them to suit your needs. Both interface icons and symbols use black and clear colors to define their shapes; the system can apply other colors to the black areas in each image. For guidance, see SF Symbols.\n\nBest practices\n\nCreate a recognizable, highly simplified design. Too many details can make an interface icon confusing or unreadable. Strive for a simple, universal design that most people will recognize quickly. In general, icons work best when they use familiar visual metaphors that are directly related to the actions they initiate or content they represent.\n\nMaintain visual consistency across all interface icons in your app. Whether you use only custom icons or mix custom and system-provided ones, all interface icons in your app need to use a consistent size, level of detail, stroke thickness (or weight), and perspective. Depending on the visual weight of an icon, you may need to adjust its dimensions to ensure that it appears visually consistent with other icons.\n\nTo help achieve visual consistency, adjust individual icon sizes as necessary…\n\n…and use the same stroke weight in every icon.\n\nIn general, match the weights of interface icons and adjacent text. Unless you want to emphasize either the icons or the text, using the same weight for both gives your content a consistent appearance and level of emphasis.\n\nIf necessary, add padding to a custom interface icon to achieve optical alignment. Some icons — especially asymmetric ones — can look unbalanced when you center them geometrically instead of optically. For example, the download icon shown below has more visual weight on the bottom than on the top, which can make it look too low if it’s geometrically centered.\n\nAn asymmetric icon can look off center even though it’s not.\n\nIn such cases, you can slightly adjust the position of the icon until it’s optically centered. When you create an asset that includes your adjustments as padding around an interface icon (as shown below on the right), you can optically center the icon by geometrically centering the asset.\n\nMoving the icon a few pixels higher optically centers it; including the pixels in padding simplifies centering.\n\nAdjustments for optical centering are typically very small, but they can have a big impact on your app’s appearance.\n\nBefore optical centering (left) and after optical centering (right).\n\nProvide a selected-state version of an interface icon only if necessary. You don’t need to provide selected and unselected appearances for an icon that’s used in controls and areas that automatically indicate selection. For example, sidebars and tab bars in visionOS and iOS, and macOS toolbars, can convey selection state by applying your app’s accent color or adding a background appearance.\n\nIn iOS, a selected tab bar icon receives the app’s accent color.\n\nIn macOS, a selected toolbar icon receives a darker stroke and a background appearance.\n\nAlthough you might want to provide selected and unselected icons for use in a toolbar or navigation bar in iOS or visionOS, it’s more common to use a button that changes its background appearance according to its state.\n\nCreate inclusive designs. Prefer depicting human figures without unnecessary references to specific genders, and be sure that your icons are welcoming and understandable to everyone. For guidance, see Inclusion.\n\nInclude text in your design only when it’s essential for conveying meaning. For example, using a character in an interface icon that represents text formatting can be the most direct way to communicate the concept. If you need to display individual characters in your icon, be sure to localize them. If you need to suggest a passage of text, design an abstract representation of it, and include a flipped version of the icon to use when the context is right-to-left. For guidance, see Right to left.\n\nCreate localized versions of an icon that displays individual characters.\n\nCreate a flipped version of an icon that suggests reading direction.\n\nIf you create a custom interface icon, use a vector format like PDF or SVG. The system automatically scales a vector-based interface icon for high-resolution displays, so you don’t need to provide high-resolution versions of it. In contrast, PNG — used for app icons and other images that include effects like shading, textures, and highlighting — doesn’t support scaling, so you have to supply multiple versions for each PNG-based interface icon. Alternatively, you can create a custom SF Symbol and specify a scale that ensures the symbol’s emphasis matches adjacent text. For guidance, see SF Symbols.\n\nProvide alternative text labels for custom interface icons. Alternative text labels — or accessibility descriptions — aren’t visible, but they let VoiceOver audibly describe what’s onscreen, simplifying navigation for people with visual disabilities. For guidance, see Content descriptions.\n\nAvoid using replicas of Apple hardware products. Hardware designs tend to change frequently and can make your interface icons and other content appear dated. If you must display Apple hardware, use only the images available in Apple Design Resources or the SF Symbols that represent various Apple products.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, tvOS, visionOS, or watchOS.\n\nmacOS\nDocument icons\n\nIf your macOS app can use a custom document type, you can create a document icon to represent it. Traditionally, a document icon looks like a piece of paper with its top-right corner folded down. This distinctive appearance helps people distinguish documents from apps and other content, even when icon sizes are small.\n\nIf you don’t supply a document icon for a file type you support, macOS creates one for you by compositing your app icon and the file’s extension onto the canvas. For example, Preview uses a system-generated document icon to represent JPG files.\n\nIn some cases, it can make sense to create a set of document icons to represent a range of file types your app handles. For example, Xcode uses custom document icons to help people distinguish projects, AR objects, and Swift code files.\n\nTo create a custom document icon, you can supply any combination of background fill, center image, and text. Beginning in macOS 11, the system layers, positions, and masks these elements as needed and composites them onto the familiar folded-corner icon shape.\n\nBackground fill\n\nCenter image\n\nText\n\nmacOS 11 composites the elements you supply to produce your custom document icon.\n\nApple Design Resources provides a template you can use to create a custom background fill and center image for a document icon. As you use this template, follow the guidelines below.\n\nDesign simple images that clearly communicate the document type. Whether you use a background fill, a center image, or both, prefer uncomplicated shapes and a reduced palette of distinct colors. Your document icon can display as small as 16x16 px, so you want to create designs that remain recognizable at every size.\n\nDesigning a single, expressive image for the background fill can be a great way to help people understand and recognize a document type. For example, Xcode and TextEdit both use rich background images that don’t include a center image.\n\nConsider reducing complexity in the small versions of your document icon. Icon details that are clear in large versions can look blurry and be hard to recognize in small versions. For example, to ensure that the grid lines in the custom heart document icon remain clear in intermediate sizes, you might use fewer lines and thicken them by aligning them to the reduced pixel grid. In the 16x16 px size, you might remove the lines altogether.\n\nThe 32x32 px icon has fewer grid lines and a thicker EKG line.\n\nThe 16x16 px @2x icon retains the EKG line but has no grid lines.\n\nThe 16x16 px @1x icon has no EKG line and no grid lines.\n\nAvoid placing important content in the top-right corner of your background fill. The system automatically masks your image to fit the document icon shape and draws the white folded corner on top of the fill. Create a set of background images in the sizes listed below.\n\n512x512 px @1x, 1024x1024 px @2x\n\n256x256 px @1x, 512x512 px @2x\n\n128x128 px @1x, 256x256 px @2x\n\n32x32 px @1x, 64x64 px @2x\n\n16x16 px @1x, 32x32 px @2x\n\nIf a familiar object can convey a document’s type or its connection with your app, consider creating a center image that depicts it. Design a simple, unambiguous image that’s clear and recognizable at every size. The center image measures half the size of the overall document icon canvas. For example, to create a center image for a 32x32 px document icon, use an image canvas that measures 16x16 px. You can provide center images in the following sizes:\n\n256x256 px @1x, 512x512 px @2x\n\n128x128 px @1x, 256x256 px @2x\n\n32x32 px @1x, 64x64 px @2x\n\n16x16 px @1x, 32x32 px @2x\n\nDefine a margin that measures about 10% of the image canvas and keep most of the image within it. Although parts of the image can extend into this margin for optical alignment, it’s best when the image occupies about 80% of the image canvas. For example, most of the center image in a 256x256 px canvas would fit in an area that measures 205x205 px.\n\nSpecify a succinct term if it helps people understand your document type. By default, the system displays a document’s extension at the bottom edge of the document icon, but if the extension is unfamiliar you can supply a more descriptive term. For example, the document icon for a SceneKit scene file uses the term scene instead of the file extension scn. The system automatically scales the extension text to fit in the document icon, so be sure to use a term that’s short enough to be legible at small sizes. By default, the system capitalizes every letter in the text.\n\nResources\nRelated\n\nApp icons\n\nSF Symbols\n\nVideos\nDesigning Glyphs\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Technologies",
    "url": "https://developer.apple.com/design/human-interface-guidelines/technologies",
    "html": "Technologies\nDiscover the Apple technologies, features, and services you can integrate into your app or game.\nAirPlay\nAlways On\nApp Clips\nApple Pay\nAugmented reality\nCareKit\nCarPlay\nGame Center\nHealthKit\nHomeKit\niCloud\nID Verifier\niMessage apps and stickers\nIn-app purchase\nLive Photos\nMac Catalyst\nMachine learning\nMaps\nMessages for Business\nNFC\nPhoto editing\nResearchKit\nSharePlay\nShazamKit\nSign in with Apple\nSiri\nTap to Pay on iPhone\nWallet"
  },
  {
    "title": "Designing for macOS",
    "url": "https://developer.apple.com/design/human-interface-guidelines/designing-for-macos",
    "html": "Designing for macOS\nPeople rely on the power, spaciousness, and flexibility of a Mac as they perform in-depth productivity tasks, view media or content, and play games, often using several apps at once.\n\nAs you begin designing your app or game for macOS, start by understanding the fundamental device characteristics and patterns that distinguish the macOS experience. Using these characteristics and patterns to inform your design decisions can help you provide an app or game that Mac users appreciate.\n\nDisplay. A Mac typically has a large, high-resolution display, and people can extend their workspace by connecting additional displays, including their iPad.\n\nErgonomics. People generally use a Mac while they’re stationary, often placing the device on a desk or table. In the typical use case, the viewing distance can range from about 1 to 3 feet.\n\nInputs. People expect to enter data and control the interface using any combination of input modes, such as physical Keyboards, Pointing devices, Game controllers, and Siri.\n\nApp interactions. Interactions can last anywhere from a few minutes of performing some quick tasks to several hours of deep concentration. People frequently have multiple apps open at the same time, and they expect smooth transitions between active and inactive states as they switch from one app to another.\n\nSystem features. macOS provides several features that help people interact with the system and their apps in familiar, consistent ways.\n\nThe menu bar\n\nFile management\n\nGoing full screen\n\nDock menus\n\nBest practices\n\nGreat Mac experiences integrate the platform and device capabilities that people value most. To help your design feel at home in macOS, prioritize the following ways to incorporate these features and capabilities.\n\nLeverage large displays to present more content in fewer nested levels and with less need for modality, while maintaining a comfortable information density that doesn’t make people strain to view the content they want.\n\nLet people resize, hide, show, and move your windows to fit their work style and device configuration, and support full-screen mode to offer a distraction-free context.\n\nUse the menu bar to give people easy access to all the commands they need to do things in your app.\n\nHelp people take advantage of high-precision input modes to perform pixel-perfect selections and edits.\n\nHandle keyboard shortcuts to help people accelerate actions and use keyboard-only work styles.\n\nSupport personalization, letting people customize toolbars, configure windows to display the views they use most, and choose the colors and fonts they want to see in the interface.\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nPlanning your macOS app\n\nVideos\nWhat's new in AppKit\nAdopt the new look of macOS"
  },
  {
    "title": "Designing for iPadOS",
    "url": "https://developer.apple.com/design/human-interface-guidelines/designing-for-ipados",
    "html": "Designing for iPadOS\nPeople value the power, mobility, and flexibility of iPad as they enjoy media, play games, perform detailed productivity tasks, and bring their creations to life.\n\nAs you begin designing your app or game for iPad, start by understanding the following fundamental device characteristics and patterns that distinguish the iPadOS experience. Using these characteristics and patterns to inform your design decisions can help you provide an app or game that iPad users appreciate.\n\nDisplay. iPad has a large, high-resolution display.\n\nErgonomics. People often hold their iPad while using it, but they might also set it on a surface or place it on a stand. Positioning the device in different ways can change the viewing distance, although people are typically within about 3 feet of the device as they interact with it.\n\nInputs. People can interact with iPad using Multi-Touch gestures and onscreen keyboards, an attached keyboard or pointing device, Apple Pencil, or voice, and they often combine multiple input modes.\n\nApp interactions. Sometimes, people perform a few quick actions on their iPad. At other times, they spend hours immersed in games, media, content creation, or productivity tasks. People frequently have multiple apps open at the same time, and they appreciate viewing more than one app onscreen at once and taking advantage of inter-app capabilities like drag and drop.\n\nSystem features. iPadOS provides several features that help people interact with the system and their apps in familiar, consistent ways.\n\nMultitasking\n\nWidgets\n\nDrag and drop\n\nBest practices\n\nGreat iPad experiences integrate the platform and device capabilities that people value most. To help your experience feel at home in iPadOS, prioritize the following ways to incorporate these features and capabilities.\n\nTake advantage of the large display to elevate the content people care about, minimizing modal interfaces and full-screen transitions, and positioning onscreen controls where they’re easy to reach, but not in the way.\n\nUse viewing distance and input mode to help you determine the size and density of the onscreen content you display.\n\nLet people use Multi-Touch gestures, a physical keyboard or trackpad, or Apple Pencil, and consider supporting unique interactions that combine multiple input modes.\n\nAdapt seamlessly to appearance changes — like device orientation, multitasking modes, Dark Mode, and Dynamic Type — and transition effortlessly to running in macOS, letting people choose the configurations that work best for them.\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nPlanning your iPadOS app\n\nVideos\nWhat’s new in iPad app design\nDesigned for iPad"
  },
  {
    "title": "Designing for iOS",
    "url": "https://developer.apple.com/design/human-interface-guidelines/designing-for-ios",
    "html": "Designing for iOS\nPeople depend on their iPhone to help them stay connected, play games, view media, accomplish tasks, and track personal data in any location and while on the go.\n\nAs you begin designing your app or game for iOS, start by understanding the following fundamental device characteristics and patterns that distinguish the iOS experience. Using these characteristics and patterns to inform your design decisions can help you provide an app or game that iPhone users appreciate.\n\nDisplay. iPhone has a medium-size, high-resolution display.\n\nErgonomics. People generally hold their iPhone in one or both hands as they interact with it, switching between landscape and portrait orientations as needed. While people are interacting with the device, their viewing distance tends to be no more than a foot or two.\n\nInputs. Multi-Touch gestures, onscreen keyboards, and voice control let people perform actions and accomplish meaningful tasks while they’re on the go. In addition, people often want apps to use their personal data and input from the device’s gyroscope and accelerometer, and they may also want to participate in spatial interactions.\n\nApp interactions. Sometimes, people spend just a minute or two checking on event or social media updates, tracking data, or sending messages. At other times, people can spend an hour or more browsing the web, playing games, or enjoying media. People typically have multiple apps open at the same time, and they appreciate switching frequently among them.\n\nSystem features. iOS provides several features that help people interact with the system and their apps in familiar, consistent ways.\n\nWidgets\n\nHome Screen quick actions\n\nSpotlight\n\nShortcuts\n\nActivity views\n\nBest practices\n\nGreat iPhone experiences integrate the platform and device capabilities that people value most. To help your design feel at home in iOS, prioritize the following ways to incorporate these features and capabilities.\n\nHelp people concentrate on primary tasks and content by limiting the number of onscreen controls while making secondary details and actions discoverable with minimal interaction.\n\nAdapt seamlessly to appearance changes — like device orientation, Dark Mode, and Dynamic Type — letting people choose the configurations that work best for them.\n\nSupport interactions that accommodate the way people usually hold their device. For example, it tends to be easier and more comfortable for people to reach a control when it’s located in the middle or bottom area of the display, so it’s especially important let people swipe to navigate back or initiate actions in a list row.\n\nWith people’s permission, integrate information available through platform capabilities in ways that enhance the experience without asking people to enter data. For example, you might accept payments, provide security through biometric authentication, or offer features that use the device’s location.\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nPlanning your iOS app\n\nVideos\nWhat's new in UIKit\nWhat's New in iOS Design"
  },
  {
    "title": "Nearby interactions",
    "url": "https://developer.apple.com/design/human-interface-guidelines/nearby-interactions",
    "html": "Nearby interactions\nNearby interactions support on-device experiences that integrate the presence of people and objects in the nearby environment.\n\nA great nearby interaction feels intuitive and natural to people, because it builds on their innate awareness of the world around them. For example, a person playing music on their iPhone can continue listening on their HomePod mini when they bring the devices close together, simply by transferring the audio output from their iPhone to the HomePod mini.\n\nNearby interactions are available on devices that support Ultra Wideband technology (to learn more, see Ultra Wideband availability), and rely on the Nearby Interaction framework. Before participating in nearby interaction experiences, people grant permission for their device to interact while they’re using your app. The Nearby Interaction APIs help you preserve people’s privacy by relying on randomly generated device identifiers that last only as long as the interaction session your app initiates.\n\nBest practices\n\nConsider a task from the perspective of the physical world to find inspiration for a nearby interaction. For example, although people can easily use your app’s UI to transfer a song from their iPhone to their HomePod mini, initiating the transfer by bringing the devices close together makes the task feel rooted in the physical world. Discovering the physical actions that inform the concept of a task can help you create an engaging experience that makes performing it feel easy and natural.\n\nUse distance, direction, and context to inform an interaction. Although your app may get information from a variety of sources, prioritizing nearby, contextually relevant information can help you deliver experiences that feel organic. For example, if people want to share content with a friend in a crowded room, the iOS share sheet can suggest a likely recipient by using on-device knowledge about the person’s most frequent and recent contacts. Combining this knowledge with information from nearby devices that include the U1 chip can let the share sheet improve the experience by suggesting the closest contact the person is facing.\n\nConsider how changes in physical distance can guide a nearby interaction. In the physical world, people generally expect their perception of an object to sharpen as they get closer to it. A nearby interaction can mirror this experience by providing feedback that changes with the proximity of an object. For example, when people use iPhone to find an AirTag, the display transitions from a directional arrow to a pulsing circle as they get closer.\n\nProvide continuous feedback. Continuous feedback reflects the dynamism of the physical world and strengthens the connection between a nearby interaction and the task people are performing. For example, when looking for a lost item in Find My, people get continuous updates that communicate the item’s direction and proximity. Keep people engaged by providing uninterrupted feedback that responds to their movements.\n\nConsider using multiple feedback types to create a holistic experience. Fluidly transitioning among visual, audible, and haptic feedback can help a nearby interaction’s task feel more engaging and real. Using more than one type of feedback also lets you vary the experience to coordinate with both the task and the current context. For example, while people are interacting with the device screen, visual feedback makes sense; while people are interacting with their environment, audible and haptic feedback often work better.\n\nAvoid using a nearby interaction as the only way to perform a task. You can’t assume that everyone can experience a nearby interaction, so it’s essential to provide alternative ways to get things done in your app.\n\nDevice usage\n\nEncourage people to hold the device in portrait orientation. Holding a device in landscape can decrease the accuracy and availability of information about the distance and relative direction of other devices. If you support only portrait orientation while your nearby interaction feature runs, prefer giving people implicit, visual feedback on how to hold the device for an optimal experience; when possible, avoid explicitly telling people to hold the device in portrait.\n\nDesign for the device’s directional field of view. Nearby interaction relies on a hardware sensor with a specific field of view similar to that of the Ultra Wide camera in iPhone 11 and later. If a participating device is outside of this field of view, your app might receive information about its distance, but not its relative direction.\n\nHelp people understand how intervening objects can affect the nearby interaction experience in your app. When other people, animals, or sufficiently large objects come between two participating devices, the accuracy or availability of distance and direction information can decrease. Consider adding advice on avoiding this situation to onboarding or tutorial content you present.\n\nPlatform considerations\n\nNo additional considerations for iPadOS. Not supported in macOS, tvOS, or visionOS.\n\niOS\n\nOn iPhone, Nearby Interaction APIs provide a peer device’s distance and direction.\n\nwatchOS\n\nOn Apple Watch, Nearby Interaction APIs provide a peer device’s distance. Also, all watchOS apps participating in a nearby interaction experience must be in the foreground.\n\nResources\nRelated\n\nFeedback\n\nDeveloper documentation\n\nNearby Interaction\n\nVideos\nDesign for spatial interaction\nMeet Nearby Interaction\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nChanged page title from Spatial interactions."
  },
  {
    "title": "Keyboards",
    "url": "https://developer.apple.com/design/human-interface-guidelines/keyboards",
    "html": "Keyboards\nA physical keyboard can be an essential input device for entering text, navigating, performing actions, and more.\n\nPeople might prefer using a physical keyboard when they need to type a lot of text, and some people prefer using one all the time. VoiceOver users often require a physical keyboard. People can connect a keyboard to any device except Apple Watch.\n\nWhen a physical keyboard is available, people often rely on keyboard shortcuts, which offer efficient ways to initiate actions without using a mouse or trackpad to navigate a menu or click a button.\n\nBest practices\n\nSupport keyboard-only interaction where possible. As the name suggests, full keyboard-access mode lets people navigate and activate windows, menus, controls, and system features using only the keyboard. visionOS supports full keyboard-access mode, as does macOS (see Navigate your app using Full Keyboard Access) and iPadOS (see Adjust the onscreen and external keyboard settings on iPad). In iPadOS, you can also enhance the experience of using a connected keyboard with your app by customizing visual effects that help people focus on individual items as they navigate your interface. For guidance, see iPadOS.\n\nKeyboard shortcuts\n\nMost keyboard shortcuts consist of a combination of keys: a single primary key and one or more of the modifier keys (Command, Shift, Control, and Option). A rare exception is the Esc (Escape) key, which people can use as a shortcut to invoke a cancel action in various contexts.\n\nPeople discover keyboard shortcuts in a couple of ways. For example, a macOS app lists its keyboard shortcuts in its menu bar menus (to learn more, see The menu bar).\n\nThe keyboard shortcuts in a visionOS or iPadOS app appear in the shortcut interface that displays when people hold the Command key on a connected keyboard. Similar in organization to an app’s menu bar menus on a Mac, the shortcut interface on Apple Vision Pro and iPad displays app commands in familiar system-defined menu categories such as File, Edit, and View; unlike menu bar menus, it displays all relevant categories in one view, listing within each category only available commands that also have shortcuts.\n\nRespect standard keyboard shortcuts. People expect the standard keyboard shortcuts to work, regardless of the app they’re using. You can also help people learn your app quickly by supporting the standard keyboard shortcuts that make sense in your app.\n\nIn general, don’t repurpose standard keyboard shortcuts for custom actions. People can get confused when the shortcuts they know work differently in your app. Only consider redefining a standard shortcut if its action doesn’t make sense in your app. For example, an app that doesn’t support text editing doesn’t need a text-styling command like Italic, so it might use Command–I for an action that has more relevance in the app, such as Get Info.\n\nDefine custom keyboard shortcuts for only the most common actions in your app. People appreciate using keyboard shortcuts for app-specific actions they perform frequently, but defining too many new shortcuts risks making your app seem difficult to learn and can clutter the shortcut interface in visionOS and iPadOS apps. Minimizing app-specific keyboard shortcuts also helps avoid potential conflicts with system-defined shortcuts that may be in place.\n\nLet people use modifier and other keys to adjust the behavior of some interactions. For example, pressing Command while dragging moves items as a group, and pressing Shift while drag-resizing constrains resizing to the item’s aspect ratio. In addition, holding an arrow key moves the selected item by the smallest app-defined unit of distance until people release the key.\n\nHelp people discover available actions in your visionOS or iPadOS app. Because the shortcut interface displays a flat list of all items in each category, submenu titles aren’t available to provide context for their child items. For example, the item titles Name and Date Added don’t make sense without the context of the submenu title Sort Bookmarks By. You can enhance each item’s title by including the necessary context, such as Sort Bookmarks by Name and Sort Bookmarks by Date Added. For developer guidance, see discoverabilityTitle.\n\nCustom keyboard shortcuts\n\nIt’s important for custom keyboard shortcuts to use modifier keys in ways that people expect.\n\nHere are the modifier keys and the symbols that represent them.\n\nModifier Key\n\n\t\n\nSymbol\n\n\n\n\nControl\n\n\t\n\n\n\n\nOption\n\n\t\n\n\n\n\nShift\n\n\t\n\n\n\n\nCommand\n\n\t\n\nPrefer the Command key as the main modifier key in a custom keyboard shortcut. Most standard keyboard shortcuts use the Command key, so people are familiar with it.\n\nPrefer the Shift key as a secondary modifier when the shortcut complements another shortcut. For example, Command-P displays the Print dialog in most apps. The standard shortcut for the Page Setup dialog, which complements printing, is typically Shift-Command-P.\n\nUse the Option modifier sparingly. For example, you might use Option in the shortcut for a less-common command or a convenience or power feature. For example, the Finder uses Option-Command-W for Close All Windows and Option-Command-M for Minimize All Windows.\n\nAs much as possible, avoid using the Control key as a modifier. The system uses Control in many systemwide features, like moving focus or capturing screenshots.\n\nAvoid creating a new shortcut by adding a modifier to an existing shortcut for an unrelated command. For example, because people are accustomed to using Command-Z for undoing an action, it would be confusing to use Shift-Command-Z as the shortcut for a command that’s unrelated to undo and redo.\n\nList modifier keys in the correct order. If you use more than one modifier key in a custom shortcut, always list them in this order: Control, Option, Shift, Command.\n\nIdentify a two-character key by its lower character unless Shift is part of the shortcut. For example, the keyboard shortcut for Hide Status Bar is Command-Slash (/). If the Shift key is part of the keyboard shortcut, identify the key using the upper of the two characters. For example, the keyboard shortcut for Help is Command-Question Mark (?), not Shift-Command-Slash.\n\nTip\n\nSome languages require modifier keys to generate certain characters. For example, on a French keyboard, Option-5 generates the “{“ character. It’s usually safe to use the Command key as a modifier, but avoid using an additional modifier with characters that aren’t available on all keyboards. If you must use a modifier other than Command, prefer using it only with the alphabetic characters.\n\nLet the system localize and mirror your keyboard shortcuts as needed. For example, iPadOS automatically localizes a shortcut’s primary key and modifier keys to support the currently connected keyboard. Also, if your app switches to a right-to-left layout, the system automatically mirrors the shortcut. For guidance, see Right to left.\n\nPlatform considerations\n\nNo additional considerations for iOS, macOS, or tvOS. Not supported in watchOS.\n\niPadOS\n\nBy default, iPadOS 15 and later supports keyboard navigation in text fields, text views, and sidebars, providing APIs you can use to support it in various types of collection views and other custom views in your app. For guidance, see iPadOS; for developer guidance, see Focus-based navigation.\n\nImportant\n\nAvoid supporting keyboard navigation for controls, such as buttons, segmented controls, and switches. Full keyboard-access already helps people activate controls, navigate to all onscreen components, and even perform gesture-based interactions like drag and drop.\n\nvisionOS\n\nBe prepared for people wanting to use a physical keyboard with your app. People typically prefer using a connected keyboard when they need to perform tasks that require a lot of text entry, such as creating a presentation, and they often appreciate using keyboard shortcuts to navigate and initiate actions throughout the system and their apps. In addition, many people rely on physical keyboards for full keyboard-access mode or VoiceOver interactions.\n\nPlay\nSpecifications\nStandard keyboard shortcuts\n\nPeople expect each of the following standard keyboard shortcuts to perform the action listed in the table below.\n\nPrimary key\n\n\t\n\nKeyboard shortcut\n\n\t\n\nAction\n\n\n\n\nSpace\n\n\t\n\nCommand-Space\n\n\t\n\nShow or hide the Spotlight search field.\n\n\n\n\n\t\n\nShift-Command-Space\n\n\t\n\nVaries.\n\n\n\n\n\t\n\nOption-Command-Space\n\n\t\n\nShow the Spotlight search results window.\n\n\n\n\n\t\n\nControl-Command-Space\n\n\t\n\nShow the Special Characters window.\n\n\n\n\nTab\n\n\t\n\nShift-Tab\n\n\t\n\nNavigate through controls in a reverse direction.\n\n\n\n\n\t\n\nCommand-Tab\n\n\t\n\nMove forward to the next most recently used app in a list of open apps.\n\n\n\n\n\t\n\nShift-Command-Tab\n\n\t\n\nMove backward through a list of open apps (sorted by recent use).\n\n\n\n\n\t\n\nControl-Tab\n\n\t\n\nMove focus to the next group of controls in a dialog or the next table (when Tab moves to the next cell).\n\n\n\n\n\t\n\nControl-Shift-Tab\n\n\t\n\nMove focus to the previous group of controls.\n\n\n\n\nEsc\n\n\t\n\nOption-Command-Esc\n\n\t\n\nOpen the Force Quit dialog.\n\n\n\n\nEject\n\n\t\n\nControl-Command-Eject\n\n\t\n\nQuit all apps (after changes have been saved to open documents) and restart the computer.\n\n\n\n\n\t\n\nControl-Option-Command-Eject\n\n\t\n\nQuit all apps (after changes have been saved to open documents) and shut the computer down.\n\n\n\n\nF1\n\n\t\n\nControl-F1\n\n\t\n\nToggle full keyboard access on or off.\n\n\n\n\nF2\n\n\t\n\nControl-F2\n\n\t\n\nMove focus to the menu bar.\n\n\n\n\nF3\n\n\t\n\nControl- F3\n\n\t\n\nMove focus to the Dock.\n\n\n\n\nF4\n\n\t\n\nControl-F4\n\n\t\n\nMove focus to the active (or next) window.\n\n\n\n\n\t\n\nControl-Shift-F4\n\n\t\n\nMove focus to the previously active window.\n\n\n\n\nF5\n\n\t\n\nControl-F5\n\n\t\n\nMove focus to the toolbar.\n\n\n\n\n\t\n\nCommand-F5\n\n\t\n\nTurn VoiceOver on or off.\n\n\n\n\nF6\n\n\t\n\nControl-F6\n\n\t\n\nMove focus to the first (or next) panel.\n\n\n\n\n\t\n\nControl-Shift-F6\n\n\t\n\nMove focus to the previous panel.\n\n\n\n\nF7\n\n\t\n\nControl-F7\n\n\t\n\nTemporarily override the current keyboard access mode in windows and dialogs.\n\n\n\n\nF8\n\n\t\n\n\t\n\nVaries.\n\n\n\n\nF9\n\n\t\n\n\t\n\nVaries.\n\n\n\n\nF10\n\n\t\n\n\t\n\nVaries.\n\n\n\n\nF11\n\n\t\n\n\t\n\nShow desktop.\n\n\n\n\nF12\n\n\t\n\n\t\n\nHide or display Dashboard.\n\n\n\n\nGrave accent (`)\n\n\t\n\nCommand-Grave accent\n\n\t\n\nActivate the next open window in the frontmost app.\n\n\n\n\n\t\n\nShift-Command-Grave accent\n\n\t\n\nActivate the previous open window in the frontmost app.\n\n\n\n\n\t\n\nOption-Command-Grave accent\n\n\t\n\nMove focus to the window drawer.\n\n\n\n\nHyphen (-)\n\n\t\n\nCommand-Hyphen\n\n\t\n\nDecrease the size of the selection.\n\n\n\n\n\t\n\nOption-Command-Hyphen\n\n\t\n\nZoom out when screen zooming is on.\n\n\n\n\nLeft bracket ({)\n\n\t\n\nCommand-Left bracket\n\n\t\n\nLeft-align a selection.\n\n\n\n\nRight bracket (})\n\n\t\n\nCommand-Right bracket\n\n\t\n\nRight-align a selection.\n\n\n\n\nPipe (|)\n\n\t\n\nCommand-Pipe\n\n\t\n\nCenter-align a selection.\n\n\n\n\nColon (:)\n\n\t\n\nCommand-Colon\n\n\t\n\nDisplay the Spelling window.\n\n\n\n\nSemicolon (;)\n\n\t\n\nCommand-Semicolon\n\n\t\n\nFind misspelled words in the document.\n\n\n\n\nComma (,)\n\n\t\n\nCommand-Comma\n\n\t\n\nOpen the app’s settings window.\n\n\n\n\n\t\n\nControl-Option-Command-Comma\n\n\t\n\nDecrease screen contrast.\n\n\n\n\nPeriod (.)\n\n\t\n\nControl-Option-Command-Period\n\n\t\n\nIncrease screen contrast.\n\n\n\n\nQuestion mark (?)\n\n\t\n\nCommand-Question mark\n\n\t\n\nOpen the app’s Help menu.\n\n\n\n\nForward slash (/)\n\n\t\n\nOption-Command-Forward slash\n\n\t\n\nTurn font smoothing on or off.\n\n\n\n\nEqual sign (=)\n\n\t\n\nShift-Command-Equal sign\n\n\t\n\nIncrease the size of the selection.\n\n\n\n\n\t\n\nOption-Command-Equal sign\n\n\t\n\nZoom in when screen zooming is on.\n\n\n\n\n3\n\n\t\n\nShift-Command-3\n\n\t\n\nCapture the screen to a file.\n\n\n\n\n\t\n\nControl-Shift-Command-3\n\n\t\n\nCapture the screen to the Clipboard.\n\n\n\n\n4\n\n\t\n\nShift-Command-4\n\n\t\n\nCapture a selection to a file.\n\n\n\n\n\t\n\nControl-Shift-Command-4\n\n\t\n\nCapture a selection to the Clipboard.\n\n\n\n\n8\n\n\t\n\nOption-Command-8\n\n\t\n\nTurn screen zooming on or off.\n\n\n\n\n\t\n\nControl-Option-Command-8\n\n\t\n\nInvert the screen colors.\n\n\n\n\nA\n\n\t\n\nCommand-A\n\n\t\n\nSelect every item in a document or window, or all characters in a text field.\n\n\n\n\n\t\n\nShift-Command-A\n\n\t\n\nDeselect all selections or characters.\n\n\n\n\nB\n\n\t\n\nCommand-B\n\n\t\n\nBoldface the selected text or toggle boldfaced text on and off.\n\n\n\n\nC\n\n\t\n\nCommand-C\n\n\t\n\nCopy the selection to the Clipboard.\n\n\n\n\n\t\n\nShift-Command-C\n\n\t\n\nDisplay the Colors window.\n\n\n\n\n\t\n\nOption-Command-C\n\n\t\n\nCopy the style of the selected text.\n\n\n\n\n\t\n\nControl-Command-C\n\n\t\n\nCopy the formatting settings of the selection and store on the Clipboard.\n\n\n\n\nD\n\n\t\n\nOption-Command-D\n\n\t\n\nShow or hide the Dock.\n\n\n\n\n\t\n\nControl-Command-D\n\n\t\n\nDisplay the definition of the selected word in the Dictionary app.\n\n\n\n\nE\n\n\t\n\nCommand-E\n\n\t\n\nUse the selection for a find operation.\n\n\n\n\nF\n\n\t\n\nCommand-F\n\n\t\n\nOpen a Find window.\n\n\n\n\n\t\n\nOption-Command-F\n\n\t\n\nJump to the search field control.\n\n\n\n\n\t\n\nControl-Command-F\n\n\t\n\nEnter full screen.\n\n\n\n\nG\n\n\t\n\nCommand-G\n\n\t\n\nFind the next occurrence of the selection.\n\n\n\n\n\t\n\nShift-Command-G\n\n\t\n\nFind the previous occurrence of the selection.\n\n\n\n\nH\n\n\t\n\nCommand-H\n\n\t\n\nHide the windows of the currently running app.\n\n\n\n\n\t\n\nOption-Command-H\n\n\t\n\nHide the windows of all other running apps.\n\n\n\n\nI\n\n\t\n\nCommand-I\n\n\t\n\nItalicize the selected text or toggle italic text on or off.\n\n\n\n\n\t\n\nCommand-I\n\n\t\n\nDisplay an Info window.\n\n\n\n\n\t\n\nOption-Command-I\n\n\t\n\nDisplay an inspector window.\n\n\n\n\nJ\n\n\t\n\nCommand-J\n\n\t\n\nScroll to a selection.\n\n\n\n\nM\n\n\t\n\nCommand-M\n\n\t\n\nMinimize the active window to the Dock.\n\n\n\n\n\t\n\nOption-Command-M\n\n\t\n\nMinimize all windows of the active app to the Dock.\n\n\n\n\nN\n\n\t\n\nCommand-N\n\n\t\n\nOpen a new document.\n\n\n\n\nO\n\n\t\n\nCommand-O\n\n\t\n\nDisplay a dialog for choosing a document to open.\n\n\n\n\nP\n\n\t\n\nCommand-P\n\n\t\n\nDisplay the Print dialog.\n\n\n\n\n\t\n\nShift-Command-P\n\n\t\n\nDisplay the Page Setup dialog.\n\n\n\n\nQ\n\n\t\n\nCommand-Q\n\n\t\n\nQuit the app.\n\n\n\n\n\t\n\nShift-Command-Q\n\n\t\n\nLog out the person currently logged in.\n\n\n\n\n\t\n\nOption-Shift-Command-Q\n\n\t\n\nLog out the person currently logged in without confirmation.\n\n\n\n\nS\n\n\t\n\nCommand-S\n\n\t\n\nSave a new document or save a version of a document.\n\n\n\n\n\t\n\nShift-Command-S\n\n\t\n\nDuplicate the active document or initiate a Save As.\n\n\n\n\nT\n\n\t\n\nCommand-T\n\n\t\n\nDisplay the Fonts window.\n\n\n\n\n\t\n\nOption-Command-T\n\n\t\n\nShow or hide a toolbar.\n\n\n\n\nU\n\n\t\n\nCommand-U\n\n\t\n\nUnderline the selected text or turn underlining on or off.\n\n\n\n\nV\n\n\t\n\nCommand-V\n\n\t\n\nPaste the Clipboard contents at the insertion point.\n\n\n\n\n\t\n\nShift-Command-V\n\n\t\n\nPaste as (Paste as Quotation, for example).\n\n\n\n\n\t\n\nOption-Command-V\n\n\t\n\nApply the style of one object to the selection.\n\n\n\n\n\t\n\nOption-Shift-Command-V\n\n\t\n\nPaste the Clipboard contents at the insertion point and apply the style of the surrounding text to the inserted object.\n\n\n\n\n\t\n\nControl-Command-V\n\n\t\n\nApply formatting settings to the selection.\n\n\n\n\nW\n\n\t\n\nCommand-W\n\n\t\n\nClose the active window.\n\n\n\n\n\t\n\nShift-Command-W\n\n\t\n\nClose a file and its associated windows.\n\n\n\n\n\t\n\nOption-Command-W\n\n\t\n\nClose all windows in the app.\n\n\n\n\nX\n\n\t\n\nCommand-X\n\n\t\n\nRemove the selection and store on the Clipboard.\n\n\n\n\nZ\n\n\t\n\nCommand-Z\n\n\t\n\nUndo the previous operation.\n\n\n\n\n\t\n\nShift-Command-Z\n\n\t\n\nRedo (when Undo and Redo are separate commands rather than toggled using Command-Z).\n\n\n\n\nRight arrow\n\n\t\n\nCommand-Right arrow\n\n\t\n\nChange the keyboard layout to current layout of Roman script.\n\n\n\n\n\t\n\nShift-Command-Right arrow\n\n\t\n\nExtend selection to the next semantic unit, typically the end of the current line.\n\n\n\n\n\t\n\nShift-Right arrow\n\n\t\n\nExtend selection one character to the right.\n\n\n\n\n\t\n\nOption-Shift-Right arrow\n\n\t\n\nExtend selection to the end of the current word, then to the end of the next word.\n\n\n\n\n\t\n\nControl-Right arrow\n\n\t\n\nMove focus to another value or cell within a view, such as a table.\n\n\n\n\nLeft arrow\n\n\t\n\nCommand-Left arrow\n\n\t\n\nChange the keyboard layout to current layout of system script.\n\n\n\n\n\t\n\nShift-Command-Left arrow\n\n\t\n\nExtend selection to the previous semantic unit, typically the beginning of the current line.\n\n\n\n\n\t\n\nShift-Left arrow\n\n\t\n\nExtend selection one character to the left.\n\n\n\n\n\t\n\nOption-Shift-Left arrow\n\n\t\n\nExtend selection to the beginning of the current word, then to the beginning of the previous word.\n\n\n\n\n\t\n\nControl-Left arrow\n\n\t\n\nMove focus to another value or cell within a view, such as a table.\n\n\n\n\nUp arrow\n\n\t\n\nShift-Command-Up arrow\n\n\t\n\nExtend selection upward in the next semantic unit, typically the beginning of the document.\n\n\n\n\n\t\n\nShift-Up arrow\n\n\t\n\nExtend selection to the line above, to the nearest character boundary at the same horizontal location.\n\n\n\n\n\t\n\nOption-Shift-Up arrow\n\n\t\n\nExtend selection to the beginning of the current paragraph, then to the beginning of the next paragraph.\n\n\n\n\n\t\n\nControl-Up arrow\n\n\t\n\nMove focus to another value or cell within a view, such as a table.\n\n\n\n\nDown arrow\n\n\t\n\nShift-Command-Down arrow\n\n\t\n\nExtend selection downward in the next semantic unit, typically the end of the document.\n\n\n\n\n\t\n\nShift-Down arrow\n\n\t\n\nExtend selection to the line below, to the nearest character boundary at the same horizontal location.\n\n\n\n\n\t\n\nOption-Shift-Down arrow\n\n\t\n\nExtend selection to the end of the current paragraph, then to the end of the next paragraph (include the paragraph terminator, such as Return, in cut, copy, and paste operations).\n\n\n\n\n\t\n\nControl-Down arrow\n\n\t\n\nMove focus to another value or cell within a view, such as a table.\n\nStandard international keyboard shortcuts\n\nThe system defines several key combinations for use with localized versions of the system, localized keyboard, keyboard layouts, and input methods. These shortcuts don’t correspond directly to menu commands.\n\nKeyboard shortcut\n\n\t\n\nAction\n\n\n\n\nControl-Space\n\n\t\n\nToggle between the current and last input source.\n\n\n\n\nControl-Option-Space\n\n\t\n\nSwitch to the next input source in the list.\n\n\n\n\n[Modifier key]-Command-Space\n\n\t\n\nVaries.\n\n\n\n\nCommand-Right arrow\n\n\t\n\nChange keyboard layout to current layout of Roman script.\n\n\n\n\nCommand-Left arrow\n\n\t\n\nChange keyboard layout to current layout of system script.\n\nResources\nRelated\n\nVirtual keyboards\n\nEntering data\n\nPointing devices\n\nDeveloper documentation\n\nKeyboardShortcut — SwiftUI\n\nInput events — SwiftUI\n\nHandling key presses made on a physical keyboard — UIKit\n\nMouse, Keyboard, and Trackpad — AppKit\n\nVideos\nWhat's new in UIKit\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "Game controllers",
    "url": "https://developer.apple.com/design/human-interface-guidelines/game-controllers",
    "html": "Game controllers\nGame controllers can enhance gameplay and increase a player’s immersion in a game.\n\nSupporting as many types of game controllers as possible gives people additional ways to enjoy interacting with your game.\n\nBest practices\n\nSupport the platform’s default input method. A game controller is an optional purchase, but every iPhone and iPad has a touchscreen, every Mac has a keyboard and a touchpad or mouse, and every Apple TV has a remote. If you support game controllers, consider letting people use the platform’s default input method to controls games, too.\n\nDetermine game controller requirements. If your game has advanced game mechanics that a platform’s default input method can’t support, you can require the use of a game controller. The App Store displays a “Game Controller Required” badge to help people identify such apps and may warn people if they haven’t paired a compatible game controller with their device.\n\nConfirm required game controller connections. People can open your game any time, even without a connected controller. If your app requires a game controller, check for its presence and gracefully prompt people to connect one if necessary.\n\nHelp people understand the advantages of using a game controller with your app. If your game is playable without a game controller, but using a game controller is recommended, look for ways to inform players that using a game controller will make playing easier and more enjoyable.\n\nAvoid requiring people to switch input devices. For example, make sure players can use a game controller to navigate all game menus and interact with all essential functions without needing to switch to the platform’s default input method.\n\nSupport clickable thumbsticks when present. Some controllers include thumbsticks that people can click or hold down as well as rotate. These buttons — also known as L3 and R3 — typically let people modify the current action by rotating the thumbstick. For example, clicking or holding a left thumbstick that causes motion might let people move at a different speed; clicking or holding a right thumbstick that controls camera orientation might let people zoom in or “crouch.” As you consider ways to support clickable thumbsticks, be guided by the behaviors that people expect in various game genres.\n\nIn general, prefer using the left thumbstick or directional pad (D-pad) button to move focus in the current screen. Typically, people don’t expect to use the right thumbstick to perform focus navigation while in a game.\n\nCustomize onscreen instructions to help people use the connected game controller. Different controllers can use different colors or symbols to represent similar buttons, so it’s a good idea to avoid using color alone to refer to a button or explain what it does. Instead, refer to a button using the connected controller’s labeling scheme, such as “A” or the image of a triangle or square. In some cases, you might consider also showing an image of the interaction instead of using only a button label. For example, you might display an image of a D-pad, highlighted to indicate the up direction. Using images in addition to labels can be especially helpful for people who aren’t experienced with controllers because it doesn’t require them to hunt for a specific button label during gameplay.\n\nButtons\n\nIn addition to playing games, people can use a game controller to navigate system and app interfaces, eliminating the need to switch input devices.\n\nButton\n\n\t\n\nExpected behavior in iOS and iPadOS\n\n\t\n\nExpected behavior in macOS\n\n\t\n\nExpected behavior in tvOS\n\n\n\n\nD-pad\n\n\t\n\nMoves focus\n\n\t\n\nMoves focus\n\n\t\n\nMoves focus\n\n\n\n\nA\n\n\t\n\nActivates a control or selects an item\n\n\t\n\nActivates a control or selects an item\n\n\t\n\nActivates a control or selects an item\n\n\n\n\nB\n\n\t\n\n–\n\n\t\n\n–\n\n\t\n\nReturns to previous screen. Exits to Apple TV Home Screen from an app’s root-level screen.\n\n\n\n\nX\n\n\t\n\nActivates media playback. Pauses/resumes media playback.\n\n\t\n\nActivates media playback. Pauses/resumes media playback.\n\n\t\n\nActivates media playback. Pauses/resumes media playback.\n\n\n\n\nY\n\n\t\n\n–\n\n\t\n\n–\n\n\t\n\nN/A\n\n\n\n\nLeft shoulder/trigger\n\n\t\n\nNavigates left or moves focus\n\n\t\n\nNavigates left or moves focus\n\n\t\n\nNavigates left or moves focus\n\n\n\n\nRight shoulder/trigger\n\n\t\n\nNavigates right or moves focus\n\n\t\n\nNavigates right or moves focus\n\n\t\n\nNavigates right or moves focus\n\n\n\n\nLeft thumbstick\n\n\t\n\nNavigates. Moves focus.\n\n\t\n\nNavigates. Moves focus.\n\n\t\n\nNavigates. Moves focus.\n\n\n\n\nRight thumbstick\n\n\t\n\n–\n\n\t\n\n–\n\n\t\n\nN/A\n\nA controller with a single auxiliary button needs to support the following behaviors:\n\nInteraction with auxiliary button\n\n\t\n\nExpected behavior in iOS and iPadOS\n\n\t\n\nExpected behavior in macOS\n\n\t\n\nExpected behavior in tvOS\n\n\n\n\nPress\n\n\t\n\nReturns to previous screen or pauses game\n\n\t\n\nReturns to previous screen or pauses game\n\n\t\n\nReturns to previous screen or pauses game\n\n\n\n\nLong press\n\n\t\n\nN/A\n\n\t\n\nN/A\n\n\t\n\nExits to Apple TV Home Screen\n\n\n\n\nDouble press\n\n\t\n\nReveals multitasking user interface\n\n\t\n\nReveals multitasking user interface\n\n\t\n\nReveals multitasking user interface\n\nA controller with multiple auxiliary buttons includes a logo button in addition to the Menu button. Such a controller needs to support the following behaviors when people interact with the logo and Menu buttons:\n\nButton\n\n\t\n\nInteraction\n\n\t\n\nExpected behavior in iOS and iPadOS\n\n\t\n\nExpected behavior in macOS\n\n\t\n\nExpected behavior in tvOS\n\n\n\n\nLogo\n\n\t\n\nPress\n\n\t\n\nReveals Control Center\n\n\t\n\nReveals Control Center\n\n\t\n\nReveals Control Center\n\n\n\n\n\t\n\nLong press\n\n\t\n\nN/A\n\n\t\n\nN/A\n\n\t\n\nExists to Apple TV Home Screen\n\n\n\n\n\t\n\nDouble press\n\n\t\n\nReveals multitasking user interface\n\n\t\n\nReveals multitasking user interface\n\n\t\n\nReveals multitasking user interface\n\n\n\n\nMenu\n\n\t\n\nPress\n\n\t\n\nPauses game\n\n\t\n\nPauses game\n\n\t\n\nPauses game\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, or visionOS. Not supported in watchOS.\n\nResources\nRelated\n\nFeedback\n\nDeveloper documentation\n\nGame Controller\n\nVideos\nSupporting New Game Controllers"
  },
  {
    "title": "Gyroscope and accelerometer",
    "url": "https://developer.apple.com/design/human-interface-guidelines/gyro-and-accelerometer",
    "html": "Gyroscope and accelerometer\nOn-device gyroscopes and accelerometers can supply data about a device’s movement in the physical world.\n\nYou can use accelerometer and gyroscope data to provide experiences based on real-time, motion-based information in apps and games that run in iOS, iPadOS, and watchOS. tvOS apps can use gyroscope data from the Siri Remote. For developer guidance, see Core Motion.\n\nBest practices\n\nUse motion data only to offer a tangible benefit to people. For example, a fitness app might use the data to provide feedback about people’s activity and general health, and a game might use the data to enhance gameplay. Avoid gathering data simply to have the data.\n\nImportant\n\nIf your experience needs to access motion data from a device, you must provide copy that explains why. The first time your app or game tries to access this type of data, the system includes your copy in a permission request, where people can grant or deny access.\n\nOutside of active gameplay, avoid using accelerometers or gyroscopes for the direct manipulation of your interface. Some motion-based gestures may be difficult to replicate precisely, may be physically challenging for some people to perform, and may affect battery usage.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, tvOS, visionOS, or watchOS.\n\nResources\nRelated\n\nFeedback\n\nDeveloper documentation\n\nGetting processed device-motion data — Core Motion\n\nVideos\nMeasure health with motion"
  },
  {
    "title": "Gestures",
    "url": "https://developer.apple.com/design/human-interface-guidelines/gestures",
    "html": "Gestures\nGestures are a key way for people to interact with their devices, eliciting a close personal connection with content and enhancing the sense of directly manipulating app objects.\n\nDepending on the device they’re using, people can make gestures on a touchscreen, in the air, or on a range of input devices such as a trackpad, mouse, remote, or game controller.\n\nEvery platform supports basic gestures like tap, swipe, and drag. Although the precise movements that make up basic gestures can vary per platform and input device, people are familiar with the underlying functionality of these gestures and expect to use them everywhere. For a list of these gestures, see Standard gestures.\n\nBest practices\n\nAlways be sure to give people multiple ways to interact with your app. Design your app to support the accessibility features people use to personalize the ways they interact with their devices. For guidance, see Accessibility.\n\nIn general, respond to gestures in ways that are consistent with other apps on the device. People expect most gestures to work the same regardless of their current context. For example, people expect tap to activate or select an object. Avoid using a familiar gesture to perform an action that’s unique to your app; similarly, avoid creating a unique gesture to perform a standard action like activating a button or scrolling a long view.\n\nDefine custom gestures only when necessary. People might find it difficult to discover and remember a custom gesture, and if it’s awkward to perform, people may not want — or be able — to use it. Prefer custom gestures for situations where your app offers an in-depth experience that requires context-specific interactions, like in a game or a drawing app, or when the system doesn’t handle a standard gesture, such as pinch in watchOS. If you decide to define a custom gesture, make sure it’s:\n\nEasy to discover and perform\n\nNot too similar to gestures people already know\n\nNot the only way to perform an important action in your app\n\nHandle gestures as responsively as possible. Gestures enhance the experience of direct manipulation and provide immediate feedback. As people perform a gesture in your app, provide feedback that helps them predict its results and, if necessary, communicates the extent and type of movement required to complete the action.\n\nOffer shortcut gestures to supplement standard gestures, not to replace them. People need simple, familiar ways to navigate and perform actions, even if it means an extra tap or two. For example, in an app that supports navigation through a hierarchy of views, people expect to find a Back button in a navigation bar that lets them return to the previous view with a single tap. To help accelerate this action, many apps also offer a shortcut gesture — such as swiping from the side of a window or touchscreen — while continuing to provide the Back button.\n\nIn iOS, iPadOS, and watchOS, avoid interfering with system-defined screen-edge gestures. Screen-edge gestures like edge swipe can provide access to the Home Screen, App Switcher, Notification Center, Control Center, and Dock, and people rely on such gestures to work in every app. In rare cases, a game might require custom screen-edge gestures that take priority over the system’s gestures. In this rare scenario, the game can use a behavior called edge protect in which the first swipe invokes the app-specific gesture and a second swipe invokes the system gesture. If you must define custom screen-edge gestures, use edge protect sparingly, because people must perform a second gesture before they can access the system-level actions. For developer guidance, see the preferredScreenEdgesDeferringSystemGestures property of UIViewController.\n\nPlatform considerations\niOS, iPadOS\n\nIn addition to the standard gestures supported in all platforms, iOS and iPadOS support a few other gestures that people expect.\n\nGesture\n\n\t\n\nCommon action\n\n\n\n\nThree-finger swipe\n\n\t\n\nInitiate undo (left swipe); initiate redo (right swipe).\n\n\n\n\nThree-finger pinch\n\n\t\n\nCopy selected text (pinch in); paste copied text (pinch out).\n\n\n\n\nFour-finger swipe (iPadOS only)\n\n\t\n\nSwitch between apps.\n\nConsider allowing simultaneous recognition of multiple gestures if it enhances the experience. Although simultaneous gestures are unlikely to be useful in nongame apps, a game might include multiple onscreen controls — such as a joystick and firing buttons — that people can operate at the same time. For guidance on integrating touchscreen input with Apple Pencil input in your iPadOS app, see Apple Pencil and Scribble.\n\nmacOS\n\nAlthough most people tend to use a keyboard to interact with a Mac, they can also make standard gestures on a Magic Trackpad, Magic Mouse, or a game controller that includes a touch surface.\n\ntvOS\n\nPeople expect to use standard gestures with the Siri Remote to navigate tvOS apps, browse channels and content, play and pause media, and make selections (for guidance, see Remotes). People also expect to use standard gestures with a compatible remote or game controller that includes a touch surface.\n\nvisionOS\n\nvisionOS defines two types of gestures: indirect and direct.\n\nAn indirect gesture affects the interactive object people are currently looking at. For example, when people look at a button, visionOS highlights it, providing visual feedback that shows them they can activate it by quickly tapping a finger to their thumb to make the indirect tap gesture. visionOS supports indirect gestures by default, and people use them to perform the standard gestures they already know.\n\nPlay\n\nIndirect gestures tend to be fast — because people can look in different directions quickly — and comfortable, because device cameras can capture hand movements while people’s hands rest in their laps or at their sides. In addition, indirect gestures let people interact with any object they look at, regardless of its location in space, because they don’t have to be able to reach it with their hands.\n\nA direct gesture affects the object that people are touching (in visionOS, people touch a virtual object by bringing a finger close to the object). For example, one way people can use the system-provided keyboard is to touch the keys. Direct gestures require objects to be near enough for people to reach them. Also, because people have to move their hand, instead of their eyes, to the object, direct gestures tend to be better suited to situations where quick, precise interactions aren’t critical.\n\nPlay\n\nHere are the common direct gestures people use in visionOS.\n\nDirect gesture\n\n\t\n\nCommon use\n\n\n\n\nTouch\n\n\t\n\nDirectly select or activate an object.\n\n\n\n\nTouch and hold\n\n\t\n\nOpen a contextual menu.\n\n\n\n\nTouch and drag\n\n\t\n\nMove an object to a new location.\n\n\n\n\nDouble touch\n\n\t\n\nPreview an object or file; select a word in an editing context.\n\n\n\n\nSwipe\n\n\t\n\nReveal actions and controls; dismiss views; scroll.\n\n\n\n\nWith two hands, pinch and drag together or apart\n\n\t\n\nZoom in or out.\n\n\n\n\nWith two hands, pinch and drag in a circular motion\n\n\t\n\nRotate an object.\n\nSupport tap everywhere you can. As soon as people look at an object in your app or game, tap is the first gesture they’re likely to make when they want to select or activate it. Even if you also support custom gestures, supporting tap throughout your experience can help people get comfortable with your app or game quickly.\n\nPrefer indirect gestures. An indirect gesture tends to be easy for people to make because they don’t have to move their hands to a specific location. Reserve direct gestures for when you want to invite people to manipulate a nearby virtual object.\n\nIf direct gestures are a feature of your app, make sure people can get the same functionality using indirect gestures. As much as possible, you want people to have the flexibility to choose the interaction method that works best for them.\n\nAvoid requiring specific body movements or positions for input. Provide alternatives to input that requires people to move.\n\nDesigning custom gestures in visionOS\n\nTo create a custom gesture, you rely on ARKit for information like hand positioning and joint orientation. Before you can offer custom gestures in your app, your app must be running in a Full Space and you must request people’s permission to access information about their hands. For developer guidance, see Setting up access to ARKit data.\n\nPrioritize comfort in custom gestures. Continually test the ergonomics of all interactions that require custom gestures. A custom interaction that requires people to keep their arms raised for even a little while can be physically tiring, and repeating very similar movements many times in succession can stress people’s muscles and joints.\n\nConsider carefully before defining custom gestures that involve multiple fingers or both hands. It can be challenging for people to perform custom gestures, and requiring them to position multiple fingers or use both hands at the same time can be even more difficult.\n\nAvoid creating a custom gesture that requires people to use a specific hand. Expecting people to remember which hand to use for a custom gesture increases their cognitive load while also making your experience less welcoming to people with strong hand-dominance or limb differences.\n\nIf you decide to create a custom gesture, make sure it’s:\n\nInclusive. Gestures can mean different things to different people, so be sure your custom gestures don’t send messages you don’t intend.\n\nComfortable. Great custom gestures are physically easy for people to perform, especially over time.\n\nDistinctive. Custom gestures that harmonize with your app or game can be easier for people to discover and remember, while enhancing their enjoyment of the experience.\n\nEasy to describe. If you can’t use simple language and simple graphics to describe your custom gesture, it may mean that the gesture will be difficult for people to learn and perform.\n\nwatchOS\n\nConsider alternatives to the long-press gesture. In versions of watchOS earlier than watchOS 7, people could press firmly on the display to do things like change the watch face or reveal a hidden menu called a Force Touch menu. In watchOS 7 and later, system apps make previously hidden menu items accessible in a related screen or a settings screen. If you formerly supported a long-press gesture to open a hidden menu, consider relocating the menu items elsewhere. For guidance, see Menus.\n\nSpecifications\nStandard gestures\n\nThe system provides APIs that support the familiar gestures people use with their devices, whether they use a touchscreen, an indirect gesture in visionOS, or an input device like a trackpad, mouse, remote, or game controller. For developer guidance, see Gestures.\n\nGesture\n\n\t\n\nSupported in\n\n\t\n\nCommon action\n\n\n\n\nTap\n\n\t\n\niOS, iPadOS, macOS, tvOS, visionOS, watchOS\n\n\t\n\nActivate a control; select an item.\n\n\n\n\nSwipe\n\n\t\n\niOS, iPadOS, macOS, tvOS, visionOS, watchOS\n\n\t\n\nReveal actions and controls; dismiss views; scroll.\n\n\n\n\nDrag\n\n\t\n\niOS, iPadOS, macOS, tvOS, visionOS, watchOS\n\n\t\n\nMove a UI element.\n\n\n\n\nTouch (or pinch) and hold\n\n\t\n\niOS, iPadOS, tvOS, visionOS, watchOS\n\n\t\n\nReveal additional controls or functionality.\n\n\n\n\nDouble tap\n\n\t\n\niOS, iPadOS, macOS, tvOS, visionOS, watchOS\n\n\t\n\nZoom in; zoom out if already zoomed in; perform a primary action on Apple Watch Series 9 and Apple Watch Ultra 2.\n\n\n\n\nZoom\n\n\t\n\niOS, iPadOS, macOS, tvOS, visionOS\n\n\t\n\nZoom a view; magnify content.\n\n\n\n\nRotate\n\n\t\n\niOS, iPadOS, macOS, tvOS, visionOS\n\n\t\n\nRotate a selected item.\n\nFor guidance on supporting additional gestures and button presses on specific input devices, see Pointing devices, Remotes, and Game controllers.\n\nResources\nRelated\n\nFeedback\n\nEyes\n\nDeveloper documentation\n\nUITouch — UIKit\n\nVideos\nDesign for spatial input\nPrinciples of spatial design\nDesign for spatial user interfaces\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nSeptember 15, 2023\n\n\t\n\nUpdated specifications to include double tap in watchOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nChanged page title from Touchscreen gestures and updated to include guidance for visionOS."
  },
  {
    "title": "Windows",
    "url": "https://developer.apple.com/design/human-interface-guidelines/windows",
    "html": "Windows\nA window contains the views and components that present the user interface of your app or game.\n\nDepending on the platform, device, and context, a window (or scene) can be undetectable to people. For example, in platforms where the default experience is full screen, like iOS, tvOS, and watchOS, people view and interact with the content inside a window — they don’t view or interact with the window itself. In these cases, you don’t need to design the appearance of the window or scene itself in your app or game. For developer guidance, see Scene and UIWindow.\n\nNote\n\nIn SwiftUI, a scene is a part of an app’s interface that can contain windows and view hierarchies. The terms window and scene are often used synonymously, especially in design guidance, but in help and other content that describes your app to people, use window — not scene — if you need to refer to these high-level content containers.\n\nIn visionOS, iPadOS, and macOS — in contrast to iOS, tvOS, and watchOS — people are aware of windows as visually distinct objects, because they can typically open, close, resize, and relocate individual windows, as well as view multiple windows at the same time. In visionOS, people can also interact with a volume, which is a container optimized for displaying 3D content that people can view from any angle; for guidance, see Volumes.\n\nThe guidance below applies to windows that people can view and manipulate as separate objects. For guidance on other types of window-like views in all platforms, see Alerts, Panels, Popovers, and Sheets.\n\nFor guidance laying out content within a window or scene, see Layout; for guidance laying out content in Apple Vision Pro space, see Spatial layout.\n\nPlatform considerations\n\nNo additional considerations for iOS, tvOS, or watchOS.\n\niPadOS\n\nIn iPadOS, multitasking and multiple windows features mean that people can be aware of an app’s window as a visually distinct object. For example, people can view two or three apps onscreen at the same time or open multiple windows in the same app. To create a great iPadOS experience, you need to ensure that your windows and scenes look and behave the way people expect. For developer guidance, see Scene.\n\nTo support multitasking and multiwindow workflows on iPad, you need to ensure that your windows adapt to different sizes and that you match each window’s presentation style to its content. For guidance, see Multitasking on iPad.\n\nmacOS\n\nMac users typically run several apps at the same time, often viewing windows from multiple apps on one desktop and switching frequently between different windows — moving, resizing, minimizing, and revealing the windows to suit their work style. Even when people choose full-screen mode, which usually hides the window frame, the built-in, full-screen transition and the ability to reveal the toolbar remind them of the existence of the window.\n\nmacOS window anatomy\n\nA macOS window consists of a frame and a body area. People can move a window by dragging the frame and can often resize the window by dragging its edges.\n\nThe frame is the portion of a window that surrounds body content. A window frame can include a title bar, toolbar, tabs, and (in rare cases) a bottom bar.\n\nThe window body displays the main content of the window. This content can fill the entire body area — such as a website in a Safari window or an image in Preview — or the content can display in multiple subviews, such as in a split view interface. Content that extends beyond the bounds of views in the body area is scrollable.\n\nmacOS window states\n\nA macOS window can have one of three states:\n\nMain. The frontmost window that people view is an app’s main window. There can be only one main window per app.\n\nKey. Also called the active window, the key window accepts people’s input. There can be only one key window onscreen at a time. Although the front app’s main window is usually the key window, another window — such as a panel floating above the main window — might be key instead. People typically click a window to make it key; when people click an app’s Dock icon to bring all of that app’s windows forward, only the most recently accessed window becomes key.\n\nInactive. A window that’s not in the foreground is an inactive window.\n\nThe system gives main, key, and inactive windows different appearances to help people visually identify them. For example, the key window uses color in the title bar options for closing, minimizing, and zooming; inactive windows and main windows that aren’t key use gray in these options. Also, inactive windows don’t use vibrancy (an effect that can pull color into a window from the content underneath it), which makes them appear subdued and seem visually farther away than the main and key windows.\n\nNote\n\nSome windows — typically, panels like Colors or Fonts — become the key window only when people click the window’s title bar or a component that requires keyboard input, such as a text field.\n\nUsing windows in a macOS app\n\nMake sure your custom windows use the system-defined appearances. People rely on the visual differences in various onscreen windows to help them identify the foreground window and know which window will accept their input. When you use system-provided components, a window’s background and button appearances update automatically when the window changes state; if you use custom implementations, you need to do this work yourself.\n\nDisplay a title unless the window’s content provides enough context to make one unnecessary. For document windows, the title is the name of the document or Untitled (for new documents). For app windows, the title is the name of the app.\n\nIf you need to use a filename as a title, make it easy to understand. For example, use the file’s display name, which reflects people’s preference for showing or hiding a file extension and may be localized.\n\nAvoid including a file system path in the title bar. Paths are generally too long to fit in the title bar without clipping, and they’re difficult for people to understand at a glance. If you need to show the complete path of a file or folder, do so in another way, like in an inspector pane.\n\nUse numeric suffixes to differentiate duplicate titles. The first instance of a title doesn’t need a numeric suffix. When other windows have the same title, append numeric suffixes, starting with 2. For example, Untitled, Untitled 2, Untitled 3.\n\nMake sure people can still interact with your window if you hide the title bar. Provide alternative ways — like menus — to close and minimize the window. Make sure people can still drag the frame to move the window. If the window has a toolbar and no title bar, make sure there’s enough space in the toolbar to drag the window without activating toolbar items.\n\nIn general, use a dot to mark a modified document as unsaved only when it can’t be autosaved. If a document can be autosaved, you don’t want to display a dot in the window’s close button or next to the document’s name in the Window menu because doing so signals that people need to take action to save their changes. It’s fine to append a suffix like Edited to the document’s title in the title bar, but you need to remove this suffix when it autosaves or if people manually perform a save.\n\nUse a bottom bar to display a small amount of information directly related to a window’s contents or to a selected item within it. For example, Finder uses a bottom bar (called the Status Bar) to display the total number of items in a window, the number of selected items, and how much space is available on the disk. A bottom bar is small, so if you have more information to display, consider using an inspector, which typically presents information on the trailing side of a split view.\n\nAvoid putting critical information or actions in a bottom bar. People often relocate a window in a way that hides its bottom edge.\n\nvisionOS\n\nA visionOS app can use windows or volumes to display content in a container. In general, you use a window to present 2D or 3D content, like the Inbox in Mail or a webpage in Safari that contains a USDZ object. To present 3D content and objects — like a game board or a globe — you typically use a volume.\n\nA window\n\nA volume\n\nNote\n\nThe system defines the initial position of each window and volume people open. In both the Shared Space and a Full Space, people can move windows and volumes to new locations.\n\nPeople are instantly familiar with windows in visionOS because they look and behave similarly to the distinct windows in other platforms. For example, a visionOS window aligns with an upright plane, can appear alongside other app windows in the Shared Space, and provides system-defined controls that let people move, resize, and close it. In addition to window-management controls, a window can also include a share menu, tab bar, toolbar, and one or more ornaments.\n\nA window\n\nA visionOS window uses an unmodifiable background material called glass, which lets light and both physical and virtual objects show through. A glass window helps your content feel like part of people’s surroundings while using specular reflections and shadows to communicate the window’s scale and position. When you create a window using the default style, you automatically get the glass background. For developer guidance, see DefaultWindowStyle.\n\nBy default, a window measures 1280x720 pt. When a window first opens, the system places it about two meters in front of the wearer, giving it an apparent width of about three meters.\n\nThe system also adds highlights and shadows to the views and controls within a standard window, giving them the appearance of depth and helping them feel more substantial, especially when people view the window from an angle. Although you can display 3D content in a standard window, the system clips it if the content extends too far from the window’s surface. To display 3D content that has greater depth, use a volume.\n\nA window containing 3D content\n\nPrefer using a standard window to present a familiar interface and to support familiar tasks. Help people feel at home in your app by displaying an interface they’re already comfortable with, reserving more immersive experiences for the meaningful content and activities you offer. For guidance, see Immersive experiences. If you want to showcase bounded 3D content like a game board, consider using a volume.\n\nChoose an initial window size that minimizes empty areas within it. Too many empty areas can make a window look unnecessarily large while also obscuring other content in people’s space.\n\nAim for a default shape that suits a window’s content. For example, a default Keynote window is wide because slides are wide; a default Safari window is tall because most webpages are much longer than they are wide.\n\nLet people resize app windows when possible. People appreciate being able to resize windows as they customize their space. If it makes sense, you can set minimum and maximum size values to help ensure that a window remains functional and looks good when people resize it.\n\nLook for moments or content in your app that people might want to immerse themselves in. Even if your app uses mostly windows, there may be features that are enhanced when immersive. In the Photos app, for example, people open a panorama in an expanded view that can make them feel like they’re in the photo. For guidance, see Immersive experiences.\n\nAlways ensure that the visual bounds of a window match the size of its containing scene. If a scene exceeds the visible size of a window, window controls can appear misplaced and the window might not look the way people expect it to, making it difficult to interact with. For developer guidance, see Scene.\n\nVolumes\n\nA volume has a horizontal base and helps you display 3D content that people can view from any angle, like a globe.\n\nA volume\n\nVolumes and windows share a few similarities:\n\nIn the Shared Space, the system determines the initial position of a volume, just as it does with a window.\n\nA volume provides the same management controls that people use to reposition or close a window.\n\nA volume can use a glass background.\n\nVolumes and windows differ in the type of scaling the system applies: visionOS automatically uses dynamic scaling with a window, but fixed scaling with a volume.\n\nPrefer using a volume to display rich, 3D content. If you want to present a familiar, UI-centric interface, it generally works best to use a window.\n\nResources\nRelated\n\nSplit views\n\nMultitasking\n\nDeveloper documentation\n\nWindows — SwiftUI\n\nWindowGroup — SwiftUI\n\nUIWindow — UIKit\n\nNSWindow — AppKit\n\nVideos\nDesign for spatial user interfaces\nPrinciples of spatial design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "SharePlay",
    "url": "https://developer.apple.com/design/human-interface-guidelines/shareplay",
    "html": "SharePlay\nSharePlay helps multiple people share activities — like viewing a movie, listening to music, playing a game, or sketching ideas on a whiteboard — while they’re in a FaceTime call or Messages conversation.\n\nThe system synchronizes app playback on all participating devices to support seamless media and content sharing that lets everyone enjoy the experience simultaneously. In visionOS, SharePlay helps people enjoy these experiences while they’re together in the same virtual space.\n\nWhen someone shares content during a FaceTime call, the system asks each participant to launch the app to begin the experience. If people don’t have the app installed, the SharePlay alert encourages them to download it from the App Store. If you make the platform-specific versions of your app available as a Universal Purchase, people can make one purchase and use your app and their in-app purchases across all the platforms you support.\n\nBest practices\n\nLet people know that you support SharePlay. People often expect media playback experiences to be shareable, so indicate this capability in your interface. For example, you can use the shareplay SF Symbol to identify the content or experiences in your app that support SharePlay.\n\nIf part of your app requires a subscription, consider ways to help nonsubscriber participants quickly join a group activity. For example, you might offer temporary or provisional access to nonsubscribers or let an existing subscriber send a one-time pass to a friend. To make it easy for family members to share your content in a SharePlay experience, you can support Family Sharing. If people can start a subscription during a SharePlay experience, present a streamlined version of your sign-up flow so they can join the activity without making others wait. For guidance, see Auto-renewable subscriptions.\n\nSupport Picture in Picture (PiP) when possible. On iPhone and iPad, people can open a shared video in a PiP window. On a Mac, a shared video opens in a background window that people can move into the foreground when they want to watch.\n\nUse the term SharePlay correctly. You can use SharePlay as a noun — as in “Join SharePlay” — and also as a verb when describing a direct action in your interface. For example, in a button or sheet that lets people share a movie-viewing activity, you can use a phrase like “SharePlay Movie.” Avoid using an adjective with SharePlay; for example, in your visionOS app, don’t add terms like virtual or spatial. Avoid changing the term SharePlay in any way; for example, don’t use variations like SharePlayed, SharePlays, or SharePlaying.\n\nSharing activities\n\nAn activity is an app-defined type of shareable experience. For example, an app that lets people view videos might define a separate activity for viewing each type of content — like movies, TV shows, and uploaded videos — and display a different description for each activity. You can define as many different activities as make sense in your app. For developer guidance, see Defining your app’s SharePlay activities.\n\nBriefly describe each activity. When people receive an invitation to participate in an activity, your description helps them understand the experience they’re about to share. For example, a video-viewing app might associate its descriptive movie view with a movie-viewing activity. In this case, the descriptive view might display a movie’s title, a plot summary, and a poster image. Write a simple, meaningful description that’s short enough to avoid truncation.\n\nMake it easy to start sharing an activity. If there’s no session available when people start a shareable activity, you can present UI that lets them start a group activity. In response, the system asks people if they want to share or continue the experience solo.\n\nHelp people prepare to join a session before displaying the activity. For example, if people must log in, download content, or make a payment before they can participate, display views that help them perform these tasks before showing the activity UI. Make these tasks as simple and effortless as possible so people can join the group activity quickly.\n\nWhen possible, defer app tasks that might delay a shared activity. For example, if your app needs to know a participant’s profile, consider asking for this information at a convenient time, like when playback pauses or finishes.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, or tvOS. Not supported in watchOS.\n\nvisionOS\n\nPeople expect most visionOS apps to support SharePlay. While wearing Apple Vision Pro, people choose the Spatial option in FaceTime to share content and activities with others.\n\nIn a shared activity, FaceTime can show representations of other participants — called Spatial Personas — within each wearer’s space, making everyone feel like they’re sharing the same experience in the same place. During a shared experience in FaceTime, people can interact with each other in natural ways through their Spatial Personas. For example, people can speak or gesture directly to others, tell when someone is paying attention to them, and know which person is using a shared tool or resource.\n\nvisionOS uses the concept of shared context to describe the characteristics of a shared activity that help people feel physically present with others while connecting over the same content. A shared context helps give people confidence that they’re experiencing the same thing as everyone else.\n\nWhen people feel that they’re truly sharing an experience, social dynamics can encourage authentic, intuitive interactions. For example, people can communicate verbally and nonverbally to make plans, take turns, and share resources.\n\nNote\n\nDuring a shared activity, the system helps preserve people’s privacy by obscuring some visual details about wearers. In addition, a person can adjust their Spatial Persona if they want. Although the system can place Spatial Personas shoulder to shoulder and it supports shared gestures like a handshake or “high five,” Spatial Personas remain apart.\n\nChoose the Spatial Persona template that suits your shared activity. When you design a shared activity, you can use a Spatial Persona template to specify a layout for arranging Spatial Personas in the shared activity space. The system provides three Spatial Persona templates: side-by-side, surround, and conversational.\n\nThe side-by-side template places participants next to each other along a curved line segment, all facing the shared content. The side-by-side template gives everyone a great view of the content, making it a good choice for helping people watch media together. Because people aren’t facing each other in this arrangement, the side-by-side template can encourage less nonverbal interaction than other Spatial Persona templates.\n\nThe system-applied surround template arranges participants all the way around the shared content in the center. This Spatial Persona template works especially well when the content is 3D, because each participant views it from a different angle. In the surround template, participants face each other as if they were grouped around a table, promoting both verbal and nonverbal interactions.\n\nThe conversational template also groups participants around a center point, but places your content along the circle, not at its center. Because of this position, not everyone has the same view of your content, and it might not be convenient for everyone to interact with it. Consider using the conversational arrangement if your experience is more about people being together while your app performs a task in the background like playing music.\n\nFor developer guidance, see SystemCoordinator and SpatialTemplatePreference.\n\nBe prepared to launch directly into your shared activity. When one person shares your activity with others on a FaceTime call, the system minimizes friction by automatically launching your app for everyone. In this scenario, you want to avoid displaying any windows that aren’t related to the shared activity. For example, if people need to sign in before joining the activity, be sure to present this task in an autodismissible window that disappears as soon as people finish providing the required input.\n\nHelp people enter a shared activity together, but don’t force them. When one participant changes their level of immersion, the system tells you so you can synchronize the experience for everyone. Before synchronizing, check whether changing a person’s level of immersion would disrupt their current task; if it would, offer them the choice to join the updated experience. For example, if someone is editing content in an unshared window, you might present an alert that lets them choose to transition. For guidance, see Immersive experiences.\n\nSmoothly update a shared activity when new participants join. When someone joins an in-progress activity, you need to integrate them without disrupting the experience for everyone else. For example, it’s important to update shared immersive content to keep all participants synchronized. Also, consider designing ways to accommodate up to five participants in your arrangement, updating their positions as necessary.\n\nMaintaining a shared context\n\nWhen your shared activity runs in a Full Space, the system helps your app maintain a shared context by using a single coordinate system to arrange your content and all participants, automatically synchronizing the size, position, and orientation of your app for each person. You’re responsible for displaying objects, playing sounds, and supporting interactions in ways that enhance the feeling of sharing the experience.\n\nMake sure everyone views the same state of your app. If your app has more than one state — such as a media app that provides both minimal and theater-like viewing modes — you need to avoid letting different participants view different states, because doing so can diminish people’s sense of being together in a shared space. The exception to this is when someone needs to temporarily exit a shared activity; for guidance, see Adjusting a shared context.\n\nUse Spatial Audio to enrich your shared activity. Playing Spatial Audio can help you strengthen the realism of the shared experience. For guidance, see Playing audio.\n\nWhen possible, let people discover natural, social solutions to confusions or conflicts that might arise during a shared experience. For example, if only one participant at a time can use a virtual tool, avoid displaying UI, like tool-use controls or notifications, and instead let people speak or gesture to the group when they want to use the tool. If conflicts can arise during your shared activity — for example, if multiple people try to change the same content at the same time — consider implementing a simple rule, like last change wins, and letting people use the rule to define behavior that’s acceptable to the group.\n\nHelp people keep their private and shared content separate. By default, the system clearly differentiates a shared window from windows that aren’t shared. For example, when people use Music to listen together, the shared Music window appears as a new window for everyone, while any individual’s open library window remains separate and unshared. If your app can open multiple windows, help people share the one they want and make it easy for them to distinguish shared from unshared windows. If possible, also let people drag content they want to share from a private window to a shared one.\n\nPrivate\nSelected\nShared\n\nContent in a TV window is private by default.\n\nAdjusting a shared context\n\nSometimes, it makes sense to adjust the shared context of a shared activity so each participant can customize their experience, such as for comfort or accessibility. In other situations, strictly maintaining a shared context might decrease people’s enjoyment of the experience. For example, when content has only one ideal viewing angle, each participant might need their own.\n\nLet people personalize their experience without changing the experience for others. For example, people might need to adjust various settings, like volume or subtitles, to make views and interactions accessible or make themselves more comfortable.\n\nWhen sharing, two people watching the same video can choose separately whether to turn subtitles on or off.\n\nConsider when to give each participant a unique view of the shared content. Some content looks best when people view it from a specific perspective. For example, people can share a Spatial Capture in a standard window with other people’s Spatial Personas visible around it. However, to perceive the depth in a Spatial Capture, each person needs to view it from the right angle. In this scenario, a person could temporarily transition to a Full Space that hides other participants and ensures the right viewing angle for them, even while everyone else continues to view the standard window and each other. If it makes sense to provide per-person versions of your shared content, be sure to continue synchronizing people’s positions and your app context to maintain the shared experience.\n\nMake it easy for people to exit and rejoin a shared activity. Sometimes, people need to perform an unrelated task in your app or a different one, or engage with their physical surroundings. When this happens, you need to present a control or other component that lets people quickly rejoin the shared activity. In addition, you might want to continue displaying the shared content so people can stay informed about the ongoing shared experience while they’re hiding their Spatial Persona.\n\nResources\nRelated\n\nAuto-renewable subscriptions\n\nDeveloper documentation\n\nGroup Activities\n\nVideos\nDesign spatial SharePlay experiences\nDesign for Group Activities\nBuild custom experiences with Group Activities\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nDecember 5, 2023\n\n\t\n\nAdded artwork for visionOS.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nDecember 19, 2022\n\n\t\n\nClarified guidance for helping nonsubscribers join a group activity."
  },
  {
    "title": "Motion",
    "url": "https://developer.apple.com/design/human-interface-guidelines/motion",
    "html": "Motion\nIn all platforms, beautiful, fluid motions bring the interface to life, conveying status, providing feedback and instruction, and enriching the visual experience.\n\nMany system components automatically include motion, letting you offer familiar and consistent experiences throughout your app or game. If you design custom motion, prefer intentional animations that keep people oriented and comfortable, provide clear feedback in response to their actions, and help them learn your interface without getting overwhelmed.\n\nBest practices\n\nUse subtle motion to communicate. Motion can be a great way to enhance feedback and understanding by showing how things change, what will happen when people perform an action, and what they can do next. For example, when people minimize a window in macOS, it moves smoothly from the desktop to the Dock so they know exactly where it went; when people set up Face ID, the system briefly describes what they need to do and helps them during scanning by visually changing the tick marks encircling their face; in visionOS, window controls expand gently when people look at them.\n\nAdd motion purposefully, supporting the experience without overshadowing it. Don’t add motion for the sake of adding motion. Gratuitous or excessive animation can distract people and may make them feel disconnected or physically uncomfortable.\n\nMake motion optional. There are several reasons why people might not experience movement in your app, so it’s essential to avoid using it as the only way to communicate important information. For example, people can turn on the Reduce Motion accessibility setting to minimize or eliminate animations. For guidance, see Motion.\n\nStrive for realism and credibility. In non game apps, accurate, realistic motion can help people understand how something works, but motion that doesn’t make sense — or appears to defy physical laws — can make them feel disoriented. For example, if someone reveals a view by sliding it down from the top, they don’t expect to dismiss the view by sliding it to the side.\n\nPrefer brief, precise animations. Animations that combine brevity and precision tend to feel more lightweight and less intrusive, and often convey information more effectively. For example, when people tap the list button in Weather on iPhone, the fullscreen view of the current city quickly transitions to the list view, pinpointing the city’s location in the list. In visionOS, when people tap a panorama in Photos, the view smoothly expands to fill the space in front of them, helping them visually track the transition.\n\nIn general, avoid adding motion to interactions that occur frequently. The system already provides subtle animations for interactions with standard interface elements. Avoid making people spend extra time paying attention to unnecessary motion every time they interact with your content.\n\nConsider using animated symbols where it makes sense. When you use SF Symbols 5 or later, you can apply animations to SF Symbols or custom symbols. For guidance, see Animations.\n\nPlatform considerations\n\nNo additional considerations for iOS, iPadOS, macOS, or tvOS.\n\nvisionOS\n\nIn visionOS, motion can subtly communicate context, draw attention to information, and enrich immersive experiences. Combined with depth, motion also provides essential feedback when people look at interactive elements. It’s crucial to use motion in ways that people appreciate without causing distraction, confusion, or discomfort.\n\nWhile wearing Apple Vision Pro, people use passthrough to view their physical surroundings while they interact with virtual content. Because both the surroundings and app content can be visible at the same time, people can be uncomfortable if the movement of virtual content makes them feel like they or their surroundings are moving instead. In general, the larger a moving virtual object is, the harder it can be to maintain the feeling of stability.\n\nHelp people remain comfortable when showing the movement of large virtual objects. If an object is large enough to fill a lot of the field of view, occluding most or all of passthrough, people can naturally perceive it as being part of their surroundings. To help people perceive the object’s movement without making them think that they or their surroundings are moving, you can increase the object’s translucency, helping people see through it, or lower its contrast to make its motion less noticeable. If you need to show a transition between large objects, consider using a fade or an effect that brings content in and out of focus to minimize potential disorientation.\n\nNote\n\nPeople can experience discomfort even when they’re the ones moving a large virtual object, such as a window. Although adjusting translucency and contrast can help in this scenario, too, consider keeping a window’s size fairly small.\n\nBe mindful of displaying moving content that occupies most of a window. In this scenario, people can sometimes perceive the window’s content as being the world around them and the movement as being their own. If you need to display moving content in a window, consider restricting the size of the window or the content area so people can continue to see their surroundings. If you create the motion shown in the window, prefer maintaining a horizontal horizon, keeping the speed low, and avoiding sudden or unexpected camera movements. You might also want to use low-contrast textures, which can make motion less perceptible.\n\nBe gentle with rotational motions. When you rotate the virtual world, either by rotating the camera, or by rotating large virtual objects around someone, the rotation can upset the person’s sense of stability, especially when the rotation is fast or lasts too long. Instead, consider using instantaneous directional changes during a quick fade-out.\n\nAvoid showing objects that oscillate in a sustained way. In particular, you want to avoid showing an oscillation that has a frequency of around 0.2Hz because people can be very sensitive to this frequency. If you need to show objects oscillating, aim to keep the amplitude low and consider making the content translucent.\n\nEliminate unnecessary motion. Because people look at the object they want to interact with, displaying motion where it might cause them to look away can be frustrating. Prefer using motion only when you need to encourage people to look at something important.\n\nAs much as possible, avoid displaying motion at the edges of a person’s field of view. People can be particularly sensitive to motion that occurs in their peripheral vision: in addition to being distracting, such motion can even cause discomfort because it can make people feel like they or their surroundings are moving. If you need to show an object moving in the periphery during an immersive experience, make sure the object’s brightness level is similar to the rest of the visible content.\n\nConsider giving people a stationary frame of reference. It can be easier for people to handle visual movement when it’s contained within an area that doesn’t move. In contrast, people can feel unwell when it appears that everything around them is moving.\n\nAvoid encouraging people to move their head while they’re experiencing visual rotation. When virtual objects appear to rotate around them, people typically need to keep their eyes in a consistent direction to avoid feeling unwell.\n\nConsider using fades when you need to relocate an object. When an object moves from one location to another, people naturally watch the movement. If such movement doesn’t communicate anything useful to people, you can fade the object out before moving it and fade it back in after it’s in the new location.\n\nwatchOS\n\nSwiftUI provides a powerful and streamlined way to add motion to your app. If you need to use WatchKit to animate layout and appearance changes — or create animated image sequences — see WKInterfaceImage.\n\nNote\n\nAll layout- and appearance-based animations automatically include built-in easing that plays at the start and end of the animation. You can’t turn off or customize easing.\n\nResources\nRelated\n\nFeedback\n\nAccessibility\n\nSpatial layout\n\nImmersive experiences\n\nDeveloper documentation\n\nAnimating views and transitions — SwiftUI\n\nVideos\nDesign considerations for vision and motion\nPrinciples of spatial design\nDesigning Fluid Interfaces\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nFebruary 2, 2024\n\n\t\n\nEnhanced guidance for minimizing peripheral motion in visionOS apps.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS."
  },
  {
    "title": "App icons",
    "url": "https://developer.apple.com/design/human-interface-guidelines/app-icons",
    "html": "App icons\nA unique, memorable icon communicates the purpose and personality of your app or game and can help people recognize your product at a glance in the App Store and on their devices.\n\nBeautiful app icons are an important part of the user experience on all Apple platforms and every app and game must have one. Each platform defines a slightly different style for app icons, so you want to create a design that adapts well to different shapes and levels of detail while maintaining strong visual consistency and messaging. To download templates that help you create icons for each platform, see Apple Design Resources. For guidance on creating other types of icons, see Icons.\n\nBest practices\n\nEmbrace simplicity. Simple icons tend to be easier for people to understand and recognize. Find a concept or element that captures the essence of your app or game, make it the core idea of the icon, and express it in a simple, unique way. Avoid adding too many details, because they can be hard to discern and can make an icon appear muddy, especially at smaller sizes. Prefer a simple background that puts the emphasis on the primary image — you don’t need to fill the entire icon with content.\n\nCreate a design that works well on multiple platforms so it feels at home on each. If your app or game runs on more than one platform, use similar images and color palettes in all icons while rendering them in the style that’s appropriate for each platform. For example, in iOS, tvOS, and watchOS, the Music app icon depicts the white musical notes on a red background using a streamlined, graphical style; macOS displays the same elements, while adding shadow that makes the notes look recessed. Similarly, the Music app icon in visionOS uses the same color scheme and content, but offers a true 3D appearance when viewed while wearing the device.\n\nPrefer including text only when it’s an essential part of your experience or brand. Text in icons is often too small to read easily, can make an icon appear cluttered, and doesn’t support accessibility or localization. In some contexts, the app name appears near the icon, making it redundant to display the name within it. Although using a mnemonic like the first letter of your app’s name can help people recognize your app or game, avoid including nonessential words that tell people what to do with it — like “Watch” or “Play” — or context-specific terms like “New” or “For visionOS.”\n\nPrefer graphical images to photos and avoid replicating UI components in your icon. Photos are full of details that don’t work well when viewed at small sizes. Instead of using a photo, create a graphic representation of the content that emphasizes the features you want people to notice. Similarly, if your app has an interface that people recognize, don’t just replicate standard UI components or use app screenshots in your icon.\n\nIf needed, optimize your icon for the specific sizes the system displays in places like Spotlight search results, Settings, and notifications. For iOS, iPadOS, and watchOS, you can tell Xcode to generate all sizes from your 1024×1024 px App Store icon, or you can provide assets for some or all individual icon sizes. For macOS and tvOS, you need to supply all sizes; for visionOS, you supply a single 1024x1024 px asset. If you create your own versions of your app icon, make sure the image remains distinct at all sizes. For example, you might remove fine details and unnecessary features, simplifying the image and exaggerating primary features. If you need to make such changes, keep them subtle so that your app icon remains visually consistent in every context.\n\nThe 512x512 px Safari app icon (on the left) uses a circle of tick marks to indicate degrees; the 16x16 px version of the icon (on the right) doesn’t include this detail.\n\nDesign your icon as a full-bleed square image. On most platforms, the system applies a mask that automatically adjusts icon corners to match the platform’s aesthetic. For example, visionOS and watchOS automatically apply a circular mask. Although the system applies the rounded rectangle appearance to the icon of an app created with Mac Catalyst, you need to create your macOS app icon in the correct rounded shape; for guidance, see macOS. Note that for the layered app icons in visionOS and tvOS, full-bleed content is best suited to the bottom layer. For downloadable production templates that help you create app icons for each platform, see Apple Design Resources.\n\nConsider offering an alternate app icon. In iOS, iPadOS, and tvOS, and iPadOS and iOS apps running in visionOS, people can choose an alternate version of an icon, which can strengthen their connection with the app or game and enhance their experience. For example, a sports app might offer different icons for different teams. Make sure that each alternate app icon you design remains closely related to your content and experience; avoid creating a version that people might mistake for the icon of a different app. When people want to switch to an alternate icon, they can visit your app’s settings.\n\nNote\n\nAs with a primary app icon, alternate app icons are also subject to app review and must adhere to the App Store Review Guidelines.\n\nDon’t use replicas of Apple hardware products. Apple products are copyrighted and can’t be reproduced in your app icons.\n\nPlatform considerations\niOS, iPadOS\n\nDon’t add an overlay or border to your Settings icon. iOS automatically adds a 1-pixel stroke to all icons so that they look good on the white background of Settings.\n\nmacOS\n\nIn macOS, app icons share a common set of visual attributes, including a rounded-rectangle shape, front-facing perspective, level position, and uniform drop shadow. Rooted in the macOS design language, these attributes showcase the lifelike rendering style people expect in macOS while presenting a harmonious user experience.\n\nConsider depicting a familiar tool to communicate what people use your app to do. To give context to your app’s purpose, you can use the icon background to portray the tool’s environment or the items it affects. For example, the TextEdit icon pairs a mechanical pencil with a sheet of lined paper to suggest a utilitarian writing experience. After you create a detailed, realistic image of a tool, it often works well to let it float just above the background and extend slightly past the icon boundaries. If you do this, make sure the tool remains visually unified with the background and doesn’t overwhelm the rounded-rectangle shape.\n\nIf you depict real objects in your app icon, make them look like they’re made of physical materials and have actual mass. Consider replicating the characteristics of substances like fabric, glass, paper, and metal to convey an object’s weight and feel. For example, the Xcode app icon features a hammer that looks like it has a steel head and polymer grip.\n\nUse the drop shadow in the icon-design template. The app-icon template includes the system-defined drop shadow that helps your app icon coordinate with other macOS icons.\n\nConsider using interior shadows and highlights to add definition and realism. For example, the Mail app icon uses both shadows and highlights to give the envelope authenticity and to suggest that the flap is slightly open. In icons that include a tool that floats above a background — such as TextEdit or Xcode — interior shadows can strengthen the perception of depth and make the tool look real. Use shadows and highlights that suggest a light source facing the icon, positioned just above center and tilted slightly downward.\n\nAvoid defining contours that suggest a shape other than a rounded rectangle. In rare cases, you might want to fine-tune the basic app icon shape, but doing so risks creating an icon that looks like it doesn’t belong in macOS. If you must alter the shape, prefer subtle adjustments that continue to express a rounded rectangle silhouette.\n\nKeep primary content within the icon grid bounding box; keep all content within the outer bounding box. If an icon’s primary content extends beyond the icon grid bounding box, it tends to look out of place. If you overlay a tool on your icon, it works well to align the tool’s top edge with the outer bounding box and its bottom edge with the inner bounding box, as shown below. You can use the grid to help you position items within an icon and to ensure that centered inner elements like circles use a size that’s consistent with other icons in the system.\n\ntvOS\n\ntvOS app icons use between two and five layers to create a sense of depth and vitality as people bring them into focus. For guidance, see Layered images.\n\nUse appropriate layer separation. If your icon includes a logo, separate the logo from the background. If your icon includes text, bring the text to the front so it’s not hidden by other layers when the parallax effect occurs.\n\nPlay\n\nUse gradients and shadows cautiously. Background gradients and vignettes can clash with the parallax effect. For gradients, prefer top-to-bottom, light-to-dark styles. Shadows usually look best as sharp, hard-edged tints that are baked into the background layer and aren’t visible when the app icon is stationary.\n\nLeverage varying opacity levels to increase the sense of depth and liveliness. Creative use of opacity can make your icon stand out. For example, the Photos icon separates its centerpiece into multiple layers that contain translucent pieces, bringing greater liveliness to the design.\n\nMake sure your Home Screen icon adheres to safe-zone specifications. During focus and parallax, the system may crop content around the edges of your app icon as the icon scales and moves. To ensure your icon’s content isn’t cropped too tightly, allow some additional space as shown in tvOS app icon sizes.\n\nvisionOS\n\nA visionOS app icon is circular and includes a background layer and one or two layers on top, producing a three-dimensional object that subtly expands when people view it.\n\nBackground\n\nLayer 1\n\nLayer 2\n\nPlay\n\nThe system enhances an app icon’s visual dimensionality by adding shadows to convey a sense of depth between layers and using the alpha channel of the upper layers to create an embossed appearance.\n\nPlay\n\nUse a full-bleed, non-transparent image for the background layer of your icon. In contrast, avoid using full-bleed images in non-background layers. Using transparent areas in non-background layers lets visual information from underlying layers show through.\n\nProvide each layer as a square image. The system uses a circular mask to crop all layers of an app icon and providing layers that are already cropped can negatively impact the result.\n\nAvoid using large areas of semi transparency. Although using semi-transparent pixels to anti-alias a shape works fine, a large semi-transparent area doesn’t blend well with alpha and can combine with the system-provided shadow to produce a dark result. Unless you’re anti-aliasing a shape, keep pixels fully opaque or transparent.\n\nIn non-background layers, prefer well-defined edges between distinct regions that are either fully opaque or transparent pixels. The system-drawn highlights and shadows look best when non-background layers contain shapes that have clearly defined edges. Avoid using soft or feathered edges.\n\nAvoid adding a shape that’s intended to look like a hole or concave area to the background layer. The system-added shadow and specular highlights can make such a shape stand out instead of recede.\n\nKeep distinct shapes or images in non-background layers close to the center. The circular mask can clip a shape or image when it’s too close to the edge, causing the shape to look off-center and spoiling the icon’s three-dimensional appearance.\n\nAvoid visual elements that give the appearance of depth from a fixed vantage point. If people can perceive the depth of a layer’s inner element from only one perspective, this depth disappears when they look at the icon. Avoid using a technique like extruding the bottom edge of a layer’s element, because doing so conflicts with the perpendicular perspective of other app icons.\n\nAvoid adding custom specular highlights or shadows to your visionOS app icon. In addition to interfering with the system-provided visual effects, custom highlights and shadows are static whereas visionOS supplies dynamic ones.\n\nFor developer guidance, see Configuring your app icon.\n\nwatchOS\n\nA watchOS app icon is circular and displays no accompanying text.\n\nAvoid using black for your icon’s background. Lighten a black background or add a border so the icon doesn’t blend into the display background.\n\nSpecifications\nApp icon attributes\n\nApp icons in all platforms use the PNG format and support the following color spaces:\n\nsRGB (color)\n\nGray Gamma 2.2 (grayscale)\n\nIn addition, app icons in iOS, iPadOS, macOS, tvOS, and watchOS support Display P3 (wide-gamut color).\n\nThe layers, transparency, and corner radius of an app icon can vary per platform. Specifically:\n\nPlatform\n\n\t\n\nLayers\n\n\t\n\nTransparency\n\n\t\n\nAsset shape\n\n\n\n\niOS, iPadOS\n\n\t\n\nSingle\n\n\t\n\nNo\n\n\t\n\nSquare\n\n\n\n\nmacOS\n\n\t\n\nSingle\n\n\t\n\nYes, as appropriate\n\n\t\n\nSquare with rounded corners\n\n\n\n\ntvOS\n\n\t\n\nMultiple\n\n\t\n\nNo\n\n\t\n\nRectangle\n\n\n\n\nvisionOS\n\n\t\n\nMultiple\n\n\t\n\nYes, as appropriate\n\n\t\n\nSquare\n\n\n\n\nwatchOS\n\n\t\n\nSingle\n\n\t\n\nNo\n\n\t\n\nSquare\n\nApp icon sizes\niOS, iPadOS app icon sizes\n\nYou need to provide a large version of your app icon, measuring 1024x1024 pixels, to display in the App Store. You can let the system automatically scale down your large app icon to produce all other sizes, or — if you want to customize the appearance of the icon at specific sizes — you can supply multiple versions.\n\n@2x (pixels)\n\n\t\n\n@3x (pixels) iPhone only\n\n\t\n\nUsage\n\n\n\n\n120x120\n\n\t\n\n180x180\n\n\t\n\nHome Screen on iPhone\n\n\n\n\n167x167\n\n\t\n\n–\n\n\t\n\nHome Screen on iPad Pro\n\n\n\n\n152x152\n\n\t\n\n–\n\n\t\n\nHome Screen on iPad, iPad mini\n\n\n\n\n80x80\n\n\t\n\n120x120\n\n\t\n\nSpotlight on iPhone, iPad Pro, iPad, iPad mini\n\n\n\n\n58x58\n\n\t\n\n87x87\n\n\t\n\nSettings on iPhone, iPad Pro, iPad, iPad mini\n\n\n\n\n76x76\n\n\t\n\n114x114\n\n\t\n\nNotifications on iPhone, iPad Pro, iPad, iPad mini\n\nmacOS app icon sizes\n\nFor the App Store, create a 1024x1024 px version of your macOS app icon. In addition, you also need to supply the icon in the following sizes.\n\n@1x (pixels)\n\n\t\n\n@2x (pixels)\n\n\n\n\n512x512\n\n\t\n\n1024x1024\n\n\n\n\n256x256\n\n\t\n\n512x512\n\n\n\n\n128x128\n\n\t\n\n256x256\n\n\n\n\n32x32\n\n\t\n\n64x64\n\n\n\n\n16x16\n\n\t\n\n32x32\n\ntvOS app icon sizes\n\nFor the App Store, create a 1280x768 px version of your tvOS app icon. In addition, you also need to supply the icon in the following sizes.\n\n@1x (pixels)\n\n\t\n\n@2x (pixels)\n\n\t\n\nUsage\n\n\n\n\n400x240\n\n\t\n\n800x480\n\n\t\n\nHome Screen\n\nConsider allowing a safe zone in your Home Screen icon. During focus and parallax, content around the edges of your app icon may be cropped as the icon scales and moves. To ensure your icon’s content isn’t cropped too tightly, you might want to include some additional breathing room.\n\nvisionOS app icon sizes\n\nCreate an app icon that measures 1024x1024 px for display in the Home View.\n\nwatchOS app icon sizes\n\nFor the App Store, create a 1024x1024 px version of your watchOS app icon. You can let the system automatically scale this version down to all other sizes, or — if you want to customize the appearance of your app icon at specific sizes — you can supply the sizes listed in the following table. All icon dimensions are shown in pixels @2x.\n\n38mm\n\n\t\n\n40mm\n\n\t\n\n41mm\n\n\t\n\n42mm\n\n\t\n\n44mm\n\n\t\n\n45mm\n\n\t\n\n49mm\n\n\t\n\nUsage\n\n\n\n\n80x80\n\n\t\n\n88x88\n\n\t\n\n92x92\n\n\t\n\n80x80\n\n\t\n\n100x100\n\n\t\n\n102x102\n\n\t\n\n108x108\n\n\t\n\nHome Screen\n\n\n\n\n48x48\n\n\t\n\n55x55\n\n\t\n\n58x58\n\n\t\n\n55x55\n\n\t\n\n58x58\n\n\t\n\n66x66\n\n\t\n\n66x66\n\n\t\n\nNotification Center\n\n\n\n\n172x172\n\n\t\n\n196x196\n\n\t\n\n196x196\n\n\t\n\n196x196\n\n\t\n\n216x216\n\n\t\n\n234x234\n\n\t\n\n258x258\n\n\t\n\nShort look\n\nIf you have a companion iPhone app, you also need to supply your watchOS app icon in the following sizes.\n\n@2x (pixels)\n\n\t\n\n@3x (pixels)\n\n\n\n\n58x58\n\n\t\n\n87x87\n\nResources\nRelated\n\nApple Design Resources\n\nDeveloper documentation\n\nConfiguring your app icon — Xcode\n\nVideos\nApp Icon Design\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJanuary 31, 2024\n\n\t\n\nClarified platform availability for alternate app icons.\n\n\n\n\nJune 21, 2023\n\n\t\n\nUpdated to include guidance for visionOS.\n\n\n\n\nSeptember 14, 2022\n\n\t\n\nAdded specifications for Apple Watch Ultra."
  },
  {
    "title": "Spatial layout",
    "url": "https://developer.apple.com/design/human-interface-guidelines/spatial-layout",
    "html": "Spatial layout\nSpatial layout techniques help you take advantage of the infinite canvas of Apple Vision Pro and present your content in engaging, comfortable ways.\n\nField of view\n\nA person’s field of view is the space they can see without moving their head. The dimensions of an individual’s field of view while wearing Apple Vision Pro vary based on factors like the way people configure the Light Seal and the extent of their peripheral acuity.\n\nImportant\n\nThe system doesn’t provide information about a person’s field of view.\n\nCenter important content within the field of view. By default, visionOS launches an app directly in front of people, placing it within their field of view. In an immersive experience, you can help people keep their attention on important content by keeping it centered and not displaying distracting motion or bright, high-contrast objects in the periphery.\n\nUpright viewing\nAngled viewing\nPlay\n\nAvoid anchoring content to the wearer’s head. Although you generally want your app to stay within the field of view, anchoring content so that it remains statically in front of someone can make them feel stuck, confined, and uncomfortable, especially if the content obscures a lot of passthrough and decreases the apparent stability of their surroundings. Instead, anchor content in people’s space, giving them the freedom to look around naturally and view different objects in different locations.\n\nDepth\n\nPeople rely on visual cues like distance, occlusion, and shadow to perceive depth and make sense of their surroundings. On Apple Vision Pro, the system automatically uses visual effects like color temperature, reflections, and shadow to help people perceive the depth of virtual content. When people move a virtual object in space — or when they change their position relative to that object — the visual effects change the object’s apparent depth, making the experience feel more lifelike.\n\nBecause people can view your content from any angle, incorporating small amounts of depth throughout your interface — even in standard windows — can help it look more natural. When you use SwiftUI, the system adds visual effects to views in a 2D window, making them appear to have depth. For developer guidance, see Adding 3D content to your app.\n\nIf you need to present content with additional depth, you use RealityKit to create a 3D object (for developer guidance, see RealityKit). You can display the 3D object anywhere, or you can use a volume, which is a component that displays 3D content. A volume is similar to a window, but without a visible frame. For guidance, see Volumes.\n\nPlay\n\nProvide visual cues that accurately communicate the depth of your content. If visual cues are missing or they conflict with a person’s real-world experience, people can experience visual discomfort.\n\nUse depth to communicate hierarchy. Depth helps an object appear to stand out from surrounding content, making it more noticeable. People also tend to notice changes in depth: for example, when a sheet appears over a window, the window recedes along the z-axis, allowing the sheet to come forward and become visually prominent.\n\nIn general, avoid adding depth to text. Text that appears to hover above its background is difficult to read, which slows people down and can sometimes cause vision discomfort.\n\nMake sure depth adds value. In general, you want to use depth to clarify and delight — you don’t need to use it everywhere. As you add depth to your design, think about the size and relative importance of objects. Depth is great for visually separating large, important elements in your app, like making a tab bar or toolbar stand out from a window, but it may not work as well on small objects. For example, using depth to make a button’s symbol stand out from its background can make the button less legible and harder to use. Also review how often you use different depths throughout your app. People need to refocus their eyes to perceive each difference in depth, and doing so too often or quickly can be tiring.\n\nScale\n\nvisionOS defines two types of scale to preserve the appearance of depth while optimizing usability.\n\nDynamic scale helps content remain comfortably legible and interactive regardless of its proximity to people. Specifically, visionOS automatically increases a window’s scale as it moves away from the wearer and decreases it as the window moves closer, making the window appear to maintain the same size at all distances.\n\nPlay\n\nFixed scale means that an object maintains the same scale regardless of its proximity to people. A fixed-scale object appears smaller when it moves farther from the viewer along the z-axis, similar to the way an object in a person’s physical surroundings looks smaller when it’s far away than it does when it’s close up.\n\nPlay\n\nTo support dynamic scaling and the appearance of depth, visionOS defines a point as an angle, in contrast to other platforms, which define a point as a number of pixels that can vary with the resolution of a 2D display.\n\nConsider using fixed scale when you want a virtual object to look exactly like a physical object. For example, you might want to maintain the life-size scale of a product you offer so it can look more realistic when people view it in their space. Because interactive content needs to scale to maintain usability as it gets closer or farther away, prefer applying fixed scale sparingly, reserving it for noninteractive objects that need it.\n\nBest practices\n\nAvoid displaying too many windows. Too many windows can obscure people’s surroundings, making them feel overwhelmed, constricted, and even uncomfortable. It can also make it cumbersome for people to relocate an app because it means moving a lot of windows.\n\nPrioritize standard, indirect gestures. People can make an indirect gesture without moving their hand into their field of view. In contrast, making a direct gesture requires people to touch the virtual object with their finger, which can be tiring, especially when the object is positioned at or above their line of sight. In visionOS, people use indirect gestures to perform the standard gestures they already know. When you prioritize indirect gestures, people can use them to interact with any object they look at, whatever its distance. If you support direct gestures, consider reserving them for nearby objects that invite close inspection or manipulation for short periods of time. For guidance, see Gestures > visionOS.\n\nRely on the Digital Crown to help people recenter windows in their field of view. When people move or turn their head, content might no longer appear where they want it to. If this happens, people can press the Digital Crown when they want to recenter content in front of them. Your app doesn’t need to do anything to support this action.\n\nInclude enough space around interactive components to make them easy for people to look at. When people use their eyes to select an interactive element, visionOS responds by displaying a visual hover effect that helps them confirm the element is the one they want. It’s crucial to include enough space around an interactive component so that looking at it is easy and comfortable, while preventing the hover effect from crowding other content. For example, place buttons so their centers are at least 60 points apart.\n\nLet people use your app with minimal or no physical movement. Unless some physical movement is essential to your experience, help everyone enjoy it while remaining stationary.\n\nUse the floor to help you place a large immersive experience. If your immersive experience includes content that extends up from the floor, place it using a flat horizontal plane. Aligning this plane with the floor can help it blend seamlessly with people’s surroundings and provide a more intuitive experience.\n\nTo learn more about windows and volumes in visionOS, see Windows > visionOS; for guidance on laying content within a window, see Layout > visionOS.\n\nPlatform considerations\n\nNot supported in iOS, iPadOS, macOS, tvOS, or watchOS.\n\nResources\nRelated\n\nEyes\n\nLayout\n\nImmersive experiences\n\nDeveloper documentation\n\nPresenting windows and spaces — visionOS\n\nPositioning and sizing windows — visionOS\n\nAdding 3D content to your app — visionOS\n\nVideos\nDesign for spatial user interfaces\nPrinciples of spatial design\nDesign for spatial input\nChange log\n\nDate\n\n\t\n\nChanges\n\n\n\n\nJune 21, 2023\n\n\t\n\nNew page."
  },
  {
    "title": "Foundations",
    "url": "https://developer.apple.com/design/human-interface-guidelines/foundations",
    "html": "Foundations\nUnderstand how fundamental design elements help you create rich experiences.\nAccessibility\nApp icons\nBranding\nColor\nDark Mode\nIcons\nImages\nImmersive experiences\nInclusion\nLayout\nMaterials\nMotion\nPrivacy\nRight to left\nSF Symbols\nSpatial layout\nTypography\nWriting"
  },
  {
    "title": "Platforms",
    "url": "https://developer.apple.com/design/human-interface-guidelines/platforms",
    "html": "Platforms\nCreate an app or game that feels at home on every platform you support.\nDesigning for iOS\nDesigning for iPadOS\nDesigning for macOS\nDesigning for tvOS\nDesigning for visionOS\nDesigning for watchOS"
  },
  {
    "title": "Inputs",
    "url": "https://developer.apple.com/design/human-interface-guidelines/inputs",
    "html": "Inputs\nLearn about the various methods people use to control your app or game and enter data.\nAction button\nApple Pencil and Scribble\nDigital Crown\nEyes\nFocus and selection\nGame controllers\nGestures\nGyroscope and accelerometer\nKeyboards\nNearby interactions\nPointing devices\nRemotes\nTouch Bar"
  },
  {
    "title": "Human Interface Guidelines",
    "url": "https://developer.apple.com/design/human-interface-guidelines",
    "html": "Human Interface Guidelines\nThe HIG contains guidance and best practices that can help you design a great experience for any Apple platform.\nNew and updated\nDesigning for visionOS\nSpatial layout\nImmersive experiences\nOrnaments\nEyes\nSharePlay\nFeatured\nApp icons\nMotion\nButtons\nWindows\nFocus and selection\nGestures\nTopics\nPlatforms\nCreate an app or game that feels at home on every platform you support.\nLearn More\nFoundations\nUnderstand how fundamental design elements help you create rich experiences.\nLearn More\nPatterns\nGet design guidance for supporting common user actions, tasks, and experiences.\nLearn More\nComponents\nLearn how to use and customize system-defined components to give people a familiar and consistent experience.\nLearn More\nInputs\nLearn about the various methods people use to control your app or game and enter data.\nLearn More\nTechnologies\nDiscover the Apple technologies, features, and services you can integrate into your app or game.\nLearn More"
  }
]