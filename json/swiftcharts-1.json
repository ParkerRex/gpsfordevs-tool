[
  {
    "title": "label(extendPastBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axistick/length/label(extendpastby:)",
    "html": "Parameters\nextendPastBy\n\nThe additional length to add past the associated label."
  },
  {
    "title": "longestLabel(extendPastBy:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axistick/length/longestlabel(extendpastby:)",
    "html": "Parameters\nextendPastBy\n\nThe additional length to add past the associated label."
  },
  {
    "title": "init(xUnit:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedchartscrolltargetbehavior/init(xunit:yunit:xmajoralignment:ymajoralignment:limitbehavior:)",
    "html": "Parameters\nxUnit\n\nThe alignment unit for the x-axis.\n\nyUnit\n\nThe alignment unit for the y-axis.\n\nxMajorAlignment\n\nThe behavior for aligning to major values along the x-axis.\n\nyMajorAlignment\n\nThe behavior for aligning to major values along the y-axis.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "init(xUnit:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedchartscrolltargetbehavior/init(xunit:ymatching:xmajoralignment:ymajoralignment:limitbehavior:)",
    "html": "Parameters\nxUnit\n\nThe alignment unit for the x-axis.\n\nyComponents\n\nThe alignment components for the y-axis.\n\nxMajorAlignment\n\nThe behavior for aligning to major values along the x-axis.\n\nyMajorAlignment\n\nThe behavior for aligning to major values along the y-axis.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "greedy(priority:minimumSpacing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabelcollisionresolution/greedy(priority:minimumspacing:)",
    "html": "Parameters\npriority\n\nThe priority of the label. A label with higher priority will get placed first by the greedy algorithm.\n\nminimumSpacing\n\nThe minimum spacing between the label and its adjacent labels."
  },
  {
    "title": "init(centered:length:stroke:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axistick/init(centered:length:stroke:)-93rvh",
    "html": "Parameters\ncentered\n\nWhether to center the grid line between two axis values.\n\nlength\n\nThe length of the tick.\n\nstroke\n\nThe style of the stroke."
  },
  {
    "title": "init(centered:length:stroke:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axistick/init(centered:length:stroke:)-7azpy",
    "html": "Parameters\ncentered\n\nWhether to center the grid line between two axis values.\n\nlength\n\nThe length of the tick.\n\nstroke\n\nThe style of the stroke."
  },
  {
    "title": "foregroundStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismark/foregroundstyle(_:)",
    "html": "Parameters\nstyle\n\nThe color or pattern to use when filling in the foreground elements.\n\nReturn Value\n\nAn axis content that uses the given foreground style."
  },
  {
    "title": "automatic(includesZero:reversed:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/scaledomain/automatic(includeszero:reversed:)",
    "html": "Parameters\nincludesZero\n\nWhether the scale domain should include zero (only applicable for numerical values).\n\nreversed\n\nWhether the scale domain should be reversed (e.g., 100 … 0)."
  },
  {
    "title": "updateTarget(_:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/updatetarget(_:context:)-8j5z4",
    "html": "Discussion\n\nThe system calls this method in two main cases:\n\nWhen a scroll gesture ends, it calculates where it would naturally scroll to using its deceleration rate. The system provides this calculated value as the target of this method.\n\nWhen a scrollable view’s size changes, it calculates where it should be scrolled given the new size and provides this calculates value as the target of this method.\n\nYou can implement this method to override the calculated target which will have the scrollable view scroll to a different position than it would otherwise."
  },
  {
    "title": "init(xStart:xEnd:y:height:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/barmark/init(xstart:xend:y:height:)",
    "html": "Parameters\nxStart\n\nThe value plotted with x start.\n\nxEnd\n\nThe value plotted with x end.\n\ny\n\nThe value plotted with y.\n\nheight\n\nThe bar height. If height is nil, the default bar size will be applied.\n\nDiscussion\n\nUse this initializer to show horizontal intervals for one or more categories:\n\nChart(data) {\n   BarMark(\n       xStart: .value(\"Start Time\", $0.start),\n       xEnd: .value(\"End Time\", $0.end),\n       y: .value(\"Job\", $0.job)\n   )\n}\n\n\nSee Also\nCreating a Bar Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a bar mark that plots values with x and its y interval.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots a value on x with fixed y interval.\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values on y with fixed x interval."
  },
  {
    "title": "init(angle:innerRadius:outerRadius:angularInset:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/sectormark/init(angle:innerradius:outerradius:angularinset:)",
    "html": "Parameters\nangle\n\nA plottable value that will map to the angular size of the sector. It’s either a value that the angle within the full circle will be proportional with, or a value range for explicit start/end angles.\n\ninnerRadius\n\nThe inner radius of the sector. It is either a size in points, or a .ratio or .inset relative to the outer radius.\n\nouterRadius\n\nThe outer radius of the sector. It is either a size in points, or a .ratio or .inset relative to the available plot area.\n\nangularInset\n\nA radius for the corners of the sector.\n\nDiscussion\n\nUse this initializer to map angular positions to a sector for each data element."
  },
  {
    "title": "init(xMatching:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedchartscrolltargetbehavior/init(xmatching:yunit:xmajoralignment:ymajoralignment:limitbehavior:)",
    "html": "Parameters\nxComponents\n\nThe alignment components for the x-axis.\n\nyUnit\n\nThe alignment unit for the y-axis.\n\nxMajorAlignment\n\nThe behavior for aligning to major values along the x-axis.\n\nyMajorAlignment\n\nThe behavior for aligning to major values along the y-axis.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "init(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/pointmark/init(x:y:)-44ke9",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\ny\n\nThe value plotted with y.\n\nDiscussion\n\nUse this initializer to plot one property with x and another property with y:\n\nChart(data) {\n    PointMark(\n        x: .value(\"Wing Length\", $0.wingLength),\n        y: .value(\"Wing Length\", $0.wingWidth)\n    )\n}\n\n\nFor more background, see the first example used in PointMark which shows the structure that contains the wingLength and wingHeight properties."
  },
  {
    "title": "AxisTick.Length | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axistick/length",
    "html": "Topics\nType Properties\nstatic var automatic: AxisTick.Length\nAutomatically determines the tick length.\nstatic var label: AxisTick.Length\nDescribes a tick that extends to its associated label.\nstatic var longestLabel: AxisTick.Length\nDescribes a tick that extends to the longest label on the axis.\nType Methods\nstatic func label(extendPastBy: CGFloat) -> AxisTick.Length\nDescribes a tick that extends to its associated label, with the given additional length.\nstatic func longestLabel(extendPastBy: CGFloat) -> AxisTick.Length\nDescribes a tick that extends to the longest label on the axis, with the given additional length.\nRelationships\nConforms To\nCustomStringConvertible"
  },
  {
    "title": "automatic(includesZero:reversed:dataType:modifyInferredDomain:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/scaledomain/automatic(includeszero:reversed:datatype:modifyinferreddomain:)",
    "html": "Parameters\nincludesZero\n\nWhether the scale domain should include zero (only applicable for numerical values).\n\nreversed\n\nWhether the scale domain should be reversed (e.g., 100 … 0).\n\ndataType\n\nThe type of a data value in the domain.\n\nmodifyInferredDomain\n\nA closure that modifies the automatically inferred domain.\n\nDiscussion\n\nYou can modify the inferred scale domain with a function.\n\nFor instance, you can sort the categories in a categorical x scale:\n\nChart { ... }\n.chartXScale(domain: .automatic(dataType: String.self) { domain in\n    // Sort the categories.\n    domain.sort(using: .localizedStandard)\n    // Include a new category.\n    domain.append(\"Other\")\n}\n\n\nYou can also modify a numerical scale to include a given value. The example below sets the y scale to always include the value 100.\n\nChart { ... }\n.chartYScale(domain: .automatic(dataType: Double.self) { domain in\n    domain.append(100)\n}\n\n\nNote that the modifyInferredDomain closure is used as part of the automatic scale domain inference process. The result of it can be further modified by the reversed parameter, and to include values from axis marks. To set the scale domain to an exact value, specify the value as the domain: argument directly instead of using .automatic."
  },
  {
    "title": "init(xStart:xEnd:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/barmark/init(xstart:xend:ystart:yend:)-98wo9",
    "html": "Parameters\nxStart\n\nThe value plotted with x start.\n\nxEnd\n\nThe value plotted with x end.\n\ny\n\nThe y position. If y is nil, the bar will be centered vertically by default.\n\nheight\n\nThe bar height. If height is nil, the default bar size will be applied.\n\nDiscussion\n\nUse this initializer to show horizontal intervals for one category:\n\nChart(data) {\n   BarMark(\n       xStart: .value(\"Start Time\", $0.start),\n       xEnd: .value(\"End Time\", $0.end)\n   )\n}\n"
  },
  {
    "title": "always | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedlimitbehavior/always",
    "html": "Discussion\n\nAlways limit the amount of marks that can be scrolled."
  },
  {
    "title": "init(x:yStart:yEnd:width:stacking:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/barmark/init(x:ystart:yend:width:stacking:)",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\nyStart\n\nThe y start position. If yStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nyEnd\n\nThe y end position. If yEnd is nil then the rectangle will end at the trailing edge of the plotting area.\n\nwidth\n\nThe bar width. If width is nil, the default bar size will be applied.\n\nstacking\n\nThe stacking method for the bars with the same categorical/date values. If stacking is nil, the bars will not be stacked.\n\nDiscussion\n\nUse this initializer to create a chart with a single horizontal bar:\n\nChart(data) {\n    BarMark(\n        x: .value(\"Profit\", $0.profit)\n    )\n    .foregroundStyle(by: .value(\"Product Category\", $0.productCategory))\n}\n\n\nSee Also\nCreating a Bar Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a bar mark that plots values with x and its y interval.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a bar mark that plots values with its x interval and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values on y with fixed x interval."
  },
  {
    "title": "init(xStart:xEnd:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/barmark/init(xstart:xend:ystart:yend:)-7541n",
    "html": "Parameters\nxStart\n\nThe x start position. If xStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nxEnd\n\nThe x end position. If xStart is nil then the rectangle will end at the trailing edge of the plotting area.\n\nyStart\n\nThe value plotted to y start.\n\nyEnd\n\nThe value plotted to y end.\n\nDiscussion\n\nUse this initializer to show vertical intervals for one category:\n\nChart(data) {\n   BarMark(\n       yStart: .value(\"Start Time\", $0.start),\n       yEnd: .value(\"End Time\", $0.end)\n   )\n}\n"
  },
  {
    "title": "init(x:y:width:height:stacking:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/barmark/init(x:y:width:height:stacking:)",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\ny\n\nThe value plotted with y.\n\nwidth\n\nThe bar width. If width is nil, the default bar size will be applied.\n\nheight\n\nThe bar height. If height is nil, the default bar size will be applied.\n\nstacking\n\nThe stacking method for the bars with the same categorical/date values. If stacking is nil, the bars will not be stacked.\n\nDiscussion\n\nUse this initializer to create a chart with one or more bars. For horizontal bars, plot categories or dates with y and numbers with x. For vertical bars, plot categories or dates with x and numbers with y:\n\nChart(data) {\n    BarMark(\n        x: .value(\"Department\", $0.department),\n        y: .value(\"Profit\", $0.profit)\n    )\n}\n\n\nSee Also\nCreating a Bar Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a bar mark that plots values with x and its y interval.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a bar mark that plots values with its x interval and y.\ninit<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots a value on x with fixed y interval.\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values on y with fixed x interval."
  },
  {
    "title": "init(x:yStart:yEnd:width:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/barmark/init(x:ystart:yend:width:)",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\nyStart\n\nThe value plotted with y start.\n\nyEnd\n\nThe value plotted with y end.\n\nwidth\n\nThe bar width. If width is nil, the default bar size will be applied.\n\nDiscussion\n\nUse this initializer to show vertical intervals for one or more categories:\n\nChart(data) {\n   BarMark(\n       x: .value(\"Job\", $0.job),\n       yStart: .value(\"Start Time\", $0.start),\n       yEnd: .value(\"End Time\", $0.end)\n   )\n}\n\n\nSee Also\nCreating a Bar Mark\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a bar mark that plots values with its x interval and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots a value on x with fixed y interval.\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values on y with fixed x interval."
  },
  {
    "title": "init(xMatching:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedchartscrolltargetbehavior/init(xmatching:ymatching:xmajoralignment:ymajoralignment:limitbehavior:)",
    "html": "Parameters\nxComponents\n\nThe alignment components for the x-axis.\n\nyComponents\n\nThe alignment components for the y-axis.\n\nxMajorAlignment\n\nThe behavior for aligning to major values along the x-axis.\n\nyMajorAlignment\n\nThe behavior for aligning to major values along the y-axis.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "init(unit:majorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedchartscrolltargetbehavior/init(unit:majoralignment:limitbehavior:)",
    "html": "Parameters\nunit\n\nThe alignment unit. When the user finishes a scroll gesture, the chart will snap to align to the given unit or the end of the domain.\n\nmajorAlignment\n\nThe behavior for aligning to major values. When the user swipes on the chart, the chart will snap to the next or previous major unit depending on the swipe direction. When enabled, the default major unit is a page.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "init(matching:majorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedchartscrolltargetbehavior/init(matching:majoralignment:limitbehavior:)",
    "html": "Parameters\ncomponents\n\nThe components to search for when aligning after the user finishes scrolling.\n\nmajorAlignment\n\nThe behavior for aligning to major values. When the user swipes on the chart, the chart will snap to the next or previous major unit depending on the swipe direction. When enabled, the default major unit is a page.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "init(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/pointmark/init(x:y:)-9hppd",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\ny\n\nThe y position. If y is nil, the bar will be centered vertically by default.\n\nDiscussion\n\nUse this initializer to plot a property with x:\n\nChart(data) {\n    PointMark(\n        x: .value(\"Weight\", $0.weight)\n    )\n}\n\n\nFor more background, see the first example used in PointMark which shows the structure that contains the weight property."
  },
  {
    "title": "init(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/pointmark/init(x:y:)-9dswq",
    "html": "Parameters\nx\n\nThe x position. If x is nil, the bar will be centered horizontally by default.\n\ny\n\nThe value plotted with y.\n\nDiscussion\n\nUse this initializer to plot a property to y:\n\nChart(data) {\n    PointMark(\n        y: .value(\"Weight\", $0.weight)\n    )\n}\n\n\nFor more background, see the first example used in PointMark which shows the structure that contains the weight property."
  },
  {
    "title": "perceptualUnitRect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartsymbolshape/perceptualunitrect",
    "html": "Required"
  },
  {
    "title": "foregroundStyle(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/foregroundstyle(for:)",
    "html": "Parameters\nvalue\n\nThe data value.\n\nReturn Value\n\nThe foreground style corresponding to the data value, or nil if the data value is incompatible with the chart."
  },
  {
    "title": "init(centered:stroke:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisgridline/init(centered:stroke:)",
    "html": "Parameters\ncentered\n\nWhether to center the grid line between two axis values.\n\nstroke\n\nThe stroke style of the grid line."
  },
  {
    "title": "compositingLayer(style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axiscontent/compositinglayer(style:)",
    "html": "Parameters\nstyle\n\nA closure that applies view modifiers to the compositing layer."
  },
  {
    "title": "VisualValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/scalerange/visualvalue",
    "html": "Required"
  },
  {
    "title": "strokeBorder(lineWidth:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/basicchartsymbolshape/strokeborder(linewidth:)",
    "html": "Parameters\nlineWidth\n\nThe stroke line width.\n\nReturn Value\n\nA symbol shape that strokes the shape of self."
  },
  {
    "title": "AnnotationOverflowResolution.Boundary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/annotationoverflowresolution/boundary",
    "html": "Topics\nType Properties\nstatic let automatic: AnnotationOverflowResolution.Boundary\nAutomatically determines the boundary to use.\nstatic let chart: AnnotationOverflowResolution.Boundary\nThe entire chart.\nstatic let plot: AnnotationOverflowResolution.Boundary\nThe plot area."
  },
  {
    "title": "updateTarget(_:context:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/updatetarget(_:context:)-9lz1s",
    "html": "Required Default implementation provided.\n\nDefault Implementations\nChartScrollTargetBehavior Implementations\nfunc updateTarget(inout ScrollTarget, context: ScrollTargetBehaviorContext)\nUpdates the proposed target that a scrollable view should scroll to."
  },
  {
    "title": "valueAligned(matching:majorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/valuealigned(matching:majoralignment:limitbehavior:)",
    "html": "Parameters\ncomponents\n\nThe components to search for when aligning after the user finishes scrolling.\n\nmajorAlignment\n\nThe behavior for aligning to major values. When the user swipes on the chart, the chart will snap to the next or previous major unit depending on the swipe direction. When enabled, the default major unit is a page.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "valueAligned(unit:majorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/valuealigned(unit:majoralignment:limitbehavior:)",
    "html": "Parameters\nunit\n\nThe alignment unit. When the user finishes a scroll gesture, the chart will snap to align to the given unit or the end of the domain.\n\nmajorAlignment\n\nThe behavior for aligning to major values. When the user swipes on the chart, the chart will snap to the next or previous major unit depending on the swipe direction. When enabled, the default major unit is a page.\n\nlimitBehavior\n\nThe scroll limit behavior.\n\nDiscussion\n\nUse this method to create a scroll behavior that aligns to desired units.\n\nChart(data) {\n    BarMark(\n        x: .value(\"x\", $0.x),\n        y: .value(\"y\", $0.y)\n    )\n}\n.chartScrollableAxes(.horizontal)\n.chartScrollTargetBehavior(.valueAligned(unit: 10))\n\n\nThe value aligned behavior can be set to align to major units on swipes. When enabled, the default major unit is a page and the behavior on swipe is similar to the .paged behavior."
  },
  {
    "title": "valueAligned(xMatching:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/valuealigned(xmatching:ymatching:xmajoralignment:ymajoralignment:limitbehavior:)",
    "html": "Parameters\nxComponents\n\nThe alignment components for the x-axis.\n\nyComponents\n\nThe alignment components for the y-axis.\n\nxMajorAlignment\n\nThe behavior for aligning to major values along the x-axis.\n\nyMajorAlignment\n\nThe behavior for aligning to major values along the y-axis.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "valueAligned(xMatching:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/valuealigned(xmatching:yunit:xmajoralignment:ymajoralignment:limitbehavior:)",
    "html": "Parameters\nxComponents\n\nThe alignment components for the x-axis.\n\nyUnit\n\nThe alignment unit for the y-axis.\n\nxMajorAlignment\n\nThe behavior for aligning to major values along the x-axis.\n\nyMajorAlignment\n\nThe behavior for aligning to major values along the y-axis.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "valueAligned(xUnit:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/valuealigned(xunit:ymatching:xmajoralignment:ymajoralignment:limitbehavior:)",
    "html": "Parameters\nxUnit\n\nThe alignment unit for the x-axis.\n\nyComponents\n\nThe alignment components for the y-axis.\n\nxMajorAlignment\n\nThe behavior for aligning to major values along the x-axis.\n\nyMajorAlignment\n\nThe behavior for aligning to major values along the y-axis.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "valueAligned(xUnit:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/valuealigned(xunit:yunit:xmajoralignment:ymajoralignment:limitbehavior:)",
    "html": "Parameters\nxUnit\n\nThe alignment unit for the x-axis.\n\nyUnit\n\nThe alignment unit for the y-axis.\n\nxMajorAlignment\n\nThe behavior for aligning to major values along the x-axis.\n\nyMajorAlignment\n\nThe behavior for aligning to major values along the y-axis.\n\nlimitBehavior\n\nThe scroll limit behavior."
  },
  {
    "title": "ScrollTargetBehavior Implementations | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior/scrolltargetbehavior-implementations",
    "html": "Topics\nInstance Methods\nfunc updateTarget(inout ScrollTarget, context: ScrollTargetBehaviorContext)\nUpdates the proposed target that a scrollable view should scroll to."
  },
  {
    "title": "automatic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedlimitbehavior/automatic",
    "html": "Discussion\n\nBy default, the behavior will be limited for scroll views that are compact along the scrollable axis."
  },
  {
    "title": "never | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedlimitbehavior/never",
    "html": "Discussion\n\nNever limit the amount of marks that can be scrolled."
  },
  {
    "title": "unit(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/majorvaluealignment/unit(_:)",
    "html": "Parameters\nunit\n\nThe alignment unit."
  },
  {
    "title": "matching(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/majorvaluealignment/matching(_:)",
    "html": "Parameters\ncomponents\n\nThe alignment components."
  },
  {
    "title": "init(xStart:xEnd:y:height:stacking:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/barmark/init(xstart:xend:y:height:stacking:)",
    "html": "Parameters\nxStart\n\nThe x start position. If xStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nxEnd\n\nThe x end position. If xStart is nil then the rectangle will end at the trailing edge of the plotting area.\n\ny\n\nThe value plotted with y.\n\nheight\n\nThe bar height. If height is nil, the default bar size will be applied.\n\nstacking\n\nThe stacking method for the bars with the same categorical/date values. If stacking is nil, the bars will not be stacked.\n\nDiscussion\n\nUse this initializer to create a chart with a single vertical bar:\n\nChart(data) {\n    BarMark(\n        y: .value(\"Profit\", $0.profit)\n    )\n    .foregroundStyle(by: .value(\"Product Category\", $0.productCategory))\n}\n\n\nSee Also\nCreating a Bar Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a bar mark that plots values with x and its y interval.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a bar mark that plots values with its x interval and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots a value on x with fixed y interval."
  },
  {
    "title": "plotSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/plotsize",
    "html": "Discussion\n\nThe plot is the area between the x and y axes, not including the axes themselves."
  },
  {
    "title": "index(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/datebins/index(for:)",
    "html": "Parameters\nvalue\n\nThe date value to get the index for.\n\nReturn Value\n\nThe bin index."
  },
  {
    "title": "value(atY:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/value(aty:as:)",
    "html": "Parameters\nposition\n\nThe position at which to obtain the y data value. It should be relative to the plot.\n\nReturn Value\n\nThe data value at the given position."
  },
  {
    "title": "value(atX:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/value(atx:as:)",
    "html": "Parameters\nposition\n\nThe position at which to obtain the x data value. It should be relative to the plot.\n\nReturn Value\n\nThe data value at the given position."
  },
  {
    "title": "value(atAngle:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/value(atangle:as:)",
    "html": "Parameters\nangle\n\nThe angle, relative to the plot center, where the 12 o’clock position is interpreted as zero degrees, increasing clockwise.\n\nReturn Value\n\nThe data value at the given position."
  },
  {
    "title": "value(at:as:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/value(at:as:)",
    "html": "Parameters\nposition\n\nThe position at which to obtain the data values. It should be relative to the plot.\n\nReturn Value\n\nA tuple of the x and y data values at the given position."
  },
  {
    "title": "symbolSize(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/symbolsize(for:)",
    "html": "Parameters\nvalue\n\nThe data value.\n\nReturn Value\n\nThe symbol size corresponding to the data value, or nil if the data value is incompatible with the chart."
  },
  {
    "title": "symbol(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/symbol(for:)",
    "html": "Parameters\nvalue\n\nThe data value.\n\nReturn Value\n\nThe symbol corresponding to the data value, or nil if the data value is incompatible with the chart."
  },
  {
    "title": "position(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/position(for:)",
    "html": "Parameters\npoint\n\nA tuple of x and y data values.\n\nReturn Value\n\nThe position corresponding to the data values."
  },
  {
    "title": "lineStyle(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/linestyle(for:)",
    "html": "Parameters\nvalue\n\nThe data value.\n\nReturn Value\n\nThe line style corresponding to the data value, or nil if the data value is incompatible with the chart."
  },
  {
    "title": "position(forX:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/position(forx:)",
    "html": "Parameters\nvalue\n\nA data value.\n\nReturn Value\n\nThe position corresponding to the data value."
  },
  {
    "title": "position(forY:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/position(fory:)",
    "html": "Parameters\nvalue\n\nA data value.\n\nReturn Value\n\nThe position corresponding to the data value."
  },
  {
    "title": "AnnotationOverflowResolution.Strategy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/annotationoverflowresolution/strategy",
    "html": "Topics\nType Properties\nstatic let automatic: AnnotationOverflowResolution.Strategy\nAutomatically chooses a overflow resolution.\nstatic let disabled: AnnotationOverflowResolution.Strategy\nPlaces the annotation “as-is”.\nstatic let fit: AnnotationOverflowResolution.Strategy\nFits the annotation automatically, adjusting its position to ensure it doesn’t overflow.\nstatic let padScale: AnnotationOverflowResolution.Strategy\nPads the scale of the chart to make space for the annotation.\nType Methods\nstatic func fit(to: AnnotationOverflowResolution.Boundary) -> AnnotationOverflowResolution.Strategy\nFits the annotation to the given boundary, adjusting its position to ensure it doesn’t overflow."
  },
  {
    "title": "init(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/annotationoverflowresolution/init(x:y:)",
    "html": "Discussion\n\nParameters:\n\nx: The strategy to resolve X overflow.\n\ny: The strategy to resolve Y overflow."
  },
  {
    "title": "init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabel/init(centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:content:)",
    "html": "Parameters\ncentered\n\nWhether to center the label between two axis values. If nil, default to true for discrete data, false to continuous data.\n\nanchor\n\nThe anchor point on the bounding box of the text element that attaches to the position.\n\nmultiLabelAlignment\n\nHow labels along the axis are aligned with each other.\n\ncollisionResolution\n\nHow labels that collide with others are resolved.\n\noffsetsMarks\n\nWhether to offset marks to accomodate for the space used by the label.\n\norientation\n\nThe orientatin of the label.\n\nhorizontalSpacing\n\nThe horizontal spacing of the label. If nil, a default spacing will be used.\n\nverticalSpacing\n\nThe vertical spacing of the label.\n\ncontent\n\nThe label content."
  },
  {
    "title": "angle(at:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/angle(at:)",
    "html": "Parameters\nposition\n\nThe position at which to obtain the data value. It should be relative to the plot.\n\nReturn Value\n\nThe angle relative to the plot area center."
  },
  {
    "title": "plotFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/plotframe",
    "html": "Discussion\n\nThe plot is the area between the x and y axes, not including the axes themselves. If the chart is scrollable, the plot frame includes both visible and invisible portions of the plot.\n\nYou can convert the anchor to a frame using a GeometryProxy."
  },
  {
    "title": "plotContainerFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/plotcontainerframe",
    "html": "Discussion\n\nThe plot is the area between the x and y axes, not including the axes themselves. If the chart is scrollable, the plot container frame only includes the visible portion of the plot. Otherwise, it is the same as plotFrame.\n\nYou can convert the anchor to a frame using a GeometryProxy. Below is an example adding a border to the plot container:\n\nChart { ... }\n.chartOverlay { chartProxy in\n    GeometryReader { geometryProxy in\n        // Get the plot container's frame in the GeometryReader's coordinate space.\n        // This frame stays the same when the chart scrolls.\n        // In this example, we add a border to the plot container by stroking the frame.\n        if let plotContainerFrame = chartProxy.plotContainerFrame {\n            Path(geometryProxy[plotContainerFrame])\n                .stroke(.black, lineWidth: 1)\n                .allowsHitTesting(false)\n        }\n    }\n}\n"
  },
  {
    "title": "plotAreaSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/plotareasize",
    "html": "Discussion\n\nThe plot is the area between the x and y axes, not including the axes themselves.\n\nA chart must exist in the context of the chart proxy."
  },
  {
    "title": "init(data:desiredCount:minimumStride:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(data:desiredcount:minimumstride:)-3txi5",
    "html": "Parameters\ndata\n\nThe given data values.\n\ndesiredCount\n\nThe desired number of bins for the given data. If nil, infer the number of bins automatically from data using Scott’s normal reference rule capped at 200.\n\nminimumStride\n\nThe minimum allowed bin size.\n\nReturn Value\n\nThe inferred bins."
  },
  {
    "title": "init(range:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(range:count:)-6hip8",
    "html": "Parameters\nrange\n\nThe range of the bins. The first bin starts at the lower bound of the range, and the last bin ends at the upper bound of the range.\n\ncount\n\nThe exact number of bins."
  },
  {
    "title": "init(range:count:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(range:count:)-7975l",
    "html": "Parameters\nrange\n\nThe range of the bins. The first bin starts at the lower bound of the range, and the last bin ends at the upper bound of the range.\n\ncount\n\nThe exact number of bins."
  },
  {
    "title": "init(data:desiredCount:minimumStride:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(data:desiredcount:minimumstride:)-8pvv7",
    "html": "Parameters\ndata\n\nThe given data values.\n\ndesiredCount\n\nThe desired number of bins for the given data. If nil, infer the number of bins automatically from data using Scott’s normal reference rule capped at 200.\n\nminimumStride\n\nThe minimum allowed bin size.\n\nReturn Value\n\nThe inferred bins."
  },
  {
    "title": "init(size:range:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(size:range:)-5me6y",
    "html": "Parameters\nsize\n\nThe size of the bins.\n\nrange\n\nThe range of the data the bins cover.\n\nReturn Value\n\nThe bins."
  },
  {
    "title": "init(range:desiredCount:calendar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/datebins/init(range:desiredcount:calendar:)",
    "html": "Parameters\nrange\n\nThe range the bins should cover.\n\ndesiredCount\n\nThe desired number of bins for the given data.\n\nReturn Value\n\nThe inferred bins."
  },
  {
    "title": "init(thresholds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/datebins/init(thresholds:)",
    "html": "Parameters\nthresholds\n\nThe threshold values that surround the bins.\n\nReturn Value\n\nThe bins."
  },
  {
    "title": "init(unit:by:range:calendar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/datebins/init(unit:by:range:calendar:)",
    "html": "Parameters\nunit\n\nThe size of the bins.\n\nstride\n\nThe number of components for each bin.\n\nrange\n\nThe range of the data the bins cover.\n\ncalendar\n\nThe calendar to use.\n\nReturn Value\n\nThe bins."
  },
  {
    "title": "init(timeInterval:range:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/datebins/init(timeinterval:range:)",
    "html": "Parameters\ntimeInterval\n\nThe size of the bins.\n\nrange\n\nThe range of the data the bins cover.\n\nReturn Value\n\nThe bins."
  },
  {
    "title": "thresholds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/datebins/thresholds",
    "html": "Return Value\n\nThe bin thresholds that surround the bins."
  },
  {
    "title": "positionRange(forX:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/positionrange(forx:)",
    "html": "Parameters\nvalue\n\nThe data value.\n\nReturn Value\n\nThe position range corresponding to the data value.\n\nDiscussion\n\nFor a continuous data value, the returned range is a single point. For a categorical data value, the returned range is the range of positions that correspond to the given category."
  },
  {
    "title": "positionRange(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/positionrange(for:)",
    "html": "Parameters\nvalue\n\nThe data value.\n\nReturn Value\n\nThe position range corresponding to the data values.\n\nDiscussion\n\nFor a continuous data value, the returned range is a single point. For a categorical data value, the returned range is the range of positions that correspond to the given category."
  },
  {
    "title": "positionRange(forY:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy/positionrange(fory:)",
    "html": "Parameters\nvalue\n\nThe data value.\n\nReturn Value\n\nThe position range corresponding to the data value.\n\nDiscussion\n\nFor a continuous data value, the returned range is a single point. For a categorical data value, the returned range is the range of positions that correspond to the given category."
  },
  {
    "title": "init(x:yStart:yEnd:width:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(x:ystart:yend:width:)-xhqp",
    "html": "Discussion\n\nx: The value plotted with x.\n\nwidth: The rectangle width. If width is nil then step size will be used. If there is no step size a default width (in pts) will be used.\n\nyStart: The y start position. If yStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nyEnd: The y end position. If yEnd is nil then the rectangle will end at the trailing edge of the plotting area.\n\nDiscussion\n\nUse this initializer to map an x position to a rectangle for each data element. Optionally, specify the width, yStart position, or yEnd positions of the rectangles.\n\nThe example below omits the optional width, yStart, and yEnd parameters and uses a number scale starting at (0,0) and ending at (6,6). The rectangle has the coordinates: (0,0), (0,6), (3,6), (3,0).\n\nChart(data) {\n    RectangleMark(\n        x: .value(\"Rect X\", 3)\n    )\n    .opacity(0.2)\n\n\n    PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n"
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/accessibilitylabel(_:)-40zjp",
    "html": "See Also\nConfiguring accessibility\nfunc accessibilityHidden(Bool) -> some ChartContent\nSpecifies whether to hide this chart content from system accessibility features.\nfunc accessibilityIdentifier(String) -> some ChartContent\nAdds an identifier string to the chart content.\nfunc accessibilityLabel<S>(S) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel(Text) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue(LocalizedStringKey) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue<S>(S) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue(Text) -> some ChartContent\nAdds a description of the value that the chart content contains."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-9bdsw",
    "html": "Parameters\nlabel\n\nThe label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "init(primitivePlottable:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottable/init(primitiveplottable:)-55ed4",
    "html": "Required Default implementations provided.\n\nDefault Implementations\nPlottable Implementations\ninit?(primitivePlottable: Self.PrimitivePlottable)\nCreates a value with a primitive value. If the conversion is not possible, returns nil.\ninit?(primitivePlottable: Self.RawValue)\nCreates a value with a primitive value. If the conversion is not possible, returns nil.\nAvailable when Self conforms to RawRepresentable and RawValue is String."
  },
  {
    "title": "init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabel/init(centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:)",
    "html": "Parameters\ncentered\n\nWhether to center the label between two axis values. If nil, default to true for discrete data, false to continuous data.\n\nanchor\n\nThe anchor point on the bounding box of the text element that attaches to the position.\n\nmultiLabelAlignment\n\nHow labels along the axis are aligned with each other.\n\ncollisionResolution\n\nHow labels that collide with others are resolved.\n\noffsetsMarks\n\nWhether to offset marks to accomodate for the space used by the label.\n\norientation\n\nThe orientatin of the label.\n\nhorizontalSpacing\n\nThe horizontal spacing of the label. If nil, a default spacing will be used.\n\nverticalSpacing\n\nThe vertical spacing of the label. If nil, a default spacing will be used."
  },
  {
    "title": "init(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabel/init(format:centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:)",
    "html": "Parameters\nformat\n\nThe format for the text.\n\ncentered\n\nWhether to center the label between two axis values. If nil, default to true for discrete data, false to continuous data.\n\nanchor\n\nThe anchor point on the bounding box of the text element that attaches to the position.\n\nmultiLabelAlignment\n\nHow labels along the axis are aligned with each other.\n\ncollisionResolution\n\nHow labels that collide with others are resolved.\n\noffsetsMarks\n\nWhether to offset marks to accomodate for the space used by the label.\n\norientation\n\nThe orientatin of the label.\n\nhorizontalSpacing\n\nThe horizontal spacing of the label. If nil, a default spacing will be used.\n\nverticalSpacing\n\nThe vertical spacing of the label."
  },
  {
    "title": "init(preset:position:values:stroke:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks/init(preset:position:values:stroke:)-8uk65",
    "html": "Parameters\npreset\n\nThe preset of the axis markers.\n\nposition\n\nThe position of the axis markers.\n\nvalues\n\nThe values of the axis markers.\n\nstroke\n\nThe stroke to use for grid lines and ticks."
  },
  {
    "title": "init(preset:position:values:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks/init(preset:position:values:content:)-7414i",
    "html": "Parameters\npreset\n\nThe preset of the axis markers.\n\nposition\n\nThe position of the axis markers.\n\nvalues\n\nThe values of the axis markers.\n\ncontent\n\nA result builder that returns the content of the axis marker for a given axis value."
  },
  {
    "title": "init(preset:position:values:stroke:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks/init(preset:position:values:stroke:)-8xkl5",
    "html": "Parameters\npreset\n\nThe preset of the axis markers.\n\nposition\n\nThe position of the axis markers.\n\nvalues\n\nThe values of the axis markers.\n\nstroke\n\nThe stroke to use for grid lines and ticks."
  },
  {
    "title": "init(preset:position:values:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks/init(preset:position:values:content:)-6b1jq",
    "html": "Parameters\npreset\n\nThe preset of the axis markers.\n\nposition\n\nThe position of the axis markers.\n\nvalues\n\nThe values of the axis markers.\n\ncontent\n\nA result builder that returns the content of the axis marker."
  },
  {
    "title": "init(preset:position:values:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks/init(preset:position:values:content:)-4a4x7",
    "html": "Parameters\npreset\n\nThe preset of the axis markers.\n\nposition\n\nThe position of the axis markers.\n\nvalues\n\nThe values of the axis markers.\n\ncontent\n\nA result builder that returns the content of the axis marker."
  },
  {
    "title": "init(preset:position:values:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks/init(preset:position:values:content:)-1n9x7",
    "html": "Parameters\npreset\n\nThe preset of the axis markers.\n\nposition\n\nThe position of the axis markers.\n\nvalues\n\nThe values of the axis markers.\n\ncontent\n\nA result builder that returns the content of the axis marker for a given axis value."
  },
  {
    "title": "init(format:preset:position:values:stroke:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks/init(format:preset:position:values:stroke:)-8fe1o",
    "html": "Parameters\nformat\n\nThe format to use for the labels.\n\npreset\n\nThe preset of the axis markers.\n\nposition\n\nThe position of the axis markers.\n\nvalues\n\nThe values of the axis markers.\n\nstroke\n\nThe stroke to use for grid lines and ticks."
  },
  {
    "title": "init(format:preset:position:values:stroke:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks/init(format:preset:position:values:stroke:)-98cpl",
    "html": "Parameters\nformat\n\nThe format to use for the labels.\n\npreset\n\nThe preset of the axis markers.\n\nposition\n\nThe position of the axis markers.\n\nvalues\n\nThe values of the axis markers.\n\nstroke\n\nThe stroke to use for grid lines and ticks."
  },
  {
    "title": "symmetricLog(slopeAtZero:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/scaletype/symmetriclog(slopeatzero:)",
    "html": "Parameters\nslopeAtZero\n\nA positive constant that controls the slope of the symmetric log function at zero."
  },
  {
    "title": "font(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismark/font(_:)",
    "html": "Parameters\nfont\n\nThe default font to use in this axis content.\n\nReturn Value\n\nAn axis content that uses the given default font for text."
  },
  {
    "title": "power(exponent:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/scaletype/power(exponent:)",
    "html": "Parameters\nexponent\n\nThe exponent of the power function."
  },
  {
    "title": "init(range:desiredCount:minimumStride:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(range:desiredcount:minimumstride:)-32ok2",
    "html": "Parameters\nrange\n\nThe range the bins should cover.\n\ndesiredCount\n\nThe desired number of bins for the given data. If nil, infer the number automatically from data.\n\nminimumStride\n\nThe minimum allowed bin size.\n\nReturn Value\n\nThe inferred bins."
  },
  {
    "title": "init(size:range:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(size:range:)-3ach2",
    "html": "Parameters\nsize\n\nThe size of the bins.\n\nrange\n\nThe range of the data the bins cover.\n\nReturn Value\n\nThe bins."
  },
  {
    "title": "init(data:desiredCount:calendar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/datebins/init(data:desiredcount:calendar:)",
    "html": "Parameters\ndata\n\nThe given data values.\n\ndesiredCount\n\nThe desired number of bins for the given data. If nil, infer the number of bins automatically from data using Scott’s normal reference rule capped at 200.\n\nReturn Value\n\nThe inferred bins."
  },
  {
    "title": "init(range:desiredCount:minimumStride:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(range:desiredcount:minimumstride:)-4qxfa",
    "html": "Parameters\nrange\n\nThe range the bins should cover.\n\ndesiredCount\n\nThe desired number of bins for the given data. If nil, infer the number automatically from data.\n\nminimumStride\n\nThe minimum allowed bin size.\n\nReturn Value\n\nThe inferred bins."
  },
  {
    "title": "thresholds | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/thresholds",
    "html": "Return Value\n\nThe bin thresholds that surround the bins."
  },
  {
    "title": "index(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/index(for:)",
    "html": "Parameters\nvalue\n\nThe number value to get the index for.\n\nReturn Value\n\nThe bin index."
  },
  {
    "title": "init(thresholds:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins/init(thresholds:)",
    "html": "Parameters\nthresholds\n\nThe threshold values that surround the bins.\n\nReturn Value\n\nThe bins."
  },
  {
    "title": "init(floatLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markdimension/init(floatliteral:)",
    "html": "Parameters\nvalue\n\nThe width or height."
  },
  {
    "title": "init(xStart:xEnd:y:series:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/areamark/init(xstart:xend:y:series:)",
    "html": "Parameters\nxStart\n\nThe starting horizontal position for the mark.\n\nxEnd\n\nThe ending horizontal position for the mark.\n\ny\n\nThe vertical position for the mark.\n\nseries\n\nA series to associate the mark with.\n\nDiscussion\n\nThe initializer behaves like init(xStart:xEnd:y:), except that you can indicate which region each interval belongs to by providing a value for the series input. This enables you to plot more than one region on a single chart.\n\nTo plot a series of values that have a vertical interval, use init(x:yStart:yEnd:series:) instead.\n\nSee Also\nCreating a range area chart\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates an area mark that plots values with a vertical interval.\ninit<X, Y, S>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, series: PlottableValue<S>)\nCreates an area mark that plots values with a vertical interval and associates it with the specified series.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>)\nCreates an area mark that plots values with a horizontal interval."
  },
  {
    "title": "init(_:id:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chart/init(_:id:content:)",
    "html": "Parameters\ndata\n\nA collection of data.\n\nid\n\nA key path that represents a property of each data element that can act as a unique identifier for that element. Ensure that this property conforms to the Hashable protocol.\n\ncontent\n\nThe mark that the chart should draw for each element in the data collection.\n\nDiscussion\n\nThis initializer wraps the data that you provide as input in an implicit ForEach structure. If you need to represent more than one series in your chart, use init(content:) instead.\n\nSee Also\nCreating a Chart\ninit(content: () -> Content)\nCreates a chart composed of any number of data series and individual marks.\ninit<Data, C>(Data, content: (Data.Element) -> C)\nCreates a chart composed of a series of identifiable marks."
  },
  {
    "title": "init(x:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/areamark/init(x:ystart:yend:)",
    "html": "Parameters\nx\n\nThe horizontal position for the mark.\n\nyStart\n\nThe starting vertical position for the mark.\n\nyEnd\n\nThe ending vertical position for the mark.\n\nDiscussion\n\nUse this initializer to create a range area chart with vertical intervals. For example you can create a region that encompasses all the temperatures over the course of a day, across a number of days:\n\nChart(data) { day in\n    AreaMark(\n        x: .value(\"Date\", day.date),\n        yStart: .value(\"Minimum Temperature\", minimumTemperature),\n        yEnd: .value(\"Maximum Temperature\", day.maximumTemperature)\n    )\n}\n\n\nIf you want to plot values that have a horiztonal interval, use init(xStart:xEnd:y:) instead.\n\nSee Also\nCreating a range area chart\ninit<X, Y, S>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, series: PlottableValue<S>)\nCreates an area mark that plots values with a vertical interval and associates it with the specified series.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>)\nCreates an area mark that plots values with a horizontal interval.\ninit<X, Y, S>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>)\nCreates an area mark that plots values with a horizontal interval and associates it with the specified series."
  },
  {
    "title": "init(xStart:xEnd:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rulemark/init(xstart:xend:y:)-6jsoi",
    "html": "Parameters\nxStart\n\nThe value plotted with x start.\n\nxEnd\n\nThe value plotted with x end.\n\ny\n\nThe y position. If y is nil, the rule will be centered vertically by default.\n\nDiscussion\n\nUse this initializer to create a horizontal rule at x positions from xStart to xEnd for a single y position:\n\nChart(data) {\n    RuleMark(\n        xStart: .value(\"Start Date\", $0.startDate),\n        xEnd: .value(\"End Date\", $0.endDate)\n    )\n}\n\n\nSee the second code example in RuleMark for the setup of the structure that contains the startDate, endDate, and source properties."
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/accessibilitylabel(_:)-5gk8d",
    "html": "See Also\nConfiguring accessibility\nfunc accessibilityHidden(Bool) -> some ChartContent\nSpecifies whether to hide this chart content from system accessibility features.\nfunc accessibilityIdentifier(String) -> some ChartContent\nAdds an identifier string to the chart content.\nfunc accessibilityLabel(LocalizedStringKey) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel(Text) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue(LocalizedStringKey) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue<S>(S) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue(Text) -> some ChartContent\nAdds a description of the value that the chart content contains."
  },
  {
    "title": "buildLimitedAvailability(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontentbuilder/buildlimitedavailability(_:)",
    "html": "Discussion\n\nThis method provides support for if statements with #available() clauses in multi-statement closures, producing content for the conditionally-available branch."
  },
  {
    "title": "buildIf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontentbuilder/buildif(_:)",
    "html": "Parameters\ncontent\n\nThe content to use if the condition is true.\n\nDiscussion\n\nThis method provides support for if statements. It produces optional chart content that is visible only when the condition evaluates to true.\n\nSee Also\nBuilding conditionally\nstatic func buildEither<T1, T2>(first: T1) -> BuilderConditional<T1, T2>\nBuilds a partial result from a condition that’s true.\nstatic func buildEither<T1, T2>(second: T2) -> BuilderConditional<T1, T2>\nBuilds a partial result from a condition that’s false."
  },
  {
    "title": "buildPartialBlock(accumulated:next:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontentbuilder/buildpartialblock(accumulated:next:)",
    "html": "Parameters\naccumulated\n\nThe accumulated result.\n\nnext\n\nThe next component to accumulate.\n\nSee Also\nBuilding chart content\nstatic func buildPartialBlock<T>(first: T) -> T\nBuilds a partial result from a single, first component.\nstatic func buildBlock() -> some ChartContent\nProduces empty chart content."
  },
  {
    "title": "symbolSize(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/symbolsize(by:)",
    "html": "Parameters\nvalue\n\nThe data value to encode by size.\n\nSee Also\nEncoding data into mark characteristics\nfunc foregroundStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using a foreground style.\nfunc lineStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using line styles.\nfunc position<P>(by: PlottableValue<P>, axis: Axis?, span: MarkDimension) -> some ChartContent\nRepresents data using position.\nfunc symbol<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using different kinds of symbols."
  },
  {
    "title": "plotDimension(startPadding:endPadding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/positionscalerange/plotdimension(startpadding:endpadding:)",
    "html": "Parameters\nstartPadding\n\nThe start padding value in screen coordinates.\n\nendPadding\n\nThe end padding value in screen coordinates."
  },
  {
    "title": "value(_:_:unit:calendar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:unit:calendar:)-8f7fe",
    "html": "Parameters\nlabelKey\n\nThe localized string key for label.\n\nrange\n\nThe parameter’s value."
  },
  {
    "title": "value(_:_:unit:calendar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:unit:calendar:)-2r0fo",
    "html": "Parameters\nlabel\n\nThe label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-f1kk",
    "html": "Parameters\nlabel\n\nThe label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-7k0m0",
    "html": "Parameters\nlabelKey\n\nThe localized string key for label.\n\nrange\n\nThe parameter’s value."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-4qa4d",
    "html": "Parameters\nlabel\n\nThe label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-6jxfn",
    "html": "Parameters\nlabel\n\nThe label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-70xhu",
    "html": "Parameters\nlabelKey\n\nThe localized string key for label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-7ed58",
    "html": "Parameters\nlabel\n\nThe label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "PrimitivePlottable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottable/primitiveplottable-swift.associatedtype",
    "html": "Required"
  },
  {
    "title": "catmullRom(alpha:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/interpolationmethod/catmullrom(alpha:)",
    "html": "Parameters\nalpha\n\nA parameter for the Catmull-Rom spline. Use 0 for a uniform spline, 0.5 for the centripetal spline, and 1.0 for the chordal spline."
  },
  {
    "title": "cardinal(tension:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/interpolationmethod/cardinal(tension:)",
    "html": "Parameters\ntension\n\nA parameter that controls the length of tangents in the cardinal spline."
  },
  {
    "title": "offset(xStart:xEnd:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/offset(xstart:xend:y:)",
    "html": "Parameters\nxStart\n\nThe starting horizontal offset in screen coordinates.\n\nxEnd\n\nThe ending horizontal offset in screen coordinates.\n\ny\n\nThe vertical offset in screen coordinates.\n\nDiscussion\n\nThe xStart and xEnd offset values apply only to marks that have such properties, like bar marks and line segment marks.\n\nSee Also\nPositioning marks\nfunc offset(CGSize) -> some ChartContent\nApplies an offset that you specify as a size to the chart content.\nfunc offset(x: CGFloat, y: CGFloat) -> some ChartContent\nApplies a vertical and horizontal offset to the chart content.\nfunc offset(x: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc alignsMarkStylesWithPlotArea(Bool) -> some ChartContent\nAligns this item’s styles with the chart’s plot area."
  },
  {
    "title": "offset(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/offset(_:)",
    "html": "Parameters\nvalue\n\nThe offset distance in screen coordinates.\n\nSee Also\nPositioning marks\nfunc offset(x: CGFloat, y: CGFloat) -> some ChartContent\nApplies a vertical and horizontal offset to the chart content.\nfunc offset(x: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, y: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc alignsMarkStylesWithPlotArea(Bool) -> some ChartContent\nAligns this item’s styles with the chart’s plot area."
  },
  {
    "title": "lineStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/linestyle(_:)",
    "html": "Parameters\nstyle\n\nThe stroke style.\n\nDiscussion\n\nWarning\n\nUse this .lineStyle(_:) overload only if you have a predefined stroke style. The provided stroke style will override default line width and line cap for line marks.\n\nSee Also\nStyling marks\nfunc foregroundStyle<S>(S) -> some ChartContent\nSets the foreground style for the chart content.\nfunc opacity(Double) -> some ChartContent\nSets the opacity for the chart content.\nfunc cornerRadius(CGFloat, style: RoundedCornerStyle) -> some ChartContent\nSets the corner radius of the chart content.\nfunc interpolationMethod(InterpolationMethod) -> some ChartContent\nPlots line and area marks with the interpolation method that you specify."
  },
  {
    "title": "cornerRadius(_:style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/cornerradius(_:style:)",
    "html": "Parameters\nradius\n\nThe corner radius.\n\nstyle\n\nThe style of the rounded corners.\n\nSee Also\nStyling marks\nfunc foregroundStyle<S>(S) -> some ChartContent\nSets the foreground style for the chart content.\nfunc opacity(Double) -> some ChartContent\nSets the opacity for the chart content.\nfunc lineStyle(StrokeStyle) -> some ChartContent\nSets the style for line marks.\nfunc interpolationMethod(InterpolationMethod) -> some ChartContent\nPlots line and area marks with the interpolation method that you specify."
  },
  {
    "title": "interpolationMethod(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/interpolationmethod(_:)",
    "html": "Parameters\nmethod\n\nAn interpolation method.\n\nSee Also\nStyling marks\nfunc foregroundStyle<S>(S) -> some ChartContent\nSets the foreground style for the chart content.\nfunc opacity(Double) -> some ChartContent\nSets the opacity for the chart content.\nfunc cornerRadius(CGFloat, style: RoundedCornerStyle) -> some ChartContent\nSets the corner radius of the chart content.\nfunc lineStyle(StrokeStyle) -> some ChartContent\nSets the style for line marks."
  },
  {
    "title": "init(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabel/init(_:centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:)-9rytf",
    "html": "Parameters\ntitle\n\nA title generated from a string.\n\ncentered\n\nWhether to center the label between two axis values. If nil, default to true for discrete data, false to continuous data.\n\nanchor\n\nThe anchor point on the bounding box of the text element that attaches to the position.\n\nmultiLabelAlignment\n\nHow labels along the axis are aligned with each other.\n\ncollisionResolution\n\nHow labels that collide with others are resolved.\n\noffsetsMarks\n\nWhether to offset marks to accomodate for the space used by the label.\n\norientation\n\nThe orientatin of the label.\n\nhorizontalSpacing\n\nThe horizontal spacing of the label. If nil, a default spacing will be used.\n\nverticalSpacing\n\nThe vertical spacing of the label."
  },
  {
    "title": "init(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabel/init(_:centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:)-9202h",
    "html": "Parameters\ntitleKey\n\nA title generated from a localized string.\n\ncentered\n\nWhether to center the label between two axis values. If nil, default to true for discrete data, false to continuous data.\n\nanchor\n\nThe anchor point on the bounding box of the text element that attaches to the position.\n\nmultiLabelAlignment\n\nHow labels along the axis are aligned with each other.\n\ncollisionResolution\n\nHow labels that collide with others are resolved.\n\noffsetsMarks\n\nWhether to offset marks to accomodate for the space used by the label.\n\norientation\n\nThe orientatin of the label.\n\nhorizontalSpacing\n\nThe horizontal spacing of the label. If nil, a default spacing will be used.\n\nverticalSpacing\n\nThe vertical spacing of the label."
  },
  {
    "title": "foregroundStyle(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/foregroundstyle(by:)",
    "html": "Parameters\nvalue\n\nThe data value to encode using foreground style.\n\nSee Also\nEncoding data into mark characteristics\nfunc lineStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using line styles.\nfunc position<P>(by: PlottableValue<P>, axis: Axis?, span: MarkDimension) -> some ChartContent\nRepresents data using position.\nfunc symbol<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using different kinds of symbols.\nfunc symbolSize<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using symbol sizes."
  },
  {
    "title": "ratio(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markdimension/ratio(_:)",
    "html": "Parameters\nvalue\n\nThe given ratio, from 0 to 1."
  },
  {
    "title": "inset(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markdimension/inset(_:)",
    "html": "Parameters\nvalue\n\nThe given inset value in screen coordinates."
  },
  {
    "title": "fixed(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markdimension/fixed(_:)",
    "html": "Parameters\nvalue\n\nThe fixed width or height."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-13lvv",
    "html": "Parameters\nlabel\n\nThe label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "init(xStart:xEnd:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(xstart:xend:ystart:yend:)-6jeka",
    "html": "Discussion\n\nxStart: The value plotted with x start.\n\nxEnd: The value plotted with x end.\n\nyStart: The y end position. If yStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nyEnd: The y end position. If yEnd is nil then the rectangle will end at the trailing edge of the plotting area.\n\nDiscussion\n\nUse this initializer to map the x start and x end to a rectangle for each data element. Optionally, specify the yStart or yEnd position of the rectangles.\n\nThe example below omits the optional y and height fields and uses a number scale starting at (0,0) and ending at (6,6). The rectangle has the coordinates: (2,0), (2,6), (4,6), (4,0).\n\nChart(data) {\n    RectangleMark(\n        xStart: .value(\"Rect xStart\", 2),\n        xEnd: .value(\"Rect xEnd\", 4)\n    )\n    .opacity(0.2)\n\n\n    PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n"
  },
  {
    "title": "init(xStart:xEnd:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(xstart:xend:ystart:yend:)-1qbzg",
    "html": "Parameters\nxStart\n\nThe value plotted with x start.\n\nxEnd\n\nThe value plotted with x end.\n\nyStart\n\nThe value plotted with y start.\n\nyEnd\n\nThe value plotted with y end.\n\nDiscussion\n\nUse this initializer to map the x start, x end, y start, and y end position to a rectangle for each data element.\n\nThe example below uses a number scale starting at (0,0) and ending at (6,6). The rectangle has the coordinates: (2,2), (2,4), (4,4), (4,2).\n\nChart(data) {\n    RectangleMark(\n        xStart: .value(\"Rect xStart\", 2),\n        xEnd: .value(\"Rect xEnd\", 4),\n        yStart: .value(\"Rect yStart\", 2),\n        yEnd: .value(\"Rect yEnd\", 4)\n    )\n    .opacity(0.2)\n\n\n    PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n\n\nSee Also\nCreating a Rectangle Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a rectangle mark with an y interval encoding and an x encoding.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a rectangle mark with an x interval encoding and a y encoding.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension)\nCreates a rectangle that plots values with x and y."
  },
  {
    "title": "init(xStart:xEnd:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(xstart:xend:ystart:yend:)-5cbgh",
    "html": "Discussion\n\nyStart: The value plotted with y end.\n\nyEnd: The value plotted with y end.\n\nxStart: The x start position. If xStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nxEnd: The x end position. If xEnd is nil then the rectangle will end at the trailing edge of the plotting area.\n\nDiscussion\n\nUse this initializer to map the y start and y end position to a rectangle for each data element. Optionally, specify the xStart or xEnd position of the rectangles.\n\nThe example below omits the optional x and width fields and uses a number scale starting at (0,0) and ending at (6,6). The rectangle has the coordinates: (0,2), (0,4), (6,4), (6,2).\n\nChart(data) {\n    RectangleMark(\n        yStart: .value(\"Rect yStart\", 2),\n        yEnd: .value(\"Rect yEnd\", 4)\n    )\n    .opacity(0.2)\n\n\n    PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n"
  },
  {
    "title": "init(xStart:xEnd:y:height:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(xstart:xend:y:height:)-27222",
    "html": "Parameters\nxStart\n\nThe value plotted with x start.\n\nxEnd\n\nThe value plotted with x end.\n\ny\n\nThe value plotted with y.\n\nheight\n\nThe rectangle height. If height is nil then step size will be used. If there is no step size a default height (in pts) will be used.\n\nDiscussion\n\nUse this initializer to map the x start, x end and y position to a rectangle for each data element. Optionally, specify the height of the rectangles.\n\nThe example below omits the optional height parameter and uses a number scale starting at (0,0) and ending at (6,6). The rectangle has the coordinates: (2,0), (2,4), (4,4), (4,0).\n\nChart(data) {\n    RectangleMark(\n        xStart: .value(\"Rect xStart\", 2),\n        xEnd: .value(\"Rect xEnd\", 4),\n        y: .value(\"Rect Y\", 4)\n    )\n    .opacity(0.2)\n\n\n    PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n\n\nSee Also\nCreating a Rectangle Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a rectangle mark with an y interval encoding and an x encoding.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates a rectangle mark with x and y interval encodings.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension)\nCreates a rectangle that plots values with x and y."
  },
  {
    "title": "init(x:yStart:yEnd:width:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(x:ystart:yend:width:)-vh2x",
    "html": "Parameters\nyStart\n\nThe value plotted with x start.\n\nyEnd\n\nThe value plotted with x end.\n\nx\n\nThe value plotted with y.\n\nwidth\n\nThe rectangle width. If width is nil then step size will be used. If there is no step size a default width (in pts) will be used.\n\nDiscussion\n\nUse this initializer to map the y start, y end and x position to a rectangle for each data element. Optionally, specify the width of the rectangles.\n\nThe example below omits the optional width field and uses a number scale starting at (0,0) and ending at (6,6). The rectangle has the coordinates: (0,2), (0,4), (4,4), (4,2).\n\nChart(data) {\n    RectangleMark(\n        yStart: .value(\"Rect yStart\", 2),\n        yEnd: .value(\"Rect yEnd\", 4),\n        x: .value(\"Rect X\", 4)\n    )\n    .opacity(0.2)\n\n\n   PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n\n\nSee Also\nCreating a Rectangle Mark\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a rectangle mark with an x interval encoding and a y encoding.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates a rectangle mark with x and y interval encodings.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension)\nCreates a rectangle that plots values with x and y."
  },
  {
    "title": "ChartSymbolShape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartsymbolshape",
    "html": "Topics\nInstance Properties\nvar perceptualUnitRect: CGRect\nReturns a rectangle that bounds the shape in such a way that viewers perceive it as having the same size and position as a unit rectangle.\n\nRequired\n\nInstance Methods\nfunc strokeBorder(lineWidth: CGFloat) -> some ChartSymbolShape\nAvailable when Self conforms to InsettableShape.\nfunc strokeBorder(style: StrokeStyle) -> some ChartSymbolShape\nAvailable when Self conforms to InsettableShape.\nType Properties\nstatic var asterisk: BasicChartSymbolShape\nAsterisk symbol.\nAvailable when Self is BasicChartSymbolShape.\nstatic var circle: BasicChartSymbolShape\nCircle symbol.\nAvailable when Self is BasicChartSymbolShape.\nstatic var cross: BasicChartSymbolShape\nCross symbol.\nAvailable when Self is BasicChartSymbolShape.\nstatic var diamond: BasicChartSymbolShape\nDiamond symbol.\nAvailable when Self is BasicChartSymbolShape.\nstatic var pentagon: BasicChartSymbolShape\nPentagon symbol.\nAvailable when Self is BasicChartSymbolShape.\nstatic var plus: BasicChartSymbolShape\nPlus symbol.\nAvailable when Self is BasicChartSymbolShape.\nstatic var square: BasicChartSymbolShape\nSquare symbol.\nAvailable when Self is BasicChartSymbolShape.\nstatic var triangle: BasicChartSymbolShape\nTriangle symbol.\nAvailable when Self is BasicChartSymbolShape.\nRelationships\nInherits From\nAnimatable\nSendable\nShape\nView\nConforming Types\nAnyChartSymbolShape\nBasicChartSymbolShape\nSee Also\nMark configuration\nstruct MarkStackingMethod\nThe ways in which you can stack marks in a chart.\nstruct MarkDimension\nAn individual dimension representing a mark’s width or height.\nstruct InterpolationMethod\nThe ways in which line or area marks interpolate their data.\nstruct AnyChartSymbolShape\nA type-erased plotting shape."
  },
  {
    "title": "init(xStart:xEnd:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/areamark/init(xstart:xend:y:)",
    "html": "Parameters\nxStart\n\nThe starting horizontal position for the mark.\n\nxEnd\n\nThe ending horizontal position for the mark.\n\ny\n\nThe vertical position for the mark.\n\nDiscussion\n\nUse this initializer to create a range area chart with horizontal intervals. For example you can create a region that encompasses all the temperatures over the course of a day, across a number of days:\n\nChart(data) { day in\n    AreaMark(\n        xStart: .value(\"Minimum Temperature\", minimumTemperature),\n        xEnd: .value(\"Maximum Temperature\", day.maximumTemperature),\n        y: .value(\"Date\", day.date)\n    )\n}\n\n\nIf you want to plot values that have a vertical interval, use init(x:yStart:yEnd:) instead.\n\nSee Also\nCreating a range area chart\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates an area mark that plots values with a vertical interval.\ninit<X, Y, S>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, series: PlottableValue<S>)\nCreates an area mark that plots values with a vertical interval and associates it with the specified series.\ninit<X, Y, S>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>)\nCreates an area mark that plots values with a horizontal interval and associates it with the specified series."
  },
  {
    "title": "standard | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markstackingmethod/standard",
    "html": "Discussion\n\nNegative values appear below zero, creating diverging stacked marks."
  },
  {
    "title": "center | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markstackingmethod/center",
    "html": "Discussion\n\nUse this type to create a stream graph."
  },
  {
    "title": "init(x:yStart:yEnd:series:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/areamark/init(x:ystart:yend:series:)",
    "html": "Parameters\nx\n\nThe horizontal position for the mark.\n\nyStart\n\nThe starting vertical position for the mark.\n\nyEnd\n\nThe ending vertical position for the mark.\n\nseries\n\nA series to associate the mark with.\n\nDiscussion\n\nThe initializer behaves like init(x:yStart:yEnd:), except that you can indicate which region each interval belongs to by providing a value for the series input. This enables you to plot more than one region on a single chart.\n\nTo plot a series of values that have a horizontal interval, use init(xStart:xEnd:y:series:) instead.\n\nSee Also\nCreating a range area chart\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates an area mark that plots values with a vertical interval.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>)\nCreates an area mark that plots values with a horizontal interval.\ninit<X, Y, S>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>)\nCreates an area mark that plots values with a horizontal interval and associates it with the specified series."
  },
  {
    "title": "init(x:y:series:stacking:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/areamark/init(x:y:series:stacking:)",
    "html": "Parameters\nx\n\nThe horizontal position for the mark.\n\ny\n\nThe vertical position for the mark.\n\nseries\n\nA series to associate the mark with.\n\nstacking\n\nThe way in which the chart stacks area regions. The default is standard.\n\nDiscussion\n\nThe initializer behaves like init(x:y:stacking:), except that you can indicate which region each data point belongs to by providing a value for the series input. This enables you to plot more than one region on a single chart.\n\nSee Also\nCreating an area mark\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, stacking: MarkStackingMethod)\nCreates an area mark using the specified horizontal and vertical positions."
  },
  {
    "title": "PointMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/pointmark",
    "html": "Overview\n\nYou can create different kinds of point charts using the PointMark chart content. One common chart you can build with point marks is a scatter plot which displays the relationship between two numerical data properties. To build a scatter plot use the init(x:y:). Provide a .value for both the x and y parameters with a string, used as a label for the data, and the data element to be plotted. The following example plots the wingLength and wingHeight properties with x and y, respectively:\n\nstruct Insect {\n    let name: String\n    let family: String\n    let wingLength: Double\n    let wingWidth: Double\n    let weight: Double\n}\n\n\nvar data: [Insect] = [\n    Insect(name: \"Hepialidae\", family: \"Lepidoptera\", wingLength: 61, wingWidth: 52, weight: 22),\n    Insect(name: \"Danaidae\", family: \"Lepidoptera\", wingLength: 60, wingWidth: 48, weight: 24),\n    Insect(name: \"Riodinidae\", family: \"Lepidoptera\", wingLength: 53, wingWidth: 43, weight: 18),\n    // ...\n]\n\n\nvar body: some View {\n    Chart(data) {\n        PointMark(\n            x: .value(\"Wing Length\", $0.wingLength),\n            y: .value(\"Wing Width\", $0.wingWidth)\n        )\n    }\n}\n\n\nAdding Additional Data Fields\n\nSwift Charts provides three additional modifiers for point mark that each allow you to plot an additional property to a unique visual channel.\n\nModifier\n\n\t\n\nVisual Channel\n\n\n\n\nforegroundStyle(by:)\n\n\t\n\nplot an additional property with color\n\n\n\n\nsymbol(by:)\n\n\t\n\nplot an additional property with symbols\n\n\n\n\nsymbolSize(by:)\n\n\t\n\nplot an additional property with size\n\nFor example, to plot the family property from the previous example’s Insect structure as a color, add the foregroundStyle(by:) modifier:\n\nChart(data) {\n    PointMark(\n        x: .value(\"Wing Length\", $0.wingLength),\n        y: .value(\"Wing Width\", $0.wingWidth)\n    )\n    .foregroundStyle(by: .value(\"Family\", $0.family))\n}\n\n\nThe foreground style modifier automatically generates a color scale that provides each mark with a color that reflects its value property. To learn how to modify the default color scale, see ScaleModifiers. The modifier also provides a default legend. To learn how to modify or disable the legend, see ChartLegend.\n\nAlternatively, you can distinguish families with different symbols by plotting the family property using the symbol(by:) modifier:\n\nChart(data) {\n    PointMark(\n        x: .value(\"Wing Length\", $0.wingLength),\n        y: .value(\"Wing Length\", $0.wingWidth)\n    )\n    .symbol(by: .value(\"Family\", $0.family))\n}\n\n\nTopics\nCreating a Point Mark\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>)\nCreates a point mark that plots values to x and y.\nInitializers\ninit<Y>(x: CGFloat?, y: PlottableValue<Y>)\nCreates a point mark with fixed x position and plots values with y.\ninit<X>(x: PlottableValue<X>, y: CGFloat?)\nCreates a point mark that plots a value on x with fixed y position.\nRelationships\nConforms To\nChartContent\nSee Also\nMarks\nstruct AreaMark\nChart content that represents data using the area of one or more regions.\nstruct LineMark\nChart content that represents data using a sequence of connected line segments.\nstruct RectangleMark\nChart content that represents data using rectangles.\nstruct RuleMark\nChart content that represents data using a single horizontal or vertical rule.\nstruct BarMark\nChart content that represents data using bars."
  },
  {
    "title": "init(x:y:stacking:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/areamark/init(x:y:stacking:)",
    "html": "Parameters\nx\n\nThe horizontal position for the mark.\n\ny\n\nThe vertical position for the mark.\n\nstacking\n\nThe way in which the chart stacks area regions. The default is standard.\n\nDiscussion\n\nYou can use this initializer to create a basic area chart:\n\nChart(cheeseburgerCost) { cost in\n    AreaMark(\n        x: .value(\"Date\", cost.date),\n        y: .value(\"Price\", cost.price)\n    )\n}\n\n\nThe resulting chart automatically scales and labels the axes based on the data, and fills the area under the data points with a default color:\n\nSee Also\nCreating an area mark\ninit<X, Y, S>(x: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>, stacking: MarkStackingMethod)\nCreates an area mark and associates it with the specified series."
  },
  {
    "title": "init(_:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chart/init(_:content:)",
    "html": "Parameters\ndata\n\nA collection of data that conforms to the Identifiable protocol.\n\ncontent\n\nThe mark that the chart should draw for each element in the data collection.\n\nDiscussion\n\nThis initializer wraps the data that you provide as input in an implicit ForEach structure. If you need to represent more than one series in your chart, use init(content:) instead.\n\nSee Also\nCreating a Chart\ninit(content: () -> Content)\nCreates a chart composed of any number of data series and individual marks.\ninit<Data, ID, C>(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> C)\nCreates a chart composed of a series of marks."
  },
  {
    "title": "init(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chart/init(content:)",
    "html": "Parameters\ncontent\n\nA chart content builder that returns the marks that the chart should draw.\n\nDiscussion\n\nThis initializer draws the marks that you specify in the content input. You can provide individual marks, or marks produced by one or more ForEach constructs, or any combination of these. As a convenience when you have exactly one ForEach in your chart’s content, you can use either the init(_:content:) or init(_:id:content:) initializer instead, either of which wraps the content in an implicit ForEach.\n\nSee Also\nCreating a Chart\ninit<Data, C>(Data, content: (Data.Element) -> C)\nCreates a chart composed of a series of identifiable marks.\ninit<Data, ID, C>(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> C)\nCreates a chart composed of a series of marks."
  },
  {
    "title": "buildEither(second:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontentbuilder/buildeither(second:)",
    "html": "Parameters\nsecond\n\nThe content to use if the condition is false.\n\nDiscussion\n\nThis method provides support for if statements with an else clause and switch statements. It produces optional chart content that is visible when the condition evaluates to false.\n\nSee Also\nBuilding conditionally\nstatic func buildIf<T>(T?) -> T?\nBuilds a partial result that’s conditionally present.\nstatic func buildEither<T1, T2>(first: T1) -> BuilderConditional<T1, T2>\nBuilds a partial result from a condition that’s true."
  },
  {
    "title": "buildEither(first:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontentbuilder/buildeither(first:)",
    "html": "Parameters\nfirst\n\nThe content to use if the condition is true.\n\nDiscussion\n\nThis method provides support for if statements with an else clause and switch statements. It produces optional chart content that is visible when the condition evaluates to true.\n\nSee Also\nBuilding conditionally\nstatic func buildIf<T>(T?) -> T?\nBuilds a partial result that’s conditionally present.\nstatic func buildEither<T1, T2>(second: T2) -> BuilderConditional<T1, T2>\nBuilds a partial result from a condition that’s false."
  },
  {
    "title": "buildBlock() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontentbuilder/buildblock()",
    "html": "See Also\nBuilding chart content\nstatic func buildPartialBlock<T>(first: T) -> T\nBuilds a partial result from a single, first component.\nstatic func buildPartialBlock(accumulated: some ChartContent, next: some ChartContent) -> some ChartContent\nBuilds a partial result by combining an accumulated component and a new component."
  },
  {
    "title": "buildPartialBlock(first:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontentbuilder/buildpartialblock(first:)",
    "html": "Parameters\ncontent\n\nThe first component to accumulate.\n\nSee Also\nBuilding chart content\nstatic func buildPartialBlock(accumulated: some ChartContent, next: some ChartContent) -> some ChartContent\nBuilds a partial result by combining an accumulated component and a new component.\nstatic func buildBlock() -> some ChartContent\nProduces empty chart content."
  },
  {
    "title": "BuilderConditional | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/builderconditional",
    "html": "Overview\n\nDon’t use this type directly. The result builders defined by the framework, like ChartContentBuilder and AxisContentBuilder, use it as part of the building process.\n\nRelationships\nConforms To\nAxisContent\nConforms when TrueContent conforms to AxisContent and FalseContent conforms to AxisContent.\nAxisMark\nConforms when TrueContent conforms to AxisMark and FalseContent conforms to AxisMark.\nChartContent\nConforms when TrueContent conforms to ChartContent and FalseContent conforms to ChartContent."
  },
  {
    "title": "zIndex(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/zindex(_:)",
    "html": "Parameters\nvalue\n\nA relative front-to-back ordering for this view; the default is 0."
  },
  {
    "title": "shadow(color:radius:x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/shadow(color:radius:x:y:)",
    "html": "Parameters\ncolor\n\nThe shadow’s color.\n\nradius\n\nA measure of how much to blur the shadow. Larger values result in more blur.\n\nx\n\nAn amount to offset the shadow horizontally.\n\ny\n\nAn amount to offset the shadow vertically."
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/accessibilityvalue(_:)-33c0e",
    "html": "See Also\nConfiguring accessibility\nfunc accessibilityHidden(Bool) -> some ChartContent\nSpecifies whether to hide this chart content from system accessibility features.\nfunc accessibilityIdentifier(String) -> some ChartContent\nAdds an identifier string to the chart content.\nfunc accessibilityLabel(LocalizedStringKey) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel<S>(S) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel(Text) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue<S>(S) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue(Text) -> some ChartContent\nAdds a description of the value that the chart content contains."
  },
  {
    "title": "accessibilityLabel(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/accessibilitylabel(_:)-28985",
    "html": "See Also\nConfiguring accessibility\nfunc accessibilityHidden(Bool) -> some ChartContent\nSpecifies whether to hide this chart content from system accessibility features.\nfunc accessibilityIdentifier(String) -> some ChartContent\nAdds an identifier string to the chart content.\nfunc accessibilityLabel(LocalizedStringKey) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel<S>(S) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue(LocalizedStringKey) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue<S>(S) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue(Text) -> some ChartContent\nAdds a description of the value that the chart content contains."
  },
  {
    "title": "annotation(position:alignment:spacing:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/annotation(position:alignment:spacing:content:)-65emh",
    "html": "Parameters\nposition\n\nThe location relative to the item being annotated at which the annotation will be placed.\n\nalignment\n\nThe guide for aligning the annotation in the specified position.\n\nspacing\n\nDistance between the annotation and the annotated content, or nil if you want to use the default distance.\n\ncontent\n\nA view builder that creates the annotation. The builder takes one input which provides information regarding the item being annotated such as its size.\n\nSee Also\nAnnotating marks\nfunc annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, content: (AnnotationContext) -> C) -> some ChartContent\nAnnotates this mark or collection of marks with a view positioned relative to its bounds."
  },
  {
    "title": "annotation(position:alignment:spacing:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/annotation(position:alignment:spacing:content:)-26b2f",
    "html": "Parameters\nposition\n\nThe location relative to the item being annotated at which the annotation will be placed.\n\nalignment\n\nThe guide for aligning the annotation in the specified position.\n\nspacing\n\nDistance between the annotation and the annotated content, or nil if you want to use the default distance.\n\ncontent\n\nA view builder that creates the annotation.\n\nSee Also\nAnnotating marks\nfunc annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, content: () -> C) -> some ChartContent\nAnnotates this mark or collection of marks with a view positioned relative to its bounds."
  },
  {
    "title": "clipShape(_:style:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/clipshape(_:style:)",
    "html": "Parameters\nshape\n\nThe clip shape. The shape fills each mark’s frame.\n\nstyle\n\nThe fill to use when rasterizing the shape.\n\nSee Also\nMasking and clipping\nfunc mask<C>(content: () -> C) -> some ChartContent\nMasks chart content using the alpha channel of the specified content."
  },
  {
    "title": "accessibilityHidden(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/accessibilityhidden(_:)",
    "html": "See Also\nConfiguring accessibility\nfunc accessibilityIdentifier(String) -> some ChartContent\nAdds an identifier string to the chart content.\nfunc accessibilityLabel(LocalizedStringKey) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel<S>(S) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel(Text) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue(LocalizedStringKey) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue<S>(S) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue(Text) -> some ChartContent\nAdds a description of the value that the chart content contains."
  },
  {
    "title": "mask(content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/mask(content:)",
    "html": "Discussion\n\nParameter content: The content whose alpha will be applied to this item.\n\nSee Also\nMasking and clipping\nfunc clipShape(some Shape, style: FillStyle) -> some ChartContent\nSets a clip shape for the chart content."
  },
  {
    "title": "accessibilityIdentifier(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/accessibilityidentifier(_:)",
    "html": "See Also\nConfiguring accessibility\nfunc accessibilityHidden(Bool) -> some ChartContent\nSpecifies whether to hide this chart content from system accessibility features.\nfunc accessibilityLabel(LocalizedStringKey) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel<S>(S) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel(Text) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue(LocalizedStringKey) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue<S>(S) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue(Text) -> some ChartContent\nAdds a description of the value that the chart content contains."
  },
  {
    "title": "value(_:_:unit:calendar:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:unit:calendar:)-liyc",
    "html": "Parameters\nlabel\n\nThe label.\n\nvalue\n\nThe parameter’s value."
  },
  {
    "title": "plotDimension(padding:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/positionscalerange/plotdimension(padding:)",
    "html": "Parameters\npadding\n\nThe start and end padding value in screen coordinates."
  },
  {
    "title": "value(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue/value(_:_:)-3sze5",
    "html": "Parameters\nlabelKey\n\nThe localized string key for label.\n\nrange\n\nThe parameter’s value."
  },
  {
    "title": "primitivePlottable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottable/primitiveplottable-xwx8",
    "html": "Required Default implementations provided.\n\nDefault Implementations\nPlottable Implementations\nvar primitivePlottable: String\nConverts the type to its primitive value.\nAvailable when Self conforms to RawRepresentable and RawValue is String.\nvar primitivePlottable: Self\nConverts the type to its primitive value."
  },
  {
    "title": "position(by:axis:span:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/position(by:axis:span:)",
    "html": "Parameters\nvalue\n\nThe data used for positioning marks.\n\naxis\n\nThe axis to position marks along. Set this to nil to use a default configuration.\n\nspan\n\nThe span of the positioned marks. Use this to control the total amount space available to the marks.\n\nDiscussion\n\nThe code below creates a grouped bar chart that positions marks with the same “product” along the horizontal axis by their “type”.\n\nChart(cars) {\n    BarMark(\n        x: .value(\"product\", $0.product),\n        y: .value(\"price\", $0.price)\n    )\n    .position(by: .value(\"type\", $0.type), axis: .horizontal)\n}\n\nSee Also\nEncoding data into mark characteristics\nfunc foregroundStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using a foreground style.\nfunc lineStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using line styles.\nfunc symbol<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using different kinds of symbols.\nfunc symbolSize<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using symbol sizes."
  },
  {
    "title": "symbol(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/symbol(by:)",
    "html": "Parameters\nvalue\n\nThe data value. value must be categorial, such as String.\n\nSee Also\nEncoding data into mark characteristics\nfunc foregroundStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using a foreground style.\nfunc lineStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using line styles.\nfunc position<P>(by: PlottableValue<P>, axis: Axis?, span: MarkDimension) -> some ChartContent\nRepresents data using position.\nfunc symbolSize<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using symbol sizes."
  },
  {
    "title": "offset(xStart:xEnd:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/offset(xstart:xend:ystart:yend:)",
    "html": "Parameters\nxStart\n\nThe starting horizontal offset in screen coordinates.\n\nxEnd\n\nThe ending horizontal offset in screen coordinates.\n\nyStart\n\nThe starting vertical offset in screen coordinates.\n\nyEnd\n\nThe ending vertical offset in screen coordinates.\n\nDiscussion\n\nThe xStart, xEnd, yStart, and yEnd offset values apply only to marks that have such properties, like bar marks and line segment marks.\n\nSee Also\nPositioning marks\nfunc offset(CGSize) -> some ChartContent\nApplies an offset that you specify as a size to the chart content.\nfunc offset(x: CGFloat, y: CGFloat) -> some ChartContent\nApplies a vertical and horizontal offset to the chart content.\nfunc offset(x: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, y: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc alignsMarkStylesWithPlotArea(Bool) -> some ChartContent\nAligns this item’s styles with the chart’s plot area."
  },
  {
    "title": "offset(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/offset(x:y:)",
    "html": "Parameters\nx\n\nThe horizontal offset in screen coordinates.\n\ny\n\nThe vertical offset in screen coordinates.\n\nSee Also\nPositioning marks\nfunc offset(CGSize) -> some ChartContent\nApplies an offset that you specify as a size to the chart content.\nfunc offset(x: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, y: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc alignsMarkStylesWithPlotArea(Bool) -> some ChartContent\nAligns this item’s styles with the chart’s plot area."
  },
  {
    "title": "offset(x:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/offset(x:ystart:yend:)",
    "html": "Parameters\nx\n\nThe horizontal offset in screen coordinates.\n\nyStart\n\nThe starting vertical offset in screen coordinates.\n\nyEnd\n\nThe ending vertical offset in screen coordinates.\n\nDiscussion\n\nThe yStart and yEnd offset values apply only to marks that have such properties, like bar marks and line segment marks.\n\nSee Also\nPositioning marks\nfunc offset(CGSize) -> some ChartContent\nApplies an offset that you specify as a size to the chart content.\nfunc offset(x: CGFloat, y: CGFloat) -> some ChartContent\nApplies a vertical and horizontal offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, y: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc alignsMarkStylesWithPlotArea(Bool) -> some ChartContent\nAligns this item’s styles with the chart’s plot area."
  },
  {
    "title": "SectorMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/sectormark",
    "html": "Overview\n\nThe relative size of per-category values that make up the total value are mapped to the angular sizes of the sectors.\n\nTo ensure that the visualization is easy to read, design pie or donut charts with no more than 5-7 sectors. Sum any remaining values into an “Other” group if necessary, or consider horizontal bar charts, which can scale to many bars, are easy to label with categories, and let users compare items more accurately.\n\nMake sure that your data contains only positive values. Also, very small proportions may not be discernible in the chart, especially if an angular inset is specified.\n\nCreate a pie chart with sector marks\n\nTo visualize the ratio of values to the total that they collectively add up to, specify the values, most often ordered by decreasing value. If needed, add an “Other” group as the last item.\n\nlet data = [\n    (name: \"Cachapa\", sales: 9631),\n    (name: \"Crêpe\", sales: 6959),\n    (name: \"Injera\", sales: 4891),\n    (name: \"Jian Bing\", sales: 2506),\n    (name: \"American\", sales: 1777),\n    (name: \"Dosa\", sales: 625),\n]\n\n\nvar body: some View {\n    Chart(data, id: \\.name) { name, sales in\n        SectorMark(angle: .value(\"Value\", sales))\n            .foregroundStyle(by: .value(\"Product category\", name))\n    }\n}\n\nCreate and style a donut chart with sector marks\n\nThe inner and outer radii can be customized for your design. A non-zero inner radius yields a donut chart. A small angular inset helps accessibility and readability by adding contrast between sectors, which is useful for pie and donut charts. Limit the size of the angular inset and corner radius to small values to avoid distorting the shape and relative size of the sectors.\n\nvar body: some View {\n    Chart(data, id: \\.name) { name, sales in\n        SectorMark(\n            angle: .value(\"Value\", sales),\n            innerRadius: .ratio(0.618),\n            outerRadius: .inset(10),\n            angularInset: 1\n        )\n        .cornerRadius(4)\n        .foregroundStyle(by: .value(\"Product category\", name))\n    }\n}\n\nTopics\nInitializers\ninit(angle: PlottableValue<some Plottable>, innerRadius: MarkDimension, outerRadius: MarkDimension, angularInset: CGFloat?)\nCreates a sector mark, which uses the angular size to represent the proportion of the value to the sum of all values.\nRelationships\nConforms To\nChartContent"
  },
  {
    "title": "ValueAlignedChartScrollTargetBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedchartscrolltargetbehavior",
    "html": "Topics\nInitializers\ninit(matching: DateComponents, majorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior)\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\ninit<T>(unit: T, majorAlignment: MajorValueAlignment<T>?, limitBehavior: ValueAlignedLimitBehavior)\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\ninit(xMatching: DateComponents, yMatching: DateComponents, xMajorAlignment: MajorValueAlignment<Date>?, yMajorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior)\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\ninit<Y>(xMatching: DateComponents, yUnit: Y, xMajorAlignment: MajorValueAlignment<Date>?, yMajorAlignment: MajorValueAlignment<Y>?, limitBehavior: ValueAlignedLimitBehavior)\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\ninit<X>(xUnit: X, yMatching: DateComponents, xMajorAlignment: MajorValueAlignment<X>?, yMajorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior)\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\ninit<X, Y>(xUnit: X, yUnit: Y, xMajorAlignment: MajorValueAlignment<X>?, yMajorAlignment: MajorValueAlignment<Y>?, limitBehavior: ValueAlignedLimitBehavior)\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\nRelationships\nConforms To\nChartScrollTargetBehavior\nScrollTargetBehavior"
  },
  {
    "title": "AxisValueLabelCollisionResolution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabelcollisionresolution",
    "html": "Topics\nType Properties\nstatic var automatic: AxisValueLabelCollisionResolution\nAutomatically determine the prevention method based on axis type and data.\nstatic var disabled: AxisValueLabelCollisionResolution\nDo not apply collision resolution to this label. The label will always be displayed.\nstatic var greedy: AxisValueLabelCollisionResolution\nUse a greedy algorithm. Display a label if it’s not overlapping with other labels.\nstatic var truncate: AxisValueLabelCollisionResolution\nTruncate a label to the space available to it.\nType Methods\nstatic func greedy(priority: Double, minimumSpacing: CGFloat?) -> AxisValueLabelCollisionResolution\nUse a greedy algorithm. Display a label if it’s not overlapping with other labels.\nRelationships\nConforms To\nCustomStringConvertible"
  },
  {
    "title": "AnnotationContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/annotationcontext",
    "html": "Topics\nInstance Properties\nlet targetSize: CGSize\nGets the bounding box of the items being annotated.\nSee Also\nAnnotations\nstruct AnnotationPosition\nThe position of an annotation."
  },
  {
    "title": "AxisValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvalue",
    "html": "Topics\nInstance Properties\nvar count: Int\nThe number of values on this axis.\nvar index: Int\nThe index of the value along the axis.\nInstance Methods\nfunc `as`<P>(P.Type) -> P?\nSee Also\nAxis marks\nprotocol AxisMark\nA type that serves as the basic building block for the elements of an axis.\nstruct AxisTick\nA mark that a chart draws on an axis to indicate a reference point along that axis.\nstruct AxisGridLine\nA line that a chart draws across its plot area to indicate a reference point along a particular axis.\nstruct AxisValueLabel\nA label that describes the value for an axis mark.\nstruct AnyAxisMark\nA type-erased axis mark.\nstruct AxisMarkBuilder\nA result builder that constructs axis marks and overrides default marks."
  },
  {
    "title": "AxisGridLine | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisgridline",
    "html": "Topics\nInitializers\ninit(centered: Bool?, stroke: StrokeStyle?)\nCreates an axis grid line with the given properties.\nRelationships\nConforms To\nAxisMark\nSee Also\nAxis marks\nprotocol AxisMark\nA type that serves as the basic building block for the elements of an axis.\nstruct AxisTick\nA mark that a chart draws on an axis to indicate a reference point along that axis.\nstruct AxisValueLabel\nA label that describes the value for an axis mark.\nstruct AxisValue\nA value for an axis mark.\nstruct AnyAxisMark\nA type-erased axis mark.\nstruct AxisMarkBuilder\nA result builder that constructs axis marks and overrides default marks."
  },
  {
    "title": "opacity(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/opacity(_:)",
    "html": "Parameters\ncolor\n\nA value between 0 (fully transparent) and 1 (fully opaque).\n\nSee Also\nStyling marks\nfunc foregroundStyle<S>(S) -> some ChartContent\nSets the foreground style for the chart content.\nfunc cornerRadius(CGFloat, style: RoundedCornerStyle) -> some ChartContent\nSets the corner radius of the chart content.\nfunc lineStyle(StrokeStyle) -> some ChartContent\nSets the style for line marks.\nfunc interpolationMethod(InterpolationMethod) -> some ChartContent\nPlots line and area marks with the interpolation method that you specify."
  },
  {
    "title": "foregroundStyle(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/foregroundstyle(_:)",
    "html": "Parameters\ncolor\n\nThe color.\n\nSee Also\nStyling marks\nfunc opacity(Double) -> some ChartContent\nSets the opacity for the chart content.\nfunc cornerRadius(CGFloat, style: RoundedCornerStyle) -> some ChartContent\nSets the corner radius of the chart content.\nfunc lineStyle(StrokeStyle) -> some ChartContent\nSets the style for line marks.\nfunc interpolationMethod(InterpolationMethod) -> some ChartContent\nPlots line and area marks with the interpolation method that you specify."
  },
  {
    "title": "AxisTick | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axistick",
    "html": "Topics\nStructures\nstruct Length\nDescribes the length of a tick.\nInitializers\ninit(centered: Bool?, length: CGFloat, stroke: StrokeStyle?)\nCreates an axis tick with the given properties.\ninit(centered: Bool?, length: AxisTick.Length, stroke: StrokeStyle?)\nCreates an axis tick with the given properties.\nRelationships\nConforms To\nAxisMark\nSee Also\nAxis marks\nprotocol AxisMark\nA type that serves as the basic building block for the elements of an axis.\nstruct AxisGridLine\nA line that a chart draws across its plot area to indicate a reference point along a particular axis.\nstruct AxisValueLabel\nA label that describes the value for an axis mark.\nstruct AxisValue\nA value for an axis mark.\nstruct AnyAxisMark\nA type-erased axis mark.\nstruct AxisMarkBuilder\nA result builder that constructs axis marks and overrides default marks."
  },
  {
    "title": "AxisMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismark",
    "html": "Topics\nInstance Methods\nfunc font(Font?) -> some AxisMark\nSets the default font for text in this axis content.\nfunc foregroundStyle<S>(S) -> some AxisMark\nSets the axis content’s foreground elements to use a given style.\nfunc offset(CGSize) -> some AxisMark\nfunc offset(x: CGFloat, y: CGFloat) -> some AxisMark\nRelationships\nConforming Types\nAnyAxisMark\nAxisGridLine\nAxisTick\nAxisValueLabel\nBuilderConditional\nConforms when TrueContent conforms to AxisMark and FalseContent conforms to AxisMark.\nSee Also\nAxis marks\nstruct AxisTick\nA mark that a chart draws on an axis to indicate a reference point along that axis.\nstruct AxisGridLine\nA line that a chart draws across its plot area to indicate a reference point along a particular axis.\nstruct AxisValueLabel\nA label that describes the value for an axis mark.\nstruct AxisValue\nA value for an axis mark.\nstruct AnyAxisMark\nA type-erased axis mark.\nstruct AxisMarkBuilder\nA result builder that constructs axis marks and overrides default marks."
  },
  {
    "title": "ScaleDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/scaledomain",
    "html": "Topics\nType Properties\nstatic var automatic: AutomaticScaleDomain\nCreates a scale domain configuration that infers the scale domain from data.\nAvailable when Self is AutomaticScaleDomain.\nType Methods\nstatic func automatic(includesZero: Bool?, reversed: Bool?) -> AutomaticScaleDomain\nCreates a scale domain configuration that infers the scale domain from data.\nAvailable when Self is AutomaticScaleDomain.\nstatic func automatic<DataValue>(includesZero: Bool?, reversed: Bool?, dataType: DataValue.Type, modifyInferredDomain: (inout [DataValue]) -> Void) -> AutomaticScaleDomain\nCreates a scale domain configuration that infers the scale domain from data.\nAvailable when Self is AutomaticScaleDomain.\nRelationships\nConforming Types\nAutomaticScaleDomain\nSee Also\nScales\nprotocol ScaleRange\nA type that you can use to configure the range of a chart.\nprotocol PositionScaleRange\nA type that configures the x-axis and y-axis values.\nstruct PlotDimensionScaleRange\nA range that represents the plot area’s width or height.\nstruct AutomaticScaleDomain\nA domain that the chart infers from its data.\nstruct ScaleType\nThe ways you can scale the domain or range of a plot."
  },
  {
    "title": "AxisContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axiscontent",
    "html": "Topics\nInstance Methods\nfunc compositingLayer() -> some AxisContent\nCreates a compositing layer for the chart content.\nfunc compositingLayer<V>(style: (PlaceholderContentView<Self>) -> V) -> some AxisContent\nCreates a compositing layer for the chart content, and apply view modifiers to the compositing layer.\nRelationships\nConforming Types\nAnyAxisContent\nAxisMarks\nBuilderConditional\nConforms when TrueContent conforms to AxisContent and FalseContent conforms to AxisContent.\nSee Also\nAxes\nCustomizing axes in Swift Charts\nImprove the clarity of your chart by configuring the appearance of its axes.\nstruct AxisMarks\nA group of visual marks that a chart draws to indicate the composition of a chart’s axes.\nstruct AnyAxisContent\nA type-erased element of a chart’s axis.\nstruct AxisContentBuilder\nA result builder that constructs axis content."
  },
  {
    "title": "ScaleRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/scalerange",
    "html": "Topics\nAssociated Types\nassociatedtype VisualValue\n\nRequired\n\nRelationships\nInherited By\nPositionScaleRange\nConforming Types\nPlotDimensionScaleRange\nSee Also\nScales\nprotocol PositionScaleRange\nA type that configures the x-axis and y-axis values.\nstruct PlotDimensionScaleRange\nA range that represents the plot area’s width or height.\nprotocol ScaleDomain\nA type that you can use to configure the domain of a chart.\nstruct AutomaticScaleDomain\nA domain that the chart infers from its data.\nstruct ScaleType\nThe ways you can scale the domain or range of a plot."
  },
  {
    "title": "init(integerLiteral:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markdimension/init(integerliteral:)",
    "html": "Parameters\nvalue\n\nThe width or height."
  },
  {
    "title": "init(x:y:width:height:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(x:y:width:height:)",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\ny\n\nThe value plotted with y.\n\nwidth\n\nThe rectangle width. If width is nil then step size will be used. If there is no step size a default width (in pts) will be used.\n\nheight\n\nThe rectangle height. If height is nil then step size will be used. If there is no step size a default height (in pts) will be used.\n\nDiscussion\n\nUse this initializer to map an x and y position to a rectangle for each data element. Optionally, specify the width or height of the rectangles.\n\nThe example below omits the optional width and height parameters and uses a number scale starting at (0,0). The rectangle has the coordinates: (0,0), (0,3), (3,0), (3,3).\n\nChart(data) {\n    RectangleMark(\n        x: .value(\"Rect X\", 3),\n        y: .value(\"Rect Y\", 3)\n    )\n    .opacity(0.2)\n\n\n    PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n\n\nSee Also\nCreating a Rectangle Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a rectangle mark with an y interval encoding and an x encoding.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a rectangle mark with an x interval encoding and a y encoding.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates a rectangle mark with x and y interval encodings."
  },
  {
    "title": "init(xStart:xEnd:y:height:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(xstart:xend:y:height:)-4x46i",
    "html": "Discussion\n\nxStart: The x start position. If xStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nxEnd: The x end position. If xEnd is nil then the rectangle will end at the trailing edge of the plotting area.\n\ny: The value plotted with y.\n\nheight: The rectangle height. If height is nil then step size will be used. If there is no step size a default height (in pts) will be used.\n\nDiscussion\n\nUse this initializer to map a y position to a rectangle for each data element. Optionally, specify the height, xStart position, or xEnd position, of the rectangles.\n\nThe example below omits the optional x, width, and height parameters and uses a number scale starting at (0,0) and ending at (6,6). The rectangle has the coordinates: (0,0), (0,3), (6,3), (6,0).\n\nChart(data) {\n    RectangleMark(\n        y: .value(\"Rect Y\", 3)\n    )\n    .opacity(0.2)\n\n\n    PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n"
  },
  {
    "title": "init(xStart:xEnd:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark/init(xstart:xend:ystart:yend:)-5682c",
    "html": "Discussion\n\nxStart: The x start position. If xStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nxEnd: The x end position. If xEnd is nil then the rectangle will end at the trailing edge of the plotting area.\n\nyStart: The y start position. If yStart is nil then the rectangle will start at the leading edge of the plotting area.\n\nyEnd: The y end position. If yEnd is nil then the rectangle will end at the trailing edge of the plotting area.\n\nDiscussion\n\nUse this initializer to create one rectangle with any optional x start, x end, y start, and y end position. If no parameters are specified the rectangle will fill the plotting area of the chart.\n\nThe example below uses a number scale starting at (0,0) and ending at (6,6). The rectangle has the coordinates: (2,2), (2,4), (4,4), (4,2).\n\nChart(data) {\n    RectangleMark()\n        .opacity(0.2)\n\n\n    PointMark(\n        x: .value(\"X\", $0.x),\n        y: .value(\"Y\", $0.y)\n    )\n}\n"
  },
  {
    "title": "init(xStart:xEnd:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rulemark/init(xstart:xend:y:)-27yvc",
    "html": "Parameters\nxStart\n\nThe value plotted with x start.\n\nxEnd\n\nThe value plotted with x end.\n\ny\n\nThe value plotted with y.\n\nDiscussion\n\nUse this initializer to create a horizontal rule at x positions from xStart to xEnd to a y position:\n\nChart(data) {\n    RuleMark(\n        xStart: .value(\"Start Date\", $0.startDate),\n        xEnd: .value(\"End Date\", $0.endDate),\n        y: .value(\"Pollen Source\", $0.source)\n    )\n}\n\n\nSee the second code example in RuleMark for the setup of the structure that contains the startDate, endDate, and source properties."
  },
  {
    "title": "init(xStart:xEnd:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rulemark/init(xstart:xend:y:)-444cp",
    "html": "Parameters\nxStart\n\nThe x start position. If xStart is nil the rule will start at the leading edge of the plotting area.\n\nxEnd\n\nThe x end position. If xEnd is nil the rule will end at the trailing edge of the plotting area.\n\ny\n\nThe value plotted with y.\n\nDiscussion\n\nUse this initializer to create a horizontal rule across a chart’s plotting area at a y position:\n\nChart {\n    ForEach(data) {\n        BarMark(\n            x: .value(\"Department\", $0.department),\n            y: .value(\"Profit\", $0.profit)\n        )\n    }\n    RuleMark(y: .value(\"Break Even Threshold\", 9000))\n        .foregroundStyle(.red)\n}\n\n\nSee the first code example in RuleMark for the setup of the structure that contains the department and profit properties."
  },
  {
    "title": "init(x:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rulemark/init(x:ystart:yend:)-5gy50",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\nyStart\n\nThe value plotted with y start.\n\nyEnd\n\nThe value plotted with y end.\n\nDiscussion\n\nUse this initializer to create a vertical line at y positions from yStart to yEnd to an x position:\n\nChart(data) {\n    RuleMark(\n        x: .value(\"Pollen Source\", $0.source),\n        yStart: .value(\"Start Date\", $0.startDate),\n        yEnd: .value(\"End Date\", $0.endDate)\n    )\n}\n\n\nSee RuleMark for the setup of the structure that contains the startDate, endDate, and source properties."
  },
  {
    "title": "AnyChartSymbolShape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/anychartsymbolshape",
    "html": "Topics\nInitializers\ninit(ChartSymbolShape)\nRelationships\nConforms To\nAnimatable\nChartSymbolShape\nSendable\nShape\nView\nSee Also\nMark configuration\nstruct MarkStackingMethod\nThe ways in which you can stack marks in a chart.\nstruct MarkDimension\nAn individual dimension representing a mark’s width or height.\nstruct InterpolationMethod\nThe ways in which line or area marks interpolate their data.\nprotocol ChartSymbolShape\nA type that can act as a shape for the marks that you add to a chart."
  },
  {
    "title": "init(x:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rulemark/init(x:ystart:yend:)-8iusl",
    "html": "Parameters\nx\n\nThe x position. If x is nil, the rule will be centered horizontally by default.\n\nyStart\n\nThe value plotted with y start.\n\nyEnd\n\nThe value plotted with y end.\n\nDiscussion\n\nUse this initializer to create a vertical rule at y positions from yStart to yEnd for a single x position:\n\nChart(data) {\n    RuleMark(\n        yStart: .value(\"Start Date\", $0.startDate),\n        yEnd: .value(\"End Date\", $0.endDate)\n    )\n}\n\n\nSee RuleMark for the setup of the structure containing the startDate, endDate, and source properties."
  },
  {
    "title": "init(x:yStart:yEnd:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rulemark/init(x:ystart:yend:)-6zemd",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\nyStart\n\nThe y start position. If yStart is nil the rule will start at the leading edge of the plotting area.\n\nyEnd\n\nThe y end position. If yEnd is nil the rule will end at the trailing edge of the plotting area.\n\nDiscussion\n\nUse this initializer to create a vertical rule across a chart’s plotting area at an x position:\n\nChart {\n    ForEach(data) {\n        BarMark(\n            x: .value(\"Profit\", $0.profit),\n            y: .value(\"Department\", $0.department)\n        )\n    }\n    RuleMark(x: .value(\"Break Even Threshold\", 9000))\n        .foregroundStyle(.red)\n}\n\n\nSee the first code example in RuleMark for the setup of the structure that contains department and profit properties."
  },
  {
    "title": "BarMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/barmark",
    "html": "Overview\n\nYou can create different kinds of bar charts using the BarMark chart content. To create a simple vertical bar chart that plots categories with x positions and numbers with y positions, use init(x:y:width:height:stacking:). For example, you can display profit by department:\n\nstruct Profit {\n    let department: String\n    let profit: Double\n}\n\n\nlet data: [Profit] = [\n    Profit(department: \"Production\", profit: 15000),\n    Profit(department: \"Marketing\", profit: 8000),\n    Profit(department: \"Finance\", profit: 10000)\n]\n\n\nvar body: some View {\n    Chart(data) {\n        BarMark(\n            x: .value(\"Department\", $0.department),\n            y: .value(\"Profit\", $0.profit)\n        )\n    }\n}\n\n\nSwift Charts provides several other initializers for BarMark. Below are a few more examples using them. For a full list of initializers see the topic section.\n\nStacked Bar Chart\n\nBarkMark automatically stacks content when more than one bar maps to the same location. You can see this if you split the profit data up by category:\n\nstruct ProfitByCategory {\n    let department: String\n    let profit: Double\n    let productCategory: String\n}\n\n\nlet data: [ProfitByCategory] = [\n    ProfitByCategory(department: \"Production\", profit: 4000, productCategory: \"Gizmos\"),\n    ProfitByCategory(department: \"Production\", profit: 5000, productCategory: \"Gadgets\"),\n    ProfitByCategory(department: \"Production\", profit: 6000, productCategory: \"Widgets\"),\n    ProfitByCategory(department: \"Marketing\", profit: 2000, productCategory: \"Gizmos\"),\n    ProfitByCategory(department: \"Marketing\", profit: 1000, productCategory: \"Gadgets\"),\n    ProfitByCategory(department: \"Marketing\", profit: 5000, productCategory: \"Widgets\"),\n    ProfitByCategory(department: \"Finance\", profit: 2000, productCategory: \"Gizmos\"),\n    ProfitByCategory(department: \"Finance\", profit: 3000, productCategory: \"Gadgets\"),\n    ProfitByCategory(department: \"Finance\", profit: 5000, productCategory: \"Widgets\")\n]\n\n\nvar body: some View {\n    Chart(data) {\n        BarMark(\n            x: .value(\"Category\", $0.department),\n            y: .value(\"Profit\", $0.profit)\n        )\n    }\n}\n\n\nThis results in a chart that looks identical to the chart seen in the Overview section because the bars with the same department category are stacked on top of each other. To differentiate the product categories, add a foregroundStyle(by:) modifer that specifies a visual encoding for the productCategory:\n\nChart(data) {\n    BarMark(\n        x: .value(\"Category\", $0.department),\n        y: .value(\"Profit\", $0.profit)\n    )\n    .foregroundStyle(by: .value(\"Product Category\", $0.productCategory))\n}\n\n\nYou can use the optional stacking: parameter in the BarMark initializer to modify the stacking mechanism. See MarkStackingMethod for the stacking options.\n\n1D Bar Chart\n\nTo build a one dimensional chart, use one of the initializers that only requires a PlottableValue for one dimension, like init(x:yStart:yEnd:width:stacking:) for plotting with x. The example below reuses the data from the previous example to get the production department values:\n\nChart(data) { // Get the Production values.\n    BarMark(\n        x: .value(\"Profit\", $0.profit)\n    )\n    .foregroundStyle(by: .value(\"Product Category\", $0.productCategory))\n}\n\n\nInterval Bar Chart\n\nUse BarMark to represent intervals by using the init(xStart:xEnd:y:height:), init(xStart:xEnd:y:height:stacking:), init(x:yStart:yEnd:width:) or init(x:yStart:yEnd:width:stacking:). The example below displays a Gantt chart by plotting the start and end properties to x positions and the task property to y positions:\n\nstruct Job {\n    let job: String\n    let start: Double\n    let end: Double\n}\n\n\nlet data: [Job] = [\n    Job(job: \"Job 1\", start: 0, end: 15),\n    Job(job: \"Job 2\", start: 5, end: 25),\n    Job(job: \"Job 1\", start: 20, end: 35),\n    Job(job: \"Job 1\", start: 40, end: 55),\n    Job(job: \"Job 2\", start: 30, end: 60),\n    Job(job: \"Job 2\", start: 30, end: 60)\n]\n\n\nvar body: some View {\n    Chart(data) {\n        BarMark(\n            xStart: .value(\"Start Time\", $0.start),\n            xEnd: .value(\"End Time\", $0.end),\n            y: .value(\"Job\", $0.job)\n        )\n    }\n}\n\n\nTopics\nCreating a Bar Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a bar mark that plots values with x and its y interval.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a bar mark that plots values with its x interval and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values with x and y.\ninit<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots a value on x with fixed y interval.\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>, height: MarkDimension, stacking: MarkStackingMethod)\nCreates a bar mark that plots values on y with fixed x interval.\nInitializers\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates a bar mark with fixed x interval that plots values with its y interval.\ninit<X>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?)\nCreates a bar mark that plots values with its x interval and fixed y position.\nRelationships\nConforms To\nChartContent\nSee Also\nMarks\nstruct AreaMark\nChart content that represents data using the area of one or more regions.\nstruct LineMark\nChart content that represents data using a sequence of connected line segments.\nstruct PointMark\nChart content that represents data using points.\nstruct RectangleMark\nChart content that represents data using rectangles.\nstruct RuleMark\nChart content that represents data using a single horizontal or vertical rule."
  },
  {
    "title": "init(x:y:series:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/linemark/init(x:y:series:)",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\ny\n\nThe value plotted with y.\n\nseries\n\nThe value with which to split the line series by.\n\nDiscussion\n\nUse this initializer to create a multi-line chart from a single data source.\n\nChart(sunshineData) {\n    LineMark(\n        x: .value(\"Month\", $0.date),\n        y: .value(\"Hours of Sunshine\", $0.hoursOfSunshine)\n    )\n    .foregroundStyle(by: .value(\"City\", $0.city))\n}\n\n\nSee Also\nCreating a Line Mark\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>)\nCreates a line mark."
  },
  {
    "title": "init(x:y:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/linemark/init(x:y:)",
    "html": "Parameters\nx\n\nThe value plotted with x.\n\ny\n\nThe value plotted with y.\n\nDiscussion\n\nUse this initializer to create a chart with a single line.\n\nChart(sunshineData) {\n    LineMark(\n        x: .value(\"Month\", $0.date),\n        y: .value(\"Hours of Sunshine\", $0.hoursOfSunshine)\n    )\n}\n\n\nSee Also\nCreating a Line Mark\ninit<X, Y, S>(x: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>)\nCreates a separate line for each unique value of series."
  },
  {
    "title": "annotation(position:alignment:spacing:overflowResolution:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/annotation(position:alignment:spacing:overflowresolution:content:)-1kiow",
    "html": "Parameters\nposition\n\nThe location relative to the item being annotated at which the annotation will be placed.\n\nalignment\n\nThe guide for aligning the annotation in the specified position.\n\nspacing\n\nDistance between the annotation and the annotated content, or nil if you want to use the default distance.\n\noverflowResolution\n\nHow to resolve the annotation exceeding the boundary of the plot.\n\ncontent\n\nA view builder that creates the annotation. The builder takes one input which provides information regarding the item being annotated such as its size."
  },
  {
    "title": "annotation(position:alignment:spacing:overflowResolution:content:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/annotation(position:alignment:spacing:overflowresolution:content:)-6w4p3",
    "html": "Parameters\nposition\n\nThe location relative to the item being annotated at which the annotation will be placed.\n\nalignment\n\nThe guide for aligning the annotation in the specified position.\n\nspacing\n\nDistance between the annotation and the annotated content, or nil if you want to use the default distance.\n\noverflowResolution\n\nHow to resolve the annotation exceeding the boundary of the plot.\n\ncontent\n\nA view builder that creates the annotation."
  },
  {
    "title": "Body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/body-swift.associatedtype",
    "html": "Required\n\nSee Also\nImplementing chart content\nvar body: Self.Body\nThe content and behavior of the chart content.\n\nRequired"
  },
  {
    "title": "blur(radius:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/blur(radius:)",
    "html": "Parameters\nradius\n\nThe radial size of the blur. A blur is more diffuse when its radius is large."
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/accessibilityvalue(_:)-5g7o4",
    "html": "See Also\nConfiguring accessibility\nfunc accessibilityHidden(Bool) -> some ChartContent\nSpecifies whether to hide this chart content from system accessibility features.\nfunc accessibilityIdentifier(String) -> some ChartContent\nAdds an identifier string to the chart content.\nfunc accessibilityLabel(LocalizedStringKey) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel<S>(S) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel(Text) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue(LocalizedStringKey) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue<S>(S) -> some ChartContent\nAdds a description of the value that the chart content contains."
  },
  {
    "title": "accessibilityValue(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/accessibilityvalue(_:)-4k545",
    "html": "See Also\nConfiguring accessibility\nfunc accessibilityHidden(Bool) -> some ChartContent\nSpecifies whether to hide this chart content from system accessibility features.\nfunc accessibilityIdentifier(String) -> some ChartContent\nAdds an identifier string to the chart content.\nfunc accessibilityLabel(LocalizedStringKey) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel<S>(S) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel(Text) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue(LocalizedStringKey) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue(Text) -> some ChartContent\nAdds a description of the value that the chart content contains."
  },
  {
    "title": "body | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/body-swift.property",
    "html": "Required\n\nSee Also\nImplementing chart content\nassociatedtype Body : ChartContent\nThe type of chart content contained in the body of this instance.\n\nRequired"
  },
  {
    "title": "Plot | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plot",
    "html": "Topics\nInitializers\ninit(content: () -> Content)\nRelationships\nConforms To\nChartContent\nConforms when Content conforms to ChartContent.\nSee Also\nCharts\nCreating a chart using Swift Charts\nMake a chart by combining chart building blocks in SwiftUI.\nstruct Chart\nA SwiftUI view that displays a chart.\nprotocol ChartContent\nA type that represents the content that you draw on a chart.\nAvailable when Content conforms to ChartContent.\nstruct ChartContentBuilder\nA result builder that you use to compose the contents of a chart."
  },
  {
    "title": "symbolSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/symbolsize(_:)-8dtyt",
    "html": "Parameters\narea\n\nThe perceived area in square points. For example, a square with 10 points on each side has an area of 100 square points.\n\nSee Also\nSetting symbol appearance\nfunc symbol<S>(S) -> some ChartContent\nSets a plotting symbol type for the chart content.\nfunc symbol<V>(symbol: () -> V) -> some ChartContent\nSets a SwiftUI view to use as the symbol for the chart content.\nfunc symbolSize(CGSize) -> some ChartContent\nSets the plotting symbol size for the chart content."
  },
  {
    "title": "lineStyle(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/linestyle(by:)",
    "html": "Parameters\nvalue\n\nThe data value.\n\nSee Also\nEncoding data into mark characteristics\nfunc foregroundStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using a foreground style.\nfunc position<P>(by: PlottableValue<P>, axis: Axis?, span: MarkDimension) -> some ChartContent\nRepresents data using position.\nfunc symbol<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using different kinds of symbols.\nfunc symbolSize<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using symbol sizes."
  },
  {
    "title": "alignsMarkStylesWithPlotArea(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/alignsmarkstyleswithplotarea(_:)",
    "html": "Parameters\naligns\n\nA Boolean value that indicates whether to align this item’s styles with the plotting area.\n\nDiscussion\n\nMarks map unit-point coordinates within the plot area’s bounds.\n\nSee Also\nPositioning marks\nfunc offset(CGSize) -> some ChartContent\nApplies an offset that you specify as a size to the chart content.\nfunc offset(x: CGFloat, y: CGFloat) -> some ChartContent\nApplies a vertical and horizontal offset to the chart content.\nfunc offset(x: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, y: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content."
  },
  {
    "title": "symbol(symbol:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/symbol(symbol:)",
    "html": "Parameters\nsymbol\n\nThe view to use as the plotting symbol.\n\nSee Also\nSetting symbol appearance\nfunc symbol<S>(S) -> some ChartContent\nSets a plotting symbol type for the chart content.\nfunc symbolSize(CGSize) -> some ChartContent\nSets the plotting symbol size for the chart content.\nfunc symbolSize(CGFloat) -> some ChartContent\nSets the plotting symbol size for the chart content according to a perceived area."
  },
  {
    "title": "symbol(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/symbol(_:)",
    "html": "Parameters\nsymbol\n\nThe symbol.\n\nSee Also\nSetting symbol appearance\nfunc symbol<V>(symbol: () -> V) -> some ChartContent\nSets a SwiftUI view to use as the symbol for the chart content.\nfunc symbolSize(CGSize) -> some ChartContent\nSets the plotting symbol size for the chart content.\nfunc symbolSize(CGFloat) -> some ChartContent\nSets the plotting symbol size for the chart content according to a perceived area."
  },
  {
    "title": "symbolSize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent/symbolsize(_:)-7s0vk",
    "html": "Parameters\nsize\n\nThe symbol’s bounding box’s dimensions.\n\nSee Also\nSetting symbol appearance\nfunc symbol<S>(S) -> some ChartContent\nSets a plotting symbol type for the chart content.\nfunc symbol<V>(symbol: () -> V) -> some ChartContent\nSets a SwiftUI view to use as the symbol for the chart content.\nfunc symbolSize(CGFloat) -> some ChartContent\nSets the plotting symbol size for the chart content according to a perceived area."
  },
  {
    "title": "ValueAlignedLimitBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/valuealignedlimitbehavior",
    "html": "Topics\nType Properties\nstatic var always: ValueAlignedLimitBehavior\nThe always limit behavior.\nstatic var automatic: ValueAlignedLimitBehavior\nThe automatic limit behavior.\nstatic var never: ValueAlignedLimitBehavior\nThe never limit behavior."
  },
  {
    "title": "MajorValueAlignment | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/majorvaluealignment",
    "html": "Topics\nType Properties\nstatic var page: MajorValueAlignment<Value>\nAutomatically set the major aligment unit to be the size of the visible domain which is equivalent to a page.\nType Methods\nstatic func matching(DateComponents) -> MajorValueAlignment<Value>\nAlign to calendar components.\nstatic func unit(Value) -> MajorValueAlignment<Value>\nAlign to units."
  },
  {
    "title": "ChartScrollTargetBehaviorContext | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehaviorcontext",
    "html": "Topics\nInstance Properties\nvar chartProxy: ChartProxy\nThe chart proxy that you use to access the scales and plot area of the chart.\nSubscripts\nsubscript<T>(dynamicMember _: KeyPath<ScrollTargetBehaviorContext, T>) -> T"
  },
  {
    "title": "AxisValueLabelOrientation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabelorientation",
    "html": "Topics\nType Properties\nstatic var automatic: AxisValueLabelOrientation\nstatic var horizontal: AxisValueLabelOrientation\nA horizontal label\nstatic var vertical: AxisValueLabelOrientation\nA vertical label, reading top down.\nstatic var verticalReversed: AxisValueLabelOrientation\nA vertical label, reading bottom up.\nRelationships\nConforms To\nCustomStringConvertible"
  },
  {
    "title": "ChartAxisContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartaxiscontent",
    "html": "Relationships\nConforms To\nView"
  },
  {
    "title": "BasicChartSymbolShape | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/basicchartsymbolshape",
    "html": "Topics\nInstance Methods\nfunc strokeBorder(lineWidth: CGFloat) -> some ChartSymbolShape\nCreates a stroked symbol shape by inner-stroking the basic symbol shape.\nRelationships\nConforms To\nAnimatable\nChartSymbolShape\nSendable\nShape\nView"
  },
  {
    "title": "AxisMarkPreset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarkpreset",
    "html": "Topics\nType Properties\nstatic var aligned: AxisMarkPreset\nThe aligned axis markers style.\nstatic var automatic: AxisMarkPreset\nAutomatically determines the marker style.\nstatic var extended: AxisMarkPreset\nThe extended axis markers style.\nstatic var inset: AxisMarkPreset\nThe inset axis markers style.\nRelationships\nConforms To\nCustomStringConvertible"
  },
  {
    "title": "AnnotationOverflowResolution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/annotationoverflowresolution",
    "html": "Topics\nStructures\nstruct Boundary\nDescribes a boundary of a chart for overflow resolution.\nstruct Strategy\nStrategies for annotation overflow resolution.\nInitializers\ninit(x: AnnotationOverflowResolution.Strategy, y: AnnotationOverflowResolution.Strategy)\nCreates an AnnotationOverflowResolution with strategies for the X and Y dimensions.\nType Properties\nstatic let automatic: AnnotationOverflowResolution\nAutomatically resolves overflow in each dimension."
  },
  {
    "title": "AxisMarkValues | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarkvalues",
    "html": "Topics\nType Properties\nstatic var automatic: AxisMarkValues\nAutomatically determines the values for the markers of the axis.\nType Methods\nstatic func automatic(desiredCount: Int?, roundLowerBound: Bool?, roundUpperBound: Bool?) -> AxisMarkValues\nAutomatically determines the values for the markers, approximating the target number of values.\nstatic func automatic<P>(minimumStride: P, desiredCount: Int?, roundLowerBound: Bool?, roundUpperBound: Bool?) -> AxisMarkValues\nstatic func stride(by: Calendar.Component, count: Int, roundLowerBound: Bool?, roundUpperBound: Bool?, calendar: Calendar?) -> AxisMarkValues\nCreates values with the given calendar unit.\nstatic func stride<P>(by: P, roundLowerBound: Bool?, roundUpperBound: Bool?) -> AxisMarkValues\nCreates values with the given number step.\nRelationships\nConforms To\nCustomStringConvertible"
  },
  {
    "title": "AxisMarkPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarkposition",
    "html": "Topics\nType Properties\nstatic var automatic: AxisMarkPosition\nautomatically places the title.\nstatic var bottom: AxisMarkPosition\nA markers at the bottom of the chart\nstatic var leading: AxisMarkPosition\nMarkers on the leading edge of the chart.\nstatic var top: AxisMarkPosition\nA markers at the top of the chart\nstatic var trailing: AxisMarkPosition\nMarkers on the trailing edge of the chart.\nRelationships\nConforms To\nCustomStringConvertible"
  },
  {
    "title": "AnyChartContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/anychartcontent",
    "html": "Topics\nInitializers\ninit(ChartContent)\ninit(erasing: some ChartContent)\nRelationships\nConforms To\nChartContent"
  },
  {
    "title": "ChartScrollTargetBehavior | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartscrolltargetbehavior",
    "html": "Topics\nInstance Methods\nfunc updateTarget(inout ScrollTarget, context: ChartScrollTargetBehaviorContext)\n\nRequired Default implementation provided.\n\nType Methods\nstatic func valueAligned(matching: DateComponents, majorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\nstatic func valueAligned<P>(unit: P, majorAlignment: MajorValueAlignment<P>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\nstatic func valueAligned(xMatching: DateComponents, yMatching: DateComponents, xMajorAlignment: MajorValueAlignment<Date>?, yMajorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\nstatic func valueAligned<Y>(xMatching: DateComponents, yUnit: Y, xMajorAlignment: MajorValueAlignment<Date>?, yMajorAlignment: MajorValueAlignment<Y>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\nstatic func valueAligned<X>(xUnit: X, yMatching: DateComponents, xMajorAlignment: MajorValueAlignment<X>?, yMajorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\nstatic func valueAligned<X, Y>(xUnit: X, yUnit: Y, xMajorAlignment: MajorValueAlignment<X>?, yMajorAlignment: MajorValueAlignment<Y>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior\nCreates a scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\nDefault Implementations\nScrollTargetBehavior Implementations\nRelationships\nInherits From\nScrollTargetBehavior\nConforming Types\nValueAlignedChartScrollTargetBehavior"
  },
  {
    "title": "ChartProxy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartproxy",
    "html": "Overview\n\nYou get a chart proxy from the chartOverlay(alignment:content:) and chartBackground(alignment:content:) modifiers. You can use the chart proxy to convert data values to screen coordinates or vice-versa.\n\nBelow is an example where we convert the screen coordinates from a drag gesture to data values.\n\nChart(data) {\n    LineMark(\n        x: .value(\"date\", $0.date),\n        y: .value(\"price\", $0.price)\n    )\n}\n.chartOverlay { proxy in\n    GeometryReader { geometry in\n        Rectangle().fill(.clear).contentShape(Rectangle())\n            .gesture(\n                DragGesture()\n                    .onChanged { value in\n                        // Convert the gesture location to the coordinate space of the plot area.\n                        let origin = geometry[proxy.plotAreaFrame].origin\n                        let location = CGPoint(\n                            x: value.location.x - origin.x,\n                            y: value.location.y - origin.y\n                        )\n                        // Get the x (date) and y (price) value from the location.\n                        let (date, price) = proxy.value(at: location, as: (Date, Double).self)\n                        print(\"Location: \\(date), \\(price)\")\n                    }\n            )\n    }\n}\n\nTopics\nInstance Properties\nvar plotAreaFrame: Anchor<CGRect>\nAn anchor to the frame of the chart’s plot.\nvar plotAreaSize: CGSize\nThe size of the plot in the chart.\nvar plotContainerFrame: Anchor<CGRect>?\nAn anchor to the frame of the chart’s plot container, or nil if there is no chart in the context of the chart proxy.\nvar plotFrame: Anchor<CGRect>?\nAn anchor to the frame of the chart’s plot, or nil if there is no chart in the context of the chart proxy.\nvar plotSize: CGSize\nThe size of the plot in the chart.\nInstance Methods\nfunc angle(at: CGPoint) -> Angle\nReturns the angle relative to the plot area center, where the 12 o’clock position is interpreted as zero degrees, increasing clockwise.\nfunc foregroundStyle<P>(for: P) -> AnyShapeStyle?\nReturns the foreground style for the given data value. Returns nil if the foreground style scale is unavailable, or the value is invalid.\nfunc foregroundStyleDomain<P>(dataType: P.Type) -> [P]\nfunc lineStyle<P>(for: P) -> StrokeStyle?\nReturns the line style for the given data value. Returns nil if the line style scale is unavailable, or the value is invalid.\nfunc lineStyleDomain<P>(dataType: P.Type) -> [P]\nfunc position<X, Y>(for: (x: X, y: Y)) -> CGPoint?\nReturns the x and y positions as a CGPoint for the given data values, or nil if either the X or the y scale is unavailable or if any data value is invalid. The returned position is relative to the plot.\nfunc position<P>(forX: P) -> CGFloat?\nReturns the x position for the given data value, or nil if the x scale is unavailable or if the data value is invalid. The returned position is relative to the plot.\nfunc position<P>(forY: P) -> CGFloat?\nReturns the y position for the given data value, or nil if the y scale is unavailable or if the data value is invalid. The returned position is relative to the plot.\nfunc positionRange<X, Y>(for: (x: X, y: Y)) -> CGRect?\nReturns the range of x and y positions for the given pair of data values, or nil if the y scale is unavailable or if the value is invalid.\nfunc positionRange<P>(forX: P) -> ClosedRange<CGFloat>?\nReturns the range of x position for the given data value, or nil if the x scale is unavailable or if the value is invalid. The returned position range is relative to the plot.\nfunc positionRange<P>(forY: P) -> ClosedRange<CGFloat>?\nReturns the range of y position for the given data value, or nil if the x scale is unavailable or if the value is invalid. The returned position range is relative to the plot.\nfunc selectAngleValue(at: Angle)\nfunc selectXRange(from: CGFloat, to: CGFloat)\nfunc selectXValue(at: CGFloat)\nfunc selectYRange(from: CGFloat, to: CGFloat)\nfunc selectYValue(at: CGFloat)\nfunc symbol<P>(for: P) -> AnyChartSymbolShape?\nReturns the symbol for the given data value. Returns nil if the symbol scale is unavailable, or the value is invalid.\nfunc symbolDomain<P>(dataType: P.Type) -> [P]\nfunc symbolSize<P>(for: P) -> CGFloat?\nReturns the symbol size for the given data value. Returns nil if the symbol size scale is unavailable, or the value is invalid.\nfunc symbolSizeDomain<P>(dataType: P.Type) -> [P]\nfunc value<X, Y>(at: CGPoint, as: (X, Y).Type) -> (X, Y)?\nReturns the data values at the given position, or nil if the position does not correspond to a valid Y value.\nfunc value<P>(atAngle: Angle, as: P.Type) -> P?\nReturns the data value at the given angle, or nil if the angle does not correspond to a valid data value.\nfunc value<P>(atX: CGFloat, as: P.Type) -> P?\nReturns the data value at the given x position, or nil if the position does not correspond to a valid X value.\nfunc value<P>(atY: CGFloat, as: P.Type) -> P?\nReturns the data value at the given y position, or nil if the position does not correspond to a valid Y value.\nfunc xDomain<P>(dataType: P.Type) -> [P]\nfunc yDomain<P>(dataType: P.Type) -> [P]\nSee Also\nChart management\nstruct ChartPlotContent\nA view that represents a chart’s plot area."
  },
  {
    "title": "PrimitivePlottableProtocol | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/primitiveplottableprotocol",
    "html": "Relationships\nInherits From\nPlottable"
  },
  {
    "title": "ChartPlotContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartplotcontent",
    "html": "Relationships\nConforms To\nView\nSee Also\nChart management\nstruct ChartProxy\nA proxy that you use to access the scales and plot area of a chart."
  },
  {
    "title": "NumberBins | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/numberbins",
    "html": "Topics\nInitializers\ninit(data: [Value], desiredCount: Int?, minimumStride: Value)\nAutomatically determine the bins from data.\ninit(data: [Value], desiredCount: Int?, minimumStride: Value)\nAutomatically determine the bins from data.\ninit(range: ClosedRange<Value>, count: Int)\nCreates the given number of bins for the range. Expects that the range length is a multiple of count to allow uniform integer bins.\ninit(range: ClosedRange<Value>, count: Int)\nCreates the given number of bins for the range.\ninit(range: ClosedRange<Value>, desiredCount: Int, minimumStride: Value)\nAutomatically determine the bins from a range of data.\ninit(range: ClosedRange<Value>, desiredCount: Int, minimumStride: Value)\nAutomatically determine the bins from a range of data.\ninit(size: Value, range: ClosedRange<Value>)\nCreates uniform bins covering the given range.\ninit(size: Value, range: ClosedRange<Value>)\nCreates uniform bins covering the given range.\ninit(thresholds: [Value])\nCreates N-1 bins with the given N thresholds.\nInstance Properties\nvar thresholds: [Value]\nFind the bin thresholds.\nInstance Methods\nfunc index(for: Value) -> Int\nReturns the bin index for the given value.\nRelationships\nConforms To\nCollection\nEquatable\nSequence\nSee Also\nData bins\nstruct DateBins\nA collection of bins for a chart that plots data against dates.\nstruct ChartBinRange\nThe range of data that a single bin of a chart represents."
  },
  {
    "title": "DateBins | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/datebins",
    "html": "Topics\nInitializers\ninit(data: [Date], desiredCount: Int?, calendar: Calendar)\nAutomatically determine the bins from data.\ninit(range: ClosedRange<Date>, desiredCount: Int, calendar: Calendar)\nAutomatically determine the bins from a range of data.\ninit(thresholds: [Date])\nCreates N-1 bins with the given N thresholds.\ninit(timeInterval: TimeInterval, range: ClosedRange<Date>)\nCreates uniform bins covering the given range. The first bin starts at the lower bound of the range.\ninit(unit: Calendar.Component, by: Int, range: ClosedRange<Date>, calendar: Calendar)\nCreates uniform bins covering the given range.\nInstance Properties\nvar thresholds: [Date]\nFind the bin thresholds.\nInstance Methods\nfunc index(for: Date) -> Int\nReturns the bin index for the given value.\nRelationships\nConforms To\nCollection\nEquatable\nSequence\nSee Also\nData bins\nstruct NumberBins\nA collection of bins for a chart that plots data against numbers.\nstruct ChartBinRange\nThe range of data that a single bin of a chart represents."
  },
  {
    "title": "AnnotationPosition | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/annotationposition",
    "html": "Topics\nType Properties\nstatic let automatic: AnnotationPosition\nPlace the annotation automatically.\nstatic let bottom: AnnotationPosition\nPlace the annotation on the bottom of the item.\nstatic let bottomLeading: AnnotationPosition\nPlace the annotation on the bottom leading corner of the item.\nstatic let bottomTrailing: AnnotationPosition\nPlace the annotation on the bottom trailing corner of the item.\nstatic let leading: AnnotationPosition\nPlace the annotation on the leading edge of the item.\nstatic let overlay: AnnotationPosition\nPlace the annotation as an overlay of the item.\nstatic let top: AnnotationPosition\nPlace the annotation on the top of the item.\nstatic let topLeading: AnnotationPosition\nPlace the annotation on the top leading corner of the item.\nstatic let topTrailing: AnnotationPosition\nPlace the annotation on the top trailing corner of the item.\nstatic let trailing: AnnotationPosition\nPlace the annotation on the trailing edge of the item.\nRelationships\nConforms To\nEquatable\nSee Also\nAnnotations\nstruct AnnotationContext\nInformation about an item that you add an annotation to."
  },
  {
    "title": "ChartBinRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartbinrange",
    "html": "Overview\n\nAll bins except the last for a particular chart represent an open range, meaning that the range doesn’t include the upper bound. The last range of the last bin is closed, so that it does include the upper bound. The system keeps track of the open or closed state of a particular range.\n\nTopics\nInstance Properties\nlet lowerBound: Bound\nlet upperBound: Bound\nRelationships\nConforms To\nRangeExpression\nSee Also\nData bins\nstruct NumberBins\nA collection of bins for a chart that plots data against numbers.\nstruct DateBins\nA collection of bins for a chart that plots data against dates."
  },
  {
    "title": "AxisMarkBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarkbuilder",
    "html": "Topics\nType Methods\nstatic func buildBlock() -> some AxisMark\nstatic func buildEither<T1, T2>(first: T1) -> BuilderConditional<T1, T2>\nProvides support for “if-else” statements in multi-statement closures, producing conditional content for the “then” branch.\nstatic func buildEither<T1, T2>(second: T2) -> BuilderConditional<T1, T2>\nProvides support for “if-else” statements in multi-statement closures, producing conditional content for the “else” branch.\nstatic func buildExpression<Content>(Content) -> Content\nstatic func buildIf<T>(T?) -> T?\nProvides support for “if” statements in multi-statement closures, producing an optional axis content that is visible only when the condition evaluates to true.\nstatic func buildLimitedAvailability<Content>(Content) -> some AxisMark\nProvides support for “if” statements with #available() clauses in multi-statement closures, producing conditional content for the “then” branch, i.e. the conditionally-available branch.\nstatic func buildPartialBlock(accumulated: some AxisMark, next: some AxisMark) -> some AxisMark\nstatic func buildPartialBlock<T>(first: T) -> T\nSee Also\nAxis marks\nprotocol AxisMark\nA type that serves as the basic building block for the elements of an axis.\nstruct AxisTick\nA mark that a chart draws on an axis to indicate a reference point along that axis.\nstruct AxisGridLine\nA line that a chart draws across its plot area to indicate a reference point along a particular axis.\nstruct AxisValueLabel\nA label that describes the value for an axis mark.\nstruct AxisValue\nA value for an axis mark.\nstruct AnyAxisMark\nA type-erased axis mark."
  },
  {
    "title": "AxisValueLabel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axisvaluelabel",
    "html": "Topics\nInitializers\ninit(LocalizedStringKey, centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)\nConstructs an axis value label with the given properties to display the given string.\ninit<S>(S, centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)\nConstructs an axis value label with the given properties to display the given string.\ninit(centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)\nConstructs axis value labels with the given properties and default text.\ninit(centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?, content: () -> Content)\nConstructs an axis value label with the given properties to display the given content.\ninit<Format>(format: Format, centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)\nConstructs an axis value label with the given properties to display the given content.\nRelationships\nConforms To\nAxisMark\nSee Also\nAxis marks\nprotocol AxisMark\nA type that serves as the basic building block for the elements of an axis.\nstruct AxisTick\nA mark that a chart draws on an axis to indicate a reference point along that axis.\nstruct AxisGridLine\nA line that a chart draws across its plot area to indicate a reference point along a particular axis.\nstruct AxisValue\nA value for an axis mark.\nstruct AnyAxisMark\nA type-erased axis mark.\nstruct AxisMarkBuilder\nA result builder that constructs axis marks and overrides default marks."
  },
  {
    "title": "AxisContentBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axiscontentbuilder",
    "html": "Topics\nType Methods\nstatic func buildBlock() -> some AxisContent\nstatic func buildEither<T1, T2>(first: T1) -> BuilderConditional<T1, T2>\nProvides support for “if-else” statements in multi-statement closures, producing conditional content for the “then” branch.\nstatic func buildEither<T1, T2>(second: T2) -> BuilderConditional<T1, T2>\nProvides support for “if-else” statements in multi-statement closures, producing conditional content for the “else” branch.\nstatic func buildExpression<Content>(Content) -> Content\nstatic func buildIf<T>(T?) -> T?\nProvides support for “if” statements in multi-statement closures, producing an optional axis content that is visible only when the condition evaluates to true.\nstatic func buildLimitedAvailability<Content>(Content) -> some AxisContent\nProvides support for “if” statements with #available() clauses in multi-statement closures, producing conditional content for the “then” branch, i.e. the conditionally-available branch.\nstatic func buildPartialBlock(accumulated: some AxisContent, next: some AxisContent) -> some AxisContent\nstatic func buildPartialBlock<T>(first: T) -> T\nSee Also\nAxes\nCustomizing axes in Swift Charts\nImprove the clarity of your chart by configuring the appearance of its axes.\nprotocol AxisContent\nA type that represents the elements that you use to build a chart’s axes.\nstruct AxisMarks\nA group of visual marks that a chart draws to indicate the composition of a chart’s axes.\nstruct AnyAxisContent\nA type-erased element of a chart’s axis."
  },
  {
    "title": "AxisMarks | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/axismarks",
    "html": "Topics\nInitializers\ninit<Format>(format: Format, preset: AxisMarkPreset, position: AxisMarkPosition, values: AxisMarkValues, stroke: StrokeStyle?)\nCreates axis markers with the given properties, will override default markers. Default content will be used for the axis markers.\ninit<Value, Format>(format: Format, preset: AxisMarkPreset, position: AxisMarkPosition, values: [Value], stroke: StrokeStyle?)\nCreates axis markers with the given properties, will override default markers. Default content will be used for the axis markers.\ninit<Value>(preset: AxisMarkPreset, position: AxisMarkPosition, values: [Value], content: (AxisValue) -> Content)\nCreates axis markers with the given properties, will override default markers.\ninit<Value>(preset: AxisMarkPreset, position: AxisMarkPosition, values: [Value], content: () -> Content)\nCreates axis markers with the given properties, will override default markers.\ninit(preset: AxisMarkPreset, position: AxisMarkPosition, values: AxisMarkValues, content: () -> Content)\nCreates axis markers with the given properties,will override default markers.\ninit(preset: AxisMarkPreset, position: AxisMarkPosition, values: AxisMarkValues, content: (AxisValue) -> Content)\nCreates axis markers with the given properties,will override default markers.\ninit(preset: AxisMarkPreset, position: AxisMarkPosition, values: AxisMarkValues, stroke: StrokeStyle?)\nCreates axis markers with the given properties, will override default markers. Default content will be used for the axis markers.\ninit<Value>(preset: AxisMarkPreset, position: AxisMarkPosition, values: [Value], stroke: StrokeStyle?)\nCreates axis markers with the given properties, will override default markers. Default content will be used for the axis markers.\nRelationships\nConforms To\nAxisContent\nSee Also\nAxes\nCustomizing axes in Swift Charts\nImprove the clarity of your chart by configuring the appearance of its axes.\nprotocol AxisContent\nA type that represents the elements that you use to build a chart’s axes.\nstruct AnyAxisContent\nA type-erased element of a chart’s axis.\nstruct AxisContentBuilder\nA result builder that constructs axis content."
  },
  {
    "title": "AnyAxisContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/anyaxiscontent",
    "html": "Topics\nInitializers\ninit(AxisContent)\ninit(erasing: some AxisContent)\nRelationships\nConforms To\nAxisContent\nSee Also\nAxes\nCustomizing axes in Swift Charts\nImprove the clarity of your chart by configuring the appearance of its axes.\nprotocol AxisContent\nA type that represents the elements that you use to build a chart’s axes.\nstruct AxisMarks\nA group of visual marks that a chart draws to indicate the composition of a chart’s axes.\nstruct AxisContentBuilder\nA result builder that constructs axis content."
  },
  {
    "title": "Customizing axes in Swift Charts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/customizing-axes-in-swift-charts",
    "html": "Overview\n\nSwift Charts automatically configures the axes in your charts based on the data that you specify. Sometimes you can communicate the data more clearly by customizing the axis configuration. For example, you can:\n\nSpecify a range for an axis.\n\nChoose the specific values — like categories, dates, or numbers — the axes display.\n\nSet the visual style of grid lines, ticks, or labels that represent each value.\n\nThis article demonstrates how to use these features to create the following chart that displays battery levels over the course of a day:\n\nFor design guidance about charts and their axes, see the Charts section in the Human Interface Guidelines.\n\nStart with default axes\n\nGenerating a chart using the framework default axis configuration typically provides a good foundation to start from. For example, the following code creates a basic battery chart from an array of data points:\n\nstruct BatteryData {\n    let date: Date\n    let level: Double\n\n\n    static let data: [BatteryData] = /* Array of BatteryData instances */\n}\n\n\nChart(BatteryData.data, id: \\.date) {\n    BarMark(\n        // Create one bar for every 1800 seconds (30 minutes).\n        x: .value(\"Time\", $0.date ..< $0.date.advanced(by: 1800)),\n        y: .value(\"Battery Level\", $0.level)\n    )\n    .foregroundStyle(.green)\n}\n\n\nThe framework chooses a default axis configuration that’s sensible for the data. The data fills the available space without overflowing in any dimension. Both axes have labels that indicate the values that the chart’s content represents. The following chart displays the default axis configuration:\n\nHowever, given that batteries have a maximum capacity of 100 percent and that people typically charge their phones once per day, you can improve this chart by configuring the axes.\n\nSet the domain of an axis\n\nBattery levels always fall within a range of 0 to 100 percent. Being able to visually compare a given value against the whole range helps people to better understand how the current battery state compares to a full battery. So it makes sense to fix the range of the y-axis to the full possible range, regardless of the range of the data in the current data set.\n\nSet a range for the y-axis using the chartYScale(domain:type:) view modifier:\n\n.chartYScale(domain: [0, 100])\n\n\nSpecify axis values\n\nSwift Charts chooses a default number of grid lines and labels to display on each axis. You can specify a different number of values by using the chartYAxis(content:) modifier, which takes one or more AxisMarks instances in its content parameter. Request a specific number of values by initializing the axis marks instance with the automatic(desiredCount:roundLowerBound:roundUpperBound:) value. For example, you can request that the axis have three values:\n\n.chartYAxis {\n    AxisMarks(values: .automatic(desiredCount: 3))\n}\n\n\nFor the battery chart, this creates labels at 0, 50, and 100:\n\nNote\n\nThe actual number of values that the framework uses might differ from the value that you request. For example, if you request four values in the above example, the framework uses five instead to avoid displaying fractional labels.\n\nAlternatively, you can indicate exact values to mark on the axis using an array of values:\n\n.chartYAxis {\n    AxisMarks(values: [0, 50, 100])\n}\n\nFormat values\n\nYou can add clarity to any chart by properly formatting its axis values. The values on the y-axis in the battery chart represent percentages, so you can pass the format parameter to the axis marks initializer to apply an appropriate formatting:\n\n.chartYAxis {\n    AxisMarks(\n        format: Decimal.FormatStyle.Percent.percent.scale(1),\n        values: [0, 50, 100]\n    )\n}\n\n\nCompose axis marks\n\nTo add more complex styling, compose axis marks inside the modifier’s content closure. For example, to add more horizontal grid lines without adding more labels, use two separate AxisMarks instances to render the grid lines and labels separately:\n\n.chartYAxis {\n    AxisMarks(\n        values: [0, 50, 100]\n    ) {\n        AxisValueLabel(format: Decimal.FormatStyle.Percent.percent.scale(1))\n    }\n    \n    AxisMarks(\n        values: [0, 25, 50, 75, 100]\n    ) {\n        AxisGridLine()\n    }\n}\n\n\nThe AxisMarks initializers in the above code each take a content parameter that’s an axis builder indicating which elements the marks apply to. Use the builder to compose AxisGridLine, AxisTick, and AxisValueLabel elements. The above example renders grid lines at 0, 25, 50, 75, and 100, but places labels only at 0, 50, and 100:\n\nFor additional customization, apply the styling methods that AxisMark provides. For example, you can adjust the font of the value labels by applying the font(_:) method to the AxisValueLabel instance.\n\nConditionally format labels\n\nFor the specified data, the battery chart marks every sixth hour along the x-axis and includes the AM or PM indicator with each hour by default. You can make the chart more readable by including a mark every three hours, and displaying the AM or PM indicator only when it changes.\n\nUse the chartXAxis(content:) view modifier to configure the x-axis, much like you use the chartYAxis(content:) modifier for the y-axis. The following code passes a stride(by:count:roundLowerBound:roundUpperBound:calendar:) value to an AxisMarks instance to control the frequency of marks, and uses conditional formatting to show AM or PM only at noon and midnight:\n\n.chartXAxis {\n    AxisMarks(values: .stride(by: .hour, count: 3)) { value in\n        if let date = value.as(Date.self) {\n            let hour = Calendar.current.component(.hour, from: date)\n            switch hour {\n            case 0, 12:\n                AxisValueLabel(format: .dateTime.hour())\n            default:\n                AxisValueLabel(format: .dateTime.hour(.defaultDigits(amPM: .omitted)))\n        }\n        \n        AxisGridLine()\n        AxisTick()\n    }\n}\n\n\nStyle grid lines and ticks\n\nYou can provide people reading this chart with additional context by displaying the date below the first value label and for subsequent labels where the date changes. Create a stack of text views in the AxisValueLabel builder, and use the value’s index combined with the hour to conditionally display the date:\n\n.chartXAxis {\n    AxisMarks(values: .stride(by: .hour, count: 3)) { value in\n        if let date = value.as(Date.self) {\n            let hour = Calendar.current.component(.hour, from: date)\n            AxisValueLabel {\n                VStack(alignment: .leading) {\n                    switch hour {\n                    case 0, 12:\n                        Text(date, format: .dateTime.hour())\n                    default:\n                        Text(date, format: .dateTime.hour(.defaultDigits(amPM: .omitted)))\n                    }\n                    if value.index == 0 || hour == 0 {\n                        Text(date, format: .dateTime.month().day())\n                    }\n                }\n            }\n\n\n            if hour == 0 {\n                AxisGridLine(stroke: StrokeStyle(lineWidth: 0.5))\n                AxisTick(stroke: StrokeStyle(lineWidth: 0.5))\n            } else {\n                AxisGridLine()\n                AxisTick()\n            }\n        }\n    }\n}\n\n\nNote\n\nFor the condition (hour==0) to work, ensure that your data starts at an hour that’s divisible by the stride. For the above example with a stride of three, the data can start at 3, 6, or 9, or 12, either AM or PM.\n\nThe above code also helps to clarify the date boundaries by using a solid grid line and tick at midnight, including at both the beginning and end of the chart:\n\nCompare this chart with the one at the beginning of this article that uses the default axis configuration.\n\nSee Also\nAxes\nprotocol AxisContent\nA type that represents the elements that you use to build a chart’s axes.\nstruct AxisMarks\nA group of visual marks that a chart draws to indicate the composition of a chart’s axes.\nstruct AnyAxisContent\nA type-erased element of a chart’s axis.\nstruct AxisContentBuilder\nA result builder that constructs axis content."
  },
  {
    "title": "ScaleType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/scaletype",
    "html": "Overview\n\nUse this type with the type: parameter of .chartXScale view modifiers to customize scale types.\n\nTopics\nType Properties\nstatic var category: ScaleType\nA scale that has discrete domain values as inputs.\nstatic var date: ScaleType\nA date scale where each range value y can be expressed as a function of the domain value x’s timestamp, with y = a * x.timeIntervalSinceReferenceDate + b.\nstatic var linear: ScaleType\nA number scale where each range value y can be expressed as a linear function of the domain value x, with y = a * x + b.\nstatic var log: ScaleType\nA number scale where each range value y can be expressed as a logarithmic function of the domain value x, with y = a * log(x) + b.\nstatic var squareRoot: ScaleType\nA number scale where each range value y can be expressed as a square root function of the domain value x, with y = a * sqrt(x) + b. This is equivalent to a power scale with exponent 0.5.\nstatic var symmetricLog: ScaleType\nA number scale where each range value y can be expressed as a symmetric log function of the domain value x, with y = a * sign(x) * log(1 + |x * slopeAtZero|) + b. The constant slopeAtZero defaults to 1. You can configure it with symmetricLog(slopeAtZero:).\nType Methods\nstatic func power(exponent: Double) -> ScaleType\nA number scale where each range value y can be expressed as a power function of the domain value x, with y = a * pow(x, exponent) + b.\nstatic func symmetricLog(slopeAtZero: Double) -> ScaleType\nA number scale where each range value y can be expressed as a symmetric log function of the domain value x, with y = a * sign(x) * log(1 + |x * slopeAtZero|) + b.\nSee Also\nScales\nprotocol ScaleRange\nA type that you can use to configure the range of a chart.\nprotocol PositionScaleRange\nA type that configures the x-axis and y-axis values.\nstruct PlotDimensionScaleRange\nA range that represents the plot area’s width or height.\nprotocol ScaleDomain\nA type that you can use to configure the domain of a chart.\nstruct AutomaticScaleDomain\nA domain that the chart infers from its data."
  },
  {
    "title": "AutomaticScaleDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/automaticscaledomain",
    "html": "Overview\n\nUse automatic to get an instance of this type.\n\nRelationships\nConforms To\nScaleDomain\nSee Also\nScales\nprotocol ScaleRange\nA type that you can use to configure the range of a chart.\nprotocol PositionScaleRange\nA type that configures the x-axis and y-axis values.\nstruct PlotDimensionScaleRange\nA range that represents the plot area’s width or height.\nprotocol ScaleDomain\nA type that you can use to configure the domain of a chart.\nstruct ScaleType\nThe ways you can scale the domain or range of a plot."
  },
  {
    "title": "PositionScaleRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/positionscalerange",
    "html": "Topics\nType Properties\nstatic var plotDimension: PlotDimensionScaleRange\nA scale range that fills the plot area.\nAvailable when Self is PlotDimensionScaleRange.\nType Methods\nstatic func plotDimension(padding: CGFloat) -> PlotDimensionScaleRange\nA scale range that fills the plot area with the given padding value at start and end.\nAvailable when Self is PlotDimensionScaleRange.\nstatic func plotDimension(startPadding: CGFloat, endPadding: CGFloat) -> PlotDimensionScaleRange\nA scale range that fills the plot area with the given padding values at start and end, respectively.\nAvailable when Self is PlotDimensionScaleRange.\nRelationships\nInherits From\nScaleRange\nConforming Types\nPlotDimensionScaleRange\nSee Also\nScales\nprotocol ScaleRange\nA type that you can use to configure the range of a chart.\nstruct PlotDimensionScaleRange\nA range that represents the plot area’s width or height.\nprotocol ScaleDomain\nA type that you can use to configure the domain of a chart.\nstruct AutomaticScaleDomain\nA domain that the chart infers from its data.\nstruct ScaleType\nThe ways you can scale the domain or range of a plot."
  },
  {
    "title": "PlottableValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottablevalue",
    "html": "Overview\n\nProvide a PlottableValue to a Mark property (e.g., x, y, foregroundStyle) to plot data values with the mark property.\n\nImportant\n\nThe data type must conform to Plottable. This is Double for quantitative data values, Date for temporal data values, or String for categorical data values.\n\nYou can use the .value(\"Category\", \\.category) shorthand to create a PlottableValue. The example below plots category, value, and group with the bar mark’s x, y, and foregroundStyle.\n\nstruct Bar {\n    let category: String\n    let value: Double\n    let group: String\n}\n\n\nlet data: [Bar] = [\n    Bar(category: \"A\", value: 20, group: \"Group 1\"),\n    Bar(category: \"A\", value: 30, group: \"Group 2\"),\n    Bar(category: \"A\", value: 10, group: \"Group 3\"),\n    Bar(category: \"B\", value: 40, group: \"Group 1\"),\n    Bar(category: \"B\", value: 20, group: \"Group 2\"),\n    Bar(category: \"B\", value: 10, group: \"Group 3\"),\n    //...\n]\n\n\nvar body: some View {\n    Chart(data) {\n        BarMark(\n            x: .value(\"Category\", $0.category),\n            y: .value(\"Quantity\", $0.value)\n        )\n        .foregroundStyle(.value(\"Group\", $0.group))\n    }\n}\n\nTopics\nType Methods\nstatic func value<S>(S, Value) -> PlottableValue<Value>\nCreates a parameter value with label and value.\nstatic func value(LocalizedStringKey, Range<Value>) -> PlottableValue<Value>\nCreates a parameter value with label key and value.\nAvailable when Value conforms to Plottable.\nstatic func value(Text, Range<Value>) -> PlottableValue<Value>\nCreates a parameter value with label and value.\nAvailable when Value conforms to Plottable.\nstatic func value<S>(S, ChartBinRange<Value>) -> PlottableValue<Value>\nCreates a parameter value with label and value.\nAvailable when Value conforms to Plottable.\nstatic func value(LocalizedStringKey, Value) -> PlottableValue<Value>\nCreates a parameter value with label key and value.\nstatic func value(Text, Value) -> PlottableValue<Value>\nCreates a parameter value with label and value.\nstatic func value(LocalizedStringKey, ChartBinRange<Value>) -> PlottableValue<Value>\nCreates a parameter value with label key and value.\nAvailable when Value conforms to Plottable.\nstatic func value(Text, ChartBinRange<Value>) -> PlottableValue<Value>\nCreates a parameter value with label and value.\nAvailable when Value conforms to Plottable.\nstatic func value<S>(S, Range<Value>) -> PlottableValue<Value>\nCreates a parameter value with label and value.\nAvailable when Value conforms to Plottable.\nstatic func value<S>(S, Date, unit: Calendar.Component, calendar: Calendar?) -> PlottableValue<Value>\nCreates a parameter value with label and value.\nAvailable when Value conforms to Plottable.\nstatic func value(LocalizedStringKey, Date, unit: Calendar.Component, calendar: Calendar?) -> PlottableValue<Value>\nCreates a parameter value with label key and value.\nAvailable when Value conforms to Plottable.\nstatic func value(Text, Date, unit: Calendar.Component, calendar: Calendar?) -> PlottableValue<Value>\nCreates a parameter value with label and value.\nAvailable when Value conforms to Plottable.\nSee Also\nLabeled data\nprotocol Plottable\nA type that can serve as data for the labeled, plottable values that you draw on a chart."
  },
  {
    "title": "PlotDimensionScaleRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plotdimensionscalerange",
    "html": "Relationships\nConforms To\nPositionScaleRange\nScaleRange\nSee Also\nScales\nprotocol ScaleRange\nA type that you can use to configure the range of a chart.\nprotocol PositionScaleRange\nA type that configures the x-axis and y-axis values.\nprotocol ScaleDomain\nA type that you can use to configure the domain of a chart.\nstruct AutomaticScaleDomain\nA domain that the chart infers from its data.\nstruct ScaleType\nThe ways you can scale the domain or range of a plot."
  },
  {
    "title": "Plottable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/plottable",
    "html": "Overview\n\nYou can plot Plottable data values with marks with .value(label, keyPath):\n\nBarMark(\n  x: .value(\"Category\", \"A\")\n  y: .value(\"Value\", 100)\n)\n.foregroundStyle(by: .value(\"Series\", \"Series 1\"))\n\n\nYou can create a custom plottable type by conforming it to this protocol. For example:\n\n// Make `SomeValue` conform to `Plottable` and behave like a categorical value in Swift Charts.\nstruct SomeValue: Plottable {\n    var primitivePlottable: String { ... }\n    init?(primitivePlottable: String) { ... }\n}\n\n\nIn addition, you can make an enum work as a categorical data value by using String as its raw value and conforming the type to Plottable. The string values will be used as localized string keys when the categories are displayed as text in a chart (e.g., in an axis).\n\nenum Status: String, Plottable {\n    case active = \"Active\"\n    case inactive = \"Inactive\"\n}\n\nTopics\nAssociated Types\nassociatedtype PrimitivePlottable : PrimitivePlottableProtocol\nPrimitive plottable type, use a primitive type that already conforms to Plottable (e.g., Double, Date, or String).\n\nRequired\n\nInitializers\ninit?(primitivePlottable: Self.PrimitivePlottable)\nCreates a value with a primitive value. If the conversion is not possible, returns nil.\n\nRequired Default implementations provided.\n\nInstance Properties\nvar primitivePlottable: Self.PrimitivePlottable\nConverts the type to its primitive value.\n\nRequired Default implementations provided.\n\nRelationships\nInherited By\nPrimitivePlottableProtocol\nSee Also\nLabeled data\nstruct PlottableValue\nLabeled data that you draw on a chart using marks."
  },
  {
    "title": "InterpolationMethod | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/interpolationmethod",
    "html": "Topics\nType Properties\nstatic var cardinal: InterpolationMethod\nInterpolate data points with cardinal spline.\nstatic var catmullRom: InterpolationMethod\nInterpolate data points with Catmull-Rom spline.\nstatic var linear: InterpolationMethod\nInterpolate data points linearly.\nstatic var monotone: InterpolationMethod\nInterpolate data points with a cubic spline that preserves monotonicity of the data.\nstatic var stepCenter: InterpolationMethod\nInterpolate data points with a step, or piece-wise constant function, where the data point is at the center of the step.\nstatic var stepEnd: InterpolationMethod\nInterpolate data points with a step, or piece-wise constant function, where the data point is at the end of the step.\nstatic var stepStart: InterpolationMethod\nInterpolate data points with a step, or piece-wise constant function, where the data point is at the start of the step.\nType Methods\nstatic func cardinal(tension: CGFloat) -> InterpolationMethod\nInterpolate data points with cardinal spline, using the given tension parameter.\nstatic func catmullRom(alpha: CGFloat) -> InterpolationMethod\nInterpolate data points with Catmull-Rom spline, using the given alpha parameter.\nRelationships\nConforms To\nCustomStringConvertible\nSendable\nSee Also\nMark configuration\nstruct MarkStackingMethod\nThe ways in which you can stack marks in a chart.\nstruct MarkDimension\nAn individual dimension representing a mark’s width or height.\nprotocol ChartSymbolShape\nA type that can act as a shape for the marks that you add to a chart.\nstruct AnyChartSymbolShape\nA type-erased plotting shape."
  },
  {
    "title": "MarkDimension | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markdimension",
    "html": "Topics\nInitializers\ninit(floatLiteral: Double)\nCreates a constant width or height from a floating point value.\ninit(integerLiteral: Int)\nCreates a constant width or height from an integer.\nType Properties\nstatic var automatic: MarkDimension\nA dimension that determines its value automatically.\nType Methods\nstatic func fixed(CGFloat) -> MarkDimension\nA contant dimension.\nstatic func inset(CGFloat) -> MarkDimension\nA dimension that’s the step size minus the specified inset value on each side.\nstatic func ratio(CGFloat) -> MarkDimension\nA dimension that’s proportional to the scale step size, using the specified ratio.\nRelationships\nConforms To\nCustomStringConvertible\nExpressibleByFloatLiteral\nExpressibleByIntegerLiteral\nSendable\nSee Also\nMark configuration\nstruct MarkStackingMethod\nThe ways in which you can stack marks in a chart.\nstruct InterpolationMethod\nThe ways in which line or area marks interpolate their data.\nprotocol ChartSymbolShape\nA type that can act as a shape for the marks that you add to a chart.\nstruct AnyChartSymbolShape\nA type-erased plotting shape."
  },
  {
    "title": "RectangleMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rectanglemark",
    "html": "Overview\n\nUse rectangle mark to map data fields to rectangles. You can use the rectangle mark to create heat map charts or to annotate rectangular areas in a chart.\n\nCreate a Heat Map with Rectangle Marks\n\nWhen presenting data about the effectiveness of a machine learning model, you typically organize the data using a confusion matrix which shows the predicted versus the actual results of the model. To create a 2D heat map that represents a machine learning model you use init(x:y:width:height:). The example below uses a 2D heat map to visualize a basic confusion matrix with the following layout:\n\n\t\n\nNegative\n\n\t\n\nPositive\n\n\n\n\nNegative\n\n\t\n\nTrue Negative\n\n\t\n\nFalse Negative\n\n\n\n\nPositive\n\n\t\n\nFalse Positive\n\n\t\n\nTrue Positive\n\nThe number of records in each cell, num, is represented by the color of its corresponding rectangle. This is done by applying the foregroundStyle(by:) modifier to the rectangle mark and passing it a PlottableValue constructed with value(_:_:) which takes a label and the value to plot, in this case num. A scale from values of num to color will be automatically generated and used to color the rectangles based on the value.\n\nstruct MatrixEntry {\n    var positive: String\n    var negative: String\n    var num: Double\n}\n\n\nvar data: [MatrixEntry] = [\n    MatrixEntry(positive: \"+\", negative: \"+\", num: 125),\n    MatrixEntry(positive: \"+\", negative: \"-\", num: 10),\n    MatrixEntry(positive: \"-\", negative: \"-\", num: 80),\n    MatrixEntry(positive: \"-\", negative: \"+\", num: 1)\n]\n\n\nvar body: some View {\n    Chart(data) {\n        RectangleMark(\n            x: .value(\"Positive\", $0.positive),\n            y: .value(\"Negative\", $0.negative)\n        )\n        .foregroundStyle(by: .value(\"Number\", $0.num))\n    }\n}\n\n\nAnnotate a Rectangular Area with Rectangle Marks\n\nYou can annotate a specific region in a chart with a rectangle mark by providing the coordinates of one or more rectangles. For example you can annotate point marks with rectangle marks using a shared data source like in the example below:\n\nstruct Coord {\n    var x: Double\n    var y: Double\n}\n\n\nvar data: [Coord] = [\n    Coord(x: 5, y: 5),\n    Coord(x: 2.5, y: 2.5),\n    Coord(x: 3, y: 3)\n]\n\n\nvar body: some View {\n    Chart(data) {\n        RectangleMark(\n            xStart: .value(\"Rect Start Width\", $0.x - 0.25),\n            xEnd: .value(\"Rect End Width\", $0.x + 0.25),\n            yStart: .value(\"Rect Start Height\", $0.y - 0.25),\n            yEnd: .value(\"Rect End Height\", $0.y + 0.25)\n        )\n        .opacity(0.2)\n\n\n        PointMark(\n            x: .value(\"X\", $0.x),\n            y: .value(\"Y\", $0.y)\n        )\n    }\n}\n\n\nTopics\nCreating a Rectangle Mark\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)\nCreates a rectangle mark with an y interval encoding and an x encoding.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)\nCreates a rectangle mark with an x interval encoding and a y encoding.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates a rectangle mark with x and y interval encodings.\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension)\nCreates a rectangle that plots values with x and y.\nInitializers\ninit<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimension)\nCreates a rectangle mark that plots values on x and has a fixed y interval.\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>, height: MarkDimension)\nCreates a rectangle mark with a fixed x interval and y encoding.\ninit(xStart: CGFloat?, xEnd: CGFloat?, yStart: CGFloat?, yEnd: CGFloat?)\nCreates a rectangle mark with fixed x and y intervals.\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates a rectangle mark with a y interval encoding and a fixed x interval.\ninit<X>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?)\nCreates a rectangle mark with an x interval encoding and a fixed y interval.\nRelationships\nConforms To\nChartContent\nSee Also\nMarks\nstruct AreaMark\nChart content that represents data using the area of one or more regions.\nstruct LineMark\nChart content that represents data using a sequence of connected line segments.\nstruct PointMark\nChart content that represents data using points.\nstruct RuleMark\nChart content that represents data using a single horizontal or vertical rule.\nstruct BarMark\nChart content that represents data using bars."
  },
  {
    "title": "MarkStackingMethod | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/markstackingmethod",
    "html": "Topics\nType Properties\nstatic var center: MarkStackingMethod\nStack marks using a center offset.\nstatic var normalized: MarkStackingMethod\nCreate normalized stacked bar and area charts.\nstatic var standard: MarkStackingMethod\nStack marks starting at zero.\nstatic var unstacked: MarkStackingMethod\nDon’t stack marks.\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nSendable\nSee Also\nMark configuration\nstruct MarkDimension\nAn individual dimension representing a mark’s width or height.\nstruct InterpolationMethod\nThe ways in which line or area marks interpolate their data.\nprotocol ChartSymbolShape\nA type that can act as a shape for the marks that you add to a chart.\nstruct AnyChartSymbolShape\nA type-erased plotting shape."
  },
  {
    "title": "RuleMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/rulemark",
    "html": "Overview\n\nYou can use RuleMark to plot a horizontal or vertical rule in your chart.\n\nShow Range with Rule Marks\n\nTo create a horizontal line at a y position from xStart to xEnd you use the init(xStart:xEnd:y:) or init(xStart:xEnd:y:). To create a vertical line at an x position from yStart to yEnd you use init(x:yStart:yEnd:) or init(x:yStart:yEnd:). The example below uses the Pollen structure and the init(xStart:xEnd:y:) to map horizontal lines that span from the value of the startDate to the value of the endDate for x positions to a pollen source property’s y position:\n\nstruct Pollen {\n    var source: String\n    var startDate: Date\n    var endDate: Date\n\n\n    init(startMonth: Int, numMonths: Int, source: String) {\n        self.source = source\n        let calendar = Calendar.autoupdatingCurrent\n        self.startDate = calendar.date(from: DateComponents(year: 2020, month: startMonth, day: 1))!\n        self.endDate = calendar.date(byAdding: .month, value: numMonths, to: startDate)!\n    }\n}\n\n\nvar data: [Pollen] = [\n    Pollen(startMonth: 1, numMonths: 9, source: \"Trees\"),\n    Pollen(startMonth: 12, numMonths: 1, source: \"Trees\"),\n    Pollen(startMonth: 3, numMonths: 8, source: \"Grass\"),\n    Pollen(startMonth: 4, numMonths: 8, source: \"Weeds\")\n]\n\n\nvar body: some View {\n    Chart(data) {\n        RuleMark(\n            xStart: .value(\"Start Date\", $0.startDate),\n            xEnd: .value(\"End Date\", $0.endDate),\n            y: .value(\"Pollen Source\", $0.source)\n        )\n    }\n}\n\n\nAnnotate a chart with rule mark\n\nYou can annotate a chart with horizontal or vertically spanning rules. This allows viewers to easily compare values over a range to a constant value. Use theinit(xStart:xEnd:y:) initializer to represent a constant y value or init(x:yStart:yEnd:) for a constant x value. To span the plotting area of a chart with a line, omit the optional start and end parameters and plot a constant value. The example below results in a line that spans the chart horizontally at the y position of 9000:\n\nstruct DepartmentProfit {\n    var department: String\n    var profit: Double\n}\n\n\nvar data: [DepartmentProfit] = [\n    DepartmentProfit(department: \"Production\", profit: 15000),\n    DepartmentProfit(department: \"Marketing\", profit: 8000),\n    DepartmentProfit(department: \"Finance\", profit: 10000)\n]\n\n\nvar body: some View {\n    Chart\n        ForEach(data) {\n            BarMark(\n                x: .value(\"Department\", $0.department),\n                y: .value(\"Profit\", $0.profit)\n            )\n        }\n        RuleMark(y: .value(\"Break Even Threshold\", 9000))\n            .foregroundStyle(.red)\n    }\n}\n\n\nTopics\nInitializers\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates a vertical rule mark with an x encoding and y interval encoding.\ninit<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?)\nCreates a vertical rule mark with value plotted with x.\ninit<Y>(x: CGFloat?, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates a vertical rule mark with a fixed x position and y interval encoding.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>)\nCreates a horizontal rule mark that plots values on its x interval and on y.\ninit<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>)\nCreates a horizontal rule mark that plots a value on y.\ninit<X>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: CGFloat?)\nCreates a horizontal rule mark that plots values on its x interval.\nRelationships\nConforms To\nChartContent\nSee Also\nMarks\nstruct AreaMark\nChart content that represents data using the area of one or more regions.\nstruct LineMark\nChart content that represents data using a sequence of connected line segments.\nstruct PointMark\nChart content that represents data using points.\nstruct RectangleMark\nChart content that represents data using rectangles.\nstruct BarMark\nChart content that represents data using bars."
  },
  {
    "title": "AreaMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/areamark",
    "html": "Overview\n\nUse AreaMark to represent data as filled regions on a chart. To create a simple area mark chart, plot a date or an ordered string property on the x-axis, and a number on the y-axis. For example, suppose you have data that represents the cost of a cheeseburger over time, stored in an array of Food structures:\n\nlet cheeseburgerCost: [Food] = [\n    .init(name: \"Cheeseburger\", price: 0.15, year: 1960),\n    .init(name: \"Cheeseburger\", price: 0.20, year: 1970),\n    // ...\n    .init(name: \"Cheeseburger\", price: 1.10, year: 2020)\n]\n\n\nstruct Food: Identifiable {\n    let name: String\n    let price: Double\n    let date: Date\n    let id = UUID()\n\n\n    init(name: String, price: Double, year: Int) {\n        self.name = name\n        self.price = price\n        let calendar = Calendar.autoupdatingCurrent\n        self.date = calendar.date(from: DateComponents(year: year))!\n    }\n}\n\n\nYou can create labeled data in the form of PlottableValue instances for each of the x and y inputs to an area mark:\n\nChart(cheeseburgerCost) { cost in\n    AreaMark(\n        x: .value(\"Date\", cost.date),\n        y: .value(\"Price\", cost.price)\n    )\n}\n\n\nThe resulting chart automatically scales and labels the axes based on the data, and fills the area under the data points with a default color:\n\nIf you want only the line without filling in the area below the line, use LineMark instead.\n\nAdd detail with a stacked area chart\n\nTo represent an additional dimension of information, you can create a stacked area chart. For example, suppose you have another data set that represents the same cost data from the previous example, but which is broken into the component costs for the burger, bun, and cheese:\n\nlet cheeseburgerCostByItem: [Food] = [\n    .init(name: \"Burger\", price: 0.07, year: 1960),\n    .init(name: \"Cheese\", price: 0.03, year: 1960),\n    .init(name: \"Bun\", price: 0.05, year: 1960),\n    .init(name: \"Burger\", price: 0.10, year: 1970),\n    .init(name: \"Cheese\", price: 0.04, year: 1970),\n    .init(name: \"Bun\", price: 0.06, year: 1970),\n    // ...\n    .init(name: \"Burger\", price: 0.60, year: 2020),\n    .init(name: \"Cheese\", price: 0.26, year: 2020),\n    .init(name: \"Bun\", price: 0.24, year: 2020)\n]\n\n\nYou can again create an area mark with the data, but in this case add the foregroundStyle(by:) modifier to create a stacked area chart that divides the information into distinct regions based on the data’s name property:\n\nChart(cheeseburgerCostByItem) { cost in\n    AreaMark(\n        x: .value(\"Date\", cost.date),\n        y: .value(\"Price\", cost.price)\n    )\n    .foregroundStyle(by: .value(\"Food Item\", cost.name))\n}\n\n\nThe chart automatically assigns a different color to each region, and adds a legend that indicates what each color represents based on the names that you provide to the modifier:\n\nStack the data in different ways\n\nYou can highlight different aspects of the data by stacking it in different ways. For example, the previous chart shows the absolute contributions of each ingredient to the cheeseburger’s total cost. To see the relative contributions instead, you can create a normalized chart by setting the area mark’s stacking parameter to normalized:\n\nChart(cheeseburgerCostByItem) { cost in\n    AreaMark(\n        x: .value(\"Date\", cost.date),\n        y: .value(\"Price\", cost.price),\n        stacking: .normalized\n    )\n    .foregroundStyle(by: .value(\"Food Item\", cost.name))\n}\n\n\nAlternatively, you can use center stacking to create a streamgraph, which shifts the area chart’s baseline to the center of the chart’s plotting area:\n\nChart(cheeseburgerCostByItem) { cost in\n    AreaMark(\n        x: .value(\"Date\", cost.date),\n        y: .value(\"Price\", cost.price),\n        stacking: .center\n    )\n    .foregroundStyle(by: .value(\"Food Item\", cost.name))\n}\n\n\nCreate a range area chart\n\nYou can also use area marks to create a range area chart, where you provide an interval to fill in for each data point. To do this, you provide either a date or ordered string category for the x-axis and a range of values for the y-axis, or vice versa. For example, suppose you record the minimum and maximum temperatures every day in a Weather structure:\n\nstruct Weather: Identifiable {\n    let date: Date\n    let maximumTemperature: Double\n    let minimumTemperature: Double\n    let id: Int\n}\n\n\nIf you load a collection of these structures into a data array, you can use the date on the x-axis, and each day’s minimum and maximum temperature as the start and end points for the y-axis:\n\nChart(data) { day in\n    AreaMark(\n        x: .value(\"Date\", day.date),\n        yStart: .value(\"Minimum Temperature\", day.minimumTemperature),\n        yEnd: .value(\"Maximum Temperature\", day.maximumTemperature)\n    )\n}\n\n\nThis creates a filled region that’s shaped by the start and end points on each date:\n\nTopics\nCreating an area mark\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, stacking: MarkStackingMethod)\nCreates an area mark using the specified horizontal and vertical positions.\ninit<X, Y, S>(x: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>, stacking: MarkStackingMethod)\nCreates an area mark and associates it with the specified series.\nCreating a range area chart\ninit<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)\nCreates an area mark that plots values with a vertical interval.\ninit<X, Y, S>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, series: PlottableValue<S>)\nCreates an area mark that plots values with a vertical interval and associates it with the specified series.\ninit<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>)\nCreates an area mark that plots values with a horizontal interval.\ninit<X, Y, S>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>)\nCreates an area mark that plots values with a horizontal interval and associates it with the specified series.\nRelationships\nConforms To\nChartContent\nSee Also\nMarks\nstruct LineMark\nChart content that represents data using a sequence of connected line segments.\nstruct PointMark\nChart content that represents data using points.\nstruct RectangleMark\nChart content that represents data using rectangles.\nstruct RuleMark\nChart content that represents data using a single horizontal or vertical rule.\nstruct BarMark\nChart content that represents data using bars."
  },
  {
    "title": "LineMark | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/linemark",
    "html": "Overview\n\nYou create a line chart by plotting a category or date property, typically with the x position, and plotting a number category, typically with the y position. The example below plots the date property to the x position and the hoursOfSunshine property to the y position using init(x:y:):\n\nstruct MonthlyHoursOfSunshine {\n    var date: Date\n    var hoursOfSunshine: Double\n\n\n    init(month: Int, hoursOfSunshine: Double) {\n        let calendar = Calendar.autoupdatingCurrent\n        self.date = calendar.date(from: DateComponents(year: 2020, month: month))!\n        self.hoursOfSunshine = hoursOfSunshine\n    }\n}\n\n\nvar data: [MonthlyHoursOfSunshine] = [\n    MonthlyHoursOfSunshine(month: 1, hoursOfSunshine: 74),\n    MonthlyHoursOfSunshine(month: 2, hoursOfSunshine: 99),\n    // ...\n    MonthlyHoursOfSunshine(month: 12, hoursOfSunshine: 62)\n]\n\n\nvar body: some View {\n    Chart(data) {\n        LineMark(\n            x: .value(\"Month\", $0.date),\n            y: .value(\"Hours of Sunshine\", $0.hoursOfSunshine)\n        )\n    }\n}\n\n\nPlotting multiple lines\n\nYou can plot multiple lines in a chart either by explicitly specifying the series parameter in init(x:y:series:) or by applying the foregroundStyle(_:) or lineStyle(_:) modifiers. Line marks with the same series value will always be rendered together as a single line. When series is unspecified line marks with the same value plotted to foreground style and line style will be grouped together and plotted on their own line. The example below plots one line per distinct value in city and colors each line based on the city it represents:\n\nstruct MonthlyHoursOfSunshine {\n    var city: String\n    var date: Date\n    var hoursOfSunshine: Double\n\n\n    init(city: String, month: Int, hoursOfSunshine: Double) {\n        let calendar = Calendar.autoupdatingCurrent\n        self.city = city\n        self.date = calendar.date(from: DateComponents(year: 2020, month: month))!\n        self.hoursOfSunshine = hoursOfSunshine\n    }\n}\n\n\nvar data: [MonthlyHoursOfSunshine] = [\n    MonthlyHoursOfSunshine(city: \"Seattle\", month: 1, hoursOfSunshine: 74),\n    MonthlyHoursOfSunshine(city: \"Cupertino\", month: 1, hoursOfSunshine: 196),\n    // ...\n    MonthlyHoursOfSunshine(city: \"Seattle\", month: 12, hoursOfSunshine: 62),\n    MonthlyHoursOfSunshine(city: \"Cupertino\", month: 12, hoursOfSunshine: 199)\n]\n\n\nvar body: some View {\n    Chart(data) {\n        LineMark(\n            x: .value(\"Month\", $0.date),\n            y: .value(\"Hours of Sunshine\", $0.hoursOfSunshine)\n        )\n        .foregroundStyle(by: .value(\"City\", $0.city))\n    }\n}\n\n\nNote\n\nColors are repeated if the number of series is greater than the total number of colors.\n\nTopics\nCreating a Line Mark\ninit<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>)\nCreates a line mark.\ninit<X, Y, S>(x: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>)\nCreates a separate line for each unique value of series.\nRelationships\nConforms To\nChartContent\nSee Also\nMarks\nstruct AreaMark\nChart content that represents data using the area of one or more regions.\nstruct PointMark\nChart content that represents data using points.\nstruct RectangleMark\nChart content that represents data using rectangles.\nstruct RuleMark\nChart content that represents data using a single horizontal or vertical rule.\nstruct BarMark\nChart content that represents data using bars."
  },
  {
    "title": "Chart | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chart",
    "html": "Overview\n\nTo create a chart, instantiate a Chart structure with marks that display the properties of your data. For example, suppose you have an array of ValuePerCategory structures that define data points composed of a category and a value:\n\nstruct ValuePerCategory {\n    var category: String\n    var value: Double\n}\n\n\nlet data: [ValuePerCategory] = [\n    .init(category: \"A\", value: 5),\n    .init(category: \"B\", value: 9),\n    .init(category: \"C\", value: 7)\n]\n\n\nYou can use BarMark inside a chart to represent the category property as different bars in the chart and the value property as the y value for each bar:\n\nChart(data, id: \\.category) { item in\n    BarMark(\n        x: .value(\"Category\", item.category),\n        y: .value(\"Value\", item.value)\n    )\n}\n\n\nThis chart initializer behaves a lot like a SwiftUI ForEach, creating a mark — in this case, a bar — for each of the values in the data array:\n\nControlling data series inside a chart\n\nYou can compose more sophisticated charts by providing more than one series of marks to the chart. For example, suppose you have profit data for two companies:\n\nstruct ProfitOverTime {\n    var date: Date\n    var profit: Double\n}\n\n\nlet departmentAProfit: [ProfitOverTime] = <#Profit array A#>\nlet departmentBProfit: [ProfitOverTime] = <#Profit array B#>\n\n\nThe following chart creates two different series of LineMark instances with different colors to represent the data for each company. In effect, it moves the ForEach construct from the chart’s initializer into the body of the chart, enabling you to represent multiple different series:\n\nChart {\n    ForEach(departmentAProfit, id: \\.date) { item in\n        LineMark(\n            x: .value(\"Date\", item.date),\n            y: .value(\"Profit A\", item.profit),\n            series: .value(\"Company\", \"A\")\n        )\n        .foregroundStyle(.blue)\n    }\n    ForEach(departmentBProfit, id: \\.date) { item in\n        LineMark(\n            x: .value(\"Date\", item.date),\n            y: .value(\"Profit B\", item.profit),\n            series: .value(\"Company\", \"B\")\n        )\n        .foregroundStyle(.green)\n    }\n    RuleMark(\n        y: .value(\"Threshold\", 400)\n    )\n    .foregroundStyle(.red)\n}\n\n\nYou indicate which series a line mark belongs to by specifying its series input parameter. The above chart also uses a RuleMark to produce a horizontal line segment that displays a constant threshold value across the width of the chart:\n\nTopics\nCreating a Chart\ninit(content: () -> Content)\nCreates a chart composed of any number of data series and individual marks.\ninit<Data, C>(Data, content: (Data.Element) -> C)\nCreates a chart composed of a series of identifiable marks.\ninit<Data, ID, C>(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> C)\nCreates a chart composed of a series of marks.\nRelationships\nConforms To\nView\nSee Also\nCharts\nCreating a chart using Swift Charts\nMake a chart by combining chart building blocks in SwiftUI.\nprotocol ChartContent\nA type that represents the content that you draw on a chart.\nstruct ChartContentBuilder\nA result builder that you use to compose the contents of a chart.\nstruct Plot\nA mechanism for grouping chart contents into a single entity."
  },
  {
    "title": "ChartContentBuilder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontentbuilder",
    "html": "Overview\n\nThis Result Builder combines any number of ChartContent instances into a single composite instance, including support for conditionals.\n\nYou don’t call the methods of the result builder directly. Instead, Swift uses them to combine the elements that you declare in any closure that has the @ChartContentBuilder attribute. In particular, you rely on this behavior when you declare the content inside a Chart initializer like init(content:).\n\nTopics\nBuilding chart content\nstatic func buildPartialBlock<T>(first: T) -> T\nBuilds a partial result from a single, first component.\nstatic func buildPartialBlock(accumulated: some ChartContent, next: some ChartContent) -> some ChartContent\nBuilds a partial result by combining an accumulated component and a new component.\nstatic func buildBlock() -> some ChartContent\nProduces empty chart content.\nBuilding conditionally\nstatic func buildIf<T>(T?) -> T?\nBuilds a partial result that’s conditionally present.\nstatic func buildEither<T1, T2>(first: T1) -> BuilderConditional<T1, T2>\nBuilds a partial result from a condition that’s true.\nstatic func buildEither<T1, T2>(second: T2) -> BuilderConditional<T1, T2>\nBuilds a partial result from a condition that’s false.\nBuilding with conditional availability\nstatic func buildLimitedAvailability<Content>(Content) -> some ChartContent\nBuilds a partial result that propagates or erases type information outside a compiler-controlled availability check.\nSupporting types\nstruct BuilderConditional\nA conditional result from a result builder.\nType Methods\nstatic func buildExpression<Content>(Content) -> Content\nSee Also\nCharts\nCreating a chart using Swift Charts\nMake a chart by combining chart building blocks in SwiftUI.\nstruct Chart\nA SwiftUI view that displays a chart.\nprotocol ChartContent\nA type that represents the content that you draw on a chart.\nstruct Plot\nA mechanism for grouping chart contents into a single entity."
  },
  {
    "title": "ChartContent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/chartcontent",
    "html": "Overview\n\nYou build a Chart by adding instances that conform to the ChartContent protocol to the chart’s content closure. The following example adds three explicit BarMark instances to a chart:\n\nChart {\n    BarMark(\n        x: .value(\"Shape Type\", \"Cube\"),\n        y: .value(\"Total Count\", 5)\n    )\n    BarMark(\n        x: .value(\"Shape Type\", \"Sphere\"),\n        y: .value(\"Total Count\", 6)\n    )\n    BarMark(\n        x: .value(\"Shape Type\", \"Pyramid\"),\n        y: .value(\"Total Count\", 4)\n    )\n}\n\n\nThe chart draws marks that correspond to the instances that you specify:\n\nYou can combine any number of marks or types of marks in a single chart by listing them individually as shown in the above example, wrapping them in a ForEach, or any combination of these. For some mark types, like LineMark, you can group the marks into series using the mark’s series initialization parameter.\n\nConfigure chart content\n\nThe ChartContent protocol provides a set of modifiers that you use to configure the properties of chart content. These behave like SwiftUI view modifiers, except that they act on chart content rather than views. Any of the types that conform to the protocol can use these modifiers. For example, you can add the foregroundStyle(_:) modifier to the bar representing the number of spheres in the previous example to make it red:\n\nBarMark(\n    x: .value(\"Shape Type\", \"Sphere\"),\n    y: .value(\"Total Count\", 6)\n)\n.foregroundStyle(.red)\n\n\nTopics\nStyling marks\nfunc foregroundStyle<S>(S) -> some ChartContent\nSets the foreground style for the chart content.\nfunc opacity(Double) -> some ChartContent\nSets the opacity for the chart content.\nfunc cornerRadius(CGFloat, style: RoundedCornerStyle) -> some ChartContent\nSets the corner radius of the chart content.\nfunc lineStyle(StrokeStyle) -> some ChartContent\nSets the style for line marks.\nfunc interpolationMethod(InterpolationMethod) -> some ChartContent\nPlots line and area marks with the interpolation method that you specify.\nPositioning marks\nfunc offset(CGSize) -> some ChartContent\nApplies an offset that you specify as a size to the chart content.\nfunc offset(x: CGFloat, y: CGFloat) -> some ChartContent\nApplies a vertical and horizontal offset to the chart content.\nfunc offset(x: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, y: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc offset(xStart: CGFloat, xEnd: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent\nApplies an offset to the chart content.\nfunc alignsMarkStylesWithPlotArea(Bool) -> some ChartContent\nAligns this item’s styles with the chart’s plot area.\nSetting symbol appearance\nfunc symbol<S>(S) -> some ChartContent\nSets a plotting symbol type for the chart content.\nfunc symbol<V>(symbol: () -> V) -> some ChartContent\nSets a SwiftUI view to use as the symbol for the chart content.\nfunc symbolSize(CGSize) -> some ChartContent\nSets the plotting symbol size for the chart content.\nfunc symbolSize(CGFloat) -> some ChartContent\nSets the plotting symbol size for the chart content according to a perceived area.\nEncoding data into mark characteristics\nfunc foregroundStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using a foreground style.\nfunc lineStyle<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using line styles.\nfunc position<P>(by: PlottableValue<P>, axis: Axis?, span: MarkDimension) -> some ChartContent\nRepresents data using position.\nfunc symbol<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using different kinds of symbols.\nfunc symbolSize<D>(by: PlottableValue<D>) -> some ChartContent\nRepresents data using symbol sizes.\nAnnotating marks\nfunc annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, content: () -> C) -> some ChartContent\nAnnotates this mark or collection of marks with a view positioned relative to its bounds.\nfunc annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, content: (AnnotationContext) -> C) -> some ChartContent\nAnnotates this mark or collection of marks with a view positioned relative to its bounds.\nMasking and clipping\nfunc mask<C>(content: () -> C) -> some ChartContent\nMasks chart content using the alpha channel of the specified content.\nfunc clipShape(some Shape, style: FillStyle) -> some ChartContent\nSets a clip shape for the chart content.\nConfiguring accessibility\nfunc accessibilityHidden(Bool) -> some ChartContent\nSpecifies whether to hide this chart content from system accessibility features.\nfunc accessibilityIdentifier(String) -> some ChartContent\nAdds an identifier string to the chart content.\nfunc accessibilityLabel(LocalizedStringKey) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel<S>(S) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityLabel(Text) -> some ChartContent\nAdds a label to the chart content that describes its contents.\nfunc accessibilityValue(LocalizedStringKey) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue<S>(S) -> some ChartContent\nAdds a description of the value that the chart content contains.\nfunc accessibilityValue(Text) -> some ChartContent\nAdds a description of the value that the chart content contains.\nImplementing chart content\nvar body: Self.Body\nThe content and behavior of the chart content.\n\nRequired\n\nassociatedtype Body : ChartContent\nThe type of chart content contained in the body of this instance.\n\nRequired\n\nInstance Methods\nfunc annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, overflowResolution: AnnotationOverflowResolution, content: () -> C) -> some ChartContent\nAnnotates this mark or collection of marks with a view positioned relative to its bounds.\nfunc annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, overflowResolution: AnnotationOverflowResolution, content: (AnnotationContext) -> C) -> some ChartContent\nAnnotates this mark or collection of marks with a view positioned relative to its bounds.\nfunc blur(radius: CGFloat) -> some ChartContent\nApplies a Gaussian blur to this chart content.\nfunc compositingLayer() -> some ChartContent\nfunc compositingLayer<V>(style: (PlaceholderContentView<Self>) -> V) -> some ChartContent\nfunc shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some ChartContent\nA chart content that adds a shadow to this chart content.\nfunc zIndex(Double) -> some ChartContent\nControls the display order of overlapping chart content.\nRelationships\nConforming Types\nAnyChartContent\nAreaMark\nBarMark\nBuilderConditional\nConforms when TrueContent conforms to ChartContent and FalseContent conforms to ChartContent.\nLineMark\nPlot\nConforms when Content conforms to ChartContent.\nPointMark\nRectangleMark\nRuleMark\nSectorMark\nSee Also\nCharts\nCreating a chart using Swift Charts\nMake a chart by combining chart building blocks in SwiftUI.\nstruct Chart\nA SwiftUI view that displays a chart.\nstruct ChartContentBuilder\nA result builder that you use to compose the contents of a chart.\nstruct Plot\nA mechanism for grouping chart contents into a single entity.\nAvailable when Content conforms to ChartContent."
  },
  {
    "title": "Creating a chart using Swift Charts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/creating-a-chart-using-swift-charts",
    "html": "Overview\n\nHelp people understand complex data by focusing on what you want to communicate and who you’re communicating to. For example, suppose that you have a collection of colorful toy shapes:\n\nYou can formulate questions about this data that you’d like to answer, like which toy shape appears the most, or how many toys are green? One way to represent your data is to collect it into a table. A table organizes the data into columns and rows so it can be easily inspected. For example, you can record how many shapes of each color you have:\n\n\t\n\nCube\n\n\t\n\nSphere\n\n\t\n\nPyramid\n\n\t\n\nTotal\n\n\n\n\nPink\n\n\t\n\n1\n\n\t\n\n2\n\n\t\n\n0\n\n\t\n\n3\n\n\n\n\nYellow\n\n\t\n\n1\n\n\t\n\n1\n\n\t\n\n2\n\n\t\n\n4\n\n\n\n\nPurple\n\n\t\n\n1\n\n\t\n\n1\n\n\t\n\n1\n\n\t\n\n3\n\n\n\n\nGreen\n\n\t\n\n2\n\n\t\n\n0\n\n\t\n\n1\n\n\t\n\n3\n\n\n\n\nTotal\n\n\t\n\n5\n\n\t\n\n4\n\n\t\n\n4\n\n\t\n\n13\n\nHowever, in many cases, a more effective data representation is a chart. A chart allows you to communicate large amounts of information all at once. The kind of chart that you create and the way you configure the chart depend on what you want to show. To create a chart with Swift Charts, define your data and initialize a Chart view with marks and data properties. Then use modifiers to customize different components of the chart, like the legend, axes, and scale.\n\nDefine the data source\n\nThink about a chart as an answer to your questions. Suppose you want to know which toy shape appears the most. Start by visualizing how many of each shape you have. To display this information with a chart, create a ToyShape structure that represents the information that you want to visualize:\n\nstruct ToyShape: Identifiable {\n    var type: String\n    var count: Double\n    var id = UUID()\n}\n\n\nThen, initialize an array of ToyShape structures to hold the data from the table:\n\nvar data: [ToyShape] = [\n    .init(type: \"Cube\", count: 5),\n    .init(type: \"Sphere\", count: 4),\n    .init(type: \"Pyramid\", count: 4)\n]\n\n\nIn a real app, you might download this data from a network connection, or load it from a file.\n\nInitialize a chart view and create marks\n\nCreate a Chart view that serves as a container for the data series that you want to draw:\n\nimport SwiftUI\nimport Charts\n\n\nstruct BarChart: View {\n    var body: some View {\n        Chart {\n            // Add marks here.\n        }\n    }\n}\n\n\nInside the chart, specify the graphical marks that represent the data. You can populate it with a variety of kinds of marks, like BarMark, PointMark or LineMark, that plot your data. The kind of mark that you choose depends on how you want to visualize the data. For example, you can use LineMark to create a line chart or PointMark to produce a scatter plot. In this case, creating a bar chart is a good way to convey the number of each type of toy shape, so you use BarMark:\n\nChart {\n    BarMark(\n        x: .value(\"Shape Type\", data[0].type),\n        y: .value(\"Total Count\", data[0].count)\n    )\n    BarMark(\n         x: .value(\"Shape Type\", data[1].type),\n         y: .value(\"Total Count\", data[1].count)\n    )\n    BarMark(\n         x: .value(\"Shape Type\", data[2].type),\n         y: .value(\"Total Count\", data[2].count)\n    )\n}\n\n\nThe resulting chart clearly communicates that the cube toy shape appears the most:\n\nScale determines the position, height, and color of each BarMark. As you plot data on the y-dimension, the framework automatically generates axis labels for the y-axis to map the data values. The scale for the y-dimension is adjusted to match the range of totals for the shape’s group.\n\nThe above code lists each BarMark individually. However, for regular, repetitive data, you can use a ForEach structure to represent the same chart more concisely:\n\nChart {\n    ForEach(data) { shape in\n        BarMark(\n            x: .value(\"Shape Type\", shape.type),\n            y: .value(\"Total Count\", shape.count)\n        )\n    }\n}\n\nExplore additional data properties\n\nThe above bar chart shows how much of each type of toy shape there are, but the earlier table separates each toy shape by color as well. A stacked bar chart can visualize not only the amount of each toy shape type, but also the distribution of colors among the shapes. Before you can plot this new information, you need to represent color in your data structure:\n\nstruct ToyShape: Identifiable {\n    var color: String\n    var type: String\n    var count: Double\n    var id = UUID()\n}\n\n\nThen update the initialized data to include the color information:\n\nvar stackedBarData: [ToyShape] = [\n    .init(color: \"Green\", type: \"Cube\", count: 2),\n    .init(color: \"Green\", type: \"Sphere\", count: 0),\n    .init(color: \"Green\", type: \"Pyramid\", count: 1),\n    .init(color: \"Purple\", type: \"Cube\", count: 1),\n    .init(color: \"Purple\", type: \"Sphere\", count: 1),\n    .init(color: \"Purple\", type: \"Pyramid\", count: 1),\n    .init(color: \"Pink\", type: \"Cube\", count: 1),\n    .init(color: \"Pink\", type: \"Sphere\", count: 2),\n    .init(color: \"Pink\", type: \"Pyramid\", count: 0),\n    .init(color: \"Yellow\", type: \"Cube\", count: 1),\n    .init(color: \"Yellow\", type: \"Sphere\", count: 1),\n    .init(color: \"Yellow\", type: \"Pyramid\", count: 2)\n]\n\n\nTo represent this additional dimension of information, add the foregroundStyle(by:) method to the BarMark, and indicate the data’s color property as the plottable value:\n\nChart {\n    ForEach(stackedBarData) { shape in\n        BarMark(\n            x: .value(\"Shape Type\", shape.type),\n            y: .value(\"Total Count\", shape.count)\n        )\n        .foregroundStyle(by: .value(\"Shape Color\", shape.color))\n    }\n}\n\n\nThe chart now splits the bars into different parts that represent the number of colors for each shape:\n\nThe stacked bar chart chooses colors to represent the new data, and adds a legend to indicate which color represents which kind of data.\n\nCustomize your chart\n\nFor many charts, the default configuration works well. However, in this case, the colors that the framework assigns to each mark don’t match the shape colors that they represent. You can customize the chart to override the default color scale by adding the Chart/chartForegroundStyleScale(_:) chart modifier:\n\nChart {\n    ForEach(stackedBarData) { shape in\n        BarMark(\n            x: .value(\"Shape Type\", shape.type),\n            y: .value(\"Total Count\", shape.count)\n        )\n        .foregroundStyle(by: .value(\"Shape Color\", shape.count))\n    }  \n}\n.chartForegroundStyleScale([\n    \"Green\": .green, \"Purple\": .purple, \"Pink\": .pink, \"Yellow\": .yellow\n])\n\n\nNow the names of the colors match the colors used in the chart, making the chart easier to understand:\n\nThis chart makes the relationship between shape counts and colors clear. You can customize charts in many other ways. For example, you can set the bar width, choose different legend symbols, and control the axes.\n\nSee Also\nCharts\nstruct Chart\nA SwiftUI view that displays a chart.\nprotocol ChartContent\nA type that represents the content that you draw on a chart.\nstruct ChartContentBuilder\nA result builder that you use to compose the contents of a chart.\nstruct Plot\nA mechanism for grouping chart contents into a single entity."
  },
  {
    "title": "Visualizing your app’s data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts/visualizing_your_app_s_data",
    "html": "Overview\n\nNote\n\nThis sample code project is associated with WWDC23 session 10037: Explore pie charts and interactivity in Swift Charts.\n\nSee Also\nCharts\nCreating a chart using Swift Charts\nMake a chart by combining chart building blocks in SwiftUI.\nstruct Chart\nA SwiftUI view that displays a chart.\nprotocol ChartContent\nA type that represents the content that you draw on a chart.\nstruct ChartContentBuilder\nA result builder that you use to compose the contents of a chart.\nstruct Plot\nA mechanism for grouping chart contents into a single entity."
  },
  {
    "title": "Swift Charts | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/charts",
    "html": "Overview\n\nSwift Charts is a powerful and concise SwiftUI framework for transforming your data into informative visualizations. With Swift Charts, you can build effective and customizable charts with minimal code. This framework provides marks, scales, axes, and legends as building blocks that you can combine to develop a broad range of data-driven charts.\n\nThere are many ways you can use Swift Charts to communicate patterns or trends in your data. You can create a variety of charts including line charts, bar charts, and scatter plots as shown above. When you create a chart using this framework, it automatically generates scales and axes that fit your data.\n\nSwift Charts supports localization and accessibility features. You can also override default behavior to customize your charts by using chart modifiers. For example, you can create a dynamic experience by adding animations to your charts.\n\nTopics\nCharts\nCreating a chart using Swift Charts\nMake a chart by combining chart building blocks in SwiftUI.\nVisualizing your app’s data\nBuild complex and interactive charts using Swift Charts.\nstruct Chart\nA SwiftUI view that displays a chart.\nprotocol ChartContent\nA type that represents the content that you draw on a chart.\nstruct ChartContentBuilder\nA result builder that you use to compose the contents of a chart.\nstruct Plot\nA mechanism for grouping chart contents into a single entity.\nMarks\nstruct AreaMark\nChart content that represents data using the area of one or more regions.\nstruct LineMark\nChart content that represents data using a sequence of connected line segments.\nstruct PointMark\nChart content that represents data using points.\nstruct RectangleMark\nChart content that represents data using rectangles.\nstruct RuleMark\nChart content that represents data using a single horizontal or vertical rule.\nstruct BarMark\nChart content that represents data using bars.\nMark configuration\nstruct MarkStackingMethod\nThe ways in which you can stack marks in a chart.\nstruct MarkDimension\nAn individual dimension representing a mark’s width or height.\nstruct InterpolationMethod\nThe ways in which line or area marks interpolate their data.\nprotocol ChartSymbolShape\nA type that can act as a shape for the marks that you add to a chart.\nstruct AnyChartSymbolShape\nA type-erased plotting shape.\nLabeled data\nstruct PlottableValue\nLabeled data that you draw on a chart using marks.\nprotocol Plottable\nA type that can serve as data for the labeled, plottable values that you draw on a chart.\nScales\nprotocol ScaleRange\nA type that you can use to configure the range of a chart.\nprotocol PositionScaleRange\nA type that configures the x-axis and y-axis values.\nstruct PlotDimensionScaleRange\nA range that represents the plot area’s width or height.\nprotocol ScaleDomain\nA type that you can use to configure the domain of a chart.\nstruct AutomaticScaleDomain\nA domain that the chart infers from its data.\nstruct ScaleType\nThe ways you can scale the domain or range of a plot.\nAxes\nCustomizing axes in Swift Charts\nImprove the clarity of your chart by configuring the appearance of its axes.\nprotocol AxisContent\nA type that represents the elements that you use to build a chart’s axes.\nstruct AxisMarks\nA group of visual marks that a chart draws to indicate the composition of a chart’s axes.\nstruct AnyAxisContent\nA type-erased element of a chart’s axis.\nstruct AxisContentBuilder\nA result builder that constructs axis content.\nAxis marks\nprotocol AxisMark\nA type that serves as the basic building block for the elements of an axis.\nstruct AxisTick\nA mark that a chart draws on an axis to indicate a reference point along that axis.\nstruct AxisGridLine\nA line that a chart draws across its plot area to indicate a reference point along a particular axis.\nstruct AxisValueLabel\nA label that describes the value for an axis mark.\nstruct AxisValue\nA value for an axis mark.\nstruct AnyAxisMark\nA type-erased axis mark.\nstruct AxisMarkBuilder\nA result builder that constructs axis marks and overrides default marks.\nAnnotations\nstruct AnnotationContext\nInformation about an item that you add an annotation to.\nstruct AnnotationPosition\nThe position of an annotation.\nData bins\nstruct NumberBins\nA collection of bins for a chart that plots data against numbers.\nstruct DateBins\nA collection of bins for a chart that plots data against dates.\nstruct ChartBinRange\nThe range of data that a single bin of a chart represents.\nChart management\nstruct ChartPlotContent\nA view that represents a chart’s plot area.\nstruct ChartProxy\nA proxy that you use to access the scales and plot area of a chart.\nProtocols\nprotocol ChartScrollTargetBehavior\nA type that configures the scroll behavior of charts.\nprotocol PrimitivePlottableProtocol\nA type that represents the primitive plottable types supported by the framework. Don’t use this type directly.\nStructures\nstruct AnnotationOverflowResolution\nstruct AnyChartContent\nA type-erased chart content.\nstruct AxisMarkPosition\nDescribes the position of axis markers.\nstruct AxisMarkPreset\nDescribes preset styles for axis markers.\nstruct AxisMarkValues\nDescribes the values the axis markers will present (one for each value).\nstruct AxisValueLabelCollisionResolution\nstruct AxisValueLabelOrientation\nDescribes the orientation of a label.\nstruct BasicChartSymbolShape\nA basic chart symbol shape.\nstruct ChartAxisContent\nA view that represents a chart’s axis.\nstruct ChartScrollTargetBehaviorContext\nContextual information that can be used to determine how to best adjust how the chart scrolls.\nstruct MajorValueAlignment\nA type that defines how the valigned aligned chart scroll target behavior aligns to major values on swipe.\nstruct SectorMark\nA sector of a pie or donut chart, which shows how individual categories make up a meaningful total.\nstruct ValueAlignedChartScrollTargetBehavior\nA scroll target behavior that aligns to values spaced at regular intervals along the scrollable axes.\nstruct ValueAlignedLimitBehavior\nA type that defines the amount of marks that can be scrolled at a time."
  }
]