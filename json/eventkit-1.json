[
  {
    "title": "EKEntityMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekentitymask",
    "html": "Topics\nInitializers\ninit(rawValue: UInt)\nCreates an entity mask with the specified raw value.\nConstants\nstatic var event: EKEntityMask\nRepresents an event.\nstatic var reminder: EKEntityMask\nRepresents a reminder.\nRelationships\nConforms To\nOptionSet\nSendable"
  },
  {
    "title": "ABRecordRef | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/abrecordref",
    "html": "See Also\nMiscellaneous\ntypealias ABPropertyType\nThese are the possible types of ABRecord properties.\ntypealias ABSearchComparison\nConstants used to specify the type of comparison beingmade.\ntypealias ABSearchConjunction\nConstants used to create compound search elements."
  },
  {
    "title": "allDay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507482-allday",
    "html": "See Also\nAccessing Event Properties\neventIdentifier\nA unique identifier for the event.\navailability\nThe availability setting for the event.\nstartDate\nThe start date of the event.\nendDate\nThe end date for the event.\nrecurrenceRule\nThe recurrence rule associated with the event.\noccurrenceDate\nThe original occurrence date of an event if it is part of a recurring series.\nisDetached\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\norganizer\nThe organizer associated with the event.\nstatus\nThe status of the event.\nbirthdayContactIdentifier\nThe contact identifier of the person for this birthday event.\nstructuredLocation\nThe event's location with a potential geocoordinate.\nbirthdayPersonID\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nbirthdayPersonUniqueID\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "EKParticipantStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipantstatus",
    "html": "Topics\nConstants\ncase unknown\nThe participant’s attendance status is unknown.\ncase pending\nThe participant has yet to respond to the event.\ncase accepted\nThe participant has accepted the event.\ncase declined\nThe participant has declined the event.\ncase tentative\nThe participant’s attendance status is tentative.\ncase delegated\nThe participant has delegated attendance to another participant.\ncase completed\nThe participant’s event has completed.\ncase inProcess\nThe participant’s event is currently in process.\nRelationships\nConforms To\nSendable\nSee Also\nDefining Participants\nenum EKParticipantRole\nThe participant’s role for an event.\nenum EKParticipantType\nThe type of participant.\nenum EKParticipantScheduleStatus\nThe participant's scheduled status."
  },
  {
    "title": "EKMonday | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekweekday/1451967-ekmonday",
    "html": "Deprecated\n\nUse EKWeekday.monday instead.\n\nSee Also\nDeprecated\nstatic var EKSunday: EKWeekday\nThe value for Sunday.\nDeprecated\nstatic var EKTuesday: EKWeekday\nThe value for Tuesday.\nDeprecated\nstatic var EKWednesday: EKWeekday\nThe value for Wednesday.\nDeprecated\nstatic var EKThursday: EKWeekday\nThe value for Thursday.\nDeprecated\nstatic var EKFriday: EKWeekday\nThe value for Friday.\nDeprecated\nstatic var EKSaturday: EKWeekday\nThe value for Saturday.\nDeprecated"
  },
  {
    "title": "alarmWithRelativeOffset: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507338-alarmwithrelativeoffset",
    "html": "Parameters\noffset\n\nThe offset from the start of an event, at which the alarm fires.\n\nReturn Value\n\nThe created alarm.\n\nDiscussion\n\nNegative offset values fire before the start of the event, while positive values fire after the start.\n\nSee Also\nCreating an Alarm\n+ alarmWithAbsoluteDate:\nCreates and returns an alarm with an absolute date."
  },
  {
    "title": "EKSourceType.local | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksourcetype/local",
    "html": "See Also\nEventKit Source Types\ncase exchange\nRepresents an Exchange source.\ncase calDAV\nRepresents a CalDAV or iCloud source.\ncase mobileMe\nRepresents a MobileMe source.\ncase subscribed\nRepresents a subscribed source.\ncase birthdays\nRepresents a birthday source."
  },
  {
    "title": "EKSourceType.exchange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksourcetype/exchange",
    "html": "See Also\nEventKit Source Types\ncase local\nRepresents a local source.\ncase calDAV\nRepresents a CalDAV or iCloud source.\ncase mobileMe\nRepresents a MobileMe source.\ncase subscribed\nRepresents a subscribed source.\ncase birthdays\nRepresents a birthday source."
  },
  {
    "title": "eventWithEventStore: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507483-eventwitheventstore",
    "html": "Parameters\neventStore\n\nThe event store to which the event belongs.\n\nReturn Value\n\nThe created event.\n\nSee Also\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "EKAuthorizationStatus.fullAccess | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekauthorizationstatus/fullaccess",
    "html": "See Also\nStatus\ncase writeOnly\nThe app has write-only access to the requested entity type.\ncase denied\nThe person explicitly denied access to the service for the app.\ncase notDetermined\nThe person hasn’t chosen whether the app may access the service.\ncase restricted\nThe app isn’t authorized to access the service."
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1507435-url",
    "html": "See Also\nAccessing Participant Properties\nvar isCurrentUser: Bool\nA Boolean value indicating whether this participant represents the owner of this account.\nvar name: String?\nThe participant’s name.\nvar participantRole: EKParticipantRole\nThe participant’s role in the event.\nvar participantStatus: EKParticipantStatus\nThe participant’s attendance status.\nvar participantType: EKParticipantType\nThe participant’s type.\nvar contactPredicate: NSPredicate\nA predicate to use with the Contacts framework to retrieve the corresponding contact instance."
  },
  {
    "title": "participantStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1507533-participantstatus",
    "html": "See Also\nAccessing Participant Properties\nvar isCurrentUser: Bool\nA Boolean value indicating whether this participant represents the owner of this account.\nvar name: String?\nThe participant’s name.\nvar participantRole: EKParticipantRole\nThe participant’s role in the event.\nvar participantType: EKParticipantType\nThe participant’s type.\nvar url: URL\nThe URL representing this participant.\nvar contactPredicate: NSPredicate\nA predicate to use with the Contacts framework to retrieve the corresponding contact instance.\nRelated Documentation\nenum EKParticipantStatus\nThe participant’s attendance status for an event."
  },
  {
    "title": "isCurrentUser | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1507248-iscurrentuser",
    "html": "See Also\nAccessing Participant Properties\nvar name: String?\nThe participant’s name.\nvar participantRole: EKParticipantRole\nThe participant’s role in the event.\nvar participantStatus: EKParticipantStatus\nThe participant’s attendance status.\nvar participantType: EKParticipantType\nThe participant’s type.\nvar url: URL\nThe URL representing this participant.\nvar contactPredicate: NSPredicate\nA predicate to use with the Contacts framework to retrieve the corresponding contact instance.\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "EKWednesday | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekweekday/1451817-ekwednesday",
    "html": "Deprecated\n\nUse EKWeekday.wednesday instead.\n\nSee Also\nDeprecated\nstatic var EKSunday: EKWeekday\nThe value for Sunday.\nDeprecated\nstatic var EKMonday: EKWeekday\nThe value for Monday.\nDeprecated\nstatic var EKTuesday: EKWeekday\nThe value for Tuesday.\nDeprecated\nstatic var EKThursday: EKWeekday\nThe value for Thursday.\nDeprecated\nstatic var EKFriday: EKWeekday\nThe value for Friday.\nDeprecated\nstatic var EKSaturday: EKWeekday\nThe value for Saturday.\nDeprecated"
  },
  {
    "title": "EKSunday | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekweekday/1451896-eksunday",
    "html": "Deprecated\n\nUse EKWeekday.sunday instead.\n\nSee Also\nDeprecated\nstatic var EKMonday: EKWeekday\nThe value for Monday.\nDeprecated\nstatic var EKTuesday: EKWeekday\nThe value for Tuesday.\nDeprecated\nstatic var EKWednesday: EKWeekday\nThe value for Wednesday.\nDeprecated\nstatic var EKThursday: EKWeekday\nThe value for Thursday.\nDeprecated\nstatic var EKFriday: EKWeekday\nThe value for Friday.\nDeprecated\nstatic var EKSaturday: EKWeekday\nThe value for Saturday.\nDeprecated"
  },
  {
    "title": "EKSaturday | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekweekday/1451995-eksaturday",
    "html": "Deprecated\n\nUse EKWeekday.saturday instead.\n\nSee Also\nDeprecated\nstatic var EKSunday: EKWeekday\nThe value for Sunday.\nDeprecated\nstatic var EKMonday: EKWeekday\nThe value for Monday.\nDeprecated\nstatic var EKTuesday: EKWeekday\nThe value for Tuesday.\nDeprecated\nstatic var EKWednesday: EKWeekday\nThe value for Wednesday.\nDeprecated\nstatic var EKThursday: EKWeekday\nThe value for Thursday.\nDeprecated\nstatic var EKFriday: EKWeekday\nThe value for Friday.\nDeprecated"
  },
  {
    "title": "EKErrorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerrorcode",
    "html": "Topics\nConstants\nEKErrorEventNotMutable\nThe event isn't mutable and you can’t save or delete it.\nEKErrorNoCalendar\nThe event isn't associated with a calendar.\nEKErrorNoStartDate\nThe event has no start date set.\nEKErrorNoEndDate\nThe event has no end date set.\nEKErrorDatesInverted\nThe event’s end date occurs before its start date.\nEKErrorInternalFailure\nAn internal error occurred.\nEKErrorCalendarReadOnly\nThe calendar is read-only and you can’t add events to it.\nEKErrorDurationGreaterThanRecurrence\nThe duration of an event is greater than its recurrence interval.\nEKErrorAlarmGreaterThanRecurrence\nThe alarm interval is greater than the recurrence interval.\nEKErrorStartDateTooFarInFuture\nThe start date is further into the future than the calendar can display.\nEKErrorStartDateCollidesWithOtherOccurrence\nThe event’s start date collides with another occurrence of the event.\nEKErrorObjectBelongsToDifferentStore\nThe object belongs to a different calendar store.\nEKErrorInvitesCannotBeMoved\nYou can’t move the event because it’s an invitation.\nEKErrorInvalidSpan\nThe system encountered an invalid span during a save or deletion.\nEKErrorCalendarHasNoSource\nYou can’t save the calendar without setting a source first.\nEKErrorCalendarSourceCannotBeModified\nYou can’t move the calendar to another source.\nEKErrorCalendarIsImmutable\nThe calendar is immutable and you can’t modify or delete it.\nEKErrorSourceDoesNotAllowCalendarAddDelete\nThe source doesn’t allow you to add or delete calendars.\nEKErrorRecurringReminderRequiresDueDate\nThe recurring reminder requires a due date.\nEKErrorStructuredLocationsNotSupported\nThe source to which this calendar belongs doesn't support structured locations.\nEKErrorReminderLocationsNotSupported\nThe source doesn't support locations on reminders.\nEKErrorAlarmProximityNotSupported\nThe source doesn't allow geofences on alarms.\nEKErrorCalendarDoesNotAllowEvents\nThe calendar doesn’t allow you to add events.\nEKErrorCalendarDoesNotAllowReminders\nThe calendar doesn’t allow you to add reminders.\nEKErrorSourceDoesNotAllowReminders\nThe source doesn't allow calendars supporting reminder entity types.\nEKErrorSourceDoesNotAllowEvents\nThe source doesn't allow calendars supporting event entity types.\nEKErrorPriorityIsInvalid\nThe priority number for the reminder is invalid.\nEKErrorInvalidEntityType\nThe entity type is invalid.\nEKErrorProcedureAlarmsNotMutable\nYou can’t create or modify procedure alarms.\nEKErrorEventStoreNotAuthorized\nThe user hasn't authorized your app to access events or reminders.\nEKErrorOSNotSupported\nThe action isn't supported on the current operating system.\nEKErrorInvalidInviteReplyCalendar\nThe calendar is invalid or nil.\nEKErrorNotificationsCollectionFlagNotSet\nThe notification collection doesn't have the notifications collection flag.\nEKErrorSourceMismatch\nThe object's source doesn't match its container's source.\nEKErrorNotificationCollectionMismatch\nThe notification collection that contains this notification doesn’t match the collection the system is trying to save.\nEKErrorNotificationSavedWithoutCollection\nThe notification can’t save because you haven’t added it to a notification collection and saved the collection first.\nEKErrorLast\nThis error is for internal use.\nEnumeration Cases\nEKErrorReminderAlarmContainsEmailOrUrl\nSee Also\nErrors\nEKErrorDomain\nA string that identifies the EventKit error domain."
  },
  {
    "title": "alarmWithAbsoluteDate: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507130-alarmwithabsolutedate",
    "html": "Parameters\ndate\n\nThe date for the alarm.\n\nReturn Value\n\nThe created alarm.\n\nSee Also\nCreating an Alarm\n+ alarmWithRelativeOffset:\nCreates and returns an alarm with a relative offset.\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "EKSourceType.calDAV | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksourcetype/caldav",
    "html": "See Also\nEventKit Source Types\ncase local\nRepresents a local source.\ncase exchange\nRepresents an Exchange source.\ncase mobileMe\nRepresents a MobileMe source.\ncase subscribed\nRepresents a subscribed source.\ncase birthdays\nRepresents a birthday source."
  },
  {
    "title": "EKSourceType.mobileMe | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksourcetype/mobileme",
    "html": "See Also\nEventKit Source Types\ncase local\nRepresents a local source.\ncase exchange\nRepresents an Exchange source.\ncase calDAV\nRepresents a CalDAV or iCloud source.\ncase subscribed\nRepresents a subscribed source.\ncase birthdays\nRepresents a birthday source."
  },
  {
    "title": "EKSourceType.subscribed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksourcetype/subscribed",
    "html": "See Also\nEventKit Source Types\ncase local\nRepresents a local source.\ncase exchange\nRepresents an Exchange source.\ncase calDAV\nRepresents a CalDAV or iCloud source.\ncase mobileMe\nRepresents a MobileMe source.\ncase birthdays\nRepresents a birthday source."
  },
  {
    "title": "EKSourceType.birthdays | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksourcetype/birthdays",
    "html": "See Also\nEventKit Source Types\ncase local\nRepresents a local source.\ncase exchange\nRepresents an Exchange source.\ncase calDAV\nRepresents a CalDAV or iCloud source.\ncase mobileMe\nRepresents a MobileMe source.\ncase subscribed\nRepresents a subscribed source."
  },
  {
    "title": "errorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2883690-errordomain",
    "html": "See Also\nError Domain\nlet EKErrorDomain: String\nA string that identifies the EventKit error domain."
  },
  {
    "title": "notificationSavedWithoutCollection | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/3042554-notificationsavedwithoutcollecti",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "invalidInviteReplyCalendar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/3042552-invalidinvitereplycalendar",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "EKAuthorizationStatus.restricted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekauthorizationstatus/restricted",
    "html": "Discussion\n\nThe person can’t change your app’s authorization status, possibly due to active restrictions such as parental controls being in place.\n\nSee Also\nStatus\ncase fullAccess\nThe app has both read and write access to the requested entity type.\ncase writeOnly\nThe app has write-only access to the requested entity type.\ncase denied\nThe person explicitly denied access to the service for the app.\ncase notDetermined\nThe person hasn’t chosen whether the app may access the service."
  },
  {
    "title": "compareStartDateWithEvent: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507335-comparestartdatewithevent",
    "html": "Parameters\nother\n\nThe event to compare against.\n\nReturn Value\n\nNSOrderedAscending if the start date of the receiver precedes the start date of other.\n\nNSOrderedSame if the start dates of the two events are identical.\n\nNSOrderedDescending if the start date of the receiver comes after the start date of other.\n\nDiscussion\n\nYou can pass the selector for this method to the NSArray method sortedArrayUsingSelector: to create an array of events sorted by start date."
  },
  {
    "title": "authorized | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekauthorizationstatus/1451886-authorized",
    "html": "Deprecated\n\nThis value is deprecated. Check for the level of access (EKAuthorizationStatus.writeOnly or EKAuthorizationStatus.fullAccess) your app needs."
  },
  {
    "title": "EKAuthorizationStatus.writeOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekauthorizationstatus/writeonly",
    "html": "See Also\nStatus\ncase fullAccess\nThe app has both read and write access to the requested entity type.\ncase denied\nThe person explicitly denied access to the service for the app.\ncase notDetermined\nThe person hasn’t chosen whether the app may access the service.\ncase restricted\nThe app isn’t authorized to access the service."
  },
  {
    "title": "init(title:url:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceurldescriptor/3793728-init",
    "html": "Parameters\ntitle\n\nA user-visible name of a room where virtual conferences take place.\n\nURL\n\nThe URL that users open to join a virtual conference.\n\nReturn Value\n\nA URL descriptor with the specified title and URL."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceurldescriptor/3793729-title",
    "html": "See Also\nConfiguring URL Descriptors\nvar url: URL\nThe URL that users open to join a virtual conference."
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceurldescriptor/3793727-url",
    "html": "See Also\nConfiguring URL Descriptors\nvar title: String?\nThe user-visible name of a room where virtual conferences take place, such as Personal Room or Team Room."
  },
  {
    "title": "abRecord(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1615895-abrecord",
    "html": "Parameters\naddressBook\n\nThe address book to search.\n\nReturn Value\n\nThe address book record for the participant, or nil if the record is not found.\n\nDiscussion\n\nThis method searches for a record match based on the participant’s email address.\n\nSpecial Considerations\n\nNote\n\nThis instance method is only available on iOS. For macOS, see the abPerson(in:) instance method.\n\nSee Also\nFinding Participant Address Book Records\nfunc abPerson(in: ABAddressBook) -> ABPerson?\nReturns the address book record that represents the participant.\nDeprecated"
  },
  {
    "title": "participantType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1507364-participanttype",
    "html": "See Also\nAccessing Participant Properties\nvar isCurrentUser: Bool\nA Boolean value indicating whether this participant represents the owner of this account.\nvar name: String?\nThe participant’s name.\nvar participantRole: EKParticipantRole\nThe participant’s role in the event.\nvar participantStatus: EKParticipantStatus\nThe participant’s attendance status.\nvar url: URL\nThe URL representing this participant.\nvar contactPredicate: NSPredicate\nA predicate to use with the Contacts framework to retrieve the corresponding contact instance.\nRelated Documentation\nenum EKParticipantType\nThe type of participant."
  },
  {
    "title": "participantRole | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1507494-participantrole",
    "html": "See Also\nAccessing Participant Properties\nvar isCurrentUser: Bool\nA Boolean value indicating whether this participant represents the owner of this account.\nvar name: String?\nThe participant’s name.\nvar participantStatus: EKParticipantStatus\nThe participant’s attendance status.\nvar participantType: EKParticipantType\nThe participant’s type.\nvar url: URL\nThe URL representing this participant.\nvar contactPredicate: NSPredicate\nA predicate to use with the Contacts framework to retrieve the corresponding contact instance.\nRelated Documentation\nenum EKParticipantRole\nThe participant’s role for an event."
  },
  {
    "title": "EKParticipantScheduleStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipantschedulestatus",
    "html": "Topics\nConstants\ncase none\nThe invitation hasn't been sent yet.\ncase pending\nThe invitation is in the process of being sent.\ncase sent\nThe invitation has been sent, but it's unclear if it was successfully delivered.\ncase delivered\nThe invitation has been sent and successfully delivered.\ncase recipientNotRecognized\nThe invitation wasn't delivered because the source doesn't recognize the recipient.\ncase noPrivileges\nThe invitation wasn’t delivered because of insufficient privileges.\ncase deliveryFailed\nThe invitation wasn't delivered due to a temporary failure.\ncase cannotDeliver\nThe invitation wasn't delivered because the system is unsure of how to deliver it.\ncase recipientNotAllowed\nThe invitation wasn't delivered because scheduling with the participant isn't allowed.\nRelationships\nConforms To\nSendable\nSee Also\nDefining Participants\nenum EKParticipantRole\nThe participant’s role for an event.\nenum EKParticipantType\nThe type of participant.\nenum EKParticipantStatus\nThe participant’s attendance status for an event."
  },
  {
    "title": "EKParticipantType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipanttype",
    "html": "Topics\nConstants\ncase unknown\nThe participant’s type is unknown.\ncase person\nThe participant is a person.\ncase room\nThe participant is a room.\ncase resource\nThe participant is a resource.\ncase group\nThe participant is a group.\nRelationships\nConforms To\nSendable\nSee Also\nDefining Participants\nenum EKParticipantRole\nThe participant’s role for an event.\nenum EKParticipantStatus\nThe participant’s attendance status for an event.\nenum EKParticipantScheduleStatus\nThe participant's scheduled status."
  },
  {
    "title": "EKParticipantRole | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipantrole",
    "html": "Topics\nConstants\ncase unknown\nThe participant’s role is unknown.\ncase required\nThe participant’s attendance is required.\ncase optional\nThe participant’s attendance is optional.\ncase chair\nThe participant is the chair of the event.\ncase nonParticipant\nThe participant does not have an active role in the event.\nRelationships\nConforms To\nSendable\nSee Also\nDefining Participants\nenum EKParticipantType\nThe type of participant.\nenum EKParticipantStatus\nThe participant’s attendance status for an event.\nenum EKParticipantScheduleStatus\nThe participant's scheduled status."
  },
  {
    "title": "invalidSpan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325701-invalidspan",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "EKThursday | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekweekday/1451894-ekthursday",
    "html": "Deprecated\n\nUse EKWeekday.thursday instead.\n\nSee Also\nDeprecated\nstatic var EKSunday: EKWeekday\nThe value for Sunday.\nDeprecated\nstatic var EKMonday: EKWeekday\nThe value for Monday.\nDeprecated\nstatic var EKTuesday: EKWeekday\nThe value for Tuesday.\nDeprecated\nstatic var EKWednesday: EKWeekday\nThe value for Wednesday.\nDeprecated\nstatic var EKFriday: EKWeekday\nThe value for Friday.\nDeprecated\nstatic var EKSaturday: EKWeekday\nThe value for Saturday.\nDeprecated"
  },
  {
    "title": "calendarDoesNotAllowReminders | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325683-calendardoesnotallowreminders",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "invalidEntityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325698-invalidentitytype",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "notificationsCollectionFlagNotSet | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/3042555-notificationscollectionflagnotse",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "notificationCollectionMismatch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/3042553-notificationcollectionmismatch",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "errorCode | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2883689-errorcode",
    "html": "See Also\nError Properties\nvar errorUserInfo: [String : Any]\nA dictionary for providing additional details about the error.\nvar localizedDescription: String\nA string containing the localized description of the error."
  },
  {
    "title": "EKAuthorizationStatus.denied | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekauthorizationstatus/denied",
    "html": "See Also\nStatus\ncase fullAccess\nThe app has both read and write access to the requested entity type.\ncase writeOnly\nThe app has write-only access to the requested entity type.\ncase notDetermined\nThe person hasn’t chosen whether the app may access the service.\ncase restricted\nThe app isn’t authorized to access the service."
  },
  {
    "title": "abPerson(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1507504-abperson",
    "html": "Parameters\naddressBook\n\nThe address book to search.\n\nReturn Value\n\nThe address book record for the participant, or nil if the record is not found.\n\nDiscussion\n\nThis method searches for a record match based on the participant’s email address.\n\nSpecial Considerations\n\nNote\n\nThis instance method is only available in macOS. For iOS, see the abRecord(with:) instance method.\n\nSee Also\nFinding Participant Address Book Records\nfunc abRecord(with: ABAddressBook) -> ABRecord?\nReturns the address book record that represents the participant."
  },
  {
    "title": "contactPredicate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1507163-contactpredicate",
    "html": "Discussion\n\nUse this property to get a predicate that you can use with a CNContactStore to fetch a CNContact instance for this participant, if one exists.\n\nSee Also\nAccessing Participant Properties\nvar isCurrentUser: Bool\nA Boolean value indicating whether this participant represents the owner of this account.\nvar name: String?\nThe participant’s name.\nvar participantRole: EKParticipantRole\nThe participant’s role in the event.\nvar participantStatus: EKParticipantStatus\nThe participant’s attendance status.\nvar participantType: EKParticipantType\nThe participant’s type.\nvar url: URL\nThe URL representing this participant."
  },
  {
    "title": "name | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant/1507480-name",
    "html": "See Also\nAccessing Participant Properties\nvar isCurrentUser: Bool\nA Boolean value indicating whether this participant represents the owner of this account.\nvar participantRole: EKParticipantRole\nThe participant’s role in the event.\nvar participantStatus: EKParticipantStatus\nThe participant’s attendance status.\nvar participantType: EKParticipantType\nThe participant’s type.\nvar url: URL\nThe URL representing this participant.\nvar contactPredicate: NSPredicate\nA predicate to use with the Contacts framework to retrieve the corresponding contact instance."
  },
  {
    "title": "sourceDoesNotAllowCalendarAddDelete | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325693-sourcedoesnotallowcalendaradddel",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "calendarHasNoSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325696-calendarhasnosource",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "calendarIsImmutable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325706-calendarisimmutable",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "calendarSourceCannotBeModified | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325684-calendarsourcecannotbemodified",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "calendarDoesNotAllowEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325681-calendardoesnotallowevents",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "sourceDoesNotAllowReminders | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325682-sourcedoesnotallowreminders",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "calendars(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksource/1507387-calendars",
    "html": "Parameters\nentityType\n\nThe entity type of either an event or a reminder.\n\nReturn Value\n\nThe calendars belonging to this source that support the entity type.\n\nSee Also\nAccessing Calendars\nvar calendars: Set<EKCalendar>\nThe calendars that belong to this source object.\nDeprecated\nRelated Documentation\nstruct EKEntityMask\nA bitmask of EKEntityType for specifying multiple entities at once."
  },
  {
    "title": "sourceType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksource/1507300-sourcetype",
    "html": "Discussion\n\nPossible values are described in EKSourceType.\n\nSee Also\nAccessing Source Properties\nenum EKSourceType\nThe type of source object.\nvar sourceIdentifier: String\nA unique identifier for the source object.\nvar title: String\nThe name of this source object."
  },
  {
    "title": "calendars | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksource/1624237-calendars",
    "html": "Discussion\n\nNote\n\nThis property is not available in macOS.\n\nSee Also\nAccessing Calendars\nfunc calendars(for: EKEntityType) -> Set<EKCalendar>\nReturns the calendars that belong to this source object that support a particular entity type."
  },
  {
    "title": "EKEntityType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekentitytype",
    "html": "Topics\nSpecifying Multiple Entities\nstruct EKEntityMask\nA bitmask of EKEntityType for specifying multiple entities at once.\nConstants\ncase event\nRepresents an event.\ncase reminder\nRepresents a reminder.\nRelationships\nConforms To\nSendable"
  },
  {
    "title": "refresh() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekobject/1507327-refresh",
    "html": "Return Value\n\nIf the operation is successful, true; if the object was deleted in the event store, false. If this method returns false, the object should be released.\n\nDiscussion\n\nThis method merges the local changes to properties of this object with the latest values in the event store. This method updates only properties that have not been modified locally, so you do not lose any changes by invoking this method. You can also use this method to see whether an object was deleted from the event store.\n\nSee Also\nSaving and Restoring State\nvar hasChanges: Bool\nReturns whether this object or any of the objects it contains has uncommitted changes.\nvar isNew: Bool\nA Boolean value that indicates whether this object has ever been saved.\nfunc reset()\nReturns this object to its saved state.\nfunc rollback()\nRolls back the property values of this object to its original state when it was first fetched."
  },
  {
    "title": "hasChanges | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekobject/1507333-haschanges",
    "html": "Return Value\n\nReturns true if there are uncommitted changes; otherwise, false.\n\nSee Also\nSaving and Restoring State\nvar isNew: Bool\nA Boolean value that indicates whether this object has ever been saved.\nfunc refresh() -> Bool\nMerges changes to this object with the latest saved values.\nfunc reset()\nReturns this object to its saved state.\nfunc rollback()\nRolls back the property values of this object to its original state when it was first fetched."
  },
  {
    "title": "calendarItemExternalIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507283-calendaritemexternalidentifier",
    "html": "Discussion\n\nThis identifier allows you to access the same event or reminder across multiple devices.\n\nThere are some cases where duplicate copies of a calendar item can exist in the same database:\n\nA calendar item was imported from an ICS file into multiple calendars\n\nAn event was created in a calendar shared with the user and the user was also invited to the event\n\nThe user is a delegate of a calendar that also has this event\n\nA subscribed calendar was added to multiple accounts\n\nIn such cases, you should choose between calendar items based on other factors, such as the calendar or source.\n\nRecurring event identifiers are the same for all occurrences. If you wish to differentiate between occurrences, you may want to use the start date.\n\nFor Exchange servers, the identifier is different between iOS and macOS and different between devices for reminders.\n\nSee Also\nAccessing Calendar Items\nvar calendarItemIdentifier: String\nThe calendar item’s unique identifier.\nvar uuid: String\nThe calendar item’s unique identifier.\nDeprecated"
  },
  {
    "title": "creationDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507213-creationdate",
    "html": "Discussion\n\nIf nil, this property was not set or was synced in this state.\n\nSee Also\nAccessing Calendar Item Properties\nvar calendar: EKCalendar!\nThe calendar for the calendar item.\nvar title: String!\nThe title for the calendar item.\nvar location: String?\nThe location associated with the calendar item.\nvar lastModifiedDate: Date?\nThe date that the calendar item was last modified.\nvar timeZone: TimeZone?\nThe time zone for the calendar item.\nvar url: URL?\nThe URL for the calendar item."
  },
  {
    "title": "calendarItemIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507075-calendaritemidentifier",
    "html": "Discussion\n\nThis property is set when the calendar item is created and can be used as a local identifier. Use calendarItem(withIdentifier:) to look up the item by this value.\n\nA full sync with the calendar will lose this identifier. You should have a plan for dealing with a calendar whose identifier is no longer fetch-able by caching its other properties.\n\nSee Also\nAccessing Calendar Items\nvar calendarItemExternalIdentifier: String!\nThe calendar item’s external identifier as provided by the calendar server.\nvar uuid: String\nThe calendar item’s unique identifier.\nDeprecated\nRelated Documentation\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "reset() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekobject/1507405-reset",
    "html": "Discussion\n\nThis method updates all the properties of this object with the corresponding values in the event store. Any local changes that were not saved before invoking this method are lost. This method does nothing if the object was never saved.\n\nSee Also\nSaving and Restoring State\nvar hasChanges: Bool\nReturns whether this object or any of the objects it contains has uncommitted changes.\nvar isNew: Bool\nA Boolean value that indicates whether this object has ever been saved.\nfunc refresh() -> Bool\nMerges changes to this object with the latest saved values.\nfunc rollback()\nRolls back the property values of this object to its original state when it was first fetched."
  },
  {
    "title": "rollback() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekobject/1507462-rollback",
    "html": "Discussion\n\nAny local changes to this object are lost when invoking this method. This method does not re-fetch property values from the event store. This method does nothing if the object was never changed.\n\nSee Also\nSaving and Restoring State\nvar hasChanges: Bool\nReturns whether this object or any of the objects it contains has uncommitted changes.\nvar isNew: Bool\nA Boolean value that indicates whether this object has ever been saved.\nfunc refresh() -> Bool\nMerges changes to this object with the latest saved values.\nfunc reset()\nReturns this object to its saved state."
  },
  {
    "title": "location | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507269-location",
    "html": "Discussion\n\nThis property is nil if the calendar item has no location.\n\nSee Also\nAccessing Calendar Item Properties\nvar calendar: EKCalendar!\nThe calendar for the calendar item.\nvar title: String!\nThe title for the calendar item.\nvar creationDate: Date?\nThe date that this calendar item was created.\nvar lastModifiedDate: Date?\nThe date that the calendar item was last modified.\nvar timeZone: TimeZone?\nThe time zone for the calendar item.\nvar url: URL?\nThe URL for the calendar item."
  },
  {
    "title": "uuid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1623897-uuid",
    "html": "See Also\nAccessing Calendar Items\nvar calendarItemIdentifier: String\nThe calendar item’s unique identifier.\nvar calendarItemExternalIdentifier: String!\nThe calendar item’s external identifier as provided by the calendar server.\nRelated Documentation\nclass EKCalendarItem\nAn abstract superclass for calendar events and reminders."
  },
  {
    "title": "priorityIsInvalid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325709-priorityisinvalid",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "sourceMismatch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/3042556-sourcemismatch",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2947144",
    "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nInequality is the inverse of equality. For any values a and b, a != b implies that a == b is false.\n\nThis is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."
  },
  {
    "title": "procedureAlarmsNotMutable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325700-procedurealarmsnotmutable",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "osNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325702-osnotsupported",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "eventStoreNotAuthorized | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325687-eventstorenotauthorized",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "sourceDoesNotAllowEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325705-sourcedoesnotallowevents",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "last | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325691-last",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first."
  },
  {
    "title": "errorUserInfo | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2883688-erroruserinfo",
    "html": "See Also\nError Properties\nvar errorCode: Int\nThe error code associated with the EventKit error.\nvar localizedDescription: String\nA string containing the localized description of the error."
  },
  {
    "title": "eventNotMutable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325679-eventnotmutable",
    "html": "See Also\nError Codes\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "localizedDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2883691-localizeddescription",
    "html": "See Also\nError Properties\nvar errorCode: Int\nThe error code associated with the EventKit error.\nvar errorUserInfo: [String : Any]\nA dictionary for providing additional details about the error."
  },
  {
    "title": "noCalendar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325689-nocalendar",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "datesInverted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325708-datesinverted",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "noEndDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325685-noenddate",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "noStartDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325697-nostartdate",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "status | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507158-status",
    "html": "Discussion\n\nYou should act based on an event’s status only if the status is EKEventStatus.canceled, which indicates that the event has been canceled. Other statuses should be considered informational.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nRelated Documentation\nenum EKEventStatus\nThe event’s status."
  },
  {
    "title": "invitesCannotBeMoved | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325690-invitescannotbemoved",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "timeZone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507104-timezone",
    "html": "Discussion\n\nIf nil, the calendar item is a floating event. A floating event is not tied to a particular time zone. It occurs at a given time regardless of the time zone — for example, “lunch at noon.” The start and end times of a floating event should be set as if they were in the system time zone.\n\nSee Also\nAccessing Calendar Item Properties\nvar calendar: EKCalendar!\nThe calendar for the calendar item.\nvar title: String!\nThe title for the calendar item.\nvar location: String?\nThe location associated with the calendar item.\nvar creationDate: Date?\nThe date that this calendar item was created.\nvar lastModifiedDate: Date?\nThe date that the calendar item was last modified.\nvar url: URL?\nThe URL for the calendar item."
  },
  {
    "title": "hasAlarms | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507271-hasalarms",
    "html": "Discussion\n\nIf true, the calendar item has alarms; otherwise it does not.\n\nSee Also\nAdding and Removing Alarms\nfunc addAlarm(EKAlarm)\nAdds an alarm to the receiver.\nfunc removeAlarm(EKAlarm)\nRemoves an alarm from the calendar item.\nvar alarms: [EKAlarm]?\nThe alarms associated with the calendar item, as an array of EKAlarm objects."
  },
  {
    "title": "weeksOfTheYear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507400-weeksoftheyear",
    "html": "Discussion\n\nValues can be from 1 to 53 and from -1 to -53. This property value is valid only for recurrence rules initialized with specific weeks of the year and a frequency type of EKRecurrenceFrequency.yearly.\n\nNegative values indicate counting backwards from the end of the year.\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/1507322-ek_lose_fractional_seconds_do_no",
    "html": "See Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency."
  },
  {
    "title": "calendarIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507380-calendaridentifier",
    "html": "Discussion\n\nThis property is set when the calendar is created and can be used as a local identifier. Use calendar(withIdentifier:) to get a calendar with the specified identifier.\n\nA full sync with the calendar will lose this identifier. You should have a plan for dealing with a calendar whose identifier is no longer fetch-able by caching its other properties.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nRelated Documentation\nvar calendarItemIdentifier: String\nThe calendar item’s unique identifier."
  },
  {
    "title": "daysOfTheMonth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507410-daysofthemonth",
    "html": "Discussion\n\nValues can be from 1 to 31 and from -1 to -31. This property value is valid only for recurrence rules that were initialized with specific days of the month and a frequency type of EKRecurrenceFrequency.monthly.\n\nNegative values indicate counting backwards from the end of the month.\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "EKCalendarEventAvailabilityMask | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendareventavailabilitymask",
    "html": "Topics\nInitializers\ninit(rawValue: UInt)\nCreates a calendar event availability mask with the specified raw value.\nType Properties\nstatic var busy: EKCalendarEventAvailabilityMask\nThe calendar supports the busy event availability setting.\nstatic var free: EKCalendarEventAvailabilityMask\nThe calendar supports the free event availability setting.\nstatic var tentative: EKCalendarEventAvailabilityMask\nThe calendar supports the tentative event availability setting.\nstatic var unavailable: EKCalendarEventAvailabilityMask\nThe calendar supports the unavailable event availability setting.\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "durationGreaterThanRecurrence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325699-durationgreaterthanrecurrence",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "startDateCollidesWithOtherOccurrence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325707-startdatecollideswithotheroccurr",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "internalFailure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325695-internalfailure",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "alarmGreaterThanRecurrence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325704-alarmgreaterthanrecurrence",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "calendarReadOnly | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325692-calendarreadonly",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "objectBelongsToDifferentStore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325703-objectbelongstodifferentstore",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "alarmProximityNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325694-alarmproximitynotsupported",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksource/1507385-title",
    "html": "See Also\nAccessing Source Properties\nenum EKSourceType\nThe type of source object.\nvar sourceIdentifier: String\nA unique identifier for the source object.\nvar sourceType: EKSourceType\nThe type of this source object."
  },
  {
    "title": "isNew | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekobject/1507402-isnew",
    "html": "Discussion\n\nThe value of this property is true if the object hasn't been saved; otherwise, false.\n\nSee Also\nSaving and Restoring State\nvar hasChanges: Bool\nReturns whether this object or any of the objects it contains has uncommitted changes.\nfunc refresh() -> Bool\nMerges changes to this object with the latest saved values.\nfunc reset()\nReturns this object to its saved state.\nfunc rollback()\nRolls back the property values of this object to its original state when it was first fetched."
  },
  {
    "title": "EKRecurrenceFrequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencefrequency",
    "html": "Topics\nConstants\ncase daily\nIndicates a daily recurrence rule.\ncase weekly\nIndicates a weekly recurrence rule.\ncase monthly\nIndicates a monthly recurrence rule.\ncase yearly\nIndicates a yearly recurrence rule.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Recurrence Rule Properties\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "birthdayPersonUniqueID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507361-birthdaypersonuniqueid",
    "html": "Discussion\n\nThis property is only set if this is a birthday event; otherwise the property is nil.\n\nSpecial Considerations\n\nNote\n\nThis property is equivalent to the birthdayPersonID property on iOS.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "hasNotes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507389-hasnotes",
    "html": "Discussion\n\nIf true, the calendar item has notes; otherwise it does not.\n\nSee Also\nAttaching Notes\nvar notes: String?\nThe notes associated with the calendar item."
  },
  {
    "title": "isAllDay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507482-isallday",
    "html": "See Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "notes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507507-notes",
    "html": "See Also\nAttaching Notes\nvar hasNotes: Bool\nA Boolean value that indicates whether the calendar item has notes."
  },
  {
    "title": "init(mapItem:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekstructuredlocation/1507493-init",
    "html": "Parameters\nmapItem\n\nThe MKMapItem object that represents the location.\n\nSee Also\nCreating Structured Locations\ninit(title: String)\nCreates a new structured location with the specified title."
  },
  {
    "title": "hasAttendees | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507073-hasattendees",
    "html": "Discussion\n\nIf true, the calendar item has attendees; otherwise it does not.\n\nSee Also\nDisplaying Attendees\nvar attendees: [EKParticipant]?\nThe attendees associated with the calendar item, as an array of EKParticipant objects."
  },
  {
    "title": "removeRecurrenceRule(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507495-removerecurrencerule",
    "html": "Parameters\nrule\n\nThe rule to be removed from recurrenceRules.\n\nDiscussion\n\nThe implementation only supports a single recurrence rule.\n\nSee Also\nSetting Recurrence Rules\nvar hasRecurrenceRules: Bool\nA Boolean value that indicates whether the calendar item has recurrence rules.\nfunc addRecurrenceRule(EKRecurrenceRule)\nAdds a recurrence rule to the recurrence rule array.\nvar recurrenceRules: [EKRecurrenceRule]?\nThe recurrence rules for the calendar item."
  },
  {
    "title": "attendees | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507140-attendees",
    "html": "Discussion\n\nThis property is read-only; it is not possible to add attendees with Event Kit. This property is nil if the calendar item has no attendees.\n\nSee Also\nDisplaying Attendees\nvar hasAttendees: Bool\nA Boolean value that indicates whether the calendar item has attendees."
  },
  {
    "title": "hasRecurrenceRules | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507459-hasrecurrencerules",
    "html": "Discussion\n\nIf true, the calendar item has recurrence rules; otherwise it does not.\n\nSpecial Considerations\n\nThe implementation only supports a single recurrence rule. Adding a recurrence rule replaces the single recurrence rule.\n\nSee Also\nSetting Recurrence Rules\nfunc addRecurrenceRule(EKRecurrenceRule)\nAdds a recurrence rule to the recurrence rule array.\nfunc removeRecurrenceRule(EKRecurrenceRule)\nRemoves a recurrence rule from the recurrence rule array.\nvar recurrenceRules: [EKRecurrenceRule]?\nThe recurrence rules for the calendar item."
  },
  {
    "title": "setPositions | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507378-setpositions",
    "html": "Discussion\n\nFor example, a yearly recurrence rule that has a daysOfTheWeek value that specifies Monday through Friday, and a setPositions array containing 2 and -1, occurs only on the second weekday and last weekday of every year. Values can be from 1 to 366 and from -1 to -366.\n\nNegative values indicate counting backwards from the end of the recurrence rule’s frequency (week, month, or year).\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "removeAlarm(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507133-removealarm",
    "html": "Parameters\nalarm\n\nThe alarm to be removed.\n\nSee Also\nAdding and Removing Alarms\nvar hasAlarms: Bool\nA Boolean value that indicates whether the calendar item has alarms.\nfunc addAlarm(EKAlarm)\nAdds an alarm to the receiver.\nvar alarms: [EKAlarm]?\nThe alarms associated with the calendar item, as an array of EKAlarm objects."
  },
  {
    "title": "monthsOfTheYear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507449-monthsoftheyear",
    "html": "Discussion\n\nValues can be from 1 to 12. This property value is valid only for recurrence rules initialized with specific months of the year and a frequency type of EKRecurrenceFrequency.yearly.\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "firstDayOfTheWeek | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507060-firstdayoftheweek",
    "html": "Discussion\n\nValues of 1 to 7 correspond to Sunday through Saturday. A value of 0 indicates that this property is not set for the recurrence rule.\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "daysOfTheYear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507439-daysoftheyear",
    "html": "Discussion\n\nValues can be from 1 to 366 and from -1 to -366. This property value is valid only for recurrence rules initialized with a frequency type of EKRecurrenceFrequency.yearly.\n\nNegative values indicate counting backwards from the end of the year.\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "daysOfTheWeek | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507538-daysoftheweek",
    "html": "Discussion\n\nThis property value is valid only for recurrence rules that were initialized with specific days of the week and a frequency type of EKRecurrenceFrequency.weekly, EKRecurrenceFrequency.monthly, or EKRecurrenceFrequency.yearly.\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "frequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507297-frequency",
    "html": "See Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "EKSpan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekspan",
    "html": "Topics\nConstants\ncase thisEvent\nModifications to this event instance should affect only this instance.\ncase futureEvents\nModifications to this event instance should also affect future instances of this event.\nRelationships\nConforms To\nSendable\nSee Also\nCreating a Basic Recurrence Rule\ninit(recurrenceWith: EKRecurrenceFrequency, interval: Int, end: EKRecurrenceEnd?)\nInitializes and returns a simple recurrence rule with a given frequency, interval, and end."
  },
  {
    "title": "DATE_COMPONENTS_DO_NOT_USE() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/1507535-date_components_do_not_use",
    "html": "See Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "url | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1589757-url",
    "html": "Discussion\n\nAssigning this property a value will set the emailAddress and soundName properties to nil.\n\nSee Also\nTriggering Alarm Actions\nEKAlarmType\nA value that specifies what type of action occurs when the alarm triggers.\ntype\nThe type of action to trigger when the alarm fires.\nemailAddress\nThe recipient of an email to send when the alarm triggers.\nsoundName\nThe name of the sound to play when the alarm triggers."
  },
  {
    "title": "EKWeekday | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekweekday",
    "html": "Topics\nConstants\ncase sunday\nThe value for Sunday.\ncase monday\nThe value for Monday.\ncase tuesday\nThe value for Tuesday.\ncase wednesday\nThe value for Wednesday.\ncase thursday\nThe value for Thursday.\ncase friday\nThe value for Friday.\ncase saturday\nThe value for Saturday.\nDeprecated\nstatic var EKSunday: EKWeekday\nThe value for Sunday.\nDeprecated\nstatic var EKMonday: EKWeekday\nThe value for Monday.\nDeprecated\nstatic var EKTuesday: EKWeekday\nThe value for Tuesday.\nDeprecated\nstatic var EKWednesday: EKWeekday\nThe value for Wednesday.\nDeprecated\nstatic var EKThursday: EKWeekday\nThe value for Thursday.\nDeprecated\nstatic var EKFriday: EKWeekday\nThe value for Friday.\nDeprecated\nstatic var EKSaturday: EKWeekday\nThe value for Saturday.\nDeprecated\nRelationships\nConforms To\nSendable\nSee Also\nCreating a Day of the Week\ninit(EKWeekday)\nCreates and returns a day of the week with a given day.\ninit(EKWeekday, weekNumber: Int)\nCreates and returns an autoreleased day of the week with a given day and week number.\ninit(dayOfTheWeek: EKWeekday, weekNumber: Int)\nInitializes and returns a day of the week with a given day and week number."
  },
  {
    "title": "init(dayOfTheWeek:weekNumber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencedayofweek/1448581-init",
    "html": "Parameters\ndayOfTheWeek\n\nThe day of the week. Values range from 1 to 7, with Sunday being 1.\n\nweekNumber\n\nThe week number.\n\nReturn Value\n\nThe initialized day of the week.\n\nSee Also\nCreating a Day of the Week\nenum EKWeekday\nThe day of the week.\ninit(EKWeekday)\nCreates and returns a day of the week with a given day.\ninit(EKWeekday, weekNumber: Int)\nCreates and returns an autoreleased day of the week with a given day and week number."
  },
  {
    "title": "init(occurrenceCount:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrenceend/1415640-init",
    "html": "Parameters\noccurrenceCount\n\nThe maximum occurrence count.\n\nReturn Value\n\nThe initialized recurrence end.\n\nDiscussion\n\nThe maximum occurrence count argument must be a positive integer and not 0; otherwise an exception will be raised.\n\nSee Also\nCreating a Recurrence End\ninit(end: Date)\nInitializes and returns a date-based recurrence end with a given end date."
  },
  {
    "title": "occurrenceCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrenceend/1415642-occurrencecount",
    "html": "See Also\nAccessing Recurrence End Properties\nvar endDate: Date?\nThe end date of the recurrence end, or nil if the recurrence end is count-based."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencedayofweek/1448589-init",
    "html": "Parameters\ndayOfTheWeek\n\nThe day of the week. Values range from 1 to 7, with Sunday being 1.\n\nReturn Value\n\nThe new day of the week.\n\nDiscussion\n\nThe week number of the returned day of the week is 0.\n\nSee Also\nCreating a Day of the Week\nenum EKWeekday\nThe day of the week.\ninit(EKWeekday, weekNumber: Int)\nCreates and returns an autoreleased day of the week with a given day and week number.\ninit(dayOfTheWeek: EKWeekday, weekNumber: Int)\nInitializes and returns a day of the week with a given day and week number."
  },
  {
    "title": "DATETIME_COMPONENTS_DO_NOT_USE() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/1507496-datetime_components_do_not_use",
    "html": "See Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "dayOfTheWeek | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencedayofweek/1448579-dayoftheweek",
    "html": "Discussion\n\nValues are from 1 to 7, with Sunday being 1.\n\nSee Also\nAccessing Properties of a Day of the Week\nvar weekNumber: Int\nThe week number of the day of the week.\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "supportedEventAvailabilities | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507171-supportedeventavailabilities",
    "html": "Discussion\n\nIf the calendar doesn’t support event availability settings, this value is none.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507145-type",
    "html": "Discussion\n\nCalDAV-subscribed calendars are of type EKCalendarType.calDAV with isSubscribed set to true.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "isSubscribed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507471-issubscribed",
    "html": "Discussion\n\nIf true, the calendar is a subscribed calendar; otherwise it is not.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "source | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507288-source",
    "html": "Discussion\n\nThis property can only be set for newly created calendar objects. This property is read-only after the first time it is set; setting a value to this property after the first time it is set will result in an error. Therefore, moving a calendar from one source to another is not supported.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "allowedEntityTypes | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507202-allowedentitytypes",
    "html": "Discussion\n\nWhile Event Kit only allows creation of single-entity calendars, other servers might allow mixed-entity calendars.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "cgColor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1615894-cgcolor",
    "html": "Discussion\n\nThis property is the equivalent of the color property in macOS.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "color | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507513-color",
    "html": "Discussion\n\nThis property is the equivalent of the cgColor property on iOS.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "isImmutable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507084-isimmutable",
    "html": "Discussion\n\nIf true, the calendar is immutable; otherwise it is not. Events and reminders can still be added to an immutable calendar.\n\nSee Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "startDateTooFarInFuture | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325680-startdatetoofarinfuture",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "EKCalendarType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendartype",
    "html": "Topics\nConstants\ncase local\nA local calendar.\ncase calDAV\nA CalDAV or iCloud calendar.\ncase exchange\nAn Exchange calendar.\ncase subscription\nA locally subscribed calendar.\ncase birthday\nA birthday calendar.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Calendar Properties\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "allowsContentModifications | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507068-allowscontentmodifications",
    "html": "See Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "recurringReminderRequiresDueDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325678-recurringreminderrequiresduedate",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "structuredLocationsNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325688-structuredlocationsnotsupported",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "reminderLocationsNotSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/2325686-reminderlocationsnotsupported",
    "html": "See Also\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use."
  },
  {
    "title": "sourceIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksource/1507275-sourceidentifier",
    "html": "See Also\nAccessing Source Properties\nenum EKSourceType\nThe type of source object.\nvar sourceType: EKSourceType\nThe type of this source object.\nvar title: String\nThe name of this source object."
  },
  {
    "title": "EKSourceType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksourcetype",
    "html": "Overview\n\nThe sourceType property will be set to one of these values.\n\nTopics\nEventKit Source Types\ncase local\nRepresents a local source.\ncase exchange\nRepresents an Exchange source.\ncase calDAV\nRepresents a CalDAV or iCloud source.\ncase mobileMe\nRepresents a MobileMe source.\ncase subscribed\nRepresents a subscribed source.\ncase birthdays\nRepresents a birthday source.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Source Properties\nvar sourceIdentifier: String\nA unique identifier for the source object.\nvar sourceType: EKSourceType\nThe type of this source object.\nvar title: String\nThe name of this source object."
  },
  {
    "title": "init(title:identifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceroomtypedescriptor/3793723-init",
    "html": "Parameters\ntitle\n\nThe user-visible name of a room where virtual conferences take place, such as Personal Room or Team Room.\n\nidentifier\n\nA unique string you choose that identifies the room.\n\nReturn Value\n\nAn object that describes a location where a virtual conference takes place."
  },
  {
    "title": "EKVirtualConferenceRoomTypeIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceroomtypeidentifier",
    "html": "See Also\nConfiguring Room Type Descriptors\nvar title: String\nThe user-visible name of a room where virtual conferences take place, such as Personal Room or Team Room.\nvar identifier: EKVirtualConferenceRoomTypeIdentifier\nA unique string you choose that identifies the room."
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceroomtypedescriptor/3793722-identifier",
    "html": "See Also\nConfiguring Room Type Descriptors\nvar title: String\nThe user-visible name of a room where virtual conferences take place, such as Personal Room or Team Room.\ntypealias EKVirtualConferenceRoomTypeIdentifier\nThe type for a room type identifier."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceroomtypedescriptor/3793724-title",
    "html": "See Also\nConfiguring Room Type Descriptors\nvar identifier: EKVirtualConferenceRoomTypeIdentifier\nA unique string you choose that identifies the room.\ntypealias EKVirtualConferenceRoomTypeIdentifier\nThe type for a room type identifier."
  },
  {
    "title": "init(sources:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507179-init",
    "html": "Parameters\nsources\n\nAn array of sources the event store should contain. This array may include delegate sources.\n\nReturn Value\n\nAn event store that contains data for a specific collection of event sources.\n\nSee Also\nCreating event stores\ninit()\nCreates a new event store.\nvar eventStoreIdentifier: String\nThe unique identifier for the event store."
  },
  {
    "title": "save(_:commit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507181-save",
    "html": "Parameters\nreminder\n\nThe reminder to save.\n\ncommit\n\nA Boolean value that indicates whether to save the reminder immediately or to batch the changes. Passing false won’t commit changes to the event store until the commit() method is invoked.\n\nerror\n\nA pointer to an error object. If an error occurs, this pointer provides access to the error; otherwise, pass nil if you don’t need the error information.\n\nReturn Value\n\ntrue if the event store saves the reminder successfully; otherwise, false. This method also returns false if reminder wasn’t modified.\n\nDiscussion\n\nThis method raises an exception if reminder belongs to another event store.\n\nHandling Errors in Swift\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nRelated Documentation\nfunc commit()\nCommits all unsaved changes to the event store."
  },
  {
    "title": "EKFriday | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekweekday/1451835-ekfriday",
    "html": "Deprecated\n\nUse EKWeekday.friday instead.\n\nSee Also\nDeprecated\nstatic var EKSunday: EKWeekday\nThe value for Sunday.\nDeprecated\nstatic var EKMonday: EKWeekday\nThe value for Monday.\nDeprecated\nstatic var EKTuesday: EKWeekday\nThe value for Tuesday.\nDeprecated\nstatic var EKWednesday: EKWeekday\nThe value for Wednesday.\nDeprecated\nstatic var EKThursday: EKWeekday\nThe value for Thursday.\nDeprecated\nstatic var EKSaturday: EKWeekday\nThe value for Saturday.\nDeprecated"
  },
  {
    "title": "proximity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507123-proximity",
    "html": "Discussion\n\nAlarms can be set to trigger when entering or exiting a location specified by structuredLocation. By default, alarms are not affected by location.\n\nSee Also\nSetting GeoFence-based Alarms\nenum EKAlarmProximity\nA value indicating whether an alarm is triggered by entering or exiting a region.\nvar structuredLocation: EKStructuredLocation?\nThe location to trigger an alarm."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507121-enddate",
    "html": "See Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "init(absoluteDate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507130-init",
    "html": "Parameters\ndate\n\nThe date for the alarm.\n\nReturn Value\n\nThe created alarm.\n\nSee Also\nCreating an Alarm\ninit(relativeOffset: TimeInterval)\nCreates and returns an alarm with a relative offset.\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "emailAddress | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507267-emailaddress",
    "html": "Discussion\n\nAssigning this property a value will set the soundName and url properties to nil.\n\nSee Also\nTriggering Alarm Actions\nenum EKAlarmType\nA value that specifies what type of action occurs when the alarm triggers.\nvar type: EKAlarmType\nThe type of action to trigger when the alarm fires.\nvar soundName: String?\nThe name of the sound to play when the alarm triggers."
  },
  {
    "title": "birthdayPersonID | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1615845-birthdaypersonid",
    "html": "Discussion\n\nThis property is only set if this is a birthday event; otherwise the property is nil.\n\nSpecial Considerations\n\nNote\n\nThis property is equivalent to the birthdayPersonUniqueID property in macOS.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "init(recurrenceWith:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507320-init",
    "html": "Parameters\ntype\n\nThe frequency of the recurrence rule. Can be daily, weekly, monthly, or yearly.\n\ninterval\n\nThe interval between instances of this recurrence. For example, a weekly recurrence rule with an interval of 2 occurs every other week. Must be greater than 0.\n\ndays\n\nThe days of the week that the event occurs, as an array of EKRecurrenceDayOfWeek objects.\n\nmonthDays\n\nThe days of the month that the event occurs, as an array of NSNumber objects. Values can be from 1 to 31 and from -1 to -31. This parameter is only valid for recurrence rules of type EKRecurrenceFrequency.monthly.\n\nmonths\n\nThe months of the year that the event occurs, as an array of NSNumber objects. Values can be from 1 to 12. This parameter is only valid for recurrence rules of type EKRecurrenceFrequency.yearly.\n\nweeksOfTheYear\n\nThe weeks of the year that the event occurs, as an array of NSNumber objects. Values can be from 1 to 53 and from -1 to -53. This parameter is only valid for recurrence rules of type EKRecurrenceFrequency.yearly.\n\ndaysOfTheYear\n\nThe days of the year that the event occurs, as an array of NSNumber objects. Values can be from 1 to 366 and from -1 to -366. This parameter is only valid for recurrence rules of type EKRecurrenceFrequency.yearly.\n\nsetPositions\n\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency. See setPositions for more information.\n\nend\n\nThe end of the recurrence rule.\n\nReturn Value\n\nThe initialized recurrence rule, or nil if invalid values are provided.\n\nDiscussion\n\nNegative values indicate counting backwards from the end of the recurrence rule’s frequency."
  },
  {
    "title": "init(recurrenceWith:interval:end:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507273-init",
    "html": "Parameters\ntype\n\nThe frequency of the recurrence rule. Can be daily, weekly, monthly, or yearly.\n\ninterval\n\nThe interval between instances of this recurrence. For example, a weekly recurrence rule with an interval of 2 occurs every other week. Must be greater than 0.\n\nend\n\nThe end of the recurrence rule.\n\nReturn Value\n\nThe initialized recurrence rule, or nil if invalid values are provided.\n\nSee Also\nCreating a Basic Recurrence Rule\nenum EKSpan\nAn object that indicates whether modifications should apply to a single event or all future events of a recurring event.\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "priority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekreminder/1507173-priority",
    "html": "See Also\nAccessing Reminder Properties\nenum EKReminderPriority\nThe priority of the reminder.\nvar startDateComponents: DateComponents?\nThe start date of the task.\nvar dueDateComponents: DateComponents?\nThe date by which the reminder should be completed.\nvar isCompleted: Bool\nA Boolean value determining whether or not the reminder is marked completed.\nvar completionDate: Date?\nThe date on which the reminder was completed."
  },
  {
    "title": "EKReminderPriority | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekreminderpriority",
    "html": "Topics\nConstants\ncase none\nThe reminder has no priority set.\ncase high\nThe reminder is high priority.\ncase medium\nThe reminder is medium priority.\ncase low\nThe reminder is low priority.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Reminder Properties\nvar priority: Int\nThe reminder's priority.\nvar startDateComponents: DateComponents?\nThe start date of the task.\nvar dueDateComponents: DateComponents?\nThe date by which the reminder should be completed.\nvar isCompleted: Bool\nA Boolean value determining whether or not the reminder is marked completed.\nvar completionDate: Date?\nThe date on which the reminder was completed."
  },
  {
    "title": "refresh() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507089-refresh",
    "html": "Return Value\n\nIf the event was successfully refreshed, true; otherwise, false.\n\nDiscussion\n\nYou should call this method only on events that your application is editing, and only when your application receives the EKEventStoreChanged notification. If this method returns false, the event has been deleted or otherwise invalidated, and you should not continue to use it.\n\nThis method does not replace the values of any properties that you have modified."
  },
  {
    "title": "structuredLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507185-structuredlocation",
    "html": "See Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "organizer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507357-organizer",
    "html": "Discussion\n\nThis property is nil if the event has no organizer.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "isDetached | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507112-isdetached",
    "html": "Discussion\n\nThis value is true if and only if the event is part of a repeating event and one or more of its attributes have been modified from the repeating event’s default attributes.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "occurrenceDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507244-occurrencedate",
    "html": "Discussion\n\nThis value remains the same even when the event has been detached and its start date has changed. Floating events (such as all-day events) are returned in the default time zone.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "init(title:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekstructuredlocation/1507366-init",
    "html": "Parameters\ntitle\n\nThe title of the location.\n\nReturn Value\n\nThe structured location object.\n\nSee Also\nCreating Structured Locations\ninit(mapItem: MKMapItem)\nCreates a new structured location with the specified map item.\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "radius | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekstructuredlocation/1507489-radius",
    "html": "Discussion\n\nTo use the default radius, set this property to 0.\n\nSee Also\nAccessing Structured Location Properties\nvar title: String?\nThe title of the location.\nvar geoLocation: CLLocation?\nThe core location."
  },
  {
    "title": "EKAuthorizationStatus.notDetermined | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekauthorizationstatus/notdetermined",
    "html": "See Also\nStatus\ncase fullAccess\nThe app has both read and write access to the requested entity type.\ncase writeOnly\nThe app has write-only access to the requested entity type.\ncase denied\nThe person explicitly denied access to the service for the app.\ncase restricted\nThe app isn’t authorized to access the service."
  },
  {
    "title": "requestAccess(to:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507547-requestaccess",
    "html": "Deprecated\n\nOn iOS 17 and later, this method doesn’t prompt for access and immediately calls the completion block with an error.\n\nIf your app only uses EKEventEditViewController to let your user create and save calendar events, don’t request events access. Use requestWriteOnlyAccessToEvents(completion:) to create calendar events. Use requestFullAccessToEvents(completion:) to read and write calendar events. Use requestFullAccessToReminders(completion:) to read and write reminders.\n\nParameters\nentityType\n\nThe event or reminder entity type.\n\ncompletion\n\nThe block to call when the request completes.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc requestAccess(to entityType: EKEntityType) async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nIn iOS 6 and later, requesting access to an event store asynchronously prompts your users for permission to use their data. The user is only prompted the first time your app requests access to an entity type; any subsequent instantiations of EKEventStore uses existing permissions. When the user taps to grant or deny access, the completion handler will be called on an arbitrary queue. Your app isn’t blocked while the user decides to grant or deny permission.\n\nAfter users choose their permission level, the event store either calls the completion handler or broadcasts an EKEventStoreChanged. The completion handler is called on iOS 6 and later, and the notification is broadcasted on iOS 5. Because users may deny access to the event store, your app should handle an empty data case.\n\nImportant\n\nIf your app has never requested access before, you must request access to events or reminders before attempting to fetch or create them. If you request data before prompting the user for access with this method, you’ll need to reset the event store with the reset() method in order to start receiving data after the user grants access."
  },
  {
    "title": "EKEventSearchCallback | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventsearchcallback",
    "html": "Parameters\nevent\n\nAn event object to operate on.\n\nstop\n\nA pointer to a Boolean value. Set this value to true to stop enumerating events.\n\nSee Also\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range."
  },
  {
    "title": "fetchReminders(matching:completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507500-fetchreminders",
    "html": "Parameters\npredicate\n\nA search predicate created with predicateForReminders(in:).\n\ncompletion\n\nA closure that receives the reminders that match predicate.\n\nReturn Value\n\nA value that represents the asynchronous fetch request. To cancel a fetch request before it completes, pass this value to cancelFetchRequest(_:).\n\nDiscussion\n\nOnly committed reminders are included in the results. To include reminders saved using save(_:commit:) with the commit parameter set to false, call commit() first.\n\nThis method fetches reminders asynchronously.\n\nSee Also\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them."
  },
  {
    "title": "predicateForIncompleteReminders(withDueDateStarting:ending:calendars:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507143-predicateforincompletereminders",
    "html": "Parameters\nstartDate\n\nThe start date of the range of reminders fetched, or nil for all incomplete reminders before endDate.\n\nendDate\n\nThe end date of the range of reminders fetched, or nil for all incomplete reminders after startDate.\n\ncalendars\n\nAn array of calendars to search.\n\nReturn Value\n\nA predicate to use when calling fetchReminders(matching:completion:).\n\nDiscussion\n\nPass nil for both startDate and endDate to get all incomplete reminders in the specified calendars.\n\nSee Also\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them."
  },
  {
    "title": "cancelFetchRequest(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507342-cancelfetchrequest",
    "html": "Parameters\nfetchIdentifier\n\nThe identifier of the request as returned by fetchReminders(matching:completion:).\n\nDiscussion\n\nAfter canceling a fetch request, EventKit doesn’t call the completion originally specified in fetchReminders(matching:completion:).\n\nSee Also\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them."
  },
  {
    "title": "predicateForCompletedReminders(withCompletionDateStarting:ending:calendars:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507447-predicateforcompletedreminders",
    "html": "Parameters\nstartDate\n\nThe start date of the range of reminders fetched, or nil for all completed reminders before endDate.\n\nendDate\n\nThe end date of the range of reminders fetched, or nil for all completed reminders after startDate.\n\ncalendars\n\nAn array of calendars to search.\n\nReturn Value\n\nA predicate to use when calling fetchReminders(matching:completion:).\n\nDiscussion\n\nPass nil for both startDate and endDate to get all complete reminders in the specified calendars.\n\nSee Also\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them."
  },
  {
    "title": "enumerateEvents(matching:using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507518-enumerateevents",
    "html": "Parameters\npredicate\n\nA search predicate created with predicateForEvents(withStart:end:calendars:).\n\nblock\n\nThe closure to call for each event. The callback must match the signature defined by EKEventSearchCallback.\n\nDiscussion\n\nOnly committed events are included in the enumeration. To include events saved using save(_:span:commit:) with the commit parameter set to false, call commit() first.\n\nThis method is synchronous. For asynchronous behavior, run the method on another thread with dispatch_async(_:_:) or Operation.\n\nSee Also\nSearching calendars\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them."
  },
  {
    "title": "predicateForReminders(in:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507086-predicateforreminders",
    "html": "Parameters\ncalendars\n\nAn array of calendars to search.\n\nReturn Value\n\nA predicate to use when calling fetchReminders(matching:completion:).\n\nSee Also\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them."
  },
  {
    "title": "save(_:span:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1615881-save",
    "html": "Parameters\nevent\n\nThe event to save.\n\nspan\n\nThe span that indicates whether to remove a single event or all future instances of the event in the case of a recurring event.\n\nerror\n\nA pointer to an error object. If an error occurs, this pointer provides access to the error; otherwise, pass nil if you don’t need the error information.\n\nReturn Value\n\ntrue if the event store saves the event successfully; otherwise, false. This method also returns false if event wasn’t modified.\n\nDiscussion\n\nThis method raises an exception if it’s passed an event from another event store.\n\nWhen saving an event, it’s updated in the Calendar database. Any fields you didn’t modify are updated to reflect the most recent value in the database. If the event has been deleted from the database, it’s recreated as a new event.\n\nHandling Errors in Swift\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekstructuredlocation/1507137-title",
    "html": "See Also\nAccessing Structured Location Properties\nvar geoLocation: CLLocation?\nThe core location.\nvar radius: Double\nA minimum distance from the core location that would trigger the alarm or reminder."
  },
  {
    "title": "recurrenceEnd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507254-recurrenceend",
    "html": "Discussion\n\nThis can be represented by an end date or a number of occurrences.\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "interval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507194-interval",
    "html": "Discussion\n\nFor example, a recurrence rule with a frequency type of EKRecurrenceFrequency.weekly and an interval of 2 repeats every two weeks.\n\nSee Also\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "recurrenceRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1804716-recurrencerule",
    "html": "Deprecated\n\nAs of iOS 4.0 and later and macOS 10.8 and later, use the EKRecurrenceRule class to specify repeating events.\n\nSee Also\nAccessing Event Properties\neventIdentifier\nA unique identifier for the event.\navailability\nThe availability setting for the event.\nstartDate\nThe start date of the event.\nendDate\nThe end date for the event.\nallDay\nA Boolean value that indicates whether the event is an all-day event.\noccurrenceDate\nThe original occurrence date of an event if it is part of a recurring series.\nisDetached\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\norganizer\nThe organizer associated with the event.\nstatus\nThe status of the event.\nbirthdayContactIdentifier\nThe contact identifier of the person for this birthday event.\nstructuredLocation\nThe event's location with a potential geocoordinate.\nbirthdayPersonID\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nbirthdayPersonUniqueID\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "init(_:weekNumber:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencedayofweek/1448591-init",
    "html": "Parameters\ndayOfTheWeek\n\nThe day of the week. Values range from 1 to 7, with Sunday being 1.\n\nweekNumber\n\nThe week number.\n\nReturn Value\n\nThe new day of the week.\n\nSee Also\nCreating a Day of the Week\nenum EKWeekday\nThe day of the week.\ninit(EKWeekday)\nCreates and returns a day of the week with a given day.\ninit(dayOfTheWeek: EKWeekday, weekNumber: Int)\nInitializes and returns a day of the week with a given day and week number."
  },
  {
    "title": "weekNumber | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencedayofweek/1448577-weeknumber",
    "html": "Discussion\n\nValues range from –53 to 53. A negative value indicates a value from the end of the range. 0 indicates the week number is irrelevant.\n\nSee Also\nAccessing Properties of a Day of the Week\nvar dayOfTheWeek: EKWeekday\nThe day of the week."
  },
  {
    "title": "init(end:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrenceend/1415644-init",
    "html": "Parameters\nendDate\n\nThe end date.\n\nReturn Value\n\nThe initialized recurrence end.\n\nDiscussion\n\nThe end date argument must be a valid NSDate and not nil; otherwise an exception will be raised.\n\nSee Also\nCreating a Recurrence End\ninit(occurrenceCount: Int)\nInitializes and returns a count-based recurrence end with a given maximum occurrence count.\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrenceend/1415648-enddate",
    "html": "See Also\nAccessing Recurrence End Properties\nvar occurrenceCount: Int\nThe occurrence count of the recurrence end, or 0 if the recurrence end is date-based."
  },
  {
    "title": "remove(_:span:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1615882-remove",
    "html": "Parameters\nevent\n\nThe event to remove.\n\nspan\n\nThe span that indicates whether to remove a single event or all future instances of the event in the case of a recurring event.\n\nerror\n\nA pointer to an error object. If an error occurs, this pointer provides access to the error; otherwise, pass nil if you don’t need the error information.\n\nReturn Value\n\ntrue if the event store successfully removes the event; otherwise, false. This method also returns false if event isn’t in the event store.\n\nDiscussion\n\nThis method raises an exception if the event belongs to another event store.\n\nHandling Errors in Swift\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes."
  },
  {
    "title": "calendarItem(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507433-calendaritem",
    "html": "Parameters\nidentifier\n\nThe calendar item’s unique identifier.\n\nReturn Value\n\nThe reminder or the first occurrence of an event with the specified identifier, or nil if neither is found.\n\nSee Also\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes."
  },
  {
    "title": "event(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507490-event",
    "html": "Parameters\nidentifier\n\nThe identifier of the event.\n\nReturn Value\n\nThe event that corresponds with identifier, or nil if no event is found.\n\nSee Also\nAccessing calendar events\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes."
  },
  {
    "title": "removeCalendar(_:commit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507523-removecalendar",
    "html": "Parameters\ncalendar\n\nThe calendar to remove.\n\ncommit\n\ntrue to remove the calendar immediately; otherwise, the change is batched until the commit() method is invoked.\n\nerror\n\nThe error that occurred, if any; otherwise, nil.\n\nReturn Value\n\ntrue if successful; otherwise, false.\n\nDiscussion\n\nThis method raises an exception if calendar belongs to another event store.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing calendars\nvar defaultCalendarForNewEvents: EKCalendar?\nThe calendar that events are added to by default, as specified by user settings.\nfunc defaultCalendarForNewReminders() -> EKCalendar?\nIdentifies the default calendar for adding reminders to, as specified by user settings.\nfunc calendars(for: EKEntityType) -> [EKCalendar]\nIdentifies the calendars that support a given entity type, such as reminders or events.\nfunc calendar(withIdentifier: String) -> EKCalendar?\nLocates a calendar with the specified identifier.\nfunc saveCalendar(EKCalendar, commit: Bool)\nSaves a calendar to the event store by either committing or batching the changes.\nvar calendars: [EKCalendar]\nThe calendars associated with the event store.\nDeprecated"
  },
  {
    "title": "defaultCalendarForNewEvents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507062-defaultcalendarfornewevents",
    "html": "See Also\nAccessing calendars\nfunc defaultCalendarForNewReminders() -> EKCalendar?\nIdentifies the default calendar for adding reminders to, as specified by user settings.\nfunc calendars(for: EKEntityType) -> [EKCalendar]\nIdentifies the calendars that support a given entity type, such as reminders or events.\nfunc calendar(withIdentifier: String) -> EKCalendar?\nLocates a calendar with the specified identifier.\nfunc saveCalendar(EKCalendar, commit: Bool)\nSaves a calendar to the event store by either committing or batching the changes.\nfunc removeCalendar(EKCalendar, commit: Bool)\nRemoves a calendar from the event store by either committing or batching the changes.\nvar calendars: [EKCalendar]\nThe calendars associated with the event store.\nDeprecated"
  },
  {
    "title": "source(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507521-source",
    "html": "Parameters\nidentifier\n\nThe source’s unique identifier.\n\nReturn Value\n\nThe source with the specified identifier, or nil if the source isn’t found.\n\nSee Also\nAccessing account sources\nvar sources: [EKSource]\nAn unordered array of objects that represent accounts that contain calendars.\nvar delegateSources: [EKSource]\nThe event sources delegated to the person using your app."
  },
  {
    "title": "reset() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507345-reset",
    "html": "Discussion\n\nThis method updates all the properties of all the objects with their corresponding values in the event store. Any local changes that aren’t saved before invoking this method are lost. All existing objects created or retrieved using this store are disassociated from it and are invalid.\n\nSee Also\nSaving and restoring state\nfunc commit()\nCommits all unsaved changes to the event store.\nfunc refreshSourcesIfNecessary()\nPulls new data from remote sources, if necessary."
  },
  {
    "title": "refreshSourcesIfNecessary() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507421-refreshsourcesifnecessary",
    "html": "Discussion\n\nUse this method to pull new data from remote sources if the local data is out of date.\n\nSee Also\nSaving and restoring state\nfunc commit()\nCommits all unsaved changes to the event store.\nfunc reset()\nReverts the event store to its saved state."
  },
  {
    "title": "delegateSources | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507419-delegatesources",
    "html": "Discussion\n\nBy default, delegate event sources aren’t included in an event store’s sources. To access events and reminders in a delegate source:\n\nUse init() to initialize an EKEventStore.\n\nUse requestAccess(to:completion:) to request access to the desired entity types.\n\nGet the delegate sources from the event store using delegateSources.\n\nAfter the request is granted, initialize another EKEventStore using init(sources:), passing the delegate stores.\n\nSee Also\nAccessing account sources\nvar sources: [EKSource]\nAn unordered array of objects that represent accounts that contain calendars.\nfunc source(withIdentifier: String) -> EKSource?\nLocates an event source with the specified identifier."
  },
  {
    "title": "EKAuthorizationStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekauthorizationstatus",
    "html": "Topics\nStatus\ncase fullAccess\nThe app has both read and write access to the requested entity type.\ncase writeOnly\nThe app has write-only access to the requested entity type.\ncase denied\nThe person explicitly denied access to the service for the app.\ncase notDetermined\nThe person hasn’t chosen whether the app may access the service.\ncase restricted\nThe app isn’t authorized to access the service.\nDeprecated values\nstatic var authorized: EKAuthorizationStatus\nThe app can access the service.\nDeprecated\nRelationships\nConforms To\nSendable\nSee Also\nRequesting access to events and reminders\nfunc requestWriteOnlyAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts the person using your app to grant or deny write access to event data.\nfunc requestFullAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to event data.\nfunc requestFullAccessToReminders(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to reminders.\nclass func authorizationStatus(for: EKEntityType) -> EKAuthorizationStatus\nDetermines the authorization status for the given entity type.\ntypealias EKEventStoreRequestAccessCompletionHandler\nThe signature for a closure that EventKit calls when requesting access to event and reminder data.\nproperty list key NSCalendarsFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their calendar data.\nName: Privacy - Calendars Full Access Usage Description\nproperty list key NSCalendarsWriteOnlyAccessUsageDescription\nA message that tells people why the app is requesting access to create calendar events.\nName: Privacy - Calendars Write Only Usage Description\nproperty list key NSRemindersFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their reminders data.\nName: Privacy - Reminders Full Access Usage Description"
  },
  {
    "title": "sources | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507315-sources",
    "html": "Discussion\n\nAlthough this property is an array, the order of the elements in the array isn’t guaranteed.\n\nSee Also\nAccessing account sources\nvar delegateSources: [EKSource]\nThe event sources delegated to the person using your app.\nfunc source(withIdentifier: String) -> EKSource?\nLocates an event source with the specified identifier."
  },
  {
    "title": "EKEventStoreRequestAccessCompletionHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstorerequestaccesscompletionhandler",
    "html": "Parameters\ngranted\n\ntrue if the user allows the app to access data in the event store; otherwise, false.\n\nerror\n\nThe error that occurred, if any; otherwise, nil.\n\nSee Also\nRequesting access to events and reminders\nfunc requestWriteOnlyAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts the person using your app to grant or deny write access to event data.\nfunc requestFullAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to event data.\nfunc requestFullAccessToReminders(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to reminders.\nclass func authorizationStatus(for: EKEntityType) -> EKAuthorizationStatus\nDetermines the authorization status for the given entity type.\nenum EKAuthorizationStatus\nThe current authorization status for a specific entity type.\nproperty list key NSCalendarsFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their calendar data.\nName: Privacy - Calendars Full Access Usage Description\nproperty list key NSCalendarsWriteOnlyAccessUsageDescription\nA message that tells people why the app is requesting access to create calendar events.\nName: Privacy - Calendars Write Only Usage Description\nproperty list key NSRemindersFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their reminders data.\nName: Privacy - Reminders Full Access Usage Description"
  },
  {
    "title": "requestFullAccessToReminders(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/4162273-requestfullaccesstoreminders",
    "html": "Parameters\ncompletion\n\nThe block to call when the request completes.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc requestFullAccessToReminders() async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nRequesting access to an event store asynchronously prompts people for permission to use their data. The operating system only prompts them the first time your app requests access to reminders; any subsequent instantiations of EKEventStore uses existing permissions. When they grant or deny access, EventKit calls the completion handler on an arbitrary queue.\n\nYour app isn’t blocked while the person decides to grant or deny permission. Because they may deny permission, your app should handle cases where it doesn’t receive access to the event store.\n\nImportant\n\nIf your app has never requested access, you must request access to reminders before attempting to fetch or create them. If you request reminders before prompting the person for access with this method, you’ll need to reset the event store with the reset() method to receive data after they grant access.\n\nSee Also\nRequesting access to events and reminders\nfunc requestWriteOnlyAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts the person using your app to grant or deny write access to event data.\nfunc requestFullAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to event data.\nclass func authorizationStatus(for: EKEntityType) -> EKAuthorizationStatus\nDetermines the authorization status for the given entity type.\nenum EKAuthorizationStatus\nThe current authorization status for a specific entity type.\ntypealias EKEventStoreRequestAccessCompletionHandler\nThe signature for a closure that EventKit calls when requesting access to event and reminder data.\nproperty list key NSCalendarsFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their calendar data.\nName: Privacy - Calendars Full Access Usage Description\nproperty list key NSCalendarsWriteOnlyAccessUsageDescription\nA message that tells people why the app is requesting access to create calendar events.\nName: Privacy - Calendars Write Only Usage Description\nproperty list key NSRemindersFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their reminders data.\nName: Privacy - Reminders Full Access Usage Description"
  },
  {
    "title": "requestFullAccessToEvents(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/4162272-requestfullaccesstoevents",
    "html": "Parameters\ncompletion\n\nThe block to call when the request completes.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc requestFullAccessToEvents() async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nRequesting access to an event store asynchronously prompts people for permission to use their data. The operating system only prompts them the first time your app requests full access to events; any subsequent instantiations of EKEventStore uses existing permissions. When they grant or deny access, EventKit calls the completion handler on an arbitrary queue.\n\nNote\n\nYour iOS or Mac Catalyst app can present an EKEventEditViewController to let people create events without requesting access to the event store. If your app creates events without using EKEventEditViewController, you must request at least write-only access to event data.\n\nYour app isn’t blocked while the person decides to grant or deny permission. Because they may deny permission, your app should handle cases where it doesn’t receive access to the event store.\n\nImportant\n\nIf your app has never requested access, or only has write-only access to events, you must request full access to events before attempting to fetch them. If you request events before prompting people for access with this method, you’ll need to reset the event store with the reset() method to receive data after they grant access.\n\nSee Also\nRequesting access to events and reminders\nfunc requestWriteOnlyAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts the person using your app to grant or deny write access to event data.\nfunc requestFullAccessToReminders(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to reminders.\nclass func authorizationStatus(for: EKEntityType) -> EKAuthorizationStatus\nDetermines the authorization status for the given entity type.\nenum EKAuthorizationStatus\nThe current authorization status for a specific entity type.\ntypealias EKEventStoreRequestAccessCompletionHandler\nThe signature for a closure that EventKit calls when requesting access to event and reminder data.\nproperty list key NSCalendarsFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their calendar data.\nName: Privacy - Calendars Full Access Usage Description\nproperty list key NSCalendarsWriteOnlyAccessUsageDescription\nA message that tells people why the app is requesting access to create calendar events.\nName: Privacy - Calendars Write Only Usage Description\nproperty list key NSRemindersFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their reminders data.\nName: Privacy - Reminders Full Access Usage Description"
  },
  {
    "title": "requestWriteOnlyAccessToEvents(completion:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/4162274-requestwriteonlyaccesstoevents",
    "html": "Parameters\ncompletion\n\nThe block to call when the request completes.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc requestWriteOnlyAccessToEvents() async throws -> Bool\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nRequesting access to an event store asynchronously prompts people for permission to use their data. The operating system only prompts them the first time your app requests write-only event access; any subsequent instantiations of EKEventStore uses existing permissions. When they grant or deny access, EventKit calls the completion handler on an arbitrary queue.\n\nImportant\n\nIf your app has never requested access, you must request write-only or full access to events before attempting to create them. If you request events before prompting the user for access with this method, you’ll need to reset the event store with the reset() method to receive data after the user grants access.\n\nYour app isn’t blocked while the person decides to grant or deny permission. Because they may deny permission, your app needs to handle the case where it doesn’t receive access to the event store.\n\nIf the person grants permission, your app receives write-only access to the event store. Your app can create events, but it can’t access any of the existing calendars and events on the device, including events your app created. API calls to read event data from the event store don’t return any events.\n\nNote\n\nYour iOS or Mac Catalyst app can present an EKEventEditViewController to let your user create events without requesting access to the event store. If your app creates events without using EKEventEditViewController, you must request at least write-only access to event data.\n\nSee Also\nRequesting access to events and reminders\nfunc requestFullAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to event data.\nfunc requestFullAccessToReminders(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to reminders.\nclass func authorizationStatus(for: EKEntityType) -> EKAuthorizationStatus\nDetermines the authorization status for the given entity type.\nenum EKAuthorizationStatus\nThe current authorization status for a specific entity type.\ntypealias EKEventStoreRequestAccessCompletionHandler\nThe signature for a closure that EventKit calls when requesting access to event and reminder data.\nproperty list key NSCalendarsFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their calendar data.\nName: Privacy - Calendars Full Access Usage Description\nproperty list key NSCalendarsWriteOnlyAccessUsageDescription\nA message that tells people why the app is requesting access to create calendar events.\nName: Privacy - Calendars Write Only Usage Description\nproperty list key NSRemindersFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their reminders data.\nName: Privacy - Reminders Full Access Usage Description"
  },
  {
    "title": "calendars | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1623680-calendars",
    "html": "Deprecated\n\nUse calendars(for:) instead.\n\nSee Also\nAccessing calendars\nvar defaultCalendarForNewEvents: EKCalendar?\nThe calendar that events are added to by default, as specified by user settings.\nfunc defaultCalendarForNewReminders() -> EKCalendar?\nIdentifies the default calendar for adding reminders to, as specified by user settings.\nfunc calendars(for: EKEntityType) -> [EKCalendar]\nIdentifies the calendars that support a given entity type, such as reminders or events.\nfunc calendar(withIdentifier: String) -> EKCalendar?\nLocates a calendar with the specified identifier.\nfunc saveCalendar(EKCalendar, commit: Bool)\nSaves a calendar to the event store by either committing or batching the changes.\nfunc removeCalendar(EKCalendar, commit: Bool)\nRemoves a calendar from the event store by either committing or batching the changes."
  },
  {
    "title": "eventStoreIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507442-eventstoreidentifier",
    "html": "Discussion\n\nIf the store is damaged, it’s recreated and given a new identifier. If this value is different from a fetched value, you should take the appropriate action.\n\nSee Also\nCreating event stores\ninit()\nCreates a new event store.\ninit(sources: [EKSource])\nCreates an event store that contains data for the specified sources."
  },
  {
    "title": "dueDateComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekreminder/1507383-duedatecomponents",
    "html": "Discussion\n\nThe use of date components allows the due date and its time zone to be represented in a single property. A nil time zone represents a floating date. Setting a date component without an hour, minute and second component will set the reminder to be an all-day reminder. If this property is set, the calendar must be set to NSGregorianCalendar; otherwise an exception is raised.\n\nThis components’s timeZone property is independent of time zone properties on startDateComponents and its super EKCalendarItem object. By default, the due date is set to the system time zone.\n\nSpecial Considerations\n\nOn iOS, Event Kit requires that a start date is set if the due date is set, however this is not a requirement in macOS.\n\nSee Also\nAccessing Reminder Properties\nenum EKReminderPriority\nThe priority of the reminder.\nvar priority: Int\nThe reminder's priority.\nvar startDateComponents: DateComponents?\nThe start date of the task.\nvar isCompleted: Bool\nA Boolean value determining whether or not the reminder is marked completed.\nvar completionDate: Date?\nThe date on which the reminder was completed."
  },
  {
    "title": "startDateComponents | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekreminder/1507558-startdatecomponents",
    "html": "Discussion\n\nThe use of date components allows the start date and its time zone to be represented in a single property. A nil time zone represents a floating date. Setting a date component without an hour, minute and second component will set the reminder to be an all-day reminder. If this property is set, the calendar must be set to NSGregorianCalendar; otherwise an exception is raised.\n\nThe start date components’s timeZone property corresponds to the timeZone property on EKCalendarItem. A change in one value will cause a change in the other. Setting the time zone directly on the components does not guarantee that your changes will be saved; instead, pull this property from the reminder, set the time zone on it, and assign it back to the reminder:\n\nNSDateComponents *start = myEKReminder.startDateComponents;\nstart.timeZone = myNSTimeZone;\nmyEKReminder.startDateComponents = start;\n\nSee Also\nAccessing Reminder Properties\nenum EKReminderPriority\nThe priority of the reminder.\nvar priority: Int\nThe reminder's priority.\nvar dueDateComponents: DateComponents?\nThe date by which the reminder should be completed.\nvar isCompleted: Bool\nA Boolean value determining whether or not the reminder is marked completed.\nvar completionDate: Date?\nThe date on which the reminder was completed."
  },
  {
    "title": "remove(_:commit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507108-remove",
    "html": "Parameters\nreminder\n\nThe reminder to remove.\n\ncommit\n\nA Boolean value that indicates whether to remove the reminder immediately or to batch the removals; passing false won’t commit the removal from the event store until the commit() method is invoked.\n\nerror\n\nA pointer to an error object. If an error occurs, this pointer provides access to the error; otherwise, pass nil if you don’t need the error information.\n\nReturn Value\n\ntrue if the event store successfully removes the reminder; otherwise, false. This method also returns false if reminder isn’t in the event store.\n\nDiscussion\n\nThis method raises an exception if reminder belongs to another event store.\n\nHandling Errors in Swift\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes.\nRelated Documentation\nfunc commit()\nCommits all unsaved changes to the event store."
  },
  {
    "title": "addRecurrenceRule(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507256-addrecurrencerule",
    "html": "Parameters\nrule\n\nThe rule to be added to recurrenceRules.\n\nDiscussion\n\nThe implementation only supports a single recurrence rule. Adding a recurrence rule replaces the single recurrence rule.\n\nSee Also\nSetting Recurrence Rules\nvar hasRecurrenceRules: Bool\nA Boolean value that indicates whether the calendar item has recurrence rules.\nfunc removeRecurrenceRule(EKRecurrenceRule)\nRemoves a recurrence rule from the recurrence rule array.\nvar recurrenceRules: [EKRecurrenceRule]?\nThe recurrence rules for the calendar item."
  },
  {
    "title": "remove(_:span:commit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507469-remove",
    "html": "Parameters\nevent\n\nThe event to remove.\n\nspan\n\nThe span that indicates whether to remove a single event or all future instances of the event in the case of a recurring event.\n\ncommit\n\ntrue to remove the event immediately; otherwise, the change is batched until the commit() method is invoked.\n\nerror\n\nA pointer to an error object. If an error occurs, this pointer provides access to the error; otherwise, pass nil if you don’t need the error information.\n\nReturn Value\n\ntrue if the event store successfully removes the event; otherwise, false. This method also returns false if event isn’t in the event store.\n\nDiscussion\n\nThis method raises an exception if it’s passed an event from another event store.\n\nHandling Errors in Swift\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes.\nRelated Documentation\nfunc commit()\nCommits all unsaved changes to the event store."
  },
  {
    "title": "addAlarm(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507397-addalarm",
    "html": "Parameters\nalarm\n\nThe alarm to be added.\n\nSee Also\nAdding and Removing Alarms\nvar hasAlarms: Bool\nA Boolean value that indicates whether the calendar item has alarms.\nfunc removeAlarm(EKAlarm)\nRemoves an alarm from the calendar item.\nvar alarms: [EKAlarm]?\nThe alarms associated with the calendar item, as an array of EKAlarm objects."
  },
  {
    "title": "save(_:span:commit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507295-save",
    "html": "Parameters\nevent\n\nThe event to save.\n\nspan\n\nThe span that indicates whether to remove a single event or all future instances of the event in the case of a recurring event.\n\ncommit\n\nTo save the event immediately, pass true; otherwise, the change is batched until the commit() method is invoked.\n\nerror\n\nA pointer to an error object. If an error occurs, this pointer provides access to the error; otherwise, pass nil if you don’t need the error information.\n\nReturn Value\n\ntrue if the event store saves the event successfully; otherwise, false. This method also returns false if event wasn’t modified.\n\nDiscussion\n\nThis method raises an exception if it’s passed an event from another event store.\n\nWhen saving an event, it’s updated in the Calendar database. Any fields you didn’t modify are updated to reflect the most recent value in the database. If the event has been deleted from the database, it’s recreated as a new event.\n\nHandling Errors in Swift\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes.\nRelated Documentation\nfunc commit()\nCommits all unsaved changes to the event store."
  },
  {
    "title": "alarms | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507211-alarms",
    "html": "Discussion\n\nThis property is nil if the calendar item has no alarms.\n\nSee Also\nAdding and Removing Alarms\nvar hasAlarms: Bool\nA Boolean value that indicates whether the calendar item has alarms.\nfunc addAlarm(EKAlarm)\nAdds an alarm to the receiver.\nfunc removeAlarm(EKAlarm)\nRemoves an alarm from the calendar item."
  },
  {
    "title": "init(eventStore:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekreminder/1507429-init",
    "html": "Parameters\neventStore\n\nThe event store.\n\nReturn Value\n\nThe created reminder.\n\nSee Also\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "calendar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507169-calendar",
    "html": "See Also\nAccessing Calendar Item Properties\nvar title: String!\nThe title for the calendar item.\nvar location: String?\nThe location associated with the calendar item.\nvar creationDate: Date?\nThe date that this calendar item was created.\nvar lastModifiedDate: Date?\nThe date that the calendar item was last modified.\nvar timeZone: TimeZone?\nThe time zone for the calendar item.\nvar url: URL?\nThe URL for the calendar item."
  },
  {
    "title": "commit() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507424-commit",
    "html": "Parameters\nerror\n\nA pointer to an NSError object. You don’t need to create an NSError object. The commit operation aborts after the first failure if you pass NULL.\n\nReturn Value\n\ntrue if the commit operation succeeds or if there are no changes to commit; otherwise, false.\n\nDiscussion\n\nThis method allows you to save batched changes to the event store. For example, if you pass false as the commit parameter to the saveCalendar(_:commit:), removeCalendar(_:commit:), save(_:span:commit:), or remove(_:span:commit:) methods, the changes aren’t saved until commit() is invoked. Likewise, if you pass true as the commit parameter to the above methods, you don’t need to call commit().\n\nHandling Errors in Swift\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nSaving and restoring state\nfunc reset()\nReverts the event store to its saved state.\nfunc refreshSourcesIfNecessary()\nPulls new data from remote sources, if necessary."
  },
  {
    "title": "conferenceDetails | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferencedescriptor/3793718-conferencedetails",
    "html": "See Also\nConfiguring Virtual Conferences\nvar title: String?\nThe user-visible name of the virtual conference.\nvar urlDescriptors: [EKVirtualConferenceURLDescriptor]\nAn array that contains objects with details about where to join the virtual conference.\nclass EKVirtualConferenceURLDescriptor\nDetails about how users join a virtual conference, including a title and URL."
  },
  {
    "title": "urlDescriptors | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferencedescriptor/3793717-urldescriptors",
    "html": "Discussion\n\nCalendar uses the first URL descriptor as the preferred way for users to join a virtual conference, and displays any additional links you provide in the virtual conference details.\n\nImportant\n\nEvents that use your virtual conference descriptors may sync to other devices where your app isn’t installed. To support links to your virtual conference regardless of whether your app is installed, adopt Universal Links in your app. This let you specify HTTP URLs that open your app, if it’s installed, or open a corresponding web page if it’s not. For more information about adopting Universal Links in your app, see Supporting universal links in your app.\n\nSee Also\nConfiguring Virtual Conferences\nvar title: String?\nThe user-visible name of the virtual conference.\nclass EKVirtualConferenceURLDescriptor\nDetails about how users join a virtual conference, including a title and URL.\nvar conferenceDetails: String?\nAdditional information about the conference that users may find helpful."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507487-title",
    "html": "See Also\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated"
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507372-startdate",
    "html": "Discussion\n\nFloating events such as all-day events are returned in the default time zone.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "init(eventStore:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507483-init",
    "html": "Parameters\neventStore\n\nThe event store to which the event belongs.\n\nReturn Value\n\nThe created event.\n\nSee Also\nRelated Documentation\nCalendar and Reminders Programming Guide"
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferencedescriptor/3793720-title",
    "html": "See Also\nConfiguring Virtual Conferences\nvar urlDescriptors: [EKVirtualConferenceURLDescriptor]\nAn array that contains objects with details about where to join the virtual conference.\nclass EKVirtualConferenceURLDescriptor\nDetails about how users join a virtual conference, including a title and URL.\nvar conferenceDetails: String?\nAdditional information about the conference that users may find helpful."
  },
  {
    "title": "init(title:urlDescriptors:conferenceDetails:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferencedescriptor/3793719-init",
    "html": "Parameters\ntitle\n\nThe user-visible name of the virtual conference.\n\nURLDescriptors\n\nAn array that contains objects with details about where to join the virtual conference. Calendar uses the first URL descriptor as the preferred way for users to join a virtual conference, and displays additional URLs as links in the virtual conference details.\n\nconferenceDetails\n\nAdditional information about the conference that users may find helpful.\n\nReturn Value\n\nAn object that describes a virtual conference."
  },
  {
    "title": "EKVirtualConferenceURLDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceurldescriptor",
    "html": "Overview\n\nTo let users join a virtual conference, you provide one or more URL descriptor objects in the EKVirtualConferenceDescriptor for the conference. Calendar uses the first URL descriptor as the preferred way for users to join a virtual conference and displays any additional links you provide in the virtual conference details.\n\nTopics\nCreating URL Descriptors\ninit(title: String?, url: URL)\nCreates a URL descriptor with the given title and URL.\nConfiguring URL Descriptors\nvar title: String?\nThe user-visible name of a room where virtual conferences take place, such as Personal Room or Team Room.\nvar url: URL\nThe URL that users open to join a virtual conference.\nRelationships\nInherits From\nNSObject\nSee Also\nConfiguring Virtual Conferences\nvar title: String?\nThe user-visible name of the virtual conference.\nvar urlDescriptors: [EKVirtualConferenceURLDescriptor]\nAn array that contains objects with details about where to join the virtual conference.\nvar conferenceDetails: String?\nAdditional information about the conference that users may find helpful."
  },
  {
    "title": "fetchAvailableRoomTypes(completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceprovider/3793731-fetchavailableroomtypes",
    "html": "Parameters\ncompletionHandler\n\nA completion handler that you call after you determine the available rooms. If you provide an array with one or more room type descriptors, pass nil for the error parameter. Conversely, if you provide an error object, pass nil for the array parameter.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc fetchAvailableRoomTypes() async throws -> [EKVirtualConferenceRoomTypeDescriptor]\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nYour virtual conference provider implements this method to provide the list of rooms where users schedule events using your service. Create an instance of EKVirtualConferenceRoomTypeDescriptor for each room that’s available for users to schedule events in.\n\noverride func fetchAvailableRoomTypes(completionHandler: @escaping ([EKVirtualConferenceRoomTypeDescriptor]?, Error?) -> Void) {\n    // Create two rooms, one for the user's personal room and a\n    // second room for team events.\n    let personalRoom = EKVirtualConferenceRoomTypeDescriptor(\n        title: \"Maria's Personal Room\",\n        identifier: \"personal-room\"\n    )\n    let teamRoom = EKVirtualConferenceRoomTypeDescriptor(\n        title: \"Team Room\",\n        identifier: \"team-room\"\n    )\n\n\n    // Call the completion handler with an array that contains\n    // both rooms.\n    let allRooms = [personalRoom, teamRoom]\n    completionHandler(allRooms, nil)\n}\n\n\nIf your virtual conference provider is unable to provide any room types, call the completion handler with nil for the array and an error that describes why rooms aren’t available.\n\nUsers choose one of the room type descriptors when adding an event to their calendar. To complete the process of adding the event, EventKit calls fetchVirtualConference(identifier:completionHandler:) and passes the room type descriptor that the user selects."
  },
  {
    "title": "fetchVirtualConference(identifier:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceprovider/3793732-fetchvirtualconference",
    "html": "Parameters\nidentifier\n\nThe identifier for the room that the user chose for the virtual conference.\n\ncompletionHandler\n\nA completion handler that you call after you determine the available rooms. If you provide a virtual conference descriptor, pass nil for the error parameter. Conversely, if you provide an error object, pass nil for the virtual conference descriptor.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\nfunc fetchVirtualConference(identifier: EKVirtualConferenceRoomTypeIdentifier) async throws -> EKVirtualConferenceDescriptor\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nTo add calendar events using your virtual conference services, EventKit calls this method to retrieve the details for a virtual conference, including how a user joins the virtual conference. The room type identifier is one that your provider identified in a previous call to fetchAvailableRoomTypes(completionHandler:).\n\noverride func fetchVirtualConference(identifier: EKVirtualConferenceRoomTypeIdentifier, completionHandler: @escaping (EKVirtualConferenceDescriptor?, Error?) -> Void) {\n    let title: String\n    let primaryURL: URL\n    let dialInURL: URL\n    let details: String\n    \n    // Configure the title, primary URL, an audio-only dial in phone\n    // number, and some additional details for the room that the user\n    // selected for the conference.\n    switch identifier {\n    case \"personal-room\":\n        title = \"Maria's Room\"\n        primaryURL = URL(string: \"https://www.example.com/mruiz2\")!\n        dialInURL = URL(string: \"tel:1-408-555-1111\")!\n        details = \"Please join the meeting in my personal room.\"\n    case \"team-room\":\n        title = \"Team Room\"\n        primaryURL = URL(string: \"https://www.example.com/teamevents\")!\n        dialInURL = URL(string: \"tel:1-408-555-9999\")!\n        details = \"Please join the meeting in our team room.\"\n    default:\n        // If the room identifier is unknown, call the completion handler\n        // with a nil array and a custom error that indicates the room is\n        // invalid.\n        completionHandler(nil, ProviderError.invalidRoom)\n        return\n    }\n    \n    // Create URL descriptors for the options to join the conference. In\n    // this case, the primary option is an HTTP URL Universal Link the\n    // works even if the app isn't installed. The extension also provides a\n    // secondary tel URL to let people dial into the conference.\n    let urlDescriptor = EKVirtualConferenceURLDescriptor(title: title, url: primaryURL)\n    let alternate = EKVirtualConferenceURLDescriptor(title: \"Audio Only\", url: dialInURL)\n    let urlDescriptors = [urlDescriptor, alternate]\n    \n    // Create a descriptor for the conference and call the completion\n    // handler.\n    let descriptor = EKVirtualConferenceDescriptor(\n        title: title,\n        urlDescriptors: urlDescriptors,\n        conferenceDetails: details\n    )\n    completionHandler(descriptor, nil)\n}\n\n\nIf your provider is unable to provide the virtual conference details, call the completion handler with nil for the first parameter and specify an error with a description of why the information isn’t available."
  },
  {
    "title": "EKAlarmType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarmtype",
    "html": "Topics\nConstants\ncase display\nThe alarm displays a message.\ncase audio\nThe alarm plays a sound.\ncase procedure\nThe alarm opens a URL.\ncase email\nThe alarm sends an email.\nRelationships\nConforms To\nSendable\nSee Also\nTriggering Alarm Actions\nvar type: EKAlarmType\nThe type of action to trigger when the alarm fires.\nvar emailAddress: String?\nThe recipient of an email to send when the alarm triggers.\nvar soundName: String?\nThe name of the sound to play when the alarm triggers."
  },
  {
    "title": "init(relativeOffset:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507338-init",
    "html": "Parameters\noffset\n\nThe offset from the start of an event, at which the alarm fires.\n\nReturn Value\n\nThe created alarm.\n\nDiscussion\n\nNegative offset values fire before the start of the event, while positive values fire after the start.\n\nSee Also\nCreating an Alarm\ninit(absoluteDate: Date)\nCreates and returns an alarm with an absolute date."
  },
  {
    "title": "structuredLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507331-structuredlocation",
    "html": "Discussion\n\nThis property is used in conjunction with proximity to perform geofence-based triggering of reminders.\n\nSee Also\nSetting GeoFence-based Alarms\nenum EKAlarmProximity\nA value indicating whether an alarm is triggered by entering or exiting a region.\nvar proximity: EKAlarmProximity\nA value indicating how a location-based alarm is triggered."
  },
  {
    "title": "EKAlarmProximity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarmproximity",
    "html": "Topics\nConstants\ncase none\nThe alarm has no proximity trigger.\ncase enter\nThe alarm is set to fire when entering a region.\ncase leave\nThe alarm is set to fire when leaving a region.\nRelationships\nConforms To\nSendable\nSee Also\nSetting GeoFence-based Alarms\nvar proximity: EKAlarmProximity\nA value indicating how a location-based alarm is triggered.\nvar structuredLocation: EKStructuredLocation?\nThe location to trigger an alarm."
  },
  {
    "title": "absoluteDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507486-absolutedate",
    "html": "Discussion\n\nIf you set this property for a relative offset alarm, it loses the relative offset and becomes an absolute alarm.\n\nSee Also\nAccessing Alarm Dates\nvar relativeOffset: TimeInterval\nThe offset from the start of an event, at which the alarm fires."
  },
  {
    "title": "relativeOffset | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507491-relativeoffset",
    "html": "Discussion\n\nIf you set this value for an absolute alarm, it loses its absolute date and becomes a relative offset alarm.\n\nSee Also\nAccessing Alarm Dates\nvar absoluteDate: Date?\nThe absolute date for the alarm."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507242-type",
    "html": "Discussion\n\nTo set the type of alarm, define one of emailAddress, soundName, or url.\n\nSee Also\nTriggering Alarm Actions\nenum EKAlarmType\nA value that specifies what type of action occurs when the alarm triggers.\nvar emailAddress: String?\nThe recipient of an email to send when the alarm triggers.\nvar soundName: String?\nThe name of the sound to play when the alarm triggers."
  },
  {
    "title": "init(eventStore:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1620447-init",
    "html": "Parameters\neventStore\n\nThe event store to which the event belongs.\n\nReturn Value\n\nThe created calendar.\n\nSee Also\nCreating Calendars\ninit(for: EKEntityType, eventStore: EKEventStore)\nCreates a new calendar that can contain the given entity type."
  },
  {
    "title": "soundName | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm/1507227-soundname",
    "html": "Discussion\n\nThe value of this property is the name of a system sound that can be used with the init(named:) class method to create an NSSound object. Assigning this property a value will set the emailAddress and url properties to nil.\n\nSee Also\nTriggering Alarm Actions\nenum EKAlarmType\nA value that specifies what type of action occurs when the alarm triggers.\nvar type: EKAlarmType\nThe type of action to trigger when the alarm fires.\nvar emailAddress: String?\nThe recipient of an email to send when the alarm triggers."
  },
  {
    "title": "init(for:eventStore:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar/1507516-init",
    "html": "Parameters\nentityType\n\nThe entity type that this calendar may support.\n\neventStore\n\nThe event store in which to create this calendar.\n\nReturn Value\n\nThe created calendar.\n\nDiscussion\n\nYou can only create calendars that accept either reminders or events. Some servers might allow mixing the two, although it is not common.\n\nSee Also\nCreating Calendars\ninit(eventStore: EKEventStore)\nCreates and returns a calendar belonging to a specified event store.\nDeprecated"
  },
  {
    "title": "EKParticipant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekparticipant",
    "html": "Overview\n\nDo not create EKParticipant objects directly. Instead, use the property attendees on EKCalendarItem to return an array of EKParticipant objects.\n\nEventKit cannot add participants to an event nor change participant information. Use the properties in this class to get information about a participant.\n\nA participant can be a person, group, room, or other resource.\n\nTopics\nDefining Participants\nenum EKParticipantRole\nThe participant’s role for an event.\nenum EKParticipantType\nThe type of participant.\nenum EKParticipantStatus\nThe participant’s attendance status for an event.\nenum EKParticipantScheduleStatus\nThe participant's scheduled status.\nAccessing Participant Properties\nvar isCurrentUser: Bool\nA Boolean value indicating whether this participant represents the owner of this account.\nvar name: String?\nThe participant’s name.\nvar participantRole: EKParticipantRole\nThe participant’s role in the event.\nvar participantStatus: EKParticipantStatus\nThe participant’s attendance status.\nvar participantType: EKParticipantType\nThe participant’s type.\nvar url: URL\nThe URL representing this participant.\nvar contactPredicate: NSPredicate\nA predicate to use with the Contacts framework to retrieve the corresponding contact instance.\nFinding Participant Address Book Records\nfunc abRecord(with: ABAddressBook) -> ABRecord?\nReturns the address book record that represents the participant.\nfunc abPerson(in: ABAddressBook) -> ABPerson?\nReturns the address book record that represents the participant.\nDeprecated\nRelationships\nInherits From\nEKObject\nConforms To\nNSCopying\nSee Also\nCalendars\nclass EKCalendar\nA class that represents a calendar in EventKit."
  },
  {
    "title": "isCompleted | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekreminder/1507502-iscompleted",
    "html": "Discussion\n\nSetting this property to true will set completionDate to the current date; setting this property to false will set completionDate to nil.\n\nSpecial Considerations\n\nIf the reminder was completed using a different client, you may encounter the case where this property is true, but completionDate is nil.\n\nSee Also\nAccessing Reminder Properties\nenum EKReminderPriority\nThe priority of the reminder.\nvar priority: Int\nThe reminder's priority.\nvar startDateComponents: DateComponents?\nThe start date of the task.\nvar dueDateComponents: DateComponents?\nThe date by which the reminder should be completed.\nvar completionDate: Date?\nThe date on which the reminder was completed."
  },
  {
    "title": "birthdayContactIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507349-birthdaycontactidentifier",
    "html": "Discussion\n\nThis property only applies to events in the built-in Birthdays calendar. It specifies the contact identifier (for use with the Contacts framework) of the person for whom the system created this event. For any other type of event, this property returns nil.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "geoLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekstructuredlocation/1507110-geolocation",
    "html": "See Also\nAccessing Structured Location Properties\nvar title: String?\nThe title of the location.\nvar radius: Double\nA minimum distance from the core location that would trigger the alarm or reminder."
  },
  {
    "title": "eventIdentifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507437-eventidentifier",
    "html": "Discussion\n\nYou can use this identifier to look up an event with the EKEventStore method event(withIdentifier:).\n\nIf the calendar of an event changes, its identifier most likely changes as well.\n\nSee Also\nAccessing Event Properties\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated"
  },
  {
    "title": "availability | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507313-availability",
    "html": "Discussion\n\nThis setting is used by CalDAV and Exchange servers to indicate how the event should be treated for scheduling purposes.\n\nIf the event’s calendar does not support availability settings, this property’s value is EKEventAvailability.notSupported.\n\nSee Also\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nRelated Documentation\nenum EKEventAvailability\nThe event’s availability setting for scheduling purposes."
  },
  {
    "title": "EKEventStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstatus",
    "html": "Topics\nConstants\ncase none\nThe event has no status.\ncase confirmed\nThe event is confirmed.\ncase tentative\nThe event is tentative.\ncase canceled\nThe event is canceled.\nRelationships\nConforms To\nSendable\nSee Also\nScheduling Events\nenum EKEventAvailability\nThe event’s availability setting for scheduling purposes."
  },
  {
    "title": "EKEventAvailability | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventavailability",
    "html": "Topics\nConstants\ncase notSupported\nAvailability settings are not supported by the event’s calendar.\ncase busy\nThe event has a busy availability setting.\ncase free\nThe event has a free availability setting.\ncase tentative\nThe event has a tentative availability setting.\ncase unavailable\nThe event has an unavailable availability setting.\nRelationships\nConforms To\nSendable\nSee Also\nScheduling Events\nenum EKEventStatus\nThe event’s status."
  },
  {
    "title": "compareStartDate(with:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent/1507335-comparestartdate",
    "html": "Parameters\nother\n\nThe event to compare against.\n\nReturn Value\n\nComparisonResult.orderedAscending if the start date of the receiver precedes the start date of other.\n\nComparisonResult.orderedSame if the start dates of the two events are identical.\n\nComparisonResult.orderedDescending if the start date of the receiver comes after the start date of other.\n\nDiscussion\n\nYou can pass the selector for this method to the NSArray method sortedArray(using:) to create an array of events sorted by start date."
  },
  {
    "title": "Accessing Calendar using EventKit and EventKitUI | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/accessing_calendar_using_eventkit_and_eventkitui",
    "html": "Overview\n\nPrior to iOS 17, your app needs to include the NSCalendarsUsageDescription key in its Info.plist and request authorization from the user before it can access the user’s calendar data. NSCalendarsUsageDescription indicates how your app intends to use calendar data. If the user approves the request, the app gets full access to all events on all the user’s calendars, including the ones the app didn’t create. If the user denies the request, the app gets no access to the user’s data.\n\nStarting in iOS 17, your app should only request the specific level of access it requires to complete its calendar data tasks. The iOS 17 SDK introduces new calendar usage description strings, the ability to add events to Calendar without prompting the user for access, and a new write-only access. See Accessing the event store for details.\n\nThis sample consists of three targets that illustrate how to implement Calendar access level using EventKit and EventKitUI. The DropInLessons target builds an app that saves events to Calendar without prompting the user for authorization. The RepeatingLessons target, which implements the write-only access feature, builds an app that saves events directly to Calendar with user permission. The MonthlyEvents target, which illustrates the full-access feature, builds an app that fetches and displays all events occuring within a month in all the user’s calendars.\n\nNote\n\nThis sample code project is associated with WWDC23 session 10052: Discover Calendar and EventKit.\n\nConfigure the sample code project\n\nBefore you run the sample code project in Xcode:\n\nOpen the sample with Xcode 15 or later.\n\nSelect the top-level Calendar Access project.\n\nFor the three targets, choose your team from the Team menu in the Signing & Capabilities pane to let Xcode automatically manage your provisioning profile.\n\nSelect the target you wish to build, then build and run it in the Simulator, in Mac Catalyst, or on a device.\n\nSave events without prompting the user for access\n\nIn iOS 17, your app can add events to Calendar without prompting the user for access using EKEventEditViewController. If the purpose of your app is to create, configure, and present calendar events in an editor UI, consider saving events to Calendar without prompting the user for authorization in your app following these steps:\n\nBuild your app with Xcode 15 and link against the iOS 17 SDK.\n\nIf your app includes NSCalendarsUsageDescription, remove this key.\n\nIf your app requests permission using requestAccess(to:completion:) or requestAccess(to:), remove these instance methods from your source code.\n\nThe DropInLessons app writes data to Calendar without performing any other operations on the user’s events. Because its workflow doesn’t interact with the user’s calendar data, the app isn’t required to include any calendar usage strings or prompt the user for access. EKEventStore allows apps to request permission from the user, and read and write data to Calendar. DropInLessons creates an instance of the event store, store.\n\n@State private var store = EKEventStore()\n\n\nWhen the user schedules a lesson, DropInLessons creates a selectedEvent, then presents an event edit view controller.\n\n    .sheet(isPresented: $showEventEditViewController,\n           onDismiss: didDismissEventEditController, content: {\n       EventEditViewController(event: $selectedEvent, eventStore: store)\n})\n\n\nThe app creates selectedEvent in the event store, adds it to the default calendar for the store, then configures selectedEvent with the selected lesson’s details. The view controller takes selectedEvent and store as parameters.\n\nlet controller = EKEventEditViewController()\ncontroller.eventStore = eventStore\ncontroller.event = event\ncontroller.editViewDelegate = context.coordinator\n\n\nDropInLessons relinquishes control once the editor is presented. Because the event edit view controller renders its content out of process, it has full access to all the user’s calendars on the device, regardless of the access granted to the app. This allows the user to get a full-featured editing experience, such as choosing another calendar to save the selected lesson or changing presented information in the editor. However, the app isn’t aware of any of these changes. When the user taps the Add button in the UI, the system saves the lesson to the user’s selected or default calendar, then dismisses the editor.\n\nfunc eventEditViewController(_ controller: EKEventEditViewController, didCompleteWith action: EKEventEditViewAction) {\n    parent.presentationMode.wrappedValue.dismiss()\n}\n\n\nBecause the calendar edits happen out of process, inspecting the properties of the dismissed controller, such as event, to determine what the user added to Calendar doesn’t return any useful information. The app isn’t aware of the changes, which naturally means it can’t see them.\n\nRequest write-only access\n\nIn iOS 17, an app with write-only access can create and save events to Calendar, display events using EKEventEditViewController, and allow the user to select another calendar using EKCalendarChooser. If your app needs to write data directly, consider implementing write-only access in your app following these steps:\n\nBuild your app with Xcode 15 and link against the iOS 17 SDK.\n\nAdd the NSCalendarsWriteOnlyAccessUsageDescription key to the Info.plist file of the target building your app.\n\nTo request write-only access to events, use requestWriteOnlyAccessToEvents(completion:) or requestWriteOnlyAccessToEvents().\n\nNote\n\nEKEventEditViewController and EKCalendarChooser require write-only or full access. EKEventEditViewController doesn’t require any user permission.\n\nRepeatingLessons displays a list of recurring lessons and a “Select calendar” button in the toolbar. The app offers the lessons on specific dates and times and doesn’t fetch any events from the user’s calendars. RepeatingLessons can’t let the user or the system make any changes to these events. Because of these reasons, the app requires write-only access so it can control the date and time of every event added to Calendar. When the user selects a lesson, then taps the booking button, the app first checks whether it has authorization to access the user’s calendar data. If the authorization status is EKAuthorizationStatus.notDetermined, the app uses an instance of EKEventStore, eventStore, to prompt the user for write-only access.\n\nreturn try await eventStore.requestWriteOnlyAccessToEvents()\n\n\nRepeatingLessons includes NSCalendarsWriteOnlyAccessUsageDescription in its Info.plist file and uses its value when showing an alert. The alert prompts the user for write-only acess to save repeating lessons to a calendar that the user chooses. If the user grants the request, the app receives a .writeOnly authorization status, creates a recurring event using the selected lesson’s details, then saves it to Calendar without the user making any changes to this event.\n\ntry self.eventStore.save(newEvent, span: .futureEvents)\n\n\nThe “Select calendar” button in the toolbar allows the user to choose another calendar to save the recurring events using EKCalendarChooser. The app turns off the button by default. The app turns it on when the user grants write-only or full access to the app. When the user taps the button, RepeatingLessons presents a calendar chooser with an instance of EKCalendar, calendar, which keeps track of calendars the user chooses in the view controller.\n\n.sheet(isPresented: $showCalendarChooser) {\n    CalendarChooser(calendar: $calendar)\n}\n\n\nThe EKCalendarChooserDisplayStyle property of EKCalendarChooser specifies whether to display writable calendars only or all calendars. In write-only access apps, the calendar chooser ignores the value of the displayStyle setting and this setting always behaves as if it’s set to EKCalendarChooserDisplayStyle.writableCalendarsOnly. As a result, the app only allows the user to select a single writable calendar from the list presented in the calendar chooser.\n\n// Initializes a calendar chooser that allows the user to select a single calendar from a list of writable calendars only.\nlet calendarChooser = EKCalendarChooser(selectionStyle: .single,\n                                        displayStyle: .writableCalendarsOnly,\n                                        entityType: .event,\n                                        eventStore: storeManager.store)\n\n\nThe app sets the selectedCalendars property of EKCalendarChooser to calendar, which is empty when the user hasn’t selected a calendar.\n\n/*\n    Set up the selected calendars property. If the user previously selected a calendar from the view controller, update the property with it.\n    Otherwise, update selected calendars with an empty set.\n*/\nif let calendar = calendar {\n    let selectedCalendar: Set<EKCalendar> = [calendar]\n    calendarChooser.selectedCalendars = selectedCalendar\n} else {\n    calendarChooser.selectedCalendars = []\n}\n\n\nRepeatingLessons configures the chooser to show the Done and Cancel buttons.\n\ncalendarChooser.delegate = context.coordinator\n\n\n// Configure the chooser to display Done and Cancel buttons.\ncalendarChooser.showsDoneButton = true\ncalendarChooser.showsCancelButton = true\nreturn UINavigationController(rootViewController: calendarChooser)\n\n\nIf the user chooses a calendar from the view controller, RepeatingLessons adds recurring events to that calendar. If the user doesn’t make any selection, the app saves the events to the user’s default calendar.\n\nRequest full access\n\nIn iOS 17, an app with full access can create, edit, save, delete, and fetch all events on all the user’s calendars. Additionally, the app can display events using EKEventViewController and allow the user to select another calendar using EKCalendarChooser. Implement full access if your app needs to read and write data to Calendar. If your app only needs to write data directly to Calendar, implement write-only access instead. If your app only uses EventKit APIs to create and set up events, consider saving events to Calendar without prompting the user for authorization.\n\nTo implement full access in your app, follow these steps:\n\nBuild your app with Xcode 15 and link against the iOS 17 SDK.\n\nAdd the NSCalendarsFullAccessUsageDescription key to the Info.plist file of the target building your app.\n\nTo request full access to events, use requestFullAccessToEvents(completion:) or requestFullAccessToEvents().\n\nUpon its first launch, the MonthlyEvents app registers for EKEventStoreChanged notifications to listen for any changes to the event store.\n\nlet center = NotificationCenter.default\nlet notifications = center.notifications(named: .EKEventStoreChanged).map({ (notification: Notification) in notification.name })\n\n\nfor await _ in notifications {\n    guard await dataStore.isFullAccessAuthorized else { return }\n    await self.fetchLatestEvents()\n}\n\n\nThen, the app checks whether it’s authorized to access the user’s calendar data.\n\nlet status = EKEventStore.authorizationStatus(for: .event)\n\n\nIf the authorization status is EKAuthorizationStatus.notDetermined, the app uses an instance of EKEventStore, eventStore, to prompt the user for full access.\n\nreturn try await eventStore.requestFullAccessToEvents()\n\n\nMonthlyEvents includes NSCalendarsFullAccessUsageDescription in its Info.plist file and uses its value when showing an alert. The alert prompts the user for full access to fetch events in all the user’s calendars and delete the ones the user selects in the app. If the user grants the request, the app receives a .fullAccess authorization status.\n\nEKEventStore.authorizationStatus(for: .event) == .fullAccess\n\n\nThen, the app fetches and displays all events occuring within a month in all the user’s calendars sorted by start date in ascending order.\n\nlet start = Date.now\nlet end = start.oneMonthOut\nlet predicate = eventStore.predicateForEvents(withStart: start, end: end, calendars: nil)\nreturn eventStore.events(matching: predicate).sortedEventByAscendingDate()\n\n\nIf the user denies the request, the app does nothing. In subsequent launches, the app displays a message prompting the user to grant the app full access in Settings on their device.\n\nBecause the user authorized the app for full access, the user can additionally select and delete one or more events in MonthlyEvents. The app iterates through an array of events that the user chose to delete. It calls and sets the commit parameter of the remove(_:span:commit:) function to false to batch the deletion of each event in the array.\n\ntry self.eventStore.remove(event, span: .thisEvent, commit: false)\n\n\nThen, the app commits the changes once it’s done iterating through the array.\n\ntry eventStore.commit()\n\n\nWhen you assign true to commit to immediately save or remove the event in your app, the event store automatically rolls back any changes if the commit operation fails. However, if you set commit to false and your app successfully removes some events and fails removing others, this can result in a later commit failing. Every subsequent commit fails until you roll back the changes. Call reset() to manually roll back the changes.\n\neventStore.reset()\n\nRun apps on operating system earlier than iOS 17\n\nIf you build your app with Xcode 15, link it against the iOS 17 SDK, and need to run it on systems earlier than iOS 17:\n\nAdd NSCalendarsUsageDescription to the Info.plist file of the target building your app. If your app that’s linked on iOS 10 through iOS 16 doesn’t include NSCalendarsUsageDescription, your app crashes.\n\nTo request access to events, use requestAccess(to:completion:) or requestAccess(to: .event).\n\nTo determine whether your app is authorized to access the user’s calendar data, confirm that authorizationStatus(for:) is set to EKAuthorizationStatus.\n\nNote\n\nThe new request methods are unavailable on systems earlier than iOS 17, which may cause your app to crash when running on these versions. Check that these methods are available in the iOS version that you wish to run your app on before calling them in your app. See Declaration Attributes for details.\n\nThe DropInLessons, MonthlyEvents, and RepeatingLessons targets in the sample project have a deployment target of iOS 16.4, meaning their apps can run on devices running iOS 16.4 and later. These apps include NSCalendarsUsageDescription in their Info.plist and use requestAccess(to: .event) when requesting permission from the user.\n\n// Fall back on earlier versions.\nreturn try await eventStore.requestAccess(to: .event)\n\n\nImportant\n\nIn iOS 17, calling requestAccess(to: .event) or requestAccess(to:completion:) doesn’t prompt the user for access and throws an error.\n\nMonthlyEvents and RepeatingLessons confirm that they have an EKAuthorizationStatus authorization status.\n\n// Fall back on earlier versions.\nEKEventStore.authorizationStatus(for: .event) == .authorized\n\nSee Also\nEssentials\nAccessing the event store\nRequest access to a person’s calendar data through the event store.\nclass EKEventStore\nAn object that accesses a person’s calendar events and reminders and supports the scheduling of new events."
  },
  {
    "title": "Retrieving events and reminders | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/retrieving_events_and_reminders",
    "html": "Overview\n\nTo search for and return events and reminders from the Calendar database, you must connect to the event store, as discussed in \"Accessing the event store.\"\n\nThere are two ways to retrieve events and reminders. You can fetch via:\n\nPredicate, or search query, and return zero or more events that match a given query.\n\nUnique identifier and return a single event that corresponds to the given identifier.\n\nNote\n\nRetrieving events from the Calendar database does not necessarily return events in chronological order. To sort an array of EKEvent objects by date, call sortedArray(using:) on the array, providing the selector for the compareStartDate(with:) method.\n\nSearch with Predicates\n\nPredicates return events and reminders that match a search query.\n\nFetch Events\n\nIt’s common to fetch events and reminders that fall within a date range. The EKEventStore method events(matching:): fetches all events that fall within the date range specified in the predicate you provide. The following listing demonstrates how to fetch all events that occur between one day before and one year after the current date.\n\nNote\n\nAlthough the events(matching:) method accepts a parameter of type NSPredicate, you must supply a predicate created with the EKEventStore method predicateForEvents(withStart:end:calendars:).\n\nListing 1 Fetching events with a predicate\n// Get the appropriate calendar.\nvar calendar = Calendar.current\n\n\n// Create the start date components\nvar oneDayAgoComponents = DateComponents()\noneDayAgoComponents.day = -1\nvar oneDayAgo = calendar.date(byAdding: oneDayAgoComponents, to: Date(), wrappingComponents: false)\n\n\n// Create the end date components.\nvar oneYearFromNowComponents = DateComponents()\noneYearFromNowComponents.year = 1\nvar oneYearFromNow = calendar.date(byAdding: oneYearFromNowComponents, to: Date(), wrappingComponents: false)\n\n\n// Create the predicate from the event store's instance method.\nvar predicate: NSPredicate? = nil\nif let anAgo = oneDayAgo, let aNow = oneYearFromNow {\n    predicate = store.predicateForEvents(withStart: anAgo, end: aNow, calendars: nil)\n}\n\n\n// Fetch all events that match the predicate.\nvar events: [EKEvent]? = nil\nif let aPredicate = predicate {\n    events = store.events(matching: aPredicate) \n}\n\n\nYou can specify a subset of calendars to search by passing an array of EKCalendar objects as the calendars parameter of the predicateForEvents(withStart:end:calendars:) method. You can get the user’s calendars from the event store’s calendars(for:) method. Passing nil tells the method to fetch from all of the user’s calendars.\n\nBecause the events(matching:) method is synchronous, you may not want to run it on your app’s main thread. For asynchronous behavior, run the method on another thread with the dispatch_async(_:_:) function or with an Operation object.\n\nFetch Reminders\n\nYou can call fetchReminders(matching:completion:) to access multiple reminders that match a predicate. Pass a predicate returned by one of the following methods:\n\npredicateForIncompleteReminders(withDueDateStarting:ending:calendars:) finds incomplete reminders within an optional time period.\n\npredicateForCompletedReminders(withCompletionDateStarting:ending:calendars:) finds completed reminders within an optional time period.\n\npredicateForReminders(in:) finds all reminders.\n\nYou can iterate across matched reminders by passing a block to the completion argument, as shown in Listing 2.\n\nListing 2 Fetching reminders with a predicate\nvar predicate: NSPredicate? = store.predicateForReminders(in: nil)\nif let aPredicate = predicate {\n    store.fetchReminders(matching: aPredicate, completion: {(_ reminders: [Any]?) -> Void in\n        for reminder: EKReminder? in reminders as? [EKReminder?] ?? [EKReminder?]() {\n            // Do something for each reminder.\n        }\n    })\n}\n\n\nUnlike fetching events via predicate, you can fetch reminders via predicate asynchronously without dispatching to another thread.\n\nIf you want to abort your fetch request by predicate, call cancelFetchRequest(_:) while passing the identifier as returned by fetchReminders(matching:completion:).\n\nSearch with Unique Identifiers\n\nIf you know the event’s unique identifier because you fetched it previously with a predicate, you can use the EKEventStore method event(withIdentifier:) to fetch the event. If it is a recurring event, this method will return the first occurrence of the event. You can get an event’s unique identifier with the eventIdentifier property.\n\nSimilarly, if you know a specific reminder’s unique identifier from previously fetching it with a predicate, you can call the calendarItem(withIdentifier:) instance method. calendarItem(withIdentifier:) can fetch any calendar item (reminders and events), whereas event(withIdentifier:) fetches only events. \n\nSee Also\nEvents and reminders\nCreating events and reminders\nCreate and modify events and reminders in a person’s database.\nUpdating with notifications\nRegister for notifications about changes and keep your app up to date.\nManaging Location-Based Reminders\nAdd, fetch, complete, remove, and sort location-based reminders in your app.\nclass EKEvent\nA class that represents an event in a calendar.\nclass EKReminder\nA class that represents a reminder in a calendar."
  },
  {
    "title": "Updating with notifications | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/updating_with_notifications",
    "html": "Overview\n\nIt’s possible for another process or app to modify the Calendar database while your app is running. If your app fetches calendar events or reminders, register to be notified about changes to the Calendar database to ensure the calendar and reminder information you display to the user is current.\n\nRegister for Notifications\n\nAn EKEventStore object posts an EKEventStoreChanged notification whenever it detects changes to the Calendar database. Register for this notification if your app handles event or reminder data.\n\nListing 1 registers for the EKEventStoreChanged notification.\n\nNotificationCenter.default.addObserver(self, selector: Selector(\"storeChanged:\"), name: .EKEventStoreChanged, object: eventStore)\n\n\nRespond to Notifications\n\nWhen you receive an EKEventStoreChanged notification, it’s possible the objects you’ve fetched—such as an EKEvent, EKReminder, or EKCalendar—have changed. The effect of the changes depends on whether an event was added, modified, or deleted:\n\nIf an event was added, it does not affect any of your previously fetched events or reminders, but the added event may fall within the date range of events you are displaying to the user.\n\nIf an event was modified or deleted, properties of EKEvent and EKReminder objects representing that event may become out of date.\n\nBecause your local data is often invalidated or incomplete when a change occurs in the Calendar database, you should refetch your current date range of events whenever you receive an EKEventStoreChanged notification. If you are modifying an event and do not want to refetch it unless it is absolutely necessary, call the refreshSourcesIfNecessary() method on the event. If the method returns YES, you can continue to use the event; otherwise, you must refetch it. \n\nNote\n\nEvents being modified in an event view controller with EventKitUI for iOS are updated automatically when a change occurs in the Calendar database. See EventKit UI for more.\n\nTopics\nReceiving a Notification\nstatic let EKEventStoreChanged: NSNotification.Name\nA notification posted when changes are made to the Calendar database.\nSee Also\nEvents and reminders\nCreating events and reminders\nCreate and modify events and reminders in a person’s database.\nRetrieving events and reminders\nFetch events and reminders from the Calendar database.\nManaging Location-Based Reminders\nAdd, fetch, complete, remove, and sort location-based reminders in your app.\nclass EKEvent\nA class that represents an event in a calendar.\nclass EKReminder\nA class that represents a reminder in a calendar."
  },
  {
    "title": "events(matching:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507183-events",
    "html": "Parameters\npredicate\n\nA search predicate created with predicateForEvents(withStart:end:calendars:).\n\nReturn Value\n\nAn array of events that match predicate.\n\nDiscussion\n\nOnly committed events are included in the results. To include events saved using save(_:span:commit:) with the commit parameter set to false, call commit() first.\n\nThis method is synchronous. For asynchronous behavior, run the method on another thread with dispatch_async(_:_:) or Operation.\n\nSee Also\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them."
  },
  {
    "title": "predicateForEvents(withStart:end:calendars:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507479-predicateforevents",
    "html": "Parameters\nstartDate\n\nThe start date of the range of events fetched.\n\nendDate\n\nThe end date of the range of events fetched.\n\ncalendars\n\nAn array of calendars to search, or nil to search all calendars.\n\nReturn Value\n\nA predicate to use when calling enumerateEvents(matching:using:) or events(matching:).\n\nDiscussion\n\nUse this method to create a predicate for use with events(matching:) or enumerateEvents(matching:using:). The events returned using this predicate are in the default time zone. For performance reasons, this method matches only those events within a four-year time span. If the date range between startDate and endDate is greater than four years, it’s shortened to the first four years.\n\nSee Also\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them."
  },
  {
    "title": "calendarItems(withExternalIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507281-calendaritems",
    "html": "Parameters\nexternalIdentifier\n\nThe calendar item’s external identifier.\n\nReturn Value\n\nAn array of calendar items with the specified identifier.\n\nDiscussion\n\nUse calendarItemExternalIdentifier to obtain the external identifier. There may be more than one matching calendar item due to reasons discussed in calendarItemExternalIdentifier.\n\nSee Also\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes."
  },
  {
    "title": "calendar(withIdentifier:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507484-calendar",
    "html": "Parameters\nidentifier\n\nThe calendar’s unique identifier.\n\nReturn Value\n\nA calendar with a calendarIdentifier that matches the specified identifier.\n\nSee Also\nAccessing calendars\nvar defaultCalendarForNewEvents: EKCalendar?\nThe calendar that events are added to by default, as specified by user settings.\nfunc defaultCalendarForNewReminders() -> EKCalendar?\nIdentifies the default calendar for adding reminders to, as specified by user settings.\nfunc calendars(for: EKEntityType) -> [EKCalendar]\nIdentifies the calendars that support a given entity type, such as reminders or events.\nfunc saveCalendar(EKCalendar, commit: Bool)\nSaves a calendar to the event store by either committing or batching the changes.\nfunc removeCalendar(EKCalendar, commit: Bool)\nRemoves a calendar from the event store by either committing or batching the changes.\nvar calendars: [EKCalendar]\nThe calendars associated with the event store.\nDeprecated"
  },
  {
    "title": "saveCalendar(_:commit:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507080-savecalendar",
    "html": "Parameters\ncalendar\n\nThe calendar to save.\n\ncommit\n\ntrue to save the calendar immediately; otherwise, the change is batched until the commit() method is invoked.\n\nerror\n\nThe error that occurred, if any; otherwise, nil.\n\nReturn Value\n\ntrue if successful; otherwise, false.\n\nDiscussion\n\nThis method raises an exception if calendar belongs to another event store.\n\nHandling Errors in Swift:\n\nIn Swift, this method returns Void and is marked with the throws keyword to indicate that it throws an error in cases of failure. Call this method in a try expression and handle any errors in the catch clauses of a do statement, as described in Error Handling in The Swift Programming Language and About Imported Cocoa Error Parameters.\n\nSee Also\nAccessing calendars\nvar defaultCalendarForNewEvents: EKCalendar?\nThe calendar that events are added to by default, as specified by user settings.\nfunc defaultCalendarForNewReminders() -> EKCalendar?\nIdentifies the default calendar for adding reminders to, as specified by user settings.\nfunc calendars(for: EKEntityType) -> [EKCalendar]\nIdentifies the calendars that support a given entity type, such as reminders or events.\nfunc calendar(withIdentifier: String) -> EKCalendar?\nLocates a calendar with the specified identifier.\nfunc removeCalendar(EKCalendar, commit: Bool)\nRemoves a calendar from the event store by either committing or batching the changes.\nvar calendars: [EKCalendar]\nThe calendars associated with the event store.\nDeprecated"
  },
  {
    "title": "calendars(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507128-calendars",
    "html": "Parameters\nentityType\n\nThe calendar’s entity type.\n\nReturn Value\n\nAn array of calendars that support the specified entity type.\n\nSee Also\nAccessing calendars\nvar defaultCalendarForNewEvents: EKCalendar?\nThe calendar that events are added to by default, as specified by user settings.\nfunc defaultCalendarForNewReminders() -> EKCalendar?\nIdentifies the default calendar for adding reminders to, as specified by user settings.\nfunc calendar(withIdentifier: String) -> EKCalendar?\nLocates a calendar with the specified identifier.\nfunc saveCalendar(EKCalendar, commit: Bool)\nSaves a calendar to the event store by either committing or batching the changes.\nfunc removeCalendar(EKCalendar, commit: Bool)\nRemoves a calendar from the event store by either committing or batching the changes.\nvar calendars: [EKCalendar]\nThe calendars associated with the event store.\nDeprecated"
  },
  {
    "title": "defaultCalendarForNewReminders() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507543-defaultcalendarfornewreminders",
    "html": "Return Value\n\nThe calendar that reminders are added to by default.\n\nSee Also\nAccessing calendars\nvar defaultCalendarForNewEvents: EKCalendar?\nThe calendar that events are added to by default, as specified by user settings.\nfunc calendars(for: EKEntityType) -> [EKCalendar]\nIdentifies the calendars that support a given entity type, such as reminders or events.\nfunc calendar(withIdentifier: String) -> EKCalendar?\nLocates a calendar with the specified identifier.\nfunc saveCalendar(EKCalendar, commit: Bool)\nSaves a calendar to the event store by either committing or batching the changes.\nfunc removeCalendar(EKCalendar, commit: Bool)\nRemoves a calendar from the event store by either committing or batching the changes.\nvar calendars: [EKCalendar]\nThe calendars associated with the event store.\nDeprecated"
  },
  {
    "title": "authorizationStatus(for:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507239-authorizationstatus",
    "html": "Parameters\nentityType\n\nThe event or reminder entity type.\n\nReturn Value\n\nThe app’s authorization status of the given type.\n\nSee Also\nRequesting access to events and reminders\nfunc requestWriteOnlyAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts the person using your app to grant or deny write access to event data.\nfunc requestFullAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to event data.\nfunc requestFullAccessToReminders(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to reminders.\nenum EKAuthorizationStatus\nThe current authorization status for a specific entity type.\ntypealias EKEventStoreRequestAccessCompletionHandler\nThe signature for a closure that EventKit calls when requesting access to event and reminder data.\nproperty list key NSCalendarsFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their calendar data.\nName: Privacy - Calendars Full Access Usage Description\nproperty list key NSCalendarsWriteOnlyAccessUsageDescription\nA message that tells people why the app is requesting access to create calendar events.\nName: Privacy - Calendars Write Only Usage Description\nproperty list key NSRemindersFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their reminders data.\nName: Privacy - Reminders Full Access Usage Description"
  },
  {
    "title": "Accessing the event store | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/accessing_the_event_store",
    "html": "Overview\n\nYour app must obtain permission from the person using the app before it can access the calendar database: your app must never directly modify the calendar database on its own. EKEventStore is the app’s way of accessing calendar and reminder data.\n\nYour app should only request the access it needs to complete its tasks. You can request write-only access to events, which lets your app create new events but doesn’t let it read any events or other calendar information, including events your app created. You can also request full access to either events or reminders, which lets your app create, view, edit, and delete data.\n\nNote\n\nYour app can’t request read-only access to either events or reminders. To read events or reminders from the event store, your app needs full access.\n\nConnect to the event store\n\nTo receive event or reminder data, you must request access to an entity type after initializing the event store. To request access to reminders, use requestFullAccessToReminders(completion:). To request access to events, use requestWriteOnlyAccessToEvents(completion:) or requestFullAccessToEvents(completion:), depending on the level of access your app needs.\n\nFor example, to request full access to reminders, use the following:\n\n// Initialize the store.\nvar store = EKEventStore()\n\n\n// Request access to reminders.\nstore.requestFullAccessToReminders { granted, error in\n    // Handle the response to the request.\n}\n\n\nReleasing an event store instance before other EventKit objects may result in an error.\n\nUse EventKit with write-only calendar access\n\nYour app can use the entire EventKit calendar API when it has write-only calendar access. If your app has write-only access, a request for a list of calendars returns a single virtual calendar, that doesn’t represent any real calendar in the event store. Requests for events on the virtual calendar return no results. When your app creates an event, EventKit saves it to a calendar that’s chosen by the person using your app.\n\nEventKit UI presents chooser and editor UI outside of your app’s process on iOS 17 and later. Your app can use EventKit UI without requesting write-only or full calendar access. The chooser and editor UI has full access to calendars on the device regardless of the access granted to your app. If your app needs to present UI for creating and editing calendar events, consider using EventKit UI instead of requesting full access to calendar data. Create an event, then present an EKEventEditViewController to allow people to edit and save the event. EKEventEditViewController saves the event to the calendar the person requests in the editor UI.\n\nProtect user privacy with information property list keys\n\nAn iOS app must include in its Info.plist file the usage description keys for the types of data it needs to access. On iOS 17 and later, to access a person’s calendar events or reminders, you need to include descriptions for:\n\nNSCalendarsWriteOnlyAccessUsageDescription or NSCalendarsFullAccessUsageDescription, depending on the level of access to events your app needs. Don’t request full access if your app’s features only need write-only access.\n\nNSRemindersFullAccessUsageDescription, if your app needs access to reminders.\n\nImportant\n\nOn iOS 17 or later, if your app doesn’t include usage description keys, or only includes the older NSCalendarsUsageDescription key for describing events access, iOS automatically denies any access request.\n\nTo access a person’s calendar events or reminders through EventKit or EventKit UI, your app needs to include descriptions for the following if your app links to iOS 10 or later, and runs on iOS 10 through iOS 16:\n\nNSCalendarsUsageDescription, which is a fallback if your app runs on iOS 17 or later and doesn’t include descriptions for NSCalendarsWriteOnlyAccessUsageDescription or NSCalendarsFullAccessUsageDescription.\n\nNSRemindersUsageDescription, which is a fallback if your app runs on iOS 17 or later and doesn’t include a description for NSRemindersFullAccessUsageDescription.\n\nNSContactsUsageDescription, as EventKit UI may need to access Contacts data to choose the correct display name or avatar for a contact in a calendar.\n\nWarning\n\nIf your app that’s linked on iOS 10 through iOS 16 doesn’t include these keys, your app crashes.\n\nBecause these keys provide access to the event store, they protect the person’s privacy by only allowing access to this information if they explicitly grant permission in the app.\n\nTo access Calendar data, all sandboxed macOS apps must include the com.apple.security.personal-information.calendars entitlement.\n\nSee Also\nEssentials\nclass EKEventStore\nAn object that accesses a person’s calendar events and reminders and supports the scheduling of new events.\nAccessing Calendar using EventKit and EventKitUI\nChoose and implement the appropriate Calendar access level in your app."
  },
  {
    "title": "completionDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekreminder/1507286-completiondate",
    "html": "Discussion\n\nSetting this property to a date will set isCompleted to true; setting this property to nil will set completed to false.\n\nSee Also\nAccessing Reminder Properties\nenum EKReminderPriority\nThe priority of the reminder.\nvar priority: Int\nThe reminder's priority.\nvar startDateComponents: DateComponents?\nThe start date of the task.\nvar dueDateComponents: DateComponents?\nThe date by which the reminder should be completed.\nvar isCompleted: Bool\nA Boolean value determining whether or not the reminder is marked completed."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore/1507252-init",
    "html": "Return Value\n\nAn initialized event store.\n\nSee Also\nCreating event stores\ninit(sources: [EKSource])\nCreates an event store that contains data for the specified sources.\nvar eventStoreIdentifier: String\nThe unique identifier for the event store."
  },
  {
    "title": "title | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem/1507305-title",
    "html": "See Also\nAccessing Calendar Item Properties\nvar calendar: EKCalendar!\nThe calendar for the calendar item.\nvar location: String?\nThe location associated with the calendar item.\nvar creationDate: Date?\nThe date that this calendar item was created.\nvar lastModifiedDate: Date?\nThe date that the calendar item was last modified.\nvar timeZone: TimeZone?\nThe time zone for the calendar item.\nvar url: URL?\nThe URL for the calendar item."
  },
  {
    "title": "EKError.Code | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror/code",
    "html": "Topics\nConstants\ncase eventNotMutable\nThe event isn't mutable and you can’t save or delete it.\ncase noCalendar\nThe event isn't associated with a calendar.\ncase noStartDate\nThe event has no start date set.\ncase noEndDate\nThe event has no end date set.\ncase datesInverted\nThe event’s end date occurs before its start date.\ncase internalFailure\nAn internal error occurred.\ncase calendarReadOnly\nThe calendar is read-only and you can’t add events to it.\ncase durationGreaterThanRecurrence\nThe duration of an event is greater than its recurrence interval.\ncase alarmGreaterThanRecurrence\nThe alarm interval is greater than the recurrence interval.\ncase startDateTooFarInFuture\nThe start date is further into the future than the calendar can display.\ncase startDateCollidesWithOtherOccurrence\nThe event’s start date collides with another occurrence of the event.\ncase objectBelongsToDifferentStore\nThe object belongs to a different calendar store.\ncase invitesCannotBeMoved\nYou can’t move the event because it’s an invitation.\ncase invalidSpan\nThe system encountered an invalid span during a save or deletion.\ncase calendarHasNoSource\nYou can’t save the calendar without setting a source first.\ncase calendarSourceCannotBeModified\nYou can’t move the calendar to another source.\ncase calendarIsImmutable\nThe calendar is immutable and you can’t modify or delete it.\ncase sourceDoesNotAllowCalendarAddDelete\nThe source doesn’t allow you to add or delete calendars.\ncase recurringReminderRequiresDueDate\nThe recurring reminder requires a due date.\ncase structuredLocationsNotSupported\nThe source to which this calendar belongs doesn't support structured locations.\ncase reminderLocationsNotSupported\nThe source doesn't support locations on reminders.\ncase alarmProximityNotSupported\nThe source doesn't allow geofences on alarms.\ncase calendarDoesNotAllowEvents\nThe calendar doesn’t allow you to add events.\ncase calendarDoesNotAllowReminders\nThe calendar doesn’t allow you to add reminders.\ncase sourceDoesNotAllowReminders\nThe source doesn't allow calendars supporting reminder entity types.\ncase sourceDoesNotAllowEvents\nThe source doesn't allow calendars supporting event entity types.\ncase priorityIsInvalid\nThe priority number for the reminder is invalid.\ncase invalidEntityType\nThe entity type is invalid.\ncase procedureAlarmsNotMutable\nYou can’t create or modify procedure alarms.\ncase eventStoreNotAuthorized\nThe user hasn't authorized your app to access events or reminders.\ncase osNotSupported\nThe action isn't supported on the current operating system.\ncase invalidInviteReplyCalendar\nThe calendar is invalid or nil.\ncase notificationsCollectionFlagNotSet\nThe notification collection doesn't have the notifications collection flag.\ncase sourceMismatch\nThe object's source doesn't match its container's source.\ncase notificationCollectionMismatch\nThe notification collection that contains this notification doesn’t match the collection the system is trying to save.\ncase notificationSavedWithoutCollection\nThe notification can’t save because you haven’t added it to a notification collection and saved the collection first.\ncase last\nThis error is for internal use.\nEnumeration Cases\ncase reminderAlarmContainsEmailOrUrl\nRelationships\nConforms To\nSendable\nSee Also\nErrors\nstruct EKError\nAn EventKit error.\nlet EKErrorDomain: String\nA string that identifies the EventKit error domain."
  },
  {
    "title": "EKErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerrordomain",
    "html": "See Also\nErrors\nstruct EKError\nAn EventKit error.\nenum EKError.Code\nError codes for EventKit errors."
  },
  {
    "title": "EKError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekerror",
    "html": "Topics\nError Properties\nvar errorCode: Int\nThe error code associated with the EventKit error.\nvar errorUserInfo: [String : Any]\nA dictionary for providing additional details about the error.\nvar localizedDescription: String\nA string containing the localized description of the error.\nError Codes\nstatic var eventNotMutable: EKError.Code\nThe event isn't mutable and you can't save or delete it.\nstatic var noCalendar: EKError.Code\nThe event isn't associated with a calendar.\nstatic var noEndDate: EKError.Code\nThe event has no start date set.\nstatic var noStartDate: EKError.Code\nThe event has no end date set.\nstatic var datesInverted: EKError.Code\nThe event’s end date occurs before its start date.\nstatic var internalFailure: EKError.Code\nAn internal error occurred.\nstatic var calendarReadOnly: EKError.Code\nThe calendar is read-only and you can't add events to it.\nstatic var durationGreaterThanRecurrence: EKError.Code\nThe duration of an event is greater than its recurrence interval.\nstatic var alarmGreaterThanRecurrence: EKError.Code\nThe alarm interval is greater than the recurrence interval.\nstatic var startDateTooFarInFuture: EKError.Code\nThe start date is further into the future than the calendar can display.\nstatic var startDateCollidesWithOtherOccurrence: EKError.Code\nThe event’s start date collides with another occurrence of the event.\nstatic var objectBelongsToDifferentStore: EKError.Code\nThe object belongs to a different calendar store.\nstatic var invitesCannotBeMoved: EKError.Code\nYou can't move the event because it's an invitation.\nstatic var invalidSpan: EKError.Code\nThe system encountered an invalid span during a save or deletion.\nstatic var calendarHasNoSource: EKError.Code\nYou can't save the calendar without setting a source first.\nstatic var calendarSourceCannotBeModified: EKError.Code\nYou can't move the calendar to another source.\nstatic var calendarIsImmutable: EKError.Code\nThe calendar is immutable and you can't modify or delete it.\nstatic var sourceDoesNotAllowCalendarAddDelete: EKError.Code\nThe source doesn’t allow you to add or delete calendars.\nstatic var recurringReminderRequiresDueDate: EKError.Code\nThe recurring reminder requires a due date.\nstatic var structuredLocationsNotSupported: EKError.Code\nThe source to which this calendar belongs doesn't support structured locations.\nstatic var reminderLocationsNotSupported: EKError.Code\nThe source doesn't support locations on reminders.\nstatic var alarmProximityNotSupported: EKError.Code\nThe source doesn't allow geofences on alarms.\nstatic var calendarDoesNotAllowEvents: EKError.Code\nThe calendar doesn't allow you to add events.\nstatic var calendarDoesNotAllowReminders: EKError.Code\nThe calendar doesn’t allow you to add reminders.\nstatic var sourceDoesNotAllowReminders: EKError.Code\nThe source doesn't allow calendars supporting reminder entity types.\nstatic var sourceDoesNotAllowEvents: EKError.Code\nThe source doesn't allow calendars supporting event entity types.\nstatic var priorityIsInvalid: EKError.Code\nThe priority number for the reminder is invalid.\nstatic var invalidEntityType: EKError.Code\nThe entity type is invalid.\nstatic var procedureAlarmsNotMutable: EKError.Code\nYou can't create or modify procedure alarms.\nstatic var eventStoreNotAuthorized: EKError.Code\nThe user hasn't authorized your app to access events or reminders.\nstatic var osNotSupported: EKError.Code\nThe action isn't supported on the current operating system.\nstatic var invalidInviteReplyCalendar: EKError.Code\nThe calendar is invalid or nil.\nstatic var notificationsCollectionFlagNotSet: EKError.Code\nThe notification collection doesn't have the notifications collection flag.\nstatic var sourceMismatch: EKError.Code\nThe object's source doesn't match its container's source.\nstatic var notificationCollectionMismatch: EKError.Code\nThe notification collection that contains this notification doesn't match the collection the system is trying to save.\nstatic var notificationSavedWithoutCollection: EKError.Code\nThe notification can't save because you haven't added it to a notification collection and saved the collection first.\nstatic var last: EKError.Code\nThis error is for internal use.\nError Domain\nstatic var errorDomain: String\nThe error domain that identifies an error as an EventKit error.\nlet EKErrorDomain: String\nA string that identifies the EventKit error domain.\nError Code Comparison\nstatic func != (EKError, EKError) -> Bool\nReturns a Boolean value indicating whether two values are not equal.\nInitializers\ninit(Code, userInfo: [String : Any])\nInstance Properties\nvar code: Code\nvar hashValue: Int\nvar userInfo: [String : Any]\nType Properties\nstatic var reminderAlarmContainsEmailOrUrl: EKError.Code\nInstance Methods\nfunc hash(into: inout Hasher)\nOperator Functions\nstatic func == (EKError, EKError) -> Bool\nEnumerations\nenum EKError.Code\nError codes for EventKit errors.\nSee Also\nErrors\nenum EKError.Code\nError codes for EventKit errors.\nlet EKErrorDomain: String\nA string that identifies the EventKit error domain."
  },
  {
    "title": "EKVirtualConferenceRoomTypeDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceroomtypedescriptor",
    "html": "Overview\n\nTo present a list of rooms where a virtual conference takes place, your virtual conference provider creates one or more room type descriptors. Each descriptor contains a user-visible title and an identifier of your choosing. When users create events using one of the rooms you provide, EventKit calls fetchVirtualConference(identifier:completionHandler:) and passes the room’s identifier.\n\nTopics\nCreating Room Type Descriptors\ninit(title: String, identifier: EKVirtualConferenceRoomTypeIdentifier)\nCreates an object that describes a location where a virtual conference takes place.\nConfiguring Room Type Descriptors\nvar title: String\nThe user-visible name of a room where virtual conferences take place, such as Personal Room or Team Room.\nvar identifier: EKVirtualConferenceRoomTypeIdentifier\nA unique string you choose that identifies the room.\ntypealias EKVirtualConferenceRoomTypeIdentifier\nThe type for a room type identifier.\nRelationships\nInherits From\nNSObject\nSee Also\nVirtual conferences\nclass EKVirtualConferenceProvider\nAn object that associates virtual conferencing details with an event object in a user’s calendar.\nclass EKVirtualConferenceDescriptor\nDetails about a virtual conference that uses a custom room type."
  },
  {
    "title": "EKSource | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/eksource",
    "html": "Overview\n\nYou do not create instances of this class; instead, you retrieve EKSource objects from an EKEventStore object. Use the sources property to get all the EKSource objects for an event store, and use the methods in this class to access properties of the source object.\n\nTopics\nAccessing Source Properties\nenum EKSourceType\nThe type of source object.\nvar sourceIdentifier: String\nA unique identifier for the source object.\nvar sourceType: EKSourceType\nThe type of this source object.\nvar title: String\nThe name of this source object.\nAccessing Calendars\nfunc calendars(for: EKEntityType) -> Set<EKCalendar>\nReturns the calendars that belong to this source object that support a particular entity type.\nvar calendars: Set<EKCalendar>\nThe calendars that belong to this source object.\nDeprecated\nEntity Type\nenum EKEntityType\nThe type of entities allowed for a source.\nInstance Properties\nvar isDelegate: Bool\nRelationships\nInherits From\nEKObject\nSee Also\nCommon objects\nclass EKCalendarItem\nAn abstract superclass for calendar events and reminders.\nclass EKObject\nAn abstract superclass for all EventKit classes that have persistent instances."
  },
  {
    "title": "EKObject | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekobject",
    "html": "Overview\n\nEKObject provides fine control when saving and restoring property settings. For example, you can find out if a persistent object was modified locally and whether it needs to be saved. If the object has changed in the event store since it was fetched, you can refresh the local copy by keeping local changes or by removing local changes. You can also roll back the object to the state when it was first fetched.\n\nTopics\nSaving and Restoring State\nvar hasChanges: Bool\nReturns whether this object or any of the objects it contains has uncommitted changes.\nvar isNew: Bool\nA Boolean value that indicates whether this object has ever been saved.\nfunc refresh() -> Bool\nMerges changes to this object with the latest saved values.\nfunc reset()\nReturns this object to its saved state.\nfunc rollback()\nRolls back the property values of this object to its original state when it was first fetched.\nRelationships\nInherits From\nNSObject\nSee Also\nCommon objects\nclass EKCalendarItem\nAn abstract superclass for calendar events and reminders.\nclass EKSource\nAn abstract superclass that represents the account a calendar belongs to."
  },
  {
    "title": "EKCalendarItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendaritem",
    "html": "Overview\n\nThe EKCalendarItem is a an abstract superclass for calendar events and reminders. This class provides common properties and methods for accessing properties of calendar items such as the ability to set the calendar, title, and location, as well as support for attaching notes, displaying attendees, setting multiple alarms, and specifying recurrence rules.\n\nTopics\nAccessing Calendar Items\nvar calendarItemIdentifier: String\nThe calendar item’s unique identifier.\nvar calendarItemExternalIdentifier: String!\nThe calendar item’s external identifier as provided by the calendar server.\nvar uuid: String\nThe calendar item’s unique identifier.\nDeprecated\nAccessing Calendar Item Properties\nvar calendar: EKCalendar!\nThe calendar for the calendar item.\nvar title: String!\nThe title for the calendar item.\nvar location: String?\nThe location associated with the calendar item.\nvar creationDate: Date?\nThe date that this calendar item was created.\nvar lastModifiedDate: Date?\nThe date that the calendar item was last modified.\nvar timeZone: TimeZone?\nThe time zone for the calendar item.\nvar url: URL?\nThe URL for the calendar item.\nAttaching Notes\nvar hasNotes: Bool\nA Boolean value that indicates whether the calendar item has notes.\nvar notes: String?\nThe notes associated with the calendar item.\nDisplaying Attendees\nvar hasAttendees: Bool\nA Boolean value that indicates whether the calendar item has attendees.\nvar attendees: [EKParticipant]?\nThe attendees associated with the calendar item, as an array of EKParticipant objects.\nAdding and Removing Alarms\nvar hasAlarms: Bool\nA Boolean value that indicates whether the calendar item has alarms.\nfunc addAlarm(EKAlarm)\nAdds an alarm to the receiver.\nfunc removeAlarm(EKAlarm)\nRemoves an alarm from the calendar item.\nvar alarms: [EKAlarm]?\nThe alarms associated with the calendar item, as an array of EKAlarm objects.\nSetting Recurrence Rules\nvar hasRecurrenceRules: Bool\nA Boolean value that indicates whether the calendar item has recurrence rules.\nfunc addRecurrenceRule(EKRecurrenceRule)\nAdds a recurrence rule to the recurrence rule array.\nfunc removeRecurrenceRule(EKRecurrenceRule)\nRemoves a recurrence rule from the recurrence rule array.\nvar recurrenceRules: [EKRecurrenceRule]?\nThe recurrence rules for the calendar item.\nRelationships\nInherits From\nEKObject\nSee Also\nCommon objects\nclass EKObject\nAn abstract superclass for all EventKit classes that have persistent instances.\nclass EKSource\nAn abstract superclass that represents the account a calendar belongs to."
  },
  {
    "title": "EKStructuredLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekstructuredlocation",
    "html": "Overview\n\nUse init(title:) to create a new structured location, then set it to the structuredLocation property of an EKAlarm object.\n\nTopics\nCreating Structured Locations\ninit(title: String)\nCreates a new structured location with the specified title.\ninit(mapItem: MKMapItem)\nCreates a new structured location with the specified map item.\nAccessing Structured Location Properties\nvar title: String?\nThe title of the location.\nvar geoLocation: CLLocation?\nThe core location.\nvar radius: Double\nA minimum distance from the core location that would trigger the alarm or reminder.\nRelationships\nInherits From\nEKObject\nConforms To\nNSCopying\nSee Also\nAlarms\nSetting an alarm\nAlert users of events and reminders with an alarm.\nclass EKAlarm\nA class that represents an alarm."
  },
  {
    "title": "EKRecurrenceRule | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencerule",
    "html": "Overview\n\nAfter you create a recurrence rule, assign it to an event with the recurrenceRule method of EKEvent.\n\nRecurrence rules can have an end, represented by an EKRecurrenceEnd object. The end can be based on a specific date or a maximum number of occurrences.\n\nNote\n\nIt is currently not possible to directly modify an EKRecurrenceRule or any of its properties. This functionality is achieved by creating a new EKRecurrenceRule and setting an event or reminder to use the newly created rule.\n\nTopics\nCreating a Basic Recurrence Rule\nenum EKSpan\nAn object that indicates whether modifications should apply to a single event or all future events of a recurring event.\ninit(recurrenceWith: EKRecurrenceFrequency, interval: Int, end: EKRecurrenceEnd?)\nInitializes and returns a simple recurrence rule with a given frequency, interval, and end.\nCreating a Complex Recurrence Rule\ninit(recurrenceWith: EKRecurrenceFrequency, interval: Int, daysOfTheWeek: [EKRecurrenceDayOfWeek]?, daysOfTheMonth: [NSNumber]?, monthsOfTheYear: [NSNumber]?, weeksOfTheYear: [NSNumber]?, daysOfTheYear: [NSNumber]?, setPositions: [NSNumber]?, end: EKRecurrenceEnd?)\nInitializes and returns a recurrence rule with a given frequency and additional scheduling information.\nAccessing Recurrence Rule Properties\nenum EKRecurrenceFrequency\nThe frequency for recurrence rules.\nvar calendarIdentifier: String\nThe identifier for the recurrence rule’s calendar.\nvar recurrenceEnd: EKRecurrenceEnd?\nIndicates when the recurrence rule ends.\nvar frequency: EKRecurrenceFrequency\nThe frequency of the recurrence rule.\nvar interval: Int\nSpecifies how often the recurrence rule repeats over the unit of time indicated by its frequency.\nvar firstDayOfTheWeek: Int\nIndicates which day of the week the recurrence rule treats as the first day of the week.\nvar daysOfTheWeek: [EKRecurrenceDayOfWeek]?\nThe days of the week associated with the recurrence rule, as an array of EKRecurrenceDayOfWeek objects.\nvar daysOfTheMonth: [NSNumber]?\nThe days of the month associated with the recurrence rule, as an array of NSNumber objects.\nvar daysOfTheYear: [NSNumber]?\nThe days of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar weeksOfTheYear: [NSNumber]?\nThe weeks of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar monthsOfTheYear: [NSNumber]?\nThe months of the year associated with the recurrence rule, as an array of NSNumber objects.\nvar setPositions: [NSNumber]?\nAn array of ordinal numbers that filters which recurrences to include in the recurrence rule’s frequency.\nfunc EK_LOSE_FRACTIONAL_SECONDS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nRelationships\nInherits From\nEKObject\nConforms To\nNSCopying\nSee Also\nRecurrence\nCreating a recurring event\nSet up an event or reminder that repeats.\nclass EKRecurrenceDayOfWeek\nA class that represents the day of the week.\nclass EKRecurrenceEnd\nA class that defines the end of a recurrence rule."
  },
  {
    "title": "Setting an alarm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/setting_an_alarm",
    "html": "Overview\n\nAn easy way to alert users of their upcoming events is to give them the option of setting alarms for their calendar items. Regardless of the app that’s currently running, alarms come to the foreground as a notification and remind users of the scheduled event. If an alarm is set to a calendar event, the notification comes from the Calendar app; if an alarm is set to a reminder, the notification comes from the Reminders app.\n\nAlarms can be time-based, firing at a specified time, or location-based, firing when crossing a geofence (for more information about geofences, see \"Configure Geofences\"). Alarms can be applied to both calendar events and reminders.\n\nNote\n\nAn alarm is not intended to serve as a UILocalNotification. An alarm requires you to create an event or reminder that is visible in the user’s Calendar or Reminders app. A UILocalNotification is better suited for general purposes that don’t involve the Calendar database.\n\nAdd and Remove Alarms\n\nAdd an alarm to an event with the addAlarm(_:) method.\n\nAlarms can be created with an absolute date or with an offset relative to the start date of the event. Alarms created with a relative offset must occur before or at the start date of the event.\n\nIn OS X, you can trigger an action alongside the alarm. For example, you can set properties such as:\n\nemailAddress to send an email.\n\nsoundName to play a sound.\n\nurl to open a URL.\n\nRemove an alarm from an event with the removeAlarm(_:) method.\n\nConfigure Geofences\n\nA geofence is a virtual border surrounding a geographic location that, when crossed, triggers an alarm for an event. You specify the latitude and longitude of the center and the radius of the geofence.\n\nWhile geofence-enabled alarms can be applied to events, they are more practical for reminders. Geofences are a useful way to remind users of tasks they need to do when entering or exiting a certain region. For example, when a user leaves their workplace, an alarm can remind them to stop by the grocery store.\n\nNote\n\nGeofences are supported on both macOS and iOS, but they are more effective on mobile devices.\n\nConfigure a geofence for an event by creating an alarm and setting its structured location and proximity. Call the init(title:) method to create a structured location. To set longitude and latitude coordinates, pass a CLLocation to the geoLocation property of the structured location returned. A value of 0 for the radius property will use the system’s default radius; to choose a radius of your own, specify a value in meters.\n\nSee Also\nAlarms\nclass EKAlarm\nA class that represents an alarm.\nclass EKStructuredLocation\nA class that specifies a geofence to activate the alarm of a calendar item."
  },
  {
    "title": "EKRecurrenceEnd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrenceend",
    "html": "Overview\n\nThe EKRecurrenceEnd class defines the end of a recurrence rule defined by an EKRecurrenceRule object. The recurrence end can be specified by a date (date-based) or by a maximum count of occurrences (count-based). An event that is intended to continue indefinitely should have its EKRecurrenceEnd set to nil.\n\nTopics\nCreating a Recurrence End\ninit(end: Date)\nInitializes and returns a date-based recurrence end with a given end date.\ninit(occurrenceCount: Int)\nInitializes and returns a count-based recurrence end with a given maximum occurrence count.\nAccessing Recurrence End Properties\nvar endDate: Date?\nThe end date of the recurrence end, or nil if the recurrence end is count-based.\nvar occurrenceCount: Int\nThe occurrence count of the recurrence end, or 0 if the recurrence end is date-based.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nRecurrence\nCreating a recurring event\nSet up an event or reminder that repeats.\nclass EKRecurrenceDayOfWeek\nA class that represents the day of the week.\nclass EKRecurrenceRule\nA class that describes the pattern for a recurring event."
  },
  {
    "title": "EKRecurrenceDayOfWeek | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekrecurrencedayofweek",
    "html": "Overview\n\nThe EKRecurrenceDayOfWeek class represents a day of the week for use with an EKRecurrenceRule object.\n\nA day of the week can optionally have a week number, indicating a specific day in the recurrence rule’s frequency. For example, a day of the week with a day value of Tuesday and a week number of 2 would represent the second Tuesday of every month in a monthly recurrence rule, and the second Tuesday of every year in a yearly recurrence rule. A day of the week with a week number of 0 ignores its week number.\n\nTopics\nCreating a Day of the Week\nenum EKWeekday\nThe day of the week.\ninit(EKWeekday)\nCreates and returns a day of the week with a given day.\ninit(EKWeekday, weekNumber: Int)\nCreates and returns an autoreleased day of the week with a given day and week number.\ninit(dayOfTheWeek: EKWeekday, weekNumber: Int)\nInitializes and returns a day of the week with a given day and week number.\nAccessing Properties of a Day of the Week\nvar dayOfTheWeek: EKWeekday\nThe day of the week.\nvar weekNumber: Int\nThe week number of the day of the week.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nRecurrence\nCreating a recurring event\nSet up an event or reminder that repeats.\nclass EKRecurrenceEnd\nA class that defines the end of a recurrence rule.\nclass EKRecurrenceRule\nA class that describes the pattern for a recurring event."
  },
  {
    "title": "EKCalendar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekcalendar",
    "html": "Overview\n\nUse the properties in this class to get attributes about a calendar, such as its title and type. Use the init(for:eventStore:) method to create a calendar object.\n\nTopics\nCreating Calendars\ninit(for: EKEntityType, eventStore: EKEventStore)\nCreates a new calendar that can contain the given entity type.\ninit(eventStore: EKEventStore)\nCreates and returns a calendar belonging to a specified event store.\nDeprecated\nAccessing Calendar Properties\nenum EKCalendarType\nPossible calendar types.\nstruct EKCalendarEventAvailabilityMask\nA bitmask indicating the event availability settings that the calendar can support.\nvar allowsContentModifications: Bool\nA Boolean value that indicates whether you can add, edit, and delete items in the calendar.\nvar cgColor: CGColor!\nThe calendar’s color.\nvar color: NSColor!\nThe calendar’s color.\nvar isImmutable: Bool\nA Boolean value indicating whether the calendar’s properties can be edited or deleted.\nvar title: String\nThe calendar’s title.\nvar type: EKCalendarType\nThe calendar’s type.\nvar allowedEntityTypes: EKEntityMask\nThe entity types this calendar can contain.\nvar source: EKSource!\nThe source object representing the account to which this calendar belongs.\nvar isSubscribed: Bool\nA Boolean value indicating whether the calendar is a subscribed calendar.\nvar supportedEventAvailabilities: EKCalendarEventAvailabilityMask\nThe event availability settings supported by this calendar, as indicated by a bitmask.\nvar calendarIdentifier: String\nA unique identifier for the calendar.\nfunc DATETIME_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nfunc DATE_COMPONENTS_DO_NOT_USE()\nA deprecated function.\nDeprecated\nRelationships\nInherits From\nEKObject\nSee Also\nCalendars\nclass EKParticipant\nA class that represents person, group, or room invited to a calendar event."
  },
  {
    "title": "Creating a recurring event | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/creating_a_recurring_event",
    "html": "Overview\n\nRecurring events repeat over a specified interval of time. To make an event recurring, assign it a recurrence rule that describes when the event occurs. Recurrence rules are represented by instances of the EKRecurrenceRule class.\n\nRecurrence is applicable to both calendar events and reminders. Unlike with recurring events, only the first incomplete reminder of a recurring set is obtainable. This is true with EventKit as well as the Reminders app. When the reminder is completed, the next reminder in the recurrence set becomes available.\n\nCreate a Basic Rule\n\nYou can create a recurrence rule with a simple daily, weekly, monthly, or yearly pattern using the init(recurrenceWith:interval:end:) method. You provide three values to this method:\n\nThe recurrence frequency. This is a value of type EKRecurrenceFrequencythat indicates whether the recurrence rule is daily, weekly, monthly, or yearly.\n\nThe recurrence interval. This is an integer greater than 0 that specifies how often a pattern repeats. For example, if the recurrence rule is a weekly recurrence rule and its interval is 1, then the pattern repeats every week. If the recurrence rule is a monthly recurrence rule and its interval is 3, then the pattern repeats every three months.\n\nThe recurrence end. This optional parameter is an instance of the EKRecurrenceEnd class, which indicates when the recurrence rule ends. The recurrence end can be based on a specific end date or on an amount of occurrences. If you don’t want to specify an end for the recurrence rule, pass nil.\n\nCreate a Complex Rule\n\nYou can create a recurrence rule with a complex pattern using the init(recurrenceWith:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:) method. As for a basic recurrence rule, you provide a frequency, interval, and optional end for the recurring event. In addition, you can provide a combination of optional values describing a custom rule, as listed in Table 1.\n\nTable 1 Complex recurrence rule breakdown\n\nParameter name\n\n\t\n\nAccepted values\n\n\t\n\nCan be combined with\n\n\t\n\nExample\n\n\n\n\ndays\n\n\t\n\nAn array of EKRecurrenceDayOfWeek objects.\n\n\t\n\nAll recurrence rules except for daily recurrence rules.\n\n\t\n\nAn array containing EKTuesday and EKFriday objects will create a recurrence that occurs every Tuesday and Friday.\n\n\n\n\nmonthDays\n\n\t\n\nAn array of nonzero NSNumber objects ranging from –31 to 31. Negative values indicate counting backward from the end of the month.\n\n\t\n\nMonthly recurrence rules only.\n\n\t\n\nAn array containing the values 1 and –1 will create a recurrence that occurs on the first and last day of every month.\n\n\n\n\nmonths\n\n\t\n\nAn array of NSNumber objects with values ranging from 1 to 12, corresponding to Gregorian calendar months.\n\n\t\n\nYearly recurrence rules only.\n\n\t\n\nIf your originating event occurs on January 10, you can provide an array containing the values 1 and 2 to create a recurrence that occurs every January 10 and February 10.\n\n\n\n\nweeksOfTheYear\n\n\t\n\nAn array of nonzero NSNumber objects ranging from –53 to 53. Negative values indicate counting backward from the end of the year.\n\n\t\n\nYearly recurrence rules only.\n\n\t\n\nIf your originating event occurs on a Wednesday, you can provide an array containing the values 1 and –1 to create a recurrence that occurs on the Wednesday of the first and last weeks of every year. If a specified week does not contain a Wednesday in the current year, as can be the case for the first or last week of a year, the event does not occur.\n\n\n\n\ndaysOfTheYear\n\n\t\n\nAn array of nonzero NSNumber objects ranging from –366 to 366. Negative values indicate counting backward from the end of the year.\n\n\t\n\nYearly recurrence rules only.\n\n\t\n\nYou can provide an array containing the values 1 and –1 to create a recurrence that occurs on the first and last day of every year.\n\n\n\n\nsetPositions\n\n\t\n\nAn array of nonzero NSNumber objects ranging from –366 to 366. Negative values indicate counting backward from the end of the list of occurrences.\n\n\t\n\nAll recurrence rules except for daily recurrence rules.\n\n\t\n\nIf you provide an array containing the values 1 and –1 to a yearly recurrence rule that has specified Monday through Friday as its value for days of the week, the recurrence occurs only on the first and last weekday of every year.\n\nYou can provide values for any number of the parameters in Table 1. Parameters that don’t apply to a particular recurrence rule are ignored. If you provide a value for more than one of the parameters, the recurrence occurs only on days that apply to all provided values.\n\nOnce you have created a recurrence rule, you can apply it to a calendar event or reminder with the addRecurrenceRule(_:) method of EKCalendarItem.\n\nSee Also\nRecurrence\nclass EKRecurrenceDayOfWeek\nA class that represents the day of the week.\nclass EKRecurrenceEnd\nA class that defines the end of a recurrence rule.\nclass EKRecurrenceRule\nA class that describes the pattern for a recurring event."
  },
  {
    "title": "EKReminder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekreminder",
    "html": "Overview\n\nUse the init(eventStore:) method to create a new reminder. Use the properties in the class to get and modify certain information about a reminder.\n\nTopics\nCreating a Reminder\ninit(eventStore: EKEventStore)\nCreates and returns a new reminder in the given event store.\nAccessing Reminder Properties\nenum EKReminderPriority\nThe priority of the reminder.\nvar priority: Int\nThe reminder's priority.\nvar startDateComponents: DateComponents?\nThe start date of the task.\nvar dueDateComponents: DateComponents?\nThe date by which the reminder should be completed.\nvar isCompleted: Bool\nA Boolean value determining whether or not the reminder is marked completed.\nvar completionDate: Date?\nThe date on which the reminder was completed.\nRelationships\nInherits From\nEKCalendarItem\nSee Also\nEvents and reminders\nCreating events and reminders\nCreate and modify events and reminders in a person’s database.\nRetrieving events and reminders\nFetch events and reminders from the Calendar database.\nUpdating with notifications\nRegister for notifications about changes and keep your app up to date.\nManaging Location-Based Reminders\nAdd, fetch, complete, remove, and sort location-based reminders in your app.\nclass EKEvent\nA class that represents an event in a calendar."
  },
  {
    "title": "EKEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekevent",
    "html": "Overview\n\nUse the init(eventStore:) method to create a new event. Use the properties in the class to get and modify certain information about an event. Other properties, such as the event’s title and calendar, are inherited from the parent class EKCalendarItem.\n\nTopics\nCreating Events\ninit(eventStore: EKEventStore)\nCreates and returns a new event belonging to a specified event store.\nScheduling Events\nenum EKEventStatus\nThe event’s status.\nenum EKEventAvailability\nThe event’s availability setting for scheduling purposes.\nComparing Events\nfunc compareStartDate(with: EKEvent) -> ComparisonResult\nCompares the start date of the receiving event with the start date of another event.\nAccessing Event Properties\nvar eventIdentifier: String!\nA unique identifier for the event.\nvar availability: EKEventAvailability\nThe availability setting for the event.\nvar startDate: Date!\nThe start date of the event.\nvar endDate: Date!\nThe end date for the event.\nvar isAllDay: Bool\nA Boolean value that indicates whether the event is an all-day event.\nvar occurrenceDate: Date!\nThe original occurrence date of an event if it is part of a recurring series.\nvar isDetached: Bool\nA Boolean value that indicates whether an event is a detached instance of a repeating event.\nvar organizer: EKParticipant?\nThe organizer associated with the event.\nvar status: EKEventStatus\nThe status of the event.\nvar birthdayContactIdentifier: String?\nThe contact identifier of the person for this birthday event.\nvar structuredLocation: EKStructuredLocation?\nThe event's location with a potential geocoordinate.\nvar birthdayPersonID: Int\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nvar birthdayPersonUniqueID: String?\nThe Address Book framework record identifier of the person for this birthday event.\nDeprecated\nRefreshing Event Data\nfunc refresh() -> Bool\nUpdates the event’s data with the current information in the Calendar database.\nRelationships\nInherits From\nEKCalendarItem\nSee Also\nEvents and reminders\nCreating events and reminders\nCreate and modify events and reminders in a person’s database.\nRetrieving events and reminders\nFetch events and reminders from the Calendar database.\nUpdating with notifications\nRegister for notifications about changes and keep your app up to date.\nManaging Location-Based Reminders\nAdd, fetch, complete, remove, and sort location-based reminders in your app.\nclass EKReminder\nA class that represents a reminder in a calendar."
  },
  {
    "title": "Managing Location-Based Reminders | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/managing_location-based_reminders",
    "html": "Overview\n\nWith the Reminders app, users can create reminders with attachments, and alarms based on time and location. When Location Services is turned on, users receive location-based reminders when entering or leaving a specified geographic area or geofence. This sample demonstrates how to add, fetch, complete, remove, and sort location-based reminders.\n\nProvide a Purpose String\n\nThe sample first requests and receives authorization from the user before the app attempts to access their reminder data. It provides a purpose string or usage description that describes how the app intends to use the user’s reminder data. It then adds the NSRemindersUsageDescription key to the app’s Info.plist. The sample sets its value to a string that explains why the app needs access to reminder data. The system displays the string when prompting the user for authorization.\n\nImportant\n\nThis NSRemindersUsageDescription key is required for apps that access the user’s reminder data. Apps crash when the key is absent.\n\nRequest Authorization\n\nSet up your app to instantiate and use a single instance of EKEventStore that manages all reminder-related tasks. An EKEventStore object requires a significant amount of time to initialize and release. The user might add, remove, or update reminders while your app is running. Register for an EKEventStoreChanged notification to be notified about changes to the Calendar database. When you receive this notification, refresh all your reminder data. It’s possible that your current data is stale or invalid. For more information on change notification, see Updating with notifications for details.\n\nThe user grants or denies permission when apps request access to their reminder data. Because the user can change the app’s authorization status later in the Settings app ( Settings > Privacy > Reminders) on their device, the sample calls EKEventStore’s authorizationStatus(for:) with a EKEntityType.reminder entity type before attempting to access their reminder data.\n\nguard EKEventStore.authorizationStatus(for: .reminder) == .notDetermined else {\n    // The user may have already granted, denied, or restricted access to Reminders.\n    verifyAuthorizationStatus()\n    return\n}\n\n\nIf the authorization status is EKAuthorizationStatus.notDetermined, create an instance of EKEventStore, then store a strong reference to it.\n\nprivate var store = EKEventStore()\n\n\nNext, call its requestAccess(to:completion:) method to prompt the user for access.\n\nstore.requestAccess(to: .reminder, completion: {(granted, error) in\n    if granted { self.accessGranted() }\n})\n\n\nThe system remembers the user’s answer, so that subsequent calls to requestAccess(to:completion:) don’t again prompt the user. For more information on user’s reminder data access, see Accessing the event store.\n\nMap Annotations\n\nThe sample app uses the current user location and location-specific data saved in the MapData.plist file to create annotations for the map. It defines a MapData data type to represent each point of interest. MapData.plist contains three MapData entries. To test reminders around other locations, duplicate and update a MapData entry in MapData.plist with other data as needed.\n\nImportant\n\nCreating location-based reminders doesn’t require location services. The sample app uses location services to display the user’s current location on the map. As such, it includes and configures the NSLocationWhenInUseUsageDescription key in its Info.plist. This key is required for apps that access the user’s location services. For more information on user’s location services access, see Requesting authorization to use location services.\n\nCheck for the Existence of a Default List\n\nCreating a reminder requires a list, which is a calendar for these items. Use EKEventStore’s defaultCalendarForNewReminders() to check whether the user has specified a default list for reminders. If defaultCalendarForNewReminders() returns no value, prompt the user to create a list in the Reminders app or provide a mechanism that lets them create it from within the app. The app provides an Add List button that allows users to create a new list.\n\nCreate Location-Based Reminders\n\nA location-based reminder is a reminder created with a geofence-enabled alarm. A geofence-enabled alarm has a structured location and proximity configured. The structured location consists of a location object and radius. The radius is defined in meters and uses the system’s default radius when its value is 0. When the user provides a value for radius in a unit other than meters such as miles, convert this value before using it. The sample uses the following steps to create a location-based reminder.\n\nFirst, it creates an EKReminder object using init(eventStore:), then it sets its title and calendar properties:\n\nguard let calendar = store.defaultCalendarForNewReminders() else { throw LocationBasedRemindersError.missingDefaultRemindersList }\nlet reminder = EKReminder(eventStore: store)\n\n\nreminder.calendar = calendar\nreminder.title = title\n\n\nImportant\n\nThe title and calendar properties are required and must be set before saving the reminder.\n\nNext, it creates a structured location by using either EKStructuredLocation’s init(title:) or init(mapItem:). When the location object has latitude and longitude coordinates, it uses init(title:) to create the structured location. The sample initializes an CLLocation object with the specified latitude and longitude, then assigns it to the created structured location’s geoLocation property:\n\nlet structuredLocation = EKStructuredLocation(title: geofence.title)\nstructuredLocation.geoLocation = CLLocation(latitude: coordinate.latitude, longitude: coordinate.longitude)\n\n\nWhen the location object is an MKMapItem object, the sample uses init(mapItem:) to create the structured location.\n\nlet structuredLocation = EKStructuredLocation(mapItem: mapItem)\n\n\nThen, it sets the structured location’s radius property to a value in meters:\n\n// The app displays the radius's value in miles. Let's convert it from miles to meters before assigning it to the radius property.\nstructuredLocation.radius = 1609.344 * geofence.radius\n\n\nAfter that, it creates an EKAlarm object, then sets its structuredLocation property to the created structured location object. The sample then sets the proximity property to a value to finish configuring the alarm’s geofence:\n\nlet alarm = EKAlarm()\nalarm.structuredLocation = structuredLocation\nalarm.proximity = geofence.proximity\n\n\nThe sample adds the created alarm to the reminder. For more information on adding alarms, see Setting an alarm.\n\nreminder.addAlarm(alarm)\n\n\nFinally, it saves the reminder to the user’s Calendar database:\n\ndo {\n    try store.save(reminder, commit: true)\n} catch {\n    handleError(error, with: reminder.title)\n}\n\nFetch Location-Based Reminders\n\nThe fetchReminders(matching:completion:) method asynchronously fetches all reminders matching a given predicate. When successful, fetchReminders(matching:completion:) returns an array that contains both time-based and location-based reminders.\n\n// Predicate that fetches all reminders in all of the user's calendars.\nlet predicate = store.predicateForReminders(in: nil)\nvar result = [EKReminder]()\n\n\nstore.fetchReminders(matching: predicate, completion: {(reminders: [Any]?) in\n    if let reminders = reminders as? [EKReminder] {\n        // Filter reminders for the location ones.\n        result = reminders.filter({ (item: EKReminder) in item.isLocation })\n    }\n    \n    DispatchQueue.main.async {\n        completion(result)\n    }\n})\n\n\nTo retrieve location-based reminders, the sample parses this array for reminders defined with an existing alarm that has a structuredlocation and proximity value.\n\n/// Indicates whether a reminder is a location-based one.\nvar isLocation: Bool {\n    guard let alarms = self.alarms else { return false }\n    \n    return !alarms.filter({(alarm: EKAlarm) in\n        return (alarm.structuredLocation != nil) && ((alarm.proximity == .enter) || (alarm.proximity == .leave))\n    }).isEmpty\n}\n\nSort Reminders\n\nRetrieving reminders from the Calendar database returns reminders sorted by creation date. To sort an array of EKReminder objects by title, or any other property, the sample implements sorted(by:) on the array with a predicate that uses the property.\n\n /// - Returns: An array of reminders sorted by title in an ascending order.\nfunc sortedByTitle() -> [EKReminder] {\n    return self.sorted(by: { (first: EKReminder, second: EKReminder) in\n        first.title.localizedCaseInsensitiveCompare(second.title) == .orderedAscending\n    })\n}\n\nSee Also\nEvents and reminders\nCreating events and reminders\nCreate and modify events and reminders in a person’s database.\nRetrieving events and reminders\nFetch events and reminders from the Calendar database.\nUpdating with notifications\nRegister for notifications about changes and keep your app up to date.\nclass EKEvent\nA class that represents an event in a calendar.\nclass EKReminder\nA class that represents a reminder in a calendar."
  },
  {
    "title": "EKEventStore | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekeventstore",
    "html": "Overview\n\nThe EKEventStore class is an app’s point of contact for accessing calendar and reminder data.\n\nAfter initializing the event store, you must request access to events or reminders before attempting to fetch or create data. To request access to reminders, call requestFullAccessToReminders(completion:). To request access to events, call requestWriteOnlyAccessToEvents(completion:) or requestFullAccessToEvents(completion:).\n\nImportant\n\nTo request access to events and reminders, your app needs to include permission strings in its Info.plist file that explain to someone why the app needs access. For more information, see Accessing the event store.\n\nA typical workflow for using an event store is:\n\nCreate a predicate, or a search query for events, with predicateForEvents(withStart:end:calendars:).\n\nFetch and process events that match the predicate with the events(matching:) and enumerateEvents(matching:using:) methods.\n\nSave and delete events from the event store with the save(_:span:commit:) and remove(_:span:commit:) methods.\n\nUse similar methods to access and manipulate reminders.\n\nAfter receiving an object from an event store, don’t use that object with a different event store. This restriction applies to EKObject subclasses such as EKEvent, EKReminder, EKCalendar, and EKSource, as well as predicates that the event store creates. For example, don’t fetch an event from one event store, modify the event, and then pass it to save(_:span:) in a different store.\n\nTopics\nCreating event stores\ninit()\nCreates a new event store.\ninit(sources: [EKSource])\nCreates an event store that contains data for the specified sources.\nvar eventStoreIdentifier: String\nThe unique identifier for the event store.\nRequesting access to events and reminders\nfunc requestWriteOnlyAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts the person using your app to grant or deny write access to event data.\nfunc requestFullAccessToEvents(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to event data.\nfunc requestFullAccessToReminders(completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts people to grant or deny read and write access to reminders.\nclass func authorizationStatus(for: EKEntityType) -> EKAuthorizationStatus\nDetermines the authorization status for the given entity type.\nenum EKAuthorizationStatus\nThe current authorization status for a specific entity type.\ntypealias EKEventStoreRequestAccessCompletionHandler\nThe signature for a closure that EventKit calls when requesting access to event and reminder data.\nproperty list key NSCalendarsFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their calendar data.\nName: Privacy - Calendars Full Access Usage Description\nproperty list key NSCalendarsWriteOnlyAccessUsageDescription\nA message that tells people why the app is requesting access to create calendar events.\nName: Privacy - Calendars Write Only Usage Description\nproperty list key NSRemindersFullAccessUsageDescription\nA message that tells people why the app is requesting access to read and write their reminders data.\nName: Privacy - Reminders Full Access Usage Description\nAccessing account sources\nvar sources: [EKSource]\nAn unordered array of objects that represent accounts that contain calendars.\nvar delegateSources: [EKSource]\nThe event sources delegated to the person using your app.\nfunc source(withIdentifier: String) -> EKSource?\nLocates an event source with the specified identifier.\nSaving and restoring state\nfunc commit()\nCommits all unsaved changes to the event store.\nfunc reset()\nReverts the event store to its saved state.\nfunc refreshSourcesIfNecessary()\nPulls new data from remote sources, if necessary.\nAccessing calendars\nvar defaultCalendarForNewEvents: EKCalendar?\nThe calendar that events are added to by default, as specified by user settings.\nfunc defaultCalendarForNewReminders() -> EKCalendar?\nIdentifies the default calendar for adding reminders to, as specified by user settings.\nfunc calendars(for: EKEntityType) -> [EKCalendar]\nIdentifies the calendars that support a given entity type, such as reminders or events.\nfunc calendar(withIdentifier: String) -> EKCalendar?\nLocates a calendar with the specified identifier.\nfunc saveCalendar(EKCalendar, commit: Bool)\nSaves a calendar to the event store by either committing or batching the changes.\nfunc removeCalendar(EKCalendar, commit: Bool)\nRemoves a calendar from the event store by either committing or batching the changes.\nvar calendars: [EKCalendar]\nThe calendars associated with the event store.\nDeprecated\nAccessing calendar events\nfunc event(withIdentifier: String) -> EKEvent?\nLocates the first occurrence of an event with a given identifier.\nfunc calendarItem(withIdentifier: String) -> EKCalendarItem?\nLocates a reminder or the first occurrence of an event with the specified identifier.\nfunc calendarItems(withExternalIdentifier: String) -> [EKCalendarItem]\nLocates all reminders or the first occurrences of all events with the specified external identifier.\nfunc remove(EKEvent, span: EKSpan)\nRemoves an event from the event store.\nfunc remove(EKEvent, span: EKSpan, commit: Bool)\nRemoves an event or recurring events from the event store by either committing or batching the changes.\nfunc remove(EKReminder, commit: Bool)\nRemoves a reminder from the event store by either committing or batching the changes.\nfunc save(EKEvent, span: EKSpan)\nSaves changes to an event permanently.\nfunc save(EKEvent, span: EKSpan, commit: Bool)\nSaves an event or recurring events to the event store by either committing or batching the changes.\nfunc save(EKReminder, commit: Bool)\nSaves changes to a reminder by either committing or batching the changes.\nSearching calendars\nfunc enumerateEvents(matching: NSPredicate, using: EKEventSearchCallback)\nFinds all events that match a given predicate and calls a given callback for each event found.\nfunc events(matching: NSPredicate) -> [EKEvent]\nFinds all events that match a given predicate.\nfunc fetchReminders(matching: NSPredicate, completion: ([EKReminder]?) -> Void) -> Any\nFetches reminders that match a given predicate.\nfunc cancelFetchRequest(Any)\nCancels the request to fetch reminders.\nfunc predicateForEvents(withStart: Date, end: Date, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify events that occur within a given date range.\nfunc predicateForReminders(in: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all reminders in a collection of calendars.\nfunc predicateForCompletedReminders(withCompletionDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all completed reminders that occur within a given date range.\nfunc predicateForIncompleteReminders(withDueDateStarting: Date?, ending: Date?, calendars: [EKCalendar]?) -> NSPredicate\nCreates a predicate to identify all incomplete reminders that occur within a given date range.\ntypealias EKEventSearchCallback\nThe signature for a closure that operates on events when enumerating them.\nDeprecated methods\nfunc requestAccess(to: EKEntityType, completion: EKEventStoreRequestAccessCompletionHandler)\nPrompts the person using your app to grant or deny access to event or reminder data.\nDeprecated\nRelationships\nInherits From\nNSObject\nSee Also\nEssentials\nAccessing the event store\nRequest access to a person’s calendar data through the event store.\nAccessing Calendar using EventKit and EventKitUI\nChoose and implement the appropriate Calendar access level in your app."
  },
  {
    "title": "Creating events and reminders | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/creating_events_and_reminders",
    "html": "Overview\n\nOnce you have permission to access a person’s Calendar and Reminder data, you can create, display, and edit events and reminders.\n\nCreate Events\n\nCreate a new event with the init(eventStore:) method of the EKEvent class.\n\nYou can edit the details of a new event or an event you previously fetched from the Calendar database by setting the event’s corresponding properties. Some of the details you can edit include:\n\nThe event’s title with the title property.\n\nThe event’s start and end dates with the startDate and endDate properties.\n\nThe calendar with which the event is associated with the calendar property.\n\nThe alarms associated with the event with the alarms property (see \"Setting an alarm\" for more details).\n\nThe event’s recurrence rule, if it is a repeating event, with the recurrenceRules property (see \"Creating a recurring event\" for more details).\n\nNote\n\nIn iOS, you have the option of letting users modify event data with the event view controllers provided in the EventKit UI framework. For information on how to use these event view controllers, see EventKit UI.\n\nSave and Delete Events\n\nImportant\n\nIf your app modifies a user’s Calendar database, it must get confirmation from the user before doing so. An app should never modify the Calendar database without specific instruction from the user.\n\nSave your changes to the Calendar database with the EKEventStore method save(_:span:commit:). If you want to remove an event from the Calendar database, use the EKEventStore method remove(_:span:commit:). Whether you are saving or removing an event, implementing the respective method automatically syncs your changes with the calendar the event belongs to (CalDAV, Exchange, and so on).\n\nIf you are saving a recurring event, your changes can apply to all future occurrences of the event by specifying EKSpan.futureEvents for the span parameter of the save(_:span:commit:) method. Likewise, you can remove all future occurrences of an event by specifying EKSpan.futureEvents for the span parameter of the remove(_:span:commit:) method.\n\nNote\n\nIf you pass NO to the commit parameter, make sure that you later invoke the commit() method to permanently save your changes.\n\nCreate Reminders\n\nReminders are tasks that may be tied to a specific time or location. They are similar to calendar events, but can be marked complete and may not necessarily span an exact period of time.\n\nBecause EKReminder inherits from EKCalendarItem, you can perform the same methods on a reminder as you would on an event, such as adding an alarm with addAlarm(_:) or setting a recurrence rule with addRecurrenceRule(_:).\n\nImportant\n\nIf your iOS app links on macOS and you need to access Reminders data, be sure to include the NSRemindersUsageDescription key in your Info.plist file.\n\nYou can create reminders using the init(eventStore:) class method. The title and calendar properties are required. The calendar for a reminder is the list with which it is grouped.\n\nLike events, reminders can trigger time-based or location-based alarms to alert the user of a certain task. Read \"Setting an Alarm\" for more information on how to attach alarms to calendar items.\n\nSave and Delete Reminders\n\nTo save a reminder to the Calendar database, call the save(_:commit:)method. To remove an event, call the remove(_:commit:) method. The title and calendars properties must explicitly be set before you save the reminder.\n\nNote\n\nJust like when saving or removing events, make sure that if you pass NO to the commit parameter, you later invoke the commit() method to save your changes.\n\nEdit Reminders\n\nTo associate a start date or due date with a reminder, use the startDateComponents and dueDateComponents properties. To complete a reminder, set the completed property to YES, which automatically sets completionDate to the current date.\n\nImportant\n\nIf your app modifies a user’s Calendar database, it must get confirmation from the user before doing so. An app should never modify the Calendar database without specific instruction from the user.\n\nSee Also\nEvents and reminders\nRetrieving events and reminders\nFetch events and reminders from the Calendar database.\nUpdating with notifications\nRegister for notifications about changes and keep your app up to date.\nManaging Location-Based Reminders\nAdd, fetch, complete, remove, and sort location-based reminders in your app.\nclass EKEvent\nA class that represents an event in a calendar.\nclass EKReminder\nA class that represents a reminder in a calendar."
  },
  {
    "title": "EKVirtualConferenceDescriptor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferencedescriptor",
    "html": "Overview\n\nWhen users add events to their calendars and use one of the room types that your provider defines, EventKit requests a virtual conference descriptor from your provider. Each virtual conference descriptor contains:\n\nA user-visible name for the virtual conference\n\nOne or more URLs that the users open to join the virtual conference\n\nOptional details about the conference that may be helpful to users\n\nCalendar uses the first URL that you provide as the preferred way for users to join a virtual conference and displays additional URLs as links in the virtual conference details.\n\nImportant\n\nEvents that use your virtual conference descriptors may sync to other devices where your app isn’t installed. To support links to your virtual conference regardless of whether your app is installed, adopt universal links in your app. Universal links let you specify HTTP URLs that open your app if it’s installed or open a corresponding web page if it’s not. For more information about adopting universal links in your app, see Supporting universal links in your app.\n\nTopics\nCreating Conference Descriptors\ninit(title: String?, urlDescriptors: [EKVirtualConferenceURLDescriptor], conferenceDetails: String?)\nCreates an object that describes a virtual conference, including a name and URL to join the conference.\nConfiguring Virtual Conferences\nvar title: String?\nThe user-visible name of the virtual conference.\nvar urlDescriptors: [EKVirtualConferenceURLDescriptor]\nAn array that contains objects with details about where to join the virtual conference.\nclass EKVirtualConferenceURLDescriptor\nDetails about how users join a virtual conference, including a title and URL.\nvar conferenceDetails: String?\nAdditional information about the conference that users may find helpful.\nRelationships\nInherits From\nNSObject\nSee Also\nVirtual conferences\nclass EKVirtualConferenceProvider\nAn object that associates virtual conferencing details with an event object in a user’s calendar.\nclass EKVirtualConferenceRoomTypeDescriptor\nDetails about a room where virtual conferences take place."
  },
  {
    "title": "EKVirtualConferenceProvider | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekvirtualconferenceprovider",
    "html": "Overview\n\nEKVirtualConferenceProvider lets apps that offer virtual conferencing services to integrate directly with events in users’ calendars. To add this support to your app, add a virtual conference extension. The principal class of the app extension is a custom subclass of EKVirtualConferenceProvider that you create that provides the following:\n\nA list of room types where events take place, such as Personal Room or Team Room\n\nA descriptor for a virtual conference, including a user-visible title, one or more URLs, and additional details\n\nProviding Room Details\n\nTo provide a list of rooms, you provide one or more room type descriptors that contain details about where a virtual conference takes place. Each room type descriptor includes a user-visible title and an identifier that you choose. EventKit calls fetchAvailableRoomTypes(completionHandler:) on your virtual conference provider to retrieve an array of EKVirtualConferenceRoomTypeDescriptor objects.\n\nProviding Conference Details\n\nAfter EventKit has the room type descriptors, users can add an event that specifies one of your rooms as the location. To identify the virtual conference event, your virtual conference provider creates a virtual conference descriptor that contains details about the virtual conference. The conference descriptor contains the following:\n\nOne or more EKVirtualConferenceURLDescriptor objects to specify how the user joins the virtual conference\n\nAn optional user-visible title that EventKit may display\n\nAn optional user-visible string with details about the virtual conference that EventKit displays\n\nEventKit calls fetchVirtualConference(identifier:completionHandler:) on your virtual conference provider to retrieve an instance of EKVirtualConferenceDescriptor.\n\nImportant\n\nEvents that use your virtual conference descriptors may sync to other devices where your app isn’t installed. To support links to your virtual conference regardless of whether your app is installed, adopt universal links in your app. Universal links let you specify HTTP URLs that open your app if it’s installed or open a corresponding web page if it’s not. For more information about adopting universal links in your app, see Supporting universal links in your app.\n\nTopics\nProviding Rooms\nfunc fetchAvailableRoomTypes(completionHandler: ([EKVirtualConferenceRoomTypeDescriptor]?, Error?) -> Void)\nProvides an array of room types where events take place.\nProviding Virtual Conferences\nfunc fetchVirtualConference(identifier: EKVirtualConferenceRoomTypeIdentifier, completionHandler: (EKVirtualConferenceDescriptor?, Error?) -> Void)\nProvides details about a virtual conference that takes place in a room the user selects.\nRelationships\nInherits From\nNSObject\nConforms To\nNSExtensionRequestHandling\nSee Also\nVirtual conferences\nclass EKVirtualConferenceDescriptor\nDetails about a virtual conference that uses a custom room type.\nclass EKVirtualConferenceRoomTypeDescriptor\nDetails about a room where virtual conferences take place."
  },
  {
    "title": "EKAlarm | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/ekalarm",
    "html": "Overview\n\nAn EKAlarm object represents an alarm in Event Kit. Use the init(absoluteDate:) and init(relativeOffset:) class methods to create an alarm and use the properties to set information about an alarm. In macOS Mountain Lion, you can specify an action to trigger when the alarm fires via the emailAddress, soundName, or url property.\n\nTopics\nCreating an Alarm\ninit(absoluteDate: Date)\nCreates and returns an alarm with an absolute date.\ninit(relativeOffset: TimeInterval)\nCreates and returns an alarm with a relative offset.\nAccessing Alarm Dates\nvar absoluteDate: Date?\nThe absolute date for the alarm.\nvar relativeOffset: TimeInterval\nThe offset from the start of an event, at which the alarm fires.\nSetting GeoFence-based Alarms\nenum EKAlarmProximity\nA value indicating whether an alarm is triggered by entering or exiting a region.\nvar proximity: EKAlarmProximity\nA value indicating how a location-based alarm is triggered.\nvar structuredLocation: EKStructuredLocation?\nThe location to trigger an alarm.\nTriggering Alarm Actions\nThese properties are only available in macOS 10.8 or later.\nenum EKAlarmType\nA value that specifies what type of action occurs when the alarm triggers.\nvar type: EKAlarmType\nThe type of action to trigger when the alarm fires.\nvar emailAddress: String?\nThe recipient of an email to send when the alarm triggers.\nvar soundName: String?\nThe name of the sound to play when the alarm triggers.\nRelationships\nInherits From\nEKObject\nConforms To\nNSCopying\nSee Also\nAlarms\nSetting an alarm\nAlert users of events and reminders with an alarm.\nclass EKStructuredLocation\nA class that specifies a geofence to activate the alarm of a calendar item."
  },
  {
    "title": "EventKit | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/eventkit/",
    "html": "Overview\n\nThe EventKit framework provides access to calendar and reminders data so people can create, retrieve, and edit calendar items in your app. In iOS, EventKit UI provides user interfaces you can implement in your app so people can create and edit calendar items.\n\nYou can use EventKit to set up alarms and create recurring events. And if a change to the Calendar database occurs from outside your app, EventKit detects the change and sends a notification, allowing your app to stay up to date.\n\nTopics\nEssentials\nAccessing the event store\nRequest access to a person’s calendar data through the event store.\nclass EKEventStore\nAn object that accesses a person’s calendar events and reminders and supports the scheduling of new events.\nAccessing Calendar using EventKit and EventKitUI\nChoose and implement the appropriate Calendar access level in your app.\nEvents and reminders\nCreating events and reminders\nCreate and modify events and reminders in a person’s database.\nRetrieving events and reminders\nFetch events and reminders from the Calendar database.\nUpdating with notifications\nRegister for notifications about changes and keep your app up to date.\nManaging Location-Based Reminders\nAdd, fetch, complete, remove, and sort location-based reminders in your app.\nclass EKEvent\nA class that represents an event in a calendar.\nclass EKReminder\nA class that represents a reminder in a calendar.\nCalendars\nclass EKCalendar\nA class that represents a calendar in EventKit.\nclass EKParticipant\nA class that represents person, group, or room invited to a calendar event.\nRecurrence\nCreating a recurring event\nSet up an event or reminder that repeats.\nclass EKRecurrenceDayOfWeek\nA class that represents the day of the week.\nclass EKRecurrenceEnd\nA class that defines the end of a recurrence rule.\nclass EKRecurrenceRule\nA class that describes the pattern for a recurring event.\nAlarms\nSetting an alarm\nAlert users of events and reminders with an alarm.\nclass EKAlarm\nA class that represents an alarm.\nclass EKStructuredLocation\nA class that specifies a geofence to activate the alarm of a calendar item.\nCommon objects\nclass EKCalendarItem\nAn abstract superclass for calendar events and reminders.\nclass EKObject\nAn abstract superclass for all EventKit classes that have persistent instances.\nclass EKSource\nAn abstract superclass that represents the account a calendar belongs to.\nVirtual conferences\nclass EKVirtualConferenceProvider\nAn object that associates virtual conferencing details with an event object in a user’s calendar.\nclass EKVirtualConferenceDescriptor\nDetails about a virtual conference that uses a custom room type.\nclass EKVirtualConferenceRoomTypeDescriptor\nDetails about a room where virtual conferences take place.\nErrors\nstruct EKError\nAn EventKit error.\nenum EKError.Code\nError codes for EventKit errors.\nlet EKErrorDomain: String\nA string that identifies the EventKit error domain."
  }
]