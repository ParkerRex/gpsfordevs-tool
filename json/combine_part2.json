[
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/makeconnectable/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/first/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to merge."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-handleevents-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/measureinterval/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet scheduler: Context\nThe scheduler used for tracking the timing of events."
    },
    {
        "title": "Publishers.MeasureInterval.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/measureinterval/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.MakeConnectable.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/makeconnectable/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "connect()",
        "url": "https://developer.apple.com/documentation/combine/publishers/makeconnectable/connect()",
        "html": "Return Value\n\nA Cancellable instance that you use to cancel publishing."
    },
    {
        "title": "ConnectablePublisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/makeconnectable/connectablepublisher-implementations",
        "html": "Topics\nInstance Methods\nfunc autoconnect() -> Publishers.Autoconnect<Self>\nAutomates the process of connecting or disconnecting from this connectable publisher."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/makeconnectable/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which to receive elements."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-timeout-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-tryprefixwhile-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "init(upstream:receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/init(upstream:receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nreceiveSubscription\n\nA closure that executes when the publisher receives the subscription from the upstream publisher.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value from the upstream publisher.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives the completion from the upstream publisher.\n\nreceiveCancel\n\nA closure that executes when the downstream receiver cancels publishing.\n\nreceiveRequest\n\nA closure that executes when the publisher receives a request for more elements."
    },
    {
        "title": "receiveCompletion",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/receivecompletion",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nvar receiveSubscription: ((Subscription) -> Void)?\nA closure that executes when the publisher receives the subscription from the upstream publisher.\nvar receiveOutput: ((Publishers.HandleEvents<Upstream>.Output) -> Void)?\nA closure that executes when the publisher receives a value from the upstream publisher.\nvar receiveCancel: (() -> Void)?\nA closure that executes when the downstream receiver cancels publishing.\nvar receiveRequest: ((Subscribers.Demand) -> Void)?\nA closure that executes when the publisher receives a request for more elements."
    },
    {
        "title": "receiveOutput",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/receiveoutput",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nvar receiveSubscription: ((Subscription) -> Void)?\nA closure that executes when the publisher receives the subscription from the upstream publisher.\nvar receiveCompletion: ((Subscribers.Completion<Publishers.HandleEvents<Upstream>.Failure>) -> Void)?\nA closure that executes when the upstream publisher finishes normally or terminates with an error.\nvar receiveCancel: (() -> Void)?\nA closure that executes when the downstream receiver cancels publishing.\nvar receiveRequest: ((Subscribers.Demand) -> Void)?\nA closure that executes when the publisher receives a request for more elements."
    },
    {
        "title": "receiveCancel",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/receivecancel",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nvar receiveSubscription: ((Subscription) -> Void)?\nA closure that executes when the publisher receives the subscription from the upstream publisher.\nvar receiveOutput: ((Publishers.HandleEvents<Upstream>.Output) -> Void)?\nA closure that executes when the publisher receives a value from the upstream publisher.\nvar receiveCompletion: ((Subscribers.Completion<Publishers.HandleEvents<Upstream>.Failure>) -> Void)?\nA closure that executes when the upstream publisher finishes normally or terminates with an error.\nvar receiveRequest: ((Subscribers.Demand) -> Void)?\nA closure that executes when the publisher receives a request for more elements."
    },
    {
        "title": "Publishers.HandleEvents.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "interval",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout/interval",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet scheduler: Context\nThe scheduler on which to deliver events.\nlet options: Context.SchedulerOptions?\nScheduler options that customize the delivery of elements.\nlet customError: (() -> Publishers.Timeout<Upstream, Context>.Failure)?\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination."
    },
    {
        "title": "init(upstream:size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/buffer/init(upstream:size:prefetch:whenfull:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy for initially populating the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full."
    },
    {
        "title": "CustomCombineIdentifierConvertible Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/customcombineidentifierconvertible-implementations",
        "html": "Topics\nInstance Properties\nvar combineIdentifier: CombineIdentifier\nA unique identifier for identifying publisher streams."
    },
    {
        "title": "Subscriber Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/subscriber-implementations",
        "html": "Topics\nInstance Methods\nfunc receive() -> Subscribers.Demand\nTells the subscriber that a publisher of void elements is ready to receive further requests.\nAvailable when Input is ()."
    },
    {
        "title": "receive(subscription:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/receive(subscription:)",
        "html": "Parameters\nsubscription\n\nA subscription that represents the connection between publisher and subscriber.\n\nDiscussion\n\nUse the received Subscription to request items from the publisher."
    },
    {
        "title": "receive(_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/receive(_:)",
        "html": "Parameters\ninput\n\nThe published element.\n\nDiscussion\n\nA Subscribers.Demand instance indicating how many more elements the subscriber expects to receive."
    },
    {
        "title": "receive(completion:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/receive(completion:)",
        "html": "Parameters\ncompletion\n\nA Subscribers.Completion case indicating whether publishing completed normally or with an error."
    },
    {
        "title": "Publishers.Buffer.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/buffer/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "initialResult",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryscan/initialresult",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet nextPartialResult: (Output, Upstream.Output) throws -> Output\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryremoveduplicates/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.TryRemoveDuplicates.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryremoveduplicates/failure",
        "html": "Discussion\n\nUse Never if this Publisher does not publish errors.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/switchtolatest/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/throttle/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryreduce/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-tryreduce-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-maperror-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/share/==(_:_:)",
        "html": "Parameters\nlhs\n\nA Share publisher to compare for equality.\n\nrhs\n\nAnother Share publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have reference equality (===); otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "scheduler",
        "url": "https://developer.apple.com/documentation/combine/publishers/throttle/scheduler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe interval in which to find and emit the most recent element.\nlet latest: Bool\nA Boolean value indicating whether to publish the most recent element."
    },
    {
        "title": "Publishers.TryAllSatisfy.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryallsatisfy/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "init(upstream:handler:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycatch/init(upstream:handler:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives its elements.\n\nhandler\n\nA closure that accepts the upstream failure as input and either returns a publisher to replace the upstream publisher. If this closure throws an error, the publisher terminates with the thrown error."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-tryfirstwhere-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryprefixwhile/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nThe error-throwing closure that determines whether publishing should continue."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryprefixwhile/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.TryPrefixWhile<Upstream>.Output) throws -> Bool\nThe error-throwing closure that determines whether publishing should continue."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfirstwhere/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.TryPrefixWhile.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryprefixwhile/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryreduce/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet initial: Output\nThe initial value provided on the first-use of the closure.\nlet nextPartialResult: (Output, Upstream.Output) throws -> Output\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream to produce a new value."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycatch/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.TryReduce.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryreduce/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "init(upstream:initial:nextPartialResult:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryreduce/init(upstream:initial:nextpartialresult:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ninitial\n\nThe initial value provided on the first-use of the closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream to produce a new value. If this closure throws an error, the publisher fails and passes the error to its subscriber."
    },
    {
        "title": "Publishers.TryFirstWhere.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfirstwhere/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfirstwhere/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.TryFirstWhere<Upstream>.Output) throws -> Bool\nThe error-throwing closure that determines whether to publish an element."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfirstwhere/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "transform",
        "url": "https://developer.apple.com/documentation/combine/publishers/maperror/transform",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-trymap-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>((Output) -> T) -> Publishers.TryMap<Upstream, T>\nAvailable when Upstream conforms to Publisher.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMap<T>((Output) throws -> T) -> Publishers.TryMap<Upstream, T>\nAvailable when Upstream conforms to Publisher.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.TryCatch.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycatch/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet interval: Context.SchedulerTimeType.Stride\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\nlet scheduler: Context\nThe scheduler on which to deliver events.\nlet options: Context.SchedulerOptions?\nScheduler options that customize the delivery of elements.\nlet customError: (() -> Publishers.Timeout<Upstream, Context>.Failure)?\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/trymap/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.Timeout.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Merge<A, B>, Publishers.Merge<A, B>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, A.Failure is B.Failure, and A.Output is B.Output."
    },
    {
        "title": "Publishers.MapError.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/maperror/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type."
    },
    {
        "title": "init(upstream:transform:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/maperror/init(upstream:transform:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ntransform\n\nThe closure that converts the upstream failure into a new error.\n\nSee Also\nCreating a Map Error Publisher\ninit(upstream: Upstream, (Upstream.Failure) -> Failure)"
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/maperror/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet transform: (Upstream.Failure) -> Failure\nThe closure that converts the upstream failure into a new error."
    },
    {
        "title": "Publishers.TryMap.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/trymap/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-replaceempty-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/first/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "init(upstream:output:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/init(upstream:output:)",
        "html": "Parameters\nupstream\n\nThe element to deliver when the upstream publisher finishes without delivering any elements.\n\noutput\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/trymap/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet transform: (Upstream.Output) throws -> Output\nThe error-throwing closure that transforms elements from the upstream publisher."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/share/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/reduce/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/first/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.First<Upstream>, Publishers.First<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two first publishers have equal upstream publishers.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/first/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.First<Upstream>, Publishers.First<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two first publishers have equal upstream publishers.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/scan/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "receiveSubscription",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/receivesubscription",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nvar receiveOutput: ((Publishers.HandleEvents<Upstream>.Output) -> Void)?\nA closure that executes when the publisher receives a value from the upstream publisher.\nvar receiveCompletion: ((Subscribers.Completion<Publishers.HandleEvents<Upstream>.Failure>) -> Void)?\nA closure that executes when the upstream publisher finishes normally or terminates with an error.\nvar receiveCancel: (() -> Void)?\nA closure that executes when the downstream receiver cancels publishing.\nvar receiveRequest: ((Subscribers.Demand) -> Void)?\nA closure that executes when the publisher receives a request for more elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/upstream",
        "html": "See Also\nInspecting Publisher Properties\nvar receiveSubscription: ((Subscription) -> Void)?\nA closure that executes when the publisher receives the subscription from the upstream publisher.\nvar receiveOutput: ((Publishers.HandleEvents<Upstream>.Output) -> Void)?\nA closure that executes when the publisher receives a value from the upstream publisher.\nvar receiveCompletion: ((Subscribers.Completion<Publishers.HandleEvents<Upstream>.Failure>) -> Void)?\nA closure that executes when the upstream publisher finishes normally or terminates with an error.\nvar receiveCancel: (() -> Void)?\nA closure that executes when the downstream receiver cancels publishing.\nvar receiveRequest: ((Subscribers.Demand) -> Void)?\nA closure that executes when the publisher receives a request for more elements."
    },
    {
        "title": "Publishers.HandleEvents.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "scheduler",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout/scheduler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\nlet options: Context.SchedulerOptions?\nScheduler options that customize the delivery of elements.\nlet customError: (() -> Publishers.Timeout<Upstream, Context>.Failure)?\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination."
    },
    {
        "title": "customError",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout/customerror",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\nlet scheduler: Context\nThe scheduler on which to deliver events.\nlet options: Context.SchedulerOptions?\nScheduler options that customize the delivery of elements."
    },
    {
        "title": "Publishers.Scan.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/scan/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/switchtolatest/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.SwitchToLatest.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/switchtolatest/failure",
        "html": "Discussion\n\nThis publisher produces errors of the type produced by the upstream publisher-of-publishers.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-switchtolatest-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.Throttle.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/throttle/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/throttle/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet interval: Context.SchedulerTimeType.Stride\nThe interval in which to find and emit the most recent element.\nlet scheduler: Context\nThe scheduler on which to publish elements.\nlet latest: Bool\nA Boolean value indicating whether to publish the most recent element."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-throttle-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryallsatisfy/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-tryallsatisfy-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "latest",
        "url": "https://developer.apple.com/documentation/combine/publishers/throttle/latest",
        "html": "Discussion\n\nIf false, the publisher emits the first element received during the interval.\n\nSee Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe interval in which to find and emit the most recent element.\nlet scheduler: Context\nThe scheduler on which to publish elements."
    },
    {
        "title": "interval",
        "url": "https://developer.apple.com/documentation/combine/publishers/throttle/interval",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet scheduler: Context\nThe scheduler on which to publish elements.\nlet latest: Bool\nA Boolean value indicating whether to publish the most recent element."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryallsatisfy/predicate",
        "html": "Discussion\n\nReturn true to continue, or false to cancel the upstream and complete. The closure may throw, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nSee Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/share/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryallsatisfy/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Upstream.Output) throws -> Bool\nA closure that evaluates each received element."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryallsatisfy/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nA closure that evaluates each received element."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/share/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Share<Upstream>, Publishers.Share<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent."
    },
    {
        "title": "Publishers.Share.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/share/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/==(_:_:)",
        "html": "Parameters\nlhs\n\nA merging publisher to compare for equality.\n\nrhs\n\nAnother merging publisher to compare for equality.\n\nReturn Value\n\ntrue if the two merging publishers have equal source publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryprefixwhile/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.TryPrefixWhile.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryprefixwhile/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "initial",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryreduce/initial",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet nextPartialResult: (Output, Upstream.Output) throws -> Output\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream to produce a new value."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/setfailuretype/==(_:_:)",
        "html": "Parameters\nlhs\n\nA SetFailureType publisher to compare for equality.\n\nrhs\n\nAnother SetFailureType publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal upstream properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "init(upstream:initialResult:nextPartialResult:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/scan/init(upstream:initialresult:nextpartialresult:)",
        "html": "Parameters\nupstream\n\nThe publisher that this publisher receives elements from.\n\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher."
    },
    {
        "title": "handler",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycatch/handler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements."
    },
    {
        "title": "Publishers.TryCatch.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycatch/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.Timeout.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:interval:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout/init(upstream:interval:scheduler:options:customerror:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-share-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycatch/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet handler: (Upstream.Failure) throws -> NewPublisher\nA closure that accepts the upstream failure as input and either returns a publisher to replace the upstream publisher or throws an error."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-subscribeon-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-replaceerror-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "init(upstream:transform:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/trymap/init(upstream:transform:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ntransform\n\nThe error-throwing closure that transforms elements from the upstream publisher."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/setfailuretype/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.SetFailureType<Upstream, Failure>, Publishers.SetFailureType<Upstream, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, Failure conforms to Error, and Upstream.Failure is Never."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/removeduplicates/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/removeduplicates/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/share/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncPublisher<Self>\nThe elements produced by the publisher, as an asynchronous sequence.\nAvailable when Failure is Never.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "init(upstream:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/subscribeon/init(upstream:scheduler:options:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nscheduler\n\nThe scheduler the publisher should use to receive elements.\n\noptions\n\nScheduler options that customize the delivery of elements."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/==(_:_:)",
        "html": "Parameters\nlhs\n\nA replace empty publisher to compare for equality.\n\nrhs\n\nAnother replace empty publisher to compare for equality.\n\nReturn Value\n\ntrue if the two publishers have equal upstream publishers and output elements; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-reduce-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.ReplaceEmpty<Upstream>, Publishers.ReplaceEmpty<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.ReplaceEmpty<Upstream>, Publishers.ReplaceEmpty<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/==(_:_:)",
        "html": "Parameters\nlhs\n\nA replace error publisher to compare for equality.\n\nrhs\n\nAnother replace error publisher to compare for equality.\n\nReturn Value\n\ntrue if the two publishers have equal upstream publishers and output elements; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-trycompactmap-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc compactMap<T>((Output) throws -> T?) -> Publishers.TryCompactMap<Upstream, T>\nAvailable when Upstream conforms to Publisher.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.ReplaceError<Upstream>, Publishers.ReplaceError<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.ReplaceError<Upstream>, Publishers.ReplaceError<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycompactmap/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-scan-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/reduce/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet initial: Output\nThe initial value provided on the first invocation of the closure.\nlet nextPartialResult: (Output, Upstream.Output) -> Output\nA closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value."
    },
    {
        "title": "initial",
        "url": "https://developer.apple.com/documentation/combine/publishers/reduce/initial",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet nextPartialResult: (Output, Upstream.Output) -> Output\nA closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value."
    },
    {
        "title": "init(upstream:initial:nextPartialResult:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/reduce/init(upstream:initial:nextpartialresult:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ninitial\n\nThe initial value provided on the first invocation of the closure.\n\nnextPartialResult\n\nA closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value."
    },
    {
        "title": "Publishers.Reduce.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/reduce/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "transform",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycompactmap/transform",
        "html": "Discussion\n\nIf this closure throws an error, the publisher fails.\n\nSee Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycompactmap/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet transform: (Upstream.Output) throws -> Output?\nAn error-throwing closure that receives values from the upstream publisher and returns optional values."
    },
    {
        "title": "Publishers.TryCompactMap.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycompactmap/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "nextPartialResult",
        "url": "https://developer.apple.com/documentation/combine/publishers/scan/nextpartialresult",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet initialResult: Output\nThe previous result returned by the nextPartialResult closure."
    },
    {
        "title": "initialResult",
        "url": "https://developer.apple.com/documentation/combine/publishers/scan/initialresult",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet nextPartialResult: (Output, Upstream.Output) -> Output\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/scan/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet initialResult: Output\nThe previous result returned by the nextPartialResult closure.\nlet nextPartialResult: (Output, Upstream.Output) -> Output\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher."
    },
    {
        "title": "Publishers.SwitchToLatest.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/switchtolatest/output",
        "html": "Discussion\n\nThis publisher produces elements of the type produced by the upstream publisher-of-publishers.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.Throttle.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/throttle/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.TryAllSatisfy.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryallsatisfy/output",
        "html": "Discussion\n\nThis publisher produces Boolean elements.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.Share.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/share/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-setfailuretype-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Upstream, E>\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/setfailuretype/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "e",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/e",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge.\nlet h: H\nA eighth publisher to merge."
    },
    {
        "title": "line",
        "url": "https://developer.apple.com/documentation/combine/publishers/assertnofailure/line",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet file: StaticString\nThe filename used in the error message.\nlet prefix: String\nThe string used at the beginning of the fatal error message."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/removeduplicates/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Merge8<A, B, C, D, E, F, G, H>, Publishers.Merge8<A, B, C, D, E, F, G, H>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, F conforms to Publisher, F conforms to Equatable, G conforms to Publisher, G conforms to Equatable, H conforms to Publisher, H conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, D.Output is E.Output, E.Failure is F.Failure, E.Output is F.Output, F.Failure is G.Failure, F.Output is G.Output, G.Failure is H.Failure, and G.Output is H.Output."
    },
    {
        "title": "init(_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/init(_:_:_:_:_:)",
        "html": "Parameters\na\n\nA publisher to merge\n\nb\n\nA second publisher to merge.\n\nc\n\nA third publisher to merge.\n\nd\n\nA fourth publisher to merge.\n\ne\n\nA fifth publisher to merge."
    },
    {
        "title": "d",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/d",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet e: E\nA fifth publisher to merge."
    },
    {
        "title": "Publishers.Merge5.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/subscribeon/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.CombineLatest3<A, B, C>, Publishers.CombineLatest3<A, B, C>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, and B.Failure is C.Failure."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-removeduplicates-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "options",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce/options",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet dueTime: Context.SchedulerTimeType.Stride\nThe amount of time the publisher should wait before publishing an element.\nlet scheduler: Context\nThe scheduler on which this publisher delivers elements."
    },
    {
        "title": "Publishers.SetFailureType.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/setfailuretype/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type."
    },
    {
        "title": "Publishers.SubscribeOn.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/subscribeon/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "scheduler",
        "url": "https://developer.apple.com/documentation/combine/publishers/subscribeon/scheduler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet options: Context.SchedulerOptions?\nScheduler options that customize the delivery of elements."
    },
    {
        "title": "options",
        "url": "https://developer.apple.com/documentation/combine/publishers/subscribeon/options",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet scheduler: Context\nThe scheduler the publisher should use to receive elements."
    },
    {
        "title": "Publishers.SubscribeOn.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/subscribeon/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(_:_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/init(_:_:_:_:_:_:_:_:)",
        "html": "Parameters\na\n\nA publisher to merge\n\nb\n\nA second publisher to merge.\n\nc\n\nA third publisher to merge.\n\nd\n\nA fourth publisher to merge.\n\ne\n\nA fifth publisher to merge.\n\nf\n\nA sixth publisher to merge.\n\ng\n\nAn seventh publisher to merge.\n\nh\n\nAn eighth publisher to merge."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/removeduplicates/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.RemoveDuplicates<Upstream>.Output, Publishers.RemoveDuplicates<Upstream>.Output) -> Bool\nThe predicate closure used to evaluate whether two elements are duplicates."
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest4/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nlet b: B\nlet d: D"
    },
    {
        "title": "Publishers.CombineLatest4.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest4/output",
        "html": "Discussion\n\nThis publisher produces four-element tuples of the upstream publishers\u2019 output types.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.RemoveDuplicates.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/removeduplicates/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.RemoveDuplicates.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/removeduplicates/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.ReplaceEmpty.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "output",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/output-swift.property",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet output: Publishers.ReplaceEmpty<Upstream>.Output\nThe element to deliver when the upstream publisher finishes without delivering any elements.\nlet output: Publishers.ReplaceEmpty<Upstream>.Output\nThe element to deliver when the upstream publisher finishes without delivering any elements."
    },
    {
        "title": "output",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/output-swift.property",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.ReplaceEmpty.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty/output-swift.typealias",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet output: Publishers.ReplaceError<Upstream>.Output\nThe element with which to replace errors from the upstream publisher.\nlet output: Publishers.ReplaceError<Upstream>.Output\nThe element with which to replace errors from the upstream publisher."
    },
    {
        "title": "Publishers.ReplaceError.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/output-swift.typealias",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.ReplaceError.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/failure",
        "html": "Discussion\n\nThis publisher never fails.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "nextPartialResult",
        "url": "https://developer.apple.com/documentation/combine/publishers/reduce/nextpartialresult",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet initial: Output\nThe initial value provided on the first invocation of the closure."
    },
    {
        "title": "init(upstream:output:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror/init(upstream:output:)",
        "html": "Parameters\nupstream\n\nThe element with which to replace errors from the upstream publisher.\n\noutput\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-collectbycount-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-merge8-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.CombineLatest4.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest4/failure",
        "html": "Discussion\n\nThis publisher produces the failure type shared by its upstream publishers.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge.\nlet h: H\nA eighth publisher to merge."
    },
    {
        "title": "d",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/d",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge.\nlet h: H\nA eighth publisher to merge."
    },
    {
        "title": "Publishers.Merge8.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Merge8.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/output",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount/==(_:_:)",
        "html": "Parameters\nlhs\n\nA CollectByCount instance to compare.\n\nrhs\n\nAnother CollectByCount instance to compare.\n\nReturn Value\n\ntrue if the corresponding upstream and count properties of each publisher are equal; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.CollectByCount<Upstream>, Publishers.CollectByCount<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge.\nlet h: H\nA eighth publisher to merge."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge.\nlet h: H\nA eighth publisher to merge."
    },
    {
        "title": "g",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/g",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet h: H\nA eighth publisher to merge."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet count: Int\nThe maximum number of received elements to buffer before publishing."
    },
    {
        "title": "f",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/f",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet g: G\nAn seventh publisher to merge.\nlet h: H\nA eighth publisher to merge."
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge."
    },
    {
        "title": "e",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/e",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/==(_:_:)",
        "html": "Parameters\nlhs\n\nA merging publisher to compare for equality.\n\nrhs\n\nAnother merging publisher to compare for equality.\n\nReturn Value\n\ntrue if the two merging publishers have equal source publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-merge5-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge6<A, B, C, D, E, P>\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y>(with: Z, Y) -> Publishers.Merge7<A, B, C, D, E, Z, Y>\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X>(with: Z, Y, X) -> Publishers.Merge8<A, B, C, D, E, Z, Y, X>\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Merge5<A, B, C, D, E>, Publishers.Merge5<A, B, C, D, E>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, and D.Output is E.Output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-merge4-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge5<A, B, C, D, P>\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y>(with: Z, Y) -> Publishers.Merge6<A, B, C, D, Z, Y>\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X>(with: Z, Y, X) -> Publishers.Merge7<A, B, C, D, Z, Y, X>\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X, W>(with: Z, Y, X, W) -> Publishers.Merge8<A, B, C, D, Z, Y, X, W>\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-combinelatest3-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.Merge4.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/output",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/init(_:_:_:_:)",
        "html": "Parameters\na\n\nA publisher to merge\n\nb\n\nA second publisher to merge.\n\nc\n\nA third publisher to merge.\n\nd\n\nA fourth publisher to merge."
    },
    {
        "title": "Publishers.Merge4.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge."
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet d: D\nA fourth publisher to merge."
    },
    {
        "title": "d",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/d",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Merge4<A, B, C, D>, Publishers.Merge4<A, B, C, D>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, and C.Output is D.Output."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.CombineLatest3<A, B, C>, Publishers.CombineLatest3<A, B, C>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, and B.Failure is C.Failure."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/==(_:_:)",
        "html": "Parameters\nlhs\n\nA merging publisher to compare for equality.\n\nrhs\n\nAnother merging publisher to compare for equality.\n\nReturn Value\n\ntrue if the two merging publishers have equal source publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/==(_:_:)",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nlet b: B"
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Merge4<A, B, C, D>, Publishers.Merge4<A, B, C, D>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, and C.Output is D.Output."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nlet c: C"
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nlet c: C"
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/setfailuretype/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.SetFailureType<Upstream, Failure>, Publishers.SetFailureType<Upstream, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, Failure conforms to Error, and Upstream.Failure is Never."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest4/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-combinelatest4-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "init(upstream:dueTime:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce/init(upstream:duetime:scheduler:options:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ndueTime\n\nThe amount of time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements.\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/setfailuretype/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/subscribeon/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet scheduler: Context\nThe scheduler the publisher should use to receive elements.\nlet options: Context.SchedulerOptions?\nScheduler options that customize the delivery of elements."
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-assertnofailure-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Merge3<A, B, C>, Publishers.Merge3<A, B, C>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, and B.Output is C.Output."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath3/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet keyPath0: KeyPath<Upstream.Output, Output0>\nThe key path of a property to publish.\nlet keyPath1: KeyPath<Upstream.Output, Output1>\nThe key path of a second property to publish.\nlet keyPath2: KeyPath<Upstream.Output, Output2>\nThe key path of a third property to publish."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbytime/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest4/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nlet c: C\nlet d: D"
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-collectbytime-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "d",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest4/d",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nlet b: B\nlet c: C"
    },
    {
        "title": "Publishers.CollectByTime.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbytime/output",
        "html": "Discussion\n\nThis publisher publishes arrays of its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-catch-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.AssertNoFailure.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/assertnofailure/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:prefix:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/assertnofailure/init(upstream:prefix:file:line:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nprefix\n\nThe string used at the beginning of the fatal error message.\n\nfile\n\nThe filename used in the error message.\n\nline\n\nThe line number used in the error message."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbytime/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet strategy: Publishers.TimeGroupingStrategy<Context>\nThe strategy with which to collect and publish elements.\nlet options: Context.SchedulerOptions?\nScheduler options to use for the strategy."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/assertnofailure/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet file: StaticString\nThe filename used in the error message.\nlet line: UInt\nThe line number used in the error message.\nlet prefix: String\nThe string used at the beginning of the fatal error message."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/catch/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.Catch.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/catch/failure",
        "html": "Discussion\n\nThis publisher uses the replacement publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "init(upstream:handler:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/catch/init(upstream:handler:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives its elements.\n\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher."
    },
    {
        "title": "init(upstream:count:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount/init(upstream:count:)",
        "html": "Parameters\nupstream\n\nThe publisher that this publisher receives elements from.\n\ncount\n\nThe maximum number of received elements to buffer before publishing."
    },
    {
        "title": "Publishers.CollectByCount.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "h",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8/h",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge."
    },
    {
        "title": "Publishers.Collect.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/collect/output",
        "html": "Discussion\n\nThis publisher publishes arrays of its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/collect/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher that this publisher receives elements from."
    },
    {
        "title": "Publishers.Collect.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/collect/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/collect/==(_:_:)",
        "html": "Parameters\nlhs\n\nA Collect instance to compare.\n\nrhs\n\nAnother Collect instance to compare.\n\nReturn Value\n\ntrue if the corresponding upstream properties of each publisher are equal; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publishers.Catch.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/catch/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Merge5<A, B, C, D, E>, Publishers.Merge5<A, B, C, D, E>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, and D.Output is E.Output."
    },
    {
        "title": "Publishers.Merge5.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5/output",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.CombineLatest3.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/failure",
        "html": "Discussion\n\nThis publisher produces the failure type shared by its upstream publishers.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-last-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-flatmap-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/last/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/last/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Last<Upstream>, Publishers.Last<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/lastwhere/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nThe closure that determines whether to publish an element."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-debounce-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/collect/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet dueTime: Context.SchedulerTimeType.Stride\nThe amount of time the publisher should wait before publishing an element.\nlet scheduler: Context\nThe scheduler on which this publisher delivers elements.\nlet options: Context.SchedulerOptions?\nScheduler options that customize this publisher\u2019s delivery of elements."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-collect-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/last/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath3/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-mapkeypath3-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.Debounce.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/collect/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Collect<Upstream>, Publishers.Collect<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-mapkeypath-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/assertnofailure/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncPublisher<Self>\nThe elements produced by the publisher, as an asynchronous sequence.\nAvailable when Failure is Never.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/collect/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Collect<Upstream>, Publishers.Collect<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "Publishers.Debounce.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-merge3-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge4<A, B, C, P>\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y>(with: Z, Y) -> Publishers.Merge5<A, B, C, Z, Y>\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X>(with: Z, Y, X) -> Publishers.Merge6<A, B, C, Z, Y, X>\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X, W>(with: Z, Y, X, W) -> Publishers.Merge7<A, B, C, Z, Y, X, W>\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X, W, V>(with: Z, Y, X, W, V) -> Publishers.Merge8<A, B, C, Z, Y, X, W, V>\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.MapKeyPath3.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath3/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Merge3.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Merge3.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/output",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet c: C\nA third publisher to merge."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-firstwhere-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/==(_:_:)",
        "html": "Parameters\nlhs\n\nA merging publisher to compare for equality.\n\nrhs\n\nAnother merging publisher to compare for equality.\n\nReturn Value\n\ntrue if the two merging publishers have equal source publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/ignoreoutput/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.IgnoreOutput<Upstream>, Publishers.IgnoreOutput<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Merge3<A, B, C>, Publishers.Merge3<A, B, C>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, and B.Output is C.Output."
    },
    {
        "title": "Publishers.IgnoreOutput.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/ignoreoutput/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Delay.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.FirstWhere.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/firstwhere/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.CombineLatest3.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3/output",
        "html": "Discussion\n\nThis publisher produces three-element tuples of the upstream publishers\u2019 output types.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "interval",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/interval",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet tolerance: Context.SchedulerTimeType.Stride\nThe allowed tolerance in firing delayed events.\nlet scheduler: Context\nThe scheduler to deliver the delayed events.\nlet options: Context.SchedulerOptions?\nOptions relevant to the scheduler\u2019s behavior."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest4/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.CombineLatest4<A, B, C, D>, Publishers.CombineLatest4<A, B, C, D>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, A.Failure is B.Failure, B.Failure is C.Failure, and C.Failure is D.Failure."
    },
    {
        "title": "strategy",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbytime/strategy",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet options: Context.SchedulerOptions?\nScheduler options to use for the strategy."
    },
    {
        "title": "Publishers.CollectByTime.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbytime/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "options",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbytime/options",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet strategy: Publishers.TimeGroupingStrategy<Context>\nThe strategy with which to collect and publish elements."
    },
    {
        "title": "init(upstream:strategy:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbytime/init(upstream:strategy:options:)",
        "html": "Parameters\nupstream\n\nThe publisher that this publisher receives elements from.\n\nstrategy\n\nThe strategy with which to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy."
    },
    {
        "title": "file",
        "url": "https://developer.apple.com/documentation/combine/publishers/assertnofailure/file",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet line: UInt\nThe line number used in the error message.\nlet prefix: String\nThe string used at the beginning of the fatal error message."
    },
    {
        "title": "prefix",
        "url": "https://developer.apple.com/documentation/combine/publishers/assertnofailure/prefix",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet file: StaticString\nThe filename used in the error message.\nlet line: UInt\nThe line number used in the error message."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/catch/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet handler: (Upstream.Failure) -> NewPublisher\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher."
    },
    {
        "title": "handler",
        "url": "https://developer.apple.com/documentation/combine/publishers/catch/handler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements."
    },
    {
        "title": "count",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount/count",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.CollectByCount<Upstream>, Publishers.CollectByCount<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet interval: Context.SchedulerTimeType.Stride\nThe amount of time to delay.\nlet tolerance: Context.SchedulerTimeType.Stride\nThe allowed tolerance in firing delayed events.\nlet scheduler: Context\nThe scheduler to deliver the delayed events.\nlet options: Context.SchedulerOptions?\nOptions relevant to the scheduler\u2019s behavior."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "init(upstream:interval:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/init(upstream:interval:tolerance:scheduler:options:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives its elements.\n\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior."
    },
    {
        "title": "options",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/options",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe amount of time to delay.\nlet tolerance: Context.SchedulerTimeType.Stride\nThe allowed tolerance in firing delayed events.\nlet scheduler: Context\nThe scheduler to deliver the delayed events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-lastwhere-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/lastwhere/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/trylastwhere/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nThe error-throwing closure that determines whether to publish an element."
    },
    {
        "title": "Publishers.TryLastWhere.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/trylastwhere/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/==(_:_:)",
        "html": "Parameters\nlhs\n\nA concatenate publisher to compare for equality.\n\nrhs\n\nAnother concatenate publisher to compare for equality.\n\nReturn Value\n\ntrue if the two publishers\u2019 prefix and suffix properties are equal; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/published-publisher-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropwhile/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.DropWhile.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropwhile/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-prefixuntiloutput-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.LastWhere.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/lastwhere/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/lastwhere/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "transform",
        "url": "https://developer.apple.com/documentation/combine/publishers/compactmap/transform",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/lastwhere/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.LastWhere<Upstream>.Output) -> Bool\nThe closure that determines whether to publish an element."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/flatmap/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/published/publisher/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncPublisher<Self>\nThe elements produced by the publisher, as an asynchronous sequence.\nAvailable when Failure is Never.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/last/==(_:_:)",
        "html": "Parameters\nlhs\n\nA last publisher to compare for equality.\n\nrhs\n\nAnother last publisher to compare for equality.\n\nReturn Value\n\ntrue if the two publishers have equal upstream publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publishers.Last.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/last/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Last.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/last/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/last/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Last<Upstream>, Publishers.Last<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "transform",
        "url": "https://developer.apple.com/documentation/combine/publishers/flatmap/transform",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet maxPublishers: Subscribers.Demand\nThe maximum number of concurrent publisher subscriptions"
    },
    {
        "title": "maxPublishers",
        "url": "https://developer.apple.com/documentation/combine/publishers/flatmap/maxpublishers",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet transform: (Upstream.Output) -> NewPublisher\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/published/publisher/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Published.Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Published.Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method."
    },
    {
        "title": "Published.Publisher.Failure",
        "url": "https://developer.apple.com/documentation/combine/published/publisher/failure",
        "html": "Discussion\n\nUse Never if this Publisher does not publish errors.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.FlatMap.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/flatmap/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Published.Publisher.Output",
        "url": "https://developer.apple.com/documentation/combine/published/publisher/output",
        "html": "See Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/flatmap/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet maxPublishers: Subscribers.Demand\nThe maximum number of concurrent publisher subscriptions\nlet transform: (Upstream.Output) -> NewPublisher\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type."
    },
    {
        "title": "init(upstream:maxPublishers:transform:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/flatmap/init(upstream:maxpublishers:transform:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nmaxPublishers\n\nThe maximum number of concurrent publisher subscriptions.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type."
    },
    {
        "title": "Publishers.FlatMap.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/flatmap/output",
        "html": "Discussion\n\nThis publisher uses the output type declared by the new publisher.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "dueTime",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce/duetime",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet scheduler: Context\nThe scheduler on which this publisher delivers elements.\nlet options: Context.SchedulerOptions?\nScheduler options that customize this publisher\u2019s delivery of elements."
    },
    {
        "title": "scheduler",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce/scheduler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet dueTime: Context.SchedulerTimeType.Stride\nThe amount of time the publisher should wait before publishing an element.\nlet options: Context.SchedulerOptions?\nScheduler options that customize this publisher\u2019s delivery of elements."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/firstwhere/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "keyPath2",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath3/keypath2",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet keyPath0: KeyPath<Upstream.Output, Output0>\nThe key path of a property to publish.\nlet keyPath1: KeyPath<Upstream.Output, Output1>\nThe key path of a second property to publish."
    },
    {
        "title": "keyPath0",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath3/keypath0",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet keyPath1: KeyPath<Upstream.Output, Output1>\nThe key path of a second property to publish.\nlet keyPath2: KeyPath<Upstream.Output, Output2>\nThe key path of a third property to publish."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-ignoreoutput-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "keyPath1",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath3/keypath1",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet keyPath0: KeyPath<Upstream.Output, Output0>\nThe key path of a property to publish.\nlet keyPath2: KeyPath<Upstream.Output, Output2>\nThe key path of a third property to publish."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/ignoreoutput/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "keyPath",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath/keypath",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet keyPath: KeyPath<Upstream.Output, Output>\nThe key path of a property to publish."
    },
    {
        "title": "Publishers.MapKeyPath.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "Publishers.MapKeyPath3.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath3/output",
        "html": "Discussion\n\nThis publisher produces three-element tuples, where each menber\u2019s type matches the type of the corresponding key path\u2019s property.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3/init(_:_:_:)",
        "html": "Parameters\na\n\nA publisher to merge\n\nb\n\nA second publisher to merge.\n\nc\n\nA third publisher to merge."
    },
    {
        "title": "Publishers.FirstWhere.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/firstwhere/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.IgnoreOutput.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/ignoreoutput/output",
        "html": "Discussion\n\nThis publisher never produces elements.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/ignoreoutput/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.TryLastWhere.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/trylastwhere/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Concatenate<Prefix, Suffix>, Publishers.Concatenate<Prefix, Suffix>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Prefix conforms to Publisher, Prefix conforms to Equatable, Suffix conforms to Publisher, Suffix conforms to Equatable, Prefix.Failure is Suffix.Failure, and Prefix.Output is Suffix.Output."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/trylastwhere/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-trylastwhere-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/trylastwhere/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "count",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/count",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.Drop.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-drop-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-dropwhile-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-concatenate-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropwhile/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-compactmap-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>((Output) -> T) -> Publishers.CompactMap<Upstream, T>\nAvailable when Upstream conforms to Publisher.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc compactMap<T>((Output) -> T?) -> Publishers.CompactMap<Upstream, T>\nAvailable when Upstream conforms to Publisher.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/compactmap/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Drop<Upstream>, Publishers.Drop<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "Publishers.Drop.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Encode.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/encode/output",
        "html": "Discussion\n\nThis publisher uses the encoder\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet count: Int\nThe number of elements to drop."
    },
    {
        "title": "Publishers.LastWhere.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/lastwhere/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Concatenate<Prefix, Suffix>, Publishers.Concatenate<Prefix, Suffix>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Prefix conforms to Publisher, Prefix conforms to Equatable, Suffix conforms to Publisher, Suffix conforms to Equatable, Prefix.Failure is Suffix.Failure, and Prefix.Output is Suffix.Output."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropwhile/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nThe closure that indicates whether to drop the element."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-autoconnect-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.ReceiveOn.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/receiveon/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/receiveon/init(upstream:scheduler:options:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nscheduler\n\nThe scheduler the publisher uses to deliver elements.\n\noptions\n\nScheduler options used to customize element delivery."
    },
    {
        "title": "init(upstream:transform:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/compactmap/init(upstream:transform:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ntransform\n\nA closure that receives values from the upstream publisher and returns optional values."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.Autoconnect.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/autoconnect/output",
        "html": "Discussion\n\nThis publisher uses its upstram publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixwhile/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixuntiloutput/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet output: Upstream.Output\nThe element to match in the upstream publisher."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-print-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Drop<Upstream>, Publishers.Drop<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "Publishers.PrefixUntilOutput.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixuntiloutput/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/print/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "init(upstream:other:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixuntiloutput/init(upstream:other:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nother\n\nAnother publisher, the first output from which causes this publisher to finish."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/receiveon/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.PrefixUntilOutput.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixuntiloutput/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "other",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixuntiloutput/other",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixuntiloutput/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet other: Other\nAnother publisher, whose first output causes this publisher to finish."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-receiveon-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.Print.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/print/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "init(upstream:prefix:to:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/print/init(upstream:prefix:to:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nprefix\n\nA string with which to prefix all log messages."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/print/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet prefix: String\nA string with which to prefix all log messages.\nlet stream: (TextOutputStream)?"
    },
    {
        "title": "prefix",
        "url": "https://developer.apple.com/documentation/combine/publishers/print/prefix",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet stream: (TextOutputStream)?"
    },
    {
        "title": "stream",
        "url": "https://developer.apple.com/documentation/combine/publishers/print/stream",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet prefix: String\nA string with which to prefix all log messages."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/ignoreoutput/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.IgnoreOutput<Upstream>, Publishers.IgnoreOutput<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "scheduler",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/scheduler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe amount of time to delay.\nlet tolerance: Context.SchedulerTimeType.Stride\nThe allowed tolerance in firing delayed events.\nlet options: Context.SchedulerOptions?\nOptions relevant to the scheduler\u2019s behavior."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/ignoreoutput/==(_:_:)",
        "html": "Parameters\nlhs\n\nAn ignore output publisher to compare for equality.\n\nrhs\n\nAnother ignore output publisher to compare for equality.\n\nReturn Value\n\ntrue if the two publishers have equal upstream publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "tolerance",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/tolerance",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe amount of time to delay.\nlet scheduler: Context\nThe scheduler to deliver the delayed events.\nlet options: Context.SchedulerOptions?\nOptions relevant to the scheduler\u2019s behavior."
    },
    {
        "title": "scheduler",
        "url": "https://developer.apple.com/documentation/combine/publishers/receiveon/scheduler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet options: Context.SchedulerOptions?\nScheduler options used to customize element delivery."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/filter/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.ReceiveOn.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/receiveon/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/receiveon/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet scheduler: Context\nThe scheduler the publisher uses to deliver elements.\nlet options: Context.SchedulerOptions?\nScheduler options used to customize element delivery."
    },
    {
        "title": "options",
        "url": "https://developer.apple.com/documentation/combine/publishers/receiveon/options",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet scheduler: Context\nThe scheduler the publisher uses to deliver elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/trylastwhere/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.TryLastWhere<Upstream>.Output) throws -> Bool\nThe error-throwing closure that determines whether to publish an element."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/==(_:_:)",
        "html": "Parameters\nlhs\n\nA drop publisher to compare for equality.\n\nrhs\n\nAnother drop publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal upstream and count properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "keyPath1",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath2/keypath1",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet keyPath0: KeyPath<Upstream.Output, Output0>\nThe key path of a property to publish."
    },
    {
        "title": "Publishers.Concatenate.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/failure",
        "html": "Discussion\n\nThis publisher uses its source publishers\u2019 failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/allsatisfy/predicate",
        "html": "Discussion\n\nReturn true to continue, or false to cancel the upstream and finish.\n\nSee Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "init(upstream:count:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop/init(upstream:count:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ncount\n\nThe number of elements to drop."
    },
    {
        "title": "Publishers.Delay.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.CompactMap.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/compactmap/failure",
        "html": "Discussion\n\nThis publisher produces its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/autoconnect/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.AllSatisfy.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/allsatisfy/output",
        "html": "Discussion\n\nThis publisher produces Boolean elements.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/autoconnect/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.Autoconnect.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/autoconnect/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.AllSatisfy.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/allsatisfy/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/allsatisfy/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Upstream.Output) -> Bool\nA closure that evaluates each received element."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-allsatisfy-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/allsatisfy/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-count-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-prefixwhile-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-containswhere-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixwhile/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/containswhere/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "schedule(after:interval:tolerance:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedule(after:interval:tolerance:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, interval: ImmediateScheduler.SchedulerTimeType.Stride, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixwhile/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.PrefixWhile<Upstream>.Output) -> Bool\nThe closure that determines whether publishing should continue."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-contains-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.Count.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/count/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/count/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Count<Upstream>, Publishers.Count<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent. /// - Parameters:\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixwhile/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nThe closure that determines whether publishing should continue."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/count/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Count<Upstream>, Publishers.Count<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent. /// - Parameters:\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "Publishers.PrefixWhile.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixwhile/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Count.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/count/output",
        "html": "Discussion\n\nThis publisher produces integer elements.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "hash(into:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefetchstrategy/hash(into:)",
        "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type\u2019s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don\u2019t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future.\n\nSee Also\nSupporting Hashing\nvar hashValue: Int\nThe hash value."
    },
    {
        "title": "Publishers.Print.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/print/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/count/init(upstream:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "areInIncreasingOrder",
        "url": "https://developer.apple.com/documentation/combine/publishers/comparison/areinincreasingorder",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-mapkeypath2-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-decode-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-filter-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Publishers.Filter<Upstream>.Output) -> Bool) -> Publishers.Filter<Upstream>\nAvailable when Upstream conforms to Publisher.\nfunc tryFilter((Publishers.Filter<Upstream>.Output) throws -> Bool) -> Publishers.TryFilter<Upstream>\nAvailable when Upstream conforms to Publisher.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/decode/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.TimeGroupingStrategy.byTime(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/timegroupingstrategy/bytime(_:_:)",
        "html": "See Also\nTime Groupings\ncase byTimeOrCount(Context, Context.SchedulerTimeType.Stride, Int)\nA grouping that collects and publishes items periodically or when a buffer reaches a maximum size."
    },
    {
        "title": "Publishers.PrefetchStrategy.keepFull",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefetchstrategy/keepfull",
        "html": "Discussion\n\nThis strategy starts by making a demand equal to the buffer\u2019s size from the upstream when the subscriber first connects. Afterwards, it continues to demand elements from the upstream to try to keep the buffer full.\n\nSee Also\nPrefetching Strategies\ncase byRequest\nA strategy that avoids prefetching and instead performs requests on demand."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-dropuntiloutput-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/encode/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "keyPath0",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath2/keypath0",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet keyPath1: KeyPath<Upstream.Output, Output1>\nThe key path of a second property to publish."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-encode-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.MapKeyPath2.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath2/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath2/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet keyPath0: KeyPath<Upstream.Output, Output0>\nThe key path of a property to publish.\nlet keyPath1: KeyPath<Upstream.Output, Output1>\nThe key path of a second property to publish."
    },
    {
        "title": "Publishers.MapKeyPath2.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath2/output",
        "html": "Discussion\n\nThis publisher produces two-element tuples, where each menber\u2019s type matches the type of the corresponding key path\u2019s property.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.Decode.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/decode/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "init(upstream:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/decode/init(upstream:decoder:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\ndecoder\n\nThe decoder that decodes elements received from the upstream publisher."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.DropUntilOutput<Upstream, Other>, Publishers.DropUntilOutput<Upstream, Other>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, Other conforms to Publisher, Other conforms to Equatable, and Upstream.Failure is Other.Failure."
    },
    {
        "title": "other",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/other",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet other: Other\nA publisher to monitor for its first emitted element."
    },
    {
        "title": "Publishers.DropUntilOutput.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:other:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/init(upstream:other:)",
        "html": "Parameters\nupstream\n\nA publisher to drop elements from while waiting for another publisher to emit elements.\n\nother\n\nA publisher to monitor for its first emitted element."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/count/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "suffix",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/suffix",
        "html": "See Also\nInspecting Publisher Properties\nlet prefix: Prefix\nThe publisher to republish, in its entirety, before republishing elements from suffix."
    },
    {
        "title": "isIncluded",
        "url": "https://developer.apple.com/documentation/combine/publishers/filter/isincluded",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/filter/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet isIncluded: (Upstream.Output) -> Bool\nA closure that indicates whether to republish an element."
    },
    {
        "title": "schedule(after:interval:_:)",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedule(after:interval:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\n\nRequired\n\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\n\nRequired\n\nfunc schedule(options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\n\nRequired"
    },
    {
        "title": "Publishers.Filter.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/filter/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Concatenate.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/output",
        "html": "Discussion\n\nThis publisher uses its source publishers\u2019 output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "prefix",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/prefix",
        "html": "See Also\nInspecting Publisher Properties\nlet suffix: Suffix\nThe publisher to republish only after prefix finishes."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/combineidentifier/init(_:)",
        "html": "See Also\nCreating a Combine Identifier\ninit()\nCreates a unique Combine identifier."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropwhile/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.DropWhile<Upstream>.Output) -> Bool\nThe closure that indicates whether to drop the element."
    },
    {
        "title": "Publishers.DropWhile.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropwhile/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/allsatisfy/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nA closure that evaluates each received element."
    },
    {
        "title": "init(prefix:suffix:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate/init(prefix:suffix:)",
        "html": "Parameters\nprefix\n\nThe publisher to republish, in its entirety, before republishing elements from suffix.\n\nsuffix\n\nThe publisher to republish only after prefix finishes."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Subscribers.Completion<Failure>, Subscribers.Completion<Failure>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when Failure conforms to Equatable and Error."
    },
    {
        "title": "encode(_:)",
        "url": "https://developer.apple.com/documentation/combine/toplevelencoder/encode(_:)",
        "html": "Required\n\nParameters\nvalue\n\nThe instance to encode."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/compactmap/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet transform: (Upstream.Output) -> Output?\nA closure that receives values from the upstream publisher and returns optional values."
    },
    {
        "title": "init(upstream:isIncluded:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/filter/init(upstream:isincluded:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nisIncluded\n\nA closure that indicates whether to republish an element."
    },
    {
        "title": "Publishers.Filter.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/filter/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.ContainsWhere.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/containswhere/output",
        "html": "Discussion\n\nThis publisher produces Boolean elements.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Contains<Upstream>, Publishers.Contains<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Contains<Upstream>, Publishers.Contains<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/==(_:_:)",
        "html": "Parameters\nlhs\n\nA contains publisher to compare for equality.\n\nrhs\n\nAnother contains publisher to compare for equality.\n\nReturn Value\n\ntrue if the two publishers\u2019 upstream and output properties are equal; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publishers.Contains.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Contains.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/output-swift.typealias",
        "html": "Discussion\n\nThis publisher produces Boolean elements.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:output:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/init(upstream:output:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\noutput\n\nThe element to match in the upstream publisher."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-comparison-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/comparison/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.Comparison.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/comparison/output",
        "html": "Discussion\n\nThis publisher uses its upsteam publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:areInIncreasingOrder:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/comparison/init(upstream:areinincreasingorder:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives its elements.\n\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they are in increasing order."
    },
    {
        "title": "Publishers.BufferingStrategy.dropOldest",
        "url": "https://developer.apple.com/documentation/combine/publishers/bufferingstrategy/dropoldest",
        "html": "See Also\nBuffering Strategies\ncase dropNewest\nWhen the buffer is full, discard the newly received element.\ncase customError(() -> Failure)\nWhen the buffer is full, execute the closure to provide a custom error."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/just-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Output) -> T) -> Just<T>\nfunc tryMap<T>((Output) throws -> T) -> Result<T, Error>.Publisher\nfunc mapError<E>((Just<Output>.Failure) -> E) -> Result<Output, E>.Publisher\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryScan<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher\nfunc setFailureType<E>(to: E.Type) -> Result<Output, E>.Publisher\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceEmpty(with: Output) -> Just<Output>\nfunc replaceError(with: Output) -> Just<Output>\nReducing Elements\nfunc collect() -> Just<[Output]>\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Empty<Output, Just<Output>.Failure>\nfunc reduce<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryReduce<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher\nApplying Mathematical Operations on Elements\nfunc count() -> Just<Int>\nfunc max() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc max(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc min(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Output) -> Just<Bool>\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Output) -> Bool) -> Just<Bool>\nfunc tryContains(where: (Output) throws -> Bool) -> Result<Bool, Error>.Publisher\nfunc allSatisfy((Output) -> Bool) -> Just<Bool>\nfunc tryAllSatisfy((Output) throws -> Bool) -> Result<Bool, Error>.Publisher\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Just<Output>\nfunc first(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Just<Output>\nfunc last(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Optional<Output>.Publisher\nfunc output<R>(in: R) -> Optional<Output>.Publisher\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Just<Output>\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.BufferingStrategy.dropNewest",
        "url": "https://developer.apple.com/documentation/combine/publishers/bufferingstrategy/dropnewest",
        "html": "See Also\nBuffering Strategies\ncase dropOldest\nWhen the buffer is full, discard the oldest element in the buffer.\ncase customError(() -> Failure)\nWhen the buffer is full, execute the closure to provide a custom error."
    },
    {
        "title": "Publishers.TimeGroupingStrategy.byTimeOrCount(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/timegroupingstrategy/bytimeorcount(_:_:_:)",
        "html": "See Also\nTime Groupings\ncase byTime(Context, Context.SchedulerTimeType.Stride)\nA grouping that collects and periodically publishes items."
    },
    {
        "title": "hashValue",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefetchstrategy/hashvalue",
        "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you.\n\nSee Also\nSupporting Hashing\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
    },
    {
        "title": "Publishers.Encode.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/encode/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.DropUntilOutput<Upstream, Other>, Publishers.DropUntilOutput<Upstream, Other>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, Other conforms to Publisher, Other conforms to Equatable, and Upstream.Failure is Other.Failure."
    },
    {
        "title": "init(upstream:encoder:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/encode/init(upstream:encoder:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nencoder\n\nThe encoder that decodes elements received from the upstream publisher."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/==(_:_:)",
        "html": "Parameters\nlhs\n\nA Publishers.DropUntilOutput instance to compare for equality.\n\nrhs\n\nAnother Publishers.DropUntilOutput instance to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal upstream and other properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Decodable Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/decodable-implementations",
        "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Failure conforms to Decodable and Error."
    },
    {
        "title": "send(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/send(_:)",
        "html": "Parameters\nvalue\n\nThe value to send.\n\nSee Also\nDelivering Elements to Subscribers\nfunc send()\nSends a void value to the subscriber.\nAvailable when Output is ()."
    },
    {
        "title": "Subject Implementations",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/subject-implementations",
        "html": "Topics\nInstance Methods\nfunc send()\nSends a void value to the subscriber.\nAvailable when Output is ()."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/empty/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/empty-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "AsyncSequence Implementations",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/asyncsequence-implementations",
        "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence\u2019s elements, omitting results that don\u2019t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence\u2019s elements, omitting results that don\u2019t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence\u2019s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence\u2019s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
    },
    {
        "title": "AsyncPublisher.Iterator",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/iterator",
        "html": "Topics\nIterating over Elements\nfunc next() async -> P.Output?\nProduces the next element in the prefix sequence.\nType Aliases\ntypealias Element\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> AsyncPublisher<P>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/init(_:)",
        "html": "Parameters\npublisher\n\nAn upstream publisher. The asynchronous publisher converts elements received from this publisher into an asynchronous sequence."
    },
    {
        "title": "decode(_:from:)",
        "url": "https://developer.apple.com/documentation/combine/topleveldecoder/decode(_:from:)",
        "html": "Required"
    },
    {
        "title": "init(error:)",
        "url": "https://developer.apple.com/documentation/combine/fail/init(error:)",
        "html": "Parameters\nerror\n\nThe failure to send when terminating the publisher.\n\nSee Also\nCreating a Fail Publisher\ninit(outputType: Output.Type, failure: Failure)\nCreates publisher with the given output type, that immediately terminates with the specified failure."
    },
    {
        "title": "combineIdentifier",
        "url": "https://developer.apple.com/documentation/combine/customcombineidentifierconvertible/combineidentifier-1frze",
        "html": "Required Default implementation provided.\n\nDefault Implementations\nCustomCombineIdentifierConvertible Implementations\nvar combineIdentifier: CombineIdentifier\nA unique identifier for identifying publisher streams."
    },
    {
        "title": "init(outputType:failure:)",
        "url": "https://developer.apple.com/documentation/combine/fail/init(outputtype:failure:)",
        "html": "Parameters\noutputType\n\nThe output type exposed by this publisher.\n\nfailure\n\nThe failure to send when terminating the publisher.\n\nDiscussion\n\nUse this initializer to create a Fail publisher that can work with subscribers or publishers that expect a given output type.\n\nSee Also\nCreating a Fail Publisher\ninit(error: Failure)\nCreates a publisher that immediately terminates with the specified failure."
    },
    {
        "title": "init()",
        "url": "https://developer.apple.com/documentation/combine/combineidentifier/init()",
        "html": "See Also\nCreating a Combine Identifier\ninit(AnyObject)\nCreates a Combine identifier, using the bit pattern of the provided object."
    },
    {
        "title": "Output",
        "url": "https://developer.apple.com/documentation/combine/toplevelencoder/output",
        "html": "Required"
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/==(_:_:)",
        "html": "Parameters\nlhs\n\nA Fail publisher to compare for equality.\n\nrhs\n\nAnother Fail publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal error properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "schedule(after:tolerance:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedule(after:tolerance:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, interval: ImmediateScheduler.SchedulerTimeType.Stride, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity."
    },
    {
        "title": "hashValue",
        "url": "https://developer.apple.com/documentation/combine/combineidentifier/hashvalue",
        "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you.\n\nSee Also\nHashing Identifiers\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
    },
    {
        "title": "hash(into:)",
        "url": "https://developer.apple.com/documentation/combine/combineidentifier/hash(into:)",
        "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type\u2019s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don\u2019t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future.\n\nSee Also\nHashing Identifiers\nvar hashValue: Int\nThe hash value."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/combineidentifier/==(_:_:)",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Identifiers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "AsyncSequence Implementations",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/asyncsequence-implementations",
        "html": "Topics\nInstance Methods\nfunc allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence\u2019s elements, omitting results that don\u2019t return a value.\nfunc compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence\u2019s elements, omitting results that don\u2019t return a value.\nfunc contains(Self.Element) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nAvailable when Element conforms to Equatable.\nfunc contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<Self>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence\u2019s elements.\nfunc map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence\u2019s elements.\nfunc max() async rethrows -> Self.Element?\nReturns the maximum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min() async rethrows -> Self.Element?\nReturns the minimum element in an asynchronous sequence of comparable elements.\nAvailable when Element conforms to Comparable.\nfunc min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<Self>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/combineidentifier/!=(_:_:)",
        "html": "See Also\nComparing Identifiers\nstatic func == (CombineIdentifier, CombineIdentifier) -> Bool\nReturns a Boolean value indicating whether two values are equal."
    },
    {
        "title": "schedule(after:interval:tolerance:options:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedule(after:interval:tolerance:options:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/combineidentifier/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "schedule(after:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedule(after:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, interval: ImmediateScheduler.SchedulerTimeType.Stride, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity."
    },
    {
        "title": "makeAsyncIterator()",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/makeasynciterator()",
        "html": "Return Value\n\nAn instance of the AsyncIterator type used to produce elements of the asynchronous sequence.\n\nSee Also\nCreating an Iterator\nstruct Iterator\nThe iterator that produces elements of the asynchronous publisher sequence."
    },
    {
        "title": "schedule(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedule(_:)",
        "html": "See Also\nScheduling Actions\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, interval: ImmediateScheduler.SchedulerTimeType.Stride, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity."
    },
    {
        "title": "schedule(after:tolerance:options:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedule(after:tolerance:options:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, interval: ImmediateScheduler.SchedulerTimeType.Stride, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity."
    },
    {
        "title": "AsyncThrowingPublisher.Iterator",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/iterator",
        "html": "Topics\nIterating over Elements\nfunc next() async throws -> P.Output?\nProduces the next element in the prefix sequence.\nType Aliases\ntypealias Element\nRelationships\nConforms To\nAsyncIteratorProtocol\nSee Also\nCreating an Iterator\nfunc makeAsyncIterator() -> AsyncThrowingPublisher<P>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/count/==(_:_:)",
        "html": "Return Value\n\ntrue if the two publishers\u2019 upstream properties are equal; otherwise false.\n\nDiscussion\n\nlhs: A Count instance to compare.\n\nrhs: Another Count instance to compare.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publishers.ContainsWhere.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/containswhere/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "minimumTolerance",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/minimumtolerance",
        "html": "See Also\nAccessing Scheduler Time Properties\nvar now: ImmediateScheduler.SchedulerTimeType\nThe immediate scheduler\u2019s definition of the current moment in time."
    },
    {
        "title": "ImmediateScheduler.SchedulerOptions",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/scheduleroptions",
        "html": "See Also\nDeclaring Scheduler Timekeeping and Options\nstruct SchedulerTimeType\nThe time type used by the immediate scheduler."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/containswhere/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Upstream.Output) -> Bool\nThe closure that determines whether the publisher should consider an element as a match."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/containswhere/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nThe closure that determines whether the publisher should consider an element as a match."
    },
    {
        "title": "Publishers.PrefetchStrategy.byRequest",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefetchstrategy/byrequest",
        "html": "Discussion\n\nThis strategy just forwards the downstream\u2019s requests to the upstream publisher.\n\nSee Also\nPrefetching Strategies\ncase keepFull\nA strategy to fill the buffer at subscription time, and keep it full thereafter."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefetchstrategy/==(_:_:)",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nDetermining Equality and Inequality\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/comparison/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet areInIncreasingOrder: (Upstream.Output, Upstream.Output) -> Bool\nA closure that receives two elements and returns true if they are in increasing order."
    },
    {
        "title": "output",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains/output-swift.property",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.Comparison.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/comparison/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.BufferingStrategy.customError(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/bufferingstrategy/customerror(_:)",
        "html": "See Also\nBuffering Strategies\ncase dropNewest\nWhen the buffer is full, discard the newly received element.\ncase dropOldest\nWhen the buffer is full, discard the oldest element in the buffer."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefetchstrategy/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/just/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Just<Output>, Just<Output>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Output conforms to Equatable."
    },
    {
        "title": "Encodable Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/encodable-implementations",
        "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder.\nAvailable when Failure conforms to Encodable and Error."
    },
    {
        "title": "SchedulerTimeType",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedulertimetype",
        "html": "Required\n\nSee Also\nDeclaring Scheduler Timekeeping and Options\nassociatedtype SchedulerOptions\nA type that defines options accepted by the scheduler.\n\nRequired"
    },
    {
        "title": "SchedulerOptions",
        "url": "https://developer.apple.com/documentation/combine/scheduler/scheduleroptions",
        "html": "Required\n\nDiscussion\n\nThis type is freely definable by each Scheduler. Typically, operations that take a Scheduler parameter will also take SchedulerOptions.\n\nSee Also\nDeclaring Scheduler Timekeeping and Options\nassociatedtype SchedulerTimeType : Strideable\nDescribes an instant in time for this scheduler.\n\nRequired"
    },
    {
        "title": "schedule(_:)",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedule(_:)",
        "html": "See Also\nScheduling Actions\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\n\nRequired\n\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\n\nRequired\n\nfunc schedule(options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\n\nRequired"
    },
    {
        "title": "schedule(after:_:)",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedule(after:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\n\nRequired\n\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\n\nRequired\n\nfunc schedule(options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\n\nRequired"
    },
    {
        "title": "schedule(after:interval:tolerance:_:)",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedule(after:interval:tolerance:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\n\nRequired\n\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\n\nRequired\n\nfunc schedule(options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\n\nRequired"
    },
    {
        "title": "schedule(after:tolerance:options:_:)",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedule(after:tolerance:options:_:)",
        "html": "Required\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\n\nRequired\n\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\n\nRequired"
    },
    {
        "title": "schedule(after:tolerance:_:)",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedule(after:tolerance:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\n\nRequired\n\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\n\nRequired\n\nfunc schedule(options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\n\nRequired"
    },
    {
        "title": "schedule(options:_:)",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedule(options:_:)",
        "html": "Required\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\n\nRequired\n\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\n\nRequired"
    },
    {
        "title": "objectWillChange",
        "url": "https://developer.apple.com/documentation/combine/observableobject/objectwillchange-2oa5v",
        "html": "Required Default implementation provided.\n\nDefault Implementations\nObservableObject Implementations\nvar objectWillChange: ObservableObjectPublisher\nA publisher that emits before the object has changed.\nAvailable when ObjectWillChangePublisher is ObservableObjectPublisher.\nSee Also\nPublishing Changes\nassociatedtype ObjectWillChangePublisher : Publisher = ObservableObjectPublisher\nThe type of publisher that emits before the object has changed.\n\nRequired"
    },
    {
        "title": "ImmediateScheduler.SchedulerTimeType.Stride",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride",
        "html": "Topics\nCreating Scheduler Time Strides\ninit(Int)\nCreates an immediate scheduler time interval from the given time interval.\ninit?<T>(exactly: T)\nCreates an immediate scheduler time interval from a binary integer type.\ninit(floatLiteral: Double)\nCreates an immediate scheduler time interval from a floating-point seconds value.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\ninit(integerLiteral: Int)\nCreates an immediate scheduler time interval from an integer seconds value.\nCreating Scheduler Time Strides from Seconds\nstatic func microseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of microseconds into an instance of this scheduler time type.\nstatic func milliseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of milliseconds into an instance of this scheduler time type.\nstatic func nanoseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\nstatic func seconds(Double) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\nstatic func seconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds into an instance of this scheduler time type.\nUsing Predefined Scheduler Time Strides\nstatic var zero: Self\nThe zero value.\nAvailable when Self conforms to ExpressibleByIntegerLiteral.\nDeclaring Timekeeping Types\ntypealias FloatLiteralType\nThe type used when evaluating floating-point literals.\ntypealias IntegerLiteralType\nThe type used when evaluating integer literals.\ntypealias Magnitude\nThe type used for expressing the stride\u2019s magnitude.\nExpressing Scheduler Time Strides as Seconds\nvar magnitude: Int\nThe value of this time interval in seconds.\nCreating Ranges\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nPerforming Mathematical Operations\nfunc negate()\nReplaces this value with its additive inverse.\nstatic func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nMultiplies two values and produces their product.\nstatic func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nMultiplies two values and stores the result in the left-hand-side variable.\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nAdds two values and produces their sum.\nstatic func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nstatic func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nSubtracts one value from another and produces their difference.\nComparing Scheduler Time Strides\nstatic func != (Self, Self) -> Bool\nstatic func == (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nEncoding Scheduler Time Strides\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder.\nOperators\nstatic func -= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable.\nstatic func < (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nDefault Implementations\nAdditiveArithmetic Implementations\nComparable Implementations\nEquatable Implementations\nSignedNumeric Implementations\nRelationships\nConforms To\nAdditiveArithmetic\nComparable\nDecodable\nEncodable\nEquatable\nExpressibleByFloatLiteral\nExpressibleByIntegerLiteral\nNumeric\nSchedulerTimeIntervalConvertible\nSignedNumeric"
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/fail-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/fail/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "send(subscription:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/send(subscription:)",
        "html": "Parameters\nsubscription\n\nThe subscription instance through which the subscriber can request elements.\n\nDiscussion\n\nThis call provides the Subject an opportunity to establish demand for any new upstream subscriptions.\n\nSee Also\nDelivering Life Cycle Events to Subscribers\nfunc send(completion: Subscribers.Completion<Failure>)\nSends a completion signal to the subscriber."
    },
    {
        "title": "microseconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/schedulertimeintervalconvertible/microseconds(_:)",
        "html": "Required\n\nSee Also\nConverting Seconds to Scheduler Time Intervals\nstatic func milliseconds(Int) -> Self\nConverts the specified number of milliseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func nanoseconds(Int) -> Self\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Double) -> Self\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Int) -> Self\nConverts the specified number of seconds into an instance of this scheduler time type.\n\nRequired"
    },
    {
        "title": "nanoseconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/schedulertimeintervalconvertible/nanoseconds(_:)",
        "html": "Required\n\nSee Also\nConverting Seconds to Scheduler Time Intervals\nstatic func microseconds(Int) -> Self\nConverts the specified number of microseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func milliseconds(Int) -> Self\nConverts the specified number of milliseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Double) -> Self\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Int) -> Self\nConverts the specified number of seconds into an instance of this scheduler time type.\n\nRequired"
    },
    {
        "title": "makeAsyncIterator()",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/makeasynciterator()",
        "html": "Return Value\n\nAn instance of the AsyncIterator type used to produce elements of the asynchronous sequence.\n\nSee Also\nCreating an Iterator\nstruct Iterator\nThe iterator that produces elements of the asynchronous publisher sequence."
    },
    {
        "title": "send()",
        "url": "https://developer.apple.com/documentation/combine/subject/send()",
        "html": "Discussion\n\nUse Void inputs and outputs when you want to signal that an event has occurred, but don\u2019t need to send the event itself.\n\nSee Also\nDelivering Elements to Subscribers\nfunc send(Self.Output)\nSends a value to the subscriber.\n\nRequired"
    },
    {
        "title": "Subscribers.Completion.finished",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/finished",
        "html": "See Also\nCompletion States\ncase failure(Failure)\nThe publisher stopped publishing due to the indicated error."
    },
    {
        "title": "send(subscription:)",
        "url": "https://developer.apple.com/documentation/combine/subject/send(subscription:)",
        "html": "Required\n\nParameters\nsubscription\n\nThe subscription instance through which the subscriber can request elements.\n\nDiscussion\n\nThis call provides the Subject an opportunity to establish demand for any new upstream subscriptions.\n\nSee Also\nDelivering Life Cycle Events to Subscribers\nfunc send(completion: Subscribers.Completion<Self.Failure>)\nSends a completion signal to the subscriber.\n\nRequired"
    },
    {
        "title": "request(_:)",
        "url": "https://developer.apple.com/documentation/combine/subscription/request(_:)",
        "html": "Required\n\nSee Also\nRequesting Elements\nstruct Demand\nA requested number of items, sent to a publisher from a subscriber through the subscription."
    },
    {
        "title": "send(completion:)",
        "url": "https://developer.apple.com/documentation/combine/subject/send(completion:)",
        "html": "Required\n\nParameters\ncompletion\n\nA Completion instance which indicates whether publishing has finished normally or failed with an error.\n\nSee Also\nDelivering Life Cycle Events to Subscribers\nfunc send(subscription: Subscription)\nSends a subscription to the subscriber.\n\nRequired"
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Fail<Output, Failure>, Fail<Output, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Failure conforms to Equatable and Error."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/fail/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Fail<Output, Failure>, Fail<Output, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Failure conforms to Equatable and Error."
    },
    {
        "title": "Publishers.MergeMany",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany",
        "html": "Topics\nCreating a Merge Many Publisher\ninit(Upstream...)\nCreates a publisher created by applying the merge function to an arbitrary number of upstream publishers.\ninit<S>(S)\nCreates a publisher created by applying the merge function to a sequence of upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet publishers: [Upstream]\nThe array of upstream publishers that this publisher merges together.\nComparing Publishers\nstatic func == (Publishers.MergeMany<Upstream>, Publishers.MergeMany<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/==(_:_:)",
        "html": "Parameters\nlhs\n\nAn Empty instance to compare.\n\nrhs\n\nAnother Empty instance to compare.\n\nReturn Value\n\ntrue if the two publishers have equal completeImmediately properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Empty<Output, Failure>, Empty<Output, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/empty/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "completeImmediately",
        "url": "https://developer.apple.com/documentation/combine/empty/completeimmediately",
        "html": "Discussion\n\nIf true, the publisher finishes immediately after sending a subscription to the subscriber. If false, it never completes."
    },
    {
        "title": "Hashable Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/hashable-implementations",
        "html": "Topics\nInstance Properties\nvar hashValue: Int\nThe hash value.\nAvailable when Failure conforms to Error and Hashable.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nAvailable when Failure conforms to Error and Hashable."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/record/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Scheduler Implementations",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/scheduler-implementations",
        "html": "Topics\nInstance Methods\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/init(_:)",
        "html": "Parameters\npublisher\n\nAn upstream publisher. The asynchronous publisher converts elements received from this publisher into an asynchronous sequence."
    },
    {
        "title": "schedule(options:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedule(options:_:)",
        "html": "See Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, interval: ImmediateScheduler.SchedulerTimeType.Stride, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date."
    },
    {
        "title": "schedule(after:interval:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedule(after:interval:_:)",
        "html": "Discussion\n\nThe immediate scheduler ignores date and performs the action immediately.\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, interval: ImmediateScheduler.SchedulerTimeType.Stride, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity."
    },
    {
        "title": "shared",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/shared",
        "html": "Discussion\n\nYou cannot create instances of the immediate scheduler yourself. Use only the shared instance."
    },
    {
        "title": "now",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/now",
        "html": "See Also\nAccessing Scheduler Time Properties\nvar minimumTolerance: ImmediateScheduler.SchedulerTimeType.Stride\nThe minimum tolerance allowed by the immediate scheduler."
    },
    {
        "title": "ImmediateScheduler.SchedulerTimeType",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype",
        "html": "Topics\nDeclaring a Scheduler Timekeeping System\nstruct Stride\nThe increment by which the immediate scheduler counts time.\nCalculating Time Offsets\nfunc advanced(by: ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType\nAdvances the time by the specified amount; this is meaningless in the context of an immediate scheduler.\nfunc distance(to: ImmediateScheduler.SchedulerTimeType) -> ImmediateScheduler.SchedulerTimeType.Stride\nReturns the distance to another immediate scheduler time; this distance is always 0 in the context of an immediate scheduler.\nComparing Scheduler Times\nstatic func != (Self, Self) -> Bool\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nDefault Implementations\nComparable Implementations\nEquatable Implementations\nRelationships\nConforms To\nComparable\nEquatable\nStrideable\nSee Also\nDeclaring Scheduler Timekeeping and Options\ntypealias SchedulerOptions\nA type that defines options accepted by the immediate scheduler."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/record-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "unlimited",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/unlimited",
        "html": "See Also\nUsing Special Demands\nstatic let none: Subscribers.Demand\nA request for no elements from the publisher."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/future-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "store(in:)",
        "url": "https://developer.apple.com/documentation/combine/cancellable/store(in:)-95sfl",
        "html": "Parameters\nset\n\nThe set in which to store this Cancellable.\n\nSee Also\nStoring Cancellable Instances\nfunc store<C>(in: inout C)\nStores this cancellable instance in the specified collection."
    },
    {
        "title": "send(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/send(_:)",
        "html": "Parameters\nvalue\n\nThe value to send.\n\nSee Also\nDelivering Elements to Subscribers\nfunc send()\nSends a void value to the subscriber.\nAvailable when Output is ()."
    },
    {
        "title": "receive()",
        "url": "https://developer.apple.com/documentation/combine/subscriber/receive()",
        "html": "Return Value\n\nA Subscribers.Demand instance indicating how many more elements the subscriber expects to receive.\n\nDiscussion\n\nUse Void inputs and outputs when you want to signal that an event has occurred, but don\u2019t need to send the event itself.\n\nSee Also\nReceiving Elements\nfunc receive(Self.Input) -> Subscribers.Demand\nTells the subscriber that the publisher has produced an element.\n\nRequired"
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/just/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncPublisher<Self>\nThe elements produced by the publisher, as an asynchronous sequence.\nAvailable when Failure is Never.\nInstance Methods\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/future/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "playgroundDescription",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/playgrounddescription",
        "html": "See Also\nInspecting Publisher Properties\nvar description: String\nA textual representation of this instance."
    },
    {
        "title": "Record.Recording",
        "url": "https://developer.apple.com/documentation/combine/record/recording-swift.struct",
        "html": "Topics\nInitializers\ninit()\nSet up a recording in a state ready to receive output.\ninit(output: [Output], completion: Subscribers.Completion<Failure>)\nSet up a complete recording with the specified output and completion.\nInstance Properties\nvar completion: Subscribers.Completion<Failure>\nThe completion which will be sent to a Subscriber.\nvar output: [Output]\nThe output which will be sent to a Subscriber.\nInstance Methods\nfunc encode(into: Encoder) throws\nAvailable when Output conforms to Decodable, Output conforms to Encodable, Failure conforms to Decodable, Failure conforms to Encodable, and Failure conforms to Error.\nfunc receive(Record<Output, Failure>.Recording.Input)\nAdd an output to the recording.\nfunc receive(completion: Subscribers.Completion<Failure>)\nAdd a completion to the recording.\nType Aliases\ntypealias Input\nDefault Implementations\nDecodable Implementations\nEncodable Implementations\nRelationships\nConforms To\nDecodable\nEncodable"
    },
    {
        "title": "autoconnect()",
        "url": "https://developer.apple.com/documentation/combine/connectablepublisher/autoconnect()",
        "html": "Return Value\n\nA publisher which automatically connects to its upstream connectable publisher.\n\nDiscussion\n\nUse autoconnect() to simplify working with ConnectablePublisher instances, such as Timer.TimerPublisher in the Foundation framework.\n\nIn the following example, the publish(every:tolerance:on:in:options:) operator creates a Timer.TimerPublisher, which is a ConnectablePublisher. As a result, subscribers don\u2019t receive any values until after a call to connect(). For convenience when working with a single subscriber, the autoconnect() operator performs the connect() call when attached to by the subscriber.\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .sink { date in\n        print (\"Date now: \\(date)\")\n    }\n"
    },
    {
        "title": "init(completeImmediately:)",
        "url": "https://developer.apple.com/documentation/combine/empty/init(completeimmediately:)",
        "html": "Parameters\ncompleteImmediately\n\nA Boolean value that indicates whether the publisher should immediately finish.\n\nSee Also\nCreating an Empty Publisher\ninit(completeImmediately: Bool, outputType: Output.Type, failureType: Failure.Type)\nCreates an empty publisher with the given completion behavior and output and failure types."
    },
    {
        "title": "connect()",
        "url": "https://developer.apple.com/documentation/combine/connectablepublisher/connect()",
        "html": "Required\n\nReturn Value\n\nA Cancellable instance that you use to cancel publishing."
    },
    {
        "title": "Decodable Implementations",
        "url": "https://developer.apple.com/documentation/combine/record/decodable-implementations",
        "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Output conforms to Decodable, Output conforms to Encodable, Failure conforms to Decodable, Failure conforms to Encodable, and Failure conforms to Error."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/deferred-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "init(output:completion:)",
        "url": "https://developer.apple.com/documentation/combine/record/init(output:completion:)",
        "html": "Parameters\noutput\n\nAn array of output elements to publish.\n\ncompletion\n\nThe completion value with which to end publishing.\n\nSee Also\nCreating a Record Publisher\ninit(record: (inout Record<Output, Failure>.Recording) -> Void)\nCreates a publisher to interactively record a series of outputs and a completion.\ninit(recording: Record<Output, Failure>.Recording)\nCreates a record publisher from an existing recording."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/deferred/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "init(record:)",
        "url": "https://developer.apple.com/documentation/combine/record/init(record:)",
        "html": "Parameters\nrecord\n\nA recording instance that can be retrieved after completion to create new record publishers to replay the recording.\n\nSee Also\nCreating a Record Publisher\ninit(output: [Output], completion: Subscribers.Completion<Failure>)\nCreates a record publisher to publish the provided elements, followed by the provided completion value.\ninit(recording: Record<Output, Failure>.Recording)\nCreates a record publisher from an existing recording."
    },
    {
        "title": "hash(into:)",
        "url": "https://developer.apple.com/documentation/combine/anycancellable/hash(into:)",
        "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type\u2019s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don\u2019t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
    },
    {
        "title": "init(recording:)",
        "url": "https://developer.apple.com/documentation/combine/record/init(recording:)",
        "html": "Parameters\nrecording\n\nA previously-recorded recording of published elements and a completion.\n\nSee Also\nCreating a Record Publisher\ninit(output: [Output], completion: Subscribers.Completion<Failure>)\nCreates a record publisher to publish the provided elements, followed by the provided completion value.\ninit(record: (inout Record<Output, Failure>.Recording) -> Void)\nCreates a publisher to interactively record a series of outputs and a completion."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/init(_:)",
        "html": "Parameters\nattemptToFulfill\n\nA Future.Promise that the publisher invokes when the publisher emits an element or terminates with an error.\n\nSee Also\nCreating a Future\ntypealias Promise\nA type that represents a closure to invoke in the future, when an element or error is available."
    },
    {
        "title": "store(in:)",
        "url": "https://developer.apple.com/documentation/combine/anycancellable/store(in:)-6cr9i",
        "html": "Parameters\ncollection\n\nThe collection in which to store this AnyCancellable.\n\nSee Also\nStoring AnyCancellable Instances\nfunc store(in: inout Set<AnyCancellable>)\nStores this type-erasing cancellable instance in the specified set."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/anycancellable/init(_:)-3icn3",
        "html": "Parameters\ncancel\n\nA closure that the cancel() method executes."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Just<Output>, Just<Output>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Output conforms to Equatable."
    },
    {
        "title": "minimumTolerance",
        "url": "https://developer.apple.com/documentation/combine/scheduler/minimumtolerance",
        "html": "Required\n\nSee Also\nAccessing Scheduler Time Properties\nvar now: Self.SchedulerTimeType\nThis scheduler\u2019s definition of the current moment in time.\n\nRequired"
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/==(_:_:)",
        "html": "Parameters\nlhs\n\nA Just publisher to compare for equality.\n\nrhs\n\nAnother Just publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal output properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Deferred.Output",
        "url": "https://developer.apple.com/documentation/combine/deferred/output",
        "html": "See Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Just.Failure",
        "url": "https://developer.apple.com/documentation/combine/just/failure",
        "html": "Discussion\n\nUse Never if this Publisher does not publish errors."
    },
    {
        "title": "init(createPublisher:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/init(createpublisher:)",
        "html": "Parameters\ncreatePublisher\n\nThe closure to execute when calling subscribe(_:)."
    },
    {
        "title": "Deferred.Failure",
        "url": "https://developer.apple.com/documentation/combine/deferred/failure",
        "html": "See Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "now",
        "url": "https://developer.apple.com/documentation/combine/scheduler/now",
        "html": "Required\n\nSee Also\nAccessing Scheduler Time Properties\nvar minimumTolerance: Self.SchedulerTimeType.Stride\nThe minimum tolerance allowed by the scheduler.\n\nRequired"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/init(_:)",
        "html": "Parameters\noutput\n\nThe one element that the publisher emits."
    },
    {
        "title": "schedule(after:interval:tolerance:options:_:)",
        "url": "https://developer.apple.com/documentation/combine/scheduler/schedule(after:interval:tolerance:options:_:)",
        "html": "Required\n\nSee Also\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\n\nRequired\n\nfunc schedule(options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\n\nRequired"
    },
    {
        "title": "createPublisher",
        "url": "https://developer.apple.com/documentation/combine/deferred/createpublisher",
        "html": "Discussion\n\nThe publisher returned by this closure immediately receives the incoming subscription."
    },
    {
        "title": "storeWhileEntityActive(_:)",
        "url": "https://developer.apple.com/documentation/combine/cancellable/storewhileentityactive(_:)",
        "html": "Discussion\n\nThis method does nothing if the entity is already inactive.\n\nInternally, this method stores an AnyCancellable in a transient component of the entity. The component is removed when the deactivate event for this entity is received."
    },
    {
        "title": "ObjectWillChangePublisher",
        "url": "https://developer.apple.com/documentation/combine/observableobject/objectwillchangepublisher",
        "html": "Required\n\nSee Also\nPublishing Changes\nvar objectWillChange: Self.ObjectWillChangePublisher\nA publisher that emits before the object has changed.\n\nRequired Default implementation provided."
    },
    {
        "title": "seconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/schedulertimeintervalconvertible/seconds(_:)-2cv8t",
        "html": "Required\n\nSee Also\nConverting Seconds to Scheduler Time Intervals\nstatic func microseconds(Int) -> Self\nConverts the specified number of microseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func milliseconds(Int) -> Self\nConverts the specified number of milliseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func nanoseconds(Int) -> Self\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Int) -> Self\nConverts the specified number of seconds into an instance of this scheduler time type.\n\nRequired"
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/init(_:)",
        "html": "Parameters\nvalue\n\nThe initial value to publish."
    },
    {
        "title": "seconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/schedulertimeintervalconvertible/seconds(_:)-3g8ay",
        "html": "Required\n\nSee Also\nConverting Seconds to Scheduler Time Intervals\nstatic func microseconds(Int) -> Self\nConverts the specified number of microseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func milliseconds(Int) -> Self\nConverts the specified number of milliseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func nanoseconds(Int) -> Self\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Double) -> Self\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\n\nRequired"
    },
    {
        "title": "milliseconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/schedulertimeintervalconvertible/milliseconds(_:)",
        "html": "Required\n\nSee Also\nConverting Seconds to Scheduler Time Intervals\nstatic func microseconds(Int) -> Self\nConverts the specified number of microseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func nanoseconds(Int) -> Self\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Double) -> Self\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Int) -> Self\nConverts the specified number of seconds into an instance of this scheduler time type.\n\nRequired"
    },
    {
        "title": "send()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/send()",
        "html": "Discussion\n\nUse Void inputs and outputs when you want to signal that an event has occurred, but don\u2019t need to send the event itself.\n\nSee Also\nDelivering Elements to Subscribers\nfunc send(Output)\nSends a value to the subscriber."
    },
    {
        "title": "send(completion:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/send(completion:)",
        "html": "Parameters\ncompletion\n\nA Completion instance which indicates whether publishing has finished normally or failed with an error.\n\nSee Also\nDelivering Life Cycle Events to Subscribers\nfunc send(subscription: Subscription)\nSends a subscription to the subscriber."
    },
    {
        "title": "Input",
        "url": "https://developer.apple.com/documentation/combine/topleveldecoder/input",
        "html": "Required"
    },
    {
        "title": "init(completeImmediately:outputType:failureType:)",
        "url": "https://developer.apple.com/documentation/combine/empty/init(completeimmediately:outputtype:failuretype:)",
        "html": "Parameters\ncompleteImmediately\n\nA Boolean value that indicates whether the publisher should immediately finish.\n\noutputType\n\nThe output type exposed by this publisher.\n\nfailureType\n\nThe failure type exposed by this publisher.\n\nDiscussion\n\nUse this initializer to connect the empty publisher to subscribers or other publishers that have specific output and failure types.\n\nSee Also\nCreating an Empty Publisher\ninit(completeImmediately: Bool)\nCreates an empty publisher."
    },
    {
        "title": "Publishers.TryDropWhile",
        "url": "https://developer.apple.com/documentation/combine/publishers/trydropwhile",
        "html": "Topics\nCreating a Try Drop While Publisher\ninit(upstream: Upstream, predicate: (Publishers.TryDropWhile<Upstream>.Output) throws -> Bool)\nCreates a publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.TryDropWhile<Upstream>.Output) throws -> Bool\nThe error-throwing closure that indicates whether to drop the element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Sequence Operations to Elements\nstruct DropUntilOutput\nA publisher that ignores elements from the upstream publisher until it receives an element from second publisher.\nstruct Drop\nA publisher that omits a specified number of elements before republishing later elements.\nstruct DropWhile\nA publisher that omits elements from an upstream publisher until a given closure returns false.\nstruct Concatenate\nA publisher that emits all of one publisher\u2019s elements before those from another publisher.\nstruct PrefixWhile\nA publisher that republishes elements while a predicate closure indicates publishing should continue.\nstruct TryPrefixWhile\nA publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue.\nstruct PrefixUntilOutput\nA publisher that republishes elements until another publisher emits an element."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncPublisher<Self>\nThe elements produced by the publisher, as an asynchronous sequence.\nAvailable when Failure is Never.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.Retry",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry",
        "html": "Topics\nCreating a Retry Publisher\ninit(upstream: Upstream, retries: Int?)\nCreates a publisher that attempts to recreate its subscription to a failed upstream publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet retries: Int?\nThe maximum number of retry attempts to perform.\nComparing Publishers\nstatic func == (Publishers.Retry<Upstream>, Publishers.Retry<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nHandling Errors\nstruct AssertNoFailure\nA publisher that raises a fatal error upon receiving any failure, and otherwise republishes all received input.\nstruct Catch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\nstruct TryCatch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher or producing a new error."
    },
    {
        "title": "Publishers.Merge6",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6",
        "html": "Topics\nCreating a Merge-Six Publisher\ninit(A, B, C, D, E, F)\npublisher created by applying the merge function to six upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nComparing Publishers\nstatic func == (Publishers.Merge6<A, B, C, D, E, F>, Publishers.Merge6<A, B, C, D, E, F>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, F conforms to Publisher, F conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, D.Output is E.Output, E.Failure is F.Failure, and E.Output is F.Output.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.TryComparison",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycomparison",
        "html": "Topics\nCreating a Try Comparison Publisher\ninit(upstream: Upstream, areInIncreasingOrder: (Upstream.Output, Upstream.Output) throws -> Bool)\nCreates a publisher that republishes items from another publisher only if each new item is in increasing order from the previously-published item, and fails if the ordering logic throws an error.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet areInIncreasingOrder: (Upstream.Output, Upstream.Output) throws -> Bool\nA closure that receives two elements and returns true if they are in increasing order.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Mathematical Operations on Elements\nstruct Count\nA publisher that publishes the number of elements received from the upstream publisher.\nstruct Comparison\nA publisher that republishes items from another publisher only if each new item is in increasing order from the previously-published item."
    },
    {
        "title": "Publishers.Multicast",
        "url": "https://developer.apple.com/documentation/combine/publishers/multicast",
        "html": "Overview\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event.\n\nTopics\nCreating a Multicast Publisher\ninit(upstream: Upstream, createSubject: () -> SubjectType)\nCreates a multicast publisher that applies a closure to create a subject that delivers elements to subscribers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet createSubject: () -> SubjectType\nA closure that returns a subject each time a subscriber attaches to the multicast publisher.\nPerforming Explicit Connections\nfunc connect() -> Cancellable\nConnects to the publisher, allowing it to produce elements, and returns an instance with which to cancel publishing.\nConnecting Automatically\nfunc autoconnect() -> Publishers.Autoconnect<Self>\nAutomates the process of connecting or disconnecting from this connectable publisher.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nConnectablePublisher Implementations\nPublisher Implementations\nRelationships\nConforms To\nConnectablePublisher\nPublisher\nSee Also\nWorking with Multiple Subscribers\nclass Share\nA publisher that shares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "Publishers.TryContainsWhere",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycontainswhere",
        "html": "Topics\nCreating a Try Contains Where Publisher\ninit(upstream: Upstream, predicate: (Upstream.Output) throws -> Bool)\nCreates a publisher that emits a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Upstream.Output) throws -> Bool\nThe error-throwing closure that determines whether this publisher should emit a Boolean true element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Matching Criteria to Elements\nstruct Contains\nA publisher that emits a Boolean value when it receives a specific element from its upstream publisher.\nstruct ContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the predicate closure.\nstruct AllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given predicate.\nstruct TryAllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "Publishers.Merge7",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7",
        "html": "Topics\nCreating a Merge-Seven Publisher\ninit(A, B, C, D, E, F, G)\nCreates a publisher created by applying the merge function to seven upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge.\nComparing Publishers\nstatic func == (Publishers.Merge7<A, B, C, D, E, F, G>, Publishers.Merge7<A, B, C, D, E, F, G>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, F conforms to Publisher, F conforms to Equatable, G conforms to Publisher, G conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, D.Output is E.Output, E.Failure is F.Failure, E.Output is F.Output, F.Failure is G.Failure, and F.Output is G.Output.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/output",
        "html": "Topics\nCreating an Output Publisher\ninit(upstream: Upstream, range: CountableRange<Int>)\nCreates a publisher that publishes elements specified by a range.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet range: CountableRange<Int>\nThe range of elements to publish.\nComparing Publishers\nstatic func == (Publishers.Output<Upstream>, Publishers.Output<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nSelecting Specific Elements\nstruct First\nA publisher that publishes the first element of a stream, then finishes.\nstruct FirstWhere\nA publisher that only publishes the first element of a stream to satisfy a predicate closure.\nstruct TryFirstWhere\nA publisher that only publishes the first element of a stream to satisfy a throwing predicate closure.\nstruct Last\nA publisher that waits until after the stream finishes, and then publishes the last element of the stream.\nstruct LastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies a predicate closure.\nstruct TryLastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies an error-throwing predicate closure."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/anypublisher-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nAvailable when Failure conforms to Error.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.Sequence",
        "url": "https://developer.apple.com/documentation/combine/publishers/sequence",
        "html": "Overview\n\nWhen the publisher exhausts the elements in the sequence, the next request causes the publisher to finish.\n\nTopics\nCreating a Sequence Publisher\ninit(sequence: Elements)\nCreates a publisher for a sequence of elements.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\nInspecting Publisher Properties\nlet sequence: Elements\nThe sequence of elements to publish.\nComparing Publishers\nstatic func == (Publishers.Sequence<Elements, Failure>, Publishers.Sequence<Elements, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Elements conforms to Equatable, Elements conforms to Sequence, and Failure conforms to Error.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nInstance Methods\nfunc allSatisfy((Publishers.Sequence<Elements, Failure>.Output) -> Bool) -> Result<Bool, Failure>.Publisher\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc append(Publishers.Sequence<Elements, Failure>.Output...) -> Publishers.Sequence<Elements, Failure>\nAvailable when Elements conforms to RangeReplaceableCollection and Failure conforms to Error.\nfunc append(Publishers.Sequence<Elements, Failure>) -> Publishers.Sequence<Elements, Failure>\nAvailable when Elements conforms to RangeReplaceableCollection and Failure conforms to Error.\nfunc append<S>(S) -> Publishers.Sequence<Elements, Failure>\nAvailable when Elements conforms to RangeReplaceableCollection and Failure conforms to Error.\nfunc collect() -> Result<[Publishers.Sequence<Elements, Failure>.Output], Failure>.Publisher\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc compactMap<T>((Publishers.Sequence<Elements, Failure>.Output) -> T?) -> Publishers.Sequence<[T], Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc contains(Elements.Element) -> Result<Bool, Failure>.Publisher\nAvailable when Elements conforms to Sequence, Failure conforms to Error, and Elements.Element conforms to Equatable.\nfunc contains(where: (Publishers.Sequence<Elements, Failure>.Output) -> Bool) -> Result<Bool, Failure>.Publisher\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc count() -> Result<Int, Failure>.Publisher\nAvailable when Elements conforms to RandomAccessCollection and Failure conforms to Error.\nfunc count() -> Just<Int>\nAvailable when Elements conforms to RandomAccessCollection and Failure is Never.\nfunc count() -> Result<Int, Failure>.Publisher\nAvailable when Elements conforms to Collection and Failure conforms to Error.\nfunc drop(while: (Elements.Element) -> Bool) -> Publishers.Sequence<DropWhileSequence<Elements>, Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc dropFirst(Int) -> Publishers.Sequence<DropFirstSequence<Elements>, Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc filter((Publishers.Sequence<Elements, Failure>.Output) -> Bool) -> Publishers.Sequence<[Publishers.Sequence<Elements, Failure>.Output], Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc first() -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to Collection and Failure is Never.\nfunc first(where: (Publishers.Sequence<Elements, Failure>.Output) -> Bool) -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to Sequence and Failure is Never.\nfunc ignoreOutput() -> Empty<Publishers.Sequence<Elements, Failure>.Output, Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc last() -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to BidirectionalCollection and Failure is Never.\nfunc last(where: (Publishers.Sequence<Elements, Failure>.Output) -> Bool) -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to BidirectionalCollection and Failure is Never.\nfunc map<T>((Elements.Element) -> T) -> Publishers.Sequence<[T], Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc max() -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to Sequence, Failure is Never, and Elements.Element conforms to Comparable.\nfunc max(by: (Publishers.Sequence<Elements, Failure>.Output, Publishers.Sequence<Elements, Failure>.Output) -> Bool) -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to Sequence and Failure is Never.\nfunc min() -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to Sequence, Failure is Never, and Elements.Element conforms to Comparable.\nfunc min(by: (Publishers.Sequence<Elements, Failure>.Output, Publishers.Sequence<Elements, Failure>.Output) -> Bool) -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to Sequence and Failure is Never.\nfunc output(at: Elements.Index) -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to Collection and Failure is Never.\nfunc output(at: Elements.Index) -> Optional<Publishers.Sequence<Elements, Failure>.Output>.Publisher\nAvailable when Elements conforms to RandomAccessCollection and Failure is Never.\nfunc output(in: Range<Elements.Index>) -> Publishers.Sequence<[Publishers.Sequence<Elements, Failure>.Output], Failure>\nAvailable when Elements conforms to RandomAccessCollection and Failure conforms to Error.\nfunc output(in: Range<Elements.Index>) -> Publishers.Sequence<[Publishers.Sequence<Elements, Failure>.Output], Failure>\nAvailable when Elements conforms to Collection and Failure conforms to Error.\nfunc prefix(Int) -> Publishers.Sequence<PrefixSequence<Elements>, Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc prefix(while: (Elements.Element) -> Bool) -> Publishers.Sequence<[Elements.Element], Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc prepend<S>(S) -> Publishers.Sequence<Elements, Failure>\nAvailable when Elements conforms to RangeReplaceableCollection and Failure conforms to Error.\nfunc prepend(Publishers.Sequence<Elements, Failure>.Output...) -> Publishers.Sequence<Elements, Failure>\nAvailable when Elements conforms to RangeReplaceableCollection and Failure conforms to Error.\nfunc prepend(Publishers.Sequence<Elements, Failure>) -> Publishers.Sequence<Elements, Failure>\nAvailable when Elements conforms to RangeReplaceableCollection and Failure conforms to Error.\nfunc reduce<T>(T, (T, Publishers.Sequence<Elements, Failure>.Output) -> T) -> Result<T, Failure>.Publisher\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc removeDuplicates() -> Publishers.Sequence<[Publishers.Sequence<Elements, Failure>.Output], Failure>\nAvailable when Elements conforms to Sequence, Failure conforms to Error, and Elements.Element conforms to Equatable.\nfunc replaceNil<T>(with: T) -> Publishers.Sequence<[Publishers.Sequence<Elements, Failure>.Output], Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc scan<T>(T, (T, Publishers.Sequence<Elements, Failure>.Output) -> T) -> Publishers.Sequence<[T], Failure>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc setFailureType<E>(to: E.Type) -> Publishers.Sequence<Elements, E>\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc tryAllSatisfy((Publishers.Sequence<Elements, Failure>.Output) throws -> Bool) -> Result<Bool, Error>.Publisher\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc tryContains(where: (Publishers.Sequence<Elements, Failure>.Output) throws -> Bool) -> Result<Bool, Error>.Publisher\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nfunc tryReduce<T>(T, (T, Publishers.Sequence<Elements, Failure>.Output) throws -> T) -> Result<T, Error>.Publisher\nAvailable when Elements conforms to Sequence and Failure conforms to Error.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nConvenience Publishers\nstruct Catch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nAvailable when Failure conforms to Error.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publishers.TryFilter",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfilter",
        "html": "Topics\nCreating a Try Filter Publisher\ninit(upstream: Upstream, isIncluded: (Upstream.Output) throws -> Bool)\nCreates a publisher that republishes all elements that match a provided error-throwing closure.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet isIncluded: (Upstream.Output) throws -> Bool\nAn error-throwing closure that indicates whether this filter should republish an element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nFiltering Elements\nstruct Filter\nA publisher that republishes all elements that match a provided closure.\nstruct CompactMap\nA publisher that republishes all non-nil results of calling a closure with each received element.\nstruct TryCompactMap\nA publisher that republishes all non-nil results of calling an error-throwing closure with each received element.\nstruct RemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element.\nstruct TryRemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nstruct ReplaceEmpty\nA publisher that replaces an empty stream with a provided element.\nstruct ReplaceError\nA publisher that replaces any errors in the stream with a provided element."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.CombineLatest",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest",
        "html": "Topics\nCreating a Combine Latest Publisher\ninit(A, B)\nCreates a publisher that receives and combines the latest elements from two publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nlet b: B\nComparing Publishers\nstatic func == (Publishers.CombineLatest<A, B>, Publishers.CombineLatest<A, B>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, and A.Failure is B.Failure.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/init(_:)",
        "html": "Parameters\npublisher\n\nA publisher to wrap with a type-eraser."
    },
    {
        "title": "description",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/description",
        "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type\u2019s description property.\n\nSee Also\nInspecting Publisher Properties\nvar playgroundDescription: Any\nA custom playground description for this instance."
    },
    {
        "title": "Encodable Implementations",
        "url": "https://developer.apple.com/documentation/combine/record/encodable-implementations",
        "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder.\nAvailable when Output conforms to Decodable, Output conforms to Encodable, Failure conforms to Decodable, Failure conforms to Encodable, and Failure conforms to Error."
    },
    {
        "title": "Subscribers.Sink",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink",
        "html": "Topics\nCanceling Publication\nfunc cancel()\nCancel the activity.\nReceiving Life Cycle Events\nfunc receive(subscription: Subscription)\nTells the subscriber that it has successfully subscribed to the publisher and may request items.\nSupporting Debugging\nvar combineIdentifier: CombineIdentifier\nA unique identifier for identifying publisher streams.\nvar customMirror: Mirror\nThe custom mirror for this instance.\nvar description: String\nA textual representation of this instance.\nvar playgroundDescription: Any\nA custom playground description for this instance.\nInitializers\ninit(receiveCompletion: ((Subscribers.Completion<Failure>) -> Void), receiveValue: ((Input) -> Void))\nInitializes a sink with the provided closures.\nInstance Properties\nvar receiveCompletion: (Subscribers.Completion<Failure>) -> Void\nThe closure to execute on completion.\nvar receiveValue: (Input) -> Void\nThe closure to execute on receipt of a value.\nInstance Methods\nfunc receive(Input) -> Subscribers.Demand\nTells the subscriber that the publisher has produced an element.\nfunc receive(completion: Subscribers.Completion<Failure>)\nTells the subscriber that the publisher has completed publishing, either normally or with an error.\nDefault Implementations\nCancellable Implementations\nCustomCombineIdentifierConvertible Implementations\nSubscriber Implementations\nRelationships\nConforms To\nCancellable\nCustomCombineIdentifierConvertible\nCustomPlaygroundDisplayConvertible\nCustomReflectable\nCustomStringConvertible\nSubscriber\nSee Also\nUsing Convenience Subscribers\nclass Assign\nA simple subscriber that assigns received elements to a property indicated by a key path."
    },
    {
        "title": "send(completion:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/send(completion:)",
        "html": "Parameters\ncompletion\n\nA Completion instance which indicates whether publishing has finished normally or failed with an error.\n\nSee Also\nDelivering Life Cycle Events to Subscribers\nfunc send(subscription: Subscription)\nSends a subscription to the subscriber."
    },
    {
        "title": "ObservableObjectPublisher.Failure",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/failure",
        "html": "Discussion\n\nUse Never if this Publisher does not publish errors.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "ObservableObjectPublisher.Output",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/output",
        "html": "See Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publishers.Zip4",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4",
        "html": "Overview\n\nUse a Publishers.Zip4 to combine the latest elements from four publishers and emit a tuple to the downstream. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nTopics\nCreating a Zip Four Publisher\ninit(A, B, C, D)\nCreates a publisher created by applying the zip function to four upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to zip.\nlet b: B\nA second publisher to zip.\nlet c: C\nA third publisher to zip.\nlet d: D\nA fourth publisher to zip.\nComparing Publishers\nstatic func == (Publishers.Zip4<A, B, C, D>, Publishers.Zip4<A, B, C, D>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, A.Failure is B.Failure, B.Failure is C.Failure, and C.Failure is D.Failure.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers."
    },
    {
        "title": "Publishers.Zip3",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3",
        "html": "Overview\n\nUse a Publishers.Zip3 to combine the latest elements from three publishers and emit a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nTopics\nCreating a Zip Three Publisher\ninit(A, B, C)\nCreates a publisher that applies the zip function to three upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to zip.\nlet b: B\nA second publisher to zip.\nlet c: C\nA third publisher to zip.\nComparing Publishers\nstatic func == (Publishers.Zip3<A, B, C>, Publishers.Zip3<A, B, C>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, and B.Failure is C.Failure.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.Zip",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip",
        "html": "Overview\n\nUse Publishers.Zip to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, Publishers.Zip combines streams from two different publishers by linking pairs of elements from each side.\n\nIf either upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nTopics\nCreating a Zip Publisher\ninit(A, B)\nCreates a publisher that applies the zip function to two upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to zip.\nlet b: B\nAnother publisher to zip.\nComparing Publishers\nstatic func == (Publishers.Zip<A, B>, Publishers.Zip<A, B>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, and A.Failure is B.Failure.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Subscribers.Demand",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand",
        "html": "Topics\nCreating a Demand\nstatic func max(Int) -> Subscribers.Demand\nCreates a demand for the given maximum number of elements.\nUsing Special Demands\nstatic let unlimited: Subscribers.Demand\nA request for as many values as the publisher can produce.\nstatic let none: Subscribers.Demand\nA request for no elements from the publisher.\nInspecing Demand Properties\nvar max: Int?\nThe number of requested values.\nEncoding and Decoding\nfunc encode(to: Encoder) throws\nEncodes the demand to the provide encoder.\ninit(from: Decoder) throws\nCreates a demand instance from a decoder.\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nComparing Demands\nstatic func == (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func == (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand requests the given number of elements.\nstatic func == (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether a given number of elements matches the request of a given demand.\nstatic func != (Self, Self) -> Bool\nstatic func != (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand isn\u2019t equal to an integer.\nstatic func != (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether an integer is unequal to a demand.\nOperators\nstatic func - (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of subtracting one demand from another.\nstatic func - (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of subtracting an integer from a demand.\nstatic func -= (inout Subscribers.Demand, Subscribers.Demand)\nSubtracts one demand from another, and assigns the result to the first demand.\nstatic func -= (inout Subscribers.Demand, Int)\nSubtracts an integer from a demand, and assigns the result to the demand.\nstatic func < (Int, Subscribers.Demand) -> Bool\nReturns a Boolean that indicates a given number of elements is less than the maximum specified by the demand.\nstatic func > (Int, Subscribers.Demand) -> Bool\nReturns a Boolean that indicates a given number of elements is greater than the maximum specified by the demand.\nstatic func > (Subscribers.Demand, Int) -> Bool\nReturns a Boolean that indicates whether the demand requests more than the given number of elements.\nstatic func > (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean that indicates whether the first demand requests more elements than the second.\nstatic func < (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean that indicates whether the first demand requests fewer elements than the second.\nstatic func < (Subscribers.Demand, Int) -> Bool\nReturns a Boolean that indicates whether the demand requests fewer than the given number of elements.\nstatic func >= (Subscribers.Demand, Int) -> Bool\nReturns a Boolean that indicates whether the first demand requests more or the same number of elements as the second.\nstatic func <= (Subscribers.Demand, Int) -> Bool\nReturns a Boolean that indicates whether the demand requests fewer or the same number of elements as the given integer.\nstatic func <= (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates a given number of elements is less than or equal the maximum specified by the demand.\nstatic func >= (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean that indicates whether the first demand requests more or the same number of elements as the second.\nstatic func >= (Int, Subscribers.Demand) -> Bool\nReturns a Boolean that indicates a given number of elements is greater than or equal to the maximum specified by the demand.\nstatic func <= (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether the first demand requests fewer or the same number of elements as the second.\nInstance Properties\nvar description: String\nA textual representation of this instance.\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nComparable Implementations\nEquatable Implementations\nRelationships\nConforms To\nComparable\nCustomStringConvertible\nDecodable\nEncodable\nEquatable\nHashable\nSendable"
    },
    {
        "title": "Subscribers.Assign",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign",
        "html": "Topics\nDeclaring Subscriber Topography\ntypealias Failure\nThe kind of errors this subscriber might receive.\nCreating an Assign Subscriber\ninit(object: Root, keyPath: ReferenceWritableKeyPath<Root, Input>)\nCreates a subscriber to assign the value of a property indicated by a key path.\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this subscriber might receive.\nInspecting the Assigned Property\nvar object: Root?\nThe object that contains the property to assign.\nlet keyPath: ReferenceWritableKeyPath<Root, Input>\nThe key path that indicates the property to assign.\nInstance Properties\nvar customMirror: Mirror\nA mirror that reflects the subscriber.\nvar description: String\nA textual representation of this subscriber.\nvar playgroundDescription: Any\nA custom playground description for this subscriber.\nInstance Methods\nfunc cancel()\nCancel the activity.\nfunc receive(Input) -> Subscribers.Demand\nTells the subscriber that the publisher has produced an element.\nfunc receive(completion: Subscribers.Completion<Never>)\nTells the subscriber that the publisher has completed publishing, either normally or with an error.\nfunc receive(subscription: Subscription)\nTells the subscriber that it has successfully subscribed to the publisher and may request items.\nDefault Implementations\nCancellable Implementations\nCustomCombineIdentifierConvertible Implementations\nSubscriber Implementations\nRelationships\nConforms To\nCancellable\nCustomCombineIdentifierConvertible\nCustomPlaygroundDisplayConvertible\nCustomReflectable\nCustomStringConvertible\nSubscriber\nSee Also\nUsing Convenience Subscribers\nclass Sink\nA simple subscriber that requests an unlimited number of values upon subscription."
    },
    {
        "title": "Subject Implementations",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/subject-implementations",
        "html": "Topics\nInstance Methods\nfunc send()\nSends a void value to the subscriber.\nAvailable when Output is ()."
    },
    {
        "title": "Publishers.Buffer",
        "url": "https://developer.apple.com/documentation/combine/publishers/buffer",
        "html": "Topics\nCreating a Buffer Publisher\ninit(upstream: Upstream, size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Publishers.Buffer<Upstream>.Failure>)\nCreates a publisher that buffers elements received from an upstream publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet size: Int\nThe maximum number of elements to store.\nlet prefetch: Publishers.PrefetchStrategy\nThe strategy for initially populating the buffer.\nlet whenFull: Publishers.BufferingStrategy<Publishers.Buffer<Upstream>.Failure>\nThe action to take when the buffer becomes full.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nBuffering Elements\nenum BufferingStrategy\nA strategy that handles exhaustion of a buffer\u2019s capacity.\nenum PrefetchStrategy\nA strategy for filling a buffer."
    },
    {
        "title": "empty",
        "url": "https://developer.apple.com/documentation/combine/subscriptions/empty",
        "html": "Discussion\n\nUse the empty subscription when you need a Subscription that ignores requests and cancellation."
    },
    {
        "title": "Publishers.TryScan",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryscan",
        "html": "Topics\nCreating a Try Scan Publisher\ninit(upstream: Upstream, initialResult: Output, nextPartialResult: (Output, Upstream.Output) throws -> Output)\nCreates a publisher that transforms elements from the upstream publisher by providing the current element to a failable closure along with the last value returned by the closure.\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet initialResult: Output\nThe previous result returned by the nextPartialResult closure.\nlet nextPartialResult: (Output, Upstream.Output) throws -> Output\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nMapping Elements\nstruct Map\nA publisher that transforms all elements from the upstream publisher with a provided closure.\nstruct TryMap\nA publisher that transforms all elements from the upstream publisher with a provided error-throwing closure.\nstruct MapError\nA publisher that converts any failure from the upstream publisher into a new error.\nstruct Scan\nA publisher that transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nstruct SetFailureType\nA publisher that appears to send a specified failure type."
    },
    {
        "title": "init(initialValue:)",
        "url": "https://developer.apple.com/documentation/combine/published/init(initialvalue:)",
        "html": "Parameters\ninitialValue\n\nThe publisher\u2019s initial value.\n\nDiscussion\n\nDon\u2019t use this initializer directly. Instead, create a property with the @Published attribute, as shown here:\n\n@Published var lastUpdated: Date = Date()\n\nSee Also\nCreating a Published Instance\ninit(wrappedValue: Value)\nCreates the published instance with an initial wrapped value."
    },
    {
        "title": "hashValue",
        "url": "https://developer.apple.com/documentation/combine/anycancellable/hashvalue",
        "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
    },
    {
        "title": "Publishers.TryRemoveDuplicates",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryremoveduplicates",
        "html": "Topics\nCreating a Try Remove Duplicates Publisher\ninit(upstream: Upstream, predicate: (Publishers.TryRemoveDuplicates<Upstream>.Output, Publishers.TryRemoveDuplicates<Upstream>.Output) throws -> Bool)\nCreates a publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.TryRemoveDuplicates<Upstream>.Output, Publishers.TryRemoveDuplicates<Upstream>.Output) throws -> Bool\nAn error-throwing closure to evaluate whether two elements are equivalent, for purposes of filtering.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nFiltering Elements\nstruct Filter\nA publisher that republishes all elements that match a provided closure.\nstruct TryFilter\nA publisher that republishes all elements that match a provided error-throwing closure.\nstruct CompactMap\nA publisher that republishes all non-nil results of calling a closure with each received element.\nstruct TryCompactMap\nA publisher that republishes all non-nil results of calling an error-throwing closure with each received element.\nstruct RemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element.\nstruct ReplaceEmpty\nA publisher that replaces an empty stream with a provided element.\nstruct ReplaceError\nA publisher that replaces any errors in the stream with a provided element."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/anycancellable/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publishers.Merge",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge",
        "html": "Topics\nCreating a Merge Publisher\ninit(A, B)\nCreates a publisher created by applying the merge function to two upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nComparing Publishers\nstatic func == (Publishers.Merge<A, B>, Publishers.Merge<A, B>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, A.Failure is B.Failure, and A.Output is B.Output.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.MeasureInterval",
        "url": "https://developer.apple.com/documentation/combine/publishers/measureinterval",
        "html": "Topics\nCreating a Measure Interval Publisher\ninit(upstream: Upstream, scheduler: Context)\nCreates a publisher that measures and emits the time interval between events received from an upstream publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet scheduler: Context\nThe scheduler used for tracking the timing of events.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nControlling Timing\nstruct Debounce\nA publisher that publishes elements only after a specified time interval elapses between events.\nstruct Delay\nA publisher that delays delivery of elements and completion to the downstream receiver.\nstruct Throttle\nA publisher that publishes either the most-recent or first element published by the upstream publisher in a specified time interval.\nstruct Timeout\nA publisher that terminates publishing if the upstream publisher exceeds a specified time interval without producing an element."
    },
    {
        "title": "store(in:)",
        "url": "https://developer.apple.com/documentation/combine/anycancellable/store(in:)-3hyxs",
        "html": "Parameters\nset\n\nThe set in which to store this AnyCancellable.\n\nSee Also\nStoring AnyCancellable Instances\nfunc store<C>(in: inout C)\nStores this type-erasing cancellable instance in the specified collection."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anycancellable/==(_:_:)",
        "html": "Parameters\nlhs\n\nAn AnyCancellable instance to compare.\n\nrhs\n\nAnother AnyCancellable instance to compare.\n\nReturn Value\n\nA Boolean value that indicates whether two instances are equal, as determined by comparing whether their references point to the same instance."
    },
    {
        "title": "Future.Promise",
        "url": "https://developer.apple.com/documentation/combine/future/promise",
        "html": "Discussion\n\nThe promise closure receives one parameter: a Result that contains either a single element published by a Future, or an error.\n\nSee Also\nCreating a Future\ninit((Future<Output, Failure>.Promise) -> Void)\nCreates a publisher that invokes a promise closure when the publisher emits an element."
    },
    {
        "title": "value",
        "url": "https://developer.apple.com/documentation/combine/future/value-5iprp",
        "html": "Discussion\n\nThis property subscribes to the Future and delivers the value asynchronously when the Future publishes it. If the Future terminates with an error, the awaiting caller receives the error instead. Use this property when you want to the async-await syntax with a Future whose Failure type is not Never.\n\nSee Also\nAccessing the Value Asynchronously\nvar value: Output\nThe published value of the future, delivered asynchronously.\nAvailable when Failure is Never."
    },
    {
        "title": "value",
        "url": "https://developer.apple.com/documentation/combine/future/value-9iwjz",
        "html": "Discussion\n\nThis property subscribes to the Future and delivers the value asynchronously when the Future publishes it. Use this property when you want to use the async-await syntax with a Future.\n\nSee Also\nAccessing the Value Asynchronously\nvar value: Output\nThe published value of the future or an error, delivered asynchronously.\nAvailable when Failure conforms to Error."
    },
    {
        "title": "Publishers.MakeConnectable",
        "url": "https://developer.apple.com/documentation/combine/publishers/makeconnectable",
        "html": "Overview\n\nPublishers.MakeConnectable is a ConnectablePublisher, which allows you to perform configuration before publishing any elements. Call connect() on this publisher when you want to attach to its upstream publisher and start producing elements.\n\nUse the makeConnectable() operator to wrap an upstream publisher with an instance of this publisher.\n\nTopics\nCreating a Connectable Publisher\ninit(upstream: Upstream)\nCreates a connectable publisher, attached to the provide upstream publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nPerforming Explicit Connections\nfunc connect() -> Cancellable\nConnects to the publisher, allowing it to produce elements, and returns an instance with which to cancel publishing.\nConnecting Automatically\nfunc autoconnect() -> Publishers.Autoconnect<Self>\nAutomates the process of connecting or disconnecting from this connectable publisher.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nConnectablePublisher Implementations\nPublisher Implementations\nRelationships\nConforms To\nConnectablePublisher\nPublisher\nSee Also\nUsing Explicit Publisher Connections\nclass Autoconnect\nA publisher that automatically connects to an upstream connectable publisher."
    },
    {
        "title": "Publishers.First",
        "url": "https://developer.apple.com/documentation/combine/publishers/first",
        "html": "Topics\nCreating a First Publisher\ninit(upstream: Upstream)\nCreates a publisher that publishes the first element of a stream, then finishes.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nComparing Publishers\nstatic func == (Publishers.First<Upstream>, Publishers.First<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two first publishers have equal upstream publishers.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nSelecting Specific Elements\nstruct FirstWhere\nA publisher that only publishes the first element of a stream to satisfy a predicate closure.\nstruct TryFirstWhere\nA publisher that only publishes the first element of a stream to satisfy a throwing predicate closure.\nstruct Last\nA publisher that waits until after the stream finishes, and then publishes the last element of the stream.\nstruct LastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies a predicate closure.\nstruct TryLastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies an error-throwing predicate closure.\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "Publishers.HandleEvents",
        "url": "https://developer.apple.com/documentation/combine/publishers/handleevents",
        "html": "Topics\nCreating a HandleEvents Publisher\ninit(upstream: Upstream, receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Publishers.HandleEvents<Upstream>.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Publishers.HandleEvents<Upstream>.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?)\nCreates a publisher that performs the specified closures when publisher events occur.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nvar receiveSubscription: ((Subscription) -> Void)?\nA closure that executes when the publisher receives the subscription from the upstream publisher.\nvar receiveOutput: ((Publishers.HandleEvents<Upstream>.Output) -> Void)?\nA closure that executes when the publisher receives a value from the upstream publisher.\nvar receiveCompletion: ((Subscribers.Completion<Publishers.HandleEvents<Upstream>.Failure>) -> Void)?\nA closure that executes when the upstream publisher finishes normally or terminates with an error.\nvar receiveCancel: (() -> Void)?\nA closure that executes when the downstream receiver cancels publishing.\nvar receiveRequest: ((Subscribers.Demand) -> Void)?\nA closure that executes when the publisher receives a request for more elements.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nDebugging\nstruct Breakpoint\nA publisher that raises a debugger signal when a provided closure needs to stop the process in the debugger.\nstruct Print\nA publisher that prints log messages for all publishing events, optionally prefixed with a given string."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "Publishers.TryPrefixWhile",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryprefixwhile",
        "html": "Topics\nCreating a Try Prefix While Publisher\ninit(upstream: Upstream, predicate: (Publishers.TryPrefixWhile<Upstream>.Output) throws -> Bool)\nCreates a publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.TryPrefixWhile<Upstream>.Output) throws -> Bool\nThe error-throwing closure that determines whether publishing should continue.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Sequence Operations to Elements\nstruct DropUntilOutput\nA publisher that ignores elements from the upstream publisher until it receives an element from second publisher.\nstruct Drop\nA publisher that omits a specified number of elements before republishing later elements.\nstruct DropWhile\nA publisher that omits elements from an upstream publisher until a given closure returns false.\nstruct TryDropWhile\nA publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nstruct Concatenate\nA publisher that emits all of one publisher\u2019s elements before those from another publisher.\nstruct PrefixWhile\nA publisher that republishes elements while a predicate closure indicates publishing should continue.\nstruct PrefixUntilOutput\nA publisher that republishes elements until another publisher emits an element."
    },
    {
        "title": "Publishers.TryReduce",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryreduce",
        "html": "Topics\nCreating a Try Reduce Publisher\ninit(upstream: Upstream, initial: Output, nextPartialResult: (Output, Upstream.Output) throws -> Output)\nCreates a publisher that applies an error-throwing closure to all received elements and produces an accumulated value when the upstream publisher finishes.\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet initial: Output\nThe initial value provided on the first-use of the closure.\nlet nextPartialResult: (Output, Upstream.Output) throws -> Output\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream to produce a new value.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nReducing Elements\nstruct Collect\nA publisher that buffers items.\nstruct CollectByCount\nA publisher that buffers a maximum number of items.\nstruct CollectByTime\nA publisher that buffers and periodically publishes its items.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nstruct IgnoreOutput\nA publisher that ignores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nstruct Reduce\nA publisher that applies a closure to all received elements and produces an accumulated value when the upstream publisher finishes."
    },
    {
        "title": "Publishers.MapError",
        "url": "https://developer.apple.com/documentation/combine/publishers/maperror",
        "html": "Topics\nCreating a Map Error Publisher\ninit(upstream: Upstream, (Upstream.Failure) -> Failure)\ninit(upstream: Upstream, transform: (Upstream.Failure) -> Failure)\nCreates a publisher that converts any failure from the upstream publisher into a new error.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet transform: (Upstream.Failure) -> Failure\nThe closure that converts the upstream failure into a new error.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nMapping Elements\nstruct Map\nA publisher that transforms all elements from the upstream publisher with a provided closure.\nstruct TryMap\nA publisher that transforms all elements from the upstream publisher with a provided error-throwing closure.\nstruct Scan\nA publisher that transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nstruct TryScan\nA publisher that transforms elements from the upstream publisher by providing the current element to a failable closure along with the last value returned by the closure.\nstruct SetFailureType\nA publisher that appears to send a specified failure type."
    },
    {
        "title": "Publishers.TryFirstWhere",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfirstwhere",
        "html": "Topics\nCreating a Try First Where Publisher\ninit(upstream: Upstream, predicate: (Publishers.TryFirstWhere<Upstream>.Output) throws -> Bool)\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.TryFirstWhere<Upstream>.Output) throws -> Bool\nThe error-throwing closure that determines whether to publish an element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nSelecting Specific Elements\nstruct First\nA publisher that publishes the first element of a stream, then finishes.\nstruct FirstWhere\nA publisher that only publishes the first element of a stream to satisfy a predicate closure.\nstruct Last\nA publisher that waits until after the stream finishes, and then publishes the last element of the stream.\nstruct LastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies a predicate closure.\nstruct TryLastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies an error-throwing predicate closure.\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "Publishers.TryCatch",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycatch",
        "html": "Overview\n\nBecause this publisher\u2019s handler can throw an error, Publishers.TryCatch defines its Failure type as Error. This is different from Publishers.Catch, which gets its failure type from the replacement publisher.\n\nTopics\nCreating a Try-Catch Publisher\ninit(upstream: Upstream, handler: (Upstream.Failure) throws -> NewPublisher)\nCreates a publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher or by throwing an error.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet handler: (Upstream.Failure) throws -> NewPublisher\nA closure that accepts the upstream failure as input and either returns a publisher to replace the upstream publisher or throws an error.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nHandling Errors\nstruct AssertNoFailure\nA publisher that raises a fatal error upon receiving any failure, and otherwise republishes all received input.\nstruct Catch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\nstruct Retry\nA publisher that attempts to recreate its subscription to a failed upstream publisher."
    },
    {
        "title": "Publishers.TryMap",
        "url": "https://developer.apple.com/documentation/combine/publishers/trymap",
        "html": "Topics\nCreating a Try Map Publisher\ninit(upstream: Upstream, transform: (Upstream.Output) throws -> Output)\nCreates a publisher that transforms all elements from the upstream publisher with a provided error-throwing closure.\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet transform: (Upstream.Output) throws -> Output\nThe error-throwing closure that transforms elements from the upstream publisher.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nMapping Elements\nstruct Map\nA publisher that transforms all elements from the upstream publisher with a provided closure.\nstruct MapError\nA publisher that converts any failure from the upstream publisher into a new error.\nstruct Scan\nA publisher that transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nstruct TryScan\nA publisher that transforms elements from the upstream publisher by providing the current element to a failable closure along with the last value returned by the closure.\nstruct SetFailureType\nA publisher that appears to send a specified failure type."
    },
    {
        "title": "Publishers.Timeout",
        "url": "https://developer.apple.com/documentation/combine/publishers/timeout",
        "html": "Topics\nCreating a Timeout Publisher\ninit(upstream: Upstream, interval: Context.SchedulerTimeType.Stride, scheduler: Context, options: Context.SchedulerOptions?, customError: (() -> Publishers.Timeout<Upstream, Context>.Failure)?)\nCreates a publisher that terminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\nlet scheduler: Context\nThe scheduler on which to deliver events.\nlet options: Context.SchedulerOptions?\nScheduler options that customize the delivery of elements.\nlet customError: (() -> Publishers.Timeout<Upstream, Context>.Failure)?\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nControlling Timing\nstruct MeasureInterval\nA publisher that measures and emits the time interval between events received from an upstream publisher.\nstruct Debounce\nA publisher that publishes elements only after a specified time interval elapses between events.\nstruct Delay\nA publisher that delays delivery of elements and completion to the downstream receiver.\nstruct Throttle\nA publisher that publishes either the most-recent or first element published by the upstream publisher in a specified time interval."
    },
    {
        "title": "Publishers.SwitchToLatest",
        "url": "https://developer.apple.com/documentation/combine/publishers/switchtolatest",
        "html": "Overview\n\nGiven a publisher that publishes Publisher instances, the Publishers.SwitchToLatest publisher produces a sequence of events from only the most recent one. For example, given the type AnyPublisher<URLSession.DataTaskPublisher, NSError>, calling Publisher/switchToLatest() results in the type SwitchToLatest<(Data, URLResponse), URLError>. The downstream subscriber sees a continuous stream of (Data, URLResponse) elements from what looks like a single URLSession.DataTaskPublisher even though the elements are coming from different upstream publishers.\n\nWhen Publishers.SwitchToLatest receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently-updating user interface publishers.\n\nTopics\nCreating a Switch to Latest Publisher\ninit(upstream: Upstream)\nCreates a publisher that \u201cflattens\u201d nested publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nstruct FlatMap\nA publisher that transforms elements from an upstream publisher into a new publisher."
    },
    {
        "title": "Publishers.Throttle",
        "url": "https://developer.apple.com/documentation/combine/publishers/throttle",
        "html": "Topics\nCreating a Throttle Publisher\ninit(upstream: Upstream, interval: Context.SchedulerTimeType.Stride, scheduler: Context, latest: Bool)\nCreates a publisher that publishes either the most-recent or first element published by the upstream publisher in a specified time interval.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe interval in which to find and emit the most recent element.\nlet scheduler: Context\nThe scheduler on which to publish elements.\nlet latest: Bool\nA Boolean value indicating whether to publish the most recent element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nControlling Timing\nstruct MeasureInterval\nA publisher that measures and emits the time interval between events received from an upstream publisher.\nstruct Debounce\nA publisher that publishes elements only after a specified time interval elapses between events.\nstruct Delay\nA publisher that delays delivery of elements and completion to the downstream receiver.\nstruct Timeout\nA publisher that terminates publishing if the upstream publisher exceeds a specified time interval without producing an element."
    },
    {
        "title": "Publishers.TryAllSatisfy",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryallsatisfy",
        "html": "Topics\nCreating a Try All Satisfy Publisher\ninit(upstream: Upstream, predicate: (Upstream.Output) throws -> Bool)\nReturns a publisher that publishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Upstream.Output) throws -> Bool\nA closure that evaluates each received element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Matching Criteria to Elements\nstruct Contains\nA publisher that emits a Boolean value when it receives a specific element from its upstream publisher.\nstruct ContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the predicate closure.\nstruct TryContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nstruct AllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "Publishers.Share",
        "url": "https://developer.apple.com/documentation/combine/publishers/share",
        "html": "Overview\n\nThis publisher type supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nBe aware that Publishers.Share is a class rather than a structure like most other publishers. Use this type when you need a publisher instance that uses reference semantics.\n\nTopics\nCreating a Share Publisher\ninit(upstream: Upstream)\nCreates a publisher that shares the output of an upstream publisher with multiple subscribers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nComparing Publishers\nstatic func == (Publishers.Share<Upstream>, Publishers.Share<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nWorking with Multiple Subscribers\nclass Multicast\nA publisher that uses a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "Publishers.ReplaceEmpty",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceempty",
        "html": "Topics\nCreating a Replace Empty Publisher\ninit(upstream: Upstream, output: Publishers.ReplaceEmpty<Upstream>.Output)\nCreates a publisher that replaces an empty stream with a provided element.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet output: Publishers.ReplaceEmpty<Upstream>.Output\nThe element to deliver when the upstream publisher finishes without delivering any elements.\nlet output: Publishers.ReplaceEmpty<Upstream>.Output\nThe element to deliver when the upstream publisher finishes without delivering any elements.\nComparing Publishers\nstatic func == (Publishers.ReplaceEmpty<Upstream>, Publishers.ReplaceEmpty<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nFiltering Elements\nstruct Filter\nA publisher that republishes all elements that match a provided closure.\nstruct TryFilter\nA publisher that republishes all elements that match a provided error-throwing closure.\nstruct CompactMap\nA publisher that republishes all non-nil results of calling a closure with each received element.\nstruct TryCompactMap\nA publisher that republishes all non-nil results of calling an error-throwing closure with each received element.\nstruct RemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element.\nstruct TryRemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nstruct ReplaceError\nA publisher that replaces any errors in the stream with a provided element."
    },
    {
        "title": "Publishers.ReplaceError",
        "url": "https://developer.apple.com/documentation/combine/publishers/replaceerror",
        "html": "Topics\nCreating a Replace Error Publisher\ninit(upstream: Upstream, output: Publishers.ReplaceError<Upstream>.Output)\nCreates a publisher that replaces any errors in the stream with a provided element.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet output: Publishers.ReplaceError<Upstream>.Output\nThe element with which to replace errors from the upstream publisher.\nlet output: Publishers.ReplaceError<Upstream>.Output\nThe element with which to replace errors from the upstream publisher.\nComparing Publishers\nstatic func == (Publishers.ReplaceError<Upstream>, Publishers.ReplaceError<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nFiltering Elements\nstruct Filter\nA publisher that republishes all elements that match a provided closure.\nstruct TryFilter\nA publisher that republishes all elements that match a provided error-throwing closure.\nstruct CompactMap\nA publisher that republishes all non-nil results of calling a closure with each received element.\nstruct TryCompactMap\nA publisher that republishes all non-nil results of calling an error-throwing closure with each received element.\nstruct RemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element.\nstruct TryRemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nstruct ReplaceEmpty\nA publisher that replaces an empty stream with a provided element."
    },
    {
        "title": "Publishers.Reduce",
        "url": "https://developer.apple.com/documentation/combine/publishers/reduce",
        "html": "Topics\nCreating a Reduce Publisher\ninit(upstream: Upstream, initial: Output, nextPartialResult: (Output, Upstream.Output) -> Output)\nCreates a publisher that applies a closure to all received elements and produces an accumulated value when the upstream publisher finishes.\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet initial: Output\nThe initial value provided on the first invocation of the closure.\nlet nextPartialResult: (Output, Upstream.Output) -> Output\nA closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nReducing Elements\nstruct Collect\nA publisher that buffers items.\nstruct CollectByCount\nA publisher that buffers a maximum number of items.\nstruct CollectByTime\nA publisher that buffers and periodically publishes its items.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nstruct IgnoreOutput\nA publisher that ignores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nstruct TryReduce\nA publisher that applies an error-throwing closure to all received elements and produces an accumulated value when the upstream publisher finishes."
    },
    {
        "title": "Publishers.TryCompactMap",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycompactmap",
        "html": "Topics\nCreating a Try Compact Map Publisher\ninit(upstream: Upstream, transform: (Upstream.Output) throws -> Output?)\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet transform: (Upstream.Output) throws -> Output?\nAn error-throwing closure that receives values from the upstream publisher and returns optional values.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nFiltering Elements\nstruct Filter\nA publisher that republishes all elements that match a provided closure.\nstruct TryFilter\nA publisher that republishes all elements that match a provided error-throwing closure.\nstruct CompactMap\nA publisher that republishes all non-nil results of calling a closure with each received element.\nstruct RemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element.\nstruct TryRemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nstruct ReplaceEmpty\nA publisher that replaces an empty stream with a provided element.\nstruct ReplaceError\nA publisher that replaces any errors in the stream with a provided element."
    },
    {
        "title": "Publishers.Scan",
        "url": "https://developer.apple.com/documentation/combine/publishers/scan",
        "html": "Topics\nCreating a Scan Publisher\ninit(upstream: Upstream, initialResult: Output, nextPartialResult: (Output, Upstream.Output) -> Output)\nCreates a publisher that transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet initialResult: Output\nThe previous result returned by the nextPartialResult closure.\nlet nextPartialResult: (Output, Upstream.Output) -> Output\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nMapping Elements\nstruct Map\nA publisher that transforms all elements from the upstream publisher with a provided closure.\nstruct TryMap\nA publisher that transforms all elements from the upstream publisher with a provided error-throwing closure.\nstruct MapError\nA publisher that converts any failure from the upstream publisher into a new error.\nstruct TryScan\nA publisher that transforms elements from the upstream publisher by providing the current element to a failable closure along with the last value returned by the closure.\nstruct SetFailureType\nA publisher that appears to send a specified failure type."
    },
    {
        "title": "Publishers.SetFailureType",
        "url": "https://developer.apple.com/documentation/combine/publishers/setfailuretype",
        "html": "Overview\n\nThe publisher can\u2019t actually fail with the specified type and finishes normally. Use this publisher type when you need to match the error types for two mismatched publishers.\n\nTopics\nCreating a Set Failure Type Publisher\ninit(upstream: Upstream)\nCreates a publisher that appears to send a specified failure type.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nComparing Publishers\nstatic func == (Publishers.SetFailureType<Upstream, Failure>, Publishers.SetFailureType<Upstream, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, Failure conforms to Error, and Upstream.Failure is Never.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nMapping Elements\nstruct Map\nA publisher that transforms all elements from the upstream publisher with a provided closure.\nstruct TryMap\nA publisher that transforms all elements from the upstream publisher with a provided error-throwing closure.\nstruct MapError\nA publisher that converts any failure from the upstream publisher into a new error.\nstruct Scan\nA publisher that transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nstruct TryScan\nA publisher that transforms elements from the upstream publisher by providing the current element to a failable closure along with the last value returned by the closure."
    },
    {
        "title": "Publishers.SubscribeOn",
        "url": "https://developer.apple.com/documentation/combine/publishers/subscribeon",
        "html": "Topics\nCreating a Subscribe-On Publisher\ninit(upstream: Upstream, scheduler: Context, options: Context.SchedulerOptions?)\nCreates a publisher that receives elements from an upstream publisher on a specific scheduler.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet scheduler: Context\nThe scheduler the publisher should use to receive elements.\nlet options: Context.SchedulerOptions?\nScheduler options that customize the delivery of elements.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nWorking with Subscribers\nstruct ReceiveOn\nA publisher that delivers elements to its downstream subscriber on a specific scheduler."
    },
    {
        "title": "Publishers.RemoveDuplicates",
        "url": "https://developer.apple.com/documentation/combine/publishers/removeduplicates",
        "html": "Topics\nCreating a Remove Duplicates Publisher\ninit(upstream: Upstream, predicate: (Publishers.RemoveDuplicates<Upstream>.Output, Publishers.RemoveDuplicates<Upstream>.Output) -> Bool)\nCreates a publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.RemoveDuplicates<Upstream>.Output, Publishers.RemoveDuplicates<Upstream>.Output) -> Bool\nThe predicate closure used to evaluate whether two elements are duplicates.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nFiltering Elements\nstruct Filter\nA publisher that republishes all elements that match a provided closure.\nstruct TryFilter\nA publisher that republishes all elements that match a provided error-throwing closure.\nstruct CompactMap\nA publisher that republishes all non-nil results of calling a closure with each received element.\nstruct TryCompactMap\nA publisher that republishes all non-nil results of calling an error-throwing closure with each received element.\nstruct TryRemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nstruct ReplaceEmpty\nA publisher that replaces an empty stream with a provided element.\nstruct ReplaceError\nA publisher that replaces any errors in the stream with a provided element."
    },
    {
        "title": "Publishers.Merge8",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge8",
        "html": "Topics\nCreating a Merge-Eight Publisher\ninit(A, B, C, D, E, F, G, H)\nCreates a publisher created by applying the merge function to eight upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge.\nlet h: H\nA eighth publisher to merge.\nComparing Publishers\nstatic func == (Publishers.Merge8<A, B, C, D, E, F, G, H>, Publishers.Merge8<A, B, C, D, E, F, G, H>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, F conforms to Publisher, F conforms to Equatable, G conforms to Publisher, G conforms to Equatable, H conforms to Publisher, H conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, D.Output is E.Output, E.Failure is F.Failure, E.Output is F.Output, F.Failure is G.Failure, F.Output is G.Output, G.Failure is H.Failure, and G.Output is H.Output.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.Merge5",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge5",
        "html": "Topics\nCreating a Merge-Five Publisher\ninit(A, B, C, D, E)\nCreates a publisher created by applying the merge function to five upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nComparing Publishers\nstatic func == (Publishers.Merge5<A, B, C, D, E>, Publishers.Merge5<A, B, C, D, E>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, and D.Output is E.Output.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.Merge4",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge4",
        "html": "Topics\nCreating a Merge-Four Publisher\ninit(A, B, C, D)\nCreates a publisher created by applying the merge function to four upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nComparing Publishers\nstatic func == (Publishers.Merge4<A, B, C, D>, Publishers.Merge4<A, B, C, D>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, and C.Output is D.Output.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge<Self, P>\nCombines elements from this publisher with those from another publisher, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "store(in:)",
        "url": "https://developer.apple.com/documentation/combine/cancellable/store(in:)-35vnt",
        "html": "Parameters\ncollection\n\nThe collection in which to store this Cancellable.\n\nSee Also\nStoring Cancellable Instances\nfunc store(in: inout Set<AnyCancellable>)\nStores this cancellable instance in the specified set."
    },
    {
        "title": "Subscribers.Completion.failure(_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/failure(_:)",
        "html": "See Also\nCompletion States\ncase finished\nThe publisher finished normally."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge<Self, P>\nCombines elements from this publisher with those from another publisher, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "send(subscription:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/send(subscription:)",
        "html": "Parameters\nsubscription\n\nThe subscription instance through which the subscriber can request elements.\n\nDiscussion\n\nThis call provides the Subject an opportunity to establish demand for any new upstream subscriptions.\n\nSee Also\nDelivering Life Cycle Events to Subscribers\nfunc send(completion: Subscribers.Completion<Failure>)\nSends a completion signal to the subscriber."
    },
    {
        "title": "send()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/send()",
        "html": "Discussion\n\nUse Void inputs and outputs when you want to signal that an event has occurred, but don\u2019t need to send the event itself.\n\nSee Also\nDelivering Elements to Subscribers\nfunc send(Output)\nSends a value to the subscriber."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/merge(with:)-7qt71",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:). To combine elements from multiple upstream publishers, use zip(_:).\n\nIn this example, as merge(with:) receives input from either upstream publisher, it republishes it to the downstream:\n\nlet publisher = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = publisher\n    .merge(with: pub2)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npublisher.send(2)\npub2.send(2)\npublisher.send(3)\npub2.send(22)\npublisher.send(45)\npub2.send(22)\npublisher.send(17)\n\n\n// Prints: \"2 2 3 22 45 22 17\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "Publishers.CombineLatest3",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest3",
        "html": "Topics\nCreating a Combine Latest-Three Publisher\ninit(A, B, C)\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nlet b: B\nlet c: C\nComparing Publishers\nstatic func == (Publishers.CombineLatest3<A, B, C>, Publishers.CombineLatest3<A, B, C>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, and B.Failure is C.Failure.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.CombineLatest4",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest4",
        "html": "Topics\nCreating a Combine Latest-Four Publisher\ninit(A, B, C, D)\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nlet b: B\nlet c: C\nlet d: D\nComparing Publishers\nstatic func == (Publishers.CombineLatest4<A, B, C, D>, Publishers.CombineLatest4<A, B, C, D>) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, A.Failure is B.Failure, B.Failure is C.Failure, and C.Failure is D.Failure.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.CollectByTime",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbytime",
        "html": "Topics\nCreating a Collect by Time Publisher\ninit(upstream: Upstream, strategy: Publishers.TimeGroupingStrategy<Context>, options: Context.SchedulerOptions?)\nCreates a publisher that buffers and periodically publishes its items.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet strategy: Publishers.TimeGroupingStrategy<Context>\nThe strategy with which to collect and publish elements.\nlet options: Context.SchedulerOptions?\nScheduler options to use for the strategy.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nReducing Elements\nstruct Collect\nA publisher that buffers items.\nstruct CollectByCount\nA publisher that buffers a maximum number of items.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nstruct IgnoreOutput\nA publisher that ignores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nstruct Reduce\nA publisher that applies a closure to all received elements and produces an accumulated value when the upstream publisher finishes.\nstruct TryReduce\nA publisher that applies an error-throwing closure to all received elements and produces an accumulated value when the upstream publisher finishes."
    },
    {
        "title": "projectedValue",
        "url": "https://developer.apple.com/documentation/combine/published/projectedvalue",
        "html": "Discussion\n\nThe projectedValue is the property accessed with the $ operator.\n\nSee Also\nPublishing the Value\nstruct Publisher\nA publisher for properties marked with the @Published attribute."
    },
    {
        "title": "init(wrappedValue:)",
        "url": "https://developer.apple.com/documentation/combine/published/init(wrappedvalue:)",
        "html": "Parameters\nwrappedValue\n\nThe publisher\u2019s initial value.\n\nDiscussion\n\nDon\u2019t use this initializer directly. Instead, create a property with the @Published attribute, as shown here:\n\n@Published var lastUpdated: Date = Date()\n\nSee Also\nCreating a Published Instance\ninit(initialValue: Value)\nCreates the published instance with an initial value."
    },
    {
        "title": "Publishers.AssertNoFailure",
        "url": "https://developer.apple.com/documentation/combine/publishers/assertnofailure",
        "html": "Overview\n\nUse this function for internal integrity checks that are active during testing but don\u2019t affect performance of shipping code.\n\nTopics\nCreating an Assert No Failure Publisher\ninit(upstream: Upstream, prefix: String, file: StaticString, line: UInt)\nCreates a publisher that raises a fatal error upon receiving any failure, and otherwise republishes all received input.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet file: StaticString\nThe filename used in the error message.\nlet line: UInt\nThe line number used in the error message.\nlet prefix: String\nThe string used at the beginning of the fatal error message.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nHandling Errors\nstruct Catch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\nstruct TryCatch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher or producing a new error.\nstruct Retry\nA publisher that attempts to recreate its subscription to a failed upstream publisher."
    },
    {
        "title": "Publishers.Catch",
        "url": "https://developer.apple.com/documentation/combine/publishers/catch",
        "html": "Topics\nCreating a Catch Publisher\ninit(upstream: Upstream, handler: (Upstream.Failure) -> NewPublisher)\nCreates a publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet handler: (Upstream.Failure) -> NewPublisher\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nConvenience Publishers\nstruct Sequence\nA publisher that publishes a given sequence of elements."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/prepend(_:)-7wk5l",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "Publishers.CollectByCount",
        "url": "https://developer.apple.com/documentation/combine/publishers/collectbycount",
        "html": "Topics\nCreating a Collect by Count Publisher\ninit(upstream: Upstream, count: Int)\nCreates a publisher that buffers a maximum number of items.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet count: Int\nThe maximum number of received elements to buffer before publishing.\nComparing Publishers\nstatic func == (Publishers.CollectByCount<Upstream>, Publishers.CollectByCount<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nReducing Elements\nstruct Collect\nA publisher that buffers items.\nstruct CollectByTime\nA publisher that buffers and periodically publishes its items.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nstruct IgnoreOutput\nA publisher that ignores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nstruct Reduce\nA publisher that applies a closure to all received elements and produces an accumulated value when the upstream publisher finishes.\nstruct TryReduce\nA publisher that applies an error-throwing closure to all received elements and produces an accumulated value when the upstream publisher finishes."
    },
    {
        "title": "Publishers.Collect",
        "url": "https://developer.apple.com/documentation/combine/publishers/collect",
        "html": "Topics\nCreating a Collect Publisher\ninit(upstream: Upstream)\nCreates a publisher that buffers items.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nComparing Publishers\nstatic func == (Publishers.Collect<Upstream>, Publishers.Collect<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nReducing Elements\nstruct CollectByCount\nA publisher that buffers a maximum number of items.\nstruct CollectByTime\nA publisher that buffers and periodically publishes its items.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nstruct IgnoreOutput\nA publisher that ignores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nstruct Reduce\nA publisher that applies a closure to all received elements and produces an accumulated value when the upstream publisher finishes.\nstruct TryReduce\nA publisher that applies an error-throwing closure to all received elements and produces an accumulated value when the upstream publisher finishes."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "Publishers.Debounce",
        "url": "https://developer.apple.com/documentation/combine/publishers/debounce",
        "html": "Topics\nCreating a Debounce Publisher\ninit(upstream: Upstream, dueTime: Context.SchedulerTimeType.Stride, scheduler: Context, options: Context.SchedulerOptions?)\nCreates a publisher that publishes elements only after a specified time interval elapses between events.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet dueTime: Context.SchedulerTimeType.Stride\nThe amount of time the publisher should wait before publishing an element.\nlet scheduler: Context\nThe scheduler on which this publisher delivers elements.\nlet options: Context.SchedulerOptions?\nScheduler options that customize this publisher\u2019s delivery of elements.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nControlling Timing\nstruct MeasureInterval\nA publisher that measures and emits the time interval between events received from an upstream publisher.\nstruct Delay\nA publisher that delays delivery of elements and completion to the downstream receiver.\nstruct Throttle\nA publisher that publishes either the most-recent or first element published by the upstream publisher in a specified time interval.\nstruct Timeout\nA publisher that terminates publishing if the upstream publisher exceeds a specified time interval without producing an element."
    },
    {
        "title": "Publishers.MapKeyPath3",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath3",
        "html": "Topics\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet keyPath0: KeyPath<Upstream.Output, Output0>\nThe key path of a property to publish.\nlet keyPath1: KeyPath<Upstream.Output, Output1>\nThe key path of a second property to publish.\nlet keyPath2: KeyPath<Upstream.Output, Output2>\nThe key path of a third property to publish.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nIdentifying Properties with Key Paths\nstruct MapKeyPath\nA publisher that publishes the value of a key path.\nstruct MapKeyPath2\nA publisher that publishes the values of two key paths as a tuple."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/publisher/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.MapKeyPath",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath",
        "html": "Topics\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet keyPath: KeyPath<Upstream.Output, Output>\nThe key path of a property to publish.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nIdentifying Properties with Key Paths\nstruct MapKeyPath2\nA publisher that publishes the values of two key paths as a tuple.\nstruct MapKeyPath3\nA publisher that publishes the values of three key paths as a tuple."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/publisher/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "Publishers.Merge3",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge3",
        "html": "Topics\nCreating a Merge-Three Publisher\ninit(A, B, C)\nCreates a publisher created by applying the merge function to three upstream publishers.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nComparing Publishers\nstatic func == (Publishers.Merge3<A, B, C>, Publishers.Merge3<A, B, C>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, and B.Output is C.Output.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers."
    },
    {
        "title": "Publishers.LastWhere",
        "url": "https://developer.apple.com/documentation/combine/publishers/lastwhere",
        "html": "Topics\nCreating a Last Where Publisher\ninit(upstream: Upstream, predicate: (Publishers.LastWhere<Upstream>.Output) -> Bool)\nCreates a publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies a predicate closure.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.LastWhere<Upstream>.Output) -> Bool\nThe closure that determines whether to publish an element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nSelecting Specific Elements\nstruct First\nA publisher that publishes the first element of a stream, then finishes.\nstruct FirstWhere\nA publisher that only publishes the first element of a stream to satisfy a predicate closure.\nstruct TryFirstWhere\nA publisher that only publishes the first element of a stream to satisfy a throwing predicate closure.\nstruct Last\nA publisher that waits until after the stream finishes, and then publishes the last element of the stream.\nstruct TryLastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies an error-throwing predicate closure.\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "Published.Publisher",
        "url": "https://developer.apple.com/documentation/combine/published/publisher",
        "html": "Topics\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nInstance Methods\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nPublishing the Value\nvar projectedValue: Published<Value>.Publisher\nThe property for which this instance exposes a publisher."
    },
    {
        "title": "Publishers.Last",
        "url": "https://developer.apple.com/documentation/combine/publishers/last",
        "html": "Topics\nCreating a Last Publisher\ninit(upstream: Upstream)\nCreates a publisher that waits until after the stream finishes and then publishes the last element of the stream.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nComparing Publishers\nstatic func == (Publishers.Last<Upstream>, Publishers.Last<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nSelecting Specific Elements\nstruct First\nA publisher that publishes the first element of a stream, then finishes.\nstruct FirstWhere\nA publisher that only publishes the first element of a stream to satisfy a predicate closure.\nstruct TryFirstWhere\nA publisher that only publishes the first element of a stream to satisfy a throwing predicate closure.\nstruct LastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies a predicate closure.\nstruct TryLastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies an error-throwing predicate closure.\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "Publishers.FlatMap",
        "url": "https://developer.apple.com/documentation/combine/publishers/flatmap",
        "html": "Topics\nCreating a Flat Map Publisher\ninit(upstream: Upstream, maxPublishers: Subscribers.Demand, transform: (Upstream.Output) -> NewPublisher)\nCreates a publisher that transforms elements from an upstream publisher into a new publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet maxPublishers: Subscribers.Demand\nThe maximum number of concurrent publisher subscriptions\nlet transform: (Upstream.Output) -> NewPublisher\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nstruct SwitchToLatest\nA publisher that flattens nested publishers."
    },
    {
        "title": "Publishers.IgnoreOutput",
        "url": "https://developer.apple.com/documentation/combine/publishers/ignoreoutput",
        "html": "Topics\nCreating an Ignore Output Publisher\ninit(upstream: Upstream)\nCreates a publisher that ignores all upstream elements, but passes along the upstream publisher\u2019s completion state (finish or failed).\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nComparing Publishers\nstatic func == (Publishers.IgnoreOutput<Upstream>, Publishers.IgnoreOutput<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nReducing Elements\nstruct Collect\nA publisher that buffers items.\nstruct CollectByCount\nA publisher that buffers a maximum number of items.\nstruct CollectByTime\nA publisher that buffers and periodically publishes its items.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nstruct Reduce\nA publisher that applies a closure to all received elements and produces an accumulated value when the upstream publisher finishes.\nstruct TryReduce\nA publisher that applies an error-throwing closure to all received elements and produces an accumulated value when the upstream publisher finishes."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/map(_:)-6sm0a",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "Publishers.FirstWhere",
        "url": "https://developer.apple.com/documentation/combine/publishers/firstwhere",
        "html": "Topics\nCreating a First-Where Publisher\ninit(upstream: Upstream, predicate: (Publishers.FirstWhere<Upstream>.Output) -> Bool)\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nInstance Properties\nlet predicate: (Publishers.FirstWhere<Upstream>.Output) -> Bool\nThe closure that determines whether to publish an element.\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nSelecting Specific Elements\nstruct First\nA publisher that publishes the first element of a stream, then finishes.\nstruct TryFirstWhere\nA publisher that only publishes the first element of a stream to satisfy a throwing predicate closure.\nstruct Last\nA publisher that waits until after the stream finishes, and then publishes the last element of the stream.\nstruct LastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies a predicate closure.\nstruct TryLastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies an error-throwing predicate closure.\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "Publishers.Delay",
        "url": "https://developer.apple.com/documentation/combine/publishers/delay",
        "html": "Topics\nCreating a Delay Publisher\ninit(upstream: Upstream, interval: Context.SchedulerTimeType.Stride, tolerance: Context.SchedulerTimeType.Stride, scheduler: Context, options: Context.SchedulerOptions?)\nCreates a publisher that delays delivery of elements and completion to the downstream receiver.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet interval: Context.SchedulerTimeType.Stride\nThe amount of time to delay.\nlet tolerance: Context.SchedulerTimeType.Stride\nThe allowed tolerance in firing delayed events.\nlet scheduler: Context\nThe scheduler to deliver the delayed events.\nlet options: Context.SchedulerOptions?\nOptions relevant to the scheduler\u2019s behavior.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nControlling Timing\nstruct MeasureInterval\nA publisher that measures and emits the time interval between events received from an upstream publisher.\nstruct Debounce\nA publisher that publishes elements only after a specified time interval elapses between events.\nstruct Throttle\nA publisher that publishes either the most-recent or first element published by the upstream publisher in a specified time interval.\nstruct Timeout\nA publisher that terminates publishing if the upstream publisher exceeds a specified time interval without producing an element."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/publisher/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "Publishers.TryLastWhere",
        "url": "https://developer.apple.com/documentation/combine/publishers/trylastwhere",
        "html": "Topics\nCreating a Try Last Where Publisher\ninit(upstream: Upstream, predicate: (Publishers.TryLastWhere<Upstream>.Output) throws -> Bool)\nCreates a publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies an error-throwing predicate closure.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.TryLastWhere<Upstream>.Output) throws -> Bool\nThe error-throwing closure that determines whether to publish an element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nSelecting Specific Elements\nstruct First\nA publisher that publishes the first element of a stream, then finishes.\nstruct FirstWhere\nA publisher that only publishes the first element of a stream to satisfy a predicate closure.\nstruct TryFirstWhere\nA publisher that only publishes the first element of a stream to satisfy a throwing predicate closure.\nstruct Last\nA publisher that waits until after the stream finishes, and then publishes the last element of the stream.\nstruct LastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies a predicate closure.\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "Publishers.Drop",
        "url": "https://developer.apple.com/documentation/combine/publishers/drop",
        "html": "Topics\nCreating a Drop Publisher\ninit(upstream: Upstream, count: Int)\nCreates a publisher that omits a specified number of elements before republishing later elements.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet count: Int\nThe number of elements to drop.\nComparing Publishers\nstatic func == (Publishers.Drop<Upstream>, Publishers.Drop<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nApplying Sequence Operations to Elements\nstruct DropUntilOutput\nA publisher that ignores elements from the upstream publisher until it receives an element from second publisher.\nstruct DropWhile\nA publisher that omits elements from an upstream publisher until a given closure returns false.\nstruct TryDropWhile\nA publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nstruct Concatenate\nA publisher that emits all of one publisher\u2019s elements before those from another publisher.\nstruct PrefixWhile\nA publisher that republishes elements while a predicate closure indicates publishing should continue.\nstruct TryPrefixWhile\nA publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue.\nstruct PrefixUntilOutput\nA publisher that republishes elements until another publisher emits an element."
    },
    {
        "title": "Publishers.PrefixWhile",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixwhile",
        "html": "Topics\nCreating a Prefix While Publisher\ninit(upstream: Upstream, predicate: (Publishers.PrefixWhile<Upstream>.Output) -> Bool)\nCreates a publisher that republishes elements while a predicate closure indicates publishing should continue.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.PrefixWhile<Upstream>.Output) -> Bool\nThe closure that determines whether publishing should continue.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Sequence Operations to Elements\nstruct DropUntilOutput\nA publisher that ignores elements from the upstream publisher until it receives an element from second publisher.\nstruct Drop\nA publisher that omits a specified number of elements before republishing later elements.\nstruct DropWhile\nA publisher that omits elements from an upstream publisher until a given closure returns false.\nstruct TryDropWhile\nA publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nstruct Concatenate\nA publisher that emits all of one publisher\u2019s elements before those from another publisher.\nstruct TryPrefixWhile\nA publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue.\nstruct PrefixUntilOutput\nA publisher that republishes elements until another publisher emits an element."
    },
    {
        "title": "Publishers.PrefixUntilOutput",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefixuntiloutput",
        "html": "Topics\nCreating a Prefix Until Output Publisher\ninit(upstream: Upstream, other: Other)\nCreates a publisher that republishes elements until another publisher emits an element.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet other: Other\nAnother publisher, whose first output causes this publisher to finish.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Sequence Operations to Elements\nstruct DropUntilOutput\nA publisher that ignores elements from the upstream publisher until it receives an element from second publisher.\nstruct Drop\nA publisher that omits a specified number of elements before republishing later elements.\nstruct DropWhile\nA publisher that omits elements from an upstream publisher until a given closure returns false.\nstruct TryDropWhile\nA publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nstruct Concatenate\nA publisher that emits all of one publisher\u2019s elements before those from another publisher.\nstruct PrefixWhile\nA publisher that republishes elements while a predicate closure indicates publishing should continue.\nstruct TryPrefixWhile\nA publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "Publishers.Print",
        "url": "https://developer.apple.com/documentation/combine/publishers/print",
        "html": "Overview\n\nThis publisher prints log messages when receiving the following events:\n\nsubscription\n\nvalue\n\nnormal completion\n\nfailure\n\ncancellation\n\nTopics\nCreating a Print Publisher\ninit(upstream: Upstream, prefix: String, to: (TextOutputStream)?)\nCreates a publisher that prints log messages for all publishing events.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet prefix: String\nA string with which to prefix all log messages.\nlet stream: (TextOutputStream)?\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nDebugging\nstruct Breakpoint\nA publisher that raises a debugger signal when a provided closure needs to stop the process in the debugger.\nstruct HandleEvents\nA publisher that performs the specified closures when publisher events occur."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/publisher/switchtolatest()-1c51y",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Self.Output.Failure.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Publishers.SetFailureType<Self.Output, Self.Failure>, Publishers.Map<Self, Publishers.SetFailureType<Self.Output, Self.Failure>>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Output.Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never and Output.Failure is Never."
    },
    {
        "title": "Publishers.ReceiveOn",
        "url": "https://developer.apple.com/documentation/combine/publishers/receiveon",
        "html": "Topics\nCreating a Receive-On Publisher\ninit(upstream: Upstream, scheduler: Context, options: Context.SchedulerOptions?)\nCreates a publisher that delivers elements to its downstream subscriber on a specific scheduler.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet scheduler: Context\nThe scheduler the publisher uses to deliver elements.\nlet options: Context.SchedulerOptions?\nScheduler options used to customize element delivery.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nWorking with Subscribers\nstruct SubscribeOn\nA publisher that receives elements from an upstream publisher on a specific scheduler."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/publisher/switchtolatest()-453ht",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nFor example, given the type AnyPublisher<URLSession.DataTaskPublisher, NSError>, calling switchToLatest() results in the type SwitchToLatest<(Data, URLResponse), URLError>. The downstream subscriber sees a continuous stream of (Data, URLResponse) elements from what looks like a single URLSession.DataTaskPublisher even though the elements are coming from different upstream publishers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nThe following example updates a PassthroughSubject with a new value every 0.1 seconds. A map(_:) operator receives the new value and uses it to create a new URLSession.DataTaskPublisher. By using the switchToLatest() operator, the downstream sink subscriber receives the (Data, URLResponse) output type from the data task publishers, rather than the URLSession.DataTaskPublisher type produced by the map(_:) operator. Furthermore, creating each new data task publisher cancels the previous data task publisher.\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .setFailureType(to: URLError.self)\n    .map() { index -> URLSession.DataTaskPublisher in\n        let url = URL(string: \"https://example.org/get?index=\\(index)\")!\n        return URLSession.shared.dataTaskPublisher(for: url)\n    }\n    .switchToLatest()\n    .sink(receiveCompletion: { print(\"Complete: \\($0)\") },\n          receiveValue: { (data, response) in\n            guard let url = response.url else { print(\"Bad response.\"); return }\n            print(\"URL: \\(url)\")\n    })\n\n\nfor index in 1...5 {\n    DispatchQueue.main.asyncAfter(deadline: .now() + TimeInterval(index/10)) {\n        subject.send(index)\n    }\n}\n\n\n// Prints \"URL: https://example.org/get?index=5\"\n\n\nThe exact behavior of this example depends on the value of asyncAfter and the speed of the network connection. If the delay value is longer, or the network connection is fast, the earlier data tasks may complete before switchToLatest() can cancel them. If this happens, the output includes multiple URLs whose tasks complete before cancellation.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Publishers.SetFailureType<Self.Output, Self.Failure>, Publishers.Map<Self, Publishers.SetFailureType<Self.Output, Self.Failure>>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Output.Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never and Output.Failure is Never."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/zip(_:_:_:)-9yqi1",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/publisher/switchtolatest()-9eb3r",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Self.Output.Failure.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Publishers.SetFailureType<Self.Output, Self.Failure>, Publishers.Map<Self, Publishers.SetFailureType<Self.Output, Self.Failure>>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Output.Failure is Never."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/flatmap(maxpublishers:_:)-4of8w",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Self.Output.Failure.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Publishers.SetFailureType<Self.Output, Self.Failure>, Publishers.Map<Self, Publishers.SetFailureType<Self.Output, Self.Failure>>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Output.Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never and Output.Failure is Never."
    },
    {
        "title": "Publishers.Concatenate",
        "url": "https://developer.apple.com/documentation/combine/publishers/concatenate",
        "html": "Topics\nCreating a Concatenate Publisher\ninit(prefix: Prefix, suffix: Suffix)\nCreates a publisher that emits all of one publisher\u2019s elements before those from another publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet prefix: Prefix\nThe publisher to republish, in its entirety, before republishing elements from suffix.\nlet suffix: Suffix\nThe publisher to republish only after prefix finishes.\nComparing Publishers\nstatic func == (Publishers.Concatenate<Prefix, Suffix>, Publishers.Concatenate<Prefix, Suffix>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Prefix conforms to Publisher, Prefix conforms to Equatable, Suffix conforms to Publisher, Suffix conforms to Equatable, Prefix.Failure is Suffix.Failure, and Prefix.Output is Suffix.Output.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nApplying Sequence Operations to Elements\nstruct DropUntilOutput\nA publisher that ignores elements from the upstream publisher until it receives an element from second publisher.\nstruct Drop\nA publisher that omits a specified number of elements before republishing later elements.\nstruct DropWhile\nA publisher that omits elements from an upstream publisher until a given closure returns false.\nstruct TryDropWhile\nA publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nstruct PrefixWhile\nA publisher that republishes elements while a predicate closure indicates publishing should continue.\nstruct TryPrefixWhile\nA publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue.\nstruct PrefixUntilOutput\nA publisher that republishes elements until another publisher emits an element."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/combinelatest(_:_:_:)-6ekpz",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "Publishers.DropWhile",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropwhile",
        "html": "Topics\nCreating a Drop While Publisher\ninit(upstream: Upstream, predicate: (Publishers.DropWhile<Upstream>.Output) -> Bool)\nCreates a publisher that omits elements from an upstream publisher until a given closure returns false.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Publishers.DropWhile<Upstream>.Output) -> Bool\nThe closure that indicates whether to drop the element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Sequence Operations to Elements\nstruct DropUntilOutput\nA publisher that ignores elements from the upstream publisher until it receives an element from second publisher.\nstruct Drop\nA publisher that omits a specified number of elements before republishing later elements.\nstruct TryDropWhile\nA publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nstruct Concatenate\nA publisher that emits all of one publisher\u2019s elements before those from another publisher.\nstruct PrefixWhile\nA publisher that republishes elements while a predicate closure indicates publishing should continue.\nstruct TryPrefixWhile\nA publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue.\nstruct PrefixUntilOutput\nA publisher that republishes elements until another publisher emits an element."
    },
    {
        "title": "Publishers.CompactMap",
        "url": "https://developer.apple.com/documentation/combine/publishers/compactmap",
        "html": "Topics\nCreating a Compact Map Publisher\ninit(upstream: Upstream, transform: (Upstream.Output) -> Output?)\nCreates a publisher that republishes all non-nil results of calling a closure with each received element.\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet transform: (Upstream.Output) -> Output?\nA closure that receives values from the upstream publisher and returns optional values.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nFiltering Elements\nstruct Filter\nA publisher that republishes all elements that match a provided closure.\nstruct TryFilter\nA publisher that republishes all elements that match a provided error-throwing closure.\nstruct TryCompactMap\nA publisher that republishes all non-nil results of calling an error-throwing closure with each received element.\nstruct RemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element.\nstruct TryRemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nstruct ReplaceEmpty\nA publisher that replaces an empty stream with a provided element.\nstruct ReplaceError\nA publisher that replaces any errors in the stream with a provided element."
    },
    {
        "title": "Failure",
        "url": "https://developer.apple.com/documentation/combine/subscriber/failure",
        "html": "Required\n\nDiscussion\n\nUse Never if this Subscriber cannot receive errors.\n\nSee Also\nDeclaring Subscriber Topography\nassociatedtype Input\nThe kind of values this subscriber receives.\n\nRequired"
    },
    {
        "title": "Publishers.Autoconnect",
        "url": "https://developer.apple.com/documentation/combine/publishers/autoconnect",
        "html": "Overview\n\nThis publisher calls connect() on the upstream ConnectablePublisher when first attached to by a subscriber.\n\nTopics\nCreating an Autoconnect Publisher\ninit(upstream: Upstream)\nCreates a publisher that automatically connects to an upstream connectable publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nUsing Explicit Publisher Connections\nstruct MakeConnectable\nA publisher that provides explicit connectability to another publisher."
    },
    {
        "title": "Publishers.AllSatisfy",
        "url": "https://developer.apple.com/documentation/combine/publishers/allsatisfy",
        "html": "Topics\nCreating an All Satisfy Publisher\ninit(upstream: Upstream, predicate: (Upstream.Output) -> Bool)\nCreates a publisher that publishes a single Boolean value that indicates whether all received elements pass a given predicate.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Upstream.Output) -> Bool\nA closure that evaluates each received element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Matching Criteria to Elements\nstruct Contains\nA publisher that emits a Boolean value when it receives a specific element from its upstream publisher.\nstruct ContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the predicate closure.\nstruct TryContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nstruct TryAllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/publisher/values-v7nz",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n\nSee Also\nAccessing Elements Asynchronously\nvar values: AsyncPublisher<Self>\nThe elements produced by the publisher, as an asynchronous sequence.\nAvailable when Failure is Never."
    },
    {
        "title": "Subscriber",
        "url": "https://developer.apple.com/documentation/combine/subscriber",
        "html": "Overview\n\nA Subscriber instance receives a stream of elements from a Publisher, along with life cycle events describing changes to their relationship. A given subscriber\u2019s Input and Failure associated types must match the Output and Failure of its corresponding publisher.\n\nYou connect a subscriber to a publisher by calling the publisher\u2019s subscribe(_:) method. After making this call, the publisher invokes the subscriber\u2019s receive(subscription:) method. This gives the subscriber a Subscription instance, which it uses to demand elements from the publisher, and to optionally cancel the subscription. After the subscriber makes an initial demand, the publisher calls receive(_:), possibly asynchronously, to deliver newly-published elements. If the publisher stops publishing, it calls receive(completion:), using a parameter of type Subscribers.Completion to indicate whether publishing completes normally or with an error.\n\nCombine provides the following subscribers as operators on the Publisher type:\n\nsink(receiveCompletion:receiveValue:) executes arbitrary closures when it receives a completion signal and each time it receives a new element.\n\nassign(to:on:) writes each newly-received value to a property identified by a key path on a given instance.\n\nTopics\nDeclaring Subscriber Topography\nassociatedtype Input\nThe kind of values this subscriber receives.\n\nRequired\n\nassociatedtype Failure : Error\nThe kind of errors this subscriber might receive.\n\nRequired\n\nReceiving Elements\nfunc receive(Self.Input) -> Subscribers.Demand\nTells the subscriber that the publisher has produced an element.\n\nRequired\n\nfunc receive() -> Subscribers.Demand\nTells the subscriber that a publisher of void elements is ready to receive further requests.\nAvailable when Input is ().\nReceiving Life Cycle Events\nfunc receive(subscription: Subscription)\nTells the subscriber that it has successfully subscribed to the publisher and may request items.\n\nRequired\n\nfunc receive(completion: Subscribers.Completion<Self.Failure>)\nTells the subscriber that the publisher has completed publishing, either normally or with an error.\n\nRequired\n\nenum Completion\nA signal that a publisher doesn\u2019t produce additional elements, either due to normal completion or an error.\nRelationships\nInherits From\nCustomCombineIdentifierConvertible\nConforming Types\nAnySubscriber\nSubscribers.Assign\nSubscribers.Sink\nSee Also\nSubscribers\nProcessing Published Elements with Subscribers\nApply back pressure\u00a0to precisely control when publishers produce elements.\nenum Subscribers\nA namespace for types that serve as subscribers.\nstruct AnySubscriber\nA type-erasing subscriber.\nprotocol Subscription\nA protocol representing the connection of a subscriber to a publisher.\nenum Subscriptions\nA namespace for symbols related to subscriptions."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/append(_:)-69sdn",
        "html": "Parameters\nelements\n\nA sequence of elements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the sequence of elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) to append a sequence to the end of a publisher\u2019s output.\n\nIn the example below, the append(_:) publisher republishes all elements from groundTransport until it finishes, then publishes the members of airTransport:\n\nlet groundTransport = [\"car\", \"bus\", \"truck\", \"subway\", \"bicycle\"]\nlet airTransport = [\"parasail\", \"jet\", \"helicopter\", \"rocket\"]\ncancellable = groundTransport.publisher\n    .append(airTransport)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"car bus truck subway bicycle parasail jet helicopter rocket\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "Routing Notifications to Combine Subscribers",
        "url": "https://developer.apple.com/documentation/combine/routing-notifications-to-combine-subscribers",
        "html": "Overview\n\nMany frameworks deliver asynchronous events to your app with the NotificationCenter API. Your app may already have places where it receives and processes these notifications in callback methods or closures. For example, the following code uses addObserver(forName:object:queue:using:) to print a message every time an iOS device rotates to portrait orientation.\n\nvar notificationToken: NSObjectProtocol?\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    notificationToken = NotificationCenter.default\n        .addObserver(forName: UIDevice.orientationDidChangeNotification,\n                     object: nil,\n                     queue: nil) { _ in\n                        if UIDevice.current.orientation == .portrait {\n                            print (\"Orientation changed to portrait.\")\n                        }\n    }\n}\n\nMigrate Notification-Handling Code to Use Combine\n\nUsing notification center callbacks and closures requires you to do all your work inside the callback method or closure. By migrating to Combine, you can use operators to perform common tasks like filtering.\n\nTo take advantage of Combine, use the NotificationCenter.Publisher to migrate your NSNotification handling code to the Combine idiom. You create this publisher with the NotificationCenter method publisher(for:object:), passing in the notification name in which you\u2019re interested and a source object, if any.\n\nRewrite the above code in Combine as shown in the following listing. This code uses the default notification center to create a publisher for the orientationDidChangeNotification notification. When the code receives notifications from this publisher, it applies a filter operator to only act on portrait orientation notifications, and prints a message.\n\nvar cancellable: Cancellable?\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    cancellable = NotificationCenter.default\n        .publisher(for: UIDevice.orientationDidChangeNotification)\n        .filter() { _ in UIDevice.current.orientation == .portrait }\n        .sink() { _ in print (\"Orientation changed to portrait.\") }\n}\n\n\nNote that in this case, the orientationDidChangeNotification doesn\u2019t contain the new orientation in its userInfo dictionary, so the filter(_:) operator queries the UIDevice directly.\n\nSee Also\nCombine Migration\nReplacing Foundation Timers with Timer Publishers\nPublish elements periodically by using a timer.\nPerforming Key-Value Observing with Combine\nExpose KVO changes with a Combine publisher.\nUsing Combine for Your App\u2019s Asynchronous Code\nApply common patterns to migrate your closure-based, event-handling code."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/prepend(_:)-v9sb",
        "html": "Parameters\nelements\n\nA sequence of elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the sequence of elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) to publish values from two publishers when you need to prepend one publisher\u2019s elements to another.\n\nIn this example the prepend(_:) operator publishes the provided sequence before republishing all elements from dataElements:\n\nlet prefixValues = [0, 1, 255]\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(prefixValues)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "Performing Key-Value Observing with Combine",
        "url": "https://developer.apple.com/documentation/combine/performing-key-value-observing-with-combine",
        "html": "Overview\n\nSeveral frameworks use key-value observing to notify your app of asynchronous changes. By converting your use of KVO from callbacks and closures to Combine, you can make your code more elegant and maintainable.\n\nMonitoring Changes with KVO\n\nIn the following example, the type UserInfo supports KVO for its lastLogin property, as described in Using Key-Value Observing in Swift. The viewDidLoad() method uses the observe(_:options:changeHandler:) method to set up a closure that handles any change to the property. The closure receives an NSKeyValueObservedChange object that describes the change event, retrieves the newValue property, and prints it. The viewDidAppear(_:) method changes the value, which calls the closure and prints the message.\n\nclass UserInfo: NSObject {\n    @objc dynamic var lastLogin: Date = Date(timeIntervalSince1970: 0)\n}\n@objc var userInfo = UserInfo()\nvar observation: NSKeyValueObservation?\n\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    observation = observe(\\.userInfo.lastLogin, options: [.new]) { object, change in\n        print (\"lastLogin now \\(change.newValue!).\")\n    }\n}\n\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    userInfo.lastLogin = Date()\n}\n\nConverting KVO Code to Use Combine\n\nTo convert KVO code to Combine, replace the observe(_:options:changeHandler:) method with an NSObject.KeyValueObservingPublisher. You get an instance of this publisher by calling publisher(for:) on the parent object, as shown in the following example\u2019s viewDidLoad() method:\n\nclass UserInfo: NSObject {\n    @objc dynamic var lastLogin: Date = Date(timeIntervalSince1970: 0)\n}\n@objc var userInfo = UserInfo()\nvar cancellable: Cancellable?\n\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    cancellable = userInfo.publisher(for: \\.lastLogin)\n        .sink() { date in print (\"lastLogin now \\(date).\") }\n}\n\n\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    userInfo.lastLogin = Date()\n}\n\n\nThe KVO publisher produces elements of the observed type \u2014 in this case, Date \u2014 rather than NSKeyValueObservedChange. This saves you a step, because you don\u2019t have to unpack the newValue from the change object, as in the first example.\n\nSee Also\nCombine Migration\nRouting Notifications to Combine Subscribers\nDeliver notifications to subscribers by using notification centers\u2019 publishers.\nReplacing Foundation Timers with Timer Publishers\nPublish elements periodically by using a timer.\nUsing Combine for Your App\u2019s Asynchronous Code\nApply common patterns to migrate your closure-based, event-handling code."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/receive(subscriber:)",
        "html": "Required\n\nParameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "Publishers.MapKeyPath2",
        "url": "https://developer.apple.com/documentation/combine/publishers/mapkeypath2",
        "html": "Topics\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet keyPath0: KeyPath<Upstream.Output, Output0>\nThe key path of a property to publish.\nlet keyPath1: KeyPath<Upstream.Output, Output1>\nThe key path of a second property to publish.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nIdentifying Properties with Key Paths\nstruct MapKeyPath\nA publisher that publishes the value of a key path.\nstruct MapKeyPath3\nA publisher that publishes the values of three key paths as a tuple."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/append(_:)-1qb8d",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "Publishers.Decode",
        "url": "https://developer.apple.com/documentation/combine/publishers/decode",
        "html": "Topics\nCreating a Decode Publisher\ninit(upstream: Upstream, decoder: Coder)\nCreates a publisher that decodes elements received from an upstream publisher, using a given decoder.\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nEncoding and Decoding\nstruct Encode\nA publisher that encodes elements received from an upstream publisher, using a given encoder."
    },
    {
        "title": "Publishers.Encode",
        "url": "https://developer.apple.com/documentation/combine/publishers/encode",
        "html": "Topics\nCreating a Encode Publisher\ninit(upstream: Upstream, encoder: Coder)\nCreates a publisher that decodes elements received from an upstream publisher, using a given decoder.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nEncoding and Decoding\nstruct Decode\nA publisher that decodes elements received from an upstream publisher, using a given decoder."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/flatmap(maxpublishers:_:)-hyb0",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Self.Output.Failure.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Publishers.SetFailureType<Self.Output, Self.Failure>, Publishers.Map<Self, Publishers.SetFailureType<Self.Output, Self.Failure>>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Output.Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never and Output.Failure is Never."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/combinelatest(_:_:_:)-48buc",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "Publishers.DropUntilOutput",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput",
        "html": "Topics\nCreating a Drop Until Output Publisher\ninit(upstream: Upstream, other: Other)\nCreates a publisher that ignores elements from the upstream publisher until it receives an element from another publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet other: Other\nA publisher to monitor for its first emitted element.\nComparing Publishers\nstatic func == (Publishers.DropUntilOutput<Upstream, Other>, Publishers.DropUntilOutput<Upstream, Other>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, Other conforms to Publisher, Other conforms to Equatable, and Upstream.Failure is Other.Failure.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nApplying Sequence Operations to Elements\nstruct Drop\nA publisher that omits a specified number of elements before republishing later elements.\nstruct DropWhile\nA publisher that omits elements from an upstream publisher until a given closure returns false.\nstruct TryDropWhile\nA publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nstruct Concatenate\nA publisher that emits all of one publisher\u2019s elements before those from another publisher.\nstruct PrefixWhile\nA publisher that republishes elements while a predicate closure indicates publishing should continue.\nstruct TryPrefixWhile\nA publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue.\nstruct PrefixUntilOutput\nA publisher that republishes elements until another publisher emits an element."
    },
    {
        "title": "Publishers.Filter",
        "url": "https://developer.apple.com/documentation/combine/publishers/filter",
        "html": "Topics\nCreating a Filter Publisher\ninit(upstream: Upstream, isIncluded: (Upstream.Output) -> Bool)\nCreates a publisher that republishes all elements that match a provided closure.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet isIncluded: (Upstream.Output) -> Bool\nA closure that indicates whether to republish an element.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nFiltering Elements\nstruct TryFilter\nA publisher that republishes all elements that match a provided error-throwing closure.\nstruct CompactMap\nA publisher that republishes all non-nil results of calling a closure with each received element.\nstruct TryCompactMap\nA publisher that republishes all non-nil results of calling an error-throwing closure with each received element.\nstruct RemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element.\nstruct TryRemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nstruct ReplaceEmpty\nA publisher that replaces an empty stream with a provided element.\nstruct ReplaceError\nA publisher that replaces any errors in the stream with a provided element."
    },
    {
        "title": "Publishers.Count",
        "url": "https://developer.apple.com/documentation/combine/publishers/count",
        "html": "Topics\nCreating a Count Publisher\ninit(upstream: Upstream)\nCreates a publisher that publishes the number of elements received from the upstream publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nComparing Publishers\nstatic func == (Publishers.Count<Upstream>, Publishers.Count<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent. /// - Parameters:\nAvailable when Upstream conforms to Publisher and Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nApplying Mathematical Operations on Elements\nstruct Comparison\nA publisher that republishes items from another publisher only if each new item is in increasing order from the previously-published item.\nstruct TryComparison\nA publisher that republishes items from another publisher only if each new item is in increasing order from the previously-published item, and fails if the ordering logic throws an error."
    },
    {
        "title": "Publishers.ContainsWhere",
        "url": "https://developer.apple.com/documentation/combine/publishers/containswhere",
        "html": "Topics\nCreating a Contains Where Publisher\ninit(upstream: Upstream, predicate: (Upstream.Output) -> Bool)\nCreates a publisher that emits a Boolean value upon receiving an element that satisfies the predicate closure.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet predicate: (Upstream.Output) -> Bool\nThe closure that determines whether the publisher should consider an element as a match.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Matching Criteria to Elements\nstruct Contains\nA publisher that emits a Boolean value when it receives a specific element from its upstream publisher.\nstruct TryContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nstruct AllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given predicate.\nstruct TryAllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "Publishers.Contains",
        "url": "https://developer.apple.com/documentation/combine/publishers/contains",
        "html": "Topics\nCreating a Contains Publisher\ninit(upstream: Upstream, output: Upstream.Output)\nCreates a publisher that emits a Boolean value when it receives a specific element from its upstream publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet output: Upstream.Output\nThe element to match in the upstream publisher.\nComparing Publishers\nstatic func == (Publishers.Contains<Upstream>, Publishers.Contains<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher, Upstream conforms to Equatable, and Upstream.Output conforms to Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nApplying Matching Criteria to Elements\nstruct ContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the predicate closure.\nstruct TryContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nstruct AllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given predicate.\nstruct TryAllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "Publishers.Comparison",
        "url": "https://developer.apple.com/documentation/combine/publishers/comparison",
        "html": "Topics\nCreating a Comparison Publisher\ninit(upstream: Upstream, areInIncreasingOrder: (Upstream.Output, Upstream.Output) -> Bool)\nCreates a publisher that republishes items from another publisher only if each new item is in increasing order from the previously-published item.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements.\nlet areInIncreasingOrder: (Upstream.Output, Upstream.Output) -> Bool\nA closure that receives two elements and returns true if they are in increasing order.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nApplying Mathematical Operations on Elements\nstruct Count\nA publisher that publishes the number of elements received from the upstream publisher.\nstruct TryComparison\nA publisher that republishes items from another publisher only if each new item is in increasing order from the previously-published item, and fails if the ordering logic throws an error."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "Using Combine for Your App\u2019s Asynchronous Code",
        "url": "https://developer.apple.com/documentation/combine/using-combine-for-your-app-s-asynchronous-code",
        "html": "Overview\n\nYour app may use common patterns to handle asynchronous events, such as:\n\nCompletion handlers, in which a caller provides a closure to execute once, after a potentially long-running task completes.\n\nClosure properties, in which a caller provides a closure to invoke every time a given asynchronous event occurs.\n\nCombine provides compelling equivalents to these patterns, which allow you to eliminate boilerplate implementations, and leverage its many operators. As you adopt Combine elsewhere in your app, converting your asynchronous call points to Combine improves your code\u2019s consistency and readability.\n\nTip\n\nYou don\u2019t need closure-based asychronicity patterns if you\u2019re using the async-await features in Swift 5.5 and later. Instead, your code can await an asynchronous call, and then execute the code that would have been in the closure. This eliminates the need for both conventional completion handlers and Combine futures. For more information, see Concurrency in The Swift Programming Language.\n\nReplace Completion-Handler Closures with Futures\n\nA completion handler is a closure accepted by a function that executes after the function completes its work. You typically implement this by invoking the completion handler directly when the function finishes its work, storing the closure outside the function if necessary. For example, the following function accepts a closure and then executes it after a two-second delay:\n\nfunc performAsyncAction(completionHandler: @escaping () -> Void) {\n    DispatchQueue.main.asyncAfter(deadline:.now() + 2) {\n        completionHandler()\n    }\n}\n\n\nYou can replace this pattern with a Combine Future, a publisher that performs some work and then asynchronously signals success or failure. If it succeeds, the future executes a Future.Promise, a closure that receives the element produced by the future. You can replace the previous function as follows:\n\nfunc performAsyncActionAsFuture() -> Future <Void, Never> {\n    return Future() { promise in\n        DispatchQueue.main.asyncAfter(deadline:.now() + 2) {\n            promise(Result.success(()))\n        }\n    }\n}\n\n\nRather than explicitly invoking a closure when the work completes, the future invokes the promise passed to it, passing in a Result that indicates success or failure. The caller receives this result asynchronously from the future. Because Future is a Combine Publisher, the caller attaches it to an optional chain of operators, ending with a Subscriber, like sink(receiveValue:):\n\ncancellable = performAsyncActionAsFuture()\n    .sink() { _ in print(\"Future succeeded.\") }\n\nUse Output Types to Represent a Future\u2019s Parameters\n\nSometimes, a long-running task generates a value that it passes to a completion handler as a parameter. To replicate this functionality in Combine, declare the parameter as the output type published by the future. The following example produces a randomly-generated integer, and passes it to the promise by declaring Int as the future\u2019s output type:\n\nfunc performAsyncActionAsFutureWithParameter() -> Future <Int, Never> {\n    return Future() { promise in\n        DispatchQueue.main.asyncAfter(deadline:.now() + 2) {\n            let rn = Int.random(in: 1...10)\n            promise(Result.success(rn))\n        }\n    }\n}\n\n\nBy declaring that the future produces Int elements, the future can use the Result type to pass an Int value to the promise. When the promise executes, the future publishes the value, which a caller can receive with a subscriber like sink(receiveValue:):\n\ncancellable = performAsyncActionAsFutureWithParameter()\n    .sink() { rn in print(\"Got random number \\(rn).\") }\n\nReplace Repeatedly Invoked Closures with Subjects\n\nYour app may also have the common pattern of using a closure as a property to invoke when certain events happen. These properties often have names starting with on, and their call points look like the following:\n\nvc.onDoSomething = { print(\"Did something.\") }\n\n\nWith Combine, you can replace this pattern by using a Subject. A subject allows you to imperatively publish a new element at any time by calling the send() method. Adopt this pattern by using a private PassthroughSubject or CurrentValueSubject, then expose this publicly as an AnyPublisher:\n\nprivate lazy var myDoSomethingSubject = PassthroughSubject<Void, Never>()\nlazy var doSomethingSubject = myDoSomethingSubject.eraseToAnyPublisher()\n\n\nWith this arrangement, instead of setting a closure property, callers perform their work in a subscriber, such as sink(receiveValue:):\n\ncancellable = vc.doSomethingSubject\n    .sink() { print(\"Did something with Combine.\") }\n\n\nOne advantage to using Combine is that the subject can call send(completion:) to tell the subscriber that no further events are forthcoming, or that an error occurred.\n\nTip\n\nIf you are using async-await concurrency in Swift 5.5 or later, you can use a AsyncStream, instead of a Combine Subject, to asynchronously produce new elements. With this arrangement, the call point performs a for-await-in loop to iterate over the stream rather than subscribing to the subject. The code that would go in the subscriber\u2019s receiveValue closure instead becomes the contents of the for-await-in loop.\n\nSee Also\nCombine Migration\nRouting Notifications to Combine Subscribers\nDeliver notifications to subscribers by using notification centers\u2019 publishers.\nReplacing Foundation Timers with Timer Publishers\nPublish elements periodically by using a timer.\nPerforming Key-Value Observing with Combine\nExpose KVO changes with a Combine publisher."
    },
    {
        "title": "Replacing Foundation Timers with Timer Publishers",
        "url": "https://developer.apple.com/documentation/combine/replacing-foundation-timers-with-timer-publishers",
        "html": "Overview\n\nIf your app uses Foundation\u2019s Timer class to repeatedly receive a callback or invoke a closure on a specified interval, you can convert these instances to Combine to simplify your code.\n\nPerforming Periodic Work with a Timer\n\nConsider the following snippet, which uses scheduledTimer(withTimeInterval:repeats:block:) to update the lastUpdated property of a data model once a second, on a specific dispatch queue:\n\nvar timer: Timer?\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in\n        self.myDispatchQueue.async() {\n            self.myDataModel.lastUpdated = Date()\n        }\n    }\n}\n\nConverting to a Timer Publisher\n\nTo migrate this code to Combine, replace the Timer that is returned by scheduledTimer(withTimeInterval:repeats:block:) with a Timer.TimerPublisher. You create this publisher with the Timer method publish(every:tolerance:on:in:options:). Every time the underyling Timer fires, the publisher emits a new Date that represents the instant the timer fired. You then apply Combine operators to the Date, eventually connecting the publisher to a subscriber like sink(receiveValue:) or assign(to:on:).\n\nTip\n\nBecause Timer.TimerPublisher conforms to the ConnectablePublisher protocol, it won\u2019t produce elements until you explicitly connect to it. Do this by either calling connect(), or using an autoconnect() operator to connect automatically when a subscriber attaches.\n\nThe next example shows how to use a Timer.TimerPublisher to replace the previous example. It uses Combine\u2019s operators to perform the tasks that were in the previous example\u2019s closure:\n\nvar cancellable: Cancellable?\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    cancellable = Timer.publish(every: 1, on: .main, in: .default)\n        .autoconnect()\n        .receive(on: myDispatchQueue)\n        .assign(to: \\.lastUpdated, on: myDataModel)\n}\n\n\nIn this example, Combine operators replace all the behavior inside the closure of the earlier example:\n\nThe receive(on:options:) operator ensures that its subsequent operators run on the specified dispatch queue. This replaces the async() call from before.\n\nThe assign(to:on:) operator updates the data model, by using a key path to set the lastUpdate property.\n\nAnother advantage you\u2019ll find when using Combine to simplify your code is that the Timer.TimerPublisher produces new Date instances as its output type. The first example\u2019s closure receives the Timer itself as its parameter, so it has to create new Date instances manually.\n\nSee Also\nCombine Migration\nRouting Notifications to Combine Subscribers\nDeliver notifications to subscribers by using notification centers\u2019 publishers.\nPerforming Key-Value Observing with Combine\nExpose KVO changes with a Combine publisher.\nUsing Combine for Your App\u2019s Asynchronous Code\nApply common patterns to migrate your closure-based, event-handling code."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/publisher/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/publisher/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "Publishers.TimeGroupingStrategy",
        "url": "https://developer.apple.com/documentation/combine/publishers/timegroupingstrategy",
        "html": "Topics\nTime Groupings\ncase byTime(Context, Context.SchedulerTimeType.Stride)\nA grouping that collects and periodically publishes items.\ncase byTimeOrCount(Context, Context.SchedulerTimeType.Stride, Int)\nA grouping that collects and publishes items periodically or when a buffer reaches a maximum size.\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/publisher/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/publisher/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "Publishers.BufferingStrategy",
        "url": "https://developer.apple.com/documentation/combine/publishers/bufferingstrategy",
        "html": "Topics\nBuffering Strategies\ncase dropNewest\nWhen the buffer is full, discard the newly received element.\ncase dropOldest\nWhen the buffer is full, discard the oldest element in the buffer.\ncase customError(() -> Failure)\nWhen the buffer is full, execute the closure to provide a custom error.\nSee Also\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nenum PrefetchStrategy\nA strategy for filling a buffer."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/publisher/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "Publishers.PrefetchStrategy",
        "url": "https://developer.apple.com/documentation/combine/publishers/prefetchstrategy",
        "html": "Topics\nPrefetching Strategies\ncase byRequest\nA strategy that avoids prefetching and instead performs requests on demand.\ncase keepFull\nA strategy to fill the buffer at subscription time, and keep it full thereafter.\nSupporting Hashing\nvar hashValue: Int\nThe hash value.\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDetermining Equality and Inequality\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.PrefetchStrategy, Publishers.PrefetchStrategy) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nEquatable\nHashable\nSee Also\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nenum BufferingStrategy\nA strategy that handles exhaustion of a buffer\u2019s capacity."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/publisher/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion.\n\nSee Also\nBuffering Elements\nenum PrefetchStrategy\nA strategy for filling a buffer.\nenum BufferingStrategy\nA strategy that handles exhaustion of a buffer\u2019s capacity."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge<Self, P>\nCombines elements from this publisher with those from another publisher, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/zip(_:_:)-4xn21",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge<Self, P>\nCombines elements from this publisher with those from another publisher, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/zip(_:_:_:)-16rcy",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge<Self, P>\nCombines elements from this publisher with those from another publisher, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/zip(_:_:)-8d7k7",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge<Self, P>\nCombines elements from this publisher with those from another publisher, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/flatmap(maxpublishers:_:)-qxf",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Self.Output.Failure.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Publishers.SetFailureType<Self.Output, Self.Failure>, Publishers.Map<Self, Publishers.SetFailureType<Self.Output, Self.Failure>>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Output.Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never and Output.Failure is Never."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/combinelatest(_:_:)-1n30g",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/merge(with:)-7fk3a",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<P>(with: P) -> Publishers.Merge<Self, P>\nCombines elements from this publisher with those from another publisher, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "send(_:)",
        "url": "https://developer.apple.com/documentation/combine/subject/send(_:)",
        "html": "Required\n\nParameters\nvalue\n\nThe value to send.\n\nSee Also\nDelivering Elements to Subscribers\nfunc send()\nSends a void value to the subscriber.\nAvailable when Output is ()."
    },
    {
        "title": "receive(completion:)",
        "url": "https://developer.apple.com/documentation/combine/subscriber/receive(completion:)",
        "html": "Required\n\nParameters\ncompletion\n\nA Subscribers.Completion case indicating whether publishing completed normally or with an error.\n\nSee Also\nReceiving Life Cycle Events\nfunc receive(subscription: Subscription)\nTells the subscriber that it has successfully subscribed to the publisher and may request items.\n\nRequired\n\nenum Completion\nA signal that a publisher doesn\u2019t produce additional elements, either due to normal completion or an error."
    },
    {
        "title": "receive(subscription:)",
        "url": "https://developer.apple.com/documentation/combine/subscriber/receive(subscription:)",
        "html": "Required\n\nParameters\nsubscription\n\nA subscription that represents the connection between publisher and subscriber.\n\nDiscussion\n\nUse the received Subscription to request items from the publisher.\n\nSee Also\nReceiving Life Cycle Events\nfunc receive(completion: Subscribers.Completion<Self.Failure>)\nTells the subscriber that the publisher has completed publishing, either normally or with an error.\n\nRequired\n\nenum Completion\nA signal that a publisher doesn\u2019t produce additional elements, either due to normal completion or an error."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/publisher/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/flatmap(maxpublishers:_:)-3k7z5",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Self.Output.Failure.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Publishers.SetFailureType<Self.Output, Self.Failure>, Publishers.Map<Self, Publishers.SetFailureType<Self.Output, Self.Failure>>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Output.Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never and Output.Failure is Never."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/map(_:)-99evh",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/subscribe(_:)-4u8kn",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\n\nRequired\n\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "cancel()",
        "url": "https://developer.apple.com/documentation/combine/cancellable/cancel()",
        "html": "Required\n\nDiscussion\n\nWhen implementing Cancellable in support of a custom publisher, implement cancel() to request that your publisher stop calling its downstream subscribers. Combine doesn\u2019t require that the publisher stop immediately, but the cancel() call should take effect quickly. Canceling should also eliminate any strong references it currently holds.\n\nAfter you receive one call to cancel(), subsequent calls shouldn\u2019t do anything. Additionally, your implementation must be thread-safe, and it shouldn\u2019t block the caller.\n\nTip\n\nKeep in mind that your cancel() may execute concurrently with another call to cancel() \u2014 including the scenario where an AnyCancellable is deallocating \u2014 or to request(_:)."
    },
    {
        "title": "Subscribers.Completion",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion",
        "html": "Topics\nCompletion States\ncase finished\nThe publisher finished normally.\ncase failure(Failure)\nThe publisher stopped publishing due to the indicated error.\nDefault Implementations\nDecodable Implementations\nEncodable Implementations\nEquatable Implementations\nHashable Implementations\nRelationships\nConforms To\nDecodable\nEncodable\nEquatable\nHashable\nSendable\nSee Also\nReceiving Life Cycle Events\nfunc receive(subscription: Subscription)\nTells the subscriber that it has successfully subscribed to the publisher and may request items.\n\nRequired\n\nfunc receive(completion: Subscribers.Completion<Self.Failure>)\nTells the subscriber that the publisher has completed publishing, either normally or with an error.\n\nRequired"
    },
    {
        "title": "TopLevelEncoder",
        "url": "https://developer.apple.com/documentation/combine/toplevelencoder",
        "html": "Topics\nDeclaring Encoder Topography\nassociatedtype Output\nThe type this encoder produces.\n\nRequired\n\nEncoding\nfunc encode<T>(T) throws -> Self.Output\nEncodes an instance of the indicated type.\n\nRequired\n\nSee Also\nEncoders and Decoders\nprotocol TopLevelDecoder\nA type that defines methods for decoding."
    },
    {
        "title": "CombineIdentifier",
        "url": "https://developer.apple.com/documentation/combine/combineidentifier",
        "html": "Overview\n\nTo conform to CustomCombineIdentifierConvertible in a Subscription or Subject that you implement as a structure, create an instance of CombineIdentifier as follows:\n\nlet combineIdentifier = CombineIdentifier()\n\nTopics\nCreating a Combine Identifier\ninit()\nCreates a unique Combine identifier.\ninit(AnyObject)\nCreates a Combine identifier, using the bit pattern of the provided object.\nHashing Identifiers\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nvar hashValue: Int\nThe hash value.\nProviding a Description\nvar description: String\nA textual representation of this instance.\nComparing Identifiers\nstatic func != (Self, Self) -> Bool\nstatic func == (CombineIdentifier, CombineIdentifier) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nCustomStringConvertible\nEquatable\nHashable\nSee Also\nDebugging Identifiers\nprotocol CustomCombineIdentifierConvertible\nA protocol for uniquely identifying publisher streams."
    },
    {
        "title": "Failure",
        "url": "https://developer.apple.com/documentation/combine/publisher/failure",
        "html": "Required\n\nDiscussion\n\nUse Never if this Publisher does not publish errors.\n\nSee Also\nDeclaring Publisher Topography\nassociatedtype Output\nThe kind of values published by this publisher.\n\nRequired"
    },
    {
        "title": "ImmediateScheduler",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler",
        "html": "Overview\n\nYou can only use this scheduler for immediate actions. If you attempt to schedule actions after a specific date, this scheduler ignores the date and performs them immediately.\n\nTopics\nDeclaring Scheduler Timekeeping and Options\nstruct SchedulerTimeType\nThe time type used by the immediate scheduler.\ntypealias SchedulerOptions\nA type that defines options accepted by the immediate scheduler.\nAccessing Scheduler Time Properties\nvar minimumTolerance: ImmediateScheduler.SchedulerTimeType.Stride\nThe minimum tolerance allowed by the immediate scheduler.\nvar now: ImmediateScheduler.SchedulerTimeType\nThe immediate scheduler\u2019s definition of the current moment in time.\nUsing the Shared Scheduler\nstatic let shared: ImmediateScheduler\nThe shared instance of the immediate scheduler.\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, interval: ImmediateScheduler.SchedulerTimeType.Stride, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: ImmediateScheduler.SchedulerTimeType, tolerance: ImmediateScheduler.SchedulerTimeType.Stride, options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(options: ImmediateScheduler.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\nDefault Implementations\nScheduler Implementations\nRelationships\nConforms To\nScheduler\nSee Also\nSchedulers\nprotocol Scheduler\nA protocol that defines when and how to execute a closure.\nprotocol SchedulerTimeIntervalConvertible\nA protocol that provides a scheduler with an expression for relative time."
    },
    {
        "title": "Input",
        "url": "https://developer.apple.com/documentation/combine/subscriber/input",
        "html": "Required\n\nSee Also\nDeclaring Subscriber Topography\nassociatedtype Failure : Error\nThe kind of errors this subscriber might receive.\n\nRequired"
    },
    {
        "title": "Scheduler",
        "url": "https://developer.apple.com/documentation/combine/scheduler",
        "html": "Overview\n\nYou can use a scheduler to execute code as soon as possible, or after a future date. Individual scheduler implementations use whatever time-keeping system makes sense for them. Schedulers express this as their SchedulerTimeType. Since this type conforms to SchedulerTimeIntervalConvertible, you can always express these times with the convenience functions like .milliseconds(500). Schedulers can accept options to control how they execute the actions passed to them. These options may control factors like which threads or dispatch queues execute the actions.\n\nTopics\nDeclaring Scheduler Timekeeping and Options\nassociatedtype SchedulerTimeType : Strideable\nDescribes an instant in time for this scheduler.\n\nRequired\n\nassociatedtype SchedulerOptions\nA type that defines options accepted by the scheduler.\n\nRequired\n\nAccessing Scheduler Time Properties\nvar minimumTolerance: Self.SchedulerTimeType.Stride\nThe minimum tolerance allowed by the scheduler.\n\nRequired\n\nvar now: Self.SchedulerTimeType\nThis scheduler\u2019s definition of the current moment in time.\n\nRequired\n\nScheduling Actions\nfunc schedule(() -> Void)\nPerforms the action at the next possible opportunity, without options.\nfunc schedule(after: Self.SchedulerTimeType, () -> Void)\nPerforms the action at some time after the specified date, using the scheduler\u2019s minimum tolerance.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, using minimum tolerance possible for this Scheduler.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, taking into account tolerance if possible.\nfunc schedule(after: Self.SchedulerTimeType, interval: Self.SchedulerTimeType.Stride, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void) -> Cancellable\nPerforms the action at some time after the specified date, at the specified frequency, optionally taking into account tolerance if possible.\n\nRequired\n\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, () -> Void)\nPerforms the action at some time after the specified date.\nfunc schedule(after: Self.SchedulerTimeType, tolerance: Self.SchedulerTimeType.Stride, options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at some time after the specified date.\n\nRequired\n\nfunc schedule(options: Self.SchedulerOptions?, () -> Void)\nPerforms the action at the next possible opportunity.\n\nRequired\n\nRelationships\nConforming Types\nImmediateScheduler\nSee Also\nSchedulers\nstruct ImmediateScheduler\nA scheduler for performing synchronous actions.\nprotocol SchedulerTimeIntervalConvertible\nA protocol that provides a scheduler with an expression for relative time."
    },
    {
        "title": "AsyncThrowingPublisher",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher",
        "html": "Overview\n\nAsyncThrowingPublisher conforms to AsyncSequence, which allows callers to receive values with the for-await-in syntax, rather than attaching a Subscriber. If the upstream publisher terminates with an error, AsyncThrowingPublisher throws the error to the awaiting caller.\n\nUse the values property of the Publisher protocol to wrap an existing publisher with an instance of this type.\n\nTopics\nCreating an Asynchronous Publisher\ninit(P)\nCreates a publisher that exposes elements received from an upstream publisher as a throwing asynchronous sequence.\nCreating an Iterator\nfunc makeAsyncIterator() -> AsyncThrowingPublisher<P>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nstruct Iterator\nThe iterator that produces elements of the asynchronous publisher sequence.\nSupporting Types\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nType Aliases\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nDefault Implementations\nAsyncSequence Implementations\nRelationships\nConforms To\nAsyncSequence\nSee Also\nAsynchronous Publishers\nstruct AsyncPublisher\nA publisher that exposes its elements as an asynchronous sequence."
    },
    {
        "title": "ObservableObject",
        "url": "https://developer.apple.com/documentation/combine/observableobject",
        "html": "Overview\n\nBy default an ObservableObject synthesizes an objectWillChange publisher that emits the changed value before any of its @Published properties changes.\n\nclass Contact: ObservableObject {\n    @Published var name: String\n    @Published var age: Int\n\n\n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n\n\n    func haveBirthday() -> Int {\n        age += 1\n        return age\n    }\n}\n\n\nlet john = Contact(name: \"John Appleseed\", age: 24)\ncancellable = john.objectWillChange\n    .sink { _ in\n        print(\"\\(john.age) will change\")\n}\nprint(john.haveBirthday())\n// Prints \"24 will change\"\n// Prints \"25\"\n\nTopics\nPublishing Changes\nvar objectWillChange: Self.ObjectWillChangePublisher\nA publisher that emits before the object has changed.\n\nRequired Default implementation provided.\n\nassociatedtype ObjectWillChangePublisher : Publisher = ObservableObjectPublisher\nThe type of publisher that emits before the object has changed.\n\nRequired\n\nSee Also\nObservable Objects\nclass ObservableObjectPublisher\nA publisher that publishes changes from observable objects."
    },
    {
        "title": "CustomCombineIdentifierConvertible",
        "url": "https://developer.apple.com/documentation/combine/customcombineidentifierconvertible",
        "html": "Overview\n\nIf you create a custom Subscription or Subscriber type, implement this protocol so that development tools can uniquely identify publisher chains in your app. If your type is a class, Combine provides an implementation of combineIdentifier for you. If your type is a structure, set up the identifier as follows:\n\nTopics\nIdentifying Publisher Streams\nvar combineIdentifier: CombineIdentifier\nA unique identifier for identifying publisher streams.\n\nRequired Default implementation provided.\n\nRelationships\nInherited By\nSubscriber\nSubscription\nConforming Types\nAnySubscriber\nSubscribers.Assign\nSubscribers.Sink\nSee Also\nDebugging Identifiers\nstruct CombineIdentifier\nA unique identifier for identifying publisher streams."
    },
    {
        "title": "AsyncPublisher",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher",
        "html": "Overview\n\nAsyncPublisher conforms to AsyncSequence, which allows callers to receive values with the for-await-in syntax, rather than attaching a Subscriber.\n\nUse the values property of the Publisher protocol to wrap an existing publisher with an instance of this type.\n\nTopics\nCreating an Asynchronous Publisher\ninit(P)\nCreates a publisher that exposes elements received from an upstream publisher as an asynchronous sequence.\nCreating an Iterator\nfunc makeAsyncIterator() -> AsyncPublisher<P>.Iterator\nCreates the asynchronous iterator that produces elements of this asynchronous sequence.\nstruct Iterator\nThe iterator that produces elements of the asynchronous publisher sequence.\nSupporting Types\ntypealias Element\nThe type of element produced by this asynchronous sequence.\nType Aliases\ntypealias AsyncIterator\nThe type of asynchronous iterator that produces elements of this asynchronous sequence.\nDefault Implementations\nAsyncSequence Implementations\nRelationships\nConforms To\nAsyncSequence\nSee Also\nAsynchronous Publishers\nstruct AsyncThrowingPublisher\nA publisher that exposes its elements as a throwing asynchronous sequence."
    },
    {
        "title": "TopLevelDecoder",
        "url": "https://developer.apple.com/documentation/combine/topleveldecoder",
        "html": "Topics\nDeclaring Encoder Topography\nassociatedtype Input\nThe type this decoder accepts.\n\nRequired\n\nDecoding\nfunc decode<T>(T.Type, from: Self.Input) throws -> T\nDecodes an instance of the indicated type.\n\nRequired\n\nSee Also\nEncoders and Decoders\nprotocol TopLevelEncoder\nA type that defines methods for encoding."
    },
    {
        "title": "SchedulerTimeIntervalConvertible",
        "url": "https://developer.apple.com/documentation/combine/schedulertimeintervalconvertible",
        "html": "Topics\nConverting Seconds to Scheduler Time Intervals\nstatic func microseconds(Int) -> Self\nConverts the specified number of microseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func milliseconds(Int) -> Self\nConverts the specified number of milliseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func nanoseconds(Int) -> Self\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Double) -> Self\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\n\nRequired\n\nstatic func seconds(Int) -> Self\nConverts the specified number of seconds into an instance of this scheduler time type.\n\nRequired\n\nRelationships\nConforming Types\nImmediateScheduler.SchedulerTimeType.Stride\nSee Also\nSchedulers\nprotocol Scheduler\nA protocol that defines when and how to execute a closure.\nstruct ImmediateScheduler\nA scheduler for performing synchronous actions."
    },
    {
        "title": "Subscription",
        "url": "https://developer.apple.com/documentation/combine/subscription",
        "html": "Overview\n\nSubscriptions are class constrained because a Subscription has identity, defined by the moment in time a particular subscriber attached to a publisher. Canceling a Subscription must be thread-safe.\n\nYou can only cancel a Subscription once.\n\nCanceling a subscription frees up any resources previously allocated by attaching the Subscriber.\n\nTopics\nRequesting Elements\nfunc request(Subscribers.Demand)\nTells a publisher that it may send more values to the subscriber.\n\nRequired\n\nstruct Demand\nA requested number of items, sent to a publisher from a subscriber through the subscription.\nRelationships\nInherits From\nCancellable\nCustomCombineIdentifierConvertible\nSee Also\nSubscribers\nProcessing Published Elements with Subscribers\nApply back pressure\u00a0to precisely control when publishers produce elements.\nprotocol Subscriber\nA protocol that declares a type that can receive input from a publisher.\nenum Subscribers\nA namespace for types that serve as subscribers.\nstruct AnySubscriber\nA type-erasing subscriber.\nenum Subscriptions\nA namespace for symbols related to subscriptions."
    },
    {
        "title": "Subject",
        "url": "https://developer.apple.com/documentation/combine/subject",
        "html": "Overview\n\nA subject is a publisher that you can use to \u201dinject\u201d values into a stream, by calling its send(_:) method. This can be useful for adapting existing imperative code to the Combine model.\n\nTopics\nDelivering Elements to Subscribers\nfunc send(Self.Output)\nSends a value to the subscriber.\n\nRequired\n\nfunc send()\nSends a void value to the subscriber.\nAvailable when Output is ().\nDelivering Life Cycle Events to Subscribers\nfunc send(subscription: Subscription)\nSends a subscription to the subscriber.\n\nRequired\n\nfunc send(completion: Subscribers.Completion<Self.Failure>)\nSends a completion signal to the subscriber.\n\nRequired\n\nRelationships\nInherits From\nPublisher\nConforming Types\nCurrentValueSubject\nPassthroughSubject\nSee Also\nSubjects\nclass CurrentValueSubject\nA subject that wraps a single value and publishes a new element whenever the value changes.\nclass PassthroughSubject\nA subject that broadcasts elements to downstream subscribers."
    },
    {
        "title": "CurrentValueSubject",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject",
        "html": "Overview\n\nUnlike PassthroughSubject, CurrentValueSubject maintains a buffer of the most recently published element.\n\nCalling send(_:) on a CurrentValueSubject also updates the current value, making it equivalent to updating the value directly.\n\nTopics\nCreating a Current Value Subject\ninit(Output)\nCreates a current value subject with the given initial value.\nAccessing the Current Value\nvar value: Output\nThe value wrapped by this subject, published as a new element whenever it changes.\nDelivering Elements to Subscribers\nfunc send(Output)\nSends a value to the subscriber.\nfunc send()\nSends a void value to the subscriber.\nAvailable when Output is ().\nDelivering Life Cycle Events to Subscribers\nfunc send(subscription: Subscription)\nSends a subscription to the subscriber.\nfunc send(completion: Subscribers.Completion<Failure>)\nSends a completion signal to the subscriber.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nSubject Implementations\nRelationships\nConforms To\nPublisher\nSubject\nSee Also\nSubjects\nprotocol Subject\nA publisher that exposes a method for outside callers to publish elements.\nclass PassthroughSubject\nA subject that broadcasts elements to downstream subscribers."
    },
    {
        "title": "ConnectablePublisher",
        "url": "https://developer.apple.com/documentation/combine/connectablepublisher",
        "html": "Overview\n\nUse a ConnectablePublisher when you need to perform additional configuration or setup prior to producing any elements.\n\nThis publisher doesn\u2019t produce any elements until you call its connect() method.\n\nUse makeConnectable() to create a ConnectablePublisher from any publisher whose failure type is Never.\n\nTopics\nPerforming Explicit Connections\nfunc connect() -> Cancellable\nConnects to the publisher, allowing it to produce elements, and returns an instance with which to cancel publishing.\n\nRequired\n\nConnecting Automatically\nfunc autoconnect() -> Publishers.Autoconnect<Self>\nAutomates the process of connecting or disconnecting from this connectable publisher.\nRelationships\nInherits From\nPublisher\nConforming Types\nPublishers.MakeConnectable\nPublishers.Multicast\nSee Also\nConnectable Publishers\nControlling Publishing with Connectable Publishers\nCoordinate when publishers start sending elements to subscribers."
    },
    {
        "title": "Processing Published Elements with Subscribers",
        "url": "https://developer.apple.com/documentation/combine/processing-published-elements-with-subscribers",
        "html": "Overview\n\nIn Combine, a Publisher produces elements, and a Subscriber acts on the elements it receives. However, a publisher can\u2019t send elements until the subscriber attaches and asks for them. The subscriber also controls the rate at which the publisher delivers elements, by using the Subscribers.Demand type to indicate how many elements it can receive. A subscriber can indicate demand in either of two ways:\n\nBy calling request(_:) on the Subscription instance that the publisher provided when the subscriber first subscribed.\n\nBy returning a new demand when the publisher calls the subscriber\u2019s receive(_:) method to deliver an element.\n\nDemand is additive: If a subscriber has demanded two elements, and then requests Subscribers.Demand(.max(3)), the publisher\u2019s unsatisfied demand is now five elements. If the publisher then sends an element, the unsatisfied demand decreases to four. Publishing elements is the only way to reduce unsatisfied demand; subscribers can\u2019t request negative demand.\n\nMany apps just use the operators sink(receiveValue:) and assign(to:on:) to create the convenience subscriber types Subscribers.Sink and Subscribers.Assign, respectively. These two subscribers issue a demand for unlimited when they first attach to the publisher. Once a publisher has unlimited demand, there can be no further negotiation of demand between subscriber and publisher.\n\nConsume Elements as the Publisher Produces Them\n\nWhen a publisher has high or unlimited demand, it could send elements faster than a subscriber can process them. This scenario could lead to elements being dropped, or rapidly increasing memory pressure as elements fill a buffer while they await processing.\n\nThis scenario can occur if you use the convenience subscribers, because they demand an unlimited number of elements. Ensure that the closure you provide to sink(receiveValue:) and the side-effects of assign(to:on:) adhere to the following traits:\n\nDon\u2019t block the publisher.\n\nDon\u2019t consume excessive memory by buffering elements.\n\nDon\u2019t get overwhelmed and fail to process elements.\n\nFortunately, many commonly used publishers, such as publishers associated with user-interface elements, publish at a manageable rate. Other common publishers only produce a single element, like the URL Loading System\u2019s URLSession.DataTaskPublisher. It\u2019s perfectly safe to use sink and assign subscribers with these publishers.\n\nApply Back Pressure with a Custom Subscriber\n\nTo control the rate at which the publisher sends elements to your subscriber, create a custom implementation of the Subscriber protocol. Use your implementation to specify demands that you know your subscriber can keep up with. As the subscriber receives elements, it can request more by returning a new demand value to receive(_:), or by calling request(_:) on the subscription. With either, your subscriber can then fine-tune the number of elements the publisher can send it at any given time.\n\nThis concept of controlling flow by signaling a subscriber\u2019s readiness to receive elements is called back pressure.\n\nEach publisher keeps track of its current unsatisfied demand, meaning how many more elements a subscriber has requested. Even automated sources like Foundation\u2019s Timer.TimerPublisher only produce elements when they have pending demand. The following example code illustrates this behavior.\n\n// Publisher: Uses a timer to emit the date once per second.\nlet timerPub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n\n\n// Subscriber: Waits 5 seconds after subscription, then requests a\n// maximum of 3 values.\nclass MySubscriber: Subscriber {\n    typealias Input = Date\n    typealias Failure = Never\n    var subscription: Subscription?\n    \n    func receive(subscription: Subscription) {\n        print(\"published                             received\")\n        self.subscription = subscription\n        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {\n            subscription.request(.max(3))\n        }\n    }\n    \n    func receive(_ input: Date) -> Subscribers.Demand {\n        print(\"\\(input)             \\(Date())\")\n        return Subscribers.Demand.none\n    }\n    \n    func receive(completion: Subscribers.Completion<Never>) {\n        print (\"--done--\")\n    }\n}\n\n\n// Subscribe to timerPub.\nlet mySub = MySubscriber()\nprint (\"Subscribing at \\(Date())\")\ntimerPub.subscribe(mySub)\n\n\nThe subscriber\u2019s receive(subscription:) implementation uses a five-second delay before it requests any elements from the publisher. During this period, the publisher exists and has a valid subscriber, but has zero demand, so it doesn\u2019t produce elements. It only starts publishing elements after the delay expires and the subscriber gives it a nonzero demand, as seen in the following output:\n\nSubscribing at 2019-12-09 18:57:06 +0000\npublished                             received\n2019-12-09 18:57:11 +0000             2019-12-09 18:57:11 +0000\n2019-12-09 18:57:12 +0000             2019-12-09 18:57:12 +0000\n2019-12-09 18:57:13 +0000             2019-12-09 18:57:13 +0000\n\n\nThis example only requests three elements, issuing the demand after the five-second delay expires. As a result, the publisher sends no further elements after the third, but also doesn\u2019t complete publishing by sending a Subscribers.Completion.finished value either, because the publisher is just waiting for more demand. To continue to receive elements, the subscriber could store the subscription and periodically request more elements. It could also indicate new demand as the return value from its receive(_:) implementation.\n\nManage Unlimited Demand by Using Back-Pressure Operators\n\nEven without writing a custom Subscriber, you can still apply back pressure by using one of Combine\u2019s buffering or timing operators:\n\nbuffer(size:prefetch:whenFull:) holds onto a fixed number of items from an upstream publisher. When full, the buffer either drops elements or throws an error.\n\ndebounce(for:scheduler:options:) publishes only when the upstream publisher stops publishing for a specified interval of time.\n\nthrottle(for:scheduler:latest:) produces elements at a given maximum rate. If it receives multiple elements during an interval, it sends only the newest or oldest.\n\ncollect(_:) and collect(_:options:) bundle elements until they exceed a given count or time interval, sending you an array of elements. This option is good if your subscriber can process multiple elements at the same time.\n\nBecause these operators control the number of elements your subscriber receives, you can attach a subscriber that requests unlimited elements, such as sink(receiveValue:) and assign(to:on:).\n\nSee Also\nSubscribers\nprotocol Subscriber\nA protocol that declares a type that can receive input from a publisher.\nenum Subscribers\nA namespace for types that serve as subscribers.\nstruct AnySubscriber\nA type-erasing subscriber.\nprotocol Subscription\nA protocol representing the connection of a subscriber to a publisher.\nenum Subscriptions\nA namespace for symbols related to subscriptions."
    },
    {
        "title": "Fail",
        "url": "https://developer.apple.com/documentation/combine/fail",
        "html": "Topics\nCreating a Fail Publisher\ninit(error: Failure)\nCreates a publisher that immediately terminates with the specified failure.\ninit(outputType: Output.Type, failure: Failure)\nCreates publisher with the given output type, that immediately terminates with the specified failure.\nInspecting Publisher Properties\nlet error: Failure\nThe failure to send when terminating the publisher.\nComparing Publishers\nstatic func == (Fail<Output, Failure>, Fail<Output, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Failure conforms to Equatable and Error.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nConvenience Publishers\nclass Future\nA publisher that eventually produces a single value and then finishes or fails.\nstruct Just\nA publisher that emits an output to each subscriber just once, and then finishes.\nstruct Deferred\nA publisher that awaits subscription before running the supplied closure to create a publisher for the new subscriber.\nstruct Empty\nA publisher that never publishes any values, and optionally finishes immediately.\nstruct Record\nA publisher that allows for recording a series of inputs and a completion, for later playback to each subscriber."
    },
    {
        "title": "Empty",
        "url": "https://developer.apple.com/documentation/combine/empty",
        "html": "Overview\n\nYou can create a \u201dNever\u201d publisher \u2014 one which never sends values and never finishes or fails \u2014 with the initializer Empty(completeImmediately: false).\n\nTopics\nCreating an Empty Publisher\ninit(completeImmediately: Bool)\nCreates an empty publisher.\ninit(completeImmediately: Bool, outputType: Output.Type, failureType: Failure.Type)\nCreates an empty publisher with the given completion behavior and output and failure types.\nInspecting Publisher Properties\nlet completeImmediately: Bool\nA Boolean value that indicates whether the publisher immediately sends a completion.\nComparing Publishers\nstatic func == (Empty<Output, Failure>, Empty<Output, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nConvenience Publishers\nclass Future\nA publisher that eventually produces a single value and then finishes or fails.\nstruct Just\nA publisher that emits an output to each subscriber just once, and then finishes.\nstruct Deferred\nA publisher that awaits subscription before running the supplied closure to create a publisher for the new subscriber.\nstruct Fail\nA publisher that immediately terminates with the specified error.\nstruct Record\nA publisher that allows for recording a series of inputs and a completion, for later playback to each subscriber."
    },
    {
        "title": "Controlling Publishing with Connectable Publishers",
        "url": "https://developer.apple.com/documentation/combine/controlling-publishing-with-connectable-publishers",
        "html": "Overview\n\nSometimes, you want to configure a publisher before it starts producing elements, such as when a publisher has properties that affect its behavior. But commonly used subscribers like sink(receiveValue:) demand unlimited elements immediately, which might prevent you from setting up the publisher the way you like. A publisher that produces values before you\u2019re ready for them can also be a problem when the publisher has two or more subscribers. This multi-subscriber scenario creates a race condition: the publisher can send elements to the first subscriber before the second even exists.\n\nConsider the scenario in the following figure. You create a URLSession.DataTaskPublisher and attach a sink subscriber to it (Subscriber 1) which causes the data task to start fetching the URL\u2019s data. At some later point, you attach a second subscriber (Subscriber 2). If the data task completes its download before the second subscriber attaches, the second subscriber misses the data and only sees the completion.\n\nHold Publishing by Using a Connectable Publisher\n\nTo prevent a publisher from sending elements before you\u2019re ready, Combine provides the ConnectablePublisher protocol. A connectable publisher produces no elements until you call its connect() method. Even if it\u2019s ready to produce elements and has unsatisfied demand, a connectable publisher doesn\u2019t deliver any elements to subscribers until you explicitly call connect().\n\nThe following figure shows the URLSession.DataTaskPublisher scenario from above, but with a ConnectablePublisher ahead of the subscribers. By waiting to call connect() until both subscribers attach, the data task doesn\u2019t start downloading until then. This eliminates the race condition and guarantees both subscribers can receive the data.\n\nTo use a ConnectablePublisher in your own Combine code, use the makeConnectable() operator to wrap an existing publisher with a Publishers.MakeConnectable instance. The following code shows how makeConnectable() fixes the data task publisher race condition described above. Typically, attaching a sink \u2014 identified here by the AnyCancellable it returns, cancellable1 \u2014 would cause the data task to start immediately. In this scenario, the second sink, identified as cancellable2, doesn\u2019t attach until one second later, and the data task publisher might complete before the second sink attaches. Instead, explicitly using a ConnectablePublisher causes the data task to start only after the app calls connect(), which it does after a two-second delay.\n\nlet url = URL(string: \"https://example.com/\")!\nlet connectable = URLSession.shared\n    .dataTaskPublisher(for: url)\n    .map() { $0.data }\n    .catch() { _ in Just(Data() )}\n    .share()\n    .makeConnectable()\n\n\ncancellable1 = connectable\n    .sink(receiveCompletion: { print(\"Received completion 1: \\($0).\") },\n          receiveValue: { print(\"Received data 1: \\($0.count) bytes.\") })\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n    self.cancellable2 = connectable\n        .sink(receiveCompletion: { print(\"Received completion 2: \\($0).\") },\n              receiveValue: { print(\"Received data 2: \\($0.count) bytes.\") })\n}\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n    self.connection = connectable.connect()\n}\n\n\nImportant\n\nconnect() returns a Cancellable instance that you need to retain. You can use this instance to cancel publishing, either by explicitly calling cancel() or allowing it to deinitialize.\n\nUse the Autoconnect Operator If You Don\u2019t Need to Explicitly Connect\n\nSome Combine publishers already implement ConnectablePublisher, such as Publishers.Multicast and Timer.TimerPublisher. Using these publishers can cause the opposite problem: having to explicitly connect() could be burdensome if you don\u2019t need to configure the publisher or attach multiple subscribers.\n\nFor cases like these, ConnectablePublisher provides the autoconnect() operator. This operator immediately calls connect() when a Subscriber attaches to the publisher with the subscribe(_:) method.\n\nThe following example uses autoconnect(), so a subscriber immediately receives elements from a once-a-second Timer.TimerPublisher. Without autoconnect(), the example would need to explicitly start the timer publisher by calling connect() at some point.\n\nlet cancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .sink() { date in\n        print (\"Date now: \\(date)\")\n     }\n\nSee Also\nConnectable Publishers\nprotocol ConnectablePublisher\nA publisher that provides an explicit means of connecting and canceling publication."
    },
    {
        "title": "Record",
        "url": "https://developer.apple.com/documentation/combine/record",
        "html": "Topics\nCreating a Record Publisher\ninit(output: [Output], completion: Subscribers.Completion<Failure>)\nCreates a record publisher to publish the provided elements, followed by the provided completion value.\ninit(record: (inout Record<Output, Failure>.Recording) -> Void)\nCreates a publisher to interactively record a series of outputs and a completion.\ninit(recording: Record<Output, Failure>.Recording)\nCreates a record publisher from an existing recording.\nInspecting Publisher Properties\nlet recording: Record<Output, Failure>.Recording\nThe recorded output and completion.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nStructures\nstruct Recording\nA recorded sequence of outputs, followed by a completion value.\nDefault Implementations\nDecodable Implementations\nEncodable Implementations\nPublisher Implementations\nRelationships\nConforms To\nDecodable\nEncodable\nPublisher\nSee Also\nConvenience Publishers\nclass Future\nA publisher that eventually produces a single value and then finishes or fails.\nstruct Just\nA publisher that emits an output to each subscriber just once, and then finishes.\nstruct Deferred\nA publisher that awaits subscription before running the supplied closure to create a publisher for the new subscriber.\nstruct Empty\nA publisher that never publishes any values, and optionally finishes immediately.\nstruct Fail\nA publisher that immediately terminates with the specified error."
    },
    {
        "title": "AnyCancellable",
        "url": "https://developer.apple.com/documentation/combine/anycancellable",
        "html": "Overview\n\nSubscriber implementations can use this type to provide a \u201ccancellation token\u201d that makes it possible for a caller to cancel a publisher, but not to use the Subscription object to request items.\n\nAn AnyCancellable instance automatically calls cancel() when deinitialized.\n\nTopics\nCreating a Type-Erased Cancellable\ninit(() -> Void)\nInitializes the cancellable object with the given cancel-time closure.\nCanceling Actions\nfunc cancel()\nCancel the activity.\nStoring AnyCancellable Instances\nfunc store<C>(in: inout C)\nStores this type-erasing cancellable instance in the specified collection.\nfunc store(in: inout Set<AnyCancellable>)\nStores this type-erasing cancellable instance in the specified set.\nOperators\nstatic func == (AnyCancellable, AnyCancellable) -> Bool\nReturns a Boolean value that indicates whether two instances are equal, as determined by comparing whether their references point to the same instance.\nInitializers\ninit<C>(C)\nInstance Properties\nvar hashValue: Int\nThe hash value.\nInstance Methods\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher.\nDefault Implementations\nEquatable Implementations\nRelationships\nConforms To\nCancellable\nEquatable\nHashable\nSee Also\nPublishers\nprotocol Publisher\nDeclares that a type can transmit a sequence of values over time.\nenum Publishers\nA namespace for types that serve as publishers.\nstruct AnyPublisher\nA publisher that performs type erasure by wrapping another publisher.\nstruct Published\nA type that publishes a property marked with an attribute.\nprotocol Cancellable\nA protocol indicating that an activity or action supports cancellation."
    },
    {
        "title": "Future",
        "url": "https://developer.apple.com/documentation/combine/future",
        "html": "Overview\n\nUse a future to perform some work and then asynchronously publish a single element. You initialize the future with a closure that takes a Future.Promise; the closure calls the promise with a Result that indicates either success or failure. In the success case, the future\u2019s downstream subscriber receives the element prior to the publishing stream finishing normally. If the result is an error, publishing terminates with that error.\n\nThe following example shows a method that uses a future to asynchronously publish a random number after a brief delay:\n\nfunc generateAsyncRandomNumberFromFuture() -> Future <Int, Never> {\n    return Future() { promise in\n        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n            let number = Int.random(in: 1...10)\n            promise(Result.success(number))\n        }\n    }\n}\n\n\nTo receive the published value, you use any Combine subscriber, such as a Subscribers.Sink, like this:\n\ncancellable = generateAsyncRandomNumberFromFuture()\n    .sink { number in print(\"Got random number \\(number).\") }\n\nIntegrating with Swift Concurrency\n\nTo integrate with the async-await syntax in Swift 5.5, Future can provide its value to an awaiting caller. This is particularly useful because unlike other types that conform to Publisher and potentially publish many elements, a Future only publishes one element (or fails). By using the value property, the above call point looks like this:\n\nlet number = await generateAsyncRandomNumberFromFuture().value\nprint(\"Got random number \\(number).\")\n\nAlternatives to Futures\n\nThe async-await syntax in Swift can also replace the use of a future entirely, for the case where you want to perform some operation after an asynchronous task completes.\n\nYou do this with the function doc://com.apple.documentation/documentation/Swift/3814988-withCheckedContinuation and its throwing equivalent, doc://com.apple.documentation/documentation/Swift/3814989-withCheckedThrowingContinuation. The following example performs the same asynchronous random number generation as the Future example above, but as an async method:\n\nfunc generateAsyncRandomNumberFromContinuation() async -> Int {\n    return await withCheckedContinuation { continuation in\n        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n            let number = Int.random(in: 1...10)\n            continuation.resume(returning: number)\n        }\n    }\n}\n\n\nThe call point for this method doesn\u2019t use a closure like the future\u2019s sink subscriber does; it simply awaits and assigns the result:\n\nlet asyncRandom = await generateAsyncRandomNumberFromContinuation()\n\n\nFor more information on continuations, see the doc://com.apple.documentation/documentation/swift/swift_standard_library/concurrency topic in the Swift standard library.\n\nTopics\nCreating a Future\ninit((Future<Output, Failure>.Promise) -> Void)\nCreates a publisher that invokes a promise closure when the publisher emits an element.\ntypealias Promise\nA type that represents a closure to invoke in the future, when an element or error is available.\nAccessing the Value Asynchronously\nvar value: Output\nThe published value of the future, delivered asynchronously.\nAvailable when Failure is Never.\nvar value: Output\nThe published value of the future or an error, delivered asynchronously.\nAvailable when Failure conforms to Error.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nConvenience Publishers\nstruct Just\nA publisher that emits an output to each subscriber just once, and then finishes.\nstruct Deferred\nA publisher that awaits subscription before running the supplied closure to create a publisher for the new subscriber.\nstruct Empty\nA publisher that never publishes any values, and optionally finishes immediately.\nstruct Fail\nA publisher that immediately terminates with the specified error.\nstruct Record\nA publisher that allows for recording a series of inputs and a completion, for later playback to each subscriber."
    },
    {
        "title": "Just",
        "url": "https://developer.apple.com/documentation/combine/just",
        "html": "Overview\n\nYou can use a Just publisher to start a chain of publishers. A Just publisher is also useful when replacing a value with Publishers.Catch.\n\nIn contrast with doc://com.apple.documentation/documentation/Swift/Result/Publisher, a Just publisher can\u2019t fail with an error. And unlike doc://com.apple.documentation/documentation/Swift/Optional/Publisher, a Just publisher always produces a value.\n\nTopics\nCreating a Just Publisher\ninit(Output)\nInitializes a publisher that emits the specified output just once.\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet output: Output\nThe one element that the publisher emits.\nComparing Publishers\nstatic func == (Just<Output>, Just<Output>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Output conforms to Equatable.\nstatic func != (Self, Self) -> Bool\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nEquatable Implementations\nPublisher Implementations\nRelationships\nConforms To\nEquatable\nPublisher\nSee Also\nConvenience Publishers\nclass Future\nA publisher that eventually produces a single value and then finishes or fails.\nstruct Deferred\nA publisher that awaits subscription before running the supplied closure to create a publisher for the new subscriber.\nstruct Empty\nA publisher that never publishes any values, and optionally finishes immediately.\nstruct Fail\nA publisher that immediately terminates with the specified error.\nstruct Record\nA publisher that allows for recording a series of inputs and a completion, for later playback to each subscriber."
    },
    {
        "title": "Deferred",
        "url": "https://developer.apple.com/documentation/combine/deferred",
        "html": "Topics\nCreating a Deferred Publisher\ninit(createPublisher: () -> DeferredPublisher)\nCreates a deferred publisher.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nInspecting Publisher Properties\nlet createPublisher: () -> DeferredPublisher\nThe closure to execute when this deferred publisher receives a subscription.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nConvenience Publishers\nclass Future\nA publisher that eventually produces a single value and then finishes or fails.\nstruct Just\nA publisher that emits an output to each subscriber just once, and then finishes.\nstruct Empty\nA publisher that never publishes any values, and optionally finishes immediately.\nstruct Fail\nA publisher that immediately terminates with the specified error.\nstruct Record\nA publisher that allows for recording a series of inputs and a completion, for later playback to each subscriber."
    },
    {
        "title": "Cancellable",
        "url": "https://developer.apple.com/documentation/combine/cancellable",
        "html": "Overview\n\nCalling cancel() frees up any allocated resources. It also stops side effects such as timers, network access, or disk I/O.\n\nTopics\nCanceling Actions\nfunc cancel()\nCancel the activity.\n\nRequired\n\nStoring Cancellable Instances\nfunc store<C>(in: inout C)\nStores this cancellable instance in the specified collection.\nfunc store(in: inout Set<AnyCancellable>)\nStores this cancellable instance in the specified set.\nInstance Methods\nfunc storeWhileEntityActive(Entity)\nRetains the Cancellable as long as the entity is active (see Entity.isActive). If the entity is deactivated, the Cancellable is released.\nRelationships\nInherited By\nSubscription\nConforming Types\nAnyCancellable\nSubscribers.Assign\nSubscribers.Sink\nSee Also\nPublishers\nprotocol Publisher\nDeclares that a type can transmit a sequence of values over time.\nenum Publishers\nA namespace for types that serve as publishers.\nstruct AnyPublisher\nA publisher that performs type erasure by wrapping another publisher.\nstruct Published\nA type that publishes a property marked with an attribute.\nclass AnyCancellable\nA type-erasing cancellable object that executes a provided closure when canceled."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/prepend(_:)-5dj9c",
        "html": "Parameters\npublisher\n\nThe prefixing publisher.\n\nReturn Value\n\nA publisher that prefixes the prefixing publisher\u2019s elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) to publish values from two publishers when you need to prepend one publisher\u2019s elements to another.\n\nIn the example below, a publisher of prefixValues publishes its elements before the dataElements publishes its elements:\n\nlet prefixValues = [0, 1, 255]\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(prefixValues.publisher)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/publisher/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "AnyPublisher",
        "url": "https://developer.apple.com/documentation/combine/anypublisher",
        "html": "Overview\n\nAnyPublisher is a concrete implementation of Publisher that has no significant properties of its own, and passes through elements and completion values from its upstream publisher.\n\nUse AnyPublisher to wrap a publisher whose type has details you don\u2019t want to expose across API boundaries, such as different modules. Wrapping a Subject with AnyPublisher also prevents callers from accessing its send(_:) method. When you use type erasure this way, you can change the underlying publisher implementation over time without affecting existing clients.\n\nYou can use Combine\u2019s eraseToAnyPublisher() operator to wrap a publisher with AnyPublisher.\n\nTopics\nCreating a Type-Erased Publisher\ninit<P>(P)\nCreates a type-erasing publisher to wrap the provided publisher.\nInspecting Publisher Properties\nvar description: String\nA textual representation of this instance.\nvar playgroundDescription: Any\nA custom playground description for this instance.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nCustomPlaygroundDisplayConvertible\nCustomStringConvertible\nPublisher\nConforms when Failure conforms to Error.\nSee Also\nPublishers\nprotocol Publisher\nDeclares that a type can transmit a sequence of values over time.\nAvailable when Failure conforms to Error.\nenum Publishers\nA namespace for types that serve as publishers.\nstruct Published\nA type that publishes a property marked with an attribute.\nprotocol Cancellable\nA protocol indicating that an activity or action supports cancellation.\nclass AnyCancellable\nA type-erasing cancellable object that executes a provided closure when canceled."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/publisher/values-1dm9r",
        "html": "Discussion\n\nThis property provides an AsyncPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the filter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property.\n\nSee Also\nAccessing Elements Asynchronously\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence."
    },
    {
        "title": "receive(_:)",
        "url": "https://developer.apple.com/documentation/combine/subscriber/receive(_:)",
        "html": "Required\n\nParameters\ninput\n\nThe published element.\n\nReturn Value\n\nA Subscribers.Demand instance indicating how many more elements the subscriber expects to receive.\n\nSee Also\nReceiving Elements\nfunc receive() -> Subscribers.Demand\nTells the subscriber that a publisher of void elements is ready to receive further requests.\nAvailable when Input is ()."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "Publishers",
        "url": "https://developer.apple.com/documentation/combine/publishers",
        "html": "Overview\n\nThe various operators defined as extensions on Publisher implement their functionality as classes or structures that extend this enumeration. For example, the contains(_:) operator returns a Publishers.Contains instance.\n\nTopics\nConvenience Publishers\nstruct Sequence\nA publisher that publishes a given sequence of elements.\nstruct Catch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\nWorking with Subscribers\nstruct ReceiveOn\nA publisher that delivers elements to its downstream subscriber on a specific scheduler.\nstruct SubscribeOn\nA publisher that receives elements from an upstream publisher on a specific scheduler.\nMapping Elements\nstruct Map\nA publisher that transforms all elements from the upstream publisher with a provided closure.\nstruct TryMap\nA publisher that transforms all elements from the upstream publisher with a provided error-throwing closure.\nstruct MapError\nA publisher that converts any failure from the upstream publisher into a new error.\nstruct Scan\nA publisher that transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nstruct TryScan\nA publisher that transforms elements from the upstream publisher by providing the current element to a failable closure along with the last value returned by the closure.\nstruct SetFailureType\nA publisher that appears to send a specified failure type.\nFiltering Elements\nstruct Filter\nA publisher that republishes all elements that match a provided closure.\nstruct TryFilter\nA publisher that republishes all elements that match a provided error-throwing closure.\nstruct CompactMap\nA publisher that republishes all non-nil results of calling a closure with each received element.\nstruct TryCompactMap\nA publisher that republishes all non-nil results of calling an error-throwing closure with each received element.\nstruct RemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element.\nstruct TryRemoveDuplicates\nA publisher that publishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nstruct ReplaceEmpty\nA publisher that replaces an empty stream with a provided element.\nstruct ReplaceError\nA publisher that replaces any errors in the stream with a provided element.\nReducing Elements\nstruct Collect\nA publisher that buffers items.\nstruct CollectByCount\nA publisher that buffers a maximum number of items.\nstruct CollectByTime\nA publisher that buffers and periodically publishes its items.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nstruct IgnoreOutput\nA publisher that ignores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nstruct Reduce\nA publisher that applies a closure to all received elements and produces an accumulated value when the upstream publisher finishes.\nstruct TryReduce\nA publisher that applies an error-throwing closure to all received elements and produces an accumulated value when the upstream publisher finishes.\nApplying Mathematical Operations on Elements\nstruct Count\nA publisher that publishes the number of elements received from the upstream publisher.\nstruct Comparison\nA publisher that republishes items from another publisher only if each new item is in increasing order from the previously-published item.\nstruct TryComparison\nA publisher that republishes items from another publisher only if each new item is in increasing order from the previously-published item, and fails if the ordering logic throws an error.\nApplying Matching Criteria to Elements\nstruct Contains\nA publisher that emits a Boolean value when it receives a specific element from its upstream publisher.\nstruct ContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the predicate closure.\nstruct TryContainsWhere\nA publisher that emits a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nstruct AllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given predicate.\nstruct TryAllSatisfy\nA publisher that publishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nstruct DropUntilOutput\nA publisher that ignores elements from the upstream publisher until it receives an element from second publisher.\nstruct Drop\nA publisher that omits a specified number of elements before republishing later elements.\nstruct DropWhile\nA publisher that omits elements from an upstream publisher until a given closure returns false.\nstruct TryDropWhile\nA publisher that omits elements from an upstream publisher until a given error-throwing closure returns false.\nstruct Concatenate\nA publisher that emits all of one publisher\u2019s elements before those from another publisher.\nstruct PrefixWhile\nA publisher that republishes elements while a predicate closure indicates publishing should continue.\nstruct TryPrefixWhile\nA publisher that republishes elements while an error-throwing predicate closure indicates publishing should continue.\nstruct PrefixUntilOutput\nA publisher that republishes elements until another publisher emits an element.\nSelecting Specific Elements\nstruct First\nA publisher that publishes the first element of a stream, then finishes.\nstruct FirstWhere\nA publisher that only publishes the first element of a stream to satisfy a predicate closure.\nstruct TryFirstWhere\nA publisher that only publishes the first element of a stream to satisfy a throwing predicate closure.\nstruct Last\nA publisher that waits until after the stream finishes, and then publishes the last element of the stream.\nstruct LastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies a predicate closure.\nstruct TryLastWhere\nA publisher that waits until after the stream finishes and then publishes the last element of the stream that satisfies an error-throwing predicate closure.\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements.\nCombining Elements from Multiple Publishers\nstruct CombineLatest\nA publisher that receives and combines the latest elements from two publishers.\nstruct CombineLatest3\nA publisher that receives and combines the latest elements from three publishers.\nstruct CombineLatest4\nA publisher that receives and combines the latest elements from four publishers.\nstruct Merge\nA publisher created by applying the merge function to two upstream publishers.\nstruct Merge3\nA publisher created by applying the merge function to three upstream publishers.\nstruct Merge4\nA publisher created by applying the merge function to four upstream publishers.\nstruct Merge5\nA publisher created by applying the merge function to five upstream publishers.\nstruct Merge6\nA publisher created by applying the merge function to six upstream publishers.\nstruct Merge7\nA publisher created by applying the merge function to seven upstream publishers.\nstruct Merge8\nA publisher created by applying the merge function to eight upstream publishers.\nstruct MergeMany\nA publisher created by applying the merge function to an arbitrary number of upstream publishers.\nstruct Zip\nA publisher created by applying the zip function to two upstream publishers.\nstruct Zip3\nA publisher created by applying the zip function to three upstream publishers.\nstruct Zip4\nA publisher created by applying the zip function to four upstream publishers.\nRepublishing Elements by Subscribing to New Publishers\nstruct FlatMap\nA publisher that transforms elements from an upstream publisher into a new publisher.\nstruct SwitchToLatest\nA publisher that flattens nested publishers.\nHandling Errors\nstruct AssertNoFailure\nA publisher that raises a fatal error upon receiving any failure, and otherwise republishes all received input.\nstruct Catch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\nstruct TryCatch\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher or producing a new error.\nstruct Retry\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\nControlling Timing\nstruct MeasureInterval\nA publisher that measures and emits the time interval between events received from an upstream publisher.\nstruct Debounce\nA publisher that publishes elements only after a specified time interval elapses between events.\nstruct Delay\nA publisher that delays delivery of elements and completion to the downstream receiver.\nstruct Throttle\nA publisher that publishes either the most-recent or first element published by the upstream publisher in a specified time interval.\nstruct Timeout\nA publisher that terminates publishing if the upstream publisher exceeds a specified time interval without producing an element.\nEncoding and Decoding\nstruct Decode\nA publisher that decodes elements received from an upstream publisher, using a given decoder.\nstruct Encode\nA publisher that encodes elements received from an upstream publisher, using a given encoder.\nIdentifying Properties with Key Paths\nstruct MapKeyPath\nA publisher that publishes the value of a key path.\nstruct MapKeyPath2\nA publisher that publishes the values of two key paths as a tuple.\nstruct MapKeyPath3\nA publisher that publishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nclass Multicast\nA publisher that uses a subject to deliver elements to multiple subscribers.\nclass Share\nA publisher that shares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nstruct Buffer\nA publisher that buffers elements from an upstream publisher.\nenum BufferingStrategy\nA strategy that handles exhaustion of a buffer\u2019s capacity.\nenum PrefetchStrategy\nA strategy for filling a buffer.\nUsing Explicit Publisher Connections\nclass Autoconnect\nA publisher that automatically connects to an upstream connectable publisher.\nstruct MakeConnectable\nA publisher that provides explicit connectability to another publisher.\nDebugging\nstruct Breakpoint\nA publisher that raises a debugger signal when a provided closure needs to stop the process in the debugger.\nstruct HandleEvents\nA publisher that performs the specified closures when publisher events occur.\nstruct Print\nA publisher that prints log messages for all publishing events, optionally prefixed with a given string.\nSee Also\nPublishers\nprotocol Publisher\nDeclares that a type can transmit a sequence of values over time.\nstruct AnyPublisher\nA publisher that performs type erasure by wrapping another publisher.\nstruct Published\nA type that publishes a property marked with an attribute.\nprotocol Cancellable\nA protocol indicating that an activity or action supports cancellation.\nclass AnyCancellable\nA type-erasing cancellable object that executes a provided closure when canceled."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/subscribe(_:)-3fk20",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\n\nRequired\n\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/publisher/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "Output",
        "url": "https://developer.apple.com/documentation/combine/publisher/output",
        "html": "Required\n\nSee Also\nDeclaring Publisher Topography\nassociatedtype Failure : Error\nThe kind of errors this publisher might publish.\n\nRequired"
    },
    {
        "title": "ObservableObjectPublisher",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher",
        "html": "Topics\nCreating an Observable Object Publisher\ninit()\nCreates an observable object publisher instance.\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher.\ntypealias Failure\nThe kind of errors this publisher might publish.\nDelivering Elements to Subscribers\nfunc send()\nSends the changed value to the downstream subscriber.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nRelationships\nConforms To\nPublisher\nSee Also\nObservable Objects\nprotocol ObservableObject\nA type of object with a publisher that emits before the object has changed."
    },
    {
        "title": "PassthroughSubject",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject",
        "html": "Overview\n\nAs a concrete implementation of Subject, the PassthroughSubject provides a convenient way to adapt existing imperative code to the Combine model.\n\nUnlike CurrentValueSubject, a PassthroughSubject doesn\u2019t have an initial value or a buffer of the most recently-published element. A PassthroughSubject drops values if there are no subscribers, or its current demand is zero.\n\nTopics\nCreating a Passthrough Subject\ninit()\nDelivering Elements to Subscribers\nfunc send(Output)\nSends a value to the subscriber.\nfunc send()\nSends a void value to the subscriber.\nAvailable when Output is ().\nDelivering Life Cycle Events to Subscribers\nfunc send(subscription: Subscription)\nSends a subscription to the subscriber.\nfunc send(completion: Subscribers.Completion<Failure>)\nSends a completion signal to the subscriber.\nApplying Operators\nPublisher Operators\nMethods that create downstream publishers or subscribers to act on the elements they receive.\nDefault Implementations\nPublisher Implementations\nSubject Implementations\nRelationships\nConforms To\nPublisher\nSubject\nSee Also\nSubjects\nprotocol Subject\nA publisher that exposes a method for outside callers to publish elements.\nclass CurrentValueSubject\nA subject that wraps a single value and publishes a new element whenever the value changes."
    },
    {
        "title": "Subscriptions",
        "url": "https://developer.apple.com/documentation/combine/subscriptions",
        "html": "Topics\nUsing Convenience Subscriptions\nstatic var empty: Subscription\nReturns the \u201cempty\u201d subscription.\nSee Also\nSubscribers\nProcessing Published Elements with Subscribers\nApply back pressure\u00a0to precisely control when publishers produce elements.\nprotocol Subscriber\nA protocol that declares a type that can receive input from a publisher.\nenum Subscribers\nA namespace for types that serve as subscribers.\nstruct AnySubscriber\nA type-erasing subscriber.\nprotocol Subscription\nA protocol representing the connection of a subscriber to a publisher."
    },
    {
        "title": "Subscribers",
        "url": "https://developer.apple.com/documentation/combine/subscribers",
        "html": "Topics\nRequesting Elements\nstruct Demand\nA requested number of items, sent to a publisher from a subscriber through the subscription.\nReceiving Life Cycle Events\nenum Completion\nA signal that a publisher doesn\u2019t produce additional elements, either due to normal completion or an error.\nUsing Convenience Subscribers\nclass Sink\nA simple subscriber that requests an unlimited number of values upon subscription.\nclass Assign\nA simple subscriber that assigns received elements to a property indicated by a key path.\nSee Also\nSubscribers\nProcessing Published Elements with Subscribers\nApply back pressure\u00a0to precisely control when publishers produce elements.\nprotocol Subscriber\nA protocol that declares a type that can receive input from a publisher.\nstruct AnySubscriber\nA type-erasing subscriber.\nprotocol Subscription\nA protocol representing the connection of a subscriber to a publisher.\nenum Subscriptions\nA namespace for symbols related to subscriptions."
    },
    {
        "title": "Published",
        "url": "https://developer.apple.com/documentation/combine/published",
        "html": "Overview\n\nPublishing a property with the @Published attribute creates a publisher of this type. You access the publisher with the $ operator, as shown here:\n\nclass Weather {\n    @Published var temperature: Double\n    init(temperature: Double) {\n        self.temperature = temperature\n    }\n}\n\n\nlet weather = Weather(temperature: 20)\ncancellable = weather.$temperature\n    .sink() {\n        print (\"Temperature now: \\($0)\")\n}\nweather.temperature = 25\n\n\n// Prints:\n// Temperature now: 20.0\n// Temperature now: 25.0\n\n\nWhen the property changes, publishing occurs in the property\u2019s willSet block, meaning subscribers receive the new value before it\u2019s actually set on the property. In the above example, the second time the sink executes its closure, it receives the parameter value 25. However, if the closure evaluated weather.temperature, the value returned would be 20.\n\nImportant\n\nThe @Published attribute is class constrained. Use it with properties of classes, not with non-class types like structures.\n\nSee Also\n\nassign(to:)\n\nTopics\nCreating a Published Instance\ninit(initialValue: Value)\nCreates the published instance with an initial value.\ninit(wrappedValue: Value)\nCreates the published instance with an initial wrapped value.\nPublishing the Value\nvar projectedValue: Published<Value>.Publisher\nThe property for which this instance exposes a publisher.\nstruct Publisher\nA publisher for properties marked with the @Published attribute.\nSee Also\nPublishers\nprotocol Publisher\nDeclares that a type can transmit a sequence of values over time.\nenum Publishers\nA namespace for types that serve as publishers.\nstruct AnyPublisher\nA publisher that performs type erasure by wrapping another publisher.\nprotocol Cancellable\nA protocol indicating that an activity or action supports cancellation.\nclass AnyCancellable\nA type-erasing cancellable object that executes a provided closure when canceled."
    },
    {
        "title": "Publisher",
        "url": "https://developer.apple.com/documentation/combine/publisher",
        "html": "Overview\n\nA publisher delivers elements to one or more Subscriber instances. The subscriber\u2019s Input and Failure associated types must match the Output and Failure types declared by the publisher. The publisher implements the receive(subscriber:)method to accept a subscriber.\n\nAfter this, the publisher can call the following methods on the subscriber:\n\nreceive(subscription:): Acknowledges the subscribe request and returns a Subscription instance. The subscriber uses the subscription to demand elements from the publisher and can use it to cancel publishing.\n\nreceive(_:): Delivers one element from the publisher to the subscriber.\n\nreceive(completion:):\u00a0Informs the subscriber that publishing has ended, either normally or with an error.\n\nEvery Publisher must adhere to this contract for downstream subscribers to function correctly.\n\nExtensions on Publisher define a wide variety of operators that you compose to create sophisticated event-processing chains. Each operator returns a type that implements the Publisher protocol Most of these types exist as extensions on the Publishers enumeration. For example, the map(_:) operator returns an instance of Publishers.Map.\n\nTip\n\nA Combine publisher fills a role similar to, but distinct from, the AsyncSequence in the Swift standard library. A Publisher and an AsyncSequence both produce elements over time. However, the pull model in Combine uses a Subscriber to request elements from a publisher, while Swift concurrency uses the for-await-in syntax to iterate over elements published by an AsyncSequence. Both APIs offer methods to modify the sequence by mapping or filtering elements, while only Combine provides time-based operations like debounce(for:scheduler:options:) and throttle(for:scheduler:latest:), and combining operations like merge(with:) and combineLatest(_:_:). To bridge the two approaches, the property values exposes a publisher\u2019s elements as an AsyncSequence, allowing you to iterate over them with for-await-in rather than attaching a Subscriber.\n\nCreating Your Own Publishers\n\nRather than implementing the Publisher protocol yourself, you can create your own publisher by using one of several types provided by the Combine framework:\n\nUse a concrete subclass of Subject, such as PassthroughSubject, to publish values on-demand by calling its send(_:) method.\n\nUse a CurrentValueSubject to publish whenever you update the subject\u2019s underlying value.\n\nAdd the @Published annotation to a property of one of your own types. In doing so, the property gains a publisher that emits an event whenever the property\u2019s value changes. See the Published type for an example of this approach.\n\nTopics\nDeclaring Publisher Topography\nassociatedtype Output\nThe kind of values published by this publisher.\n\nRequired\n\nassociatedtype Failure : Error\nThe kind of errors this publisher might publish.\n\nRequired\n\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\n\nRequired\n\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nenum TimeGroupingStrategy\nA strategy for collecting received elements.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>\nAppends a publisher\u2019s output with the specified sequence.\nfunc append<P>(P) -> Publishers.Concatenate<Self, P>\nAppends the output of this publisher with the elements emitted by the given publisher.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified sequence.\nfunc prepend<P>(P) -> Publishers.Concatenate<P, Self>\nPrefixes the output of this publisher with the elements emitted by the given publisher.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge<Self, P>\nCombines elements from this publisher with those from another publisher, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Self.Output.Failure.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Publishers.SetFailureType<Self.Output, Self.Failure>, Publishers.Map<Self, Publishers.SetFailureType<Self.Output, Self.Failure>>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Output.Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Self>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never and Output.Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nenum PrefetchStrategy\nA strategy for filling a buffer.\nenum BufferingStrategy\nA strategy that handles exhaustion of a buffer\u2019s capacity.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nAccessing Elements Asynchronously\nvar values: AsyncPublisher<Self>\nThe elements produced by the publisher, as an asynchronous sequence.\nAvailable when Failure is Never.\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nRelationships\nInherited By\nConnectablePublisher\nSubject\nConforming Types\nAnyPublisher\nConforms when Failure conforms to Error.\nCurrentValueSubject\nDeferred\nEmpty\nFail\nFuture\nJust\nObservableObjectPublisher\nPassthroughSubject\nPublished.Publisher\nPublishers.AllSatisfy\nPublishers.AssertNoFailure\nPublishers.Autoconnect\nPublishers.Breakpoint\nPublishers.Buffer\nPublishers.Catch\nPublishers.Collect\nPublishers.CollectByCount\nPublishers.CollectByTime\nPublishers.CombineLatest\nPublishers.CombineLatest3\nPublishers.CombineLatest4\nPublishers.CompactMap\nPublishers.Comparison\nPublishers.Concatenate\nPublishers.Contains\nPublishers.ContainsWhere\nPublishers.Count\nPublishers.Debounce\nPublishers.Decode\nPublishers.Delay\nPublishers.Drop\nPublishers.DropUntilOutput\nPublishers.DropWhile\nPublishers.Encode\nPublishers.Filter\nPublishers.First\nPublishers.FirstWhere\nPublishers.FlatMap\nPublishers.HandleEvents\nPublishers.IgnoreOutput\nPublishers.Last\nPublishers.LastWhere\nPublishers.MakeConnectable\nPublishers.Map\nPublishers.MapError\nPublishers.MapKeyPath\nPublishers.MapKeyPath2\nPublishers.MapKeyPath3\nPublishers.MeasureInterval\nPublishers.Merge\nPublishers.Merge3\nPublishers.Merge4\nPublishers.Merge5\nPublishers.Merge6\nPublishers.Merge7\nPublishers.Merge8\nPublishers.MergeMany\nPublishers.Multicast\nPublishers.Output\nPublishers.PrefixUntilOutput\nPublishers.PrefixWhile\nPublishers.Print\nPublishers.ReceiveOn\nPublishers.Reduce\nPublishers.RemoveDuplicates\nPublishers.ReplaceEmpty\nPublishers.ReplaceError\nPublishers.Retry\nPublishers.Scan\nPublishers.Sequence\nPublishers.SetFailureType\nPublishers.Share\nPublishers.SubscribeOn\nPublishers.SwitchToLatest\nPublishers.Throttle\nPublishers.Timeout\nPublishers.TryAllSatisfy\nPublishers.TryCatch\nPublishers.TryCompactMap\nPublishers.TryComparison\nPublishers.TryContainsWhere\nPublishers.TryDropWhile\nPublishers.TryFilter\nPublishers.TryFirstWhere\nPublishers.TryLastWhere\nPublishers.TryMap\nPublishers.TryPrefixWhile\nPublishers.TryReduce\nPublishers.TryRemoveDuplicates\nPublishers.TryScan\nPublishers.Zip\nPublishers.Zip3\nPublishers.Zip4\nRecord\nSee Also\nPublishers\nenum Publishers\nA namespace for types that serve as publishers.\nstruct AnyPublisher\nA publisher that performs type erasure by wrapping another publisher.\nAvailable when Failure conforms to Error.\nstruct Published\nA type that publishes a property marked with an attribute.\nprotocol Cancellable\nA protocol indicating that an activity or action supports cancellation.\nclass AnyCancellable\nA type-erasing cancellable object that executes a provided closure when canceled."
    },
    {
        "title": "Receiving and Handling Events with Combine",
        "url": "https://developer.apple.com/documentation/combine/receiving-and-handling-events-with-combine",
        "html": "Overview\n\nThe Combine framework provides a declarative approach for how your app processes events. Rather than potentially implementing multiple delegate callbacks or completion handler closures, you can create a single processing chain for a given event source. Each part of the chain is a Combine operator that performs a distinct action on the elements received from the previous step.\n\nConsider an app that needs to filter a table or collection view based on the contents of a text field. In AppKit, each keystroke in the text field produces a Notification that you can subscribe to with Combine. After receiving the notification, you can use operators to change the content and timing of event delivery, and use the final result to update your app\u2019s user interface.\n\nConnect a Publisher to a Subscriber\n\nTo receive the text field\u2019s notifications with Combine, access the default instance of NotificationCenter and call its publisher(for:object:) method. This call takes the notification name and source object that you want notifications from, and returns a publisher that produces notification elements.\n\nlet pub = NotificationCenter.default\n    .publisher(for: NSControl.textDidChangeNotification, object: filterField)\n\n\nYou use a Subscriber to receive elements from the publisher. The subscriber defines an associated type, Input, to declare the type that it receives. The publisher also defines a type, Output, to declare what it produces. The publisher and subscriber both define a type, Failure, to indicate the kind of error they produce or receive. To connect a subscriber to a producer, the Output must match the Input, and the Failure types must also match.\n\nCombine provides two built-in subscribers, which automatically match the output and failure types of their attached publisher:\n\nsink(receiveCompletion:receiveValue:) takes two closures. The first closure executes when it receives Subscribers.Completion, which is an enumeration that indicates whether the publisher finished normally or failed with an error. The second closure executes when it receives an element from the publisher.\n\nassign(to:on:) immediately assigns every element it receives to a property of a given object, using a key path to indicate the property.\n\nFor example, you can use the sink subscriber to log when the publisher completes, and each time it receives an element:\n\nlet sub = NotificationCenter.default\n    .publisher(for: NSControl.textDidChangeNotification, object: filterField)\n    .sink(receiveCompletion: { print ($0) },\n          receiveValue: { print ($0) })\n\n\nBoth the sink(receiveCompletion:receiveValue:) and assign(to:on:) subscribers request an unlimited number of elements from their publishers. To control the rate at which you receive elements, create your own subscriber by implementing the Subscriber protocol.\n\nChange the Output Type with Operators\n\nThe sink subscriber in the previous section performs all its work in the receiveValue closure. This could be burdensome if it needs to perform a lot of custom work with received elements or maintain state between invocations. The advantage of Combine comes from combining operators to customize event delivery.\n\nFor example, NotificationCenter.Publisher.Output isn\u2019t a convenient type to receive in the callback if all you need is the text field\u2019s string value. Since a publisher\u2019s output is essentially a sequence of elements over time, Combine offers sequence-modifying operators like map(_:), flatMap(maxPublishers:_:), and reduce(_:_:). The behavior of these operators is similar to their equivalents in the Swift standard library.\n\nTo change the output type of the publisher, you add a map(_:) operator whose closure returns a different type. In this case, you can get the notification\u2019s object as an NSTextField, and then get the field\u2019s stringValue.\n\nlet sub = NotificationCenter.default\n    .publisher(for: NSControl.textDidChangeNotification, object: filterField)\n    .map( { ($0.object as! NSTextField).stringValue } )\n    .sink(receiveCompletion: { print ($0) },\n          receiveValue: { print ($0) })\n\n\nAfter the publisher chain produces the type you want, replace sink(receiveCompletion:receiveValue:) with assign(to:on:). The following example takes the strings it receives from the publisher chain and assigns them to the filterString of a custom view model object:\n\nlet sub = NotificationCenter.default\n    .publisher(for: NSControl.textDidChangeNotification, object: filterField)\n    .map( { ($0.object as! NSTextField).stringValue } )\n    .assign(to: \\MyViewModel.filterString, on: myViewModel)\n\nCustomize Publishers with Operators\n\nYou can extend the Publisher instance with an operator that performs actions that you\u2019d otherwise need to code manually. Here are three ways you could use operators to improve this event-processing chain:\n\nRather than updating the view model with any string typed into the text field, you could use the filter(_:) operator to ignore input under a certain length or to reject non-alphanumeric characters.\n\nIf the filtering operation is expensive \u2014 for example, if it\u2019s querying a large database \u2014 you might want to wait for the user to stop typing. For this, the debounce(for:scheduler:options:) operator lets you set a minimum period of time that must elapse before a publisher emits an event. The RunLoop class provides conveniences for specifying the time delay in seconds or milliseconds.\n\nIf the results update the UI, you can deliver callbacks to the main thread by calling the receive(on:options:) method. By specifying the Scheduler instance provided by the RunLoop class as the first parameter, you tell Combine to call your subscriber on the main run loop.\n\nThe resulting publisher declaration follows:\n\nlet sub = NotificationCenter.default\n    .publisher(for: NSControl.textDidChangeNotification, object: filterField)\n    .map( { ($0.object as! NSTextField).stringValue } )\n    .filter( { $0.unicodeScalars.allSatisfy({CharacterSet.alphanumerics.contains($0)}) } )\n    .debounce(for: .milliseconds(500), scheduler: RunLoop.main)\n    .receive(on: RunLoop.main)\n    .assign(to:\\MyViewModel.filterString, on: myViewModel)\n\nCancel Publishing when Desired\n\nA publisher continues to emit elements until it completes normally or fails. If you no longer want to subscribe to the publisher, you can cancel the subscription. The subscriber types created by sink(receiveCompletion:receiveValue:) and assign(to:on:) both implement the Cancellable protocol, which provides a cancel() method:\n\nsub?.cancel()\n\n\nIf you create a custom Subscriber, the publisher sends a Subscription object when you first subscribe to it. Store this subscription, and then call its cancel() method when you want to cancel publishing. When you create a custom subscriber, you should implement the Cancellable protocol, and have your cancel() implementation forward the call to the stored subscription."
    },
    {
        "title": "Combine",
        "url": "https://developer.apple.com/documentation/combine",
        "html": "Overview\n\nThe Combine framework provides a declarative Swift API for processing values over time. These values can represent many kinds of asynchronous events. Combine declares publishers to expose values that can change over time, and subscribers to receive those values from the publishers.\n\nThe Publisher protocol declares a type that can deliver a sequence of values over time. Publishers have operators to act on the values received from upstream publishers and republish them.\n\nAt the end of a chain of publishers, a Subscriber acts on elements as it receives them. Publishers only emit values when explicitly requested to do so by subscribers. This puts your subscriber code in control of how fast it receives events from the publishers it\u2019s connected to.\n\nSeveral Foundation types expose their functionality through publishers, including Timer, NotificationCenter, and URLSession. Combine also provides a built-in publisher for any property that\u2019s compliant with Key-Value Observing.\n\nYou can combine the output of multiple publishers and coordinate their interaction. For example, you can subscribe to updates from a text field\u2019s publisher, and use the text to perform URL requests. You can then use another publisher to process the responses and use them to update your app.\n\nBy adopting Combine, you\u2019ll make your code easier to read and maintain, by centralizing your event-processing code and eliminating troublesome techniques like nested closures and convention-based callbacks.\n\nTopics\nEssentials\nReceiving and Handling Events with Combine\nCustomize and receive events from asynchronous sources.\nPublishers\nprotocol Publisher\nDeclares that a type can transmit a sequence of values over time.\nenum Publishers\nA namespace for types that serve as publishers.\nstruct AnyPublisher\nA publisher that performs type erasure by wrapping another publisher.\nstruct Published\nA type that publishes a property marked with an attribute.\nprotocol Cancellable\nA protocol indicating that an activity or action supports cancellation.\nclass AnyCancellable\nA type-erasing cancellable object that executes a provided closure when canceled.\nConvenience Publishers\nclass Future\nA publisher that eventually produces a single value and then finishes or fails.\nstruct Just\nA publisher that emits an output to each subscriber just once, and then finishes.\nstruct Deferred\nA publisher that awaits subscription before running the supplied closure to create a publisher for the new subscriber.\nstruct Empty\nA publisher that never publishes any values, and optionally finishes immediately.\nstruct Fail\nA publisher that immediately terminates with the specified error.\nstruct Record\nA publisher that allows for recording a series of inputs and a completion, for later playback to each subscriber.\nConnectable Publishers\nControlling Publishing with Connectable Publishers\nCoordinate when publishers start sending elements to subscribers.\nprotocol ConnectablePublisher\nA publisher that provides an explicit means of connecting and canceling publication.\nSubscribers\nProcessing Published Elements with Subscribers\nApply back pressure\u00a0to precisely control when publishers produce elements.\nprotocol Subscriber\nA protocol that declares a type that can receive input from a publisher.\nenum Subscribers\nA namespace for types that serve as subscribers.\nstruct AnySubscriber\nA type-erasing subscriber.\nprotocol Subscription\nA protocol representing the connection of a subscriber to a publisher.\nenum Subscriptions\nA namespace for symbols related to subscriptions.\nSubjects\nprotocol Subject\nA publisher that exposes a method for outside callers to publish elements.\nclass CurrentValueSubject\nA subject that wraps a single value and publishes a new element whenever the value changes.\nclass PassthroughSubject\nA subject that broadcasts elements to downstream subscribers.\nSchedulers\nprotocol Scheduler\nA protocol that defines when and how to execute a closure.\nstruct ImmediateScheduler\nA scheduler for performing synchronous actions.\nprotocol SchedulerTimeIntervalConvertible\nA protocol that provides a scheduler with an expression for relative time.\nCombine Migration\nRouting Notifications to Combine Subscribers\nDeliver notifications to subscribers by using notification centers\u2019 publishers.\nReplacing Foundation Timers with Timer Publishers\nPublish elements periodically by using a timer.\nPerforming Key-Value Observing with Combine\nExpose KVO changes with a Combine publisher.\nUsing Combine for Your App\u2019s Asynchronous Code\nApply common patterns to migrate your closure-based, event-handling code.\nObservable Objects\nprotocol ObservableObject\nA type of object with a publisher that emits before the object has changed.\nclass ObservableObjectPublisher\nA publisher that publishes changes from observable objects.\nAsynchronous Publishers\nstruct AsyncPublisher\nA publisher that exposes its elements as an asynchronous sequence.\nstruct AsyncThrowingPublisher\nA publisher that exposes its elements as a throwing asynchronous sequence.\nEncoders and Decoders\nprotocol TopLevelEncoder\nA type that defines methods for encoding.\nprotocol TopLevelDecoder\nA type that defines methods for decoding.\nDebugging Identifiers\nprotocol CustomCombineIdentifierConvertible\nA protocol for uniquely identifying publisher streams.\nstruct CombineIdentifier\nA unique identifier for identifying publisher streams."
    }
]